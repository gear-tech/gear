// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_gear_builtin_actor`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-24, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/gear
// benchmark
// pallet
// --pallet
// pallet_gear_builtin_actor
// --extrinsic=base_handle_weight
// --execution=wasm
// --wasm-execution=compiled
// --steps
// 50
// --repeat
// 20
// --chain=vara-dev
// --output
// .

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_gear_builtin_actor`.
pub trait WeightInfo {
    fn base_handle_weight() -> Weight;
    fn decode_bytes(a: u32, ) -> Weight;
    fn bls12_381_multi_miller_loop(c: u32, ) -> Weight;
}

/// Weights for `pallet_gear_builtin_actor` using a Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: GearBuiltinActor Actors (r:1 w:0)
	/// Proof Skipped: GearBuiltinActor Actors (max_values: None, max_size: None, mode: Measured)
	fn base_handle_weight() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `133`
		//  Estimated: `3598`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3598))
			.saturating_add(T::DbWeight::get().reads(1))
	}
    /// The range of component `a` is `[0, 33554332]`.
    fn decode_bytes(a: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 0_000 picoseconds.
        Weight::from_parts(0, 0)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(160, 0).saturating_mul(a.into()))
    }
    /// The range of component `c` is `[0, 100]`.
    fn bls12_381_multi_miller_loop(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_000_000 picoseconds.
        Weight::from_parts(273_990_134, 0)
            // Standard Error: 723_591
            .saturating_add(Weight::from_parts(149_551_274, 0).saturating_mul(c.into()))
    }
}

// Weights implementation for backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: GearBuiltinActor Actors (r:1 w:0)
	/// Proof Skipped: GearBuiltinActor Actors (max_values: None, max_size: None, mode: Measured)
	fn base_handle_weight() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `133`
		//  Estimated: `3598`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3598))
			.saturating_add(RocksDbWeight::get().reads(1))
	}
    /// The range of component `a` is `[0, 33554332]`.
    fn decode_bytes(a: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 0_000 picoseconds.
        Weight::from_parts(0, 0)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(160, 0).saturating_mul(a.into()))
    }
    /// The range of component `c` is `[0, 100]`.
    fn bls12_381_multi_miller_loop(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_000_000 picoseconds.
        Weight::from_parts(273_990_134, 0)
            // Standard Error: 723_591
            .saturating_add(Weight::from_parts(149_551_274, 0).saturating_mul(c.into()))
    }
}
