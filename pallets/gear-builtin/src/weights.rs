// This file is part of Gear.

// Copyright (C) 2022-2025 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear_builtin
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-10-08, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --runtime=./target/production/wbuild/vara-runtime/vara_runtime.compact.compressed.wasm --genesis-builder=runtime --genesis-builder-preset=development --steps=50 --repeat=20 --pallet=pallet_gear_builtin --extrinsic=* --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear_builtin.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear_builtin.
pub trait WeightInfo {
    fn calculate_id() -> Weight;
    fn create_dispatcher() -> Weight;
    fn decode_bytes(a: u32, ) -> Weight;
    fn bls12_381_multi_miller_loop(c: u32, ) -> Weight;
    fn bls12_381_final_exponentiation() -> Weight;
    fn bls12_381_msm_g1(c: u32, ) -> Weight;
    fn bls12_381_msm_g2(c: u32, ) -> Weight;
    fn bls12_381_mul_projective_g1(c: u32, ) -> Weight;
    fn bls12_381_mul_projective_g2(c: u32, ) -> Weight;
    fn bls12_381_aggregate_g1(c: u32, ) -> Weight;
    fn bls12_381_map_to_g2affine(c: u32, ) -> Weight;
}

/// Weights for pallet_gear_builtin using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn calculate_id() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 635_000 picoseconds.
        Weight::from_parts(688_000, 0)
    }
    fn create_dispatcher() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_136_000 picoseconds.
        Weight::from_parts(2_212_000, 0)
    }
    /// The range of component `a` is `[1, 8388608]`.
    fn decode_bytes(a: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 241_000 picoseconds.
        Weight::from_parts(8_604_887, 0)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(227, 0).saturating_mul(a.into()))
    }
    /// The range of component `c` is `[0, 100]`.
    fn bls12_381_multi_miller_loop(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_642_000 picoseconds.
        Weight::from_parts(711_714_186, 0)
            // Standard Error: 475_079
            .saturating_add(Weight::from_parts(263_162_450, 0).saturating_mul(c.into()))
    }
    fn bls12_381_final_exponentiation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 889_380_000 picoseconds.
        Weight::from_parts(907_204_000, 0)
    }
    /// The range of component `c` is `[1, 1000]`.
    fn bls12_381_msm_g1(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 261_053_000 picoseconds.
        Weight::from_parts(888_025_357, 0)
            // Standard Error: 23_549
            .saturating_add(Weight::from_parts(6_840_908, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[1, 1000]`.
    fn bls12_381_msm_g2(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 829_758_000 picoseconds.
        Weight::from_parts(2_262_594_441, 0)
            // Standard Error: 71_616
            .saturating_add(Weight::from_parts(21_540_134, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[1, 100]`.
    fn bls12_381_mul_projective_g1(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_924_000 picoseconds.
        Weight::from_parts(63_219_000, 0)
            // Standard Error: 30_607
            .saturating_add(Weight::from_parts(67_921_868, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[1, 100]`.
    fn bls12_381_mul_projective_g2(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 194_682_000 picoseconds.
        Weight::from_parts(36_600_561, 0)
            // Standard Error: 37_840
            .saturating_add(Weight::from_parts(207_937_360, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[1, 1000]`.
    fn bls12_381_aggregate_g1(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_066_000 picoseconds.
        Weight::from_parts(13_912_695, 0)
            // Standard Error: 411
            .saturating_add(Weight::from_parts(1_224_126, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 8388608]`.
    fn bls12_381_map_to_g2affine(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 699_566_000 picoseconds.
        Weight::from_parts(712_006_199, 0)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(1_014, 0).saturating_mul(c.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn calculate_id() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 635_000 picoseconds.
        Weight::from_parts(688_000, 0)
    }
    fn create_dispatcher() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_136_000 picoseconds.
        Weight::from_parts(2_212_000, 0)
    }
    /// The range of component `a` is `[1, 8388608]`.
    fn decode_bytes(a: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 241_000 picoseconds.
        Weight::from_parts(8_604_887, 0)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(227, 0).saturating_mul(a.into()))
    }
    /// The range of component `c` is `[0, 100]`.
    fn bls12_381_multi_miller_loop(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_642_000 picoseconds.
        Weight::from_parts(711_714_186, 0)
            // Standard Error: 475_079
            .saturating_add(Weight::from_parts(263_162_450, 0).saturating_mul(c.into()))
    }
    fn bls12_381_final_exponentiation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 889_380_000 picoseconds.
        Weight::from_parts(907_204_000, 0)
    }
    /// The range of component `c` is `[1, 1000]`.
    fn bls12_381_msm_g1(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 261_053_000 picoseconds.
        Weight::from_parts(888_025_357, 0)
            // Standard Error: 23_549
            .saturating_add(Weight::from_parts(6_840_908, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[1, 1000]`.
    fn bls12_381_msm_g2(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 829_758_000 picoseconds.
        Weight::from_parts(2_262_594_441, 0)
            // Standard Error: 71_616
            .saturating_add(Weight::from_parts(21_540_134, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[1, 100]`.
    fn bls12_381_mul_projective_g1(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_924_000 picoseconds.
        Weight::from_parts(63_219_000, 0)
            // Standard Error: 30_607
            .saturating_add(Weight::from_parts(67_921_868, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[1, 100]`.
    fn bls12_381_mul_projective_g2(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 194_682_000 picoseconds.
        Weight::from_parts(36_600_561, 0)
            // Standard Error: 37_840
            .saturating_add(Weight::from_parts(207_937_360, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[1, 1000]`.
    fn bls12_381_aggregate_g1(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_066_000 picoseconds.
        Weight::from_parts(13_912_695, 0)
            // Standard Error: 411
            .saturating_add(Weight::from_parts(1_224_126, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 8388608]`.
    fn bls12_381_map_to_g2affine(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 699_566_000 picoseconds.
        Weight::from_parts(712_006_199, 0)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(1_014, 0).saturating_mul(c.into()))
    }
}
