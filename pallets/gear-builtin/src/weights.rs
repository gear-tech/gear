// This file is part of Gear.

// Copyright (C) 2024 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_gear_builtin`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/gear
// benchmark
// pallet
// --pallet
// pallet_gear_builtin
// --extrinsic=calculate_id,provide
// --wasm-execution=compiled
// --steps
// 50
// --repeat
// 2000
// --chain=vara-dev
// --output
// .

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_gear_builtin`.
pub trait WeightInfo {
	fn calculate_id() -> Weight;
	fn create_dispatcher() -> Weight;
	fn decode_bytes(a: u32, ) -> Weight;
	fn bls12_381_multi_miller_loop(c: u32, ) -> Weight;
	fn bls12_381_final_exponentiation() -> Weight;
	fn bls12_381_msm_g1(c: u32, ) -> Weight;
	fn bls12_381_msm_g2(c: u32, ) -> Weight;
	fn bls12_381_mul_projective_g1(c: u32, ) -> Weight;
	fn bls12_381_mul_projective_g2(c: u32, ) -> Weight;
}

/// Weights for `pallet_gear_builtin` using a Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn calculate_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 0_000 picoseconds.
		Weight::from_parts(1_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn create_dispatcher() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `a` is `[0, 33554332]`.
	fn decode_bytes(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 0_000 picoseconds.
		Weight::from_parts(0, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(160, 0).saturating_mul(a.into()))
	}
	/// The range of component `c` is `[0, 100]`.
	fn bls12_381_multi_miller_loop(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(273_990_134, 0)
			// Standard Error: 723_591
			.saturating_add(Weight::from_parts(149_551_274, 0).saturating_mul(c.into()))
	}
	fn bls12_381_final_exponentiation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 539_000_000 picoseconds.
		Weight::from_parts(554_000_000, 0)
	}
	/// The range of component `c` is `[0, 1000]`.
	fn bls12_381_msm_g1(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(522_081_240, 0)
			// Standard Error: 103_908
			.saturating_add(Weight::from_parts(4_129_174, 0).saturating_mul(c.into()))
	}
	/// The range of component `c` is `[0, 1000]`.
	fn bls12_381_msm_g2(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(521_472_222, 0)
			// Standard Error: 451_388
			.saturating_add(Weight::from_parts(12_974_500, 0).saturating_mul(c.into()))
	}
	/// The range of component `c` is `[1, 100]`.
	fn bls12_381_mul_projective_g1(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(36_000_000, 0)
			// Standard Error: 92_373
			.saturating_add(Weight::from_parts(38_727_595, 0).saturating_mul(c.into()))
	}
	/// The range of component `c` is `[1, 100]`.
	fn bls12_381_mul_projective_g2(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 110_000_000 picoseconds.
		Weight::from_parts(111_000_000, 0)
			// Standard Error: 286_785
			.saturating_add(Weight::from_parts(114_799_709, 0).saturating_mul(c.into()))
	}
}

impl WeightInfo for () {
	fn calculate_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 0_000 picoseconds.
		Weight::from_parts(1_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn create_dispatcher() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `a` is `[0, 33554332]`.
	fn decode_bytes(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 0_000 picoseconds.
		Weight::from_parts(0, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(160, 0).saturating_mul(a.into()))
	}
	/// The range of component `c` is `[0, 100]`.
	fn bls12_381_multi_miller_loop(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(273_990_134, 0)
			// Standard Error: 723_591
			.saturating_add(Weight::from_parts(149_551_274, 0).saturating_mul(c.into()))
	}
	fn bls12_381_final_exponentiation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 539_000_000 picoseconds.
		Weight::from_parts(554_000_000, 0)
	}
	/// The range of component `c` is `[0, 1000]`.
	fn bls12_381_msm_g1(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(522_081_240, 0)
			// Standard Error: 103_908
			.saturating_add(Weight::from_parts(4_129_174, 0).saturating_mul(c.into()))
	}
	/// The range of component `c` is `[0, 1000]`.
	fn bls12_381_msm_g2(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(521_472_222, 0)
			// Standard Error: 451_388
			.saturating_add(Weight::from_parts(12_974_500, 0).saturating_mul(c.into()))
	}
	/// The range of component `c` is `[1, 100]`.
	fn bls12_381_mul_projective_g1(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(36_000_000, 0)
			// Standard Error: 92_373
			.saturating_add(Weight::from_parts(38_727_595, 0).saturating_mul(c.into()))
	}
	/// The range of component `c` is `[1, 100]`.
	fn bls12_381_mul_projective_g2(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 110_000_000 picoseconds.
		Weight::from_parts(111_000_000, 0)
			// Standard Error: 286_785
			.saturating_add(Weight::from_parts(114_799_709, 0).saturating_mul(c.into()))
	}
}
