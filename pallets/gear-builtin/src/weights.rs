// This file is part of Gear.

// Copyright (C) 2022-2024 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear_builtin
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-09-20, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear_builtin --extrinsic=* --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear_builtin.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear_builtin.
pub trait WeightInfo {
    fn calculate_id() -> Weight;
    fn create_dispatcher() -> Weight;
    fn decode_bytes(a: u32, ) -> Weight;
    fn bls12_381_multi_miller_loop(c: u32, ) -> Weight;
    fn bls12_381_final_exponentiation() -> Weight;
    fn bls12_381_msm_g1(c: u32, ) -> Weight;
    fn bls12_381_msm_g2(c: u32, ) -> Weight;
    fn bls12_381_mul_projective_g1(c: u32, ) -> Weight;
    fn bls12_381_mul_projective_g2(c: u32, ) -> Weight;
    fn bls12_381_aggregate_g1(c: u32, ) -> Weight;
    fn bls12_381_map_to_g2affine(c: u32, ) -> Weight;
}

/// Weights for pallet_gear_builtin using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn calculate_id() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 546_000 picoseconds.
        Weight::from_parts(605_000, 0)
    }
    fn create_dispatcher() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_395_000 picoseconds.
        Weight::from_parts(1_499_000, 0)
    }
    /// The range of component `a` is `[1, 8388608]`.
    fn decode_bytes(a: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 385_000 picoseconds.
        Weight::from_parts(437_000, 0)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(250, 0).saturating_mul(a.into()))
    }
    /// The range of component `c` is `[0, 100]`.
    fn bls12_381_multi_miller_loop(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_593_000 picoseconds.
        Weight::from_parts(618_950_399, 0)
            // Standard Error: 371_491
            .saturating_add(Weight::from_parts(226_542_107, 0).saturating_mul(c.into()))
    }
    fn bls12_381_final_exponentiation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 770_425_000 picoseconds.
        Weight::from_parts(786_349_000, 0)
    }
    /// The range of component `c` is `[1, 1000]`.
    fn bls12_381_msm_g1(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 241_665_000 picoseconds.
        Weight::from_parts(824_022_674, 0)
            // Standard Error: 22_480
            .saturating_add(Weight::from_parts(5_968_680, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[1, 1000]`.
    fn bls12_381_msm_g2(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 690_303_000 picoseconds.
        Weight::from_parts(2_004_452_957, 0)
            // Standard Error: 65_379
            .saturating_add(Weight::from_parts(18_461_784, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[1, 100]`.
    fn bls12_381_mul_projective_g1(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 56_207_000 picoseconds.
        Weight::from_parts(59_086_000, 0)
            // Standard Error: 26_386
            .saturating_add(Weight::from_parts(60_142_922, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[1, 100]`.
    fn bls12_381_mul_projective_g2(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 165_996_000 picoseconds.
        Weight::from_parts(28_607_830, 0)
            // Standard Error: 32_244
            .saturating_add(Weight::from_parts(177_949_959, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[1, 1000]`.
    fn bls12_381_aggregate_g1(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 988_000 picoseconds.
        Weight::from_parts(12_065_428, 0)
            // Standard Error: 438
            .saturating_add(Weight::from_parts(1_074_459, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 8388608]`.
    fn bls12_381_map_to_g2affine(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 606_138_000 picoseconds.
        Weight::from_parts(614_967_785, 0)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(887, 0).saturating_mul(c.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn calculate_id() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 546_000 picoseconds.
        Weight::from_parts(605_000, 0)
    }
    fn create_dispatcher() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_395_000 picoseconds.
        Weight::from_parts(1_499_000, 0)
    }
    /// The range of component `a` is `[1, 8388608]`.
    fn decode_bytes(a: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 385_000 picoseconds.
        Weight::from_parts(437_000, 0)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(250, 0).saturating_mul(a.into()))
    }
    /// The range of component `c` is `[0, 100]`.
    fn bls12_381_multi_miller_loop(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_593_000 picoseconds.
        Weight::from_parts(618_950_399, 0)
            // Standard Error: 371_491
            .saturating_add(Weight::from_parts(226_542_107, 0).saturating_mul(c.into()))
    }
    fn bls12_381_final_exponentiation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 770_425_000 picoseconds.
        Weight::from_parts(786_349_000, 0)
    }
    /// The range of component `c` is `[1, 1000]`.
    fn bls12_381_msm_g1(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 241_665_000 picoseconds.
        Weight::from_parts(824_022_674, 0)
            // Standard Error: 22_480
            .saturating_add(Weight::from_parts(5_968_680, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[1, 1000]`.
    fn bls12_381_msm_g2(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 690_303_000 picoseconds.
        Weight::from_parts(2_004_452_957, 0)
            // Standard Error: 65_379
            .saturating_add(Weight::from_parts(18_461_784, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[1, 100]`.
    fn bls12_381_mul_projective_g1(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 56_207_000 picoseconds.
        Weight::from_parts(59_086_000, 0)
            // Standard Error: 26_386
            .saturating_add(Weight::from_parts(60_142_922, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[1, 100]`.
    fn bls12_381_mul_projective_g2(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 165_996_000 picoseconds.
        Weight::from_parts(28_607_830, 0)
            // Standard Error: 32_244
            .saturating_add(Weight::from_parts(177_949_959, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[1, 1000]`.
    fn bls12_381_aggregate_g1(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 988_000 picoseconds.
        Weight::from_parts(12_065_428, 0)
            // Standard Error: 438
            .saturating_add(Weight::from_parts(1_074_459, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 8388608]`.
    fn bls12_381_map_to_g2affine(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 606_138_000 picoseconds.
        Weight::from_parts(614_967_785, 0)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(887, 0).saturating_mul(c.into()))
    }
}
