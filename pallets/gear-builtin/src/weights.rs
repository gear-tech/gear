// This file is part of Gear.

// Copyright (C) 2022-2024 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear_builtin
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-04-29, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear_builtin --extrinsic=* --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear_builtin.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear_builtin.
pub trait WeightInfo {
    fn calculate_id() -> Weight;
    fn create_dispatcher() -> Weight;
    fn decode_bytes(a: u32, ) -> Weight;
    fn bls12_381_multi_miller_loop(c: u32, ) -> Weight;
    fn bls12_381_final_exponentiation() -> Weight;
    fn bls12_381_msm_g1(c: u32, ) -> Weight;
    fn bls12_381_msm_g2(c: u32, ) -> Weight;
    fn bls12_381_mul_projective_g1(c: u32, ) -> Weight;
    fn bls12_381_mul_projective_g2(c: u32, ) -> Weight;
}

/// Weights for pallet_gear_builtin using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn calculate_id() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 598_000 picoseconds.
        Weight::from_parts(651_000, 0)
    }
    fn create_dispatcher() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_470_000 picoseconds.
        Weight::from_parts(7_619_000, 0)
    }
    /// The range of component `a` is `[1, 8388608]`.
    fn decode_bytes(a: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 364_000 picoseconds.
        Weight::from_parts(395_000, 0)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(278, 0).saturating_mul(a.into()))
    }
    /// The range of component `c` is `[0, 100]`.
    fn bls12_381_multi_miller_loop(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_380_000 picoseconds.
        Weight::from_parts(631_805_906, 0)
            // Standard Error: 527_234
            .saturating_add(Weight::from_parts(225_415_941, 0).saturating_mul(c.into()))
    }
    fn bls12_381_final_exponentiation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 773_980_000 picoseconds.
        Weight::from_parts(787_816_000, 0)
    }
    /// The range of component `c` is `[1, 1000]`.
    fn bls12_381_msm_g1(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 283_208_000 picoseconds.
        Weight::from_parts(808_143_189, 0)
            // Standard Error: 20_306
            .saturating_add(Weight::from_parts(6_019_124, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[1, 1000]`.
    fn bls12_381_msm_g2(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 725_659_000 picoseconds.
        Weight::from_parts(1_971_421_343, 0)
            // Standard Error: 54_269
            .saturating_add(Weight::from_parts(17_524_271, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[1, 100]`.
    fn bls12_381_mul_projective_g1(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 54_862_000 picoseconds.
        Weight::from_parts(7_041_508, 0)
            // Standard Error: 33_600
            .saturating_add(Weight::from_parts(57_933_683, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[1, 100]`.
    fn bls12_381_mul_projective_g2(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 166_610_000 picoseconds.
        Weight::from_parts(42_353_960, 0)
            // Standard Error: 34_246
            .saturating_add(Weight::from_parts(175_294_610, 0).saturating_mul(c.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn calculate_id() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 598_000 picoseconds.
        Weight::from_parts(651_000, 0)
    }
    fn create_dispatcher() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_470_000 picoseconds.
        Weight::from_parts(7_619_000, 0)
    }
    /// The range of component `a` is `[1, 8388608]`.
    fn decode_bytes(a: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 364_000 picoseconds.
        Weight::from_parts(395_000, 0)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(278, 0).saturating_mul(a.into()))
    }
    /// The range of component `c` is `[0, 100]`.
    fn bls12_381_multi_miller_loop(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_380_000 picoseconds.
        Weight::from_parts(631_805_906, 0)
            // Standard Error: 527_234
            .saturating_add(Weight::from_parts(225_415_941, 0).saturating_mul(c.into()))
    }
    fn bls12_381_final_exponentiation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 773_980_000 picoseconds.
        Weight::from_parts(787_816_000, 0)
    }
    /// The range of component `c` is `[1, 1000]`.
    fn bls12_381_msm_g1(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 283_208_000 picoseconds.
        Weight::from_parts(808_143_189, 0)
            // Standard Error: 20_306
            .saturating_add(Weight::from_parts(6_019_124, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[1, 1000]`.
    fn bls12_381_msm_g2(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 725_659_000 picoseconds.
        Weight::from_parts(1_971_421_343, 0)
            // Standard Error: 54_269
            .saturating_add(Weight::from_parts(17_524_271, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[1, 100]`.
    fn bls12_381_mul_projective_g1(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 54_862_000 picoseconds.
        Weight::from_parts(7_041_508, 0)
            // Standard Error: 33_600
            .saturating_add(Weight::from_parts(57_933_683, 0).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[1, 100]`.
    fn bls12_381_mul_projective_g2(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 166_610_000 picoseconds.
        Weight::from_parts(42_353_960, 0)
            // Standard Error: 34_246
            .saturating_add(Weight::from_parts(175_294_610, 0).saturating_mul(c.into()))
    }
}
