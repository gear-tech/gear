// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_message_with_voucher(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn send_reply_with_voucher(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 957_000 picoseconds.
        Weight::from_parts(1_027_000, 0)
            // Standard Error: 975
            .saturating_add(Weight::from_parts(217_742, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_852_000 picoseconds.
        Weight::from_parts(2_896_000, 3506)
            // Standard Error: 1_086
            .saturating_add(Weight::from_parts(734_549, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 140_041_000 picoseconds.
        Weight::from_parts(151_920_000, 0)
            // Standard Error: 238_719
            .saturating_add(Weight::from_parts(107_275_671, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `42236`
        // Minimum execution time: 83_942_000 picoseconds.
        Weight::from_parts(86_477_000, 42236)
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `886`
        //  Estimated: `21261`
        // Minimum execution time: 54_197_000 picoseconds.
        Weight::from_parts(55_592_000, 21261)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `534`
        //  Estimated: `17070`
        // Minimum execution time: 29_204_000 picoseconds.
        Weight::from_parts(30_185_000, 17070)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_298_000 picoseconds.
        Weight::from_parts(5_633_411, 7640)
            // Standard Error: 33_939
            .saturating_add(Weight::from_parts(17_152_954, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1364 + c * (16389 ±0)`
        //  Estimated: `41434 + c * (131112 ±0)`
        // Minimum execution time: 69_935_000 picoseconds.
        Weight::from_parts(70_615_000, 41434)
            // Standard Error: 620_065
            .saturating_add(Weight::from_parts(85_608_539, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 73_324_000 picoseconds.
        Weight::from_parts(90_289_186, 4990)
            // Standard Error: 52_083
            .saturating_add(Weight::from_parts(52_270_625, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `738`
        //  Estimated: `39375`
        // Minimum execution time: 65_185_000 picoseconds.
        Weight::from_parts(96_701_940, 39375)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_663, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `235`
        //  Estimated: `34312`
        // Minimum execution time: 11_288_713_000 picoseconds.
        Weight::from_parts(490_868_285, 34312)
            // Standard Error: 180_432
            .saturating_add(Weight::from_parts(53_976_377, 0).saturating_mul(c.into()))
            // Standard Error: 10
            .saturating_add(Weight::from_parts(2_576, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `348`
        //  Estimated: `23853`
        // Minimum execution time: 56_458_000 picoseconds.
        Weight::from_parts(45_056_440, 23853)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_211, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `451`
        //  Estimated: `27177`
        // Minimum execution time: 58_625_000 picoseconds.
        Weight::from_parts(42_674_612, 27177)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_213, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `978`
        //  Estimated: `42227`
        // Minimum execution time: 84_357_000 picoseconds.
        Weight::from_parts(80_786_100, 42227)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_222, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1081`
        //  Estimated: `45757`
        // Minimum execution time: 94_951_000 picoseconds.
        Weight::from_parts(67_321_570, 45757)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_247, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 466_734_000 picoseconds.
        Weight::from_parts(524_101_307, 74319)
            // Standard Error: 7_586
            .saturating_add(Weight::from_parts(8_725, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(27_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 502_230_000 picoseconds.
        Weight::from_parts(590_405_578, 74319)
            // Standard Error: 6_546
            .saturating_add(Weight::from_parts(17_340, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(27_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 56_804_000 picoseconds.
        Weight::from_parts(57_042_000, 3899)
            // Standard Error: 47_198
            .saturating_add(Weight::from_parts(51_183_187, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_275_000 picoseconds.
        Weight::from_parts(89_733_000, 0)
            // Standard Error: 3_987_023
            .saturating_add(Weight::from_parts(669_872_725, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 413_044_000 picoseconds.
        Weight::from_parts(343_710_210, 0)
            // Standard Error: 8_256
            .saturating_add(Weight::from_parts(31_367_607, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 737_642_000 picoseconds.
        Weight::from_parts(762_267_570, 0)
            // Standard Error: 1_419_925
            .saturating_add(Weight::from_parts(431_837_336, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_265_000 picoseconds.
        Weight::from_parts(3_465_198, 0)
            // Standard Error: 8_582
            .saturating_add(Weight::from_parts(22_066_748, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 275_529_000 picoseconds.
        Weight::from_parts(346_552_096, 0)
            // Standard Error: 14_923
            .saturating_add(Weight::from_parts(5_272_966, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 405_599_000 picoseconds.
        Weight::from_parts(437_756_333, 0)
            // Standard Error: 15_423
            .saturating_add(Weight::from_parts(5_369_195, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 295_362_000 picoseconds.
        Weight::from_parts(389_855_418, 0)
            // Standard Error: 339_097
            .saturating_add(Weight::from_parts(306_418_612, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 277_518_000 picoseconds.
        Weight::from_parts(347_009_228, 0)
            // Standard Error: 274_256
            .saturating_add(Weight::from_parts(296_211_858, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 296_708_000 picoseconds.
        Weight::from_parts(369_037_196, 0)
            // Standard Error: 222_008
            .saturating_add(Weight::from_parts(292_481_240, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 270_579_000 picoseconds.
        Weight::from_parts(357_623_959, 0)
            // Standard Error: 236_921
            .saturating_add(Weight::from_parts(291_733_166, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 286_058_000 picoseconds.
        Weight::from_parts(338_213_501, 0)
            // Standard Error: 223_995
            .saturating_add(Weight::from_parts(292_800_110, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 278_709_000 picoseconds.
        Weight::from_parts(344_381_292, 0)
            // Standard Error: 243_616
            .saturating_add(Weight::from_parts(296_604_095, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 284_477_000 picoseconds.
        Weight::from_parts(348_147_718, 0)
            // Standard Error: 240_291
            .saturating_add(Weight::from_parts(293_731_865, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 288_953_000 picoseconds.
        Weight::from_parts(354_182_940, 0)
            // Standard Error: 278_681
            .saturating_add(Weight::from_parts(297_592_952, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 810_422_000 picoseconds.
        Weight::from_parts(961_934_102, 0)
            // Standard Error: 513_737
            .saturating_add(Weight::from_parts(388_202_396, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_158_445_000 picoseconds.
        Weight::from_parts(1_199_468_000, 0)
            // Standard Error: 52_458
            .saturating_add(Weight::from_parts(13_478_281, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 286_066_000 picoseconds.
        Weight::from_parts(346_375_166, 0)
            // Standard Error: 227_895
            .saturating_add(Weight::from_parts(291_781_497, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 269_178_000 picoseconds.
        Weight::from_parts(344_537_980, 0)
            // Standard Error: 233_496
            .saturating_add(Weight::from_parts(292_682_301, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 294_307_000 picoseconds.
        Weight::from_parts(361_371_409, 0)
            // Standard Error: 290_739
            .saturating_add(Weight::from_parts(368_042_396, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 324_728_000 picoseconds.
        Weight::from_parts(367_731_000, 0)
            // Standard Error: 3_903_587
            .saturating_add(Weight::from_parts(1_342_942_374, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_732_000 picoseconds.
        Weight::from_parts(138_052_545, 0)
            // Standard Error: 485_352
            .saturating_add(Weight::from_parts(448_131_026, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 827_015_000 picoseconds.
        Weight::from_parts(870_146_000, 0)
            // Standard Error: 53_445
            .saturating_add(Weight::from_parts(24_843_620, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 298_489_000 picoseconds.
        Weight::from_parts(382_487_022, 0)
            // Standard Error: 404_544
            .saturating_add(Weight::from_parts(565_372_149, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 840_791_000 picoseconds.
        Weight::from_parts(893_093_000, 0)
            // Standard Error: 54_070
            .saturating_add(Weight::from_parts(24_873_087, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 743_865_000 picoseconds.
        Weight::from_parts(888_787_358, 0)
            // Standard Error: 439_436
            .saturating_add(Weight::from_parts(559_157_160, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 775_718_000 picoseconds.
        Weight::from_parts(916_221_182, 0)
            // Standard Error: 515_852
            .saturating_add(Weight::from_parts(571_154_138, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 275_015_000 picoseconds.
        Weight::from_parts(351_414_640, 0)
            // Standard Error: 247_134
            .saturating_add(Weight::from_parts(299_409_444, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_270_489_000 picoseconds.
        Weight::from_parts(6_319_700_641, 0)
            // Standard Error: 1_071_830
            .saturating_add(Weight::from_parts(514_689_507, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_066_607_000 picoseconds.
        Weight::from_parts(1_089_526_000, 0)
            // Standard Error: 52_046
            .saturating_add(Weight::from_parts(34_740_938, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_338_311_000 picoseconds.
        Weight::from_parts(6_512_913_217, 0)
            // Standard Error: 1_116_762
            .saturating_add(Weight::from_parts(555_642_670, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_324_412_000 picoseconds.
        Weight::from_parts(6_522_801_418, 0)
            // Standard Error: 1_213_312
            .saturating_add(Weight::from_parts(582_049_071, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 472_070_000 picoseconds.
        Weight::from_parts(549_575_074, 0)
            // Standard Error: 306_554
            .saturating_add(Weight::from_parts(562_280_404, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_035_343_000 picoseconds.
        Weight::from_parts(1_055_425_000, 0)
            // Standard Error: 52_152
            .saturating_add(Weight::from_parts(24_927_826, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_441_024_000 picoseconds.
        Weight::from_parts(6_606_521_586, 0)
            // Standard Error: 1_240_509
            .saturating_add(Weight::from_parts(590_705_655, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 260_403_000 picoseconds.
        Weight::from_parts(342_015_326, 0)
            // Standard Error: 3_052_043
            .saturating_add(Weight::from_parts(28_396_273, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 338_658_000 picoseconds.
        Weight::from_parts(366_351_883, 0)
            // Standard Error: 1_212
            .saturating_add(Weight::from_parts(482_757, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 279_415_000 picoseconds.
        Weight::from_parts(347_100_477, 0)
            // Standard Error: 2_905_869
            .saturating_add(Weight::from_parts(43_811_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 329_676_000 picoseconds.
        Weight::from_parts(367_120_372, 0)
            // Standard Error: 1_251
            .saturating_add(Weight::from_parts(487_568, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 257_669_000 picoseconds.
        Weight::from_parts(343_178_095, 0)
            // Standard Error: 3_018_342
            .saturating_add(Weight::from_parts(28_422_504, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 274_311_000 picoseconds.
        Weight::from_parts(340_631_767, 0)
            // Standard Error: 3_180_796
            .saturating_add(Weight::from_parts(30_680_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 288_781_000 picoseconds.
        Weight::from_parts(401_486_744, 0)
            // Standard Error: 391_119
            .saturating_add(Weight::from_parts(395_989_302, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 310_966_000 picoseconds.
        Weight::from_parts(48_629_505, 0)
            // Standard Error: 4_655
            .saturating_add(Weight::from_parts(749_781, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 779_129_000 picoseconds.
        Weight::from_parts(923_288_169, 0)
            // Standard Error: 9_914_843
            .saturating_add(Weight::from_parts(12_122_330, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 766_228_000 picoseconds.
        Weight::from_parts(857_733_926, 0)
            // Standard Error: 4_846_501
            .saturating_add(Weight::from_parts(35_201_473, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 294_440_000 picoseconds.
        Weight::from_parts(361_774_400, 0)
            // Standard Error: 3_003_114
            .saturating_add(Weight::from_parts(12_353_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 334_761_000 picoseconds.
        Weight::from_parts(359_564_959, 0)
            // Standard Error: 1_354
            .saturating_add(Weight::from_parts(490_833, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 281_540_000 picoseconds.
        Weight::from_parts(362_869_844, 0)
            // Standard Error: 3_255_094
            .saturating_add(Weight::from_parts(2_143_255, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 327_906_000 picoseconds.
        Weight::from_parts(361_821_528, 0)
            // Standard Error: 1_366
            .saturating_add(Weight::from_parts(487_544, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 279_340_000 picoseconds.
        Weight::from_parts(341_320_469, 0)
            // Standard Error: 209_055
            .saturating_add(Weight::from_parts(295_119_552, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 282_037_000 picoseconds.
        Weight::from_parts(344_384_177, 0)
            // Standard Error: 235_728
            .saturating_add(Weight::from_parts(297_047_290, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 833_776_000 picoseconds.
        Weight::from_parts(994_049_369, 0)
            // Standard Error: 357_552
            .saturating_add(Weight::from_parts(313_854_970, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 793_252_000 picoseconds.
        Weight::from_parts(891_725_694, 0)
            // Standard Error: 2_529
            .saturating_add(Weight::from_parts(126_773, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_841_885_000 picoseconds.
        Weight::from_parts(7_039_162_273, 0)
            // Standard Error: 1_384_179
            .saturating_add(Weight::from_parts(438_338_768, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_446_299_000 picoseconds.
        Weight::from_parts(7_507_549_885, 0)
            // Standard Error: 16_972
            .saturating_add(Weight::from_parts(12_278_118, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 294_413_000 picoseconds.
        Weight::from_parts(373_004_189, 0)
            // Standard Error: 293_658
            .saturating_add(Weight::from_parts(322_830_475, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 526_142_000 picoseconds.
        Weight::from_parts(569_147_000, 0)
            // Standard Error: 45_514
            .saturating_add(Weight::from_parts(30_499_939, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 286_114_000 picoseconds.
        Weight::from_parts(337_809_398, 0)
            // Standard Error: 231_287
            .saturating_add(Weight::from_parts(293_342_037, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 267_250_000 picoseconds.
        Weight::from_parts(331_359_375, 0)
            // Standard Error: 2_867_165
            .saturating_add(Weight::from_parts(34_126_424, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 253_340_000 picoseconds.
        Weight::from_parts(333_892_744, 0)
            // Standard Error: 2_863_385
            .saturating_add(Weight::from_parts(32_068_055, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 250_489_000 picoseconds.
        Weight::from_parts(333_085_777, 0)
            // Standard Error: 2_987_906
            .saturating_add(Weight::from_parts(16_492_022, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 269_264_000 picoseconds.
        Weight::from_parts(334_329_067, 0)
            // Standard Error: 3_101_880
            .saturating_add(Weight::from_parts(17_339_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 259_193_000 picoseconds.
        Weight::from_parts(332_980_714, 0)
            // Standard Error: 2_873_049
            .saturating_add(Weight::from_parts(30_995_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 367_436_000 picoseconds.
        Weight::from_parts(463_125_962, 0)
            // Standard Error: 393_524
            .saturating_add(Weight::from_parts(410_821_934, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 295_100_000 picoseconds.
        Weight::from_parts(380_716_070, 0)
            // Standard Error: 373_596
            .saturating_add(Weight::from_parts(647_201_571, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_712_069_000 picoseconds.
        Weight::from_parts(52_368_466_000, 0)
            // Standard Error: 307_539
            .saturating_add(Weight::from_parts(9_126_269, 0).saturating_mul(p.into()))
            // Standard Error: 307_524
            .saturating_add(Weight::from_parts(181_291_678, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 323_453_000 picoseconds.
        Weight::from_parts(377_892_024, 0)
            // Standard Error: 372_649
            .saturating_add(Weight::from_parts(664_619_664, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_383_892_000 picoseconds.
        Weight::from_parts(51_873_654_000, 0)
            // Standard Error: 302_559
            .saturating_add(Weight::from_parts(9_106_348, 0).saturating_mul(p.into()))
            // Standard Error: 302_544
            .saturating_add(Weight::from_parts(181_739_434, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 291_284_000 picoseconds.
        Weight::from_parts(366_256_971, 0)
            // Standard Error: 113_449
            .saturating_add(Weight::from_parts(5_477_514, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 293_637_000 picoseconds.
        Weight::from_parts(351_223_492, 1131)
            // Standard Error: 13_154
            .saturating_add(Weight::from_parts(15_714_092, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 292_331_000 picoseconds.
        Weight::from_parts(136_558_162, 1131)
            // Standard Error: 53_305
            .saturating_add(Weight::from_parts(45_907_369, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_252_413_000 picoseconds.
        Weight::from_parts(8_280_918_788, 5069931)
            // Standard Error: 70_259
            .saturating_add(Weight::from_parts(46_434_888, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 273_362_000 picoseconds.
        Weight::from_parts(92_386_223, 1939)
            // Standard Error: 39_578
            .saturating_add(Weight::from_parts(52_347_411, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 286_401_000 picoseconds.
        Weight::from_parts(361_068_154, 1131)
            // Standard Error: 81_039
            .saturating_add(Weight::from_parts(40_681_387, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 837_669_000 picoseconds.
        Weight::from_parts(879_283_032, 1496)
            // Standard Error: 237_654
            .saturating_add(Weight::from_parts(54_046_250, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_359_900_000 picoseconds.
        Weight::from_parts(1_420_982_197, 317931)
            // Standard Error: 335_066
            .saturating_add(Weight::from_parts(50_919_715, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_368_119_000 picoseconds.
        Weight::from_parts(4_390_348_103, 0)
            // Standard Error: 10_702
            .saturating_add(Weight::from_parts(3_307_821, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_380_683_000 picoseconds.
        Weight::from_parts(4_402_635_365, 0)
            // Standard Error: 10_981
            .saturating_add(Weight::from_parts(3_294_592, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_582_756_000 picoseconds.
        Weight::from_parts(10_821_952_870, 0)
            // Standard Error: 173_099
            .saturating_add(Weight::from_parts(18_236_793, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_826_139_000 picoseconds.
        Weight::from_parts(11_185_140_363, 0)
            // Standard Error: 214_224
            .saturating_add(Weight::from_parts(12_571_827, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_067_000 picoseconds.
        Weight::from_parts(3_402_000, 0)
            // Standard Error: 7_976
            .saturating_add(Weight::from_parts(3_634_757, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_063_000 picoseconds.
        Weight::from_parts(2_359_493, 0)
            // Standard Error: 8_773
            .saturating_add(Weight::from_parts(2_945_851, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_138_000 picoseconds.
        Weight::from_parts(3_653_365, 0)
            // Standard Error: 4_568
            .saturating_add(Weight::from_parts(1_613_925, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_008_000 picoseconds.
        Weight::from_parts(3_130_000, 0)
            // Standard Error: 7_292
            .saturating_add(Weight::from_parts(2_827_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_045_000 picoseconds.
        Weight::from_parts(7_909_497, 0)
            // Standard Error: 18_569
            .saturating_add(Weight::from_parts(4_577_524, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_715_000 picoseconds.
        Weight::from_parts(7_153_394, 0)
            // Standard Error: 1_335
            .saturating_add(Weight::from_parts(161_173, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_377_000 picoseconds.
        Weight::from_parts(6_638_346, 0)
            // Standard Error: 9_511
            .saturating_add(Weight::from_parts(2_578_422, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_578_422 -
            2_463_480, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_240_000 picoseconds.
        Weight::from_parts(5_309_320, 0)
            // Standard Error: 12_621
            .saturating_add(Weight::from_parts(2_463_480, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_626_000 picoseconds.
        Weight::from_parts(22_728_106, 0)
            // Standard Error: 28_242
            .saturating_add(Weight::from_parts(8_727_609, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 13_126_000 picoseconds.
        Weight::from_parts(10_381_628, 0)
            // Standard Error: 6_140
            .saturating_add(Weight::from_parts(1_024_978, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_089_000 picoseconds.
        Weight::from_parts(6_510_603, 0)
            // Standard Error: 27
            .saturating_add(Weight::from_parts(146, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_838_000 picoseconds.
        Weight::from_parts(2_386_093, 0)
            // Standard Error: 2_342
            .saturating_add(Weight::from_parts(259_648, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_375_000 picoseconds.
        Weight::from_parts(311_923, 0)
            // Standard Error: 5_507
            .saturating_add(Weight::from_parts(818_886, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_212_000 picoseconds.
        Weight::from_parts(3_274_000, 0)
            // Standard Error: 4_368
            .saturating_add(Weight::from_parts(727_012, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_215_000 picoseconds.
        Weight::from_parts(4_330_001, 0)
            // Standard Error: 6_066
            .saturating_add(Weight::from_parts(741_910, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_044_000 picoseconds.
        Weight::from_parts(918_188, 0)
            // Standard Error: 12_143
            .saturating_add(Weight::from_parts(1_470_998, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_655_000 picoseconds.
        Weight::from_parts(2_642_816, 0)
            // Standard Error: 8_798
            .saturating_add(Weight::from_parts(7_083_504, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_933_000 picoseconds.
        Weight::from_parts(1_365_107, 0)
            // Standard Error: 10_354
            .saturating_add(Weight::from_parts(3_347_341, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_372_000 picoseconds.
        Weight::from_parts(1_179_985, 0)
            // Standard Error: 9_755
            .saturating_add(Weight::from_parts(3_044_002, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_998_000 picoseconds.
        Weight::from_parts(3_248_000, 0)
            // Standard Error: 5_720
            .saturating_add(Weight::from_parts(2_969_145, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_093_000 picoseconds.
        Weight::from_parts(379_370, 0)
            // Standard Error: 8_011
            .saturating_add(Weight::from_parts(2_660_100, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_151_000 picoseconds.
        Weight::from_parts(85_960, 0)
            // Standard Error: 6_381
            .saturating_add(Weight::from_parts(711_583, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_966_000 picoseconds.
        Weight::from_parts(2_397_890, 0)
            // Standard Error: 2_938
            .saturating_add(Weight::from_parts(398_863, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_088_000 picoseconds.
        Weight::from_parts(3_178_000, 0)
            // Standard Error: 9_974
            .saturating_add(Weight::from_parts(1_776_839, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_063_000 picoseconds.
        Weight::from_parts(3_169_000, 0)
            // Standard Error: 6_713
            .saturating_add(Weight::from_parts(1_140_102, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_089_000 picoseconds.
        Weight::from_parts(2_044_814, 0)
            // Standard Error: 3_373
            .saturating_add(Weight::from_parts(385_984, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_065_000 picoseconds.
        Weight::from_parts(2_100_617, 0)
            // Standard Error: 3_110
            .saturating_add(Weight::from_parts(389_002, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_946_000 picoseconds.
        Weight::from_parts(513_644, 0)
            // Standard Error: 4_986
            .saturating_add(Weight::from_parts(605_603, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_900_000 picoseconds.
        Weight::from_parts(743_645, 0)
            // Standard Error: 5_128
            .saturating_add(Weight::from_parts(591_802, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_110_000 picoseconds.
        Weight::from_parts(1_356_114, 0)
            // Standard Error: 3_880
            .saturating_add(Weight::from_parts(527_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_123_000 picoseconds.
        Weight::from_parts(1_698_244, 0)
            // Standard Error: 3_608
            .saturating_add(Weight::from_parts(390_781, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_930_000 picoseconds.
        Weight::from_parts(3_180_623, 0)
            // Standard Error: 1_732
            .saturating_add(Weight::from_parts(166_356, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_973_000 picoseconds.
        Weight::from_parts(2_872_370, 0)
            // Standard Error: 2_118
            .saturating_add(Weight::from_parts(191_384, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_102_000 picoseconds.
        Weight::from_parts(3_333_000, 0)
            // Standard Error: 10_550
            .saturating_add(Weight::from_parts(1_767_452, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_967_000 picoseconds.
        Weight::from_parts(3_022_000, 0)
            // Standard Error: 6_573
            .saturating_add(Weight::from_parts(1_119_271, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_190_000 picoseconds.
        Weight::from_parts(3_315_000, 0)
            // Standard Error: 11_540
            .saturating_add(Weight::from_parts(1_870_495, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_000_000 picoseconds.
        Weight::from_parts(3_129_000, 0)
            // Standard Error: 7_802
            .saturating_add(Weight::from_parts(1_186_671, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_136_000 picoseconds.
        Weight::from_parts(3_233_000, 0)
            // Standard Error: 11_769
            .saturating_add(Weight::from_parts(1_761_971, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_999_000 picoseconds.
        Weight::from_parts(3_128_000, 0)
            // Standard Error: 7_225
            .saturating_add(Weight::from_parts(1_141_814, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_050_000 picoseconds.
        Weight::from_parts(3_200_000, 0)
            // Standard Error: 10_469
            .saturating_add(Weight::from_parts(1_919_629, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_019_000 picoseconds.
        Weight::from_parts(3_167_000, 0)
            // Standard Error: 8_732
            .saturating_add(Weight::from_parts(1_178_582, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_136_000 picoseconds.
        Weight::from_parts(3_388_000, 0)
            // Standard Error: 9_528
            .saturating_add(Weight::from_parts(1_788_353, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_068_000 picoseconds.
        Weight::from_parts(3_355_000, 0)
            // Standard Error: 7_700
            .saturating_add(Weight::from_parts(1_234_187, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_872_000 picoseconds.
        Weight::from_parts(3_208_000, 0)
            // Standard Error: 9_347
            .saturating_add(Weight::from_parts(1_817_392, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_203_000 picoseconds.
        Weight::from_parts(3_466_000, 0)
            // Standard Error: 8_378
            .saturating_add(Weight::from_parts(1_171_433, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_206_000 picoseconds.
        Weight::from_parts(3_351_000, 0)
            // Standard Error: 9_446
            .saturating_add(Weight::from_parts(1_819_198, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_869_000 picoseconds.
        Weight::from_parts(3_107_000, 0)
            // Standard Error: 7_663
            .saturating_add(Weight::from_parts(1_202_986, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_977_000 picoseconds.
        Weight::from_parts(3_190_000, 0)
            // Standard Error: 10_167
            .saturating_add(Weight::from_parts(1_853_087, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_967_000 picoseconds.
        Weight::from_parts(3_114_000, 0)
            // Standard Error: 8_061
            .saturating_add(Weight::from_parts(1_182_754, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_081_000 picoseconds.
        Weight::from_parts(3_358_000, 0)
            // Standard Error: 10_529
            .saturating_add(Weight::from_parts(1_881_705, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_884_000 picoseconds.
        Weight::from_parts(3_304_000, 0)
            // Standard Error: 6_628
            .saturating_add(Weight::from_parts(1_114_792, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_119_000 picoseconds.
        Weight::from_parts(3_477_000, 0)
            // Standard Error: 8_396
            .saturating_add(Weight::from_parts(1_772_614, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_088_000 picoseconds.
        Weight::from_parts(3_280_000, 0)
            // Standard Error: 8_326
            .saturating_add(Weight::from_parts(1_203_736, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_171_000 picoseconds.
        Weight::from_parts(3_441_000, 0)
            // Standard Error: 8_155
            .saturating_add(Weight::from_parts(1_235_796, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_187_000 picoseconds.
        Weight::from_parts(3_242_000, 0)
            // Standard Error: 5_741
            .saturating_add(Weight::from_parts(653_909, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_002_000 picoseconds.
        Weight::from_parts(3_146_000, 0)
            // Standard Error: 7_734
            .saturating_add(Weight::from_parts(1_244_831, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_380_000 picoseconds.
        Weight::from_parts(148_013, 0)
            // Standard Error: 5_903
            .saturating_add(Weight::from_parts(740_654, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_107_000 picoseconds.
        Weight::from_parts(3_415_000, 0)
            // Standard Error: 9_718
            .saturating_add(Weight::from_parts(1_747_428, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_951_000 picoseconds.
        Weight::from_parts(3_243_000, 0)
            // Standard Error: 7_816
            .saturating_add(Weight::from_parts(1_212_609, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_139_000 picoseconds.
        Weight::from_parts(11_088_840, 0)
            // Standard Error: 18_602
            .saturating_add(Weight::from_parts(1_799_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_218_000 picoseconds.
        Weight::from_parts(8_245_796, 0)
            // Standard Error: 12_599
            .saturating_add(Weight::from_parts(1_737_610, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_126_000 picoseconds.
        Weight::from_parts(10_297_941, 0)
            // Standard Error: 17_235
            .saturating_add(Weight::from_parts(1_929_143, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_157_000 picoseconds.
        Weight::from_parts(7_899_912, 0)
            // Standard Error: 17_988
            .saturating_add(Weight::from_parts(1_790_223, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_956_000 picoseconds.
        Weight::from_parts(11_641_747, 0)
            // Standard Error: 30_671
            .saturating_add(Weight::from_parts(7_524_589, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_980_000 picoseconds.
        Weight::from_parts(8_304_874, 0)
            // Standard Error: 51_968
            .saturating_add(Weight::from_parts(6_384_376, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_900_000 picoseconds.
        Weight::from_parts(10_358_084, 0)
            // Standard Error: 20_104
            .saturating_add(Weight::from_parts(2_091_031, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_957_000 picoseconds.
        Weight::from_parts(7_367_438, 0)
            // Standard Error: 13_948
            .saturating_add(Weight::from_parts(1_898_938, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_098_000 picoseconds.
        Weight::from_parts(3_182_000, 0)
            // Standard Error: 8_134
            .saturating_add(Weight::from_parts(1_243_159, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_198_000 picoseconds.
        Weight::from_parts(282_377, 0)
            // Standard Error: 7_053
            .saturating_add(Weight::from_parts(724_039, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_164_000 picoseconds.
        Weight::from_parts(3_588_000, 0)
            // Standard Error: 10_177
            .saturating_add(Weight::from_parts(1_325_266, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_955_000 picoseconds.
        Weight::from_parts(3_401_000, 0)
            // Standard Error: 4_676
            .saturating_add(Weight::from_parts(627_895, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_067_000 picoseconds.
        Weight::from_parts(3_157_000, 0)
            // Standard Error: 8_076
            .saturating_add(Weight::from_parts(1_286_264, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_994_000 picoseconds.
        Weight::from_parts(3_338_000, 0)
            // Standard Error: 6_059
            .saturating_add(Weight::from_parts(711_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_233_000 picoseconds.
        Weight::from_parts(3_429_000, 0)
            // Standard Error: 5_492
            .saturating_add(Weight::from_parts(1_043_278, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_108_000 picoseconds.
        Weight::from_parts(1_375_005, 0)
            // Standard Error: 4_804
            .saturating_add(Weight::from_parts(623_731, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_838_000 picoseconds.
        Weight::from_parts(3_031_000, 0)
            // Standard Error: 6_351
            .saturating_add(Weight::from_parts(1_046_412, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_996_000 picoseconds.
        Weight::from_parts(801_083, 0)
            // Standard Error: 4_978
            .saturating_add(Weight::from_parts(616_570, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_954_000 picoseconds.
        Weight::from_parts(3_593_000, 0)
            // Standard Error: 6_160
            .saturating_add(Weight::from_parts(1_004_410, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_971_000 picoseconds.
        Weight::from_parts(3_197_000, 0)
            // Standard Error: 5_843
            .saturating_add(Weight::from_parts(669_805, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_063_000 picoseconds.
        Weight::from_parts(3_189_000, 0)
            // Standard Error: 6_368
            .saturating_add(Weight::from_parts(1_066_098, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_145_000 picoseconds.
        Weight::from_parts(503_438, 0)
            // Standard Error: 5_910
            .saturating_add(Weight::from_parts(668_753, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_102_000 picoseconds.
        Weight::from_parts(3_328_000, 0)
            // Standard Error: 6_928
            .saturating_add(Weight::from_parts(1_078_253, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_887_000 picoseconds.
        Weight::from_parts(2_984_000, 0)
            // Standard Error: 4_572
            .saturating_add(Weight::from_parts(622_756, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 957_000 picoseconds.
        Weight::from_parts(1_027_000, 0)
            // Standard Error: 975
            .saturating_add(Weight::from_parts(217_742, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_852_000 picoseconds.
        Weight::from_parts(2_896_000, 3506)
            // Standard Error: 1_086
            .saturating_add(Weight::from_parts(734_549, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 140_041_000 picoseconds.
        Weight::from_parts(151_920_000, 0)
            // Standard Error: 238_719
            .saturating_add(Weight::from_parts(107_275_671, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `42236`
        // Minimum execution time: 83_942_000 picoseconds.
        Weight::from_parts(86_477_000, 42236)
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `886`
        //  Estimated: `21261`
        // Minimum execution time: 54_197_000 picoseconds.
        Weight::from_parts(55_592_000, 21261)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `534`
        //  Estimated: `17070`
        // Minimum execution time: 29_204_000 picoseconds.
        Weight::from_parts(30_185_000, 17070)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_298_000 picoseconds.
        Weight::from_parts(5_633_411, 7640)
            // Standard Error: 33_939
            .saturating_add(Weight::from_parts(17_152_954, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1364 + c * (16389 ±0)`
        //  Estimated: `41434 + c * (131112 ±0)`
        // Minimum execution time: 69_935_000 picoseconds.
        Weight::from_parts(70_615_000, 41434)
            // Standard Error: 620_065
            .saturating_add(Weight::from_parts(85_608_539, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 73_324_000 picoseconds.
        Weight::from_parts(90_289_186, 4990)
            // Standard Error: 52_083
            .saturating_add(Weight::from_parts(52_270_625, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `738`
        //  Estimated: `39375`
        // Minimum execution time: 65_185_000 picoseconds.
        Weight::from_parts(96_701_940, 39375)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_663, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `235`
        //  Estimated: `34312`
        // Minimum execution time: 11_288_713_000 picoseconds.
        Weight::from_parts(490_868_285, 34312)
            // Standard Error: 180_432
            .saturating_add(Weight::from_parts(53_976_377, 0).saturating_mul(c.into()))
            // Standard Error: 10
            .saturating_add(Weight::from_parts(2_576, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `348`
        //  Estimated: `23853`
        // Minimum execution time: 56_458_000 picoseconds.
        Weight::from_parts(45_056_440, 23853)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_211, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `451`
        //  Estimated: `27177`
        // Minimum execution time: 58_625_000 picoseconds.
        Weight::from_parts(42_674_612, 27177)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_213, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `978`
        //  Estimated: `42227`
        // Minimum execution time: 84_357_000 picoseconds.
        Weight::from_parts(80_786_100, 42227)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_222, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1081`
        //  Estimated: `45757`
        // Minimum execution time: 94_951_000 picoseconds.
        Weight::from_parts(67_321_570, 45757)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_247, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 466_734_000 picoseconds.
        Weight::from_parts(524_101_307, 74319)
            // Standard Error: 7_586
            .saturating_add(Weight::from_parts(8_725, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(27_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 502_230_000 picoseconds.
        Weight::from_parts(590_405_578, 74319)
            // Standard Error: 6_546
            .saturating_add(Weight::from_parts(17_340, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(27_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 56_804_000 picoseconds.
        Weight::from_parts(57_042_000, 3899)
            // Standard Error: 47_198
            .saturating_add(Weight::from_parts(51_183_187, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_275_000 picoseconds.
        Weight::from_parts(89_733_000, 0)
            // Standard Error: 3_987_023
            .saturating_add(Weight::from_parts(669_872_725, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 413_044_000 picoseconds.
        Weight::from_parts(343_710_210, 0)
            // Standard Error: 8_256
            .saturating_add(Weight::from_parts(31_367_607, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 737_642_000 picoseconds.
        Weight::from_parts(762_267_570, 0)
            // Standard Error: 1_419_925
            .saturating_add(Weight::from_parts(431_837_336, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_265_000 picoseconds.
        Weight::from_parts(3_465_198, 0)
            // Standard Error: 8_582
            .saturating_add(Weight::from_parts(22_066_748, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 275_529_000 picoseconds.
        Weight::from_parts(346_552_096, 0)
            // Standard Error: 14_923
            .saturating_add(Weight::from_parts(5_272_966, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 405_599_000 picoseconds.
        Weight::from_parts(437_756_333, 0)
            // Standard Error: 15_423
            .saturating_add(Weight::from_parts(5_369_195, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 295_362_000 picoseconds.
        Weight::from_parts(389_855_418, 0)
            // Standard Error: 339_097
            .saturating_add(Weight::from_parts(306_418_612, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 277_518_000 picoseconds.
        Weight::from_parts(347_009_228, 0)
            // Standard Error: 274_256
            .saturating_add(Weight::from_parts(296_211_858, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 296_708_000 picoseconds.
        Weight::from_parts(369_037_196, 0)
            // Standard Error: 222_008
            .saturating_add(Weight::from_parts(292_481_240, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 270_579_000 picoseconds.
        Weight::from_parts(357_623_959, 0)
            // Standard Error: 236_921
            .saturating_add(Weight::from_parts(291_733_166, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 286_058_000 picoseconds.
        Weight::from_parts(338_213_501, 0)
            // Standard Error: 223_995
            .saturating_add(Weight::from_parts(292_800_110, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 278_709_000 picoseconds.
        Weight::from_parts(344_381_292, 0)
            // Standard Error: 243_616
            .saturating_add(Weight::from_parts(296_604_095, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 284_477_000 picoseconds.
        Weight::from_parts(348_147_718, 0)
            // Standard Error: 240_291
            .saturating_add(Weight::from_parts(293_731_865, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 288_953_000 picoseconds.
        Weight::from_parts(354_182_940, 0)
            // Standard Error: 278_681
            .saturating_add(Weight::from_parts(297_592_952, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 810_422_000 picoseconds.
        Weight::from_parts(961_934_102, 0)
            // Standard Error: 513_737
            .saturating_add(Weight::from_parts(388_202_396, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_158_445_000 picoseconds.
        Weight::from_parts(1_199_468_000, 0)
            // Standard Error: 52_458
            .saturating_add(Weight::from_parts(13_478_281, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 286_066_000 picoseconds.
        Weight::from_parts(346_375_166, 0)
            // Standard Error: 227_895
            .saturating_add(Weight::from_parts(291_781_497, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 269_178_000 picoseconds.
        Weight::from_parts(344_537_980, 0)
            // Standard Error: 233_496
            .saturating_add(Weight::from_parts(292_682_301, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 294_307_000 picoseconds.
        Weight::from_parts(361_371_409, 0)
            // Standard Error: 290_739
            .saturating_add(Weight::from_parts(368_042_396, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 324_728_000 picoseconds.
        Weight::from_parts(367_731_000, 0)
            // Standard Error: 3_903_587
            .saturating_add(Weight::from_parts(1_342_942_374, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_732_000 picoseconds.
        Weight::from_parts(138_052_545, 0)
            // Standard Error: 485_352
            .saturating_add(Weight::from_parts(448_131_026, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 827_015_000 picoseconds.
        Weight::from_parts(870_146_000, 0)
            // Standard Error: 53_445
            .saturating_add(Weight::from_parts(24_843_620, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 298_489_000 picoseconds.
        Weight::from_parts(382_487_022, 0)
            // Standard Error: 404_544
            .saturating_add(Weight::from_parts(565_372_149, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 840_791_000 picoseconds.
        Weight::from_parts(893_093_000, 0)
            // Standard Error: 54_070
            .saturating_add(Weight::from_parts(24_873_087, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 743_865_000 picoseconds.
        Weight::from_parts(888_787_358, 0)
            // Standard Error: 439_436
            .saturating_add(Weight::from_parts(559_157_160, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 775_718_000 picoseconds.
        Weight::from_parts(916_221_182, 0)
            // Standard Error: 515_852
            .saturating_add(Weight::from_parts(571_154_138, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 275_015_000 picoseconds.
        Weight::from_parts(351_414_640, 0)
            // Standard Error: 247_134
            .saturating_add(Weight::from_parts(299_409_444, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_270_489_000 picoseconds.
        Weight::from_parts(6_319_700_641, 0)
            // Standard Error: 1_071_830
            .saturating_add(Weight::from_parts(514_689_507, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_066_607_000 picoseconds.
        Weight::from_parts(1_089_526_000, 0)
            // Standard Error: 52_046
            .saturating_add(Weight::from_parts(34_740_938, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_338_311_000 picoseconds.
        Weight::from_parts(6_512_913_217, 0)
            // Standard Error: 1_116_762
            .saturating_add(Weight::from_parts(555_642_670, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_324_412_000 picoseconds.
        Weight::from_parts(6_522_801_418, 0)
            // Standard Error: 1_213_312
            .saturating_add(Weight::from_parts(582_049_071, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 472_070_000 picoseconds.
        Weight::from_parts(549_575_074, 0)
            // Standard Error: 306_554
            .saturating_add(Weight::from_parts(562_280_404, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_035_343_000 picoseconds.
        Weight::from_parts(1_055_425_000, 0)
            // Standard Error: 52_152
            .saturating_add(Weight::from_parts(24_927_826, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_441_024_000 picoseconds.
        Weight::from_parts(6_606_521_586, 0)
            // Standard Error: 1_240_509
            .saturating_add(Weight::from_parts(590_705_655, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 260_403_000 picoseconds.
        Weight::from_parts(342_015_326, 0)
            // Standard Error: 3_052_043
            .saturating_add(Weight::from_parts(28_396_273, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 338_658_000 picoseconds.
        Weight::from_parts(366_351_883, 0)
            // Standard Error: 1_212
            .saturating_add(Weight::from_parts(482_757, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 279_415_000 picoseconds.
        Weight::from_parts(347_100_477, 0)
            // Standard Error: 2_905_869
            .saturating_add(Weight::from_parts(43_811_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 329_676_000 picoseconds.
        Weight::from_parts(367_120_372, 0)
            // Standard Error: 1_251
            .saturating_add(Weight::from_parts(487_568, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 257_669_000 picoseconds.
        Weight::from_parts(343_178_095, 0)
            // Standard Error: 3_018_342
            .saturating_add(Weight::from_parts(28_422_504, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 274_311_000 picoseconds.
        Weight::from_parts(340_631_767, 0)
            // Standard Error: 3_180_796
            .saturating_add(Weight::from_parts(30_680_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 288_781_000 picoseconds.
        Weight::from_parts(401_486_744, 0)
            // Standard Error: 391_119
            .saturating_add(Weight::from_parts(395_989_302, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 310_966_000 picoseconds.
        Weight::from_parts(48_629_505, 0)
            // Standard Error: 4_655
            .saturating_add(Weight::from_parts(749_781, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 779_129_000 picoseconds.
        Weight::from_parts(923_288_169, 0)
            // Standard Error: 9_914_843
            .saturating_add(Weight::from_parts(12_122_330, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 766_228_000 picoseconds.
        Weight::from_parts(857_733_926, 0)
            // Standard Error: 4_846_501
            .saturating_add(Weight::from_parts(35_201_473, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 294_440_000 picoseconds.
        Weight::from_parts(361_774_400, 0)
            // Standard Error: 3_003_114
            .saturating_add(Weight::from_parts(12_353_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 334_761_000 picoseconds.
        Weight::from_parts(359_564_959, 0)
            // Standard Error: 1_354
            .saturating_add(Weight::from_parts(490_833, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 281_540_000 picoseconds.
        Weight::from_parts(362_869_844, 0)
            // Standard Error: 3_255_094
            .saturating_add(Weight::from_parts(2_143_255, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 327_906_000 picoseconds.
        Weight::from_parts(361_821_528, 0)
            // Standard Error: 1_366
            .saturating_add(Weight::from_parts(487_544, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 279_340_000 picoseconds.
        Weight::from_parts(341_320_469, 0)
            // Standard Error: 209_055
            .saturating_add(Weight::from_parts(295_119_552, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 282_037_000 picoseconds.
        Weight::from_parts(344_384_177, 0)
            // Standard Error: 235_728
            .saturating_add(Weight::from_parts(297_047_290, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 833_776_000 picoseconds.
        Weight::from_parts(994_049_369, 0)
            // Standard Error: 357_552
            .saturating_add(Weight::from_parts(313_854_970, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 793_252_000 picoseconds.
        Weight::from_parts(891_725_694, 0)
            // Standard Error: 2_529
            .saturating_add(Weight::from_parts(126_773, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_841_885_000 picoseconds.
        Weight::from_parts(7_039_162_273, 0)
            // Standard Error: 1_384_179
            .saturating_add(Weight::from_parts(438_338_768, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_446_299_000 picoseconds.
        Weight::from_parts(7_507_549_885, 0)
            // Standard Error: 16_972
            .saturating_add(Weight::from_parts(12_278_118, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 294_413_000 picoseconds.
        Weight::from_parts(373_004_189, 0)
            // Standard Error: 293_658
            .saturating_add(Weight::from_parts(322_830_475, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 526_142_000 picoseconds.
        Weight::from_parts(569_147_000, 0)
            // Standard Error: 45_514
            .saturating_add(Weight::from_parts(30_499_939, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 286_114_000 picoseconds.
        Weight::from_parts(337_809_398, 0)
            // Standard Error: 231_287
            .saturating_add(Weight::from_parts(293_342_037, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 267_250_000 picoseconds.
        Weight::from_parts(331_359_375, 0)
            // Standard Error: 2_867_165
            .saturating_add(Weight::from_parts(34_126_424, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 253_340_000 picoseconds.
        Weight::from_parts(333_892_744, 0)
            // Standard Error: 2_863_385
            .saturating_add(Weight::from_parts(32_068_055, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 250_489_000 picoseconds.
        Weight::from_parts(333_085_777, 0)
            // Standard Error: 2_987_906
            .saturating_add(Weight::from_parts(16_492_022, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 269_264_000 picoseconds.
        Weight::from_parts(334_329_067, 0)
            // Standard Error: 3_101_880
            .saturating_add(Weight::from_parts(17_339_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 259_193_000 picoseconds.
        Weight::from_parts(332_980_714, 0)
            // Standard Error: 2_873_049
            .saturating_add(Weight::from_parts(30_995_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 367_436_000 picoseconds.
        Weight::from_parts(463_125_962, 0)
            // Standard Error: 393_524
            .saturating_add(Weight::from_parts(410_821_934, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 295_100_000 picoseconds.
        Weight::from_parts(380_716_070, 0)
            // Standard Error: 373_596
            .saturating_add(Weight::from_parts(647_201_571, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_712_069_000 picoseconds.
        Weight::from_parts(52_368_466_000, 0)
            // Standard Error: 307_539
            .saturating_add(Weight::from_parts(9_126_269, 0).saturating_mul(p.into()))
            // Standard Error: 307_524
            .saturating_add(Weight::from_parts(181_291_678, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 323_453_000 picoseconds.
        Weight::from_parts(377_892_024, 0)
            // Standard Error: 372_649
            .saturating_add(Weight::from_parts(664_619_664, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_383_892_000 picoseconds.
        Weight::from_parts(51_873_654_000, 0)
            // Standard Error: 302_559
            .saturating_add(Weight::from_parts(9_106_348, 0).saturating_mul(p.into()))
            // Standard Error: 302_544
            .saturating_add(Weight::from_parts(181_739_434, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 291_284_000 picoseconds.
        Weight::from_parts(366_256_971, 0)
            // Standard Error: 113_449
            .saturating_add(Weight::from_parts(5_477_514, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 293_637_000 picoseconds.
        Weight::from_parts(351_223_492, 1131)
            // Standard Error: 13_154
            .saturating_add(Weight::from_parts(15_714_092, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 292_331_000 picoseconds.
        Weight::from_parts(136_558_162, 1131)
            // Standard Error: 53_305
            .saturating_add(Weight::from_parts(45_907_369, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_252_413_000 picoseconds.
        Weight::from_parts(8_280_918_788, 5069931)
            // Standard Error: 70_259
            .saturating_add(Weight::from_parts(46_434_888, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 273_362_000 picoseconds.
        Weight::from_parts(92_386_223, 1939)
            // Standard Error: 39_578
            .saturating_add(Weight::from_parts(52_347_411, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 286_401_000 picoseconds.
        Weight::from_parts(361_068_154, 1131)
            // Standard Error: 81_039
            .saturating_add(Weight::from_parts(40_681_387, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 837_669_000 picoseconds.
        Weight::from_parts(879_283_032, 1496)
            // Standard Error: 237_654
            .saturating_add(Weight::from_parts(54_046_250, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_359_900_000 picoseconds.
        Weight::from_parts(1_420_982_197, 317931)
            // Standard Error: 335_066
            .saturating_add(Weight::from_parts(50_919_715, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_368_119_000 picoseconds.
        Weight::from_parts(4_390_348_103, 0)
            // Standard Error: 10_702
            .saturating_add(Weight::from_parts(3_307_821, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_380_683_000 picoseconds.
        Weight::from_parts(4_402_635_365, 0)
            // Standard Error: 10_981
            .saturating_add(Weight::from_parts(3_294_592, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_582_756_000 picoseconds.
        Weight::from_parts(10_821_952_870, 0)
            // Standard Error: 173_099
            .saturating_add(Weight::from_parts(18_236_793, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_826_139_000 picoseconds.
        Weight::from_parts(11_185_140_363, 0)
            // Standard Error: 214_224
            .saturating_add(Weight::from_parts(12_571_827, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_067_000 picoseconds.
        Weight::from_parts(3_402_000, 0)
            // Standard Error: 7_976
            .saturating_add(Weight::from_parts(3_634_757, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_063_000 picoseconds.
        Weight::from_parts(2_359_493, 0)
            // Standard Error: 8_773
            .saturating_add(Weight::from_parts(2_945_851, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_138_000 picoseconds.
        Weight::from_parts(3_653_365, 0)
            // Standard Error: 4_568
            .saturating_add(Weight::from_parts(1_613_925, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_008_000 picoseconds.
        Weight::from_parts(3_130_000, 0)
            // Standard Error: 7_292
            .saturating_add(Weight::from_parts(2_827_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_045_000 picoseconds.
        Weight::from_parts(7_909_497, 0)
            // Standard Error: 18_569
            .saturating_add(Weight::from_parts(4_577_524, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_715_000 picoseconds.
        Weight::from_parts(7_153_394, 0)
            // Standard Error: 1_335
            .saturating_add(Weight::from_parts(161_173, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_377_000 picoseconds.
        Weight::from_parts(6_638_346, 0)
            // Standard Error: 9_511
            .saturating_add(Weight::from_parts(2_578_422, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_578_422 -
            2_463_480, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_240_000 picoseconds.
        Weight::from_parts(5_309_320, 0)
            // Standard Error: 12_621
            .saturating_add(Weight::from_parts(2_463_480, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_626_000 picoseconds.
        Weight::from_parts(22_728_106, 0)
            // Standard Error: 28_242
            .saturating_add(Weight::from_parts(8_727_609, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 13_126_000 picoseconds.
        Weight::from_parts(10_381_628, 0)
            // Standard Error: 6_140
            .saturating_add(Weight::from_parts(1_024_978, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_089_000 picoseconds.
        Weight::from_parts(6_510_603, 0)
            // Standard Error: 27
            .saturating_add(Weight::from_parts(146, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_838_000 picoseconds.
        Weight::from_parts(2_386_093, 0)
            // Standard Error: 2_342
            .saturating_add(Weight::from_parts(259_648, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_375_000 picoseconds.
        Weight::from_parts(311_923, 0)
            // Standard Error: 5_507
            .saturating_add(Weight::from_parts(818_886, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_212_000 picoseconds.
        Weight::from_parts(3_274_000, 0)
            // Standard Error: 4_368
            .saturating_add(Weight::from_parts(727_012, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_215_000 picoseconds.
        Weight::from_parts(4_330_001, 0)
            // Standard Error: 6_066
            .saturating_add(Weight::from_parts(741_910, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_044_000 picoseconds.
        Weight::from_parts(918_188, 0)
            // Standard Error: 12_143
            .saturating_add(Weight::from_parts(1_470_998, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_655_000 picoseconds.
        Weight::from_parts(2_642_816, 0)
            // Standard Error: 8_798
            .saturating_add(Weight::from_parts(7_083_504, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_933_000 picoseconds.
        Weight::from_parts(1_365_107, 0)
            // Standard Error: 10_354
            .saturating_add(Weight::from_parts(3_347_341, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_372_000 picoseconds.
        Weight::from_parts(1_179_985, 0)
            // Standard Error: 9_755
            .saturating_add(Weight::from_parts(3_044_002, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_998_000 picoseconds.
        Weight::from_parts(3_248_000, 0)
            // Standard Error: 5_720
            .saturating_add(Weight::from_parts(2_969_145, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_093_000 picoseconds.
        Weight::from_parts(379_370, 0)
            // Standard Error: 8_011
            .saturating_add(Weight::from_parts(2_660_100, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_151_000 picoseconds.
        Weight::from_parts(85_960, 0)
            // Standard Error: 6_381
            .saturating_add(Weight::from_parts(711_583, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_966_000 picoseconds.
        Weight::from_parts(2_397_890, 0)
            // Standard Error: 2_938
            .saturating_add(Weight::from_parts(398_863, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_088_000 picoseconds.
        Weight::from_parts(3_178_000, 0)
            // Standard Error: 9_974
            .saturating_add(Weight::from_parts(1_776_839, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_063_000 picoseconds.
        Weight::from_parts(3_169_000, 0)
            // Standard Error: 6_713
            .saturating_add(Weight::from_parts(1_140_102, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_089_000 picoseconds.
        Weight::from_parts(2_044_814, 0)
            // Standard Error: 3_373
            .saturating_add(Weight::from_parts(385_984, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_065_000 picoseconds.
        Weight::from_parts(2_100_617, 0)
            // Standard Error: 3_110
            .saturating_add(Weight::from_parts(389_002, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_946_000 picoseconds.
        Weight::from_parts(513_644, 0)
            // Standard Error: 4_986
            .saturating_add(Weight::from_parts(605_603, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_900_000 picoseconds.
        Weight::from_parts(743_645, 0)
            // Standard Error: 5_128
            .saturating_add(Weight::from_parts(591_802, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_110_000 picoseconds.
        Weight::from_parts(1_356_114, 0)
            // Standard Error: 3_880
            .saturating_add(Weight::from_parts(527_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_123_000 picoseconds.
        Weight::from_parts(1_698_244, 0)
            // Standard Error: 3_608
            .saturating_add(Weight::from_parts(390_781, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_930_000 picoseconds.
        Weight::from_parts(3_180_623, 0)
            // Standard Error: 1_732
            .saturating_add(Weight::from_parts(166_356, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_973_000 picoseconds.
        Weight::from_parts(2_872_370, 0)
            // Standard Error: 2_118
            .saturating_add(Weight::from_parts(191_384, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_102_000 picoseconds.
        Weight::from_parts(3_333_000, 0)
            // Standard Error: 10_550
            .saturating_add(Weight::from_parts(1_767_452, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_967_000 picoseconds.
        Weight::from_parts(3_022_000, 0)
            // Standard Error: 6_573
            .saturating_add(Weight::from_parts(1_119_271, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_190_000 picoseconds.
        Weight::from_parts(3_315_000, 0)
            // Standard Error: 11_540
            .saturating_add(Weight::from_parts(1_870_495, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_000_000 picoseconds.
        Weight::from_parts(3_129_000, 0)
            // Standard Error: 7_802
            .saturating_add(Weight::from_parts(1_186_671, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_136_000 picoseconds.
        Weight::from_parts(3_233_000, 0)
            // Standard Error: 11_769
            .saturating_add(Weight::from_parts(1_761_971, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_999_000 picoseconds.
        Weight::from_parts(3_128_000, 0)
            // Standard Error: 7_225
            .saturating_add(Weight::from_parts(1_141_814, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_050_000 picoseconds.
        Weight::from_parts(3_200_000, 0)
            // Standard Error: 10_469
            .saturating_add(Weight::from_parts(1_919_629, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_019_000 picoseconds.
        Weight::from_parts(3_167_000, 0)
            // Standard Error: 8_732
            .saturating_add(Weight::from_parts(1_178_582, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_136_000 picoseconds.
        Weight::from_parts(3_388_000, 0)
            // Standard Error: 9_528
            .saturating_add(Weight::from_parts(1_788_353, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_068_000 picoseconds.
        Weight::from_parts(3_355_000, 0)
            // Standard Error: 7_700
            .saturating_add(Weight::from_parts(1_234_187, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_872_000 picoseconds.
        Weight::from_parts(3_208_000, 0)
            // Standard Error: 9_347
            .saturating_add(Weight::from_parts(1_817_392, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_203_000 picoseconds.
        Weight::from_parts(3_466_000, 0)
            // Standard Error: 8_378
            .saturating_add(Weight::from_parts(1_171_433, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_206_000 picoseconds.
        Weight::from_parts(3_351_000, 0)
            // Standard Error: 9_446
            .saturating_add(Weight::from_parts(1_819_198, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_869_000 picoseconds.
        Weight::from_parts(3_107_000, 0)
            // Standard Error: 7_663
            .saturating_add(Weight::from_parts(1_202_986, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_977_000 picoseconds.
        Weight::from_parts(3_190_000, 0)
            // Standard Error: 10_167
            .saturating_add(Weight::from_parts(1_853_087, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_967_000 picoseconds.
        Weight::from_parts(3_114_000, 0)
            // Standard Error: 8_061
            .saturating_add(Weight::from_parts(1_182_754, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_081_000 picoseconds.
        Weight::from_parts(3_358_000, 0)
            // Standard Error: 10_529
            .saturating_add(Weight::from_parts(1_881_705, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_884_000 picoseconds.
        Weight::from_parts(3_304_000, 0)
            // Standard Error: 6_628
            .saturating_add(Weight::from_parts(1_114_792, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_119_000 picoseconds.
        Weight::from_parts(3_477_000, 0)
            // Standard Error: 8_396
            .saturating_add(Weight::from_parts(1_772_614, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_088_000 picoseconds.
        Weight::from_parts(3_280_000, 0)
            // Standard Error: 8_326
            .saturating_add(Weight::from_parts(1_203_736, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_171_000 picoseconds.
        Weight::from_parts(3_441_000, 0)
            // Standard Error: 8_155
            .saturating_add(Weight::from_parts(1_235_796, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_187_000 picoseconds.
        Weight::from_parts(3_242_000, 0)
            // Standard Error: 5_741
            .saturating_add(Weight::from_parts(653_909, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_002_000 picoseconds.
        Weight::from_parts(3_146_000, 0)
            // Standard Error: 7_734
            .saturating_add(Weight::from_parts(1_244_831, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_380_000 picoseconds.
        Weight::from_parts(148_013, 0)
            // Standard Error: 5_903
            .saturating_add(Weight::from_parts(740_654, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_107_000 picoseconds.
        Weight::from_parts(3_415_000, 0)
            // Standard Error: 9_718
            .saturating_add(Weight::from_parts(1_747_428, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_951_000 picoseconds.
        Weight::from_parts(3_243_000, 0)
            // Standard Error: 7_816
            .saturating_add(Weight::from_parts(1_212_609, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_139_000 picoseconds.
        Weight::from_parts(11_088_840, 0)
            // Standard Error: 18_602
            .saturating_add(Weight::from_parts(1_799_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_218_000 picoseconds.
        Weight::from_parts(8_245_796, 0)
            // Standard Error: 12_599
            .saturating_add(Weight::from_parts(1_737_610, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_126_000 picoseconds.
        Weight::from_parts(10_297_941, 0)
            // Standard Error: 17_235
            .saturating_add(Weight::from_parts(1_929_143, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_157_000 picoseconds.
        Weight::from_parts(7_899_912, 0)
            // Standard Error: 17_988
            .saturating_add(Weight::from_parts(1_790_223, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_956_000 picoseconds.
        Weight::from_parts(11_641_747, 0)
            // Standard Error: 30_671
            .saturating_add(Weight::from_parts(7_524_589, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_980_000 picoseconds.
        Weight::from_parts(8_304_874, 0)
            // Standard Error: 51_968
            .saturating_add(Weight::from_parts(6_384_376, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_900_000 picoseconds.
        Weight::from_parts(10_358_084, 0)
            // Standard Error: 20_104
            .saturating_add(Weight::from_parts(2_091_031, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_957_000 picoseconds.
        Weight::from_parts(7_367_438, 0)
            // Standard Error: 13_948
            .saturating_add(Weight::from_parts(1_898_938, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_098_000 picoseconds.
        Weight::from_parts(3_182_000, 0)
            // Standard Error: 8_134
            .saturating_add(Weight::from_parts(1_243_159, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_198_000 picoseconds.
        Weight::from_parts(282_377, 0)
            // Standard Error: 7_053
            .saturating_add(Weight::from_parts(724_039, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_164_000 picoseconds.
        Weight::from_parts(3_588_000, 0)
            // Standard Error: 10_177
            .saturating_add(Weight::from_parts(1_325_266, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_955_000 picoseconds.
        Weight::from_parts(3_401_000, 0)
            // Standard Error: 4_676
            .saturating_add(Weight::from_parts(627_895, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_067_000 picoseconds.
        Weight::from_parts(3_157_000, 0)
            // Standard Error: 8_076
            .saturating_add(Weight::from_parts(1_286_264, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_994_000 picoseconds.
        Weight::from_parts(3_338_000, 0)
            // Standard Error: 6_059
            .saturating_add(Weight::from_parts(711_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_233_000 picoseconds.
        Weight::from_parts(3_429_000, 0)
            // Standard Error: 5_492
            .saturating_add(Weight::from_parts(1_043_278, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_108_000 picoseconds.
        Weight::from_parts(1_375_005, 0)
            // Standard Error: 4_804
            .saturating_add(Weight::from_parts(623_731, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_838_000 picoseconds.
        Weight::from_parts(3_031_000, 0)
            // Standard Error: 6_351
            .saturating_add(Weight::from_parts(1_046_412, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_996_000 picoseconds.
        Weight::from_parts(801_083, 0)
            // Standard Error: 4_978
            .saturating_add(Weight::from_parts(616_570, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_954_000 picoseconds.
        Weight::from_parts(3_593_000, 0)
            // Standard Error: 6_160
            .saturating_add(Weight::from_parts(1_004_410, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_971_000 picoseconds.
        Weight::from_parts(3_197_000, 0)
            // Standard Error: 5_843
            .saturating_add(Weight::from_parts(669_805, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_063_000 picoseconds.
        Weight::from_parts(3_189_000, 0)
            // Standard Error: 6_368
            .saturating_add(Weight::from_parts(1_066_098, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_145_000 picoseconds.
        Weight::from_parts(503_438, 0)
            // Standard Error: 5_910
            .saturating_add(Weight::from_parts(668_753, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_102_000 picoseconds.
        Weight::from_parts(3_328_000, 0)
            // Standard Error: 6_928
            .saturating_add(Weight::from_parts(1_078_253, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_887_000 picoseconds.
        Weight::from_parts(2_984_000, 0)
            // Standard Error: 4_572
            .saturating_add(Weight::from_parts(622_756, 0).saturating_mul(r.into()))
    }
}
