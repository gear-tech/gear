// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-17, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `epyc-runners-node.hetzner`, CPU: `AMD EPYC 7502P 32-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_exit_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(1_000_000 as u64)
            // Standard Error: 211
            .saturating_add(Weight::from_ref_time(140_336 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(4_000_000 as u64)
            // Standard Error: 559
            .saturating_add(Weight::from_ref_time(361_781 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(62_000_000 as u64)
            // Standard Error: 1_474
            .saturating_add(Weight::from_ref_time(1_234_747 as u64).saturating_mul(c as u64))
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(181_473_000 as u64)
            .saturating_add(T::DbWeight::get().reads(8 as u64))
            .saturating_add(T::DbWeight::get().writes(6 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(86_323_000 as u64)
            // Standard Error: 23
            .saturating_add(Weight::from_ref_time(42_011 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(69_840_000 as u64)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(2_512 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(10_540_880_000 as u64)
            // Standard Error: 468
            .saturating_add(Weight::from_ref_time(17_351 as u64).saturating_mul(c as u64))
            // Standard Error: 28
            .saturating_add(Weight::from_ref_time(970 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(11 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(77_455_000 as u64)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(924 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(126_473_000 as u64)
            // Standard Error: 9
            .saturating_add(Weight::from_ref_time(1_073 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(14 as u64))
            .saturating_add(T::DbWeight::get().writes(11 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        Weight::from_ref_time(182_185_000 as u64)
            // Standard Error: 2_291
            .saturating_add(Weight::from_ref_time(10_873 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(25 as u64))
            .saturating_add(T::DbWeight::get().writes(23 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(289_469_000 as u64)
            // Standard Error: 945
            .saturating_add(Weight::from_ref_time(15_338 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(26 as u64))
            .saturating_add(T::DbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument(c: u32, ) -> Weight {
        Weight::from_ref_time(31_894_000 as u64)
            // Standard Error: 27
            .saturating_add(Weight::from_ref_time(42_891 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(99_560_000 as u64)
            // Standard Error: 46_387
            .saturating_add(Weight::from_ref_time(239_435_495 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        Weight::from_ref_time(348_697_000 as u64)
            // Standard Error: 55_476
            .saturating_add(Weight::from_ref_time(218_834_623 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(118_818_000 as u64)
            // Standard Error: 325_393
            .saturating_add(Weight::from_ref_time(350_286_644 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(117_616_000 as u64)
            // Standard Error: 59_931
            .saturating_add(Weight::from_ref_time(240_686_698 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        Weight::from_ref_time(104_238_000 as u64)
            // Standard Error: 91_575
            .saturating_add(Weight::from_ref_time(226_470_268 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(103_788_000 as u64)
            // Standard Error: 86_080
            .saturating_add(Weight::from_ref_time(232_385_905 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(103_968_000 as u64)
            // Standard Error: 86_333
            .saturating_add(Weight::from_ref_time(226_639_761 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(103_677_000 as u64)
            // Standard Error: 89_559
            .saturating_add(Weight::from_ref_time(226_635_123 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(103_357_000 as u64)
            // Standard Error: 89_193
            .saturating_add(Weight::from_ref_time(226_687_859 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(103_878_000 as u64)
            // Standard Error: 92_667
            .saturating_add(Weight::from_ref_time(226_904_148 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(103_868_000 as u64)
            // Standard Error: 38_523
            .saturating_add(Weight::from_ref_time(204_340_756 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(104_669_000 as u64)
            // Standard Error: 34_967
            .saturating_add(Weight::from_ref_time(196_827_843 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(105_521_000 as u64)
            // Standard Error: 76_163
            .saturating_add(Weight::from_ref_time(239_906_929 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(343_377_000 as u64)
            // Standard Error: 5_444
            .saturating_add(Weight::from_ref_time(7_990_930 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(103_818_000 as u64)
            // Standard Error: 34_478
            .saturating_add(Weight::from_ref_time(196_479_989 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(104_078_000 as u64)
            // Standard Error: 33_688
            .saturating_add(Weight::from_ref_time(204_068_918 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(105_111_000 as u64)
            // Standard Error: 74_503
            .saturating_add(Weight::from_ref_time(243_690_283 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(106_002_000 as u64)
            // Standard Error: 106_414
            .saturating_add(Weight::from_ref_time(505_320_455 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(629_228_000 as u64)
            // Standard Error: 116_829
            .saturating_add(Weight::from_ref_time(19_724_675 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(104_399_000 as u64)
            // Standard Error: 100_893
            .saturating_add(Weight::from_ref_time(342_461_433 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(473_788_000 as u64)
            // Standard Error: 4_607
            .saturating_add(Weight::from_ref_time(15_193_381 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(104_549_000 as u64)
            // Standard Error: 94_028
            .saturating_add(Weight::from_ref_time(250_958_887 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(104_339_000 as u64)
            // Standard Error: 68_743
            .saturating_add(Weight::from_ref_time(252_217_348 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(340_932_000 as u64)
            // Standard Error: 116_916
            .saturating_add(Weight::from_ref_time(19_706_631 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(104_610_000 as u64)
            // Standard Error: 88_433
            .saturating_add(Weight::from_ref_time(230_784_788 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(103_807_000 as u64)
            // Standard Error: 77_075
            .saturating_add(Weight::from_ref_time(244_820_979 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(332_375_000 as u64)
            // Standard Error: 5_176
            .saturating_add(Weight::from_ref_time(26_740_403 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_exit_code(r: u32, ) -> Weight {
        Weight::from_ref_time(104_249_000 as u64)
            // Standard Error: 88_469
            .saturating_add(Weight::from_ref_time(231_275_785 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(103_467_000 as u64)
            // Standard Error: 233_755
            .saturating_add(Weight::from_ref_time(37_839_799 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(102_946_000 as u64)
            // Standard Error: 254_715
            .saturating_add(Weight::from_ref_time(17_355_599 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(103_296_000 as u64)
            // Standard Error: 234_411
            .saturating_add(Weight::from_ref_time(17_907_500 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(104_178_000 as u64)
            // Standard Error: 271_667
            .saturating_add(Weight::from_ref_time(17_055_500 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        Weight::from_ref_time(103_778_000 as u64)
            // Standard Error: 226_146
            .saturating_add(Weight::from_ref_time(18_453_600 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(105_050_000 as u64)
            // Standard Error: 90_934
            .saturating_add(Weight::from_ref_time(254_460_164 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(117_916_000 as u64)
            // Standard Error: 77_012
            .saturating_add(Weight::from_ref_time(425_757_701 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 1024]`.
    /// The range of component `s` is `[0, 1024]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(16_195_444_000 as u64)
            // Standard Error: 158_940
            .saturating_add(Weight::from_ref_time(5_326_618 as u64).saturating_mul(p as u64))
            // Standard Error: 158_940
            .saturating_add(Weight::from_ref_time(222_888_093 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(257 as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(3_067_000 as u64)
            // Standard Error: 193
            .saturating_add(Weight::from_ref_time(5_787 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(5_160_000 as u64)
            // Standard Error: 15_319
            .saturating_add(Weight::from_ref_time(748_131 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(5_120_000 as u64)
            // Standard Error: 25_137
            .saturating_add(Weight::from_ref_time(1_297_673 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(3_027_000 as u64)
            // Standard Error: 277
            .saturating_add(Weight::from_ref_time(614_790 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(2_986_000 as u64)
            // Standard Error: 335
            .saturating_add(Weight::from_ref_time(624_265 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(3_107_000 as u64)
            // Standard Error: 240
            .saturating_add(Weight::from_ref_time(484_846 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_046_000 as u64)
            // Standard Error: 253
            .saturating_add(Weight::from_ref_time(530_571 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(3_066_000 as u64)
            // Standard Error: 811
            .saturating_add(Weight::from_ref_time(1_593_433 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(4_238_000 as u64)
            // Standard Error: 36
            .saturating_add(Weight::from_ref_time(8_726 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(3_157_000 as u64)
            // Standard Error: 513
            .saturating_add(Weight::from_ref_time(652_362 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(3_597_000 as u64)
            // Standard Error: 613
            .saturating_add(Weight::from_ref_time(1_497_193 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(5_090_000 as u64)
            // Standard Error: 153
            .saturating_add(Weight::from_ref_time(75_728 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(3_096_000 as u64)
            // Standard Error: 204
            .saturating_add(Weight::from_ref_time(30_348 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(3_136_000 as u64)
            // Standard Error: 363
            .saturating_add(Weight::from_ref_time(57_812 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(3_197_000 as u64)
            // Standard Error: 284
            .saturating_add(Weight::from_ref_time(56_731 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(14_690_000 as u64)
            // Standard Error: 686
            .saturating_add(Weight::from_ref_time(45_565 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(14_049_000 as u64)
            // Standard Error: 351
            .saturating_add(Weight::from_ref_time(82_636 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(8_437_000 as u64)
            // Standard Error: 570
            .saturating_add(Weight::from_ref_time(1_240_576 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_077_000 as u64)
            // Standard Error: 300
            .saturating_add(Weight::from_ref_time(768_019 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_016_000 as u64)
            // Standard Error: 300
            .saturating_add(Weight::from_ref_time(738_766 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(3_067_000 as u64)
            // Standard Error: 239
            .saturating_add(Weight::from_ref_time(47_982 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_026_000 as u64)
            // Standard Error: 318
            .saturating_add(Weight::from_ref_time(104_958 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_026_000 as u64)
            // Standard Error: 196
            .saturating_add(Weight::from_ref_time(34_916 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_047_000 as u64)
            // Standard Error: 180
            .saturating_add(Weight::from_ref_time(23_723 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 186
            .saturating_add(Weight::from_ref_time(23_924 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(3_026_000 as u64)
            // Standard Error: 347
            .saturating_add(Weight::from_ref_time(106_246 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(3_076_000 as u64)
            // Standard Error: 329
            .saturating_add(Weight::from_ref_time(105_295 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_046_000 as u64)
            // Standard Error: 379
            .saturating_add(Weight::from_ref_time(107_727 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_016_000 as u64)
            // Standard Error: 401
            .saturating_add(Weight::from_ref_time(107_679 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_067_000 as u64)
            // Standard Error: 420
            .saturating_add(Weight::from_ref_time(106_855 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_036_000 as u64)
            // Standard Error: 381
            .saturating_add(Weight::from_ref_time(107_674 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(2_996_000 as u64)
            // Standard Error: 426
            .saturating_add(Weight::from_ref_time(106_765 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_016_000 as u64)
            // Standard Error: 403
            .saturating_add(Weight::from_ref_time(108_487 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 402
            .saturating_add(Weight::from_ref_time(106_377 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 404
            .saturating_add(Weight::from_ref_time(107_694 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(3_006_000 as u64)
            // Standard Error: 363
            .saturating_add(Weight::from_ref_time(92_547 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(3_046_000 as u64)
            // Standard Error: 360
            .saturating_add(Weight::from_ref_time(89_739 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(3_086_000 as u64)
            // Standard Error: 361
            .saturating_add(Weight::from_ref_time(115_453 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 416
            .saturating_add(Weight::from_ref_time(459_517 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_086_000 as u64)
            // Standard Error: 502
            .saturating_add(Weight::from_ref_time(455_480 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 652
            .saturating_add(Weight::from_ref_time(831_684 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_996_000 as u64)
            // Standard Error: 508
            .saturating_add(Weight::from_ref_time(457_165 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(3_076_000 as u64)
            // Standard Error: 311
            .saturating_add(Weight::from_ref_time(87_403 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(3_016_000 as u64)
            // Standard Error: 423
            .saturating_add(Weight::from_ref_time(91_528 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(3_046_000 as u64)
            // Standard Error: 343
            .saturating_add(Weight::from_ref_time(89_611 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_066_000 as u64)
            // Standard Error: 357
            .saturating_add(Weight::from_ref_time(82_003 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_046_000 as u64)
            // Standard Error: 335
            .saturating_add(Weight::from_ref_time(83_577 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(3_046_000 as u64)
            // Standard Error: 342
            .saturating_add(Weight::from_ref_time(82_982 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_046_000 as u64)
            // Standard Error: 335
            .saturating_add(Weight::from_ref_time(83_581 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(3_067_000 as u64)
            // Standard Error: 318
            .saturating_add(Weight::from_ref_time(82_737 as u64).saturating_mul(r as u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(1_000_000 as u64)
            // Standard Error: 211
            .saturating_add(Weight::from_ref_time(140_336 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(4_000_000 as u64)
            // Standard Error: 559
            .saturating_add(Weight::from_ref_time(361_781 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(62_000_000 as u64)
            // Standard Error: 1_474
            .saturating_add(Weight::from_ref_time(1_234_747 as u64).saturating_mul(c as u64))
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(181_473_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(8 as u64))
            .saturating_add(RocksDbWeight::get().writes(6 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(86_323_000 as u64)
            // Standard Error: 23
            .saturating_add(Weight::from_ref_time(42_011 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
            .saturating_add(RocksDbWeight::get().writes(3 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(69_840_000 as u64)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(2_512 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(10_540_880_000 as u64)
            // Standard Error: 468
            .saturating_add(Weight::from_ref_time(17_351 as u64).saturating_mul(c as u64))
            // Standard Error: 28
            .saturating_add(Weight::from_ref_time(970 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(11 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(77_455_000 as u64)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(924 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(126_473_000 as u64)
            // Standard Error: 9
            .saturating_add(Weight::from_ref_time(1_073 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(14 as u64))
            .saturating_add(RocksDbWeight::get().writes(11 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        Weight::from_ref_time(182_185_000 as u64)
            // Standard Error: 2_291
            .saturating_add(Weight::from_ref_time(10_873 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(25 as u64))
            .saturating_add(RocksDbWeight::get().writes(23 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(289_469_000 as u64)
            // Standard Error: 945
            .saturating_add(Weight::from_ref_time(15_338 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(26 as u64))
            .saturating_add(RocksDbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument(c: u32, ) -> Weight {
        Weight::from_ref_time(31_894_000 as u64)
            // Standard Error: 27
            .saturating_add(Weight::from_ref_time(42_891 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(99_560_000 as u64)
            // Standard Error: 46_387
            .saturating_add(Weight::from_ref_time(239_435_495 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        Weight::from_ref_time(348_697_000 as u64)
            // Standard Error: 55_476
            .saturating_add(Weight::from_ref_time(218_834_623 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(118_818_000 as u64)
            // Standard Error: 325_393
            .saturating_add(Weight::from_ref_time(350_286_644 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(117_616_000 as u64)
            // Standard Error: 59_931
            .saturating_add(Weight::from_ref_time(240_686_698 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        Weight::from_ref_time(104_238_000 as u64)
            // Standard Error: 91_575
            .saturating_add(Weight::from_ref_time(226_470_268 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(103_788_000 as u64)
            // Standard Error: 86_080
            .saturating_add(Weight::from_ref_time(232_385_905 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(103_968_000 as u64)
            // Standard Error: 86_333
            .saturating_add(Weight::from_ref_time(226_639_761 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(103_677_000 as u64)
            // Standard Error: 89_559
            .saturating_add(Weight::from_ref_time(226_635_123 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(103_357_000 as u64)
            // Standard Error: 89_193
            .saturating_add(Weight::from_ref_time(226_687_859 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(103_878_000 as u64)
            // Standard Error: 92_667
            .saturating_add(Weight::from_ref_time(226_904_148 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(103_868_000 as u64)
            // Standard Error: 38_523
            .saturating_add(Weight::from_ref_time(204_340_756 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(104_669_000 as u64)
            // Standard Error: 34_967
            .saturating_add(Weight::from_ref_time(196_827_843 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(105_521_000 as u64)
            // Standard Error: 76_163
            .saturating_add(Weight::from_ref_time(239_906_929 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(343_377_000 as u64)
            // Standard Error: 5_444
            .saturating_add(Weight::from_ref_time(7_990_930 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(103_818_000 as u64)
            // Standard Error: 34_478
            .saturating_add(Weight::from_ref_time(196_479_989 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(104_078_000 as u64)
            // Standard Error: 33_688
            .saturating_add(Weight::from_ref_time(204_068_918 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(105_111_000 as u64)
            // Standard Error: 74_503
            .saturating_add(Weight::from_ref_time(243_690_283 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(106_002_000 as u64)
            // Standard Error: 106_414
            .saturating_add(Weight::from_ref_time(505_320_455 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(629_228_000 as u64)
            // Standard Error: 116_829
            .saturating_add(Weight::from_ref_time(19_724_675 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(104_399_000 as u64)
            // Standard Error: 100_893
            .saturating_add(Weight::from_ref_time(342_461_433 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(473_788_000 as u64)
            // Standard Error: 4_607
            .saturating_add(Weight::from_ref_time(15_193_381 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(104_549_000 as u64)
            // Standard Error: 94_028
            .saturating_add(Weight::from_ref_time(250_958_887 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(104_339_000 as u64)
            // Standard Error: 68_743
            .saturating_add(Weight::from_ref_time(252_217_348 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(340_932_000 as u64)
            // Standard Error: 116_916
            .saturating_add(Weight::from_ref_time(19_706_631 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(104_610_000 as u64)
            // Standard Error: 88_433
            .saturating_add(Weight::from_ref_time(230_784_788 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(103_807_000 as u64)
            // Standard Error: 77_075
            .saturating_add(Weight::from_ref_time(244_820_979 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(332_375_000 as u64)
            // Standard Error: 5_176
            .saturating_add(Weight::from_ref_time(26_740_403 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_exit_code(r: u32, ) -> Weight {
        Weight::from_ref_time(104_249_000 as u64)
            // Standard Error: 88_469
            .saturating_add(Weight::from_ref_time(231_275_785 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(103_467_000 as u64)
            // Standard Error: 233_755
            .saturating_add(Weight::from_ref_time(37_839_799 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(102_946_000 as u64)
            // Standard Error: 254_715
            .saturating_add(Weight::from_ref_time(17_355_599 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(103_296_000 as u64)
            // Standard Error: 234_411
            .saturating_add(Weight::from_ref_time(17_907_500 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(104_178_000 as u64)
            // Standard Error: 271_667
            .saturating_add(Weight::from_ref_time(17_055_500 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        Weight::from_ref_time(103_778_000 as u64)
            // Standard Error: 226_146
            .saturating_add(Weight::from_ref_time(18_453_600 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(105_050_000 as u64)
            // Standard Error: 90_934
            .saturating_add(Weight::from_ref_time(254_460_164 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(117_916_000 as u64)
            // Standard Error: 77_012
            .saturating_add(Weight::from_ref_time(425_757_701 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 1024]`.
    /// The range of component `s` is `[0, 1024]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(16_195_444_000 as u64)
            // Standard Error: 158_940
            .saturating_add(Weight::from_ref_time(5_326_618 as u64).saturating_mul(p as u64))
            // Standard Error: 158_940
            .saturating_add(Weight::from_ref_time(222_888_093 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(257 as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(3_067_000 as u64)
            // Standard Error: 193
            .saturating_add(Weight::from_ref_time(5_787 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(5_160_000 as u64)
            // Standard Error: 15_319
            .saturating_add(Weight::from_ref_time(748_131 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(5_120_000 as u64)
            // Standard Error: 25_137
            .saturating_add(Weight::from_ref_time(1_297_673 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(3_027_000 as u64)
            // Standard Error: 277
            .saturating_add(Weight::from_ref_time(614_790 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(2_986_000 as u64)
            // Standard Error: 335
            .saturating_add(Weight::from_ref_time(624_265 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(3_107_000 as u64)
            // Standard Error: 240
            .saturating_add(Weight::from_ref_time(484_846 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_046_000 as u64)
            // Standard Error: 253
            .saturating_add(Weight::from_ref_time(530_571 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(3_066_000 as u64)
            // Standard Error: 811
            .saturating_add(Weight::from_ref_time(1_593_433 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(4_238_000 as u64)
            // Standard Error: 36
            .saturating_add(Weight::from_ref_time(8_726 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(3_157_000 as u64)
            // Standard Error: 513
            .saturating_add(Weight::from_ref_time(652_362 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(3_597_000 as u64)
            // Standard Error: 613
            .saturating_add(Weight::from_ref_time(1_497_193 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(5_090_000 as u64)
            // Standard Error: 153
            .saturating_add(Weight::from_ref_time(75_728 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(3_096_000 as u64)
            // Standard Error: 204
            .saturating_add(Weight::from_ref_time(30_348 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(3_136_000 as u64)
            // Standard Error: 363
            .saturating_add(Weight::from_ref_time(57_812 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(3_197_000 as u64)
            // Standard Error: 284
            .saturating_add(Weight::from_ref_time(56_731 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(14_690_000 as u64)
            // Standard Error: 686
            .saturating_add(Weight::from_ref_time(45_565 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(14_049_000 as u64)
            // Standard Error: 351
            .saturating_add(Weight::from_ref_time(82_636 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(8_437_000 as u64)
            // Standard Error: 570
            .saturating_add(Weight::from_ref_time(1_240_576 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_077_000 as u64)
            // Standard Error: 300
            .saturating_add(Weight::from_ref_time(768_019 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_016_000 as u64)
            // Standard Error: 300
            .saturating_add(Weight::from_ref_time(738_766 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(3_067_000 as u64)
            // Standard Error: 239
            .saturating_add(Weight::from_ref_time(47_982 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_026_000 as u64)
            // Standard Error: 318
            .saturating_add(Weight::from_ref_time(104_958 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_026_000 as u64)
            // Standard Error: 196
            .saturating_add(Weight::from_ref_time(34_916 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_047_000 as u64)
            // Standard Error: 180
            .saturating_add(Weight::from_ref_time(23_723 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 186
            .saturating_add(Weight::from_ref_time(23_924 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(3_026_000 as u64)
            // Standard Error: 347
            .saturating_add(Weight::from_ref_time(106_246 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(3_076_000 as u64)
            // Standard Error: 329
            .saturating_add(Weight::from_ref_time(105_295 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_046_000 as u64)
            // Standard Error: 379
            .saturating_add(Weight::from_ref_time(107_727 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_016_000 as u64)
            // Standard Error: 401
            .saturating_add(Weight::from_ref_time(107_679 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_067_000 as u64)
            // Standard Error: 420
            .saturating_add(Weight::from_ref_time(106_855 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_036_000 as u64)
            // Standard Error: 381
            .saturating_add(Weight::from_ref_time(107_674 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(2_996_000 as u64)
            // Standard Error: 426
            .saturating_add(Weight::from_ref_time(106_765 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_016_000 as u64)
            // Standard Error: 403
            .saturating_add(Weight::from_ref_time(108_487 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 402
            .saturating_add(Weight::from_ref_time(106_377 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 404
            .saturating_add(Weight::from_ref_time(107_694 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(3_006_000 as u64)
            // Standard Error: 363
            .saturating_add(Weight::from_ref_time(92_547 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(3_046_000 as u64)
            // Standard Error: 360
            .saturating_add(Weight::from_ref_time(89_739 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(3_086_000 as u64)
            // Standard Error: 361
            .saturating_add(Weight::from_ref_time(115_453 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 416
            .saturating_add(Weight::from_ref_time(459_517 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_086_000 as u64)
            // Standard Error: 502
            .saturating_add(Weight::from_ref_time(455_480 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 652
            .saturating_add(Weight::from_ref_time(831_684 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_996_000 as u64)
            // Standard Error: 508
            .saturating_add(Weight::from_ref_time(457_165 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(3_076_000 as u64)
            // Standard Error: 311
            .saturating_add(Weight::from_ref_time(87_403 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(3_016_000 as u64)
            // Standard Error: 423
            .saturating_add(Weight::from_ref_time(91_528 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(3_046_000 as u64)
            // Standard Error: 343
            .saturating_add(Weight::from_ref_time(89_611 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_066_000 as u64)
            // Standard Error: 357
            .saturating_add(Weight::from_ref_time(82_003 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_046_000 as u64)
            // Standard Error: 335
            .saturating_add(Weight::from_ref_time(83_577 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(3_046_000 as u64)
            // Standard Error: 342
            .saturating_add(Weight::from_ref_time(82_982 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_046_000 as u64)
            // Standard Error: 335
            .saturating_add(Weight::from_ref_time(83_581 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(3_067_000 as u64)
            // Standard Error: 318
            .saturating_add(Weight::from_ref_time(82_737 as u64).saturating_mul(r as u64))
    }
}
