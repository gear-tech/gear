// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-07-18, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/gear-node benchmark pallet --chain=dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./pallets/gear/src/weights.rs --template=./.maintain/gear-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
	fn allocation_cost() -> Weight;
	fn grow_cost() -> Weight;
	fn initial_cost() -> Weight;
	fn load_cost() -> Weight;
	fn claim_value_from_mailbox() -> Weight;
	fn submit_code(c: u32, ) -> Weight;
	fn submit_program(c: u32, s: u32, ) -> Weight;
	fn send_message(p: u32, ) -> Weight;
	fn send_reply(p: u32, ) -> Weight;
	fn initial_allocation(q: u32, ) -> Weight;
	fn alloc_in_handle(q: u32, ) -> Weight;
	fn reinstrument(c: u32, ) -> Weight;
	fn alloc(r: u32, ) -> Weight;
	fn gas(r: u32, ) -> Weight;
	fn gr_gas_available(r: u32, ) -> Weight;
	fn gr_msg_id(r: u32, ) -> Weight;
	fn gr_origin(r: u32, ) -> Weight;
	fn gr_program_id(r: u32, ) -> Weight;
	fn gr_source(r: u32, ) -> Weight;
	fn gr_value(r: u32, ) -> Weight;
	fn gr_value_available(r: u32, ) -> Weight;
	fn gr_size(r: u32, ) -> Weight;
	fn gr_read(r: u32, ) -> Weight;
	fn gr_read_per_kb(n: u32, ) -> Weight;
	fn gr_block_height(r: u32, ) -> Weight;
	fn gr_block_timestamp(r: u32, ) -> Weight;
	fn gr_send_init(r: u32, ) -> Weight;
	fn gr_send_push(r: u32, ) -> Weight;
	fn gr_send_push_per_kb(n: u32, ) -> Weight;
	fn gr_send_commit(r: u32, ) -> Weight;
	fn gr_send_commit_per_kb(n: u32, ) -> Weight;
	fn gr_reply_commit(r: u32, ) -> Weight;
	fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
	fn gr_reply_push(r: u32, ) -> Weight;
	fn gr_reply_push_per_kb(n: u32, ) -> Weight;
	fn gr_reply_to(r: u32, ) -> Weight;
	fn gr_debug(r: u32, ) -> Weight;
	fn gr_exit_code(r: u32, ) -> Weight;
	fn gr_exit(r: u32, ) -> Weight;
	fn gr_leave(r: u32, ) -> Weight;
	fn gr_wait(r: u32, ) -> Weight;
	fn gr_wake(r: u32, ) -> Weight;
	fn gr_create_program_wgas(r: u32, ) -> Weight;
	fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct GearWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for GearWeight<T> {
	fn allocation_cost() -> Weight {
		// To be changed with the proper value.
		T::DbWeight::get().writes(1 as Weight)
	}
	fn grow_cost() -> Weight {
		// To be changed with the proper value.
		T::DbWeight::get().writes(1 as Weight)
	}
	fn initial_cost() -> Weight {
		T::DbWeight::get().writes(1 as Weight)
	}
	fn load_cost() -> Weight {
		T::DbWeight::get().reads(1 as Weight)
	}
	fn claim_value_from_mailbox() -> Weight {
		(116_148_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn submit_code(c: u32, ) -> Weight {
		(97_256_000 as Weight)
			// Standard Error: 0
			.saturating_add((51_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn submit_program(c: u32, s: u32, ) -> Weight {
		(423_368_000 as Weight)
			// Standard Error: 0
			.saturating_add((49_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((3_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn send_message(p: u32, ) -> Weight {
		(118_838_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn send_reply(p: u32, ) -> Weight {
		(159_597_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(12 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	fn initial_allocation(_q: u32, ) -> Weight {
		(305_612_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(25 as Weight))
			.saturating_add(T::DbWeight::get().writes(17 as Weight))
	}
	fn alloc_in_handle(_q: u32, ) -> Weight {
		(488_919_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(23 as Weight))
			.saturating_add(T::DbWeight::get().writes(15 as Weight))
	}
	fn reinstrument(c: u32, ) -> Weight {
		(29_346_000 as Weight)
			// Standard Error: 0
			.saturating_add((53_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn alloc(r: u32, ) -> Weight {
		(175_829_000 as Weight)
			// Standard Error: 342_000
			.saturating_add((371_671_000 as Weight).saturating_mul(r as Weight))
	}
	fn gas(r: u32, ) -> Weight {
		(157_565_000 as Weight)
			// Standard Error: 100_000
			.saturating_add((98_683_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_gas_available(r: u32, ) -> Weight {
		(154_514_000 as Weight)
			// Standard Error: 117_000
			.saturating_add((99_466_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_msg_id(r: u32, ) -> Weight {
		(215_123_000 as Weight)
			// Standard Error: 178_000
			.saturating_add((123_090_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_origin(r: u32, ) -> Weight {
		(207_078_000 as Weight)
			// Standard Error: 244_000
			.saturating_add((121_657_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_program_id(r: u32, ) -> Weight {
		(203_665_000 as Weight)
			// Standard Error: 163_000
			.saturating_add((122_046_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_source(r: u32, ) -> Weight {
		(211_953_000 as Weight)
			// Standard Error: 178_000
			.saturating_add((122_989_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_value(r: u32, ) -> Weight {
		(240_656_000 as Weight)
			// Standard Error: 875_000
			.saturating_add((119_561_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_value_available(r: u32, ) -> Weight {
		(178_204_000 as Weight)
			// Standard Error: 1_765_000
			.saturating_add((130_071_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_size(r: u32, ) -> Weight {
		(154_804_000 as Weight)
			// Standard Error: 105_000
			.saturating_add((81_776_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_read(r: u32, ) -> Weight {
		(183_128_000 as Weight)
			// Standard Error: 160_000
			.saturating_add((121_062_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_read_per_kb(n: u32, ) -> Weight {
		(306_945_000 as Weight)
			// Standard Error: 109_000
			.saturating_add((32_562_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_block_height(r: u32, ) -> Weight {
		(156_169_000 as Weight)
			// Standard Error: 124_000
			.saturating_add((84_924_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_block_timestamp(r: u32, ) -> Weight {
		(156_409_000 as Weight)
			// Standard Error: 120_000
			.saturating_add((98_889_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_send_init(r: u32, ) -> Weight {
		(282_797_000 as Weight)
			// Standard Error: 209_000
			.saturating_add((146_463_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_send_push(r: u32, ) -> Weight {
		(438_475_000 as Weight)
			// Standard Error: 1_648_000
			.saturating_add((280_115_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_send_push_per_kb(n: u32, ) -> Weight {
		(598_351_000 as Weight)
			// Standard Error: 58_000
			.saturating_add((60_053_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_send_commit(r: u32, ) -> Weight {
		(306_310_000 as Weight)
			// Standard Error: 1_464_000
			.saturating_add((681_127_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(15 as Weight))
			.saturating_add(T::DbWeight::get().reads((40 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
			.saturating_add(T::DbWeight::get().writes((40 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_send_commit_per_kb(n: u32, ) -> Weight {
		(354_853_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((5_637_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(17 as Weight))
			.saturating_add(T::DbWeight::get().writes(12 as Weight))
	}
	fn gr_reply_commit(r: u32, ) -> Weight {
		(379_944_000 as Weight)
			// Standard Error: 361_000
			.saturating_add((156_575_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(12 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
		(552_685_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((164_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn gr_reply_push(r: u32, ) -> Weight {
		(266_077_000 as Weight)
			// Standard Error: 1_089_000
			.saturating_add((127_747_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_reply_push_per_kb(n: u32, ) -> Weight {
		(345_458_000 as Weight)
			// Standard Error: 53_000
			.saturating_add((59_793_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_reply_to(r: u32, ) -> Weight {
		(238_856_000 as Weight)
			// Standard Error: 292_000
			.saturating_add((4_367_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn gr_debug(r: u32, ) -> Weight {
		(232_622_000 as Weight)
			// Standard Error: 184_000
			.saturating_add((125_570_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn gr_exit_code(r: u32, ) -> Weight {
		(228_893_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((4_418_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn gr_exit(r: u32, ) -> Weight {
		(252_982_000 as Weight)
			// Standard Error: 532_000
			.saturating_add((143_511_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().reads((6 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
			.saturating_add(T::DbWeight::get().writes((4 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_leave(r: u32, ) -> Weight {
		(227_571_000 as Weight)
			// Standard Error: 330_000
			.saturating_add((25_870_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn gr_wait(r: u32, ) -> Weight {
		(227_741_000 as Weight)
			// Standard Error: 310_000
			.saturating_add((18_345_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_wake(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 7_193_000
			.saturating_add((4_472_428_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().reads((301 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
			.saturating_add(T::DbWeight::get().writes((200 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_create_program_wgas(r: u32, ) -> Weight {
		(256_298_000 as Weight)
			// Standard Error: 288_000
			.saturating_add((100_744_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().reads((3 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
		(361_628_000 as Weight)
			// Standard Error: 73_000
			.saturating_add((4_670_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(8_452_000 as Weight)
			// Standard Error: 0
			.saturating_add((4_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(45_457_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((363_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(64_178_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((622_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(8_488_000 as Weight)
			// Standard Error: 0
			.saturating_add((655_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(8_444_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((674_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(8_605_000 as Weight)
			// Standard Error: 0
			.saturating_add((399_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(9_203_000 as Weight)
			// Standard Error: 0
			.saturating_add((529_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(9_251_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_607_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(10_145_000 as Weight)
			// Standard Error: 0
			.saturating_add((20_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(11_152_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((544_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(15_223_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_678_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(11_876_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((149_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(8_406_000 as Weight)
			// Standard Error: 0
			.saturating_add((64_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(8_537_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((129_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(8_771_000 as Weight)
			// Standard Error: 0
			.saturating_add((120_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(22_725_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((176_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(25_892_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((200_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(12_899_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_800_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(12_359_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((493_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(8_481_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((589_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(8_338_000 as Weight)
			// Standard Error: 0
			.saturating_add((109_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(8_320_000 as Weight)
			// Standard Error: 0
			.saturating_add((216_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(8_313_000 as Weight)
			// Standard Error: 0
			.saturating_add((69_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(8_195_000 as Weight)
			// Standard Error: 0
			.saturating_add((48_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(8_151_000 as Weight)
			// Standard Error: 0
			.saturating_add((49_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(8_351_000 as Weight)
			// Standard Error: 0
			.saturating_add((215_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(8_351_000 as Weight)
			// Standard Error: 0
			.saturating_add((215_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(8_304_000 as Weight)
			// Standard Error: 0
			.saturating_add((218_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(8_351_000 as Weight)
			// Standard Error: 0
			.saturating_add((216_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(8_412_000 as Weight)
			// Standard Error: 0
			.saturating_add((214_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(8_431_000 as Weight)
			// Standard Error: 0
			.saturating_add((213_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(8_280_000 as Weight)
			// Standard Error: 0
			.saturating_add((219_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(8_351_000 as Weight)
			// Standard Error: 0
			.saturating_add((217_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(7_735_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((266_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(8_812_000 as Weight)
			// Standard Error: 0
			.saturating_add((244_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(8_859_000 as Weight)
			// Standard Error: 0
			.saturating_add((184_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(8_791_000 as Weight)
			// Standard Error: 0
			.saturating_add((187_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(8_762_000 as Weight)
			// Standard Error: 0
			.saturating_add((239_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(9_668_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((929_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(9_345_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((853_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(7_966_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_808_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(9_498_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((852_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(8_750_000 as Weight)
			// Standard Error: 0
			.saturating_add((188_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(8_897_000 as Weight)
			// Standard Error: 0
			.saturating_add((183_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(8_940_000 as Weight)
			// Standard Error: 0
			.saturating_add((183_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(8_808_000 as Weight)
			// Standard Error: 0
			.saturating_add((167_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(8_872_000 as Weight)
			// Standard Error: 0
			.saturating_add((164_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(8_744_000 as Weight)
			// Standard Error: 0
			.saturating_add((168_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(8_837_000 as Weight)
			// Standard Error: 0
			.saturating_add((165_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(8_906_000 as Weight)
			// Standard Error: 0
			.saturating_add((163_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn allocation_cost() -> Weight {
		// To be changed with the proper value.
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn grow_cost() -> Weight {
		// To be changed with the proper value.
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn initial_cost() -> Weight {
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn load_cost() -> Weight {
		RocksDbWeight::get().reads(1 as Weight)
	}
	fn claim_value_from_mailbox() -> Weight {
		(116_148_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	fn submit_code(c: u32, ) -> Weight {
		(97_256_000 as Weight)
			// Standard Error: 0
			.saturating_add((51_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn submit_program(c: u32, s: u32, ) -> Weight {
		(423_368_000 as Weight)
			// Standard Error: 0
			.saturating_add((49_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((3_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn send_message(p: u32, ) -> Weight {
		(118_838_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn send_reply(p: u32, ) -> Weight {
		(159_597_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(RocksDbWeight::get().reads(12 as Weight))
			.saturating_add(RocksDbWeight::get().writes(10 as Weight))
	}
	fn initial_allocation(_q: u32, ) -> Weight {
		(305_612_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(25 as Weight))
			.saturating_add(RocksDbWeight::get().writes(17 as Weight))
	}
	fn alloc_in_handle(_q: u32, ) -> Weight {
		(488_919_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(23 as Weight))
			.saturating_add(RocksDbWeight::get().writes(15 as Weight))
	}
	fn reinstrument(c: u32, ) -> Weight {
		(29_346_000 as Weight)
			// Standard Error: 0
			.saturating_add((53_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn alloc(r: u32, ) -> Weight {
		(175_829_000 as Weight)
			// Standard Error: 342_000
			.saturating_add((371_671_000 as Weight).saturating_mul(r as Weight))
	}
	fn gas(r: u32, ) -> Weight {
		(157_565_000 as Weight)
			// Standard Error: 100_000
			.saturating_add((98_683_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_gas_available(r: u32, ) -> Weight {
		(154_514_000 as Weight)
			// Standard Error: 117_000
			.saturating_add((99_466_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_msg_id(r: u32, ) -> Weight {
		(215_123_000 as Weight)
			// Standard Error: 178_000
			.saturating_add((123_090_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_origin(r: u32, ) -> Weight {
		(207_078_000 as Weight)
			// Standard Error: 244_000
			.saturating_add((121_657_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_program_id(r: u32, ) -> Weight {
		(203_665_000 as Weight)
			// Standard Error: 163_000
			.saturating_add((122_046_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_source(r: u32, ) -> Weight {
		(211_953_000 as Weight)
			// Standard Error: 178_000
			.saturating_add((122_989_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_value(r: u32, ) -> Weight {
		(240_656_000 as Weight)
			// Standard Error: 875_000
			.saturating_add((119_561_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_value_available(r: u32, ) -> Weight {
		(178_204_000 as Weight)
			// Standard Error: 1_765_000
			.saturating_add((130_071_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_size(r: u32, ) -> Weight {
		(154_804_000 as Weight)
			// Standard Error: 105_000
			.saturating_add((81_776_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_read(r: u32, ) -> Weight {
		(183_128_000 as Weight)
			// Standard Error: 160_000
			.saturating_add((121_062_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_read_per_kb(n: u32, ) -> Weight {
		(306_945_000 as Weight)
			// Standard Error: 109_000
			.saturating_add((32_562_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_block_height(r: u32, ) -> Weight {
		(156_169_000 as Weight)
			// Standard Error: 124_000
			.saturating_add((84_924_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_block_timestamp(r: u32, ) -> Weight {
		(156_409_000 as Weight)
			// Standard Error: 120_000
			.saturating_add((98_889_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_send_init(r: u32, ) -> Weight {
		(282_797_000 as Weight)
			// Standard Error: 209_000
			.saturating_add((146_463_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_send_push(r: u32, ) -> Weight {
		(438_475_000 as Weight)
			// Standard Error: 1_648_000
			.saturating_add((280_115_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_send_push_per_kb(n: u32, ) -> Weight {
		(598_351_000 as Weight)
			// Standard Error: 58_000
			.saturating_add((60_053_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_send_commit(r: u32, ) -> Weight {
		(306_310_000 as Weight)
			// Standard Error: 1_464_000
			.saturating_add((681_127_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(15 as Weight))
			.saturating_add(RocksDbWeight::get().reads((40 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes((40 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_send_commit_per_kb(n: u32, ) -> Weight {
		(354_853_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((5_637_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(17 as Weight))
			.saturating_add(RocksDbWeight::get().writes(12 as Weight))
	}
	fn gr_reply_commit(r: u32, ) -> Weight {
		(379_944_000 as Weight)
			// Standard Error: 361_000
			.saturating_add((156_575_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(12 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
		(552_685_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((164_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn gr_reply_push(r: u32, ) -> Weight {
		(266_077_000 as Weight)
			// Standard Error: 1_089_000
			.saturating_add((127_747_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_reply_push_per_kb(n: u32, ) -> Weight {
		(345_458_000 as Weight)
			// Standard Error: 53_000
			.saturating_add((59_793_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_reply_to(r: u32, ) -> Weight {
		(238_856_000 as Weight)
			// Standard Error: 292_000
			.saturating_add((4_367_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn gr_debug(r: u32, ) -> Weight {
		(232_622_000 as Weight)
			// Standard Error: 184_000
			.saturating_add((125_570_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn gr_exit_code(r: u32, ) -> Weight {
		(228_893_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((4_418_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn gr_exit(r: u32, ) -> Weight {
		(252_982_000 as Weight)
			// Standard Error: 532_000
			.saturating_add((143_511_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().reads((6 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes((4 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_leave(r: u32, ) -> Weight {
		(227_571_000 as Weight)
			// Standard Error: 330_000
			.saturating_add((25_870_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn gr_wait(r: u32, ) -> Weight {
		(227_741_000 as Weight)
			// Standard Error: 310_000
			.saturating_add((18_345_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_wake(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 7_193_000
			.saturating_add((4_472_428_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().reads((301 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes((200 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_create_program_wgas(r: u32, ) -> Weight {
		(256_298_000 as Weight)
			// Standard Error: 288_000
			.saturating_add((100_744_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().reads((3 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
		(361_628_000 as Weight)
			// Standard Error: 73_000
			.saturating_add((4_670_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(8_452_000 as Weight)
			// Standard Error: 0
			.saturating_add((4_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(45_457_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((363_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(64_178_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((622_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(8_488_000 as Weight)
			// Standard Error: 0
			.saturating_add((655_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(8_444_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((674_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(8_605_000 as Weight)
			// Standard Error: 0
			.saturating_add((399_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(9_203_000 as Weight)
			// Standard Error: 0
			.saturating_add((529_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(9_251_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_607_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(10_145_000 as Weight)
			// Standard Error: 0
			.saturating_add((20_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(11_152_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((544_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(15_223_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_678_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(11_876_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((149_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(8_406_000 as Weight)
			// Standard Error: 0
			.saturating_add((64_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(8_537_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((129_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(8_771_000 as Weight)
			// Standard Error: 0
			.saturating_add((120_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(22_725_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((176_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(25_892_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((200_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(12_899_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_800_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(12_359_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((493_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(8_481_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((589_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(8_338_000 as Weight)
			// Standard Error: 0
			.saturating_add((109_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(8_320_000 as Weight)
			// Standard Error: 0
			.saturating_add((216_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(8_313_000 as Weight)
			// Standard Error: 0
			.saturating_add((69_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(8_195_000 as Weight)
			// Standard Error: 0
			.saturating_add((48_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(8_151_000 as Weight)
			// Standard Error: 0
			.saturating_add((49_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(8_351_000 as Weight)
			// Standard Error: 0
			.saturating_add((215_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(8_351_000 as Weight)
			// Standard Error: 0
			.saturating_add((215_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(8_304_000 as Weight)
			// Standard Error: 0
			.saturating_add((218_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(8_351_000 as Weight)
			// Standard Error: 0
			.saturating_add((216_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(8_412_000 as Weight)
			// Standard Error: 0
			.saturating_add((214_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(8_431_000 as Weight)
			// Standard Error: 0
			.saturating_add((213_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(8_280_000 as Weight)
			// Standard Error: 0
			.saturating_add((219_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(8_351_000 as Weight)
			// Standard Error: 0
			.saturating_add((217_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(7_735_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((266_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(8_812_000 as Weight)
			// Standard Error: 0
			.saturating_add((244_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(8_859_000 as Weight)
			// Standard Error: 0
			.saturating_add((184_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(8_791_000 as Weight)
			// Standard Error: 0
			.saturating_add((187_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(8_762_000 as Weight)
			// Standard Error: 0
			.saturating_add((239_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(9_668_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((929_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(9_345_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((853_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(7_966_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_808_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(9_498_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((852_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(8_750_000 as Weight)
			// Standard Error: 0
			.saturating_add((188_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(8_897_000 as Weight)
			// Standard Error: 0
			.saturating_add((183_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(8_940_000 as Weight)
			// Standard Error: 0
			.saturating_add((183_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(8_808_000 as Weight)
			// Standard Error: 0
			.saturating_add((167_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(8_872_000 as Weight)
			// Standard Error: 0
			.saturating_add((164_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(8_744_000 as Weight)
			// Standard Error: 0
			.saturating_add((168_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(8_837_000 as Weight)
			// Standard Error: 0
			.saturating_add((165_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(8_906_000 as Weight)
			// Standard Error: 0
			.saturating_add((163_000 as Weight).saturating_mul(r as Weight))
	}
}
