// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-04-23, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("local"), DB CACHE: 1024

// Executed Command:
// ./target/release/gear-node benchmark --chain=local --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./pallets/gear/src/weights.rs --template=./.maintain/gear-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
	fn submit_code(c: u32, ) -> Weight;
	fn submit_program(c: u32, s: u32, ) -> Weight;
	fn send_message(p: u32, ) -> Weight;
	fn send_reply(p: u32, ) -> Weight;
	fn initial_allocation(q: u32, ) -> Weight;
	fn alloc_in_handle(q: u32, ) -> Weight;
	fn reinstrument(c: u32, ) -> Weight;
	fn alloc(r: u32, ) -> Weight;
	fn gas(r: u32, ) -> Weight;
	fn gr_gas_available(r: u32, ) -> Weight;
	fn gr_msg_id(r: u32, ) -> Weight;
	fn gr_origin(r: u32, ) -> Weight;
	fn gr_program_id(r: u32, ) -> Weight;
	fn gr_source(r: u32, ) -> Weight;
	fn gr_value(r: u32, ) -> Weight;
	fn gr_value_available(r: u32, ) -> Weight;
	fn gr_size(r: u32, ) -> Weight;
	fn gr_read(r: u32, ) -> Weight;
	fn gr_read_per_kb(n: u32, ) -> Weight;
	fn gr_block_height(r: u32, ) -> Weight;
	fn gr_block_timestamp(r: u32, ) -> Weight;
	fn gr_send_init(r: u32, ) -> Weight;
	fn gr_send_push(r: u32, ) -> Weight;
	fn gr_send_push_per_kb(n: u32, ) -> Weight;
	fn gr_send_commit(r: u32, ) -> Weight;
	fn gr_send_commit_per_kb(n: u32, ) -> Weight;
	fn gr_reply(r: u32, ) -> Weight;
	fn gr_reply_per_kb(n: u32, ) -> Weight;
	fn gr_reply_to(r: u32, ) -> Weight;
	fn gr_debug(r: u32, ) -> Weight;
	fn gr_exit_code(r: u32, ) -> Weight;
	fn gr_exit(r: u32, ) -> Weight;
	fn gr_leave(r: u32, ) -> Weight;
	fn gr_wait(r: u32, ) -> Weight;
	fn gr_wake(r: u32, ) -> Weight;
	fn gr_create_program_wgas(r: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct GearWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for GearWeight<T> {
	fn submit_code(c: u32, ) -> Weight {
		(34_126_000 as Weight)
			// Standard Error: 0
			.saturating_add((49_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn submit_program(c: u32, s: u32, ) -> Weight {
		(55_300_000 as Weight)
			// Standard Error: 0
			.saturating_add((49_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	fn send_message(_p: u32, ) -> Weight {
		(42_031_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn send_reply(p: u32, ) -> Weight {
		(39_506_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn initial_allocation(q: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 32_982_000
			.saturating_add((2_968_104_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(18 as Weight))
			.saturating_add(T::DbWeight::get().writes(15 as Weight))
			.saturating_add(T::DbWeight::get().writes((16 as Weight).saturating_mul(q as Weight)))
	}
	fn alloc_in_handle(_q: u32, ) -> Weight {
		(234_639_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(18 as Weight))
			.saturating_add(T::DbWeight::get().writes(31 as Weight))
	}
	fn reinstrument(c: u32, ) -> Weight {
		(8_872_000 as Weight)
			// Standard Error: 0
			.saturating_add((49_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn alloc(r: u32, ) -> Weight {
		(185_855_000 as Weight)
			// Standard Error: 1_485_000
			.saturating_add((381_804_000 as Weight).saturating_mul(r as Weight))
	}
	fn gas(r: u32, ) -> Weight {
		(173_532_000 as Weight)
			// Standard Error: 294_000
			.saturating_add((50_737_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_gas_available(r: u32, ) -> Weight {
		(180_197_000 as Weight)
			// Standard Error: 149_000
			.saturating_add((46_251_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_msg_id(r: u32, ) -> Weight {
		(230_184_000 as Weight)
			// Standard Error: 522_000
			.saturating_add((63_931_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
	}
	fn gr_origin(r: u32, ) -> Weight {
		(238_506_000 as Weight)
			// Standard Error: 195_000
			.saturating_add((60_768_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
	}
	fn gr_program_id(r: u32, ) -> Weight {
		(245_465_000 as Weight)
			// Standard Error: 243_000
			.saturating_add((60_444_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
	}
	fn gr_source(r: u32, ) -> Weight {
		(250_048_000 as Weight)
			// Standard Error: 231_000
			.saturating_add((60_093_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
	}
	fn gr_value(r: u32, ) -> Weight {
		(248_292_000 as Weight)
			// Standard Error: 318_000
			.saturating_add((59_296_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
	}
	fn gr_value_available(r: u32, ) -> Weight {
		(246_939_000 as Weight)
			// Standard Error: 264_000
			.saturating_add((59_141_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
	}
	fn gr_size(r: u32, ) -> Weight {
		(184_566_000 as Weight)
			// Standard Error: 164_000
			.saturating_add((39_262_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_read(r: u32, ) -> Weight {
		(183_981_000 as Weight)
			// Standard Error: 254_000
			.saturating_add((66_366_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_read_per_kb(n: u32, ) -> Weight {
		(157_374_000 as Weight)
			// Standard Error: 276_000
			.saturating_add((26_009_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
	}
	fn gr_block_height(r: u32, ) -> Weight {
		(181_006_000 as Weight)
			// Standard Error: 148_000
			.saturating_add((40_235_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_block_timestamp(r: u32, ) -> Weight {
		(187_390_000 as Weight)
			// Standard Error: 167_000
			.saturating_add((45_638_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_send_init(r: u32, ) -> Weight {
		(279_279_000 as Weight)
			// Standard Error: 249_000
			.saturating_add((74_528_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn gr_send_push(r: u32, ) -> Weight {
		(271_703_000 as Weight)
			// Standard Error: 322_000
			.saturating_add((153_195_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn gr_send_push_per_kb(n: u32, ) -> Weight {
		(385_592_000 as Weight)
			// Standard Error: 174_000
			.saturating_add((39_278_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn gr_send_commit(r: u32, ) -> Weight {
		(242_500_000 as Weight)
			// Standard Error: 1_015_000
			.saturating_add((91_100_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().reads((8 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
			.saturating_add(T::DbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_send_commit_per_kb(n: u32, ) -> Weight {
		(313_108_000 as Weight)
			// Standard Error: 45_000
			.saturating_add((4_107_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(12 as Weight))
	}
	fn gr_reply(r: u32, ) -> Weight {
		(308_819_000 as Weight)
			// Standard Error: 288_000
			.saturating_add((78_785_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn gr_reply_per_kb(n: u32, ) -> Weight {
		(417_390_000 as Weight)
			// Standard Error: 51_000
			.saturating_add((1_207_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(16 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	fn gr_reply_to(r: u32, ) -> Weight {
		(200_380_000 as Weight)
			// Standard Error: 220_000
			.saturating_add((8_369_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_debug(r: u32, ) -> Weight {
		(221_652_000 as Weight)
			// Standard Error: 232_000
			.saturating_add((58_807_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_exit_code(r: u32, ) -> Weight {
		(205_879_000 as Weight)
			// Standard Error: 53_000
			.saturating_add((7_238_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_exit(r: u32, ) -> Weight {
		(229_500_000 as Weight)
			// Standard Error: 2_556_000
			.saturating_add((237_700_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().reads((6 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
			.saturating_add(T::DbWeight::get().writes((257 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_leave(r: u32, ) -> Weight {
		(211_900_000 as Weight)
			// Standard Error: 1_056_000
			.saturating_add((29_300_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_wait(r: u32, ) -> Weight {
		(224_500_000 as Weight)
			// Standard Error: 343_000
			.saturating_add((7_800_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_wake(r: u32, ) -> Weight {
		(79_242_000 as Weight)
			// Standard Error: 1_261_000
			.saturating_add((1_687_636_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().reads((101 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
			.saturating_add(T::DbWeight::get().writes((200 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_create_program_wgas(r: u32, ) -> Weight {
		(232_000_000 as Weight)
			// Standard Error: 5_463_000
			.saturating_add((107_900_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().reads((8 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
			.saturating_add(T::DbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(8_410_000 as Weight)
			// Standard Error: 39_000
			.saturating_add((901_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(76_490_000 as Weight)
			// Standard Error: 57_000
			.saturating_add((2_138_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(63_854_000 as Weight)
			// Standard Error: 61_000
			.saturating_add((1_839_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(21_304_000 as Weight)
			// Standard Error: 51_000
			.saturating_add((1_275_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(15_120_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((1_508_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(12_228_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((664_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(13_758_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((1_072_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(15_371_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((1_317_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(14_449_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((41_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(8_402_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((3_638_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(20_433_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((4_404_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(19_304_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((351_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(9_710_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((435_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(7_680_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((769_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(12_132_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((598_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(14_342_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((549_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(16_575_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((593_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(9_103_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((716_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(9_079_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((861_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(12_768_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((860_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(10_380_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((868_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(12_593_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((833_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(11_177_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((803_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(8_557_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((975_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(8_439_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((977_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(14_227_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((1_066_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(14_735_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((1_115_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(12_200_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((1_167_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(12_975_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((1_212_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(12_888_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((1_273_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(11_816_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((1_119_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(9_795_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((1_170_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(15_321_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((1_082_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(10_251_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((1_219_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(11_695_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((1_193_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(15_500_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((1_138_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(13_636_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((1_194_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(11_444_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((1_211_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(13_650_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((1_096_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(12_370_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((1_106_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(13_300_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((1_121_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(13_729_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((1_122_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(13_058_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((1_151_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(10_718_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((1_153_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(9_813_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((1_229_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(13_607_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((1_148_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(29_687_000 as Weight)
			// Standard Error: 73_000
			.saturating_add((896_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(13_555_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((1_070_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(13_047_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((1_107_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(14_472_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((1_109_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn submit_code(c: u32, ) -> Weight {
		(34_126_000 as Weight)
			// Standard Error: 0
			.saturating_add((49_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn submit_program(c: u32, s: u32, ) -> Weight {
		(55_300_000 as Weight)
			// Standard Error: 0
			.saturating_add((49_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(10 as Weight))
	}
	fn send_message(_p: u32, ) -> Weight {
		(42_031_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn send_reply(p: u32, ) -> Weight {
		(39_506_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn initial_allocation(q: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 32_982_000
			.saturating_add((2_968_104_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(18 as Weight))
			.saturating_add(RocksDbWeight::get().writes(15 as Weight))
			.saturating_add(RocksDbWeight::get().writes((16 as Weight).saturating_mul(q as Weight)))
	}
	fn alloc_in_handle(_q: u32, ) -> Weight {
		(234_639_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(18 as Weight))
			.saturating_add(RocksDbWeight::get().writes(31 as Weight))
	}
	fn reinstrument(c: u32, ) -> Weight {
		(8_872_000 as Weight)
			// Standard Error: 0
			.saturating_add((49_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn alloc(r: u32, ) -> Weight {
		(185_855_000 as Weight)
			// Standard Error: 1_485_000
			.saturating_add((381_804_000 as Weight).saturating_mul(r as Weight))
	}
	fn gas(r: u32, ) -> Weight {
		(173_532_000 as Weight)
			// Standard Error: 294_000
			.saturating_add((50_737_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_gas_available(r: u32, ) -> Weight {
		(180_197_000 as Weight)
			// Standard Error: 149_000
			.saturating_add((46_251_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_msg_id(r: u32, ) -> Weight {
		(230_184_000 as Weight)
			// Standard Error: 522_000
			.saturating_add((63_931_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
	}
	fn gr_origin(r: u32, ) -> Weight {
		(238_506_000 as Weight)
			// Standard Error: 195_000
			.saturating_add((60_768_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
	}
	fn gr_program_id(r: u32, ) -> Weight {
		(245_465_000 as Weight)
			// Standard Error: 243_000
			.saturating_add((60_444_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
	}
	fn gr_source(r: u32, ) -> Weight {
		(250_048_000 as Weight)
			// Standard Error: 231_000
			.saturating_add((60_093_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
	}
	fn gr_value(r: u32, ) -> Weight {
		(248_292_000 as Weight)
			// Standard Error: 318_000
			.saturating_add((59_296_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
	}
	fn gr_value_available(r: u32, ) -> Weight {
		(246_939_000 as Weight)
			// Standard Error: 264_000
			.saturating_add((59_141_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
	}
	fn gr_size(r: u32, ) -> Weight {
		(184_566_000 as Weight)
			// Standard Error: 164_000
			.saturating_add((39_262_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_read(r: u32, ) -> Weight {
		(183_981_000 as Weight)
			// Standard Error: 254_000
			.saturating_add((66_366_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_read_per_kb(n: u32, ) -> Weight {
		(157_374_000 as Weight)
			// Standard Error: 276_000
			.saturating_add((26_009_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
	}
	fn gr_block_height(r: u32, ) -> Weight {
		(181_006_000 as Weight)
			// Standard Error: 148_000
			.saturating_add((40_235_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_block_timestamp(r: u32, ) -> Weight {
		(187_390_000 as Weight)
			// Standard Error: 167_000
			.saturating_add((45_638_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_send_init(r: u32, ) -> Weight {
		(279_279_000 as Weight)
			// Standard Error: 249_000
			.saturating_add((74_528_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn gr_send_push(r: u32, ) -> Weight {
		(271_703_000 as Weight)
			// Standard Error: 322_000
			.saturating_add((153_195_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn gr_send_push_per_kb(n: u32, ) -> Weight {
		(385_592_000 as Weight)
			// Standard Error: 174_000
			.saturating_add((39_278_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn gr_send_commit(r: u32, ) -> Weight {
		(242_500_000 as Weight)
			// Standard Error: 1_015_000
			.saturating_add((91_100_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().reads((8 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_send_commit_per_kb(n: u32, ) -> Weight {
		(313_108_000 as Weight)
			// Standard Error: 45_000
			.saturating_add((4_107_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(12 as Weight))
	}
	fn gr_reply(r: u32, ) -> Weight {
		(308_819_000 as Weight)
			// Standard Error: 288_000
			.saturating_add((78_785_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn gr_reply_per_kb(n: u32, ) -> Weight {
		(417_390_000 as Weight)
			// Standard Error: 51_000
			.saturating_add((1_207_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(16 as Weight))
			.saturating_add(RocksDbWeight::get().writes(10 as Weight))
	}
	fn gr_reply_to(r: u32, ) -> Weight {
		(200_380_000 as Weight)
			// Standard Error: 220_000
			.saturating_add((8_369_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_debug(r: u32, ) -> Weight {
		(221_652_000 as Weight)
			// Standard Error: 232_000
			.saturating_add((58_807_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_exit_code(r: u32, ) -> Weight {
		(205_879_000 as Weight)
			// Standard Error: 53_000
			.saturating_add((7_238_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_exit(r: u32, ) -> Weight {
		(229_500_000 as Weight)
			// Standard Error: 2_556_000
			.saturating_add((237_700_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().reads((6 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes((257 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_leave(r: u32, ) -> Weight {
		(211_900_000 as Weight)
			// Standard Error: 1_056_000
			.saturating_add((29_300_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_wait(r: u32, ) -> Weight {
		(224_500_000 as Weight)
			// Standard Error: 343_000
			.saturating_add((7_800_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_wake(r: u32, ) -> Weight {
		(79_242_000 as Weight)
			// Standard Error: 1_261_000
			.saturating_add((1_687_636_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().reads((101 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes((200 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_create_program_wgas(r: u32, ) -> Weight {
		(232_000_000 as Weight)
			// Standard Error: 5_463_000
			.saturating_add((107_900_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().reads((8 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(8_410_000 as Weight)
			// Standard Error: 39_000
			.saturating_add((901_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(76_490_000 as Weight)
			// Standard Error: 57_000
			.saturating_add((2_138_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(63_854_000 as Weight)
			// Standard Error: 61_000
			.saturating_add((1_839_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(21_304_000 as Weight)
			// Standard Error: 51_000
			.saturating_add((1_275_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(15_120_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((1_508_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(12_228_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((664_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(13_758_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((1_072_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(15_371_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((1_317_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(14_449_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((41_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(8_402_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((3_638_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(20_433_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((4_404_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(19_304_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((351_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(9_710_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((435_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(7_680_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((769_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(12_132_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((598_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(14_342_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((549_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(16_575_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((593_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(9_103_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((716_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(9_079_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((861_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(12_768_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((860_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(10_380_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((868_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(12_593_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((833_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(11_177_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((803_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(8_557_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((975_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(8_439_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((977_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(14_227_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((1_066_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(14_735_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((1_115_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(12_200_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((1_167_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(12_975_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((1_212_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(12_888_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((1_273_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(11_816_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((1_119_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(9_795_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((1_170_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(15_321_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((1_082_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(10_251_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((1_219_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(11_695_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((1_193_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(15_500_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((1_138_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(13_636_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((1_194_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(11_444_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((1_211_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(13_650_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((1_096_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(12_370_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((1_106_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(13_300_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((1_121_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(13_729_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((1_122_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(13_058_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((1_151_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(10_718_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((1_153_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(9_813_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((1_229_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(13_607_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((1_148_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(29_687_000 as Weight)
			// Standard Error: 73_000
			.saturating_add((896_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(13_555_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((1_070_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(13_047_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((1_107_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(14_472_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((1_109_000 as Weight).saturating_mul(r as Weight))
	}
}
