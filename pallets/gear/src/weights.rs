// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-07, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=alloc,alloc_in_handle,alloc_per_page,claim_value,create_program,db_read_per_kb,db_write_per_kb,free,free_range,free_range_per_page,gr_block_height,gr_block_timestamp,gr_create_program,gr_create_program_per_kb,gr_create_program_wgas,gr_create_program_wgas_per_kb,gr_debug,gr_debug_per_kb,gr_env_vars,gr_gas_available,gr_message_id,gr_pay_program_rent,gr_program_id,gr_random,gr_read,gr_read_per_kb,gr_reply_code,gr_reply_deposit,gr_reply_per_kb,gr_reply_push,gr_reply_push_input,gr_reply_push_input_per_kb,gr_reply_push_per_kb,gr_reply_to,gr_reply_wgas_per_kb,gr_reservation_reply_commit_per_kb,gr_reservation_reply_per_kb,gr_reservation_send,gr_reservation_send_commit,gr_reservation_send_per_kb,gr_reserve_gas,gr_send,gr_send_commit,gr_send_commit_wgas,gr_send_init,gr_send_input,gr_send_input_wgas,gr_send_per_kb,gr_send_push,gr_send_push_input,gr_send_push_input_per_kb,gr_send_push_per_kb,gr_send_wgas,gr_send_wgas_per_kb,gr_signal_code,gr_signal_from,gr_size,gr_source,gr_system_reserve_gas,gr_unreserve_gas,gr_value,gr_value_available,gr_wake,initial_allocation,instantiate_module_per_kb,instr_br,instr_br_if,instr_br_table,instr_br_table_per_entry,instr_call,instr_call_const,instr_call_indirect,instr_call_indirect_per_param,instr_call_per_local,instr_global_get,instr_global_set,instr_i32add,instr_i32and,instr_i32clz,instr_i32ctz,instr_i32divs,instr_i32divu,instr_i32eq,instr_i32eqz,instr_i32extend16s,instr_i32extend8s,instr_i32ges,instr_i32geu,instr_i32gts,instr_i32gtu,instr_i32les,instr_i32leu,instr_i32load,instr_i32lts,instr_i32ltu,instr_i32mul,instr_i32ne,instr_i32or,instr_i32popcnt,instr_i32rems,instr_i32remu,instr_i32rotl,instr_i32rotr,instr_i32shl,instr_i32shrs,instr_i32shru,instr_i32store,instr_i32sub,instr_i32wrapi64,instr_i32xor,instr_i64add,instr_i64and,instr_i64clz,instr_i64ctz,instr_i64divs,instr_i64divu,instr_i64eq,instr_i64eqz,instr_i64extend16s,instr_i64extend32s,instr_i64extend8s,instr_i64extendsi32,instr_i64extendui32,instr_i64ges,instr_i64geu,instr_i64gts,instr_i64gtu,instr_i64les,instr_i64leu,instr_i64load,instr_i64lts,instr_i64ltu,instr_i64mul,instr_i64ne,instr_i64or,instr_i64popcnt,instr_i64rems,instr_i64remu,instr_i64rotl,instr_i64rotr,instr_i64shl,instr_i64shrs,instr_i64shru,instr_i64store,instr_i64sub,instr_i64xor,instr_if,instr_local_get,instr_local_set,instr_local_tee,instr_memory_current,instr_select,lazy_pages_host_func_read,lazy_pages_host_func_write,lazy_pages_host_func_write_after_read,lazy_pages_load_page_storage_data,lazy_pages_signal_read,lazy_pages_signal_write,lazy_pages_signal_write_after_read,mem_grow,pay_program_rent,reinstrument_per_kb,resume_session_commit,resume_session_init,resume_session_push,send_message,send_reply,tasks_pause_program,tasks_pause_program_uninited,tasks_remove_from_mailbox,tasks_remove_from_waitlist,tasks_remove_gas_reservation,tasks_remove_resume_session,tasks_send_dispatch,tasks_send_user_message,tasks_send_user_message_to_mailbox,tasks_wake_message,tasks_wake_message_no_wake,upload_code,upload_program --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn free_range(p: u32, ) -> Weight;
    fn free_range_per_page(p: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_env_vars(r: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn tasks_remove_resume_session() -> Weight;
    fn tasks_remove_gas_reservation() -> Weight;
    fn tasks_send_user_message_to_mailbox() -> Weight;
    fn tasks_send_user_message() -> Weight;
    fn tasks_send_dispatch() -> Weight;
    fn tasks_wake_message() -> Weight;
    fn tasks_wake_message_no_wake() -> Weight;
    fn tasks_remove_from_waitlist() -> Weight;
    fn tasks_remove_from_mailbox() -> Weight;
    fn tasks_pause_program(c: u32, ) -> Weight;
    fn tasks_pause_program_uninited(c: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_865_000 picoseconds.
        Weight::from_parts(109_771_404, 0)
            // Standard Error: 82_245
            .saturating_add(Weight::from_parts(19_236_882, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_197_000 picoseconds.
        Weight::from_parts(110_777_996, 0)
            // Standard Error: 83_719
            .saturating_add(Weight::from_parts(16_945_004, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_903_000 picoseconds.
        Weight::from_parts(110_678_234, 0)
            // Standard Error: 77_756
            .saturating_add(Weight::from_parts(18_932_690, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_776_000 picoseconds.
        Weight::from_parts(106_833_902, 0)
            // Standard Error: 78_513
            .saturating_add(Weight::from_parts(18_601_652, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 726_327_000 picoseconds.
        Weight::from_parts(740_794_024, 0)
            // Standard Error: 316_107
            .saturating_add(Weight::from_parts(23_126_586, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 721_300_000 picoseconds.
        Weight::from_parts(741_285_952, 0)
            // Standard Error: 482_345
            .saturating_add(Weight::from_parts(34_034_554, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_387_000 picoseconds.
        Weight::from_parts(117_783_724, 0)
            // Standard Error: 80_776
            .saturating_add(Weight::from_parts(8_320_212, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_947_000 picoseconds.
        Weight::from_parts(116_939_094, 0)
            // Standard Error: 74_979
            .saturating_add(Weight::from_parts(11_660_288, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_475_000 picoseconds.
        Weight::from_parts(105_874_912, 0)
            // Standard Error: 2_049_825
            .saturating_add(Weight::from_parts(195_764_852, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_969_000 picoseconds.
        Weight::from_parts(108_652_844, 0)
            // Standard Error: 2_168_194
            .saturating_add(Weight::from_parts(191_774_590, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_694_000 picoseconds.
        Weight::from_parts(107_552_436, 0)
            // Standard Error: 1_523_092
            .saturating_add(Weight::from_parts(129_895_938, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_435_000 picoseconds.
        Weight::from_parts(110_193_834, 0)
            // Standard Error: 2_081_314
            .saturating_add(Weight::from_parts(179_928_926, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_202_000 picoseconds.
        Weight::from_parts(107_113_636, 0)
            // Standard Error: 2_164_180
            .saturating_add(Weight::from_parts(185_712_688, 0).saturating_mul(r.into()))
    }
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_105_000 picoseconds.
        Weight::from_parts(1_130_000, 0)
            // Standard Error: 795
            .saturating_add(Weight::from_parts(246_675, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_176_000 picoseconds.
        Weight::from_parts(3_286_000, 3610)
            // Standard Error: 865
            .saturating_add(Weight::from_parts(738_494, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_018_000 picoseconds.
        Weight::from_parts(104_020_925, 0)
            // Standard Error: 7_867
            .saturating_add(Weight::from_parts(2_339_929, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1354`
        //  Estimated: `51743`
        // Minimum execution time: 104_773_000 picoseconds.
        Weight::from_parts(108_297_000, 51743)
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `996`
        //  Estimated: `21591`
        // Minimum execution time: 54_965_000 picoseconds.
        Weight::from_parts(56_681_000, 21591)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `638`
        //  Estimated: `17474`
        // Minimum execution time: 29_227_000 picoseconds.
        Weight::from_parts(30_391_000, 17474)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `330`
        //  Estimated: `4125`
        // Minimum execution time: 8_360_000 picoseconds.
        Weight::from_parts(8_257_109, 4125)
            // Standard Error: 11_293
            .saturating_add(Weight::from_parts(14_478_797, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3179 + c * (16400 ±0)`
        //  Estimated: `43994 + c * (117282 ±0)`
        // Minimum execution time: 67_668_000 picoseconds.
        Weight::from_parts(69_467_000, 43994)
            // Standard Error: 51_128
            .saturating_add(Weight::from_parts(39_203_517, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(8_u64))
            .saturating_add(Weight::from_parts(0, 117282).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `5402`
        // Minimum execution time: 88_376_000 picoseconds.
        Weight::from_parts(61_853_653, 5402)
            // Standard Error: 61_098
            .saturating_add(Weight::from_parts(63_594_045, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1111`
        //  Estimated: `50600`
        // Minimum execution time: 92_991_000 picoseconds.
        Weight::from_parts(103_706_885, 50600)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_581, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `521`
        //  Estimated: `45152`
        // Minimum execution time: 10_944_766_000 picoseconds.
        Weight::from_parts(262_926_803, 45152)
            // Standard Error: 177_288
            .saturating_add(Weight::from_parts(63_601_083, 0).saturating_mul(c.into()))
            // Standard Error: 10
            .saturating_add(Weight::from_parts(2_520, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `513`
        //  Estimated: `31140`
        // Minimum execution time: 73_364_000 picoseconds.
        Weight::from_parts(51_421_512, 31140)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_095, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1353`
        //  Estimated: `54273`
        // Minimum execution time: 122_939_000 picoseconds.
        Weight::from_parts(106_256_736, 54273)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_116, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `121468`
        // Minimum execution time: 384_026_000 picoseconds.
        Weight::from_parts(404_009_113, 121468)
            .saturating_add(T::DbWeight::get().reads(35_u64))
            .saturating_add(T::DbWeight::get().writes(26_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `121468`
        // Minimum execution time: 400_407_000 picoseconds.
        Weight::from_parts(416_014_436, 121468)
            // Standard Error: 1_665
            .saturating_add(Weight::from_parts(7_879, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(35_u64))
            .saturating_add(T::DbWeight::get().writes(26_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 67_919_000 picoseconds.
        Weight::from_parts(68_182_000, 3899)
            // Standard Error: 34_648
            .saturating_add(Weight::from_parts(61_624_059, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_513_000 picoseconds.
        Weight::from_parts(104_496_000, 0)
            // Standard Error: 3_954_024
            .saturating_add(Weight::from_parts(745_428_834, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 510_856_000 picoseconds.
        Weight::from_parts(451_099_638, 0)
            // Standard Error: 26_000
            .saturating_add(Weight::from_parts(30_990_195, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 226_582_000 picoseconds.
        Weight::from_parts(229_526_455, 0)
            // Standard Error: 252_734
            .saturating_add(Weight::from_parts(64_765_304, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 511]`.
    fn free_range(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 16_302_369_000 picoseconds.
        Weight::from_parts(88_083_738_462, 0)
            // Standard Error: 69_272_857
            .saturating_add(Weight::from_parts(3_036_876_576, 0).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 511]`.
    fn free_range_per_page(_p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_273_671_000 picoseconds.
        Weight::from_parts(20_691_961_939, 0)
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_901_000 picoseconds.
        Weight::from_parts(110_941_398, 0)
            // Standard Error: 4_052
            .saturating_add(Weight::from_parts(2_523_538, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 184_372_000 picoseconds.
        Weight::from_parts(232_895_684, 0)
            // Standard Error: 14_748
            .saturating_add(Weight::from_parts(2_107_210, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_012_000 picoseconds.
        Weight::from_parts(121_726_247, 0)
            // Standard Error: 315_535
            .saturating_add(Weight::from_parts(100_621_523, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_294_000 picoseconds.
        Weight::from_parts(91_319_683, 0)
            // Standard Error: 321_408
            .saturating_add(Weight::from_parts(94_882_801, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_702_000 picoseconds.
        Weight::from_parts(101_871_584, 0)
            // Standard Error: 263_780
            .saturating_add(Weight::from_parts(91_969_359, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_639_000 picoseconds.
        Weight::from_parts(97_773_395, 0)
            // Standard Error: 254_621
            .saturating_add(Weight::from_parts(91_563_395, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_010_000 picoseconds.
        Weight::from_parts(94_414_789, 0)
            // Standard Error: 333_136
            .saturating_add(Weight::from_parts(89_153_702, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_632_000 picoseconds.
        Weight::from_parts(97_923_212, 0)
            // Standard Error: 365_889
            .saturating_add(Weight::from_parts(87_578_309, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_531_000 picoseconds.
        Weight::from_parts(93_831_183, 0)
            // Standard Error: 337_632
            .saturating_add(Weight::from_parts(95_232_966, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_120_000 picoseconds.
        Weight::from_parts(92_550_240, 0)
            // Standard Error: 300_496
            .saturating_add(Weight::from_parts(93_845_174, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 718_995_000 picoseconds.
        Weight::from_parts(766_547_439, 0)
            // Standard Error: 371_222
            .saturating_add(Weight::from_parts(149_776_575, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 858_499_000 picoseconds.
        Weight::from_parts(869_573_000, 0)
            // Standard Error: 54_171
            .saturating_add(Weight::from_parts(13_298_251, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_159_000 picoseconds.
        Weight::from_parts(109_081_294, 0)
            // Standard Error: 309_230
            .saturating_add(Weight::from_parts(100_667_527, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_619_000 picoseconds.
        Weight::from_parts(97_145_147, 0)
            // Standard Error: 310_475
            .saturating_add(Weight::from_parts(91_930_418, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_829_000 picoseconds.
        Weight::from_parts(97_680_457, 0)
            // Standard Error: 335_315
            .saturating_add(Weight::from_parts(87_433_494, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_160_000 picoseconds.
        Weight::from_parts(116_327_643, 0)
            // Standard Error: 337_988
            .saturating_add(Weight::from_parts(170_461_030, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_013_000 picoseconds.
        Weight::from_parts(109_250_000, 0)
            // Standard Error: 4_842_762
            .saturating_add(Weight::from_parts(887_252_577, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_760_000 picoseconds.
        Weight::from_parts(164_470_008, 0)
            // Standard Error: 395_347
            .saturating_add(Weight::from_parts(265_345_370, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 360_478_000 picoseconds.
        Weight::from_parts(364_480_000, 0)
            // Standard Error: 61_776
            .saturating_add(Weight::from_parts(24_750_923, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_476_000 picoseconds.
        Weight::from_parts(178_592_811, 0)
            // Standard Error: 365_169
            .saturating_add(Weight::from_parts(270_336_977, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 378_590_000 picoseconds.
        Weight::from_parts(380_091_000, 0)
            // Standard Error: 60_591
            .saturating_add(Weight::from_parts(25_085_149, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 734_263_000 picoseconds.
        Weight::from_parts(810_053_228, 0)
            // Standard Error: 388_097
            .saturating_add(Weight::from_parts(277_554_149, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 727_039_000 picoseconds.
        Weight::from_parts(810_853_909, 0)
            // Standard Error: 367_829
            .saturating_add(Weight::from_parts(281_684_578, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_780_000 picoseconds.
        Weight::from_parts(88_125_100, 0)
            // Standard Error: 300_639
            .saturating_add(Weight::from_parts(100_970_715, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_010_635_000 picoseconds.
        Weight::from_parts(2_135_241_691, 0)
            // Standard Error: 258_327
            .saturating_add(Weight::from_parts(170_470_444, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 342_602_000 picoseconds.
        Weight::from_parts(344_781_000, 0)
            // Standard Error: 52_139
            .saturating_add(Weight::from_parts(35_826_152, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_000_872_000 picoseconds.
        Weight::from_parts(2_127_161_534, 0)
            // Standard Error: 277_013
            .saturating_add(Weight::from_parts(224_794_674, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_019_258_000 picoseconds.
        Weight::from_parts(2_119_010_208, 0)
            // Standard Error: 273_780
            .saturating_add(Weight::from_parts(232_361_958, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 261_960_000 picoseconds.
        Weight::from_parts(324_775_557, 0)
            // Standard Error: 312_686
            .saturating_add(Weight::from_parts(282_626_983, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 525_109_000 picoseconds.
        Weight::from_parts(539_743_000, 0)
            // Standard Error: 58_541
            .saturating_add(Weight::from_parts(24_594_342, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_158_068_000 picoseconds.
        Weight::from_parts(2_268_740_022, 0)
            // Standard Error: 371_818
            .saturating_add(Weight::from_parts(245_531_254, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 122_728_000 picoseconds.
        Weight::from_parts(114_424_580, 0)
            // Standard Error: 1_014
            .saturating_add(Weight::from_parts(484_978, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 121_109_000 picoseconds.
        Weight::from_parts(114_417_846, 0)
            // Standard Error: 1_171
            .saturating_add(Weight::from_parts(489_644, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_956_000 picoseconds.
        Weight::from_parts(149_254_730, 0)
            // Standard Error: 375_681
            .saturating_add(Weight::from_parts(151_501_798, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 116_431_000 picoseconds.
        Weight::from_parts(119_851_000, 0)
            // Standard Error: 2_238
            .saturating_add(Weight::from_parts(704_184, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 124_507_000 picoseconds.
        Weight::from_parts(114_576_586, 0)
            // Standard Error: 964
            .saturating_add(Weight::from_parts(493_253, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 123_708_000 picoseconds.
        Weight::from_parts(110_064_331, 0)
            // Standard Error: 913
            .saturating_add(Weight::from_parts(489_952, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_285_000 picoseconds.
        Weight::from_parts(98_572_437, 0)
            // Standard Error: 357_080
            .saturating_add(Weight::from_parts(88_782_801, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_294_000 picoseconds.
        Weight::from_parts(105_846_193, 0)
            // Standard Error: 331_065
            .saturating_add(Weight::from_parts(86_315_400, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_348_000 picoseconds.
        Weight::from_parts(100_208_403, 0)
            // Standard Error: 310_672
            .saturating_add(Weight::from_parts(90_634_716, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 716_618_000 picoseconds.
        Weight::from_parts(754_792_933, 0)
            // Standard Error: 348_876
            .saturating_add(Weight::from_parts(111_205_849, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 750_093_000 picoseconds.
        Weight::from_parts(760_737_775, 0)
            // Standard Error: 1_604
            .saturating_add(Weight::from_parts(163_107, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_642_035_000 picoseconds.
        Weight::from_parts(2_763_204_742, 0)
            // Standard Error: 397_505
            .saturating_add(Weight::from_parts(133_123_288, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_783_432_000 picoseconds.
        Weight::from_parts(2_776_693_344, 0)
            // Standard Error: 9_352
            .saturating_add(Weight::from_parts(13_618_857, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_009_000 picoseconds.
        Weight::from_parts(120_924_010, 0)
            // Standard Error: 376_173
            .saturating_add(Weight::from_parts(117_220_506, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 161_710_000 picoseconds.
        Weight::from_parts(164_929_000, 0)
            // Standard Error: 60_904
            .saturating_add(Weight::from_parts(29_806_707, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_676_000 picoseconds.
        Weight::from_parts(105_781_901, 0)
            // Standard Error: 322_998
            .saturating_add(Weight::from_parts(87_606_160, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 178_654_000 picoseconds.
        Weight::from_parts(227_816_289, 0)
            // Standard Error: 233_445
            .saturating_add(Weight::from_parts(164_138_735, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 114_852_000 picoseconds.
        Weight::from_parts(176_064_112, 0)
            // Standard Error: 358_040
            .saturating_add(Weight::from_parts(347_761_404, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_719_763_000 picoseconds.
        Weight::from_parts(50_818_538_000, 0)
            // Standard Error: 310_729
            .saturating_add(Weight::from_parts(9_196_516, 0).saturating_mul(p.into()))
            // Standard Error: 310_713
            .saturating_add(Weight::from_parts(175_736_777, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 113_794_000 picoseconds.
        Weight::from_parts(183_182_428, 0)
            // Standard Error: 356_775
            .saturating_add(Weight::from_parts(352_090_613, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 53_072_375_000 picoseconds.
        Weight::from_parts(53_165_127_000, 0)
            // Standard Error: 314_086
            .saturating_add(Weight::from_parts(8_327_398, 0).saturating_mul(p.into()))
            // Standard Error: 314_070
            .saturating_add(Weight::from_parts(175_447_310, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_468_000 picoseconds.
        Weight::from_parts(122_478_730, 0)
            // Standard Error: 31_836
            .saturating_add(Weight::from_parts(2_020_568, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 105_386_000 picoseconds.
        Weight::from_parts(156_077_364, 1131)
            // Standard Error: 16_649
            .saturating_add(Weight::from_parts(14_738_024, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 100_798_000 picoseconds.
        Weight::from_parts(103_370_000, 1131)
            // Standard Error: 38_100
            .saturating_add(Weight::from_parts(42_255_262, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 7_592_379_000 picoseconds.
        Weight::from_parts(7_258_988_254, 5069931)
            // Standard Error: 102_796
            .saturating_add(Weight::from_parts(45_487_357, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1820 + p * (65580 ±0)`
        //  Estimated: `1946 + p * (75482 ±0)`
        // Minimum execution time: 101_639_000 picoseconds.
        Weight::from_parts(103_533_000, 1946)
            // Standard Error: 58_631
            .saturating_add(Weight::from_parts(54_436_986, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 109_272_000 picoseconds.
        Weight::from_parts(111_708_979, 1131)
            // Standard Error: 83_618
            .saturating_add(Weight::from_parts(42_481_390, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 754_700_000 picoseconds.
        Weight::from_parts(774_570_622, 1496)
            // Standard Error: 166_374
            .saturating_add(Weight::from_parts(47_538_035, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_228_837_000 picoseconds.
        Weight::from_parts(1_243_841_190, 317931)
            // Standard Error: 162_398
            .saturating_add(Weight::from_parts(47_798_312, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_822_000 picoseconds.
        Weight::from_parts(15_074_905, 0)
            // Standard Error: 282_957
            .saturating_add(Weight::from_parts(73_169_564, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_411_030_000 picoseconds.
        Weight::from_parts(4_159_848_567, 0)
            // Standard Error: 99_492
            .saturating_add(Weight::from_parts(5_795_035, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_436_068_000 picoseconds.
        Weight::from_parts(4_271_143_473, 0)
            // Standard Error: 78_237
            .saturating_add(Weight::from_parts(5_023_443, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_057_608_000 picoseconds.
        Weight::from_parts(10_676_499_906, 0)
            // Standard Error: 166_709
            .saturating_add(Weight::from_parts(11_273_130, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_999_944_000 picoseconds.
        Weight::from_parts(11_314_485_002, 0)
            // Standard Error: 162_249
            .saturating_add(Weight::from_parts(8_049_350, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_411_000 picoseconds.
        Weight::from_parts(2_476_000, 0)
            // Standard Error: 9_024
            .saturating_add(Weight::from_parts(3_808_795, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_368_000 picoseconds.
        Weight::from_parts(2_414_000, 0)
            // Standard Error: 4_993
            .saturating_add(Weight::from_parts(3_060_189, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_317_000 picoseconds.
        Weight::from_parts(3_631_786, 0)
            // Standard Error: 1_110
            .saturating_add(Weight::from_parts(1_558_462, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_428_000 picoseconds.
        Weight::from_parts(2_483_000, 0)
            // Standard Error: 8_115
            .saturating_add(Weight::from_parts(2_931_952, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_381_000 picoseconds.
        Weight::from_parts(2_276_315, 0)
            // Standard Error: 13_381
            .saturating_add(Weight::from_parts(5_148_399, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_988_000 picoseconds.
        Weight::from_parts(7_510_183, 0)
            // Standard Error: 2_861
            .saturating_add(Weight::from_parts(118_328, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_465_000 picoseconds.
        Weight::from_parts(4_395_417, 0)
            // Standard Error: 5_762
            .saturating_add(Weight::from_parts(2_554_063, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_554_063 -
            2_424_213, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_424_000 picoseconds.
        Weight::from_parts(3_985_557, 0)
            // Standard Error: 12_718
            .saturating_add(Weight::from_parts(2_424_213, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_820_000 picoseconds.
        Weight::from_parts(3_065_331, 0)
            // Standard Error: 29_235
            .saturating_add(Weight::from_parts(10_445_396, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_396_000 picoseconds.
        Weight::from_parts(540_751, 0)
            // Standard Error: 8_295
            .saturating_add(Weight::from_parts(1_212_829, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_393_000 picoseconds.
        Weight::from_parts(5_728_887, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_828_000 picoseconds.
        Weight::from_parts(5_617_022, 0)
            // Standard Error: 3_274
            .saturating_add(Weight::from_parts(369_438, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_841_000 picoseconds.
        Weight::from_parts(3_972_496, 0)
            // Standard Error: 6_559
            .saturating_add(Weight::from_parts(976_387, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_874_000 picoseconds.
        Weight::from_parts(4_801_026, 0)
            // Standard Error: 5_574
            .saturating_add(Weight::from_parts(959_555, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_418_000 picoseconds.
        Weight::from_parts(2_108_892, 0)
            // Standard Error: 9_092
            .saturating_add(Weight::from_parts(803_327, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_501_000 picoseconds.
        Weight::from_parts(6_582_000, 0)
            // Standard Error: 8_360
            .saturating_add(Weight::from_parts(1_296_270, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_859_000 picoseconds.
        Weight::from_parts(2_983_624, 0)
            // Standard Error: 17_060
            .saturating_add(Weight::from_parts(7_110_181, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_315_000 picoseconds.
        Weight::from_parts(2_458_000, 0)
            // Standard Error: 8_069
            .saturating_add(Weight::from_parts(3_339_703, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_380_000 picoseconds.
        Weight::from_parts(2_452_000, 0)
            // Standard Error: 7_358
            .saturating_add(Weight::from_parts(3_057_976, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_412_000 picoseconds.
        Weight::from_parts(2_598_000, 0)
            // Standard Error: 8_183
            .saturating_add(Weight::from_parts(3_078_945, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_371_000 picoseconds.
        Weight::from_parts(2_414_000, 0)
            // Standard Error: 4_984
            .saturating_add(Weight::from_parts(2_609_742, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_394_000 picoseconds.
        Weight::from_parts(2_498_000, 0)
            // Standard Error: 3_617
            .saturating_add(Weight::from_parts(571_910, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_378_000 picoseconds.
        Weight::from_parts(1_583_743, 0)
            // Standard Error: 3_521
            .saturating_add(Weight::from_parts(394_549, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_421_000 picoseconds.
        Weight::from_parts(2_512_000, 0)
            // Standard Error: 13_249
            .saturating_add(Weight::from_parts(1_754_334, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_340_000 picoseconds.
        Weight::from_parts(2_432_000, 0)
            // Standard Error: 7_472
            .saturating_add(Weight::from_parts(1_130_753, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_425_000 picoseconds.
        Weight::from_parts(1_466_497, 0)
            // Standard Error: 3_594
            .saturating_add(Weight::from_parts(375_667, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_525_000 picoseconds.
        Weight::from_parts(1_324_525, 0)
            // Standard Error: 4_276
            .saturating_add(Weight::from_parts(397_059, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(338_282, 0)
            // Standard Error: 6_618
            .saturating_add(Weight::from_parts(566_892, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_369_000 picoseconds.
        Weight::from_parts(660_268, 0)
            // Standard Error: 5_080
            .saturating_add(Weight::from_parts(545_097, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_439_000 picoseconds.
        Weight::from_parts(604_740, 0)
            // Standard Error: 5_533
            .saturating_add(Weight::from_parts(490_525, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_461_000 picoseconds.
        Weight::from_parts(1_666_574, 0)
            // Standard Error: 3_802
            .saturating_add(Weight::from_parts(330_900, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_483_000 picoseconds.
        Weight::from_parts(2_846_620, 0)
            // Standard Error: 1_636
            .saturating_add(Weight::from_parts(154_440, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_384_000 picoseconds.
        Weight::from_parts(2_896_480, 0)
            // Standard Error: 1_898
            .saturating_add(Weight::from_parts(161_252, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_446_000 picoseconds.
        Weight::from_parts(2_499_000, 0)
            // Standard Error: 11_628
            .saturating_add(Weight::from_parts(1_851_031, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_363_000 picoseconds.
        Weight::from_parts(2_451_000, 0)
            // Standard Error: 5_538
            .saturating_add(Weight::from_parts(1_105_463, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_449_000 picoseconds.
        Weight::from_parts(2_474_000, 0)
            // Standard Error: 11_258
            .saturating_add(Weight::from_parts(1_824_629, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_458_000 picoseconds.
        Weight::from_parts(2_531_000, 0)
            // Standard Error: 7_470
            .saturating_add(Weight::from_parts(1_114_120, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_503_000 picoseconds.
        Weight::from_parts(2_558_000, 0)
            // Standard Error: 11_670
            .saturating_add(Weight::from_parts(1_864_081, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_445_000 picoseconds.
        Weight::from_parts(2_520_000, 0)
            // Standard Error: 7_171
            .saturating_add(Weight::from_parts(1_162_286, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_591_000 picoseconds.
        Weight::from_parts(2_630_000, 0)
            // Standard Error: 11_613
            .saturating_add(Weight::from_parts(1_833_725, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_424_000 picoseconds.
        Weight::from_parts(2_488_000, 0)
            // Standard Error: 8_207
            .saturating_add(Weight::from_parts(1_105_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_445_000 picoseconds.
        Weight::from_parts(2_542_000, 0)
            // Standard Error: 12_900
            .saturating_add(Weight::from_parts(1_848_683, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_428_000 picoseconds.
        Weight::from_parts(2_532_000, 0)
            // Standard Error: 6_369
            .saturating_add(Weight::from_parts(1_127_621, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_482_000 picoseconds.
        Weight::from_parts(2_533_000, 0)
            // Standard Error: 9_935
            .saturating_add(Weight::from_parts(1_845_253, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_484_000 picoseconds.
        Weight::from_parts(2_561_000, 0)
            // Standard Error: 7_250
            .saturating_add(Weight::from_parts(1_122_264, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_416_000 picoseconds.
        Weight::from_parts(2_493_000, 0)
            // Standard Error: 14_741
            .saturating_add(Weight::from_parts(1_857_125, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_441_000 picoseconds.
        Weight::from_parts(2_504_000, 0)
            // Standard Error: 8_754
            .saturating_add(Weight::from_parts(1_100_513, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_438_000 picoseconds.
        Weight::from_parts(2_540_000, 0)
            // Standard Error: 11_975
            .saturating_add(Weight::from_parts(1_916_897, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_471_000 picoseconds.
        Weight::from_parts(2_558_000, 0)
            // Standard Error: 8_833
            .saturating_add(Weight::from_parts(1_166_103, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_499_000 picoseconds.
        Weight::from_parts(2_536_000, 0)
            // Standard Error: 12_098
            .saturating_add(Weight::from_parts(1_935_267, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_403_000 picoseconds.
        Weight::from_parts(2_453_000, 0)
            // Standard Error: 9_537
            .saturating_add(Weight::from_parts(1_191_277, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_479_000 picoseconds.
        Weight::from_parts(2_532_000, 0)
            // Standard Error: 14_965
            .saturating_add(Weight::from_parts(1_913_211, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_504_000 picoseconds.
        Weight::from_parts(2_571_000, 0)
            // Standard Error: 8_924
            .saturating_add(Weight::from_parts(1_239_842, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_397_000 picoseconds.
        Weight::from_parts(2_526_000, 0)
            // Standard Error: 7_835
            .saturating_add(Weight::from_parts(1_313_282, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_466_000 picoseconds.
        Weight::from_parts(2_564_000, 0)
            // Standard Error: 4_357
            .saturating_add(Weight::from_parts(645_923, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_402_000 picoseconds.
        Weight::from_parts(2_453_000, 0)
            // Standard Error: 8_626
            .saturating_add(Weight::from_parts(1_276_437, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_422_000 picoseconds.
        Weight::from_parts(2_528_000, 0)
            // Standard Error: 4_696
            .saturating_add(Weight::from_parts(652_026, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_385_000 picoseconds.
        Weight::from_parts(2_482_000, 0)
            // Standard Error: 12_218
            .saturating_add(Weight::from_parts(1_826_460, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_413_000 picoseconds.
        Weight::from_parts(2_539_000, 0)
            // Standard Error: 9_366
            .saturating_add(Weight::from_parts(1_248_918, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_429_000 picoseconds.
        Weight::from_parts(1_297_982, 0)
            // Standard Error: 13_601
            .saturating_add(Weight::from_parts(2_863_731, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_393_000 picoseconds.
        Weight::from_parts(1_099_971, 0)
            // Standard Error: 10_339
            .saturating_add(Weight::from_parts(2_530_463, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_458_000 picoseconds.
        Weight::from_parts(1_084_265, 0)
            // Standard Error: 23_256
            .saturating_add(Weight::from_parts(2_978_416, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_373_000 picoseconds.
        Weight::from_parts(2_411_000, 0)
            // Standard Error: 6_453
            .saturating_add(Weight::from_parts(2_544_896, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_360_000 picoseconds.
        Weight::from_parts(2_474_000, 0)
            // Standard Error: 17_225
            .saturating_add(Weight::from_parts(9_301_390, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_433_000 picoseconds.
        Weight::from_parts(2_084_998, 0)
            // Standard Error: 45_687
            .saturating_add(Weight::from_parts(7_475_464, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_436_000 picoseconds.
        Weight::from_parts(2_226_818, 0)
            // Standard Error: 13_746
            .saturating_add(Weight::from_parts(2_991_062, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_486_000 picoseconds.
        Weight::from_parts(2_554_000, 0)
            // Standard Error: 8_082
            .saturating_add(Weight::from_parts(2_532_424, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_495_000 picoseconds.
        Weight::from_parts(2_551_000, 0)
            // Standard Error: 8_040
            .saturating_add(Weight::from_parts(1_288_528, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_336_000 picoseconds.
        Weight::from_parts(2_477_000, 0)
            // Standard Error: 5_119
            .saturating_add(Weight::from_parts(680_557, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_400_000 picoseconds.
        Weight::from_parts(2_496_000, 0)
            // Standard Error: 8_363
            .saturating_add(Weight::from_parts(1_296_231, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_478_000 picoseconds.
        Weight::from_parts(2_587_000, 0)
            // Standard Error: 4_774
            .saturating_add(Weight::from_parts(652_226, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_416_000 picoseconds.
        Weight::from_parts(2_517_000, 0)
            // Standard Error: 8_648
            .saturating_add(Weight::from_parts(1_337_138, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_489_000 picoseconds.
        Weight::from_parts(2_596_000, 0)
            // Standard Error: 4_613
            .saturating_add(Weight::from_parts(648_763, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_352_000 picoseconds.
        Weight::from_parts(2_440_000, 0)
            // Standard Error: 7_616
            .saturating_add(Weight::from_parts(1_144_797, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_462_000 picoseconds.
        Weight::from_parts(2_566_000, 0)
            // Standard Error: 4_082
            .saturating_add(Weight::from_parts(590_599, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_507_000 picoseconds.
        Weight::from_parts(2_581_000, 0)
            // Standard Error: 7_204
            .saturating_add(Weight::from_parts(1_078_475, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_404_000 picoseconds.
        Weight::from_parts(2_512_000, 0)
            // Standard Error: 4_298
            .saturating_add(Weight::from_parts(569_480, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_420_000 picoseconds.
        Weight::from_parts(2_563_000, 0)
            // Standard Error: 7_196
            .saturating_add(Weight::from_parts(1_071_331, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_450_000 picoseconds.
        Weight::from_parts(2_581_000, 0)
            // Standard Error: 4_067
            .saturating_add(Weight::from_parts(592_513, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_366_000 picoseconds.
        Weight::from_parts(2_559_000, 0)
            // Standard Error: 9_321
            .saturating_add(Weight::from_parts(1_130_270, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_427_000 picoseconds.
        Weight::from_parts(2_515_000, 0)
            // Standard Error: 5_776
            .saturating_add(Weight::from_parts(616_542, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_327_000 picoseconds.
        Weight::from_parts(2_432_000, 0)
            // Standard Error: 7_420
            .saturating_add(Weight::from_parts(1_112_890, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_398_000 picoseconds.
        Weight::from_parts(2_507_000, 0)
            // Standard Error: 4_257
            .saturating_add(Weight::from_parts(586_886, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_resume_session() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `330`
        //  Estimated: `3795`
        // Minimum execution time: 9_820_000 picoseconds.
        Weight::from_parts(10_472_000, 3795)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1090`
        //  Estimated: `23985`
        // Minimum execution time: 59_897_000 picoseconds.
        Weight::from_parts(62_010_000, 23985)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `888`
        //  Estimated: `22158`
        // Minimum execution time: 46_288_000 picoseconds.
        Weight::from_parts(47_406_000, 22158)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1010`
        //  Estimated: `34619`
        // Minimum execution time: 74_565_000 picoseconds.
        Weight::from_parts(76_575_000, 34619)
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `695`
        //  Estimated: `20509`
        // Minimum execution time: 31_805_000 picoseconds.
        Weight::from_parts(32_822_000, 20509)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `976`
        //  Estimated: `26636`
        // Minimum execution time: 45_902_000 picoseconds.
        Weight::from_parts(47_104_000, 26636)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_420_000 picoseconds.
        Weight::from_parts(3_627_000, 3545)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1605`
        //  Estimated: `58022`
        // Minimum execution time: 108_740_000 picoseconds.
        Weight::from_parts(110_375_000, 58022)
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1332`
        //  Estimated: `46962`
        // Minimum execution time: 88_926_000 picoseconds.
        Weight::from_parts(93_769_000, 46962)
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2314 + c * (16400 ±0)`
        //  Estimated: `19933 + c * (84480 ±0)`
        // Minimum execution time: 31_114_000 picoseconds.
        Weight::from_parts(31_852_000, 19933)
            // Standard Error: 67_045
            .saturating_add(Weight::from_parts(40_497_188, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 84480).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program_uninited(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3140 + c * (42 ±0)`
        //  Estimated: `60717 + c * (2947 ±0)`
        // Minimum execution time: 90_347_000 picoseconds.
        Weight::from_parts(79_061_157, 60717)
            // Standard Error: 2_131
            .saturating_add(Weight::from_parts(1_041_219, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2947).saturating_mul(c.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_865_000 picoseconds.
        Weight::from_parts(109_771_404, 0)
            // Standard Error: 82_245
            .saturating_add(Weight::from_parts(19_236_882, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_197_000 picoseconds.
        Weight::from_parts(110_777_996, 0)
            // Standard Error: 83_719
            .saturating_add(Weight::from_parts(16_945_004, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_903_000 picoseconds.
        Weight::from_parts(110_678_234, 0)
            // Standard Error: 77_756
            .saturating_add(Weight::from_parts(18_932_690, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_776_000 picoseconds.
        Weight::from_parts(106_833_902, 0)
            // Standard Error: 78_513
            .saturating_add(Weight::from_parts(18_601_652, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 726_327_000 picoseconds.
        Weight::from_parts(740_794_024, 0)
            // Standard Error: 316_107
            .saturating_add(Weight::from_parts(23_126_586, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 721_300_000 picoseconds.
        Weight::from_parts(741_285_952, 0)
            // Standard Error: 482_345
            .saturating_add(Weight::from_parts(34_034_554, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_387_000 picoseconds.
        Weight::from_parts(117_783_724, 0)
            // Standard Error: 80_776
            .saturating_add(Weight::from_parts(8_320_212, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_947_000 picoseconds.
        Weight::from_parts(116_939_094, 0)
            // Standard Error: 74_979
            .saturating_add(Weight::from_parts(11_660_288, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_475_000 picoseconds.
        Weight::from_parts(105_874_912, 0)
            // Standard Error: 2_049_825
            .saturating_add(Weight::from_parts(195_764_852, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_969_000 picoseconds.
        Weight::from_parts(108_652_844, 0)
            // Standard Error: 2_168_194
            .saturating_add(Weight::from_parts(191_774_590, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_694_000 picoseconds.
        Weight::from_parts(107_552_436, 0)
            // Standard Error: 1_523_092
            .saturating_add(Weight::from_parts(129_895_938, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_435_000 picoseconds.
        Weight::from_parts(110_193_834, 0)
            // Standard Error: 2_081_314
            .saturating_add(Weight::from_parts(179_928_926, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_202_000 picoseconds.
        Weight::from_parts(107_113_636, 0)
            // Standard Error: 2_164_180
            .saturating_add(Weight::from_parts(185_712_688, 0).saturating_mul(r.into()))
    }
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_105_000 picoseconds.
        Weight::from_parts(1_130_000, 0)
            // Standard Error: 795
            .saturating_add(Weight::from_parts(246_675, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_176_000 picoseconds.
        Weight::from_parts(3_286_000, 3610)
            // Standard Error: 865
            .saturating_add(Weight::from_parts(738_494, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_018_000 picoseconds.
        Weight::from_parts(104_020_925, 0)
            // Standard Error: 7_867
            .saturating_add(Weight::from_parts(2_339_929, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1354`
        //  Estimated: `51743`
        // Minimum execution time: 104_773_000 picoseconds.
        Weight::from_parts(108_297_000, 51743)
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `996`
        //  Estimated: `21591`
        // Minimum execution time: 54_965_000 picoseconds.
        Weight::from_parts(56_681_000, 21591)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `638`
        //  Estimated: `17474`
        // Minimum execution time: 29_227_000 picoseconds.
        Weight::from_parts(30_391_000, 17474)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `330`
        //  Estimated: `4125`
        // Minimum execution time: 8_360_000 picoseconds.
        Weight::from_parts(8_257_109, 4125)
            // Standard Error: 11_293
            .saturating_add(Weight::from_parts(14_478_797, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3179 + c * (16400 ±0)`
        //  Estimated: `43994 + c * (117282 ±0)`
        // Minimum execution time: 67_668_000 picoseconds.
        Weight::from_parts(69_467_000, 43994)
            // Standard Error: 51_128
            .saturating_add(Weight::from_parts(39_203_517, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
            .saturating_add(Weight::from_parts(0, 117282).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `5402`
        // Minimum execution time: 88_376_000 picoseconds.
        Weight::from_parts(61_853_653, 5402)
            // Standard Error: 61_098
            .saturating_add(Weight::from_parts(63_594_045, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1111`
        //  Estimated: `50600`
        // Minimum execution time: 92_991_000 picoseconds.
        Weight::from_parts(103_706_885, 50600)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_581, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `521`
        //  Estimated: `45152`
        // Minimum execution time: 10_944_766_000 picoseconds.
        Weight::from_parts(262_926_803, 45152)
            // Standard Error: 177_288
            .saturating_add(Weight::from_parts(63_601_083, 0).saturating_mul(c.into()))
            // Standard Error: 10
            .saturating_add(Weight::from_parts(2_520, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `513`
        //  Estimated: `31140`
        // Minimum execution time: 73_364_000 picoseconds.
        Weight::from_parts(51_421_512, 31140)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_095, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1353`
        //  Estimated: `54273`
        // Minimum execution time: 122_939_000 picoseconds.
        Weight::from_parts(106_256_736, 54273)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_116, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `121468`
        // Minimum execution time: 384_026_000 picoseconds.
        Weight::from_parts(404_009_113, 121468)
            .saturating_add(RocksDbWeight::get().reads(35_u64))
            .saturating_add(RocksDbWeight::get().writes(26_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `121468`
        // Minimum execution time: 400_407_000 picoseconds.
        Weight::from_parts(416_014_436, 121468)
            // Standard Error: 1_665
            .saturating_add(Weight::from_parts(7_879, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(35_u64))
            .saturating_add(RocksDbWeight::get().writes(26_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 67_919_000 picoseconds.
        Weight::from_parts(68_182_000, 3899)
            // Standard Error: 34_648
            .saturating_add(Weight::from_parts(61_624_059, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_513_000 picoseconds.
        Weight::from_parts(104_496_000, 0)
            // Standard Error: 3_954_024
            .saturating_add(Weight::from_parts(745_428_834, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 510_856_000 picoseconds.
        Weight::from_parts(451_099_638, 0)
            // Standard Error: 26_000
            .saturating_add(Weight::from_parts(30_990_195, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 226_582_000 picoseconds.
        Weight::from_parts(229_526_455, 0)
            // Standard Error: 252_734
            .saturating_add(Weight::from_parts(64_765_304, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 511]`.
    fn free_range(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 16_302_369_000 picoseconds.
        Weight::from_parts(88_083_738_462, 0)
            // Standard Error: 69_272_857
            .saturating_add(Weight::from_parts(3_036_876_576, 0).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 511]`.
    fn free_range_per_page(_p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_273_671_000 picoseconds.
        Weight::from_parts(20_691_961_939, 0)
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_901_000 picoseconds.
        Weight::from_parts(110_941_398, 0)
            // Standard Error: 4_052
            .saturating_add(Weight::from_parts(2_523_538, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 184_372_000 picoseconds.
        Weight::from_parts(232_895_684, 0)
            // Standard Error: 14_748
            .saturating_add(Weight::from_parts(2_107_210, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_012_000 picoseconds.
        Weight::from_parts(121_726_247, 0)
            // Standard Error: 315_535
            .saturating_add(Weight::from_parts(100_621_523, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_294_000 picoseconds.
        Weight::from_parts(91_319_683, 0)
            // Standard Error: 321_408
            .saturating_add(Weight::from_parts(94_882_801, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_702_000 picoseconds.
        Weight::from_parts(101_871_584, 0)
            // Standard Error: 263_780
            .saturating_add(Weight::from_parts(91_969_359, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_639_000 picoseconds.
        Weight::from_parts(97_773_395, 0)
            // Standard Error: 254_621
            .saturating_add(Weight::from_parts(91_563_395, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_010_000 picoseconds.
        Weight::from_parts(94_414_789, 0)
            // Standard Error: 333_136
            .saturating_add(Weight::from_parts(89_153_702, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_632_000 picoseconds.
        Weight::from_parts(97_923_212, 0)
            // Standard Error: 365_889
            .saturating_add(Weight::from_parts(87_578_309, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_531_000 picoseconds.
        Weight::from_parts(93_831_183, 0)
            // Standard Error: 337_632
            .saturating_add(Weight::from_parts(95_232_966, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_120_000 picoseconds.
        Weight::from_parts(92_550_240, 0)
            // Standard Error: 300_496
            .saturating_add(Weight::from_parts(93_845_174, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 718_995_000 picoseconds.
        Weight::from_parts(766_547_439, 0)
            // Standard Error: 371_222
            .saturating_add(Weight::from_parts(149_776_575, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 858_499_000 picoseconds.
        Weight::from_parts(869_573_000, 0)
            // Standard Error: 54_171
            .saturating_add(Weight::from_parts(13_298_251, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_159_000 picoseconds.
        Weight::from_parts(109_081_294, 0)
            // Standard Error: 309_230
            .saturating_add(Weight::from_parts(100_667_527, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_619_000 picoseconds.
        Weight::from_parts(97_145_147, 0)
            // Standard Error: 310_475
            .saturating_add(Weight::from_parts(91_930_418, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_829_000 picoseconds.
        Weight::from_parts(97_680_457, 0)
            // Standard Error: 335_315
            .saturating_add(Weight::from_parts(87_433_494, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_160_000 picoseconds.
        Weight::from_parts(116_327_643, 0)
            // Standard Error: 337_988
            .saturating_add(Weight::from_parts(170_461_030, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_013_000 picoseconds.
        Weight::from_parts(109_250_000, 0)
            // Standard Error: 4_842_762
            .saturating_add(Weight::from_parts(887_252_577, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_760_000 picoseconds.
        Weight::from_parts(164_470_008, 0)
            // Standard Error: 395_347
            .saturating_add(Weight::from_parts(265_345_370, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 360_478_000 picoseconds.
        Weight::from_parts(364_480_000, 0)
            // Standard Error: 61_776
            .saturating_add(Weight::from_parts(24_750_923, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_476_000 picoseconds.
        Weight::from_parts(178_592_811, 0)
            // Standard Error: 365_169
            .saturating_add(Weight::from_parts(270_336_977, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 378_590_000 picoseconds.
        Weight::from_parts(380_091_000, 0)
            // Standard Error: 60_591
            .saturating_add(Weight::from_parts(25_085_149, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 734_263_000 picoseconds.
        Weight::from_parts(810_053_228, 0)
            // Standard Error: 388_097
            .saturating_add(Weight::from_parts(277_554_149, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 727_039_000 picoseconds.
        Weight::from_parts(810_853_909, 0)
            // Standard Error: 367_829
            .saturating_add(Weight::from_parts(281_684_578, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_780_000 picoseconds.
        Weight::from_parts(88_125_100, 0)
            // Standard Error: 300_639
            .saturating_add(Weight::from_parts(100_970_715, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_010_635_000 picoseconds.
        Weight::from_parts(2_135_241_691, 0)
            // Standard Error: 258_327
            .saturating_add(Weight::from_parts(170_470_444, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 342_602_000 picoseconds.
        Weight::from_parts(344_781_000, 0)
            // Standard Error: 52_139
            .saturating_add(Weight::from_parts(35_826_152, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_000_872_000 picoseconds.
        Weight::from_parts(2_127_161_534, 0)
            // Standard Error: 277_013
            .saturating_add(Weight::from_parts(224_794_674, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_019_258_000 picoseconds.
        Weight::from_parts(2_119_010_208, 0)
            // Standard Error: 273_780
            .saturating_add(Weight::from_parts(232_361_958, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 261_960_000 picoseconds.
        Weight::from_parts(324_775_557, 0)
            // Standard Error: 312_686
            .saturating_add(Weight::from_parts(282_626_983, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 525_109_000 picoseconds.
        Weight::from_parts(539_743_000, 0)
            // Standard Error: 58_541
            .saturating_add(Weight::from_parts(24_594_342, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_158_068_000 picoseconds.
        Weight::from_parts(2_268_740_022, 0)
            // Standard Error: 371_818
            .saturating_add(Weight::from_parts(245_531_254, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 122_728_000 picoseconds.
        Weight::from_parts(114_424_580, 0)
            // Standard Error: 1_014
            .saturating_add(Weight::from_parts(484_978, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 121_109_000 picoseconds.
        Weight::from_parts(114_417_846, 0)
            // Standard Error: 1_171
            .saturating_add(Weight::from_parts(489_644, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_956_000 picoseconds.
        Weight::from_parts(149_254_730, 0)
            // Standard Error: 375_681
            .saturating_add(Weight::from_parts(151_501_798, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 116_431_000 picoseconds.
        Weight::from_parts(119_851_000, 0)
            // Standard Error: 2_238
            .saturating_add(Weight::from_parts(704_184, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 124_507_000 picoseconds.
        Weight::from_parts(114_576_586, 0)
            // Standard Error: 964
            .saturating_add(Weight::from_parts(493_253, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 123_708_000 picoseconds.
        Weight::from_parts(110_064_331, 0)
            // Standard Error: 913
            .saturating_add(Weight::from_parts(489_952, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_285_000 picoseconds.
        Weight::from_parts(98_572_437, 0)
            // Standard Error: 357_080
            .saturating_add(Weight::from_parts(88_782_801, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_294_000 picoseconds.
        Weight::from_parts(105_846_193, 0)
            // Standard Error: 331_065
            .saturating_add(Weight::from_parts(86_315_400, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_348_000 picoseconds.
        Weight::from_parts(100_208_403, 0)
            // Standard Error: 310_672
            .saturating_add(Weight::from_parts(90_634_716, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 716_618_000 picoseconds.
        Weight::from_parts(754_792_933, 0)
            // Standard Error: 348_876
            .saturating_add(Weight::from_parts(111_205_849, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 750_093_000 picoseconds.
        Weight::from_parts(760_737_775, 0)
            // Standard Error: 1_604
            .saturating_add(Weight::from_parts(163_107, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_642_035_000 picoseconds.
        Weight::from_parts(2_763_204_742, 0)
            // Standard Error: 397_505
            .saturating_add(Weight::from_parts(133_123_288, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_783_432_000 picoseconds.
        Weight::from_parts(2_776_693_344, 0)
            // Standard Error: 9_352
            .saturating_add(Weight::from_parts(13_618_857, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_009_000 picoseconds.
        Weight::from_parts(120_924_010, 0)
            // Standard Error: 376_173
            .saturating_add(Weight::from_parts(117_220_506, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 161_710_000 picoseconds.
        Weight::from_parts(164_929_000, 0)
            // Standard Error: 60_904
            .saturating_add(Weight::from_parts(29_806_707, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_676_000 picoseconds.
        Weight::from_parts(105_781_901, 0)
            // Standard Error: 322_998
            .saturating_add(Weight::from_parts(87_606_160, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 178_654_000 picoseconds.
        Weight::from_parts(227_816_289, 0)
            // Standard Error: 233_445
            .saturating_add(Weight::from_parts(164_138_735, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 114_852_000 picoseconds.
        Weight::from_parts(176_064_112, 0)
            // Standard Error: 358_040
            .saturating_add(Weight::from_parts(347_761_404, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_719_763_000 picoseconds.
        Weight::from_parts(50_818_538_000, 0)
            // Standard Error: 310_729
            .saturating_add(Weight::from_parts(9_196_516, 0).saturating_mul(p.into()))
            // Standard Error: 310_713
            .saturating_add(Weight::from_parts(175_736_777, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 113_794_000 picoseconds.
        Weight::from_parts(183_182_428, 0)
            // Standard Error: 356_775
            .saturating_add(Weight::from_parts(352_090_613, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 53_072_375_000 picoseconds.
        Weight::from_parts(53_165_127_000, 0)
            // Standard Error: 314_086
            .saturating_add(Weight::from_parts(8_327_398, 0).saturating_mul(p.into()))
            // Standard Error: 314_070
            .saturating_add(Weight::from_parts(175_447_310, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_468_000 picoseconds.
        Weight::from_parts(122_478_730, 0)
            // Standard Error: 31_836
            .saturating_add(Weight::from_parts(2_020_568, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 105_386_000 picoseconds.
        Weight::from_parts(156_077_364, 1131)
            // Standard Error: 16_649
            .saturating_add(Weight::from_parts(14_738_024, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 100_798_000 picoseconds.
        Weight::from_parts(103_370_000, 1131)
            // Standard Error: 38_100
            .saturating_add(Weight::from_parts(42_255_262, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 7_592_379_000 picoseconds.
        Weight::from_parts(7_258_988_254, 5069931)
            // Standard Error: 102_796
            .saturating_add(Weight::from_parts(45_487_357, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1820 + p * (65580 ±0)`
        //  Estimated: `1946 + p * (75482 ±0)`
        // Minimum execution time: 101_639_000 picoseconds.
        Weight::from_parts(103_533_000, 1946)
            // Standard Error: 58_631
            .saturating_add(Weight::from_parts(54_436_986, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 109_272_000 picoseconds.
        Weight::from_parts(111_708_979, 1131)
            // Standard Error: 83_618
            .saturating_add(Weight::from_parts(42_481_390, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 754_700_000 picoseconds.
        Weight::from_parts(774_570_622, 1496)
            // Standard Error: 166_374
            .saturating_add(Weight::from_parts(47_538_035, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_228_837_000 picoseconds.
        Weight::from_parts(1_243_841_190, 317931)
            // Standard Error: 162_398
            .saturating_add(Weight::from_parts(47_798_312, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_822_000 picoseconds.
        Weight::from_parts(15_074_905, 0)
            // Standard Error: 282_957
            .saturating_add(Weight::from_parts(73_169_564, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_411_030_000 picoseconds.
        Weight::from_parts(4_159_848_567, 0)
            // Standard Error: 99_492
            .saturating_add(Weight::from_parts(5_795_035, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_436_068_000 picoseconds.
        Weight::from_parts(4_271_143_473, 0)
            // Standard Error: 78_237
            .saturating_add(Weight::from_parts(5_023_443, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_057_608_000 picoseconds.
        Weight::from_parts(10_676_499_906, 0)
            // Standard Error: 166_709
            .saturating_add(Weight::from_parts(11_273_130, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_999_944_000 picoseconds.
        Weight::from_parts(11_314_485_002, 0)
            // Standard Error: 162_249
            .saturating_add(Weight::from_parts(8_049_350, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_411_000 picoseconds.
        Weight::from_parts(2_476_000, 0)
            // Standard Error: 9_024
            .saturating_add(Weight::from_parts(3_808_795, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_368_000 picoseconds.
        Weight::from_parts(2_414_000, 0)
            // Standard Error: 4_993
            .saturating_add(Weight::from_parts(3_060_189, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_317_000 picoseconds.
        Weight::from_parts(3_631_786, 0)
            // Standard Error: 1_110
            .saturating_add(Weight::from_parts(1_558_462, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_428_000 picoseconds.
        Weight::from_parts(2_483_000, 0)
            // Standard Error: 8_115
            .saturating_add(Weight::from_parts(2_931_952, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_381_000 picoseconds.
        Weight::from_parts(2_276_315, 0)
            // Standard Error: 13_381
            .saturating_add(Weight::from_parts(5_148_399, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_988_000 picoseconds.
        Weight::from_parts(7_510_183, 0)
            // Standard Error: 2_861
            .saturating_add(Weight::from_parts(118_328, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_465_000 picoseconds.
        Weight::from_parts(4_395_417, 0)
            // Standard Error: 5_762
            .saturating_add(Weight::from_parts(2_554_063, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_554_063 -
            2_424_213, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_424_000 picoseconds.
        Weight::from_parts(3_985_557, 0)
            // Standard Error: 12_718
            .saturating_add(Weight::from_parts(2_424_213, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_820_000 picoseconds.
        Weight::from_parts(3_065_331, 0)
            // Standard Error: 29_235
            .saturating_add(Weight::from_parts(10_445_396, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_396_000 picoseconds.
        Weight::from_parts(540_751, 0)
            // Standard Error: 8_295
            .saturating_add(Weight::from_parts(1_212_829, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_393_000 picoseconds.
        Weight::from_parts(5_728_887, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_828_000 picoseconds.
        Weight::from_parts(5_617_022, 0)
            // Standard Error: 3_274
            .saturating_add(Weight::from_parts(369_438, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_841_000 picoseconds.
        Weight::from_parts(3_972_496, 0)
            // Standard Error: 6_559
            .saturating_add(Weight::from_parts(976_387, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_874_000 picoseconds.
        Weight::from_parts(4_801_026, 0)
            // Standard Error: 5_574
            .saturating_add(Weight::from_parts(959_555, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_418_000 picoseconds.
        Weight::from_parts(2_108_892, 0)
            // Standard Error: 9_092
            .saturating_add(Weight::from_parts(803_327, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_501_000 picoseconds.
        Weight::from_parts(6_582_000, 0)
            // Standard Error: 8_360
            .saturating_add(Weight::from_parts(1_296_270, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_859_000 picoseconds.
        Weight::from_parts(2_983_624, 0)
            // Standard Error: 17_060
            .saturating_add(Weight::from_parts(7_110_181, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_315_000 picoseconds.
        Weight::from_parts(2_458_000, 0)
            // Standard Error: 8_069
            .saturating_add(Weight::from_parts(3_339_703, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_380_000 picoseconds.
        Weight::from_parts(2_452_000, 0)
            // Standard Error: 7_358
            .saturating_add(Weight::from_parts(3_057_976, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_412_000 picoseconds.
        Weight::from_parts(2_598_000, 0)
            // Standard Error: 8_183
            .saturating_add(Weight::from_parts(3_078_945, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_371_000 picoseconds.
        Weight::from_parts(2_414_000, 0)
            // Standard Error: 4_984
            .saturating_add(Weight::from_parts(2_609_742, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_394_000 picoseconds.
        Weight::from_parts(2_498_000, 0)
            // Standard Error: 3_617
            .saturating_add(Weight::from_parts(571_910, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_378_000 picoseconds.
        Weight::from_parts(1_583_743, 0)
            // Standard Error: 3_521
            .saturating_add(Weight::from_parts(394_549, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_421_000 picoseconds.
        Weight::from_parts(2_512_000, 0)
            // Standard Error: 13_249
            .saturating_add(Weight::from_parts(1_754_334, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_340_000 picoseconds.
        Weight::from_parts(2_432_000, 0)
            // Standard Error: 7_472
            .saturating_add(Weight::from_parts(1_130_753, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_425_000 picoseconds.
        Weight::from_parts(1_466_497, 0)
            // Standard Error: 3_594
            .saturating_add(Weight::from_parts(375_667, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_525_000 picoseconds.
        Weight::from_parts(1_324_525, 0)
            // Standard Error: 4_276
            .saturating_add(Weight::from_parts(397_059, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(338_282, 0)
            // Standard Error: 6_618
            .saturating_add(Weight::from_parts(566_892, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_369_000 picoseconds.
        Weight::from_parts(660_268, 0)
            // Standard Error: 5_080
            .saturating_add(Weight::from_parts(545_097, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_439_000 picoseconds.
        Weight::from_parts(604_740, 0)
            // Standard Error: 5_533
            .saturating_add(Weight::from_parts(490_525, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_461_000 picoseconds.
        Weight::from_parts(1_666_574, 0)
            // Standard Error: 3_802
            .saturating_add(Weight::from_parts(330_900, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_483_000 picoseconds.
        Weight::from_parts(2_846_620, 0)
            // Standard Error: 1_636
            .saturating_add(Weight::from_parts(154_440, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_384_000 picoseconds.
        Weight::from_parts(2_896_480, 0)
            // Standard Error: 1_898
            .saturating_add(Weight::from_parts(161_252, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_446_000 picoseconds.
        Weight::from_parts(2_499_000, 0)
            // Standard Error: 11_628
            .saturating_add(Weight::from_parts(1_851_031, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_363_000 picoseconds.
        Weight::from_parts(2_451_000, 0)
            // Standard Error: 5_538
            .saturating_add(Weight::from_parts(1_105_463, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_449_000 picoseconds.
        Weight::from_parts(2_474_000, 0)
            // Standard Error: 11_258
            .saturating_add(Weight::from_parts(1_824_629, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_458_000 picoseconds.
        Weight::from_parts(2_531_000, 0)
            // Standard Error: 7_470
            .saturating_add(Weight::from_parts(1_114_120, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_503_000 picoseconds.
        Weight::from_parts(2_558_000, 0)
            // Standard Error: 11_670
            .saturating_add(Weight::from_parts(1_864_081, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_445_000 picoseconds.
        Weight::from_parts(2_520_000, 0)
            // Standard Error: 7_171
            .saturating_add(Weight::from_parts(1_162_286, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_591_000 picoseconds.
        Weight::from_parts(2_630_000, 0)
            // Standard Error: 11_613
            .saturating_add(Weight::from_parts(1_833_725, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_424_000 picoseconds.
        Weight::from_parts(2_488_000, 0)
            // Standard Error: 8_207
            .saturating_add(Weight::from_parts(1_105_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_445_000 picoseconds.
        Weight::from_parts(2_542_000, 0)
            // Standard Error: 12_900
            .saturating_add(Weight::from_parts(1_848_683, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_428_000 picoseconds.
        Weight::from_parts(2_532_000, 0)
            // Standard Error: 6_369
            .saturating_add(Weight::from_parts(1_127_621, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_482_000 picoseconds.
        Weight::from_parts(2_533_000, 0)
            // Standard Error: 9_935
            .saturating_add(Weight::from_parts(1_845_253, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_484_000 picoseconds.
        Weight::from_parts(2_561_000, 0)
            // Standard Error: 7_250
            .saturating_add(Weight::from_parts(1_122_264, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_416_000 picoseconds.
        Weight::from_parts(2_493_000, 0)
            // Standard Error: 14_741
            .saturating_add(Weight::from_parts(1_857_125, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_441_000 picoseconds.
        Weight::from_parts(2_504_000, 0)
            // Standard Error: 8_754
            .saturating_add(Weight::from_parts(1_100_513, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_438_000 picoseconds.
        Weight::from_parts(2_540_000, 0)
            // Standard Error: 11_975
            .saturating_add(Weight::from_parts(1_916_897, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_471_000 picoseconds.
        Weight::from_parts(2_558_000, 0)
            // Standard Error: 8_833
            .saturating_add(Weight::from_parts(1_166_103, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_499_000 picoseconds.
        Weight::from_parts(2_536_000, 0)
            // Standard Error: 12_098
            .saturating_add(Weight::from_parts(1_935_267, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_403_000 picoseconds.
        Weight::from_parts(2_453_000, 0)
            // Standard Error: 9_537
            .saturating_add(Weight::from_parts(1_191_277, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_479_000 picoseconds.
        Weight::from_parts(2_532_000, 0)
            // Standard Error: 14_965
            .saturating_add(Weight::from_parts(1_913_211, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_504_000 picoseconds.
        Weight::from_parts(2_571_000, 0)
            // Standard Error: 8_924
            .saturating_add(Weight::from_parts(1_239_842, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_397_000 picoseconds.
        Weight::from_parts(2_526_000, 0)
            // Standard Error: 7_835
            .saturating_add(Weight::from_parts(1_313_282, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_466_000 picoseconds.
        Weight::from_parts(2_564_000, 0)
            // Standard Error: 4_357
            .saturating_add(Weight::from_parts(645_923, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_402_000 picoseconds.
        Weight::from_parts(2_453_000, 0)
            // Standard Error: 8_626
            .saturating_add(Weight::from_parts(1_276_437, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_422_000 picoseconds.
        Weight::from_parts(2_528_000, 0)
            // Standard Error: 4_696
            .saturating_add(Weight::from_parts(652_026, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_385_000 picoseconds.
        Weight::from_parts(2_482_000, 0)
            // Standard Error: 12_218
            .saturating_add(Weight::from_parts(1_826_460, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_413_000 picoseconds.
        Weight::from_parts(2_539_000, 0)
            // Standard Error: 9_366
            .saturating_add(Weight::from_parts(1_248_918, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_429_000 picoseconds.
        Weight::from_parts(1_297_982, 0)
            // Standard Error: 13_601
            .saturating_add(Weight::from_parts(2_863_731, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_393_000 picoseconds.
        Weight::from_parts(1_099_971, 0)
            // Standard Error: 10_339
            .saturating_add(Weight::from_parts(2_530_463, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_458_000 picoseconds.
        Weight::from_parts(1_084_265, 0)
            // Standard Error: 23_256
            .saturating_add(Weight::from_parts(2_978_416, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_373_000 picoseconds.
        Weight::from_parts(2_411_000, 0)
            // Standard Error: 6_453
            .saturating_add(Weight::from_parts(2_544_896, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_360_000 picoseconds.
        Weight::from_parts(2_474_000, 0)
            // Standard Error: 17_225
            .saturating_add(Weight::from_parts(9_301_390, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_433_000 picoseconds.
        Weight::from_parts(2_084_998, 0)
            // Standard Error: 45_687
            .saturating_add(Weight::from_parts(7_475_464, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_436_000 picoseconds.
        Weight::from_parts(2_226_818, 0)
            // Standard Error: 13_746
            .saturating_add(Weight::from_parts(2_991_062, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_486_000 picoseconds.
        Weight::from_parts(2_554_000, 0)
            // Standard Error: 8_082
            .saturating_add(Weight::from_parts(2_532_424, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_495_000 picoseconds.
        Weight::from_parts(2_551_000, 0)
            // Standard Error: 8_040
            .saturating_add(Weight::from_parts(1_288_528, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_336_000 picoseconds.
        Weight::from_parts(2_477_000, 0)
            // Standard Error: 5_119
            .saturating_add(Weight::from_parts(680_557, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_400_000 picoseconds.
        Weight::from_parts(2_496_000, 0)
            // Standard Error: 8_363
            .saturating_add(Weight::from_parts(1_296_231, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_478_000 picoseconds.
        Weight::from_parts(2_587_000, 0)
            // Standard Error: 4_774
            .saturating_add(Weight::from_parts(652_226, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_416_000 picoseconds.
        Weight::from_parts(2_517_000, 0)
            // Standard Error: 8_648
            .saturating_add(Weight::from_parts(1_337_138, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_489_000 picoseconds.
        Weight::from_parts(2_596_000, 0)
            // Standard Error: 4_613
            .saturating_add(Weight::from_parts(648_763, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_352_000 picoseconds.
        Weight::from_parts(2_440_000, 0)
            // Standard Error: 7_616
            .saturating_add(Weight::from_parts(1_144_797, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_462_000 picoseconds.
        Weight::from_parts(2_566_000, 0)
            // Standard Error: 4_082
            .saturating_add(Weight::from_parts(590_599, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_507_000 picoseconds.
        Weight::from_parts(2_581_000, 0)
            // Standard Error: 7_204
            .saturating_add(Weight::from_parts(1_078_475, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_404_000 picoseconds.
        Weight::from_parts(2_512_000, 0)
            // Standard Error: 4_298
            .saturating_add(Weight::from_parts(569_480, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_420_000 picoseconds.
        Weight::from_parts(2_563_000, 0)
            // Standard Error: 7_196
            .saturating_add(Weight::from_parts(1_071_331, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_450_000 picoseconds.
        Weight::from_parts(2_581_000, 0)
            // Standard Error: 4_067
            .saturating_add(Weight::from_parts(592_513, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_366_000 picoseconds.
        Weight::from_parts(2_559_000, 0)
            // Standard Error: 9_321
            .saturating_add(Weight::from_parts(1_130_270, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_427_000 picoseconds.
        Weight::from_parts(2_515_000, 0)
            // Standard Error: 5_776
            .saturating_add(Weight::from_parts(616_542, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_327_000 picoseconds.
        Weight::from_parts(2_432_000, 0)
            // Standard Error: 7_420
            .saturating_add(Weight::from_parts(1_112_890, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_398_000 picoseconds.
        Weight::from_parts(2_507_000, 0)
            // Standard Error: 4_257
            .saturating_add(Weight::from_parts(586_886, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_resume_session() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `330`
        //  Estimated: `3795`
        // Minimum execution time: 9_820_000 picoseconds.
        Weight::from_parts(10_472_000, 3795)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1090`
        //  Estimated: `23985`
        // Minimum execution time: 59_897_000 picoseconds.
        Weight::from_parts(62_010_000, 23985)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `888`
        //  Estimated: `22158`
        // Minimum execution time: 46_288_000 picoseconds.
        Weight::from_parts(47_406_000, 22158)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1010`
        //  Estimated: `34619`
        // Minimum execution time: 74_565_000 picoseconds.
        Weight::from_parts(76_575_000, 34619)
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `695`
        //  Estimated: `20509`
        // Minimum execution time: 31_805_000 picoseconds.
        Weight::from_parts(32_822_000, 20509)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `976`
        //  Estimated: `26636`
        // Minimum execution time: 45_902_000 picoseconds.
        Weight::from_parts(47_104_000, 26636)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_420_000 picoseconds.
        Weight::from_parts(3_627_000, 3545)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1605`
        //  Estimated: `58022`
        // Minimum execution time: 108_740_000 picoseconds.
        Weight::from_parts(110_375_000, 58022)
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1332`
        //  Estimated: `46962`
        // Minimum execution time: 88_926_000 picoseconds.
        Weight::from_parts(93_769_000, 46962)
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2314 + c * (16400 ±0)`
        //  Estimated: `19933 + c * (84480 ±0)`
        // Minimum execution time: 31_114_000 picoseconds.
        Weight::from_parts(31_852_000, 19933)
            // Standard Error: 67_045
            .saturating_add(Weight::from_parts(40_497_188, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 84480).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program_uninited(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3140 + c * (42 ±0)`
        //  Estimated: `60717 + c * (2947 ±0)`
        // Minimum execution time: 90_347_000 picoseconds.
        Weight::from_parts(79_061_157, 60717)
            // Standard Error: 2_131
            .saturating_add(Weight::from_parts(1_041_219, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2947).saturating_mul(c.into()))
    }
}
