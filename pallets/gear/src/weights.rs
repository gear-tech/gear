// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-04-19, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("local"), DB CACHE: 1024

// Executed Command:
// ./target/release/gear-node benchmark --chain=local --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./pallets/gear/src/weights.rs --template=./.maintain/gear-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
	fn submit_code(c: u32) -> Weight;
	fn submit_program(c: u32, s: u32, ) -> Weight;
	fn send_message(p: u32, ) -> Weight;
	fn send_reply(p: u32, ) -> Weight;
	fn initial_allocation(q: u32, ) -> Weight;
	fn alloc_in_handle(q: u32, ) -> Weight;
	fn reinstrument(c: u32, ) -> Weight;
	fn alloc(r: u32, ) -> Weight;
	fn gas(r: u32, ) -> Weight;
	fn gr_gas_available(r: u32, ) -> Weight;
	fn gr_msg_id(r: u32, ) -> Weight;
	fn gr_origin(r: u32, ) -> Weight;
	fn gr_program_id(r: u32, ) -> Weight;
	fn gr_source(r: u32, ) -> Weight;
	fn gr_value(r: u32, ) -> Weight;
	fn gr_value_available(r: u32, ) -> Weight;
	fn gr_size(r: u32, ) -> Weight;
	fn gr_read(r: u32, ) -> Weight;
	fn gr_read_per_kb(n: u32, ) -> Weight;
	fn gr_block_height(r: u32, ) -> Weight;
	fn gr_block_timestamp(r: u32, ) -> Weight;
	fn gr_send_init(r: u32, ) -> Weight;
	fn gr_send_push(r: u32, ) -> Weight;
	fn gr_send_push_per_kb(n: u32, ) -> Weight;
	fn gr_send_commit(r: u32, ) -> Weight;
	fn gr_send_commit_per_kb(n: u32, ) -> Weight;
	fn gr_reply(r: u32, ) -> Weight;
	fn gr_reply_per_kb(n: u32, ) -> Weight;
	fn gr_reply_to(r: u32, ) -> Weight;
	fn gr_exit_code(r: u32, ) -> Weight;
	fn gr_exit(r: u32, ) -> Weight;
	fn gr_leave(r: u32, ) -> Weight;
	fn gr_wait(r: u32, ) -> Weight;
	fn gr_wake(r: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct GearWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for GearWeight<T> {
	fn submit_code(c: u32, ) -> Weight {
		(38_177_000 as Weight)
			// Standard Error: 0
			.saturating_add((49_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn submit_program(c: u32, s: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 0
			.saturating_add((49_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	fn send_message(_p: u32, ) -> Weight {
		(41_619_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn send_reply(_p: u32, ) -> Weight {
		(40_466_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn initial_allocation(q: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 33_839_000
			.saturating_add((3_011_901_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(18 as Weight))
			.saturating_add(T::DbWeight::get().writes(15 as Weight))
			.saturating_add(T::DbWeight::get().writes((16 as Weight).saturating_mul(q as Weight)))
	}
	fn alloc_in_handle(q: u32, ) -> Weight {
		(230_820_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((27_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(18 as Weight))
			.saturating_add(T::DbWeight::get().writes(31 as Weight))
	}
	fn reinstrument(c: u32, ) -> Weight {
		(21_228_000 as Weight)
			// Standard Error: 0
			.saturating_add((50_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn alloc(r: u32, ) -> Weight {
		(1_521_984_000 as Weight)
			// Standard Error: 1_590_000
			.saturating_add((1_444_266_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn gas(r: u32, ) -> Weight {
		(1_476_306_000 as Weight)
			// Standard Error: 833_000
			.saturating_add((66_319_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn gr_gas_available(r: u32, ) -> Weight {
		(1_460_305_000 as Weight)
			// Standard Error: 387_000
			.saturating_add((59_045_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn gr_msg_id(r: u32, ) -> Weight {
		(1_705_534_000 as Weight)
			// Standard Error: 1_125_000
			.saturating_add((74_232_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn gr_origin(r: u32, ) -> Weight {
		(1_680_592_000 as Weight)
			// Standard Error: 472_000
			.saturating_add((68_505_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn gr_program_id(r: u32, ) -> Weight {
		(1_620_199_000 as Weight)
			// Standard Error: 756_000
			.saturating_add((75_178_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn gr_source(r: u32, ) -> Weight {
		(1_684_649_000 as Weight)
			// Standard Error: 858_000
			.saturating_add((71_799_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn gr_value(r: u32, ) -> Weight {
		(1_580_889_000 as Weight)
			// Standard Error: 482_000
			.saturating_add((71_828_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn gr_value_available(r: u32, ) -> Weight {
		(1_650_190_000 as Weight)
			// Standard Error: 518_000
			.saturating_add((71_568_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn gr_size(r: u32, ) -> Weight {
		(1_442_245_000 as Weight)
			// Standard Error: 355_000
			.saturating_add((56_528_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn gr_read(r: u32, ) -> Weight {
		(1_532_579_000 as Weight)
			// Standard Error: 445_000
			.saturating_add((77_423_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn gr_read_per_kb(n: u32, ) -> Weight {
		(1_534_276_000 as Weight)
			// Standard Error: 238_000
			.saturating_add((51_173_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	fn gr_block_height(r: u32, ) -> Weight {
		(1_423_190_000 as Weight)
			// Standard Error: 132_000
			.saturating_add((54_865_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn gr_block_timestamp(r: u32, ) -> Weight {
		(1_429_225_000 as Weight)
			// Standard Error: 134_000
			.saturating_add((58_835_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn gr_send_init(r: u32, ) -> Weight {
		(1_590_973_000 as Weight)
			// Standard Error: 511_000
			.saturating_add((96_121_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn gr_send_push(r: u32, ) -> Weight {
		(1_594_962_000 as Weight)
			// Standard Error: 559_000
			.saturating_add((188_604_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn gr_send_push_per_kb(n: u32, ) -> Weight {
		(1_774_077_000 as Weight)
			// Standard Error: 181_000
			.saturating_add((40_208_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn gr_send_commit(r: u32, ) -> Weight {
		(1_634_580_000 as Weight)
			// Standard Error: 518_000
			.saturating_add((901_668_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(16 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
			.saturating_add(T::DbWeight::get().writes((200 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_send_commit_per_kb(n: u32, ) -> Weight {
		(2_124_438_000 as Weight)
			// Standard Error: 646_000
			.saturating_add((188_213_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(15 as Weight))
			.saturating_add(T::DbWeight::get().writes(211 as Weight))
	}
	fn gr_reply(r: u32, ) -> Weight {
		(1_677_491_000 as Weight)
			// Standard Error: 547_000
			.saturating_add((98_785_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(16 as Weight))
			.saturating_add(T::DbWeight::get().writes(12 as Weight))
	}
	fn gr_reply_per_kb(n: u32, ) -> Weight {
		(1_779_509_000 as Weight)
			// Standard Error: 46_000
			.saturating_add((1_417_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(18 as Weight))
			.saturating_add(T::DbWeight::get().writes(13 as Weight))
	}
	fn gr_reply_to(r: u32, ) -> Weight {
		(1_426_347_000 as Weight)
			// Standard Error: 192_000
			.saturating_add((7_040_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(12 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	fn gr_exit_code(r: u32, ) -> Weight {
		(1_410_793_000 as Weight)
			// Standard Error: 70_000
			.saturating_add((7_810_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(12 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	fn gr_exit(r: u32, ) -> Weight {
		(1_433_400_000 as Weight)
			// Standard Error: 2_705_000
			.saturating_add((1_487_000_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
			.saturating_add(T::DbWeight::get().writes((2049 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_leave(_r: u32, ) -> Weight {
		(1_426_300_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn gr_wait(r: u32, ) -> Weight {
		(1_421_900_000 as Weight)
			// Standard Error: 2_354_000
			.saturating_add((18_100_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn gr_wake(r: u32, ) -> Weight {
		(1_368_026_000 as Weight)
			// Standard Error: 679_000
			.saturating_add((1_724_609_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().reads((101 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
			.saturating_add(T::DbWeight::get().writes((200 as Weight).saturating_mul(r as Weight)))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(10_090_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((463_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(313_807_000 as Weight)
			// Standard Error: 247_000
			.saturating_add((8_380_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(262_118_000 as Weight)
			// Standard Error: 209_000
			.saturating_add((7_728_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(8_079_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((1_441_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(14_020_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((1_470_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(11_426_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((637_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(9_905_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_139_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(11_946_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((1_378_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(13_410_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((5_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(12_243_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((6_652_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(21_092_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((10_923_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(28_679_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((462_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(9_844_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((275_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(9_458_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((518_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(9_300_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((553_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(13_710_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((411_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(12_074_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((633_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(9_539_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((599_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(9_062_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((687_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(10_048_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((669_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(10_144_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((687_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(9_625_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((687_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(9_699_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((716_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(9_340_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((693_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(9_937_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((670_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(9_845_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((1_124_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(10_751_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_133_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(10_347_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_095_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(10_006_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((1_108_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(9_118_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((1_142_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(10_483_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((1_125_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(12_561_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((1_062_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(12_402_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((1_059_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(10_291_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((1_100_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(9_097_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((1_200_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(10_375_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((1_117_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(9_332_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((1_121_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(11_720_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((1_103_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(10_619_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((1_123_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(9_706_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((1_130_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(9_388_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((1_157_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(8_217_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((1_224_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(9_987_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((1_154_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(9_250_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((1_139_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(10_935_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((1_112_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(10_469_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((1_110_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(9_506_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((1_167_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(10_608_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((1_088_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(11_350_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((1_115_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(11_513_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((1_085_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn submit_code(c: u32) -> Weight {
		(38_177_000 as Weight)
			// Standard Error: 0
			.saturating_add((49_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn submit_program(c: u32, s: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 0
			.saturating_add((49_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(10 as Weight))
	}
	fn send_message(_p: u32, ) -> Weight {
		(41_619_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn send_reply(_p: u32, ) -> Weight {
		(40_466_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn initial_allocation(q: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 33_839_000
			.saturating_add((3_011_901_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(18 as Weight))
			.saturating_add(RocksDbWeight::get().writes(15 as Weight))
			.saturating_add(RocksDbWeight::get().writes((16 as Weight).saturating_mul(q as Weight)))
	}
	fn alloc_in_handle(q: u32, ) -> Weight {
		(230_820_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((27_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(18 as Weight))
			.saturating_add(RocksDbWeight::get().writes(31 as Weight))
	}
	fn reinstrument(c: u32, ) -> Weight {
		(21_228_000 as Weight)
			// Standard Error: 0
			.saturating_add((50_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn alloc(r: u32, ) -> Weight {
		(1_521_984_000 as Weight)
			// Standard Error: 1_590_000
			.saturating_add((1_444_266_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn gas(r: u32, ) -> Weight {
		(1_476_306_000 as Weight)
			// Standard Error: 833_000
			.saturating_add((66_319_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn gr_gas_available(r: u32, ) -> Weight {
		(1_460_305_000 as Weight)
			// Standard Error: 387_000
			.saturating_add((59_045_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn gr_msg_id(r: u32, ) -> Weight {
		(1_705_534_000 as Weight)
			// Standard Error: 1_125_000
			.saturating_add((74_232_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn gr_origin(r: u32, ) -> Weight {
		(1_680_592_000 as Weight)
			// Standard Error: 472_000
			.saturating_add((68_505_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn gr_program_id(r: u32, ) -> Weight {
		(1_620_199_000 as Weight)
			// Standard Error: 756_000
			.saturating_add((75_178_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn gr_source(r: u32, ) -> Weight {
		(1_684_649_000 as Weight)
			// Standard Error: 858_000
			.saturating_add((71_799_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn gr_value(r: u32, ) -> Weight {
		(1_580_889_000 as Weight)
			// Standard Error: 482_000
			.saturating_add((71_828_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn gr_value_available(r: u32, ) -> Weight {
		(1_650_190_000 as Weight)
			// Standard Error: 518_000
			.saturating_add((71_568_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn gr_size(r: u32, ) -> Weight {
		(1_442_245_000 as Weight)
			// Standard Error: 355_000
			.saturating_add((56_528_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn gr_read(r: u32, ) -> Weight {
		(1_532_579_000 as Weight)
			// Standard Error: 445_000
			.saturating_add((77_423_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn gr_read_per_kb(n: u32, ) -> Weight {
		(1_534_276_000 as Weight)
			// Standard Error: 238_000
			.saturating_add((51_173_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(13 as Weight))
			.saturating_add(RocksDbWeight::get().writes(10 as Weight))
	}
	fn gr_block_height(r: u32, ) -> Weight {
		(1_423_190_000 as Weight)
			// Standard Error: 132_000
			.saturating_add((54_865_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn gr_block_timestamp(r: u32, ) -> Weight {
		(1_429_225_000 as Weight)
			// Standard Error: 134_000
			.saturating_add((58_835_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn gr_send_init(r: u32, ) -> Weight {
		(1_590_973_000 as Weight)
			// Standard Error: 511_000
			.saturating_add((96_121_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn gr_send_push(r: u32, ) -> Weight {
		(1_594_962_000 as Weight)
			// Standard Error: 559_000
			.saturating_add((188_604_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn gr_send_push_per_kb(n: u32, ) -> Weight {
		(1_774_077_000 as Weight)
			// Standard Error: 181_000
			.saturating_add((40_208_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(13 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn gr_send_commit(r: u32, ) -> Weight {
		(1_634_580_000 as Weight)
			// Standard Error: 518_000
			.saturating_add((901_668_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(16 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes((200 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_send_commit_per_kb(n: u32, ) -> Weight {
		(2_124_438_000 as Weight)
			// Standard Error: 646_000
			.saturating_add((188_213_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(15 as Weight))
			.saturating_add(RocksDbWeight::get().writes(211 as Weight))
	}
	fn gr_reply(r: u32, ) -> Weight {
		(1_677_491_000 as Weight)
			// Standard Error: 547_000
			.saturating_add((98_785_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(16 as Weight))
			.saturating_add(RocksDbWeight::get().writes(12 as Weight))
	}
	fn gr_reply_per_kb(n: u32, ) -> Weight {
		(1_779_509_000 as Weight)
			// Standard Error: 46_000
			.saturating_add((1_417_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(18 as Weight))
			.saturating_add(RocksDbWeight::get().writes(13 as Weight))
	}
	fn gr_reply_to(r: u32, ) -> Weight {
		(1_426_347_000 as Weight)
			// Standard Error: 192_000
			.saturating_add((7_040_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(12 as Weight))
			.saturating_add(RocksDbWeight::get().writes(10 as Weight))
	}
	fn gr_exit_code(r: u32, ) -> Weight {
		(1_410_793_000 as Weight)
			// Standard Error: 70_000
			.saturating_add((7_810_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(12 as Weight))
			.saturating_add(RocksDbWeight::get().writes(10 as Weight))
	}
	fn gr_exit(r: u32, ) -> Weight {
		(1_433_400_000 as Weight)
			// Standard Error: 2_705_000
			.saturating_add((1_487_000_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes((2049 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_leave(_r: u32, ) -> Weight {
		(1_426_300_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn gr_wait(r: u32, ) -> Weight {
		(1_421_900_000 as Weight)
			// Standard Error: 2_354_000
			.saturating_add((18_100_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn gr_wake(r: u32, ) -> Weight {
		(1_368_026_000 as Weight)
			// Standard Error: 679_000
			.saturating_add((1_724_609_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(13 as Weight))
			.saturating_add(RocksDbWeight::get().reads((101 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes((200 as Weight).saturating_mul(r as Weight)))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(10_090_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((463_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(313_807_000 as Weight)
			// Standard Error: 247_000
			.saturating_add((8_380_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(262_118_000 as Weight)
			// Standard Error: 209_000
			.saturating_add((7_728_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(8_079_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((1_441_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(14_020_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((1_470_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(11_426_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((637_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(9_905_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_139_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(11_946_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((1_378_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(13_410_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((5_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(12_243_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((6_652_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(21_092_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((10_923_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(28_679_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((462_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(9_844_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((275_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(9_458_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((518_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(9_300_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((553_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(13_710_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((411_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(12_074_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((633_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(9_539_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((599_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(9_062_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((687_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(10_048_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((669_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(10_144_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((687_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(9_625_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((687_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(9_699_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((716_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(9_340_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((693_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(9_937_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((670_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(9_845_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((1_124_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(10_751_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_133_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(10_347_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_095_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(10_006_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((1_108_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(9_118_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((1_142_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(10_483_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((1_125_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(12_561_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((1_062_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(12_402_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((1_059_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(10_291_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((1_100_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(9_097_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((1_200_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(10_375_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((1_117_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(9_332_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((1_121_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(11_720_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((1_103_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(10_619_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((1_123_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(9_706_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((1_130_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(9_388_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((1_157_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(8_217_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((1_224_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(9_987_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((1_154_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(9_250_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((1_139_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(10_935_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((1_112_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(10_469_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((1_110_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(9_506_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((1_167_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(10_608_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((1_088_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(11_350_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((1_115_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(11_513_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((1_085_000 as Weight).saturating_mul(r as Weight))
	}
}
