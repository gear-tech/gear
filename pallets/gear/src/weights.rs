// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-06-12, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/gear-node benchmark pallet --chain=dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./pallets/gear/src/weights.rs --template=./.maintain/gear-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
	fn submit_code(c: u32, ) -> Weight;
	fn submit_program(c: u32, s: u32, ) -> Weight;
	fn send_message(p: u32, ) -> Weight;
	fn send_reply(p: u32, ) -> Weight;
	fn initial_allocation(q: u32, ) -> Weight;
	fn alloc_in_handle(q: u32, ) -> Weight;
	fn reinstrument(c: u32, ) -> Weight;
	fn alloc(r: u32, ) -> Weight;
	fn gas(r: u32, ) -> Weight;
	fn gr_gas_available(r: u32, ) -> Weight;
	fn gr_msg_id(r: u32, ) -> Weight;
	fn gr_origin(r: u32, ) -> Weight;
	fn gr_program_id(r: u32, ) -> Weight;
	fn gr_source(r: u32, ) -> Weight;
	fn gr_value(r: u32, ) -> Weight;
	fn gr_value_available(r: u32, ) -> Weight;
	fn gr_size(r: u32, ) -> Weight;
	fn gr_read(r: u32, ) -> Weight;
	fn gr_read_per_kb(n: u32, ) -> Weight;
	fn gr_block_height(r: u32, ) -> Weight;
	fn gr_block_timestamp(r: u32, ) -> Weight;
	fn gr_send_init(r: u32, ) -> Weight;
	fn gr_send_push(r: u32, ) -> Weight;
	fn gr_send_push_per_kb(n: u32, ) -> Weight;
	fn gr_send_commit(r: u32, ) -> Weight;
	fn gr_send_commit_per_kb(n: u32, ) -> Weight;
	fn gr_reply_commit(r: u32, ) -> Weight;
	fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
	fn gr_reply_push(r: u32, ) -> Weight;
	fn gr_reply_push_per_kb(n: u32, ) -> Weight;
	fn gr_reply_to(r: u32, ) -> Weight;
	fn gr_debug(r: u32, ) -> Weight;
	fn gr_exit_code(r: u32, ) -> Weight;
	fn gr_exit(r: u32, ) -> Weight;
	fn gr_leave(r: u32, ) -> Weight;
	fn gr_wait(r: u32, ) -> Weight;
	fn gr_wake(r: u32, ) -> Weight;
	fn gr_create_program_wgas(r: u32, ) -> Weight;
	fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight;
	fn initial_cost() -> Weight;
	fn allocation_cost() -> Weight;
	fn grow_cost() -> Weight;
	fn load_cost() -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct GearWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for GearWeight<T> {
	fn submit_code(c: u32, ) -> Weight {
		(102_323_000 as Weight)
			// Standard Error: 0
			.saturating_add((65_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn submit_program(c: u32, s: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 0
			.saturating_add((66_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((4_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn send_message(p: u32, ) -> Weight {
		(125_894_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn send_reply(p: u32, ) -> Weight {
		(134_365_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn initial_allocation(_q: u32, ) -> Weight {
		(292_984_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(24 as Weight))
			.saturating_add(T::DbWeight::get().writes(16 as Weight))
	}
	fn alloc_in_handle(q: u32, ) -> Weight {
		(477_547_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((93_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(23 as Weight))
			.saturating_add(T::DbWeight::get().writes(15 as Weight))
	}
	fn reinstrument(c: u32, ) -> Weight {
		(8_823_000 as Weight)
			// Standard Error: 0
			.saturating_add((67_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn alloc(r: u32, ) -> Weight {
		(6_414_971_000 as Weight)
			// Standard Error: 22_026_000
			.saturating_add((16_588_242_000 as Weight).saturating_mul(r as Weight))
	}
	fn gas(r: u32, ) -> Weight {
		(7_923_436_000 as Weight)
			// Standard Error: 1_091_000
			.saturating_add((102_206_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_gas_available(r: u32, ) -> Weight {
		(7_835_493_000 as Weight)
			// Standard Error: 499_000
			.saturating_add((107_361_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_msg_id(r: u32, ) -> Weight {
		(8_137_175_000 as Weight)
			// Standard Error: 1_851_000
			.saturating_add((120_534_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_origin(r: u32, ) -> Weight {
		(7_931_893_000 as Weight)
			// Standard Error: 431_000
			.saturating_add((134_653_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_program_id(r: u32, ) -> Weight {
		(7_999_541_000 as Weight)
			// Standard Error: 2_220_000
			.saturating_add((136_051_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_source(r: u32, ) -> Weight {
		(7_926_542_000 as Weight)
			// Standard Error: 860_000
			.saturating_add((136_609_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_value(r: u32, ) -> Weight {
		(7_969_550_000 as Weight)
			// Standard Error: 1_830_000
			.saturating_add((136_899_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_value_available(r: u32, ) -> Weight {
		(7_934_393_000 as Weight)
			// Standard Error: 406_000
			.saturating_add((134_334_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_size(r: u32, ) -> Weight {
		(7_850_110_000 as Weight)
			// Standard Error: 445_000
			.saturating_add((88_613_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_read(r: u32, ) -> Weight {
		(7_873_497_000 as Weight)
			// Standard Error: 423_000
			.saturating_add((144_790_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_read_per_kb(n: u32, ) -> Weight {
		(8_168_670_000 as Weight)
			// Standard Error: 262_000
			.saturating_add((29_889_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_block_height(r: u32, ) -> Weight {
		(8_029_205_000 as Weight)
			// Standard Error: 424_000
			.saturating_add((83_278_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_block_timestamp(r: u32, ) -> Weight {
		(7_865_051_000 as Weight)
			// Standard Error: 3_711_000
			.saturating_add((132_328_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_send_init(r: u32, ) -> Weight {
		(8_127_366_000 as Weight)
			// Standard Error: 535_000
			.saturating_add((166_345_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_send_push(r: u32, ) -> Weight {
		(8_135_054_000 as Weight)
			// Standard Error: 930_000
			.saturating_add((336_043_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_send_push_per_kb(n: u32, ) -> Weight {
		(8_510_227_000 as Weight)
			// Standard Error: 235_000
			.saturating_add((57_230_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_send_commit(r: u32, ) -> Weight {
		(8_133_580_000 as Weight)
			// Standard Error: 13_620_000
			.saturating_add((156_844_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().reads((8 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
			.saturating_add(T::DbWeight::get().writes((7 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_send_commit_per_kb(n: u32, ) -> Weight {
		(8_374_305_000 as Weight)
			// Standard Error: 431_000
			.saturating_add((1_135_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(16 as Weight))
			.saturating_add(T::DbWeight::get().writes(12 as Weight))
	}
	fn gr_reply_commit(r: u32, ) -> Weight {
		(8_269_520_000 as Weight)
			// Standard Error: 518_000
			.saturating_add((171_253_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	fn gr_reply_commit_per_kb(_n: u32, ) -> Weight {
		(8_746_297_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn gr_reply_push(r: u32, ) -> Weight {
		(8_087_285_000 as Weight)
			// Standard Error: 1_863_000
			.saturating_add((152_869_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_reply_push_per_kb(n: u32, ) -> Weight {
		(8_369_364_000 as Weight)
			// Standard Error: 513_000
			.saturating_add((59_371_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_reply_to(r: u32, ) -> Weight {
		(8_172_955_000 as Weight)
			// Standard Error: 363_000
			.saturating_add((7_975_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn gr_debug(r: u32, ) -> Weight {
		(8_170_370_000 as Weight)
			// Standard Error: 427_000
			.saturating_add((140_629_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn gr_exit_code(r: u32, ) -> Weight {
		(8_129_114_000 as Weight)
			// Standard Error: 988_000
			.saturating_add((14_891_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn gr_exit(r: u32, ) -> Weight {
		(8_163_377_000 as Weight)
			// Standard Error: 17_276_000
			.saturating_add((240_281_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().reads((6 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
			.saturating_add(T::DbWeight::get().writes((4 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_leave(r: u32, ) -> Weight {
		(8_185_150_000 as Weight)
			// Standard Error: 19_042_000
			.saturating_add((21_527_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn gr_wait(r: u32, ) -> Weight {
		(8_149_631_000 as Weight)
			// Standard Error: 18_039_000
			.saturating_add((34_230_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn gr_wake(r: u32, ) -> Weight {
		(7_552_091_000 as Weight)
			// Standard Error: 20_201_000
			.saturating_add((5_385_564_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().reads((201 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
			.saturating_add(T::DbWeight::get().writes((200 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_create_program_wgas(r: u32, ) -> Weight {
		(8_248_838_000 as Weight)
			// Standard Error: 14_366_000
			.saturating_add((131_905_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
		(8_362_745_000 as Weight)
			// Standard Error: 380_000
			.saturating_add((1_894_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn initial_cost() -> Weight {
		100_000_000 as Weight
	}
	fn allocation_cost() -> Weight {
		200_000_000 as Weight
	}
	fn grow_cost() -> Weight {
		200_000_000 as Weight
	}
	fn load_cost() -> Weight {
		20_000_000 as Weight
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(8_039_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(209_907_000 as Weight)
			// Standard Error: 366_000
			.saturating_add((60_584_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(334_551_000 as Weight)
			// Standard Error: 482_000
			.saturating_add((127_962_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(8_421_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((657_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(8_445_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((670_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(8_189_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((426_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(9_111_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((541_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(9_401_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_612_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(11_074_000 as Weight)
			// Standard Error: 0
			.saturating_add((15_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(6_052_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((814_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(15_288_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_656_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(11_282_000 as Weight)
			// Standard Error: 0
			.saturating_add((144_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(8_134_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((64_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(8_385_000 as Weight)
			// Standard Error: 0
			.saturating_add((118_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(8_449_000 as Weight)
			// Standard Error: 0
			.saturating_add((117_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(30_984_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((125_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(32_024_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((194_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(15_437_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_812_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(8_371_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((611_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(8_507_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((593_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(8_186_000 as Weight)
			// Standard Error: 0
			.saturating_add((112_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(8_308_000 as Weight)
			// Standard Error: 0
			.saturating_add((221_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(8_195_000 as Weight)
			// Standard Error: 0
			.saturating_add((75_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(8_127_000 as Weight)
			// Standard Error: 0
			.saturating_add((48_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(8_129_000 as Weight)
			// Standard Error: 0
			.saturating_add((48_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(8_232_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((226_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(8_283_000 as Weight)
			// Standard Error: 0
			.saturating_add((221_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(8_367_000 as Weight)
			// Standard Error: 0
			.saturating_add((219_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(8_276_000 as Weight)
			// Standard Error: 0
			.saturating_add((222_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(8_272_000 as Weight)
			// Standard Error: 0
			.saturating_add((222_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(8_295_000 as Weight)
			// Standard Error: 0
			.saturating_add((220_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(8_239_000 as Weight)
			// Standard Error: 0
			.saturating_add((222_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(8_162_000 as Weight)
			// Standard Error: 0
			.saturating_add((228_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(8_194_000 as Weight)
			// Standard Error: 0
			.saturating_add((224_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(8_270_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((223_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(10_301_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((113_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(8_439_000 as Weight)
			// Standard Error: 0
			.saturating_add((168_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(8_280_000 as Weight)
			// Standard Error: 0
			.saturating_add((217_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(9_172_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((931_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(8_999_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((855_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(7_891_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_791_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(9_063_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((852_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(8_410_000 as Weight)
			// Standard Error: 0
			.saturating_add((169_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(8_380_000 as Weight)
			// Standard Error: 0
			.saturating_add((168_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(8_395_000 as Weight)
			// Standard Error: 0
			.saturating_add((168_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(8_381_000 as Weight)
			// Standard Error: 0
			.saturating_add((149_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(8_397_000 as Weight)
			// Standard Error: 0
			.saturating_add((151_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(8_394_000 as Weight)
			// Standard Error: 0
			.saturating_add((149_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(8_370_000 as Weight)
			// Standard Error: 0
			.saturating_add((152_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(8_374_000 as Weight)
			// Standard Error: 0
			.saturating_add((150_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn submit_code(c: u32, ) -> Weight {
		(120_924_000 as Weight)
			// Standard Error: 0
			.saturating_add((65_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn submit_program(c: u32, s: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 0
			.saturating_add((66_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((4_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn send_message(p: u32, ) -> Weight {
		(125_894_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn send_reply(p: u32, ) -> Weight {
		(134_365_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn initial_allocation(_q: u32, ) -> Weight {
		(292_984_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(24 as Weight))
			.saturating_add(RocksDbWeight::get().writes(16 as Weight))
	}
	fn alloc_in_handle(q: u32, ) -> Weight {
		(477_547_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((93_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(23 as Weight))
			.saturating_add(RocksDbWeight::get().writes(15 as Weight))
	}
	fn reinstrument(c: u32, ) -> Weight {
		(8_823_000 as Weight)
			// Standard Error: 0
			.saturating_add((67_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn alloc(r: u32, ) -> Weight {
		(6_414_971_000 as Weight)
			// Standard Error: 22_026_000
			.saturating_add((16_588_242_000 as Weight).saturating_mul(r as Weight))
	}
	fn gas(r: u32, ) -> Weight {
		(7_923_436_000 as Weight)
			// Standard Error: 1_091_000
			.saturating_add((102_206_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_gas_available(r: u32, ) -> Weight {
		(7_835_493_000 as Weight)
			// Standard Error: 499_000
			.saturating_add((107_361_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_msg_id(r: u32, ) -> Weight {
		(8_137_175_000 as Weight)
			// Standard Error: 1_851_000
			.saturating_add((120_534_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_origin(r: u32, ) -> Weight {
		(7_931_893_000 as Weight)
			// Standard Error: 431_000
			.saturating_add((134_653_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_program_id(r: u32, ) -> Weight {
		(7_999_541_000 as Weight)
			// Standard Error: 2_220_000
			.saturating_add((136_051_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_source(r: u32, ) -> Weight {
		(7_926_542_000 as Weight)
			// Standard Error: 860_000
			.saturating_add((136_609_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_value(r: u32, ) -> Weight {
		(7_969_550_000 as Weight)
			// Standard Error: 1_830_000
			.saturating_add((136_899_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_value_available(r: u32, ) -> Weight {
		(7_934_393_000 as Weight)
			// Standard Error: 406_000
			.saturating_add((134_334_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_size(r: u32, ) -> Weight {
		(7_850_110_000 as Weight)
			// Standard Error: 445_000
			.saturating_add((88_613_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_read(r: u32, ) -> Weight {
		(7_873_497_000 as Weight)
			// Standard Error: 423_000
			.saturating_add((144_790_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_read_per_kb(n: u32, ) -> Weight {
		(8_168_670_000 as Weight)
			// Standard Error: 262_000
			.saturating_add((29_889_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_block_height(r: u32, ) -> Weight {
		(8_029_205_000 as Weight)
			// Standard Error: 424_000
			.saturating_add((83_278_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_block_timestamp(r: u32, ) -> Weight {
		(7_865_051_000 as Weight)
			// Standard Error: 3_711_000
			.saturating_add((132_328_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_send_init(r: u32, ) -> Weight {
		(8_127_366_000 as Weight)
			// Standard Error: 535_000
			.saturating_add((166_345_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_send_push(r: u32, ) -> Weight {
		(8_135_054_000 as Weight)
			// Standard Error: 930_000
			.saturating_add((336_043_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_send_push_per_kb(n: u32, ) -> Weight {
		(8_510_227_000 as Weight)
			// Standard Error: 235_000
			.saturating_add((57_230_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_send_commit(r: u32, ) -> Weight {
		(8_133_580_000 as Weight)
			// Standard Error: 13_620_000
			.saturating_add((156_844_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(9 as Weight))
			.saturating_add(RocksDbWeight::get().reads((8 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes((7 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_send_commit_per_kb(n: u32, ) -> Weight {
		(8_374_305_000 as Weight)
			// Standard Error: 431_000
			.saturating_add((1_135_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(16 as Weight))
			.saturating_add(RocksDbWeight::get().writes(12 as Weight))
	}
	fn gr_reply_commit(r: u32, ) -> Weight {
		(8_269_520_000 as Weight)
			// Standard Error: 518_000
			.saturating_add((171_253_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	fn gr_reply_commit_per_kb(_n: u32, ) -> Weight {
		(8_746_297_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(13 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn gr_reply_push(r: u32, ) -> Weight {
		(8_087_285_000 as Weight)
			// Standard Error: 1_863_000
			.saturating_add((152_869_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_reply_push_per_kb(n: u32, ) -> Weight {
		(8_369_364_000 as Weight)
			// Standard Error: 513_000
			.saturating_add((59_371_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_reply_to(r: u32, ) -> Weight {
		(8_172_955_000 as Weight)
			// Standard Error: 363_000
			.saturating_add((7_975_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn gr_debug(r: u32, ) -> Weight {
		(8_170_370_000 as Weight)
			// Standard Error: 427_000
			.saturating_add((140_629_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn gr_exit_code(r: u32, ) -> Weight {
		(8_129_114_000 as Weight)
			// Standard Error: 988_000
			.saturating_add((14_891_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn gr_exit(r: u32, ) -> Weight {
		(8_163_377_000 as Weight)
			// Standard Error: 17_276_000
			.saturating_add((240_281_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().reads((6 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes((4 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_leave(r: u32, ) -> Weight {
		(8_185_150_000 as Weight)
			// Standard Error: 19_042_000
			.saturating_add((21_527_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn gr_wait(r: u32, ) -> Weight {
		(8_149_631_000 as Weight)
			// Standard Error: 18_039_000
			.saturating_add((34_230_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn gr_wake(r: u32, ) -> Weight {
		(7_552_091_000 as Weight)
			// Standard Error: 20_201_000
			.saturating_add((5_385_564_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().reads((201 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes((200 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_create_program_wgas(r: u32, ) -> Weight {
		(8_248_838_000 as Weight)
			// Standard Error: 14_366_000
			.saturating_add((131_905_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
		(8_362_745_000 as Weight)
			// Standard Error: 380_000
			.saturating_add((1_894_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	fn initial_cost() -> Weight {
		100_000_000 as Weight
	}
	fn allocation_cost() -> Weight {
		200_000_000 as Weight
	}
	fn grow_cost() -> Weight {
		200_000_000 as Weight
	}
	fn load_cost() -> Weight {
		20_000_000 as Weight
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(8_039_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(209_907_000 as Weight)
			// Standard Error: 366_000
			.saturating_add((60_584_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(334_551_000 as Weight)
			// Standard Error: 482_000
			.saturating_add((127_962_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(8_421_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((657_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(8_445_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((670_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(8_189_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((426_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(9_111_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((541_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(9_401_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_612_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(11_074_000 as Weight)
			// Standard Error: 0
			.saturating_add((15_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(6_052_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((814_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(15_288_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_656_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(11_282_000 as Weight)
			// Standard Error: 0
			.saturating_add((144_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(8_134_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((64_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(8_385_000 as Weight)
			// Standard Error: 0
			.saturating_add((118_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(8_449_000 as Weight)
			// Standard Error: 0
			.saturating_add((117_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(30_984_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((125_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(32_024_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((194_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(15_437_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_812_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(8_371_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((611_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(8_507_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((593_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(8_186_000 as Weight)
			// Standard Error: 0
			.saturating_add((112_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(8_308_000 as Weight)
			// Standard Error: 0
			.saturating_add((221_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(8_195_000 as Weight)
			// Standard Error: 0
			.saturating_add((75_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(8_127_000 as Weight)
			// Standard Error: 0
			.saturating_add((48_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(8_129_000 as Weight)
			// Standard Error: 0
			.saturating_add((48_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(8_232_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((226_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(8_283_000 as Weight)
			// Standard Error: 0
			.saturating_add((221_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(8_367_000 as Weight)
			// Standard Error: 0
			.saturating_add((219_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(8_276_000 as Weight)
			// Standard Error: 0
			.saturating_add((222_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(8_272_000 as Weight)
			// Standard Error: 0
			.saturating_add((222_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(8_295_000 as Weight)
			// Standard Error: 0
			.saturating_add((220_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(8_239_000 as Weight)
			// Standard Error: 0
			.saturating_add((222_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(8_162_000 as Weight)
			// Standard Error: 0
			.saturating_add((228_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(8_194_000 as Weight)
			// Standard Error: 0
			.saturating_add((224_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(8_270_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((223_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(10_301_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((113_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(8_439_000 as Weight)
			// Standard Error: 0
			.saturating_add((168_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(8_280_000 as Weight)
			// Standard Error: 0
			.saturating_add((217_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(9_172_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((931_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(8_999_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((855_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(7_891_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_791_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(9_063_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((852_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(8_410_000 as Weight)
			// Standard Error: 0
			.saturating_add((169_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(8_380_000 as Weight)
			// Standard Error: 0
			.saturating_add((168_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(8_395_000 as Weight)
			// Standard Error: 0
			.saturating_add((168_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(8_381_000 as Weight)
			// Standard Error: 0
			.saturating_add((149_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(8_397_000 as Weight)
			// Standard Error: 0
			.saturating_add((151_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(8_394_000 as Weight)
			// Standard Error: 0
			.saturating_add((149_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(8_370_000 as Weight)
			// Standard Error: 0
			.saturating_add((152_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(8_374_000 as Weight)
			// Standard Error: 0
			.saturating_add((150_000 as Weight).saturating_mul(r as Weight))
	}
}
