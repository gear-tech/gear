// This file is part of Gear.

// Copyright (C) 2022-2024 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-06-04, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=alloc,claim_value,create_program,db_read_per_kb,db_write_per_kb,free,free_range,free_range_per_page,gr_block_height,gr_block_timestamp,gr_create_program,gr_create_program_per_kb,gr_create_program_wgas,gr_create_program_wgas_per_kb,gr_debug,gr_debug_per_kb,gr_env_vars,gr_gas_available,gr_message_id,gr_program_id,gr_random,gr_read,gr_read_per_kb,gr_reply_code,gr_reply_deposit,gr_reply_per_kb,gr_reply_push,gr_reply_push_input,gr_reply_push_input_per_kb,gr_reply_push_per_kb,gr_reply_to,gr_reply_wgas_per_kb,gr_reservation_reply_commit_per_kb,gr_reservation_reply_per_kb,gr_reservation_send,gr_reservation_send_commit,gr_reservation_send_per_kb,gr_reserve_gas,gr_send,gr_send_commit,gr_send_commit_wgas,gr_send_init,gr_send_input,gr_send_input_wgas,gr_send_per_kb,gr_send_push,gr_send_push_input,gr_send_push_input_per_kb,gr_send_push_per_kb,gr_send_wgas,gr_send_wgas_per_kb,gr_signal_code,gr_signal_from,gr_size,gr_source,gr_system_reserve_gas,gr_unreserve_gas,gr_value,gr_value_available,gr_wake,instantiate_module_code_section_per_kb,instantiate_module_data_section_per_kb,instantiate_module_global_section_per_kb,instantiate_module_table_section_per_kb,instantiate_module_type_section_per_kb,instr_br,instr_br_if,instr_br_table,instr_br_table_per_entry,instr_call,instr_call_const,instr_call_indirect,instr_call_indirect_per_param,instr_call_per_local,instr_global_get,instr_global_set,instr_i32add,instr_i32and,instr_i32clz,instr_i32ctz,instr_i32divs,instr_i32divu,instr_i32eq,instr_i32eqz,instr_i32extend16s,instr_i32extend8s,instr_i32ges,instr_i32geu,instr_i32gts,instr_i32gtu,instr_i32les,instr_i32leu,instr_i32load,instr_i32lts,instr_i32ltu,instr_i32mul,instr_i32ne,instr_i32or,instr_i32popcnt,instr_i32rems,instr_i32remu,instr_i32rotl,instr_i32rotr,instr_i32shl,instr_i32shrs,instr_i32shru,instr_i32store,instr_i32sub,instr_i32wrapi64,instr_i32xor,instr_i64add,instr_i64and,instr_i64clz,instr_i64ctz,instr_i64divs,instr_i64divu,instr_i64eq,instr_i64eqz,instr_i64extend16s,instr_i64extend32s,instr_i64extend8s,instr_i64extendsi32,instr_i64extendui32,instr_i64ges,instr_i64geu,instr_i64gts,instr_i64gtu,instr_i64les,instr_i64leu,instr_i64load,instr_i64lts,instr_i64ltu,instr_i64mul,instr_i64ne,instr_i64or,instr_i64popcnt,instr_i64rems,instr_i64remu,instr_i64rotl,instr_i64rotr,instr_i64shl,instr_i64shrs,instr_i64shru,instr_i64store,instr_i64sub,instr_i64xor,instr_if,instr_local_get,instr_local_set,instr_local_tee,instr_memory_current,instr_select,lazy_pages_host_func_read,lazy_pages_host_func_write,lazy_pages_host_func_write_after_read,lazy_pages_load_page_storage_data,lazy_pages_signal_read,lazy_pages_signal_write,lazy_pages_signal_write_after_read,mem_grow,mem_grow_per_page,reinstrument_per_kb,send_message,send_reply,tasks_remove_from_mailbox,tasks_remove_from_waitlist,tasks_remove_gas_reservation,tasks_send_dispatch,tasks_send_user_message,tasks_send_user_message_to_mailbox,tasks_wake_message,tasks_wake_message_no_wake,upload_code,upload_program --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_code_section_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_data_section_per_kb(d: u32, ) -> Weight;
    fn instantiate_module_global_section_per_kb(g: u32, ) -> Weight;
    fn instantiate_module_table_section_per_kb(t: u32, ) -> Weight;
    fn instantiate_module_element_section_per_kb(e: u32, ) -> Weight;
    fn instantiate_module_type_section_per_kb(t: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn claim_value_to_inheritor(d: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn load_allocations_per_interval(a: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn mem_grow_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn free_range(r: u32, ) -> Weight;
    fn free_range_per_page(p: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_env_vars(r: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn tasks_remove_gas_reservation() -> Weight;
    fn tasks_send_user_message_to_mailbox() -> Weight;
    fn tasks_send_user_message() -> Weight;
    fn tasks_send_dispatch() -> Weight;
    fn tasks_wake_message() -> Weight;
    fn tasks_wake_message_no_wake() -> Weight;
    fn tasks_remove_from_waitlist() -> Weight;
    fn tasks_remove_from_mailbox() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 58_827_000 picoseconds.
        Weight::from_parts(61_020_514, 0)
            // Standard Error: 30_183
            .saturating_add(Weight::from_parts(21_457_412, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 59_153_000 picoseconds.
        Weight::from_parts(61_570_016, 0)
            // Standard Error: 31_234
            .saturating_add(Weight::from_parts(20_948_196, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 58_996_000 picoseconds.
        Weight::from_parts(61_204_042, 0)
            // Standard Error: 28_310
            .saturating_add(Weight::from_parts(20_275_066, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 58_839_000 picoseconds.
        Weight::from_parts(61_270_490, 0)
            // Standard Error: 29_097
            .saturating_add(Weight::from_parts(20_158_062, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 674_493_000 picoseconds.
        Weight::from_parts(676_531_348, 0)
            // Standard Error: 36_129
            .saturating_add(Weight::from_parts(19_389_162, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 674_131_000 picoseconds.
        Weight::from_parts(676_524_070, 0)
            // Standard Error: 36_930
            .saturating_add(Weight::from_parts(24_915_830, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 71_003_000 picoseconds.
        Weight::from_parts(73_890_102, 0)
            // Standard Error: 29_231
            .saturating_add(Weight::from_parts(7_839_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 71_625_000 picoseconds.
        Weight::from_parts(74_015_746, 0)
            // Standard Error: 28_894
            .saturating_add(Weight::from_parts(6_918_144, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 58_666_000 picoseconds.
        Weight::from_parts(60_945_076, 0)
            // Standard Error: 33_393
            .saturating_add(Weight::from_parts(23_384_948, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 59_263_000 picoseconds.
        Weight::from_parts(61_548_284, 0)
            // Standard Error: 32_083
            .saturating_add(Weight::from_parts(12_007_632, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 59_588_000 picoseconds.
        Weight::from_parts(61_778_726, 0)
            // Standard Error: 31_381
            .saturating_add(Weight::from_parts(10_988_944, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 58_586_000 picoseconds.
        Weight::from_parts(61_400_256, 0)
            // Standard Error: 31_003
            .saturating_add(Weight::from_parts(11_474_984, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 59_130_000 picoseconds.
        Weight::from_parts(61_405_294, 0)
            // Standard Error: 32_031
            .saturating_add(Weight::from_parts(11_597_666, 0).saturating_mul(r.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 991_000 picoseconds.
        Weight::from_parts(1_051_000, 0)
            // Standard Error: 471
            .saturating_add(Weight::from_parts(243_048, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_251_000 picoseconds.
        Weight::from_parts(3_368_000, 3610)
            // Standard Error: 1_099
            .saturating_add(Weight::from_parts(598_985, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_code_section_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 35_348_000 picoseconds.
        Weight::from_parts(36_683_968, 0)
            // Standard Error: 1_863
            .saturating_add(Weight::from_parts(196_755, 0).saturating_mul(c.into()))
    }
    /// The range of component `d` is `[0, 512]`.
    fn instantiate_module_data_section_per_kb(d: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_447_000 picoseconds.
        Weight::from_parts(53_083_381, 0)
            // Standard Error: 1_569
            .saturating_add(Weight::from_parts(463_249, 0).saturating_mul(d.into()))
    }
    /// The range of component `g` is `[0, 512]`.
    fn instantiate_module_global_section_per_kb(g: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 34_544_000 picoseconds.
        Weight::from_parts(27_323_050, 0)
            // Standard Error: 1_895
            .saturating_add(Weight::from_parts(2_416_290, 0).saturating_mul(g.into()))
    }
    /// The range of component `t` is `[0, 9765]`.
    fn instantiate_module_table_section_per_kb(t: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 34_160_000 picoseconds.
        Weight::from_parts(34_614_000, 0)
            // Standard Error: 2_123
            .saturating_add(Weight::from_parts(359_300, 0).saturating_mul(t.into()))
    }
    /// The range of component `t` is `[0, 512]`.
    fn instantiate_module_element_section_per_kb(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 36_788_000 picoseconds.
        Weight::from_parts(38_141_151, 0)
            // Standard Error: 3_777
            .saturating_add(Weight::from_parts(18_936_755, 0).saturating_mul(e.into()))
    }
    /// The range of component `t` is `[0, 512]`.
    fn instantiate_module_type_section_per_kb(t: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 34_697_000 picoseconds.
        Weight::from_parts(36_274_820, 0)
            // Standard Error: 1_864
            .saturating_add(Weight::from_parts(260_172, 0).saturating_mul(t.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1321`
        //  Estimated: `8799`
        // Minimum execution time: 127_842_000 picoseconds.
        Weight::from_parts(129_744_000, 8799)
            .saturating_add(T::DbWeight::get().reads(17_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `3578`
        // Minimum execution time: 91_056_000 picoseconds.
        Weight::from_parts(75_482_370, 3578)
            // Standard Error: 42_175
            .saturating_add(Weight::from_parts(61_763_926, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `991`
        //  Estimated: `4456`
        // Minimum execution time: 107_748_000 picoseconds.
        Weight::from_parts(134_740_079, 4456)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(1_704, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `379`
        //  Estimated: `3844`
        // Minimum execution time: 7_358_280_000 picoseconds.
        Weight::from_parts(412_535_550, 3844)
            // Standard Error: 103_792
            .saturating_add(Weight::from_parts(62_072_527, 0).saturating_mul(c.into()))
            // Standard Error: 6
            .saturating_add(Weight::from_parts(1_636, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `480`
        //  Estimated: `6196`
        // Minimum execution time: 95_735_000 picoseconds.
        Weight::from_parts(6_957_254, 6196)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(995, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1320`
        //  Estimated: `8799`
        // Minimum execution time: 156_312_000 picoseconds.
        Weight::from_parts(72_298_958, 8799)
            // Standard Error: 4
            .saturating_add(Weight::from_parts(1_018, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(18_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `d` is `[1, 1024]`.
    fn claim_value_to_inheritor(d: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + d * (207 ±0)`
        //  Estimated: `3593 + d * (2683 ±0)`
        // Minimum execution time: 62_000_000 picoseconds.
        Weight::from_parts(63_000_000, 3593)
            // Standard Error: 24_979
            .saturating_add(Weight::from_parts(50_498_014, 0).saturating_mul(d.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(d.into())))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(d.into())))
            .saturating_add(Weight::from_parts(0, 2683).saturating_mul(d.into()))
    }
    /// The range of component `e` is `[0, 512]`.
    fn reinstrument_per_kb(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `327 + e * (1024 ±0)`
        //  Estimated: `3791 + e * (1024 ±0)`
        // Minimum execution time: 78_478_000 picoseconds.
        Weight::from_parts(60_084_454, 3791)
            // Standard Error: 214_025
            .saturating_add(Weight::from_parts(638_778_276, 0).saturating_mul(e.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(e.into()))
    }
    /// The range of component `a` is `[0, 32767]`.
    fn load_allocations_per_interval(a: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101 + a * (8 ±0)`
        //  Estimated: `3566 + a * (8 ±0)`
        // Minimum execution time: 3_000_000 picoseconds.
        Weight::from_parts(15_735_686, 3566)
            // Standard Error: 47
            .saturating_add(Weight::from_parts(19_766, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 8).saturating_mul(a.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 740_740_000 picoseconds.
        Weight::from_parts(653_250_042, 0)
            // Standard Error: 218_399
            .saturating_add(Weight::from_parts(121_659_232, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_119_000 picoseconds.
        Weight::from_parts(7_435_356, 0)
            // Standard Error: 84_763
            .saturating_add(Weight::from_parts(64_827_518, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 819]`.
    fn mem_grow_per_page(_p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 69_165_000 picoseconds.
        Weight::from_parts(74_601_757, 0)
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 778_464_000 picoseconds.
        Weight::from_parts(744_321_591, 0)
            // Standard Error: 213_175
            .saturating_add(Weight::from_parts(67_584_978, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 707_145_000 picoseconds.
        Weight::from_parts(682_585_812, 0)
            // Standard Error: 225_717
            .saturating_add(Weight::from_parts(69_939_771, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 700]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 718_223_000 picoseconds.
        Weight::from_parts(808_127_136, 0)
            // Standard Error: 5_697
            .saturating_add(Weight::from_parts(2_994_128, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_079_000 picoseconds.
        Weight::from_parts(72_222_087, 0)
            // Standard Error: 3_384
            .saturating_add(Weight::from_parts(2_084_430, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_759_000 picoseconds.
        Weight::from_parts(112_129_712, 0)
            // Standard Error: 3_037
            .saturating_add(Weight::from_parts(1_940_658, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 60_825_000 picoseconds.
        Weight::from_parts(79_790_595, 0)
            // Standard Error: 56_060
            .saturating_add(Weight::from_parts(80_575_460, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_011_000 picoseconds.
        Weight::from_parts(68_503_669, 0)
            // Standard Error: 263_717
            .saturating_add(Weight::from_parts(74_518_443, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_817_000 picoseconds.
        Weight::from_parts(74_374_662, 0)
            // Standard Error: 48_101
            .saturating_add(Weight::from_parts(71_922_470, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_953_000 picoseconds.
        Weight::from_parts(78_740_202, 0)
            // Standard Error: 147_900
            .saturating_add(Weight::from_parts(72_436_902, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_454_000 picoseconds.
        Weight::from_parts(71_060_167, 0)
            // Standard Error: 208_526
            .saturating_add(Weight::from_parts(73_618_160, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_142_000 picoseconds.
        Weight::from_parts(77_134_039, 0)
            // Standard Error: 46_326
            .saturating_add(Weight::from_parts(79_256_911, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_697_000 picoseconds.
        Weight::from_parts(71_280_142, 0)
            // Standard Error: 83_514
            .saturating_add(Weight::from_parts(79_475_915, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_067_000 picoseconds.
        Weight::from_parts(85_305_702, 0)
            // Standard Error: 185_168
            .saturating_add(Weight::from_parts(71_159_305, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 683_843_000 picoseconds.
        Weight::from_parts(723_565_299, 0)
            // Standard Error: 216_184
            .saturating_add(Weight::from_parts(128_743_735, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 793_998_000 picoseconds.
        Weight::from_parts(798_332_000, 0)
            // Standard Error: 117_291
            .saturating_add(Weight::from_parts(16_544_234, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_769_000 picoseconds.
        Weight::from_parts(76_526_063, 0)
            // Standard Error: 287_959
            .saturating_add(Weight::from_parts(82_604_811, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_123_000 picoseconds.
        Weight::from_parts(71_215_182, 0)
            // Standard Error: 159_092
            .saturating_add(Weight::from_parts(72_199_413, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_554_000 picoseconds.
        Weight::from_parts(74_432_437, 0)
            // Standard Error: 47_489
            .saturating_add(Weight::from_parts(71_782_100, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_209_000 picoseconds.
        Weight::from_parts(81_020_535, 0)
            // Standard Error: 149_522
            .saturating_add(Weight::from_parts(145_223_647, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_784_000 picoseconds.
        Weight::from_parts(65_869_000, 0)
            // Standard Error: 3_904_257
            .saturating_add(Weight::from_parts(731_805_655, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_615_000 picoseconds.
        Weight::from_parts(74_722_045, 0)
            // Standard Error: 194_666
            .saturating_add(Weight::from_parts(235_908_247, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 289_189_000 picoseconds.
        Weight::from_parts(291_035_000, 0)
            // Standard Error: 260_141
            .saturating_add(Weight::from_parts(41_136_292, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_793_000 picoseconds.
        Weight::from_parts(72_323_411, 0)
            // Standard Error: 151_034
            .saturating_add(Weight::from_parts(238_825_023, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 293_375_000 picoseconds.
        Weight::from_parts(295_304_000, 0)
            // Standard Error: 258_605
            .saturating_add(Weight::from_parts(41_049_469, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 684_816_000 picoseconds.
        Weight::from_parts(701_630_081, 0)
            // Standard Error: 185_993
            .saturating_add(Weight::from_parts(226_793_863, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 678_218_000 picoseconds.
        Weight::from_parts(708_679_759, 0)
            // Standard Error: 212_978
            .saturating_add(Weight::from_parts(229_380_293, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_118_000 picoseconds.
        Weight::from_parts(74_356_887, 0)
            // Standard Error: 58_295
            .saturating_add(Weight::from_parts(87_860_909, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_761_957_000 picoseconds.
        Weight::from_parts(1_822_477_976, 0)
            // Standard Error: 151_720
            .saturating_add(Weight::from_parts(161_756_949, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 277_173_000 picoseconds.
        Weight::from_parts(280_451_000, 0)
            // Standard Error: 260_571
            .saturating_add(Weight::from_parts(41_229_651, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_687_233_000 picoseconds.
        Weight::from_parts(1_827_139_879, 0)
            // Standard Error: 162_247
            .saturating_add(Weight::from_parts(196_316_284, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_711_334_000 picoseconds.
        Weight::from_parts(1_826_428_398, 0)
            // Standard Error: 169_581
            .saturating_add(Weight::from_parts(199_470_392, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 140_830_000 picoseconds.
        Weight::from_parts(146_818_158, 0)
            // Standard Error: 178_439
            .saturating_add(Weight::from_parts(252_911_483, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 379_307_000 picoseconds.
        Weight::from_parts(380_217_000, 0)
            // Standard Error: 257_875
            .saturating_add(Weight::from_parts(41_211_921, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_819_540_000 picoseconds.
        Weight::from_parts(1_895_407_753, 0)
            // Standard Error: 181_488
            .saturating_add(Weight::from_parts(212_948_376, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_427_000 picoseconds.
        Weight::from_parts(82_330_000, 0)
            // Standard Error: 2_611
            .saturating_add(Weight::from_parts(673_738, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_933_000 picoseconds.
        Weight::from_parts(82_389_000, 0)
            // Standard Error: 2_640
            .saturating_add(Weight::from_parts(675_302, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_416_000 picoseconds.
        Weight::from_parts(68_318_482, 0)
            // Standard Error: 367_827
            .saturating_add(Weight::from_parts(138_926_133, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 77_420_000 picoseconds.
        Weight::from_parts(80_735_790, 0)
            // Standard Error: 716
            .saturating_add(Weight::from_parts(672_255, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_886_000 picoseconds.
        Weight::from_parts(80_388_000, 0)
            // Standard Error: 2_607
            .saturating_add(Weight::from_parts(675_230, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_347_000 picoseconds.
        Weight::from_parts(82_111_000, 0)
            // Standard Error: 2_668
            .saturating_add(Weight::from_parts(673_330, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_347_000 picoseconds.
        Weight::from_parts(74_512_490, 0)
            // Standard Error: 178_897
            .saturating_add(Weight::from_parts(73_965_812, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 66_450_000 picoseconds.
        Weight::from_parts(88_801_264, 0)
            // Standard Error: 182_723
            .saturating_add(Weight::from_parts(71_400_426, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 66_514_000 picoseconds.
        Weight::from_parts(70_789_962, 0)
            // Standard Error: 265_186
            .saturating_add(Weight::from_parts(74_669_206, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 681_082_000 picoseconds.
        Weight::from_parts(700_871_534, 0)
            // Standard Error: 300_662
            .saturating_add(Weight::from_parts(93_383_929, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 691_414_000 picoseconds.
        Weight::from_parts(699_656_877, 0)
            // Standard Error: 321
            .saturating_add(Weight::from_parts(146_829, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_103_000 picoseconds.
        Weight::from_parts(2_430_329_059, 0)
            // Standard Error: 272_111
            .saturating_add(Weight::from_parts(116_238_106, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_542_554_000 picoseconds.
        Weight::from_parts(2_299_595_154, 0)
            // Standard Error: 6_667
            .saturating_add(Weight::from_parts(13_426_168, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_942_000 picoseconds.
        Weight::from_parts(71_222_257, 0)
            // Standard Error: 282_548
            .saturating_add(Weight::from_parts(96_974_311, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 127_348_000 picoseconds.
        Weight::from_parts(128_826_000, 0)
            // Standard Error: 275_805
            .saturating_add(Weight::from_parts(36_847_588, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_312_000 picoseconds.
        Weight::from_parts(76_973_512, 0)
            // Standard Error: 267_579
            .saturating_add(Weight::from_parts(73_865_785, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_983_000 picoseconds.
        Weight::from_parts(101_079_000, 0)
            // Standard Error: 1_785_219
            .saturating_add(Weight::from_parts(298_212_769, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 72_754_000 picoseconds.
        Weight::from_parts(66_952_440, 0)
            // Standard Error: 211_231
            .saturating_add(Weight::from_parts(299_662_143, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_516_220_000 picoseconds.
        Weight::from_parts(62_529_111_000, 0)
            // Standard Error: 442_882
            .saturating_add(Weight::from_parts(9_722_855, 0).saturating_mul(p.into()))
            // Standard Error: 442_860
            .saturating_add(Weight::from_parts(115_654_491, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 72_855_000 picoseconds.
        Weight::from_parts(64_239_384, 0)
            // Standard Error: 180_241
            .saturating_add(Weight::from_parts(302_970_508, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_660_773_000 picoseconds.
        Weight::from_parts(62_745_638_000, 0)
            // Standard Error: 440_013
            .saturating_add(Weight::from_parts(9_690_878, 0).saturating_mul(p.into()))
            // Standard Error: 439_991
            .saturating_add(Weight::from_parts(115_839_080, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 64_426_000 picoseconds.
        Weight::from_parts(94_830_600, 1131)
            // Standard Error: 5_927
            .saturating_add(Weight::from_parts(13_542_530, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 63_843_000 picoseconds.
        Weight::from_parts(64_633_000, 1131)
            // Standard Error: 16_915
            .saturating_add(Weight::from_parts(34_986_519, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_989_689_000 picoseconds.
        Weight::from_parts(6_944_641_877, 5069931)
            // Standard Error: 22_716
            .saturating_add(Weight::from_parts(34_655_231, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1820 + p * (65580 ±0)`
        //  Estimated: `1946 + p * (75482 ±0)`
        // Minimum execution time: 63_290_000 picoseconds.
        Weight::from_parts(64_778_000, 1946)
            // Standard Error: 64_743
            .saturating_add(Weight::from_parts(56_066_142, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 67_053_000 picoseconds.
        Weight::from_parts(2_058_229, 1131)
            // Standard Error: 271_877
            .saturating_add(Weight::from_parts(54_230_656, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 712_903_000 picoseconds.
        Weight::from_parts(603_237_610, 1496)
            // Standard Error: 357_309
            .saturating_add(Weight::from_parts(63_168_097, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_334_949_000 picoseconds.
        Weight::from_parts(1_233_350_508, 317931)
            // Standard Error: 363_291
            .saturating_add(Weight::from_parts(58_133_894, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_550_066_000 picoseconds.
        Weight::from_parts(4_734_780_905, 0)
            // Standard Error: 33_164
            .saturating_add(Weight::from_parts(1_414_229 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_237_338_000 picoseconds.
        Weight::from_parts(4_278_916_633, 0)
            // Standard Error: 10_367
            .saturating_add(Weight::from_parts(2_204_826 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_462_837_000 picoseconds.
        Weight::from_parts(8_633_141_052, 0)
            // Standard Error: 103_305
            .saturating_add(Weight::from_parts(8_363_979 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_402_210_000 picoseconds.
        Weight::from_parts(8_456_542_985, 0)
            // Standard Error: 81_438
            .saturating_add(Weight::from_parts(8_402_293 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_107_000 picoseconds.
        Weight::from_parts(310_058, 0)
            // Standard Error: 2_437
            .saturating_add(Weight::from_parts(1_992_632 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_179_000 picoseconds.
        Weight::from_parts(670_203, 0)
            // Standard Error: 2_916
            .saturating_add(Weight::from_parts(1_930_908 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_108_000 picoseconds.
        Weight::from_parts(1_167_000, 0)
            // Standard Error: 1_627
            .saturating_add(Weight::from_parts(1_542_130 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_101_000 picoseconds.
        Weight::from_parts(387_051, 0)
            // Standard Error: 2_939
            .saturating_add(Weight::from_parts(1_789_477 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_071_000 picoseconds.
        Weight::from_parts(1_264_212, 0)
            // Standard Error: 2_598
            .saturating_add(Weight::from_parts(3_415_339 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_663_000 picoseconds.
        Weight::from_parts(4_037_704, 0)
            // Standard Error: 596
            .saturating_add(Weight::from_parts(42_663 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_151_000 picoseconds.
        Weight::from_parts(1_125_724, 0)
            // Standard Error: 5_890
            .saturating_add(Weight::from_parts(2_449_200 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts((2_449_200 -
            2_310_323) * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_114_000 picoseconds.
        Weight::from_parts(645_468, 0)
            // Standard Error: 11_843
            .saturating_add(Weight::from_parts(2_310_323 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_220_000 picoseconds.
        Weight::from_parts(1_464_642, 0)
            // Standard Error: 10_969
            .saturating_add(Weight::from_parts(7_400_628 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_666_000 picoseconds.
        Weight::from_parts(3_692_740, 0)
            // Standard Error: 2_612
            .saturating_add(Weight::from_parts(490_880 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_453_000 picoseconds.
        Weight::from_parts(2_672_317, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_602_000 picoseconds.
        Weight::from_parts(6_688_896, 0)
            // Standard Error: 3_400
            .saturating_add(Weight::from_parts(356_031 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_584_000 picoseconds.
        Weight::from_parts(7_272_206, 0)
            // Standard Error: 3_857
            .saturating_add(Weight::from_parts(737_122 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_547_000 picoseconds.
        Weight::from_parts(8_406_173, 0)
            // Standard Error: 4_393
            .saturating_add(Weight::from_parts(700_704 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_779_000 picoseconds.
        Weight::from_parts(4_358_940, 0)
            // Standard Error: 3_030
            .saturating_add(Weight::from_parts(353_939 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_794_000 picoseconds.
        Weight::from_parts(4_564_948, 0)
            // Standard Error: 2_940
            .saturating_add(Weight::from_parts(539_450 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_548_000 picoseconds.
        Weight::from_parts(4_717_005, 0)
            // Standard Error: 4_665
            .saturating_add(Weight::from_parts(5_547_761 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_064_000 picoseconds.
        Weight::from_parts(410_766, 0)
            // Standard Error: 3_452
            .saturating_add(Weight::from_parts(2_021_854 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_123_000 picoseconds.
        Weight::from_parts(468_123, 0)
            // Standard Error: 3_586
            .saturating_add(Weight::from_parts(1_956_633 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_174_000 picoseconds.
        Weight::from_parts(233_592, 0)
            // Standard Error: 2_814
            .saturating_add(Weight::from_parts(1_939_744 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_126_000 picoseconds.
        Weight::from_parts(161_858, 0)
            // Standard Error: 2_763
            .saturating_add(Weight::from_parts(1_872_412 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_051_000 picoseconds.
        Weight::from_parts(970_769, 0)
            // Standard Error: 1_487
            .saturating_add(Weight::from_parts(331_209 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_085_000 picoseconds.
        Weight::from_parts(940_022, 0)
            // Standard Error: 2_635
            .saturating_add(Weight::from_parts(264_051 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_117_000 picoseconds.
        Weight::from_parts(622_887, 0)
            // Standard Error: 4_781
            .saturating_add(Weight::from_parts(736_921 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_138_000 picoseconds.
        Weight::from_parts(767_930, 0)
            // Standard Error: 1_870
            .saturating_add(Weight::from_parts(512_872 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_089_000 picoseconds.
        Weight::from_parts(804_044, 0)
            // Standard Error: 2_549
            .saturating_add(Weight::from_parts(277_747 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_122_000 picoseconds.
        Weight::from_parts(1_162_948, 0)
            // Standard Error: 1_228
            .saturating_add(Weight::from_parts(242_966 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_116_000 picoseconds.
        Weight::from_parts(1_298_716, 0)
            // Standard Error: 2_781
            .saturating_add(Weight::from_parts(311_638 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_095_000 picoseconds.
        Weight::from_parts(1_529_854, 0)
            // Standard Error: 2_716
            .saturating_add(Weight::from_parts(303_947 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_130_000 picoseconds.
        Weight::from_parts(1_166_717, 0)
            // Standard Error: 1_413
            .saturating_add(Weight::from_parts(287_342 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_165_000 picoseconds.
        Weight::from_parts(891_706, 0)
            // Standard Error: 2_465
            .saturating_add(Weight::from_parts(249_410 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_125_000 picoseconds.
        Weight::from_parts(1_399_184, 0)
            // Standard Error: 1_248
            .saturating_add(Weight::from_parts(141_084 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_138_000 picoseconds.
        Weight::from_parts(1_505_788, 0)
            // Standard Error: 862
            .saturating_add(Weight::from_parts(133_725 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_112_000 picoseconds.
        Weight::from_parts(1_214_179, 0)
            // Standard Error: 4_666
            .saturating_add(Weight::from_parts(720_432 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_108_000 picoseconds.
        Weight::from_parts(1_273_454, 0)
            // Standard Error: 4_433
            .saturating_add(Weight::from_parts(532_996 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_131_000 picoseconds.
        Weight::from_parts(606_887, 0)
            // Standard Error: 4_030
            .saturating_add(Weight::from_parts(740_699 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_073_000 picoseconds.
        Weight::from_parts(652_962, 0)
            // Standard Error: 2_826
            .saturating_add(Weight::from_parts(545_710 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_105_000 picoseconds.
        Weight::from_parts(505_518, 0)
            // Standard Error: 3_790
            .saturating_add(Weight::from_parts(746_533 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_107_000 picoseconds.
        Weight::from_parts(912_665, 0)
            // Standard Error: 3_811
            .saturating_add(Weight::from_parts(534_806 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_119_000 picoseconds.
        Weight::from_parts(741_736, 0)
            // Standard Error: 3_635
            .saturating_add(Weight::from_parts(741_879 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_129_000 picoseconds.
        Weight::from_parts(748_486, 0)
            // Standard Error: 4_137
            .saturating_add(Weight::from_parts(534_778 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_077_000 picoseconds.
        Weight::from_parts(1_098_504, 0)
            // Standard Error: 4_305
            .saturating_add(Weight::from_parts(727_854 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_114_000 picoseconds.
        Weight::from_parts(1_122_798, 0)
            // Standard Error: 1_840
            .saturating_add(Weight::from_parts(505_466 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_141_000 picoseconds.
        Weight::from_parts(1_415_320, 0)
            // Standard Error: 4_769
            .saturating_add(Weight::from_parts(721_643 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_098_000 picoseconds.
        Weight::from_parts(1_353_387, 0)
            // Standard Error: 2_800
            .saturating_add(Weight::from_parts(508_195 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_149_000 picoseconds.
        Weight::from_parts(1_110_037, 0)
            // Standard Error: 4_337
            .saturating_add(Weight::from_parts(722_241 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_102_000 picoseconds.
        Weight::from_parts(772_878, 0)
            // Standard Error: 3_726
            .saturating_add(Weight::from_parts(557_525 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_117_000 picoseconds.
        Weight::from_parts(483_272, 0)
            // Standard Error: 4_088
            .saturating_add(Weight::from_parts(748_806 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_083_000 picoseconds.
        Weight::from_parts(1_474_751, 0)
            // Standard Error: 3_387
            .saturating_add(Weight::from_parts(508_996 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_164_000 picoseconds.
        Weight::from_parts(1_056_323, 0)
            // Standard Error: 4_486
            .saturating_add(Weight::from_parts(743_520 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_145_000 picoseconds.
        Weight::from_parts(1_314_789, 0)
            // Standard Error: 1_726
            .saturating_add(Weight::from_parts(498_625 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_121_000 picoseconds.
        Weight::from_parts(1_204_844, 0)
            // Standard Error: 5_170
            .saturating_add(Weight::from_parts(734_780 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_125_000 picoseconds.
        Weight::from_parts(902_365, 0)
            // Standard Error: 2_953
            .saturating_add(Weight::from_parts(541_622 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_130_000 picoseconds.
        Weight::from_parts(1_262_188, 0)
            // Standard Error: 2_027
            .saturating_add(Weight::from_parts(545_118 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_166_000 picoseconds.
        Weight::from_parts(1_184_873, 0)
            // Standard Error: 1_758
            .saturating_add(Weight::from_parts(354_905 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_113_000 picoseconds.
        Weight::from_parts(1_920_304, 0)
            // Standard Error: 4_397
            .saturating_add(Weight::from_parts(543_294 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_066_000 picoseconds.
        Weight::from_parts(954_875, 0)
            // Standard Error: 2_835
            .saturating_add(Weight::from_parts(354_448 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_143_000 picoseconds.
        Weight::from_parts(802_477, 0)
            // Standard Error: 4_347
            .saturating_add(Weight::from_parts(683_732 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_092_000 picoseconds.
        Weight::from_parts(787_353, 0)
            // Standard Error: 3_985
            .saturating_add(Weight::from_parts(522_097 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_115_000 picoseconds.
        Weight::from_parts(1_243_884, 0)
            // Standard Error: 2_490
            .saturating_add(Weight::from_parts(1_495_765 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_095_000 picoseconds.
        Weight::from_parts(504_698, 0)
            // Standard Error: 3_551
            .saturating_add(Weight::from_parts(1_142_343 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_094_000 picoseconds.
        Weight::from_parts(883_449, 0)
            // Standard Error: 2_784
            .saturating_add(Weight::from_parts(1_546_236 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_100_000 picoseconds.
        Weight::from_parts(817_447, 0)
            // Standard Error: 4_504
            .saturating_add(Weight::from_parts(1_106_059 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_092_000 picoseconds.
        Weight::from_parts(1_145_000, 0)
            // Standard Error: 29_822
            .saturating_add(Weight::from_parts(4_651_461 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_106_000 picoseconds.
        Weight::from_parts(1_135_000, 0)
            // Standard Error: 30_763
            .saturating_add(Weight::from_parts(3_323_346 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_106_000 picoseconds.
        Weight::from_parts(1_369_161, 0)
            // Standard Error: 3_106
            .saturating_add(Weight::from_parts(1_528_954 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_081_000 picoseconds.
        Weight::from_parts(928_623, 0)
            // Standard Error: 4_983
            .saturating_add(Weight::from_parts(1_093_720 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_076_000 picoseconds.
        Weight::from_parts(921_033, 0)
            // Standard Error: 4_447
            .saturating_add(Weight::from_parts(558_293 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_122_000 picoseconds.
        Weight::from_parts(1_571_241, 0)
            // Standard Error: 1_336
            .saturating_add(Weight::from_parts(313_419 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_139_000 picoseconds.
        Weight::from_parts(1_430_760, 0)
            // Standard Error: 3_950
            .saturating_add(Weight::from_parts(525_019 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_113_000 picoseconds.
        Weight::from_parts(1_533_556, 0)
            // Standard Error: 2_902
            .saturating_add(Weight::from_parts(330_155 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_085_000 picoseconds.
        Weight::from_parts(1_008_523, 0)
            // Standard Error: 3_975
            .saturating_add(Weight::from_parts(541_732 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_102_000 picoseconds.
        Weight::from_parts(1_249_074, 0)
            // Standard Error: 2_832
            .saturating_add(Weight::from_parts(335_476 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_128_000 picoseconds.
        Weight::from_parts(1_127_905, 0)
            // Standard Error: 3_725
            .saturating_add(Weight::from_parts(491_963 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_065_000 picoseconds.
        Weight::from_parts(1_556_117, 0)
            // Standard Error: 1_160
            .saturating_add(Weight::from_parts(293_739 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_061_000 picoseconds.
        Weight::from_parts(1_223_969, 0)
            // Standard Error: 2_213
            .saturating_add(Weight::from_parts(471_266 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_107_000 picoseconds.
        Weight::from_parts(1_311_929, 0)
            // Standard Error: 3_691
            .saturating_add(Weight::from_parts(331_159 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_148_000 picoseconds.
        Weight::from_parts(1_006_469, 0)
            // Standard Error: 1_885
            .saturating_add(Weight::from_parts(475_187 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_131_000 picoseconds.
        Weight::from_parts(1_702_645, 0)
            // Standard Error: 2_508
            .saturating_add(Weight::from_parts(299_600 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_165_000 picoseconds.
        Weight::from_parts(726_005, 0)
            // Standard Error: 3_603
            .saturating_add(Weight::from_parts(497_056 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_104_000 picoseconds.
        Weight::from_parts(1_441_366, 0)
            // Standard Error: 1_572
            .saturating_add(Weight::from_parts(303_529 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_140_000 picoseconds.
        Weight::from_parts(1_732_474, 0)
            // Standard Error: 3_245
            .saturating_add(Weight::from_parts(457_613 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_117_000 picoseconds.
        Weight::from_parts(966_620, 0)
            // Standard Error: 2_857
            .saturating_add(Weight::from_parts(335_047 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1164`
        //  Estimated: `6196`
        // Minimum execution time: 75_485_000 picoseconds.
        Weight::from_parts(76_731_000, 6196)
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `858`
        //  Estimated: `4323`
        // Minimum execution time: 41_658_000 picoseconds.
        Weight::from_parts(42_239_000, 4323)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1079`
        //  Estimated: `6196`
        // Minimum execution time: 84_821_000 picoseconds.
        Weight::from_parts(86_439_000, 6196)
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `694`
        //  Estimated: `4159`
        // Minimum execution time: 29_130_000 picoseconds.
        Weight::from_parts(29_681_000, 4159)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `937`
        //  Estimated: `4402`
        // Minimum execution time: 41_459_000 picoseconds.
        Weight::from_parts(42_424_000, 4402)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 4_410_000 picoseconds.
        Weight::from_parts(4_668_000, 3545)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1635`
        //  Estimated: `7575`
        // Minimum execution time: 116_824_000 picoseconds.
        Weight::from_parts(117_581_000, 7575)
            .saturating_add(T::DbWeight::get().reads(18_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1364`
        //  Estimated: `7304`
        // Minimum execution time: 97_425_000 picoseconds.
        Weight::from_parts(98_374_000, 7304)
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 58_827_000 picoseconds.
        Weight::from_parts(61_020_514, 0)
            // Standard Error: 30_183
            .saturating_add(Weight::from_parts(21_457_412, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 59_153_000 picoseconds.
        Weight::from_parts(61_570_016, 0)
            // Standard Error: 31_234
            .saturating_add(Weight::from_parts(20_948_196, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 58_996_000 picoseconds.
        Weight::from_parts(61_204_042, 0)
            // Standard Error: 28_310
            .saturating_add(Weight::from_parts(20_275_066, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 58_839_000 picoseconds.
        Weight::from_parts(61_270_490, 0)
            // Standard Error: 29_097
            .saturating_add(Weight::from_parts(20_158_062, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 674_493_000 picoseconds.
        Weight::from_parts(676_531_348, 0)
            // Standard Error: 36_129
            .saturating_add(Weight::from_parts(19_389_162, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 674_131_000 picoseconds.
        Weight::from_parts(676_524_070, 0)
            // Standard Error: 36_930
            .saturating_add(Weight::from_parts(24_915_830, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 71_003_000 picoseconds.
        Weight::from_parts(73_890_102, 0)
            // Standard Error: 29_231
            .saturating_add(Weight::from_parts(7_839_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 71_625_000 picoseconds.
        Weight::from_parts(74_015_746, 0)
            // Standard Error: 28_894
            .saturating_add(Weight::from_parts(6_918_144, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 58_666_000 picoseconds.
        Weight::from_parts(60_945_076, 0)
            // Standard Error: 33_393
            .saturating_add(Weight::from_parts(23_384_948, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 59_263_000 picoseconds.
        Weight::from_parts(61_548_284, 0)
            // Standard Error: 32_083
            .saturating_add(Weight::from_parts(12_007_632, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 59_588_000 picoseconds.
        Weight::from_parts(61_778_726, 0)
            // Standard Error: 31_381
            .saturating_add(Weight::from_parts(10_988_944, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 58_586_000 picoseconds.
        Weight::from_parts(61_400_256, 0)
            // Standard Error: 31_003
            .saturating_add(Weight::from_parts(11_474_984, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 59_130_000 picoseconds.
        Weight::from_parts(61_405_294, 0)
            // Standard Error: 32_031
            .saturating_add(Weight::from_parts(11_597_666, 0).saturating_mul(r.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 991_000 picoseconds.
        Weight::from_parts(1_051_000, 0)
            // Standard Error: 471
            .saturating_add(Weight::from_parts(243_048, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_251_000 picoseconds.
        Weight::from_parts(3_368_000, 3610)
            // Standard Error: 1_099
            .saturating_add(Weight::from_parts(598_985, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_code_section_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 35_348_000 picoseconds.
        Weight::from_parts(36_683_968, 0)
            // Standard Error: 1_863
            .saturating_add(Weight::from_parts(196_755, 0).saturating_mul(c.into()))
    }
    /// The range of component `d` is `[0, 512]`.
    fn instantiate_module_data_section_per_kb(d: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_447_000 picoseconds.
        Weight::from_parts(53_083_381, 0)
            // Standard Error: 1_569
            .saturating_add(Weight::from_parts(463_249, 0).saturating_mul(d.into()))
    }
    /// The range of component `g` is `[0, 512]`.
    fn instantiate_module_global_section_per_kb(g: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 34_544_000 picoseconds.
        Weight::from_parts(27_323_050, 0)
            // Standard Error: 1_895
            .saturating_add(Weight::from_parts(2_416_290, 0).saturating_mul(g.into()))
    }
    /// The range of component `t` is `[0, 9765]`.
    fn instantiate_module_table_section_per_kb(t: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 34_160_000 picoseconds.
        Weight::from_parts(34_614_000, 0)
            // Standard Error: 2_123
            .saturating_add(Weight::from_parts(359_300, 0).saturating_mul(t.into()))
    }
    /// The range of component `t` is `[0, 512]`.
    fn instantiate_module_element_section_per_kb(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 36_788_000 picoseconds.
        Weight::from_parts(38_141_151, 0)
            // Standard Error: 3_777
            .saturating_add(Weight::from_parts(18_936_755, 0).saturating_mul(e.into()))
    }
    /// The range of component `t` is `[0, 512]`.
    fn instantiate_module_type_section_per_kb(t: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 34_697_000 picoseconds.
        Weight::from_parts(36_274_820, 0)
            // Standard Error: 1_864
            .saturating_add(Weight::from_parts(260_172, 0).saturating_mul(t.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1321`
        //  Estimated: `8799`
        // Minimum execution time: 127_842_000 picoseconds.
        Weight::from_parts(129_744_000, 8799)
            .saturating_add(RocksDbWeight::get().reads(17_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `3578`
        // Minimum execution time: 91_056_000 picoseconds.
        Weight::from_parts(75_482_370, 3578)
            // Standard Error: 42_175
            .saturating_add(Weight::from_parts(61_763_926, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `991`
        //  Estimated: `4456`
        // Minimum execution time: 107_748_000 picoseconds.
        Weight::from_parts(134_740_079, 4456)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(1_704, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `379`
        //  Estimated: `3844`
        // Minimum execution time: 7_358_280_000 picoseconds.
        Weight::from_parts(412_535_550, 3844)
            // Standard Error: 103_792
            .saturating_add(Weight::from_parts(62_072_527, 0).saturating_mul(c.into()))
            // Standard Error: 6
            .saturating_add(Weight::from_parts(1_636, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `480`
        //  Estimated: `6196`
        // Minimum execution time: 95_735_000 picoseconds.
        Weight::from_parts(6_957_254, 6196)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(995, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1320`
        //  Estimated: `8799`
        // Minimum execution time: 156_312_000 picoseconds.
        Weight::from_parts(72_298_958, 8799)
            // Standard Error: 4
            .saturating_add(Weight::from_parts(1_018, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(18_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `d` is `[1, 1024]`.
    fn claim_value_to_inheritor(d: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + d * (207 ±0)`
        //  Estimated: `3593 + d * (2683 ±0)`
        // Minimum execution time: 62_000_000 picoseconds.
        Weight::from_parts(63_000_000, 3593)
            // Standard Error: 24_979
            .saturating_add(Weight::from_parts(50_498_014, 0).saturating_mul(d.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(d.into())))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(d.into())))
            .saturating_add(Weight::from_parts(0, 2683).saturating_mul(d.into()))
    }
    /// The range of component `e` is `[0, 512]`.
    fn reinstrument_per_kb(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `327 + e * (1024 ±0)`
        //  Estimated: `3791 + e * (1024 ±0)`
        // Minimum execution time: 78_478_000 picoseconds.
        Weight::from_parts(60_084_454, 3791)
            // Standard Error: 214_025
            .saturating_add(Weight::from_parts(638_778_276, 0).saturating_mul(e.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(e.into()))
    }
    /// The range of component `a` is `[0, 32767]`.
    fn load_allocations_per_interval(a: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101 + a * (8 ±0)`
        //  Estimated: `3566 + a * (8 ±0)`
        // Minimum execution time: 3_000_000 picoseconds.
        Weight::from_parts(15_735_686, 3566)
            // Standard Error: 47
            .saturating_add(Weight::from_parts(19_766, 0).saturating_mul(a.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 8).saturating_mul(a.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 740_740_000 picoseconds.
        Weight::from_parts(653_250_042, 0)
            // Standard Error: 218_399
            .saturating_add(Weight::from_parts(121_659_232, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_119_000 picoseconds.
        Weight::from_parts(7_435_356, 0)
            // Standard Error: 84_763
            .saturating_add(Weight::from_parts(64_827_518, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 819]`.
    fn mem_grow_per_page(_p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 69_165_000 picoseconds.
        Weight::from_parts(74_601_757, 0)
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 778_464_000 picoseconds.
        Weight::from_parts(744_321_591, 0)
            // Standard Error: 213_175
            .saturating_add(Weight::from_parts(67_584_978, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 707_145_000 picoseconds.
        Weight::from_parts(682_585_812, 0)
            // Standard Error: 225_717
            .saturating_add(Weight::from_parts(69_939_771, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 700]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 718_223_000 picoseconds.
        Weight::from_parts(808_127_136, 0)
            // Standard Error: 5_697
            .saturating_add(Weight::from_parts(2_994_128, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_079_000 picoseconds.
        Weight::from_parts(72_222_087, 0)
            // Standard Error: 3_384
            .saturating_add(Weight::from_parts(2_084_430, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_759_000 picoseconds.
        Weight::from_parts(112_129_712, 0)
            // Standard Error: 3_037
            .saturating_add(Weight::from_parts(1_940_658, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 60_825_000 picoseconds.
        Weight::from_parts(79_790_595, 0)
            // Standard Error: 56_060
            .saturating_add(Weight::from_parts(80_575_460, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_011_000 picoseconds.
        Weight::from_parts(68_503_669, 0)
            // Standard Error: 263_717
            .saturating_add(Weight::from_parts(74_518_443, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_817_000 picoseconds.
        Weight::from_parts(74_374_662, 0)
            // Standard Error: 48_101
            .saturating_add(Weight::from_parts(71_922_470, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_953_000 picoseconds.
        Weight::from_parts(78_740_202, 0)
            // Standard Error: 147_900
            .saturating_add(Weight::from_parts(72_436_902, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_454_000 picoseconds.
        Weight::from_parts(71_060_167, 0)
            // Standard Error: 208_526
            .saturating_add(Weight::from_parts(73_618_160, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_142_000 picoseconds.
        Weight::from_parts(77_134_039, 0)
            // Standard Error: 46_326
            .saturating_add(Weight::from_parts(79_256_911, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_697_000 picoseconds.
        Weight::from_parts(71_280_142, 0)
            // Standard Error: 83_514
            .saturating_add(Weight::from_parts(79_475_915, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_067_000 picoseconds.
        Weight::from_parts(85_305_702, 0)
            // Standard Error: 185_168
            .saturating_add(Weight::from_parts(71_159_305, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 683_843_000 picoseconds.
        Weight::from_parts(723_565_299, 0)
            // Standard Error: 216_184
            .saturating_add(Weight::from_parts(128_743_735, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 793_998_000 picoseconds.
        Weight::from_parts(798_332_000, 0)
            // Standard Error: 117_291
            .saturating_add(Weight::from_parts(16_544_234, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_769_000 picoseconds.
        Weight::from_parts(76_526_063, 0)
            // Standard Error: 287_959
            .saturating_add(Weight::from_parts(82_604_811, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_123_000 picoseconds.
        Weight::from_parts(71_215_182, 0)
            // Standard Error: 159_092
            .saturating_add(Weight::from_parts(72_199_413, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_554_000 picoseconds.
        Weight::from_parts(74_432_437, 0)
            // Standard Error: 47_489
            .saturating_add(Weight::from_parts(71_782_100, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_209_000 picoseconds.
        Weight::from_parts(81_020_535, 0)
            // Standard Error: 149_522
            .saturating_add(Weight::from_parts(145_223_647, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_784_000 picoseconds.
        Weight::from_parts(65_869_000, 0)
            // Standard Error: 3_904_257
            .saturating_add(Weight::from_parts(731_805_655, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_615_000 picoseconds.
        Weight::from_parts(74_722_045, 0)
            // Standard Error: 194_666
            .saturating_add(Weight::from_parts(235_908_247, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 289_189_000 picoseconds.
        Weight::from_parts(291_035_000, 0)
            // Standard Error: 260_141
            .saturating_add(Weight::from_parts(41_136_292, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_793_000 picoseconds.
        Weight::from_parts(72_323_411, 0)
            // Standard Error: 151_034
            .saturating_add(Weight::from_parts(238_825_023, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 293_375_000 picoseconds.
        Weight::from_parts(295_304_000, 0)
            // Standard Error: 258_605
            .saturating_add(Weight::from_parts(41_049_469, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 684_816_000 picoseconds.
        Weight::from_parts(701_630_081, 0)
            // Standard Error: 185_993
            .saturating_add(Weight::from_parts(226_793_863, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 678_218_000 picoseconds.
        Weight::from_parts(708_679_759, 0)
            // Standard Error: 212_978
            .saturating_add(Weight::from_parts(229_380_293, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_118_000 picoseconds.
        Weight::from_parts(74_356_887, 0)
            // Standard Error: 58_295
            .saturating_add(Weight::from_parts(87_860_909, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_761_957_000 picoseconds.
        Weight::from_parts(1_822_477_976, 0)
            // Standard Error: 151_720
            .saturating_add(Weight::from_parts(161_756_949, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 277_173_000 picoseconds.
        Weight::from_parts(280_451_000, 0)
            // Standard Error: 260_571
            .saturating_add(Weight::from_parts(41_229_651, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_687_233_000 picoseconds.
        Weight::from_parts(1_827_139_879, 0)
            // Standard Error: 162_247
            .saturating_add(Weight::from_parts(196_316_284, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_711_334_000 picoseconds.
        Weight::from_parts(1_826_428_398, 0)
            // Standard Error: 169_581
            .saturating_add(Weight::from_parts(199_470_392, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 140_830_000 picoseconds.
        Weight::from_parts(146_818_158, 0)
            // Standard Error: 178_439
            .saturating_add(Weight::from_parts(252_911_483, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 379_307_000 picoseconds.
        Weight::from_parts(380_217_000, 0)
            // Standard Error: 257_875
            .saturating_add(Weight::from_parts(41_211_921, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_819_540_000 picoseconds.
        Weight::from_parts(1_895_407_753, 0)
            // Standard Error: 181_488
            .saturating_add(Weight::from_parts(212_948_376, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_427_000 picoseconds.
        Weight::from_parts(82_330_000, 0)
            // Standard Error: 2_611
            .saturating_add(Weight::from_parts(673_738, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_933_000 picoseconds.
        Weight::from_parts(82_389_000, 0)
            // Standard Error: 2_640
            .saturating_add(Weight::from_parts(675_302, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_416_000 picoseconds.
        Weight::from_parts(68_318_482, 0)
            // Standard Error: 367_827
            .saturating_add(Weight::from_parts(138_926_133, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 77_420_000 picoseconds.
        Weight::from_parts(80_735_790, 0)
            // Standard Error: 716
            .saturating_add(Weight::from_parts(672_255, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_886_000 picoseconds.
        Weight::from_parts(80_388_000, 0)
            // Standard Error: 2_607
            .saturating_add(Weight::from_parts(675_230, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_347_000 picoseconds.
        Weight::from_parts(82_111_000, 0)
            // Standard Error: 2_668
            .saturating_add(Weight::from_parts(673_330, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_347_000 picoseconds.
        Weight::from_parts(74_512_490, 0)
            // Standard Error: 178_897
            .saturating_add(Weight::from_parts(73_965_812, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 66_450_000 picoseconds.
        Weight::from_parts(88_801_264, 0)
            // Standard Error: 182_723
            .saturating_add(Weight::from_parts(71_400_426, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 66_514_000 picoseconds.
        Weight::from_parts(70_789_962, 0)
            // Standard Error: 265_186
            .saturating_add(Weight::from_parts(74_669_206, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 681_082_000 picoseconds.
        Weight::from_parts(700_871_534, 0)
            // Standard Error: 300_662
            .saturating_add(Weight::from_parts(93_383_929, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 691_414_000 picoseconds.
        Weight::from_parts(699_656_877, 0)
            // Standard Error: 321
            .saturating_add(Weight::from_parts(146_829, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_103_000 picoseconds.
        Weight::from_parts(2_430_329_059, 0)
            // Standard Error: 272_111
            .saturating_add(Weight::from_parts(116_238_106, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_542_554_000 picoseconds.
        Weight::from_parts(2_299_595_154, 0)
            // Standard Error: 6_667
            .saturating_add(Weight::from_parts(13_426_168, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_942_000 picoseconds.
        Weight::from_parts(71_222_257, 0)
            // Standard Error: 282_548
            .saturating_add(Weight::from_parts(96_974_311, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 127_348_000 picoseconds.
        Weight::from_parts(128_826_000, 0)
            // Standard Error: 275_805
            .saturating_add(Weight::from_parts(36_847_588, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_312_000 picoseconds.
        Weight::from_parts(76_973_512, 0)
            // Standard Error: 267_579
            .saturating_add(Weight::from_parts(73_865_785, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_983_000 picoseconds.
        Weight::from_parts(101_079_000, 0)
            // Standard Error: 1_785_219
            .saturating_add(Weight::from_parts(298_212_769, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 72_754_000 picoseconds.
        Weight::from_parts(66_952_440, 0)
            // Standard Error: 211_231
            .saturating_add(Weight::from_parts(299_662_143, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_516_220_000 picoseconds.
        Weight::from_parts(62_529_111_000, 0)
            // Standard Error: 442_882
            .saturating_add(Weight::from_parts(9_722_855, 0).saturating_mul(p.into()))
            // Standard Error: 442_860
            .saturating_add(Weight::from_parts(115_654_491, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 72_855_000 picoseconds.
        Weight::from_parts(64_239_384, 0)
            // Standard Error: 180_241
            .saturating_add(Weight::from_parts(302_970_508, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_660_773_000 picoseconds.
        Weight::from_parts(62_745_638_000, 0)
            // Standard Error: 440_013
            .saturating_add(Weight::from_parts(9_690_878, 0).saturating_mul(p.into()))
            // Standard Error: 439_991
            .saturating_add(Weight::from_parts(115_839_080, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 64_426_000 picoseconds.
        Weight::from_parts(94_830_600, 1131)
            // Standard Error: 5_927
            .saturating_add(Weight::from_parts(13_542_530, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 63_843_000 picoseconds.
        Weight::from_parts(64_633_000, 1131)
            // Standard Error: 16_915
            .saturating_add(Weight::from_parts(34_986_519, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_989_689_000 picoseconds.
        Weight::from_parts(6_944_641_877, 5069931)
            // Standard Error: 22_716
            .saturating_add(Weight::from_parts(34_655_231, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1820 + p * (65580 ±0)`
        //  Estimated: `1946 + p * (75482 ±0)`
        // Minimum execution time: 63_290_000 picoseconds.
        Weight::from_parts(64_778_000, 1946)
            // Standard Error: 64_743
            .saturating_add(Weight::from_parts(56_066_142, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 67_053_000 picoseconds.
        Weight::from_parts(2_058_229, 1131)
            // Standard Error: 271_877
            .saturating_add(Weight::from_parts(54_230_656, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 712_903_000 picoseconds.
        Weight::from_parts(603_237_610, 1496)
            // Standard Error: 357_309
            .saturating_add(Weight::from_parts(63_168_097, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_334_949_000 picoseconds.
        Weight::from_parts(1_233_350_508, 317931)
            // Standard Error: 363_291
            .saturating_add(Weight::from_parts(58_133_894, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_550_066_000 picoseconds.
        Weight::from_parts(4_734_780_905, 0)
            // Standard Error: 33_164
            .saturating_add(Weight::from_parts(1_414_229 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_237_338_000 picoseconds.
        Weight::from_parts(4_278_916_633, 0)
            // Standard Error: 10_367
            .saturating_add(Weight::from_parts(2_204_826 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_462_837_000 picoseconds.
        Weight::from_parts(8_633_141_052, 0)
            // Standard Error: 103_305
            .saturating_add(Weight::from_parts(8_363_979 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_402_210_000 picoseconds.
        Weight::from_parts(8_456_542_985, 0)
            // Standard Error: 81_438
            .saturating_add(Weight::from_parts(8_402_293 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_107_000 picoseconds.
        Weight::from_parts(310_058, 0)
            // Standard Error: 2_437
            .saturating_add(Weight::from_parts(1_992_632 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_179_000 picoseconds.
        Weight::from_parts(670_203, 0)
            // Standard Error: 2_916
            .saturating_add(Weight::from_parts(1_930_908 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_108_000 picoseconds.
        Weight::from_parts(1_167_000, 0)
            // Standard Error: 1_627
            .saturating_add(Weight::from_parts(1_542_130 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_101_000 picoseconds.
        Weight::from_parts(387_051, 0)
            // Standard Error: 2_939
            .saturating_add(Weight::from_parts(1_789_477 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_071_000 picoseconds.
        Weight::from_parts(1_264_212, 0)
            // Standard Error: 2_598
            .saturating_add(Weight::from_parts(3_415_339 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_663_000 picoseconds.
        Weight::from_parts(4_037_704, 0)
            // Standard Error: 596
            .saturating_add(Weight::from_parts(42_663 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_151_000 picoseconds.
        Weight::from_parts(1_125_724, 0)
            // Standard Error: 5_890
            .saturating_add(Weight::from_parts(2_449_200 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts((2_449_200 -
            2_310_323) * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_114_000 picoseconds.
        Weight::from_parts(645_468, 0)
            // Standard Error: 11_843
            .saturating_add(Weight::from_parts(2_310_323 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_220_000 picoseconds.
        Weight::from_parts(1_464_642, 0)
            // Standard Error: 10_969
            .saturating_add(Weight::from_parts(7_400_628 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_666_000 picoseconds.
        Weight::from_parts(3_692_740, 0)
            // Standard Error: 2_612
            .saturating_add(Weight::from_parts(490_880 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_453_000 picoseconds.
        Weight::from_parts(2_672_317, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_602_000 picoseconds.
        Weight::from_parts(6_688_896, 0)
            // Standard Error: 3_400
            .saturating_add(Weight::from_parts(356_031 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_584_000 picoseconds.
        Weight::from_parts(7_272_206, 0)
            // Standard Error: 3_857
            .saturating_add(Weight::from_parts(737_122 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_547_000 picoseconds.
        Weight::from_parts(8_406_173, 0)
            // Standard Error: 4_393
            .saturating_add(Weight::from_parts(700_704 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_779_000 picoseconds.
        Weight::from_parts(4_358_940, 0)
            // Standard Error: 3_030
            .saturating_add(Weight::from_parts(353_939 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_794_000 picoseconds.
        Weight::from_parts(4_564_948, 0)
            // Standard Error: 2_940
            .saturating_add(Weight::from_parts(539_450 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_548_000 picoseconds.
        Weight::from_parts(4_717_005, 0)
            // Standard Error: 4_665
            .saturating_add(Weight::from_parts(5_547_761 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_064_000 picoseconds.
        Weight::from_parts(410_766, 0)
            // Standard Error: 3_452
            .saturating_add(Weight::from_parts(2_021_854 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_123_000 picoseconds.
        Weight::from_parts(468_123, 0)
            // Standard Error: 3_586
            .saturating_add(Weight::from_parts(1_956_633 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_174_000 picoseconds.
        Weight::from_parts(233_592, 0)
            // Standard Error: 2_814
            .saturating_add(Weight::from_parts(1_939_744 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_126_000 picoseconds.
        Weight::from_parts(161_858, 0)
            // Standard Error: 2_763
            .saturating_add(Weight::from_parts(1_872_412 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_051_000 picoseconds.
        Weight::from_parts(970_769, 0)
            // Standard Error: 1_487
            .saturating_add(Weight::from_parts(331_209 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_085_000 picoseconds.
        Weight::from_parts(940_022, 0)
            // Standard Error: 2_635
            .saturating_add(Weight::from_parts(264_051 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_117_000 picoseconds.
        Weight::from_parts(622_887, 0)
            // Standard Error: 4_781
            .saturating_add(Weight::from_parts(736_921 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_138_000 picoseconds.
        Weight::from_parts(767_930, 0)
            // Standard Error: 1_870
            .saturating_add(Weight::from_parts(512_872 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_089_000 picoseconds.
        Weight::from_parts(804_044, 0)
            // Standard Error: 2_549
            .saturating_add(Weight::from_parts(277_747 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_122_000 picoseconds.
        Weight::from_parts(1_162_948, 0)
            // Standard Error: 1_228
            .saturating_add(Weight::from_parts(242_966 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_116_000 picoseconds.
        Weight::from_parts(1_298_716, 0)
            // Standard Error: 2_781
            .saturating_add(Weight::from_parts(311_638 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_095_000 picoseconds.
        Weight::from_parts(1_529_854, 0)
            // Standard Error: 2_716
            .saturating_add(Weight::from_parts(303_947 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_130_000 picoseconds.
        Weight::from_parts(1_166_717, 0)
            // Standard Error: 1_413
            .saturating_add(Weight::from_parts(287_342 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_165_000 picoseconds.
        Weight::from_parts(891_706, 0)
            // Standard Error: 2_465
            .saturating_add(Weight::from_parts(249_410 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_125_000 picoseconds.
        Weight::from_parts(1_399_184, 0)
            // Standard Error: 1_248
            .saturating_add(Weight::from_parts(141_084 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_138_000 picoseconds.
        Weight::from_parts(1_505_788, 0)
            // Standard Error: 862
            .saturating_add(Weight::from_parts(133_725 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_112_000 picoseconds.
        Weight::from_parts(1_214_179, 0)
            // Standard Error: 4_666
            .saturating_add(Weight::from_parts(720_432 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_108_000 picoseconds.
        Weight::from_parts(1_273_454, 0)
            // Standard Error: 4_433
            .saturating_add(Weight::from_parts(532_996 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_131_000 picoseconds.
        Weight::from_parts(606_887, 0)
            // Standard Error: 4_030
            .saturating_add(Weight::from_parts(740_699 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_073_000 picoseconds.
        Weight::from_parts(652_962, 0)
            // Standard Error: 2_826
            .saturating_add(Weight::from_parts(545_710 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_105_000 picoseconds.
        Weight::from_parts(505_518, 0)
            // Standard Error: 3_790
            .saturating_add(Weight::from_parts(746_533 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_107_000 picoseconds.
        Weight::from_parts(912_665, 0)
            // Standard Error: 3_811
            .saturating_add(Weight::from_parts(534_806 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_119_000 picoseconds.
        Weight::from_parts(741_736, 0)
            // Standard Error: 3_635
            .saturating_add(Weight::from_parts(741_879 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_129_000 picoseconds.
        Weight::from_parts(748_486, 0)
            // Standard Error: 4_137
            .saturating_add(Weight::from_parts(534_778 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_077_000 picoseconds.
        Weight::from_parts(1_098_504, 0)
            // Standard Error: 4_305
            .saturating_add(Weight::from_parts(727_854 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_114_000 picoseconds.
        Weight::from_parts(1_122_798, 0)
            // Standard Error: 1_840
            .saturating_add(Weight::from_parts(505_466 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_141_000 picoseconds.
        Weight::from_parts(1_415_320, 0)
            // Standard Error: 4_769
            .saturating_add(Weight::from_parts(721_643 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_098_000 picoseconds.
        Weight::from_parts(1_353_387, 0)
            // Standard Error: 2_800
            .saturating_add(Weight::from_parts(508_195 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_149_000 picoseconds.
        Weight::from_parts(1_110_037, 0)
            // Standard Error: 4_337
            .saturating_add(Weight::from_parts(722_241 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_102_000 picoseconds.
        Weight::from_parts(772_878, 0)
            // Standard Error: 3_726
            .saturating_add(Weight::from_parts(557_525 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_117_000 picoseconds.
        Weight::from_parts(483_272, 0)
            // Standard Error: 4_088
            .saturating_add(Weight::from_parts(748_806 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_083_000 picoseconds.
        Weight::from_parts(1_474_751, 0)
            // Standard Error: 3_387
            .saturating_add(Weight::from_parts(508_996 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_164_000 picoseconds.
        Weight::from_parts(1_056_323, 0)
            // Standard Error: 4_486
            .saturating_add(Weight::from_parts(743_520 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_145_000 picoseconds.
        Weight::from_parts(1_314_789, 0)
            // Standard Error: 1_726
            .saturating_add(Weight::from_parts(498_625 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_121_000 picoseconds.
        Weight::from_parts(1_204_844, 0)
            // Standard Error: 5_170
            .saturating_add(Weight::from_parts(734_780 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_125_000 picoseconds.
        Weight::from_parts(902_365, 0)
            // Standard Error: 2_953
            .saturating_add(Weight::from_parts(541_622 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_130_000 picoseconds.
        Weight::from_parts(1_262_188, 0)
            // Standard Error: 2_027
            .saturating_add(Weight::from_parts(545_118 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_166_000 picoseconds.
        Weight::from_parts(1_184_873, 0)
            // Standard Error: 1_758
            .saturating_add(Weight::from_parts(354_905 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_113_000 picoseconds.
        Weight::from_parts(1_920_304, 0)
            // Standard Error: 4_397
            .saturating_add(Weight::from_parts(543_294 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_066_000 picoseconds.
        Weight::from_parts(954_875, 0)
            // Standard Error: 2_835
            .saturating_add(Weight::from_parts(354_448 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_143_000 picoseconds.
        Weight::from_parts(802_477, 0)
            // Standard Error: 4_347
            .saturating_add(Weight::from_parts(683_732 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_092_000 picoseconds.
        Weight::from_parts(787_353, 0)
            // Standard Error: 3_985
            .saturating_add(Weight::from_parts(522_097 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_115_000 picoseconds.
        Weight::from_parts(1_243_884, 0)
            // Standard Error: 2_490
            .saturating_add(Weight::from_parts(1_495_765 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_095_000 picoseconds.
        Weight::from_parts(504_698, 0)
            // Standard Error: 3_551
            .saturating_add(Weight::from_parts(1_142_343 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_094_000 picoseconds.
        Weight::from_parts(883_449, 0)
            // Standard Error: 2_784
            .saturating_add(Weight::from_parts(1_546_236 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_100_000 picoseconds.
        Weight::from_parts(817_447, 0)
            // Standard Error: 4_504
            .saturating_add(Weight::from_parts(1_106_059 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_092_000 picoseconds.
        Weight::from_parts(1_145_000, 0)
            // Standard Error: 29_822
            .saturating_add(Weight::from_parts(4_651_461 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_106_000 picoseconds.
        Weight::from_parts(1_135_000, 0)
            // Standard Error: 30_763
            .saturating_add(Weight::from_parts(3_323_346 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_106_000 picoseconds.
        Weight::from_parts(1_369_161, 0)
            // Standard Error: 3_106
            .saturating_add(Weight::from_parts(1_528_954 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_081_000 picoseconds.
        Weight::from_parts(928_623, 0)
            // Standard Error: 4_983
            .saturating_add(Weight::from_parts(1_093_720 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_076_000 picoseconds.
        Weight::from_parts(921_033, 0)
            // Standard Error: 4_447
            .saturating_add(Weight::from_parts(558_293 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_122_000 picoseconds.
        Weight::from_parts(1_571_241, 0)
            // Standard Error: 1_336
            .saturating_add(Weight::from_parts(313_419 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_139_000 picoseconds.
        Weight::from_parts(1_430_760, 0)
            // Standard Error: 3_950
            .saturating_add(Weight::from_parts(525_019 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_113_000 picoseconds.
        Weight::from_parts(1_533_556, 0)
            // Standard Error: 2_902
            .saturating_add(Weight::from_parts(330_155 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_085_000 picoseconds.
        Weight::from_parts(1_008_523, 0)
            // Standard Error: 3_975
            .saturating_add(Weight::from_parts(541_732 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_102_000 picoseconds.
        Weight::from_parts(1_249_074, 0)
            // Standard Error: 2_832
            .saturating_add(Weight::from_parts(335_476 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_128_000 picoseconds.
        Weight::from_parts(1_127_905, 0)
            // Standard Error: 3_725
            .saturating_add(Weight::from_parts(491_963 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_065_000 picoseconds.
        Weight::from_parts(1_556_117, 0)
            // Standard Error: 1_160
            .saturating_add(Weight::from_parts(293_739 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_061_000 picoseconds.
        Weight::from_parts(1_223_969, 0)
            // Standard Error: 2_213
            .saturating_add(Weight::from_parts(471_266 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_107_000 picoseconds.
        Weight::from_parts(1_311_929, 0)
            // Standard Error: 3_691
            .saturating_add(Weight::from_parts(331_159 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_148_000 picoseconds.
        Weight::from_parts(1_006_469, 0)
            // Standard Error: 1_885
            .saturating_add(Weight::from_parts(475_187 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_131_000 picoseconds.
        Weight::from_parts(1_702_645, 0)
            // Standard Error: 2_508
            .saturating_add(Weight::from_parts(299_600 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_165_000 picoseconds.
        Weight::from_parts(726_005, 0)
            // Standard Error: 3_603
            .saturating_add(Weight::from_parts(497_056 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_104_000 picoseconds.
        Weight::from_parts(1_441_366, 0)
            // Standard Error: 1_572
            .saturating_add(Weight::from_parts(303_529 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_140_000 picoseconds.
        Weight::from_parts(1_732_474, 0)
            // Standard Error: 3_245
            .saturating_add(Weight::from_parts(457_613 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_117_000 picoseconds.
        Weight::from_parts(966_620, 0)
            // Standard Error: 2_857
            .saturating_add(Weight::from_parts(335_047 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1164`
        //  Estimated: `6196`
        // Minimum execution time: 75_485_000 picoseconds.
        Weight::from_parts(76_731_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `858`
        //  Estimated: `4323`
        // Minimum execution time: 41_658_000 picoseconds.
        Weight::from_parts(42_239_000, 4323)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1079`
        //  Estimated: `6196`
        // Minimum execution time: 84_821_000 picoseconds.
        Weight::from_parts(86_439_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `694`
        //  Estimated: `4159`
        // Minimum execution time: 29_130_000 picoseconds.
        Weight::from_parts(29_681_000, 4159)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `937`
        //  Estimated: `4402`
        // Minimum execution time: 41_459_000 picoseconds.
        Weight::from_parts(42_424_000, 4402)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 4_410_000 picoseconds.
        Weight::from_parts(4_668_000, 3545)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1635`
        //  Estimated: `7575`
        // Minimum execution time: 116_824_000 picoseconds.
        Weight::from_parts(117_581_000, 7575)
            .saturating_add(RocksDbWeight::get().reads(18_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1364`
        //  Estimated: `7304`
        // Minimum execution time: 97_425_000 picoseconds.
        Weight::from_parts(98_374_000, 7304)
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
}
