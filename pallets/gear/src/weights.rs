// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-15, STEPS: `1`, REPEAT: 1, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Vadims-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/gear-node benchmark pallet --chain=gear-dev --steps=1 --repeat=1 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
	fn allocation_cost() -> Weight;
	fn grow_cost() -> Weight;
	fn initial_cost() -> Weight;
	fn load_cost() -> Weight;
    fn claim_value() -> Weight;
	fn upload_code(c: u32, ) -> Weight;
	fn create_program(s: u32, ) -> Weight;
	fn upload_program(c: u32, s: u32, ) -> Weight;
	fn send_message(p: u32, ) -> Weight;
	fn send_reply(p: u32, ) -> Weight;
	fn initial_allocation(q: u32, ) -> Weight;
	fn alloc_in_handle(q: u32, ) -> Weight;
	fn reinstrument(c: u32, ) -> Weight;
	fn alloc(r: u32, ) -> Weight;
	fn gas(r: u32, ) -> Weight;
	fn gr_gas_available(r: u32, ) -> Weight;
	fn gr_msg_id(r: u32, ) -> Weight;
	fn gr_origin(r: u32, ) -> Weight;
	fn gr_program_id(r: u32, ) -> Weight;
	fn gr_source(r: u32, ) -> Weight;
	fn gr_value(r: u32, ) -> Weight;
	fn gr_value_available(r: u32, ) -> Weight;
	fn gr_size(r: u32, ) -> Weight;
	fn gr_read(r: u32, ) -> Weight;
	fn gr_read_per_kb(n: u32, ) -> Weight;
	fn gr_block_height(r: u32, ) -> Weight;
	fn gr_block_timestamp(r: u32, ) -> Weight;
	fn gr_send_init(r: u32, ) -> Weight;
	fn gr_send_push(r: u32, ) -> Weight;
	fn gr_send_push_per_kb(n: u32, ) -> Weight;
	fn gr_send_commit(r: u32, ) -> Weight;
	fn gr_send_commit_per_kb(n: u32, ) -> Weight;
	fn gr_reply_commit(r: u32, ) -> Weight;
	fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
	fn gr_reply_push(r: u32, ) -> Weight;
	fn gr_reply_push_per_kb(n: u32, ) -> Weight;
	fn gr_reply_to(r: u32, ) -> Weight;
	fn gr_debug(r: u32, ) -> Weight;
	fn gr_exit_code(r: u32, ) -> Weight;
	fn gr_exit(r: u32, ) -> Weight;
	fn gr_leave(r: u32, ) -> Weight;
	fn gr_wait(r: u32, ) -> Weight;
	fn gr_wait_for(r: u32, ) -> Weight;
	fn gr_wait_no_more(r: u32, ) -> Weight;
	fn gr_wake(r: u32, ) -> Weight;
	fn gr_create_program_wgas(r: u32, ) -> Weight;
	fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn allocation_cost() -> Weight {
		// To be changed with the proper value.
		T::DbWeight::get().writes(1)
	}
	fn grow_cost() -> Weight {
		// To be changed with the proper value.
		T::DbWeight::get().writes(1)
	}
	fn initial_cost() -> Weight {
		T::DbWeight::get().writes(1)
	}
	fn load_cost() -> Weight {
		T::DbWeight::get().reads(1)
	}
	// Storage: GearMessenger Mailbox (r:1 w:1)
	// Storage: GearGas GasNodes (r:1 w:1)
	// Storage: GearGas TotalIssuance (r:1 w:1)
	// Storage: Authorship Author (r:1 w:0)
	// Storage: System Account (r:3 w:3)
	// Storage: GearScheduler TaskPool (r:1 w:0)
	fn claim_value() -> Weight {
		Weight::from_ref_time(72_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: GearProgram CodeStorage (r:1 w:1)
	// Storage: GearProgram MetadataStorage (r:0 w:1)
	// Storage: GearProgram OriginalCodeStorage (r:0 w:1)
	/// The range of component `c` is `[0, 256902]`.
	fn upload_code(_c: u32, ) -> Weight {
		Weight::from_ref_time(8_522_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: GearProgram CodeStorage (r:1 w:0)
	// Storage: unknown [0x673a3a70726f673a3a323cf4aa254c1be0e18412174dc4d57ca4f0b2ea4542d6] (r:1 w:1)
	// Storage: GearProgram PausedPrograms (r:1 w:0)
	// Storage: GearMessenger Sent (r:1 w:1)
	// Storage: GearGas GasNodes (r:1 w:1)
	// Storage: GearGas TotalIssuance (r:1 w:1)
	// Storage: GearMessenger Dispatches (r:1 w:1)
	// Storage: GearMessenger Tail (r:1 w:1)
	// Storage: GearMessenger Head (r:1 w:1)
	// Storage: GearMessenger CounterForDispatches (r:1 w:1)
	// Storage: unknown [0x673a3a70726f673a3a94881ebe0d4de08a4f739644a14fae5b17de813a8844dc] (r:1 w:1)
	/// The range of component `s` is `[0, 4194304]`.
	fn create_program(_s: u32, ) -> Weight {
		Weight::from_ref_time(5_967_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
	}
	// Storage: unknown [0x673a3a70726f673a3a94881ebe0d4de08a4f739644a14fae5b17de813a8844dc] (r:1 w:1)
	// Storage: GearProgram PausedPrograms (r:1 w:0)
	// Storage: GearProgram CodeStorage (r:1 w:1)
	// Storage: GearMessenger Sent (r:1 w:1)
	// Storage: GearGas GasNodes (r:1 w:1)
	// Storage: GearGas TotalIssuance (r:1 w:1)
	// Storage: GearMessenger Dispatches (r:1 w:1)
	// Storage: GearMessenger Tail (r:1 w:1)
	// Storage: GearMessenger Head (r:1 w:1)
	// Storage: GearMessenger CounterForDispatches (r:1 w:1)
	// Storage: GearProgram MetadataStorage (r:0 w:1)
	// Storage: GearProgram OriginalCodeStorage (r:0 w:1)
	// Storage: unknown [0x673a3a70726f673a3ade48a89f9549ed2ef35c09b96d6e977f4479a7b3814886] (r:1 w:1)
	// Storage: unknown [0x673a3a70726f673a3a92d213da329a9ef3447353644a655ec95b8a4868845f6e] (r:1 w:1)
	/// The range of component `c` is `[0, 256902]`.
	/// The range of component `s` is `[0, 4194304]`.
	fn upload_program(c: u32, s: u32, ) -> Weight {
		Weight::from_ref_time(20_000_000 as u64)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(33_000 as u64).saturating_mul(c as u64))
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(1_000 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(11 as u64))
	}
	// Storage: GearMessenger Sent (r:1 w:1)
	// Storage: unknown [0x673a3a70726f673a3a13614ad1183876953cdd99749d6dcf5d41b7ffc0740cd2] (r:1 w:0)
	// Storage: GearProgram PausedPrograms (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: GearGas GasNodes (r:1 w:1)
	// Storage: GearGas TotalIssuance (r:1 w:1)
	// Storage: GearMessenger Dispatches (r:1 w:1)
	// Storage: GearMessenger Tail (r:1 w:1)
	// Storage: GearMessenger Head (r:1 w:1)
	// Storage: GearMessenger CounterForDispatches (r:1 w:1)
	/// The range of component `p` is `[0, 65536]`.
	fn send_message(_p: u32, ) -> Weight {
		Weight::from_ref_time(97_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
	}
	// Storage: GearMessenger Mailbox (r:1 w:1)
	// Storage: GearGas GasNodes (r:2 w:2)
	// Storage: GearGas TotalIssuance (r:1 w:1)
	// Storage: Authorship Author (r:1 w:0)
	// Storage: System Account (r:3 w:3)
	// Storage: GearScheduler TaskPool (r:1 w:0)
	// Storage: unknown [0x673a3a70726f673a3a13614ad1183876953cdd99749d6dcf5d41b7ffc0740cd2] (r:1 w:0)
	// Storage: GearMessenger Dispatches (r:1 w:1)
	// Storage: GearMessenger Tail (r:1 w:1)
	// Storage: GearMessenger Head (r:1 w:1)
	// Storage: GearMessenger CounterForDispatches (r:1 w:1)
	/// The range of component `p` is `[0, 65536]`.
	fn send_reply(_p: u32, ) -> Weight {
		Weight::from_ref_time(125_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(14 as u64))
			.saturating_add(T::DbWeight::get().writes(11 as u64))
	}
	// Storage: unknown [0x673a3a70726f673a3a135181f839061994ea219e9237c5210e5e396044dceff1] (r:1 w:1)
	// Storage: GearProgram PausedPrograms (r:2 w:0)
	// Storage: System Account (r:3 w:2)
	// Storage: GearProgram CodeStorage (r:1 w:1)
	// Storage: GearMessenger Sent (r:1 w:1)
	// Storage: GearGas GasNodes (r:1 w:1)
	// Storage: GearGas TotalIssuance (r:1 w:1)
	// Storage: GearMessenger Dispatches (r:1 w:1)
	// Storage: GearMessenger Tail (r:1 w:1)
	// Storage: GearMessenger Head (r:1 w:1)
	// Storage: GearMessenger CounterForDispatches (r:1 w:1)
	// Storage: System ParentHash (r:1 w:1)
	// Storage: Authorship Uncles (r:1 w:1)
	// Storage: Authorship Author (r:1 w:1)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: GearDebug RemapId (r:1 w:0)
	// Storage: GearMessenger QueueProcessing (r:1 w:0)
	// Storage: GearMessenger Dequeued (r:1 w:1)
	// Storage: GearGas Allowance (r:1 w:1)
	// Storage: unknown [0x673a3a70726f675f776169743a3a135181f839061994ea219e9237c5210e5e39] (r:1 w:1)
	// Storage: unknown [0x673a3a70726f673a3a5c77033fce8a9045824a6690bbf99c6db269502f0a8d1d] (r:1 w:0)
	// Storage: GearDebug DebugMode (r:1 w:0)
	// Storage: GearProgram MetadataStorage (r:0 w:1)
	// Storage: GearProgram OriginalCodeStorage (r:0 w:1)
	// Storage: System BlockWeight (r:0 w:1)
	// Storage: System Digest (r:0 w:1)
	// Storage: System BlockHash (r:0 w:1)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:0 w:1)
	// Storage: Authorship DidSetUncles (r:0 w:1)
	// Storage: unknown [0x673a3a70726f673a3adca6df2507911b3b689f08d01768b4b4fc63471932a345] (r:1 w:1)
	// Storage: unknown [0x673a3a70726f675f776169743a3adca6df2507911b3b689f08d01768b4b4fc63] (r:1 w:1)
	/// The range of component `q` is `[1, 512]`.
	fn initial_allocation(_q: u32, ) -> Weight {
		Weight::from_ref_time(325_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(26 as u64))
			.saturating_add(T::DbWeight::get().writes(24 as u64))
	}
	// Storage: unknown [0x673a3a70726f673a3a919c19deed1eb1c0cc641a32811c2832e096fa7152fce6] (r:1 w:1)
	// Storage: GearProgram PausedPrograms (r:2 w:0)
	// Storage: System Account (r:3 w:2)
	// Storage: GearProgram CodeStorage (r:1 w:1)
	// Storage: GearMessenger Sent (r:1 w:1)
	// Storage: GearGas GasNodes (r:1 w:1)
	// Storage: GearGas TotalIssuance (r:1 w:1)
	// Storage: GearMessenger Dispatches (r:1 w:1)
	// Storage: GearMessenger Tail (r:1 w:1)
	// Storage: GearMessenger Head (r:1 w:1)
	// Storage: GearMessenger CounterForDispatches (r:1 w:1)
	// Storage: System ParentHash (r:1 w:1)
	// Storage: Authorship Uncles (r:1 w:1)
	// Storage: Authorship Author (r:1 w:1)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: GearDebug RemapId (r:1 w:0)
	// Storage: GearMessenger QueueProcessing (r:1 w:0)
	// Storage: GearMessenger Dequeued (r:1 w:1)
	// Storage: GearGas Allowance (r:1 w:1)
	// Storage: unknown [0x673a3a70726f675f776169743a3a919c19deed1eb1c0cc641a32811c2832e096] (r:1 w:1)
	// Storage: unknown [0x673a3a70726f673a3a5c77033fce8a9045824a6690bbf99c6db269502f0a8d1d] (r:1 w:0)
	// Storage: GearDebug DebugMode (r:1 w:0)
	// Storage: GearProgram MetadataStorage (r:0 w:1)
	// Storage: GearProgram OriginalCodeStorage (r:0 w:1)
	// Storage: System BlockWeight (r:0 w:1)
	// Storage: System Digest (r:0 w:1)
	// Storage: System BlockHash (r:0 w:1)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:0 w:1)
	// Storage: Authorship DidSetUncles (r:0 w:1)
	// Storage: unknown [0x673a3a70726f673a3ace9252cc52202e500dbc67093eb525c0dc88adf104e1fe] (r:1 w:1)
	// Storage: unknown [0x673a3a70726f675f776169743a3ace9252cc52202e500dbc67093eb525c0dc88] (r:1 w:1)
	/// The range of component `q` is `[0, 512]`.
	fn alloc_in_handle(_q: u32, ) -> Weight {
		Weight::from_ref_time(246_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(26 as u64))
			.saturating_add(T::DbWeight::get().writes(24 as u64))
	}
	// Storage: GearProgram CodeStorage (r:1 w:1)
	// Storage: GearProgram OriginalCodeStorage (r:1 w:0)
	/// The range of component `c` is `[0, 524288]`.
	fn reinstrument(_c: u32, ) -> Weight {
		Weight::from_ref_time(17_315_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	/// The range of component `r` is `[0, 20]`.
	fn alloc(_r: u32, ) -> Weight {
		Weight::from_ref_time(3_625_000_000 as u64)
	}
	/// The range of component `r` is `[0, 20]`.
	fn gas(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_037_000_000 as u64)
	}
	/// The range of component `r` is `[0, 20]`.
	fn gr_gas_available(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_049_000_000 as u64)
	}
	// Storage: unknown [0x673a3a70616765733a3ade28d7f43cf5e6d129f62eb36a14595635299c0095f1] (r:4 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn gr_msg_id(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_286_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3a0ef2b7f0d6f3d29669cb447c5bd198a035a8e5692996] (r:4 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn gr_origin(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_277_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3ab72dfa63df40720ea4384763055e857d6155ca77377c] (r:4 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn gr_program_id(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_286_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3af15a227d1131b00e865c7479e3fa71564bbd6031a84e] (r:4 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn gr_source(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_271_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3a567279fa154f842482ad7c0de8103e0b3e673c01e64e] (r:4 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn gr_value(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_389_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3abf7ccd00761c77f9e7967ac3c678195fd8072c9fb828] (r:4 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn gr_value_available(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_363_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
	}
	/// The range of component `r` is `[0, 20]`.
	fn gr_size(_r: u32, ) -> Weight {
		Weight::from_ref_time(918_000_000 as u64)
	}
	/// The range of component `r` is `[0, 20]`.
	fn gr_read(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_290_000_000 as u64)
	}
	// Storage: unknown [0x673a3a70616765733a3ae3ad2a77252ca4832b72b879b812f41709da47b7ec51] (r:16 w:0)
	/// The range of component `n` is `[0, 64]`.
	fn gr_read_per_kb(_n: u32, ) -> Weight {
		Weight::from_ref_time(850_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(16 as u64))
	}
	/// The range of component `r` is `[0, 20]`.
	fn gr_block_height(_r: u32, ) -> Weight {
		Weight::from_ref_time(913_000_000 as u64)
	}
	/// The range of component `r` is `[0, 20]`.
	fn gr_block_timestamp(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_045_000_000 as u64)
	}
	// Storage: unknown [0x673a3a70616765733a3a0207794ba5a137171b5f05ff2c1bd11f8fea4624b901] (r:4 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn gr_send_init(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_560_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3a6e81cbf116b4905a1114d7c30e23e3c43cdc58135aef] (r:4 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn gr_send_push(_r: u32, ) -> Weight {
		Weight::from_ref_time(3_136_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3a44695dfc4d9beac03b4302b31a49e28867946b6cf30f] (r:4 w:0)
	// Storage: unknown [0x673a3a70616765733a3a167d1009fa27d5a61fc263cae966a629b8a21828fb46] (r:16 w:0)
	/// The range of component `n` is `[0, 64]`.
	fn gr_send_push_per_kb(_n: u32, ) -> Weight {
		Weight::from_ref_time(4_196_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(16 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3acac5105885b13388b8b4e6263046b04f87d6958f25b3] (r:4 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn gr_send_commit(_r: u32, ) -> Weight {
		Weight::from_ref_time(936_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3ae28e1bbc8e6be901b6738d3ed2933c2428dcbb25ac71] (r:4 w:0)
	// Storage: unknown [0x673a3a70616765733a3a46dbbaacfec1d794cccac805ceb36f6bb21f907601dd] (r:16 w:0)
	/// The range of component `n` is `[0, 64]`.
	fn gr_send_commit_per_kb(_n: u32, ) -> Weight {
		Weight::from_ref_time(214_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(16 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3a71011a0fc4559a88798a0b7945ef9dba2826384b782c] (r:4 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn gr_reply_commit(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_661_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3a9f858a46ff5c198d967647e22af96734e462df4689ef] (r:4 w:0)
	// Storage: unknown [0x673a3a70616765733a3aa0fc4570c9a2893f19a39382bd2a12db6c3c9c95a926] (r:8 w:0)
	/// The range of component `n` is `[0, 64]`.
	fn gr_reply_commit_per_kb(_n: u32, ) -> Weight {
		Weight::from_ref_time(226_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(8 as u64))
	}
	/// The range of component `r` is `[0, 20]`.
	fn gr_reply_push(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_463_000_000 as u64)
	}
	// Storage: unknown [0x673a3a70616765733a3adc4575abb29cf19a9f7b629662062a342860ca07b38c] (r:16 w:0)
	/// The range of component `n` is `[0, 64]`.
	fn gr_reply_push_per_kb(_n: u32, ) -> Weight {
		Weight::from_ref_time(3_879_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(16 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3a2afa5222bd72d8ea985558fd184d9076509fba9faba8] (r:4 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn gr_reply_to(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_297_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
	}
	/// The range of component `r` is `[0, 20]`.
	fn gr_debug(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_325_000_000 as u64)
	}
	/// The range of component `r` is `[0, 20]`.
	fn gr_exit_code(_r: u32, ) -> Weight {
		Weight::from_ref_time(933_000_000 as u64)
	}
	// Storage: unknown [0x673a3a70616765733a3ac043f76f26de09e680aebd6d75f1f7c12d185f681548] (r:4 w:0)
	/// The range of component `r` is `[0, 1]`.
	fn gr_exit(_r: u32, ) -> Weight {
		Weight::from_ref_time(135_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
	}
	/// The range of component `r` is `[0, 1]`.
	fn gr_leave(_r: u32, ) -> Weight {
		Weight::from_ref_time(72_000_000 as u64)
	}
	/// The range of component `r` is `[0, 1]`.
	fn gr_wait(_r: u32, ) -> Weight {
		Weight::from_ref_time(72_000_000 as u64)
	}
	// Storage: unknown [0x673a3a70616765733a3aab9e5120a731aa345bd0bb0e6a3143c71367eff1f244] (r:4 w:0)
	/// The range of component `r` is `[0, 1]`.
	fn gr_wait_for(_r: u32, ) -> Weight {
		Weight::from_ref_time(106_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3ac56a670de428100e702d02d7e8f25cbdd3be87d91f0e] (r:4 w:0)
	/// The range of component `r` is `[0, 1]`.
	fn gr_wait_no_more(_r: u32, ) -> Weight {
		Weight::from_ref_time(109_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3a50cb5c771096ae3716617c5c5640e7113046ab96e30e] (r:16 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn gr_wake(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_996_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(16 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3a82832290c184d7e3a7dcd4165019c2d4102bb341bec6] (r:4 w:0)
	/// The range of component `r` is `[0, 1]`.
	fn gr_create_program_wgas(_r: u32, ) -> Weight {
		Weight::from_ref_time(169_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3a4d0f1788ec047f5efb1b8e5ce164bcf6c50bc5517a36] (r:4 w:0)
	// Storage: unknown [0x673a3a70616765733a3a0ce1adf902556c256994b8c52048d1da014543efa5a9] (r:16 w:0)
	/// The range of component `n` is `[0, 64]`.
	fn gr_create_program_wgas_per_kb(_n: u32, ) -> Weight {
		Weight::from_ref_time(235_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(16 as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64const(_r: u32, ) -> Weight {
		Weight::from_ref_time(9_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64load(_r: u32, ) -> Weight {
		Weight::from_ref_time(72_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64store(_r: u32, ) -> Weight {
		Weight::from_ref_time(100_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_select(_r: u32, ) -> Weight {
		Weight::from_ref_time(104_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_if(_r: u32, ) -> Weight {
		Weight::from_ref_time(99_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br(_r: u32, ) -> Weight {
		Weight::from_ref_time(17_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_if(_r: u32, ) -> Weight {
		Weight::from_ref_time(44_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_table(_r: u32, ) -> Weight {
		Weight::from_ref_time(118_000_000 as u64)
	}
	/// The range of component `e` is `[1, 256]`.
	fn instr_br_table_per_entry(_e: u32, ) -> Weight {
		Weight::from_ref_time(43_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call(_r: u32, ) -> Weight {
		Weight::from_ref_time(28_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call_indirect(_r: u32, ) -> Weight {
		Weight::from_ref_time(176_000_000 as u64)
	}
	/// The range of component `p` is `[0, 128]`.
	fn instr_call_indirect_per_param(_p: u32, ) -> Weight {
		Weight::from_ref_time(90_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_get(_r: u32, ) -> Weight {
		Weight::from_ref_time(41_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_set(_r: u32, ) -> Weight {
		Weight::from_ref_time(62_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_tee(_r: u32, ) -> Weight {
		Weight::from_ref_time(54_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_get(_r: u32, ) -> Weight {
		Weight::from_ref_time(35_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_set(_r: u32, ) -> Weight {
		Weight::from_ref_time(60_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_memory_current(_r: u32, ) -> Weight {
		Weight::from_ref_time(95_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64clz(_r: u32, ) -> Weight {
		Weight::from_ref_time(36_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ctz(_r: u32, ) -> Weight {
		Weight::from_ref_time(41_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64popcnt(_r: u32, ) -> Weight {
		Weight::from_ref_time(251_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eqz(_r: u32, ) -> Weight {
		Weight::from_ref_time(43_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendsi32(_r: u32, ) -> Weight {
		Weight::from_ref_time(22_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendui32(_r: u32, ) -> Weight {
		Weight::from_ref_time(22_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i32wrapi64(_r: u32, ) -> Weight {
		Weight::from_ref_time(40_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eq(_r: u32, ) -> Weight {
		Weight::from_ref_time(74_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ne(_r: u32, ) -> Weight {
		Weight::from_ref_time(67_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64lts(_r: u32, ) -> Weight {
		Weight::from_ref_time(66_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ltu(_r: u32, ) -> Weight {
		Weight::from_ref_time(68_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gts(_r: u32, ) -> Weight {
		Weight::from_ref_time(70_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gtu(_r: u32, ) -> Weight {
		Weight::from_ref_time(70_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64les(_r: u32, ) -> Weight {
		Weight::from_ref_time(70_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64leu(_r: u32, ) -> Weight {
		Weight::from_ref_time(75_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ges(_r: u32, ) -> Weight {
		Weight::from_ref_time(68_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64geu(_r: u32, ) -> Weight {
		Weight::from_ref_time(72_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64add(_r: u32, ) -> Weight {
		Weight::from_ref_time(62_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64sub(_r: u32, ) -> Weight {
		Weight::from_ref_time(70_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64mul(_r: u32, ) -> Weight {
		Weight::from_ref_time(69_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divs(_r: u32, ) -> Weight {
		Weight::from_ref_time(109_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divu(_r: u32, ) -> Weight {
		Weight::from_ref_time(67_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rems(_r: u32, ) -> Weight {
		Weight::from_ref_time(73_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64remu(_r: u32, ) -> Weight {
		Weight::from_ref_time(74_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64and(_r: u32, ) -> Weight {
		Weight::from_ref_time(64_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64or(_r: u32, ) -> Weight {
		Weight::from_ref_time(73_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64xor(_r: u32, ) -> Weight {
		Weight::from_ref_time(66_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shl(_r: u32, ) -> Weight {
		Weight::from_ref_time(61_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shrs(_r: u32, ) -> Weight {
		Weight::from_ref_time(61_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shru(_r: u32, ) -> Weight {
		Weight::from_ref_time(67_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotl(_r: u32, ) -> Weight {
		Weight::from_ref_time(40_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotr(_r: u32, ) -> Weight {
		Weight::from_ref_time(62_000_000 as u64)
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn allocation_cost() -> Weight {
		// To be changed with the proper value.
		RocksDbWeight::get().writes(1)
	}
	fn grow_cost() -> Weight {
		// To be changed with the proper value.
		RocksDbWeight::get().writes(1)
	}
	fn initial_cost() -> Weight {
		RocksDbWeight::get().writes(1)
	}
	fn load_cost() -> Weight {
		RocksDbWeight::get().reads(1)
	}
	// Storage: GearMessenger Mailbox (r:1 w:1)
	// Storage: GearGas GasNodes (r:1 w:1)
	// Storage: GearGas TotalIssuance (r:1 w:1)
	// Storage: Authorship Author (r:1 w:0)
	// Storage: System Account (r:3 w:3)
	// Storage: GearScheduler TaskPool (r:1 w:0)
	fn claim_value() -> Weight {
		Weight::from_ref_time(72_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: GearProgram CodeStorage (r:1 w:1)
	// Storage: GearProgram MetadataStorage (r:0 w:1)
	// Storage: GearProgram OriginalCodeStorage (r:0 w:1)
	/// The range of component `c` is `[0, 256902]`.
	fn upload_code(_c: u32, ) -> Weight {
		Weight::from_ref_time(8_522_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: GearProgram CodeStorage (r:1 w:0)
	// Storage: unknown [0x673a3a70726f673a3a323cf4aa254c1be0e18412174dc4d57ca4f0b2ea4542d6] (r:1 w:1)
	// Storage: GearProgram PausedPrograms (r:1 w:0)
	// Storage: GearMessenger Sent (r:1 w:1)
	// Storage: GearGas GasNodes (r:1 w:1)
	// Storage: GearGas TotalIssuance (r:1 w:1)
	// Storage: GearMessenger Dispatches (r:1 w:1)
	// Storage: GearMessenger Tail (r:1 w:1)
	// Storage: GearMessenger Head (r:1 w:1)
	// Storage: GearMessenger CounterForDispatches (r:1 w:1)
	// Storage: unknown [0x673a3a70726f673a3a94881ebe0d4de08a4f739644a14fae5b17de813a8844dc] (r:1 w:1)
	/// The range of component `s` is `[0, 4194304]`.
	fn create_program(_s: u32, ) -> Weight {
		Weight::from_ref_time(5_967_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(10 as u64))
			.saturating_add(RocksDbWeight::get().writes(8 as u64))
	}
	// Storage: unknown [0x673a3a70726f673a3a94881ebe0d4de08a4f739644a14fae5b17de813a8844dc] (r:1 w:1)
	// Storage: GearProgram PausedPrograms (r:1 w:0)
	// Storage: GearProgram CodeStorage (r:1 w:1)
	// Storage: GearMessenger Sent (r:1 w:1)
	// Storage: GearGas GasNodes (r:1 w:1)
	// Storage: GearGas TotalIssuance (r:1 w:1)
	// Storage: GearMessenger Dispatches (r:1 w:1)
	// Storage: GearMessenger Tail (r:1 w:1)
	// Storage: GearMessenger Head (r:1 w:1)
	// Storage: GearMessenger CounterForDispatches (r:1 w:1)
	// Storage: GearProgram MetadataStorage (r:0 w:1)
	// Storage: GearProgram OriginalCodeStorage (r:0 w:1)
	// Storage: unknown [0x673a3a70726f673a3ade48a89f9549ed2ef35c09b96d6e977f4479a7b3814886] (r:1 w:1)
	// Storage: unknown [0x673a3a70726f673a3a92d213da329a9ef3447353644a655ec95b8a4868845f6e] (r:1 w:1)
	/// The range of component `c` is `[0, 256902]`.
	/// The range of component `s` is `[0, 4194304]`.
	fn upload_program(c: u32, s: u32, ) -> Weight {
		Weight::from_ref_time(20_000_000 as u64)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(33_000 as u64).saturating_mul(c as u64))
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(1_000 as u64).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(10 as u64))
			.saturating_add(RocksDbWeight::get().writes(11 as u64))
	}
	// Storage: GearMessenger Sent (r:1 w:1)
	// Storage: unknown [0x673a3a70726f673a3a13614ad1183876953cdd99749d6dcf5d41b7ffc0740cd2] (r:1 w:0)
	// Storage: GearProgram PausedPrograms (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: GearGas GasNodes (r:1 w:1)
	// Storage: GearGas TotalIssuance (r:1 w:1)
	// Storage: GearMessenger Dispatches (r:1 w:1)
	// Storage: GearMessenger Tail (r:1 w:1)
	// Storage: GearMessenger Head (r:1 w:1)
	// Storage: GearMessenger CounterForDispatches (r:1 w:1)
	/// The range of component `p` is `[0, 65536]`.
	fn send_message(_p: u32, ) -> Weight {
		Weight::from_ref_time(97_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(10 as u64))
			.saturating_add(RocksDbWeight::get().writes(8 as u64))
	}
	// Storage: GearMessenger Mailbox (r:1 w:1)
	// Storage: GearGas GasNodes (r:2 w:2)
	// Storage: GearGas TotalIssuance (r:1 w:1)
	// Storage: Authorship Author (r:1 w:0)
	// Storage: System Account (r:3 w:3)
	// Storage: GearScheduler TaskPool (r:1 w:0)
	// Storage: unknown [0x673a3a70726f673a3a13614ad1183876953cdd99749d6dcf5d41b7ffc0740cd2] (r:1 w:0)
	// Storage: GearMessenger Dispatches (r:1 w:1)
	// Storage: GearMessenger Tail (r:1 w:1)
	// Storage: GearMessenger Head (r:1 w:1)
	// Storage: GearMessenger CounterForDispatches (r:1 w:1)
	/// The range of component `p` is `[0, 65536]`.
	fn send_reply(_p: u32, ) -> Weight {
		Weight::from_ref_time(125_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(14 as u64))
			.saturating_add(RocksDbWeight::get().writes(11 as u64))
	}
	// Storage: unknown [0x673a3a70726f673a3a135181f839061994ea219e9237c5210e5e396044dceff1] (r:1 w:1)
	// Storage: GearProgram PausedPrograms (r:2 w:0)
	// Storage: System Account (r:3 w:2)
	// Storage: GearProgram CodeStorage (r:1 w:1)
	// Storage: GearMessenger Sent (r:1 w:1)
	// Storage: GearGas GasNodes (r:1 w:1)
	// Storage: GearGas TotalIssuance (r:1 w:1)
	// Storage: GearMessenger Dispatches (r:1 w:1)
	// Storage: GearMessenger Tail (r:1 w:1)
	// Storage: GearMessenger Head (r:1 w:1)
	// Storage: GearMessenger CounterForDispatches (r:1 w:1)
	// Storage: System ParentHash (r:1 w:1)
	// Storage: Authorship Uncles (r:1 w:1)
	// Storage: Authorship Author (r:1 w:1)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: GearDebug RemapId (r:1 w:0)
	// Storage: GearMessenger QueueProcessing (r:1 w:0)
	// Storage: GearMessenger Dequeued (r:1 w:1)
	// Storage: GearGas Allowance (r:1 w:1)
	// Storage: unknown [0x673a3a70726f675f776169743a3a135181f839061994ea219e9237c5210e5e39] (r:1 w:1)
	// Storage: unknown [0x673a3a70726f673a3a5c77033fce8a9045824a6690bbf99c6db269502f0a8d1d] (r:1 w:0)
	// Storage: GearDebug DebugMode (r:1 w:0)
	// Storage: GearProgram MetadataStorage (r:0 w:1)
	// Storage: GearProgram OriginalCodeStorage (r:0 w:1)
	// Storage: System BlockWeight (r:0 w:1)
	// Storage: System Digest (r:0 w:1)
	// Storage: System BlockHash (r:0 w:1)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:0 w:1)
	// Storage: Authorship DidSetUncles (r:0 w:1)
	// Storage: unknown [0x673a3a70726f673a3adca6df2507911b3b689f08d01768b4b4fc63471932a345] (r:1 w:1)
	// Storage: unknown [0x673a3a70726f675f776169743a3adca6df2507911b3b689f08d01768b4b4fc63] (r:1 w:1)
	/// The range of component `q` is `[1, 512]`.
	fn initial_allocation(_q: u32, ) -> Weight {
		Weight::from_ref_time(325_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(26 as u64))
			.saturating_add(RocksDbWeight::get().writes(24 as u64))
	}
	// Storage: unknown [0x673a3a70726f673a3a919c19deed1eb1c0cc641a32811c2832e096fa7152fce6] (r:1 w:1)
	// Storage: GearProgram PausedPrograms (r:2 w:0)
	// Storage: System Account (r:3 w:2)
	// Storage: GearProgram CodeStorage (r:1 w:1)
	// Storage: GearMessenger Sent (r:1 w:1)
	// Storage: GearGas GasNodes (r:1 w:1)
	// Storage: GearGas TotalIssuance (r:1 w:1)
	// Storage: GearMessenger Dispatches (r:1 w:1)
	// Storage: GearMessenger Tail (r:1 w:1)
	// Storage: GearMessenger Head (r:1 w:1)
	// Storage: GearMessenger CounterForDispatches (r:1 w:1)
	// Storage: System ParentHash (r:1 w:1)
	// Storage: Authorship Uncles (r:1 w:1)
	// Storage: Authorship Author (r:1 w:1)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: GearDebug RemapId (r:1 w:0)
	// Storage: GearMessenger QueueProcessing (r:1 w:0)
	// Storage: GearMessenger Dequeued (r:1 w:1)
	// Storage: GearGas Allowance (r:1 w:1)
	// Storage: unknown [0x673a3a70726f675f776169743a3a919c19deed1eb1c0cc641a32811c2832e096] (r:1 w:1)
	// Storage: unknown [0x673a3a70726f673a3a5c77033fce8a9045824a6690bbf99c6db269502f0a8d1d] (r:1 w:0)
	// Storage: GearDebug DebugMode (r:1 w:0)
	// Storage: GearProgram MetadataStorage (r:0 w:1)
	// Storage: GearProgram OriginalCodeStorage (r:0 w:1)
	// Storage: System BlockWeight (r:0 w:1)
	// Storage: System Digest (r:0 w:1)
	// Storage: System BlockHash (r:0 w:1)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:0 w:1)
	// Storage: Authorship DidSetUncles (r:0 w:1)
	// Storage: unknown [0x673a3a70726f673a3ace9252cc52202e500dbc67093eb525c0dc88adf104e1fe] (r:1 w:1)
	// Storage: unknown [0x673a3a70726f675f776169743a3ace9252cc52202e500dbc67093eb525c0dc88] (r:1 w:1)
	/// The range of component `q` is `[0, 512]`.
	fn alloc_in_handle(_q: u32, ) -> Weight {
		Weight::from_ref_time(246_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(26 as u64))
			.saturating_add(RocksDbWeight::get().writes(24 as u64))
	}
	// Storage: GearProgram CodeStorage (r:1 w:1)
	// Storage: GearProgram OriginalCodeStorage (r:1 w:0)
	/// The range of component `c` is `[0, 524288]`.
	fn reinstrument(_c: u32, ) -> Weight {
		Weight::from_ref_time(17_315_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	/// The range of component `r` is `[0, 20]`.
	fn alloc(_r: u32, ) -> Weight {
		Weight::from_ref_time(3_625_000_000 as u64)
	}
	/// The range of component `r` is `[0, 20]`.
	fn gas(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_037_000_000 as u64)
	}
	/// The range of component `r` is `[0, 20]`.
	fn gr_gas_available(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_049_000_000 as u64)
	}
	// Storage: unknown [0x673a3a70616765733a3ade28d7f43cf5e6d129f62eb36a14595635299c0095f1] (r:4 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn gr_msg_id(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_286_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3a0ef2b7f0d6f3d29669cb447c5bd198a035a8e5692996] (r:4 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn gr_origin(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_277_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3ab72dfa63df40720ea4384763055e857d6155ca77377c] (r:4 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn gr_program_id(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_286_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3af15a227d1131b00e865c7479e3fa71564bbd6031a84e] (r:4 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn gr_source(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_271_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3a567279fa154f842482ad7c0de8103e0b3e673c01e64e] (r:4 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn gr_value(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_389_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3abf7ccd00761c77f9e7967ac3c678195fd8072c9fb828] (r:4 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn gr_value_available(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_363_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
	}
	/// The range of component `r` is `[0, 20]`.
	fn gr_size(_r: u32, ) -> Weight {
		Weight::from_ref_time(918_000_000 as u64)
	}
	/// The range of component `r` is `[0, 20]`.
	fn gr_read(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_290_000_000 as u64)
	}
	// Storage: unknown [0x673a3a70616765733a3ae3ad2a77252ca4832b72b879b812f41709da47b7ec51] (r:16 w:0)
	/// The range of component `n` is `[0, 64]`.
	fn gr_read_per_kb(_n: u32, ) -> Weight {
		Weight::from_ref_time(850_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(16 as u64))
	}
	/// The range of component `r` is `[0, 20]`.
	fn gr_block_height(_r: u32, ) -> Weight {
		Weight::from_ref_time(913_000_000 as u64)
	}
	/// The range of component `r` is `[0, 20]`.
	fn gr_block_timestamp(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_045_000_000 as u64)
	}
	// Storage: unknown [0x673a3a70616765733a3a0207794ba5a137171b5f05ff2c1bd11f8fea4624b901] (r:4 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn gr_send_init(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_560_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3a6e81cbf116b4905a1114d7c30e23e3c43cdc58135aef] (r:4 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn gr_send_push(_r: u32, ) -> Weight {
		Weight::from_ref_time(3_136_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3a44695dfc4d9beac03b4302b31a49e28867946b6cf30f] (r:4 w:0)
	// Storage: unknown [0x673a3a70616765733a3a167d1009fa27d5a61fc263cae966a629b8a21828fb46] (r:16 w:0)
	/// The range of component `n` is `[0, 64]`.
	fn gr_send_push_per_kb(_n: u32, ) -> Weight {
		Weight::from_ref_time(4_196_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(16 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3acac5105885b13388b8b4e6263046b04f87d6958f25b3] (r:4 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn gr_send_commit(_r: u32, ) -> Weight {
		Weight::from_ref_time(936_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3ae28e1bbc8e6be901b6738d3ed2933c2428dcbb25ac71] (r:4 w:0)
	// Storage: unknown [0x673a3a70616765733a3a46dbbaacfec1d794cccac805ceb36f6bb21f907601dd] (r:16 w:0)
	/// The range of component `n` is `[0, 64]`.
	fn gr_send_commit_per_kb(_n: u32, ) -> Weight {
		Weight::from_ref_time(214_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(16 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3a71011a0fc4559a88798a0b7945ef9dba2826384b782c] (r:4 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn gr_reply_commit(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_661_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3a9f858a46ff5c198d967647e22af96734e462df4689ef] (r:4 w:0)
	// Storage: unknown [0x673a3a70616765733a3aa0fc4570c9a2893f19a39382bd2a12db6c3c9c95a926] (r:8 w:0)
	/// The range of component `n` is `[0, 64]`.
	fn gr_reply_commit_per_kb(_n: u32, ) -> Weight {
		Weight::from_ref_time(226_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
	}
	/// The range of component `r` is `[0, 20]`.
	fn gr_reply_push(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_463_000_000 as u64)
	}
	// Storage: unknown [0x673a3a70616765733a3adc4575abb29cf19a9f7b629662062a342860ca07b38c] (r:16 w:0)
	/// The range of component `n` is `[0, 64]`.
	fn gr_reply_push_per_kb(_n: u32, ) -> Weight {
		Weight::from_ref_time(3_879_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(16 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3a2afa5222bd72d8ea985558fd184d9076509fba9faba8] (r:4 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn gr_reply_to(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_297_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
	}
	/// The range of component `r` is `[0, 20]`.
	fn gr_debug(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_325_000_000 as u64)
	}
	/// The range of component `r` is `[0, 20]`.
	fn gr_exit_code(_r: u32, ) -> Weight {
		Weight::from_ref_time(933_000_000 as u64)
	}
	// Storage: unknown [0x673a3a70616765733a3ac043f76f26de09e680aebd6d75f1f7c12d185f681548] (r:4 w:0)
	/// The range of component `r` is `[0, 1]`.
	fn gr_exit(_r: u32, ) -> Weight {
		Weight::from_ref_time(135_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
	}
	/// The range of component `r` is `[0, 1]`.
	fn gr_leave(_r: u32, ) -> Weight {
		Weight::from_ref_time(72_000_000 as u64)
	}
	/// The range of component `r` is `[0, 1]`.
	fn gr_wait(_r: u32, ) -> Weight {
		Weight::from_ref_time(72_000_000 as u64)
	}
	// Storage: unknown [0x673a3a70616765733a3aab9e5120a731aa345bd0bb0e6a3143c71367eff1f244] (r:4 w:0)
	/// The range of component `r` is `[0, 1]`.
	fn gr_wait_for(_r: u32, ) -> Weight {
		Weight::from_ref_time(106_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3ac56a670de428100e702d02d7e8f25cbdd3be87d91f0e] (r:4 w:0)
	/// The range of component `r` is `[0, 1]`.
	fn gr_wait_no_more(_r: u32, ) -> Weight {
		Weight::from_ref_time(109_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3a50cb5c771096ae3716617c5c5640e7113046ab96e30e] (r:16 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn gr_wake(_r: u32, ) -> Weight {
		Weight::from_ref_time(1_996_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(16 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3a82832290c184d7e3a7dcd4165019c2d4102bb341bec6] (r:4 w:0)
	/// The range of component `r` is `[0, 1]`.
	fn gr_create_program_wgas(_r: u32, ) -> Weight {
		Weight::from_ref_time(169_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
	}
	// Storage: unknown [0x673a3a70616765733a3a4d0f1788ec047f5efb1b8e5ce164bcf6c50bc5517a36] (r:4 w:0)
	// Storage: unknown [0x673a3a70616765733a3a0ce1adf902556c256994b8c52048d1da014543efa5a9] (r:16 w:0)
	/// The range of component `n` is `[0, 64]`.
	fn gr_create_program_wgas_per_kb(_n: u32, ) -> Weight {
		Weight::from_ref_time(235_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(16 as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64const(_r: u32, ) -> Weight {
		Weight::from_ref_time(9_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64load(_r: u32, ) -> Weight {
		Weight::from_ref_time(72_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64store(_r: u32, ) -> Weight {
		Weight::from_ref_time(100_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_select(_r: u32, ) -> Weight {
		Weight::from_ref_time(104_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_if(_r: u32, ) -> Weight {
		Weight::from_ref_time(99_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br(_r: u32, ) -> Weight {
		Weight::from_ref_time(17_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_if(_r: u32, ) -> Weight {
		Weight::from_ref_time(44_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_table(_r: u32, ) -> Weight {
		Weight::from_ref_time(118_000_000 as u64)
	}
	/// The range of component `e` is `[1, 256]`.
	fn instr_br_table_per_entry(_e: u32, ) -> Weight {
		Weight::from_ref_time(43_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call(_r: u32, ) -> Weight {
		Weight::from_ref_time(28_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call_indirect(_r: u32, ) -> Weight {
		Weight::from_ref_time(176_000_000 as u64)
	}
	/// The range of component `p` is `[0, 128]`.
	fn instr_call_indirect_per_param(_p: u32, ) -> Weight {
		Weight::from_ref_time(90_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_get(_r: u32, ) -> Weight {
		Weight::from_ref_time(41_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_set(_r: u32, ) -> Weight {
		Weight::from_ref_time(62_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_tee(_r: u32, ) -> Weight {
		Weight::from_ref_time(54_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_get(_r: u32, ) -> Weight {
		Weight::from_ref_time(35_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_set(_r: u32, ) -> Weight {
		Weight::from_ref_time(60_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_memory_current(_r: u32, ) -> Weight {
		Weight::from_ref_time(95_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64clz(_r: u32, ) -> Weight {
		Weight::from_ref_time(36_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ctz(_r: u32, ) -> Weight {
		Weight::from_ref_time(41_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64popcnt(_r: u32, ) -> Weight {
		Weight::from_ref_time(251_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eqz(_r: u32, ) -> Weight {
		Weight::from_ref_time(43_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendsi32(_r: u32, ) -> Weight {
		Weight::from_ref_time(22_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendui32(_r: u32, ) -> Weight {
		Weight::from_ref_time(22_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i32wrapi64(_r: u32, ) -> Weight {
		Weight::from_ref_time(40_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eq(_r: u32, ) -> Weight {
		Weight::from_ref_time(74_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ne(_r: u32, ) -> Weight {
		Weight::from_ref_time(67_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64lts(_r: u32, ) -> Weight {
		Weight::from_ref_time(66_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ltu(_r: u32, ) -> Weight {
		Weight::from_ref_time(68_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gts(_r: u32, ) -> Weight {
		Weight::from_ref_time(70_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gtu(_r: u32, ) -> Weight {
		Weight::from_ref_time(70_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64les(_r: u32, ) -> Weight {
		Weight::from_ref_time(70_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64leu(_r: u32, ) -> Weight {
		Weight::from_ref_time(75_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ges(_r: u32, ) -> Weight {
		Weight::from_ref_time(68_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64geu(_r: u32, ) -> Weight {
		Weight::from_ref_time(72_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64add(_r: u32, ) -> Weight {
		Weight::from_ref_time(62_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64sub(_r: u32, ) -> Weight {
		Weight::from_ref_time(70_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64mul(_r: u32, ) -> Weight {
		Weight::from_ref_time(69_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divs(_r: u32, ) -> Weight {
		Weight::from_ref_time(109_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divu(_r: u32, ) -> Weight {
		Weight::from_ref_time(67_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rems(_r: u32, ) -> Weight {
		Weight::from_ref_time(73_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64remu(_r: u32, ) -> Weight {
		Weight::from_ref_time(74_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64and(_r: u32, ) -> Weight {
		Weight::from_ref_time(64_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64or(_r: u32, ) -> Weight {
		Weight::from_ref_time(73_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64xor(_r: u32, ) -> Weight {
		Weight::from_ref_time(66_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shl(_r: u32, ) -> Weight {
		Weight::from_ref_time(61_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shrs(_r: u32, ) -> Weight {
		Weight::from_ref_time(61_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shru(_r: u32, ) -> Weight {
		Weight::from_ref_time(67_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotl(_r: u32, ) -> Weight {
		Weight::from_ref_time(40_000_000 as u64)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotr(_r: u32, ) -> Weight {
		Weight::from_ref_time(62_000_000 as u64)
	}
}
