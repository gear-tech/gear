// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-08-07, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 954_000 picoseconds.
        Weight::from_parts(1_004_000, 0)
            // Standard Error: 802
            .saturating_add(Weight::from_parts(249_956, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_808_000 picoseconds.
        Weight::from_parts(2_895_000, 3506)
            // Standard Error: 1_086
            .saturating_add(Weight::from_parts(680_150, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 52_458_000 picoseconds.
        Weight::from_parts(84_558_500, 0)
            // Standard Error: 7_412
            .saturating_add(Weight::from_parts(2_377_997, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `42236`
        // Minimum execution time: 81_302_000 picoseconds.
        Weight::from_parts(83_307_000, 42236)
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `886`
        //  Estimated: `21261`
        // Minimum execution time: 52_219_000 picoseconds.
        Weight::from_parts(53_704_000, 21261)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `534`
        //  Estimated: `17070`
        // Minimum execution time: 28_408_000 picoseconds.
        Weight::from_parts(29_714_000, 17070)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 7_918_000 picoseconds.
        Weight::from_parts(6_745_647, 7640)
            // Standard Error: 37_300
            .saturating_add(Weight::from_parts(13_885_473, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1297 + c * (16389 ±0)`
        //  Estimated: `40898 + c * (131112 ±0)`
        // Minimum execution time: 68_486_000 picoseconds.
        Weight::from_parts(69_079_000, 40898)
            // Standard Error: 164_982
            .saturating_add(Weight::from_parts(55_774_264, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 61_635_000 picoseconds.
        Weight::from_parts(64_537_590, 4990)
            // Standard Error: 40_298
            .saturating_add(Weight::from_parts(52_820_238, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `671`
        //  Estimated: `38638`
        // Minimum execution time: 63_344_000 picoseconds.
        Weight::from_parts(76_968_021, 38638)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_598, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `235`
        //  Estimated: `34312`
        // Minimum execution time: 10_980_969_000 picoseconds.
        Weight::from_parts(301_891_685, 34312)
            // Standard Error: 164_203
            .saturating_add(Weight::from_parts(54_383_779, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_548, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `348`
        //  Estimated: `23853`
        // Minimum execution time: 53_732_000 picoseconds.
        Weight::from_parts(35_204_611, 23853)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(1_021, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `978`
        //  Estimated: `42227`
        // Minimum execution time: 82_297_000 picoseconds.
        Weight::from_parts(62_302_593, 42227)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_042, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 298_083_000 picoseconds.
        Weight::from_parts(314_192_353, 74319)
            .saturating_add(T::DbWeight::get().reads(27_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 312_856_000 picoseconds.
        Weight::from_parts(326_607_586, 74319)
            // Standard Error: 1_507
            .saturating_add(Weight::from_parts(723, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(27_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 45_478_000 picoseconds.
        Weight::from_parts(45_769_000, 3899)
            // Standard Error: 42_221
            .saturating_add(Weight::from_parts(51_492_007, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_248_000 picoseconds.
        Weight::from_parts(87_224_000, 0)
            // Standard Error: 4_031_043
            .saturating_add(Weight::from_parts(559_145_890, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 304_310_000 picoseconds.
        Weight::from_parts(240_640_662, 0)
            // Standard Error: 7_875
            .saturating_add(Weight::from_parts(30_931_778, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 144_728_000 picoseconds.
        Weight::from_parts(127_694_995, 0)
            // Standard Error: 344_021
            .saturating_add(Weight::from_parts(63_008_235, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_763_000 picoseconds.
        Weight::from_parts(93_302_515, 0)
            // Standard Error: 3_873
            .saturating_add(Weight::from_parts(2_723_217, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_987_000 picoseconds.
        Weight::from_parts(141_052_149, 0)
            // Standard Error: 29_498
            .saturating_add(Weight::from_parts(3_252_053, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_532_000 picoseconds.
        Weight::from_parts(111_956_884, 0)
            // Standard Error: 420_651
            .saturating_add(Weight::from_parts(124_761_103, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_442_000 picoseconds.
        Weight::from_parts(76_262_730, 0)
            // Standard Error: 310_067
            .saturating_add(Weight::from_parts(115_334_131, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_322_000 picoseconds.
        Weight::from_parts(71_153_919, 0)
            // Standard Error: 293_317
            .saturating_add(Weight::from_parts(115_508_333, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_586_000 picoseconds.
        Weight::from_parts(73_401_225, 0)
            // Standard Error: 306_089
            .saturating_add(Weight::from_parts(115_530_298, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_537_000 picoseconds.
        Weight::from_parts(80_327_682, 0)
            // Standard Error: 275_679
            .saturating_add(Weight::from_parts(114_024_859, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_226_000 picoseconds.
        Weight::from_parts(74_308_323, 0)
            // Standard Error: 291_460
            .saturating_add(Weight::from_parts(115_396_428, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_250_000 picoseconds.
        Weight::from_parts(74_761_588, 0)
            // Standard Error: 317_797
            .saturating_add(Weight::from_parts(115_173_001, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_673_000 picoseconds.
        Weight::from_parts(70_907_772, 0)
            // Standard Error: 347_682
            .saturating_add(Weight::from_parts(118_189_625, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 700_530_000 picoseconds.
        Weight::from_parts(774_384_678, 0)
            // Standard Error: 512_748
            .saturating_add(Weight::from_parts(194_331_468, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 866_889_000 picoseconds.
        Weight::from_parts(872_993_000, 0)
            // Standard Error: 59_048
            .saturating_add(Weight::from_parts(13_399_620, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_291_000 picoseconds.
        Weight::from_parts(75_543_485, 0)
            // Standard Error: 320_701
            .saturating_add(Weight::from_parts(115_757_456, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_780_000 picoseconds.
        Weight::from_parts(68_090_338, 0)
            // Standard Error: 330_050
            .saturating_add(Weight::from_parts(117_803_137, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_394_000 picoseconds.
        Weight::from_parts(88_472_912, 0)
            // Standard Error: 340_524
            .saturating_add(Weight::from_parts(190_044_477, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_081_000 picoseconds.
        Weight::from_parts(85_006_000, 0)
            // Standard Error: 3_456_961
            .saturating_add(Weight::from_parts(860_188_117, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_490_000 picoseconds.
        Weight::from_parts(136_619_765, 0)
            // Standard Error: 439_674
            .saturating_add(Weight::from_parts(308_552_304, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 386_929_000 picoseconds.
        Weight::from_parts(393_325_000, 0)
            // Standard Error: 61_932
            .saturating_add(Weight::from_parts(21_101_790, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_625_000 picoseconds.
        Weight::from_parts(162_584_483, 0)
            // Standard Error: 494_553
            .saturating_add(Weight::from_parts(313_684_139, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 390_932_000 picoseconds.
        Weight::from_parts(393_883_000, 0)
            // Standard Error: 68_646
            .saturating_add(Weight::from_parts(21_188_381, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 708_623_000 picoseconds.
        Weight::from_parts(781_094_266, 0)
            // Standard Error: 460_683
            .saturating_add(Weight::from_parts(328_993_362, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 710_228_000 picoseconds.
        Weight::from_parts(774_190_634, 0)
            // Standard Error: 483_646
            .saturating_add(Weight::from_parts(330_057_876, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_510_000 picoseconds.
        Weight::from_parts(64_097_635, 0)
            // Standard Error: 358_570
            .saturating_add(Weight::from_parts(126_095_109, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_430_098_000 picoseconds.
        Weight::from_parts(2_605_278_898, 0)
            // Standard Error: 439_185
            .saturating_add(Weight::from_parts(217_479_981, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 358_553_000 picoseconds.
        Weight::from_parts(364_183_000, 0)
            // Standard Error: 51_397
            .saturating_add(Weight::from_parts(30_914_040, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_464_581_000 picoseconds.
        Weight::from_parts(2_580_044_243, 0)
            // Standard Error: 461_216
            .saturating_add(Weight::from_parts(272_575_116, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_438_114_000 picoseconds.
        Weight::from_parts(2_597_881_615, 0)
            // Standard Error: 400_982
            .saturating_add(Weight::from_parts(275_718_502, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 244_206_000 picoseconds.
        Weight::from_parts(321_175_021, 0)
            // Standard Error: 460_445
            .saturating_add(Weight::from_parts(322_059_081, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 559_346_000 picoseconds.
        Weight::from_parts(571_004_000, 0)
            // Standard Error: 59_840
            .saturating_add(Weight::from_parts(21_370_093, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_620_633_000 picoseconds.
        Weight::from_parts(2_741_869_292, 0)
            // Standard Error: 620_120
            .saturating_add(Weight::from_parts(289_781_719, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_438_000 picoseconds.
        Weight::from_parts(86_817_816, 0)
            // Standard Error: 234_731
            .saturating_add(Weight::from_parts(19_849_283, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_002_000 picoseconds.
        Weight::from_parts(88_114_999, 0)
            // Standard Error: 1_128
            .saturating_add(Weight::from_parts(427_426, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_436_000 picoseconds.
        Weight::from_parts(88_440_285, 0)
            // Standard Error: 277_544
            .saturating_add(Weight::from_parts(17_399_914, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_800_000 picoseconds.
        Weight::from_parts(89_756_983, 0)
            // Standard Error: 907
            .saturating_add(Weight::from_parts(428_998, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_754_000 picoseconds.
        Weight::from_parts(87_296_014, 0)
            // Standard Error: 336_747
            .saturating_add(Weight::from_parts(20_299_385, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_952_000 picoseconds.
        Weight::from_parts(86_840_575, 0)
            // Standard Error: 272_708
            .saturating_add(Weight::from_parts(19_217_524, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_498_000 picoseconds.
        Weight::from_parts(126_431_779, 0)
            // Standard Error: 460_480
            .saturating_add(Weight::from_parts(198_940_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_862_000 picoseconds.
        Weight::from_parts(98_611_000, 0)
            // Standard Error: 2_677
            .saturating_add(Weight::from_parts(662_266, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 698_914_000 picoseconds.
        Weight::from_parts(718_405_100, 0)
            // Standard Error: 1_891_960
            .saturating_add(Weight::from_parts(24_867_800, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 699_975_000 picoseconds.
        Weight::from_parts(718_806_789, 0)
            // Standard Error: 1_919_531
            .saturating_add(Weight::from_parts(51_192_710, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_002_000 picoseconds.
        Weight::from_parts(99_331_989, 0)
            // Standard Error: 287_602
            .saturating_add(Weight::from_parts(9_719_710, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_501_000 picoseconds.
        Weight::from_parts(87_026_327, 0)
            // Standard Error: 1_214
            .saturating_add(Weight::from_parts(429_134, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_228_000 picoseconds.
        Weight::from_parts(97_923_691, 0)
            // Standard Error: 288_469
            .saturating_add(Weight::from_parts(9_669_908, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_908_000 picoseconds.
        Weight::from_parts(87_613_705, 0)
            // Standard Error: 1_237
            .saturating_add(Weight::from_parts(431_412, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_385_000 picoseconds.
        Weight::from_parts(74_453_057, 0)
            // Standard Error: 309_931
            .saturating_add(Weight::from_parts(117_172_527, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_437_000 picoseconds.
        Weight::from_parts(78_951_443, 0)
            // Standard Error: 294_227
            .saturating_add(Weight::from_parts(116_066_384, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 704_954_000 picoseconds.
        Weight::from_parts(752_735_182, 0)
            // Standard Error: 455_998
            .saturating_add(Weight::from_parts(135_154_607, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 724_451_000 picoseconds.
        Weight::from_parts(738_722_668, 0)
            // Standard Error: 1_014
            .saturating_add(Weight::from_parts(154_329, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_092_586_000 picoseconds.
        Weight::from_parts(3_231_311_035, 0)
            // Standard Error: 506_742
            .saturating_add(Weight::from_parts(159_545_582, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_299_872_000 picoseconds.
        Weight::from_parts(3_317_022_894, 0)
            // Standard Error: 8_542
            .saturating_add(Weight::from_parts(13_645_472, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_966_000 picoseconds.
        Weight::from_parts(106_319_310, 0)
            // Standard Error: 424_534
            .saturating_add(Weight::from_parts(139_885_203, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 142_910_000 picoseconds.
        Weight::from_parts(144_843_000, 0)
            // Standard Error: 54_401
            .saturating_add(Weight::from_parts(25_535_472, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_117_000 picoseconds.
        Weight::from_parts(80_202_149, 0)
            // Standard Error: 296_880
            .saturating_add(Weight::from_parts(114_586_990, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_802_000 picoseconds.
        Weight::from_parts(85_064_295, 0)
            // Standard Error: 248_874
            .saturating_add(Weight::from_parts(27_314_604, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_854_000 picoseconds.
        Weight::from_parts(86_180_314, 0)
            // Standard Error: 239_162
            .saturating_add(Weight::from_parts(16_391_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_883_000 picoseconds.
        Weight::from_parts(87_058_214, 0)
            // Standard Error: 256_392
            .saturating_add(Weight::from_parts(13_333_285, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_417_000 picoseconds.
        Weight::from_parts(85_403_451, 0)
            // Standard Error: 249_767
            .saturating_add(Weight::from_parts(14_474_948, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_020_000 picoseconds.
        Weight::from_parts(88_080_622, 0)
            // Standard Error: 253_221
            .saturating_add(Weight::from_parts(11_403_277, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 138_317_000 picoseconds.
        Weight::from_parts(187_894_162, 0)
            // Standard Error: 376_519
            .saturating_add(Weight::from_parts(209_723_429, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_047_000 picoseconds.
        Weight::from_parts(151_715_771, 0)
            // Standard Error: 425_606
            .saturating_add(Weight::from_parts(396_733_544, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 45_923_081_000 picoseconds.
        Weight::from_parts(45_981_736_000, 0)
            // Standard Error: 274_662
            .saturating_add(Weight::from_parts(6_858_186, 0).saturating_mul(p.into()))
            // Standard Error: 274_649
            .saturating_add(Weight::from_parts(177_291_831, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_680_000 picoseconds.
        Weight::from_parts(157_350_147, 0)
            // Standard Error: 440_994
            .saturating_add(Weight::from_parts(402_511_567, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 42_842_395_000 picoseconds.
        Weight::from_parts(42_890_931_000, 0)
            // Standard Error: 264_187
            .saturating_add(Weight::from_parts(7_896_879, 0).saturating_mul(p.into()))
            // Standard Error: 264_174
            .saturating_add(Weight::from_parts(178_082_248, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_272_000 picoseconds.
        Weight::from_parts(100_008_395, 0)
            // Standard Error: 36_430
            .saturating_add(Weight::from_parts(2_544_223, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 83_139_000 picoseconds.
        Weight::from_parts(122_967_835, 1131)
            // Standard Error: 6_454
            .saturating_add(Weight::from_parts(11_784_103, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 83_229_000 picoseconds.
        Weight::from_parts(83_885_000, 1131)
            // Standard Error: 37_558
            .saturating_add(Weight::from_parts(35_503_677, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_139_187_000 picoseconds.
        Weight::from_parts(5_806_599_304, 5069931)
            // Standard Error: 75_881
            .saturating_add(Weight::from_parts(36_513_688, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 82_177_000 picoseconds.
        Weight::from_parts(83_595_000, 1939)
            // Standard Error: 45_778
            .saturating_add(Weight::from_parts(47_155_630, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 90_231_000 picoseconds.
        Weight::from_parts(95_944_378, 1131)
            // Standard Error: 61_821
            .saturating_add(Weight::from_parts(35_941_066, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 734_006_000 picoseconds.
        Weight::from_parts(717_384_508, 1496)
            // Standard Error: 375_292
            .saturating_add(Weight::from_parts(47_930_581, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_121_849_000 picoseconds.
        Weight::from_parts(1_147_558_033, 317931)
            // Standard Error: 373_146
            .saturating_add(Weight::from_parts(45_393_418, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_162_000 picoseconds.
        Weight::from_parts(2_220_392, 0)
            // Standard Error: 8_848
            .saturating_add(Weight::from_parts(24_205_605, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_352_664_000 picoseconds.
        Weight::from_parts(4_153_366_897, 0)
            // Standard Error: 60_193
            .saturating_add(Weight::from_parts(4_722_164, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_357_649_000 picoseconds.
        Weight::from_parts(4_256_499_798, 0)
            // Standard Error: 57_942
            .saturating_add(Weight::from_parts(4_200_870, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_269_998_000 picoseconds.
        Weight::from_parts(11_525_100_351, 0)
            // Standard Error: 204_230
            .saturating_add(Weight::from_parts(8_423_588, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_204_810_000 picoseconds.
        Weight::from_parts(10_982_673_143, 0)
            // Standard Error: 145_327
            .saturating_add(Weight::from_parts(9_198_033, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_074_000 picoseconds.
        Weight::from_parts(2_108_000, 0)
            // Standard Error: 9_031
            .saturating_add(Weight::from_parts(3_829_182, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_020_000 picoseconds.
        Weight::from_parts(2_118_000, 0)
            // Standard Error: 5_295
            .saturating_add(Weight::from_parts(2_980_329, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_032_000 picoseconds.
        Weight::from_parts(3_411_359, 0)
            // Standard Error: 1_146
            .saturating_add(Weight::from_parts(1_563_906, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_096_000 picoseconds.
        Weight::from_parts(2_140_000, 0)
            // Standard Error: 8_349
            .saturating_add(Weight::from_parts(2_904_673, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_128_000 picoseconds.
        Weight::from_parts(2_159_000, 0)
            // Standard Error: 8_100
            .saturating_add(Weight::from_parts(5_229_400, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_838_000 picoseconds.
        Weight::from_parts(5_309_346, 0)
            // Standard Error: 2_580
            .saturating_add(Weight::from_parts(129_982, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_100_000 picoseconds.
        Weight::from_parts(3_593_285, 0)
            // Standard Error: 6_648
            .saturating_add(Weight::from_parts(2_597_926, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_597_926 -
            2_429_048, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_086_000 picoseconds.
        Weight::from_parts(3_972_773, 0)
            // Standard Error: 12_538
            .saturating_add(Weight::from_parts(2_429_048, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_591_000 picoseconds.
        Weight::from_parts(12_798_134, 0)
            // Standard Error: 23_023
            .saturating_add(Weight::from_parts(9_786_464, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_274_000 picoseconds.
        Weight::from_parts(1_706_188, 0)
            // Standard Error: 6_199
            .saturating_add(Weight::from_parts(1_212_443, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_221_000 picoseconds.
        Weight::from_parts(5_538_574, 0)
            // Standard Error: 12
            .saturating_add(Weight::from_parts(12, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_100_000 picoseconds.
        Weight::from_parts(1_785_103, 0)
            // Standard Error: 2_948
            .saturating_add(Weight::from_parts(249_981, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_123_000 picoseconds.
        Weight::from_parts(2_187_000, 0)
            // Standard Error: 5_664
            .saturating_add(Weight::from_parts(719_187, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_137_000 picoseconds.
        Weight::from_parts(2_214_000, 0)
            // Standard Error: 5_625
            .saturating_add(Weight::from_parts(709_067, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_168_000 picoseconds.
        Weight::from_parts(2_290_203, 0)
            // Standard Error: 8_984
            .saturating_add(Weight::from_parts(761_843, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_249_000 picoseconds.
        Weight::from_parts(6_302_000, 0)
            // Standard Error: 8_682
            .saturating_add(Weight::from_parts(1_329_653, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_791_000 picoseconds.
        Weight::from_parts(3_929_000, 0)
            // Standard Error: 9_270
            .saturating_add(Weight::from_parts(6_742_685, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_113_000 picoseconds.
        Weight::from_parts(2_192_000, 0)
            // Standard Error: 6_734
            .saturating_add(Weight::from_parts(3_327_207, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_095_000 picoseconds.
        Weight::from_parts(2_141_000, 0)
            // Standard Error: 6_506
            .saturating_add(Weight::from_parts(3_061_891, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_108_000 picoseconds.
        Weight::from_parts(2_141_000, 0)
            // Standard Error: 6_738
            .saturating_add(Weight::from_parts(3_101_844, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_138_000 picoseconds.
        Weight::from_parts(2_155_000, 0)
            // Standard Error: 4_379
            .saturating_add(Weight::from_parts(2_613_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_046_000 picoseconds.
        Weight::from_parts(2_127_000, 0)
            // Standard Error: 3_513
            .saturating_add(Weight::from_parts(525_212, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_127_000 picoseconds.
        Weight::from_parts(1_669_179, 0)
            // Standard Error: 2_817
            .saturating_add(Weight::from_parts(367_599, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_131_000 picoseconds.
        Weight::from_parts(2_169_000, 0)
            // Standard Error: 11_816
            .saturating_add(Weight::from_parts(1_810_781, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_087_000 picoseconds.
        Weight::from_parts(2_194_000, 0)
            // Standard Error: 7_361
            .saturating_add(Weight::from_parts(1_130_773, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_061_000 picoseconds.
        Weight::from_parts(1_850_477, 0)
            // Standard Error: 2_695
            .saturating_add(Weight::from_parts(318_827, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_115_000 picoseconds.
        Weight::from_parts(1_764_589, 0)
            // Standard Error: 2_923
            .saturating_add(Weight::from_parts(329_840, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_109_000 picoseconds.
        Weight::from_parts(859_995, 0)
            // Standard Error: 4_546
            .saturating_add(Weight::from_parts(467_944, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_010_000 picoseconds.
        Weight::from_parts(2_081_000, 0)
            // Standard Error: 3_959
            .saturating_add(Weight::from_parts(472_947, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_105_000 picoseconds.
        Weight::from_parts(1_247_124, 0)
            // Standard Error: 4_390
            .saturating_add(Weight::from_parts(436_907, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_140_000 picoseconds.
        Weight::from_parts(2_251_532, 0)
            // Standard Error: 2_995
            .saturating_add(Weight::from_parts(280_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_119_000 picoseconds.
        Weight::from_parts(2_808_547, 0)
            // Standard Error: 1_453
            .saturating_add(Weight::from_parts(143_409, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_043_000 picoseconds.
        Weight::from_parts(2_639_820, 0)
            // Standard Error: 1_638
            .saturating_add(Weight::from_parts(159_792, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_128_000 picoseconds.
        Weight::from_parts(2_166_000, 0)
            // Standard Error: 11_777
            .saturating_add(Weight::from_parts(1_709_510, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_100_000 picoseconds.
        Weight::from_parts(2_136_000, 0)
            // Standard Error: 7_491
            .saturating_add(Weight::from_parts(1_105_807, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_088_000 picoseconds.
        Weight::from_parts(2_171_000, 0)
            // Standard Error: 11_841
            .saturating_add(Weight::from_parts(1_785_140, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_042_000 picoseconds.
        Weight::from_parts(2_181_000, 0)
            // Standard Error: 7_479
            .saturating_add(Weight::from_parts(1_086_144, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_109_000 picoseconds.
        Weight::from_parts(2_151_000, 0)
            // Standard Error: 13_111
            .saturating_add(Weight::from_parts(1_829_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_130_000 picoseconds.
        Weight::from_parts(2_153_000, 0)
            // Standard Error: 7_632
            .saturating_add(Weight::from_parts(1_102_522, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_155_000 picoseconds.
        Weight::from_parts(2_231_000, 0)
            // Standard Error: 11_689
            .saturating_add(Weight::from_parts(1_768_866, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_094_000 picoseconds.
        Weight::from_parts(2_163_000, 0)
            // Standard Error: 7_348
            .saturating_add(Weight::from_parts(1_057_058, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_095_000 picoseconds.
        Weight::from_parts(2_142_000, 0)
            // Standard Error: 12_173
            .saturating_add(Weight::from_parts(1_786_184, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_122_000 picoseconds.
        Weight::from_parts(2_206_000, 0)
            // Standard Error: 7_244
            .saturating_add(Weight::from_parts(1_066_057, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_090_000 picoseconds.
        Weight::from_parts(2_175_000, 0)
            // Standard Error: 11_967
            .saturating_add(Weight::from_parts(1_782_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_091_000 picoseconds.
        Weight::from_parts(2_169_000, 0)
            // Standard Error: 7_205
            .saturating_add(Weight::from_parts(1_048_140, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_164_000 picoseconds.
        Weight::from_parts(2_198_000, 0)
            // Standard Error: 12_228
            .saturating_add(Weight::from_parts(1_792_751, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_122_000 picoseconds.
        Weight::from_parts(2_186_000, 0)
            // Standard Error: 7_822
            .saturating_add(Weight::from_parts(1_052_385, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_055_000 picoseconds.
        Weight::from_parts(2_135_000, 0)
            // Standard Error: 12_011
            .saturating_add(Weight::from_parts(1_789_504, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_447_000 picoseconds.
        Weight::from_parts(2_540_000, 0)
            // Standard Error: 7_696
            .saturating_add(Weight::from_parts(1_062_612, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_077_000 picoseconds.
        Weight::from_parts(2_107_000, 0)
            // Standard Error: 12_070
            .saturating_add(Weight::from_parts(1_771_498, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_123_000 picoseconds.
        Weight::from_parts(2_156_000, 0)
            // Standard Error: 7_108
            .saturating_add(Weight::from_parts(1_072_471, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_038_000 picoseconds.
        Weight::from_parts(2_145_000, 0)
            // Standard Error: 11_990
            .saturating_add(Weight::from_parts(1_786_273, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_059_000 picoseconds.
        Weight::from_parts(2_122_000, 0)
            // Standard Error: 7_164
            .saturating_add(Weight::from_parts(1_070_909, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_065_000 picoseconds.
        Weight::from_parts(2_181_000, 0)
            // Standard Error: 7_265
            .saturating_add(Weight::from_parts(1_152_228, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_107_000 picoseconds.
        Weight::from_parts(2_160_000, 0)
            // Standard Error: 5_101
            .saturating_add(Weight::from_parts(578_660, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_130_000 picoseconds.
        Weight::from_parts(2_184_000, 0)
            // Standard Error: 9_299
            .saturating_add(Weight::from_parts(1_257_633, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_119_000 picoseconds.
        Weight::from_parts(2_262_000, 0)
            // Standard Error: 3_957
            .saturating_add(Weight::from_parts(557_957, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_045_000 picoseconds.
        Weight::from_parts(2_157_000, 0)
            // Standard Error: 10_839
            .saturating_add(Weight::from_parts(1_686_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_232_000 picoseconds.
        Weight::from_parts(2_250_000, 0)
            // Standard Error: 7_276
            .saturating_add(Weight::from_parts(1_096_252, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_107_000 picoseconds.
        Weight::from_parts(1_434_170, 0)
            // Standard Error: 21_965
            .saturating_add(Weight::from_parts(2_633_663, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_098_000 picoseconds.
        Weight::from_parts(2_122_681, 0)
            // Standard Error: 10_815
            .saturating_add(Weight::from_parts(2_335_842, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_153_000 picoseconds.
        Weight::from_parts(145_632, 0)
            // Standard Error: 12_320
            .saturating_add(Weight::from_parts(2_992_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_142_000 picoseconds.
        Weight::from_parts(2_180_000, 0)
            // Standard Error: 4_944
            .saturating_add(Weight::from_parts(2_466_854, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_143_000 picoseconds.
        Weight::from_parts(2_204_000, 0)
            // Standard Error: 14_500
            .saturating_add(Weight::from_parts(9_530_241, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_132_000 picoseconds.
        Weight::from_parts(2_183_000, 0)
            // Standard Error: 22_303
            .saturating_add(Weight::from_parts(7_508_848, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_133_000 picoseconds.
        Weight::from_parts(2_183_000, 0)
            // Standard Error: 5_407
            .saturating_add(Weight::from_parts(2_948_013, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_124_000 picoseconds.
        Weight::from_parts(2_150_000, 0)
            // Standard Error: 6_372
            .saturating_add(Weight::from_parts(2_362_416, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_174_000 picoseconds.
        Weight::from_parts(2_219_000, 0)
            // Standard Error: 7_670
            .saturating_add(Weight::from_parts(1_174_342, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_094_000 picoseconds.
        Weight::from_parts(2_109_000, 0)
            // Standard Error: 3_988
            .saturating_add(Weight::from_parts(566_949, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_049_000 picoseconds.
        Weight::from_parts(2_117_000, 0)
            // Standard Error: 8_393
            .saturating_add(Weight::from_parts(1_160_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_107_000 picoseconds.
        Weight::from_parts(2_152_000, 0)
            // Standard Error: 4_769
            .saturating_add(Weight::from_parts(585_265, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_115_000 picoseconds.
        Weight::from_parts(2_170_000, 0)
            // Standard Error: 7_943
            .saturating_add(Weight::from_parts(1_185_174, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_139_000 picoseconds.
        Weight::from_parts(2_183_000, 0)
            // Standard Error: 4_608
            .saturating_add(Weight::from_parts(563_329, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_144_000 picoseconds.
        Weight::from_parts(2_178_000, 0)
            // Standard Error: 6_727
            .saturating_add(Weight::from_parts(1_000_757, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_107_000 picoseconds.
        Weight::from_parts(2_212_000, 0)
            // Standard Error: 3_536
            .saturating_add(Weight::from_parts(504_096, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_167_000 picoseconds.
        Weight::from_parts(2_218_000, 0)
            // Standard Error: 7_170
            .saturating_add(Weight::from_parts(966_365, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_149_000 picoseconds.
        Weight::from_parts(140_768, 0)
            // Standard Error: 5_221
            .saturating_add(Weight::from_parts(551_550, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_122_000 picoseconds.
        Weight::from_parts(2_159_000, 0)
            // Standard Error: 7_621
            .saturating_add(Weight::from_parts(997_420, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_069_000 picoseconds.
        Weight::from_parts(2_106_000, 0)
            // Standard Error: 3_980
            .saturating_add(Weight::from_parts(537_014, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_097_000 picoseconds.
        Weight::from_parts(2_191_000, 0)
            // Standard Error: 9_419
            .saturating_add(Weight::from_parts(1_050_292, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_051_000 picoseconds.
        Weight::from_parts(2_118_000, 0)
            // Standard Error: 4_228
            .saturating_add(Weight::from_parts(529_158, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_038_000 picoseconds.
        Weight::from_parts(2_116_000, 0)
            // Standard Error: 7_792
            .saturating_add(Weight::from_parts(1_027_370, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_077_000 picoseconds.
        Weight::from_parts(2_140_000, 0)
            // Standard Error: 4_450
            .saturating_add(Weight::from_parts(534_724, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 954_000 picoseconds.
        Weight::from_parts(1_004_000, 0)
            // Standard Error: 802
            .saturating_add(Weight::from_parts(249_956, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_808_000 picoseconds.
        Weight::from_parts(2_895_000, 3506)
            // Standard Error: 1_086
            .saturating_add(Weight::from_parts(680_150, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 52_458_000 picoseconds.
        Weight::from_parts(84_558_500, 0)
            // Standard Error: 7_412
            .saturating_add(Weight::from_parts(2_377_997, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `42236`
        // Minimum execution time: 81_302_000 picoseconds.
        Weight::from_parts(83_307_000, 42236)
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `886`
        //  Estimated: `21261`
        // Minimum execution time: 52_219_000 picoseconds.
        Weight::from_parts(53_704_000, 21261)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `534`
        //  Estimated: `17070`
        // Minimum execution time: 28_408_000 picoseconds.
        Weight::from_parts(29_714_000, 17070)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 7_918_000 picoseconds.
        Weight::from_parts(6_745_647, 7640)
            // Standard Error: 37_300
            .saturating_add(Weight::from_parts(13_885_473, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1297 + c * (16389 ±0)`
        //  Estimated: `40898 + c * (131112 ±0)`
        // Minimum execution time: 68_486_000 picoseconds.
        Weight::from_parts(69_079_000, 40898)
            // Standard Error: 164_982
            .saturating_add(Weight::from_parts(55_774_264, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 61_635_000 picoseconds.
        Weight::from_parts(64_537_590, 4990)
            // Standard Error: 40_298
            .saturating_add(Weight::from_parts(52_820_238, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `671`
        //  Estimated: `38638`
        // Minimum execution time: 63_344_000 picoseconds.
        Weight::from_parts(76_968_021, 38638)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_598, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `235`
        //  Estimated: `34312`
        // Minimum execution time: 10_980_969_000 picoseconds.
        Weight::from_parts(301_891_685, 34312)
            // Standard Error: 164_203
            .saturating_add(Weight::from_parts(54_383_779, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_548, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `348`
        //  Estimated: `23853`
        // Minimum execution time: 53_732_000 picoseconds.
        Weight::from_parts(35_204_611, 23853)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(1_021, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `978`
        //  Estimated: `42227`
        // Minimum execution time: 82_297_000 picoseconds.
        Weight::from_parts(62_302_593, 42227)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_042, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 298_083_000 picoseconds.
        Weight::from_parts(314_192_353, 74319)
            .saturating_add(RocksDbWeight::get().reads(27_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 312_856_000 picoseconds.
        Weight::from_parts(326_607_586, 74319)
            // Standard Error: 1_507
            .saturating_add(Weight::from_parts(723, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(27_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 45_478_000 picoseconds.
        Weight::from_parts(45_769_000, 3899)
            // Standard Error: 42_221
            .saturating_add(Weight::from_parts(51_492_007, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_248_000 picoseconds.
        Weight::from_parts(87_224_000, 0)
            // Standard Error: 4_031_043
            .saturating_add(Weight::from_parts(559_145_890, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 304_310_000 picoseconds.
        Weight::from_parts(240_640_662, 0)
            // Standard Error: 7_875
            .saturating_add(Weight::from_parts(30_931_778, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 144_728_000 picoseconds.
        Weight::from_parts(127_694_995, 0)
            // Standard Error: 344_021
            .saturating_add(Weight::from_parts(63_008_235, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_763_000 picoseconds.
        Weight::from_parts(93_302_515, 0)
            // Standard Error: 3_873
            .saturating_add(Weight::from_parts(2_723_217, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_987_000 picoseconds.
        Weight::from_parts(141_052_149, 0)
            // Standard Error: 29_498
            .saturating_add(Weight::from_parts(3_252_053, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_532_000 picoseconds.
        Weight::from_parts(111_956_884, 0)
            // Standard Error: 420_651
            .saturating_add(Weight::from_parts(124_761_103, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_442_000 picoseconds.
        Weight::from_parts(76_262_730, 0)
            // Standard Error: 310_067
            .saturating_add(Weight::from_parts(115_334_131, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_322_000 picoseconds.
        Weight::from_parts(71_153_919, 0)
            // Standard Error: 293_317
            .saturating_add(Weight::from_parts(115_508_333, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_586_000 picoseconds.
        Weight::from_parts(73_401_225, 0)
            // Standard Error: 306_089
            .saturating_add(Weight::from_parts(115_530_298, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_537_000 picoseconds.
        Weight::from_parts(80_327_682, 0)
            // Standard Error: 275_679
            .saturating_add(Weight::from_parts(114_024_859, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_226_000 picoseconds.
        Weight::from_parts(74_308_323, 0)
            // Standard Error: 291_460
            .saturating_add(Weight::from_parts(115_396_428, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_250_000 picoseconds.
        Weight::from_parts(74_761_588, 0)
            // Standard Error: 317_797
            .saturating_add(Weight::from_parts(115_173_001, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_673_000 picoseconds.
        Weight::from_parts(70_907_772, 0)
            // Standard Error: 347_682
            .saturating_add(Weight::from_parts(118_189_625, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 700_530_000 picoseconds.
        Weight::from_parts(774_384_678, 0)
            // Standard Error: 512_748
            .saturating_add(Weight::from_parts(194_331_468, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 866_889_000 picoseconds.
        Weight::from_parts(872_993_000, 0)
            // Standard Error: 59_048
            .saturating_add(Weight::from_parts(13_399_620, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_291_000 picoseconds.
        Weight::from_parts(75_543_485, 0)
            // Standard Error: 320_701
            .saturating_add(Weight::from_parts(115_757_456, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_780_000 picoseconds.
        Weight::from_parts(68_090_338, 0)
            // Standard Error: 330_050
            .saturating_add(Weight::from_parts(117_803_137, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_394_000 picoseconds.
        Weight::from_parts(88_472_912, 0)
            // Standard Error: 340_524
            .saturating_add(Weight::from_parts(190_044_477, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_081_000 picoseconds.
        Weight::from_parts(85_006_000, 0)
            // Standard Error: 3_456_961
            .saturating_add(Weight::from_parts(860_188_117, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_490_000 picoseconds.
        Weight::from_parts(136_619_765, 0)
            // Standard Error: 439_674
            .saturating_add(Weight::from_parts(308_552_304, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 386_929_000 picoseconds.
        Weight::from_parts(393_325_000, 0)
            // Standard Error: 61_932
            .saturating_add(Weight::from_parts(21_101_790, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_625_000 picoseconds.
        Weight::from_parts(162_584_483, 0)
            // Standard Error: 494_553
            .saturating_add(Weight::from_parts(313_684_139, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 390_932_000 picoseconds.
        Weight::from_parts(393_883_000, 0)
            // Standard Error: 68_646
            .saturating_add(Weight::from_parts(21_188_381, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 708_623_000 picoseconds.
        Weight::from_parts(781_094_266, 0)
            // Standard Error: 460_683
            .saturating_add(Weight::from_parts(328_993_362, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 710_228_000 picoseconds.
        Weight::from_parts(774_190_634, 0)
            // Standard Error: 483_646
            .saturating_add(Weight::from_parts(330_057_876, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_510_000 picoseconds.
        Weight::from_parts(64_097_635, 0)
            // Standard Error: 358_570
            .saturating_add(Weight::from_parts(126_095_109, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_430_098_000 picoseconds.
        Weight::from_parts(2_605_278_898, 0)
            // Standard Error: 439_185
            .saturating_add(Weight::from_parts(217_479_981, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 358_553_000 picoseconds.
        Weight::from_parts(364_183_000, 0)
            // Standard Error: 51_397
            .saturating_add(Weight::from_parts(30_914_040, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_464_581_000 picoseconds.
        Weight::from_parts(2_580_044_243, 0)
            // Standard Error: 461_216
            .saturating_add(Weight::from_parts(272_575_116, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_438_114_000 picoseconds.
        Weight::from_parts(2_597_881_615, 0)
            // Standard Error: 400_982
            .saturating_add(Weight::from_parts(275_718_502, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 244_206_000 picoseconds.
        Weight::from_parts(321_175_021, 0)
            // Standard Error: 460_445
            .saturating_add(Weight::from_parts(322_059_081, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 559_346_000 picoseconds.
        Weight::from_parts(571_004_000, 0)
            // Standard Error: 59_840
            .saturating_add(Weight::from_parts(21_370_093, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_620_633_000 picoseconds.
        Weight::from_parts(2_741_869_292, 0)
            // Standard Error: 620_120
            .saturating_add(Weight::from_parts(289_781_719, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_438_000 picoseconds.
        Weight::from_parts(86_817_816, 0)
            // Standard Error: 234_731
            .saturating_add(Weight::from_parts(19_849_283, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_002_000 picoseconds.
        Weight::from_parts(88_114_999, 0)
            // Standard Error: 1_128
            .saturating_add(Weight::from_parts(427_426, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_436_000 picoseconds.
        Weight::from_parts(88_440_285, 0)
            // Standard Error: 277_544
            .saturating_add(Weight::from_parts(17_399_914, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_800_000 picoseconds.
        Weight::from_parts(89_756_983, 0)
            // Standard Error: 907
            .saturating_add(Weight::from_parts(428_998, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_754_000 picoseconds.
        Weight::from_parts(87_296_014, 0)
            // Standard Error: 336_747
            .saturating_add(Weight::from_parts(20_299_385, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_952_000 picoseconds.
        Weight::from_parts(86_840_575, 0)
            // Standard Error: 272_708
            .saturating_add(Weight::from_parts(19_217_524, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_498_000 picoseconds.
        Weight::from_parts(126_431_779, 0)
            // Standard Error: 460_480
            .saturating_add(Weight::from_parts(198_940_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_862_000 picoseconds.
        Weight::from_parts(98_611_000, 0)
            // Standard Error: 2_677
            .saturating_add(Weight::from_parts(662_266, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 698_914_000 picoseconds.
        Weight::from_parts(718_405_100, 0)
            // Standard Error: 1_891_960
            .saturating_add(Weight::from_parts(24_867_800, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 699_975_000 picoseconds.
        Weight::from_parts(718_806_789, 0)
            // Standard Error: 1_919_531
            .saturating_add(Weight::from_parts(51_192_710, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_002_000 picoseconds.
        Weight::from_parts(99_331_989, 0)
            // Standard Error: 287_602
            .saturating_add(Weight::from_parts(9_719_710, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_501_000 picoseconds.
        Weight::from_parts(87_026_327, 0)
            // Standard Error: 1_214
            .saturating_add(Weight::from_parts(429_134, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_228_000 picoseconds.
        Weight::from_parts(97_923_691, 0)
            // Standard Error: 288_469
            .saturating_add(Weight::from_parts(9_669_908, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_908_000 picoseconds.
        Weight::from_parts(87_613_705, 0)
            // Standard Error: 1_237
            .saturating_add(Weight::from_parts(431_412, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_385_000 picoseconds.
        Weight::from_parts(74_453_057, 0)
            // Standard Error: 309_931
            .saturating_add(Weight::from_parts(117_172_527, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_437_000 picoseconds.
        Weight::from_parts(78_951_443, 0)
            // Standard Error: 294_227
            .saturating_add(Weight::from_parts(116_066_384, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 704_954_000 picoseconds.
        Weight::from_parts(752_735_182, 0)
            // Standard Error: 455_998
            .saturating_add(Weight::from_parts(135_154_607, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 724_451_000 picoseconds.
        Weight::from_parts(738_722_668, 0)
            // Standard Error: 1_014
            .saturating_add(Weight::from_parts(154_329, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_092_586_000 picoseconds.
        Weight::from_parts(3_231_311_035, 0)
            // Standard Error: 506_742
            .saturating_add(Weight::from_parts(159_545_582, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_299_872_000 picoseconds.
        Weight::from_parts(3_317_022_894, 0)
            // Standard Error: 8_542
            .saturating_add(Weight::from_parts(13_645_472, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_966_000 picoseconds.
        Weight::from_parts(106_319_310, 0)
            // Standard Error: 424_534
            .saturating_add(Weight::from_parts(139_885_203, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 142_910_000 picoseconds.
        Weight::from_parts(144_843_000, 0)
            // Standard Error: 54_401
            .saturating_add(Weight::from_parts(25_535_472, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_117_000 picoseconds.
        Weight::from_parts(80_202_149, 0)
            // Standard Error: 296_880
            .saturating_add(Weight::from_parts(114_586_990, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_802_000 picoseconds.
        Weight::from_parts(85_064_295, 0)
            // Standard Error: 248_874
            .saturating_add(Weight::from_parts(27_314_604, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_854_000 picoseconds.
        Weight::from_parts(86_180_314, 0)
            // Standard Error: 239_162
            .saturating_add(Weight::from_parts(16_391_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_883_000 picoseconds.
        Weight::from_parts(87_058_214, 0)
            // Standard Error: 256_392
            .saturating_add(Weight::from_parts(13_333_285, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_417_000 picoseconds.
        Weight::from_parts(85_403_451, 0)
            // Standard Error: 249_767
            .saturating_add(Weight::from_parts(14_474_948, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_020_000 picoseconds.
        Weight::from_parts(88_080_622, 0)
            // Standard Error: 253_221
            .saturating_add(Weight::from_parts(11_403_277, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 138_317_000 picoseconds.
        Weight::from_parts(187_894_162, 0)
            // Standard Error: 376_519
            .saturating_add(Weight::from_parts(209_723_429, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_047_000 picoseconds.
        Weight::from_parts(151_715_771, 0)
            // Standard Error: 425_606
            .saturating_add(Weight::from_parts(396_733_544, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 45_923_081_000 picoseconds.
        Weight::from_parts(45_981_736_000, 0)
            // Standard Error: 274_662
            .saturating_add(Weight::from_parts(6_858_186, 0).saturating_mul(p.into()))
            // Standard Error: 274_649
            .saturating_add(Weight::from_parts(177_291_831, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_680_000 picoseconds.
        Weight::from_parts(157_350_147, 0)
            // Standard Error: 440_994
            .saturating_add(Weight::from_parts(402_511_567, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 42_842_395_000 picoseconds.
        Weight::from_parts(42_890_931_000, 0)
            // Standard Error: 264_187
            .saturating_add(Weight::from_parts(7_896_879, 0).saturating_mul(p.into()))
            // Standard Error: 264_174
            .saturating_add(Weight::from_parts(178_082_248, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_272_000 picoseconds.
        Weight::from_parts(100_008_395, 0)
            // Standard Error: 36_430
            .saturating_add(Weight::from_parts(2_544_223, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 83_139_000 picoseconds.
        Weight::from_parts(122_967_835, 1131)
            // Standard Error: 6_454
            .saturating_add(Weight::from_parts(11_784_103, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 83_229_000 picoseconds.
        Weight::from_parts(83_885_000, 1131)
            // Standard Error: 37_558
            .saturating_add(Weight::from_parts(35_503_677, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_139_187_000 picoseconds.
        Weight::from_parts(5_806_599_304, 5069931)
            // Standard Error: 75_881
            .saturating_add(Weight::from_parts(36_513_688, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 82_177_000 picoseconds.
        Weight::from_parts(83_595_000, 1939)
            // Standard Error: 45_778
            .saturating_add(Weight::from_parts(47_155_630, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 90_231_000 picoseconds.
        Weight::from_parts(95_944_378, 1131)
            // Standard Error: 61_821
            .saturating_add(Weight::from_parts(35_941_066, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 734_006_000 picoseconds.
        Weight::from_parts(717_384_508, 1496)
            // Standard Error: 375_292
            .saturating_add(Weight::from_parts(47_930_581, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_121_849_000 picoseconds.
        Weight::from_parts(1_147_558_033, 317931)
            // Standard Error: 373_146
            .saturating_add(Weight::from_parts(45_393_418, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_162_000 picoseconds.
        Weight::from_parts(2_220_392, 0)
            // Standard Error: 8_848
            .saturating_add(Weight::from_parts(24_205_605, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_352_664_000 picoseconds.
        Weight::from_parts(4_153_366_897, 0)
            // Standard Error: 60_193
            .saturating_add(Weight::from_parts(4_722_164, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_357_649_000 picoseconds.
        Weight::from_parts(4_256_499_798, 0)
            // Standard Error: 57_942
            .saturating_add(Weight::from_parts(4_200_870, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_269_998_000 picoseconds.
        Weight::from_parts(11_525_100_351, 0)
            // Standard Error: 204_230
            .saturating_add(Weight::from_parts(8_423_588, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_204_810_000 picoseconds.
        Weight::from_parts(10_982_673_143, 0)
            // Standard Error: 145_327
            .saturating_add(Weight::from_parts(9_198_033, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_074_000 picoseconds.
        Weight::from_parts(2_108_000, 0)
            // Standard Error: 9_031
            .saturating_add(Weight::from_parts(3_829_182, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_020_000 picoseconds.
        Weight::from_parts(2_118_000, 0)
            // Standard Error: 5_295
            .saturating_add(Weight::from_parts(2_980_329, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_032_000 picoseconds.
        Weight::from_parts(3_411_359, 0)
            // Standard Error: 1_146
            .saturating_add(Weight::from_parts(1_563_906, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_096_000 picoseconds.
        Weight::from_parts(2_140_000, 0)
            // Standard Error: 8_349
            .saturating_add(Weight::from_parts(2_904_673, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_128_000 picoseconds.
        Weight::from_parts(2_159_000, 0)
            // Standard Error: 8_100
            .saturating_add(Weight::from_parts(5_229_400, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_838_000 picoseconds.
        Weight::from_parts(5_309_346, 0)
            // Standard Error: 2_580
            .saturating_add(Weight::from_parts(129_982, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_100_000 picoseconds.
        Weight::from_parts(3_593_285, 0)
            // Standard Error: 6_648
            .saturating_add(Weight::from_parts(2_597_926, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_597_926 -
            2_429_048, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_086_000 picoseconds.
        Weight::from_parts(3_972_773, 0)
            // Standard Error: 12_538
            .saturating_add(Weight::from_parts(2_429_048, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_591_000 picoseconds.
        Weight::from_parts(12_798_134, 0)
            // Standard Error: 23_023
            .saturating_add(Weight::from_parts(9_786_464, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_274_000 picoseconds.
        Weight::from_parts(1_706_188, 0)
            // Standard Error: 6_199
            .saturating_add(Weight::from_parts(1_212_443, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_221_000 picoseconds.
        Weight::from_parts(5_538_574, 0)
            // Standard Error: 12
            .saturating_add(Weight::from_parts(12, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_100_000 picoseconds.
        Weight::from_parts(1_785_103, 0)
            // Standard Error: 2_948
            .saturating_add(Weight::from_parts(249_981, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_123_000 picoseconds.
        Weight::from_parts(2_187_000, 0)
            // Standard Error: 5_664
            .saturating_add(Weight::from_parts(719_187, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_137_000 picoseconds.
        Weight::from_parts(2_214_000, 0)
            // Standard Error: 5_625
            .saturating_add(Weight::from_parts(709_067, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_168_000 picoseconds.
        Weight::from_parts(2_290_203, 0)
            // Standard Error: 8_984
            .saturating_add(Weight::from_parts(761_843, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_249_000 picoseconds.
        Weight::from_parts(6_302_000, 0)
            // Standard Error: 8_682
            .saturating_add(Weight::from_parts(1_329_653, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_791_000 picoseconds.
        Weight::from_parts(3_929_000, 0)
            // Standard Error: 9_270
            .saturating_add(Weight::from_parts(6_742_685, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_113_000 picoseconds.
        Weight::from_parts(2_192_000, 0)
            // Standard Error: 6_734
            .saturating_add(Weight::from_parts(3_327_207, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_095_000 picoseconds.
        Weight::from_parts(2_141_000, 0)
            // Standard Error: 6_506
            .saturating_add(Weight::from_parts(3_061_891, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_108_000 picoseconds.
        Weight::from_parts(2_141_000, 0)
            // Standard Error: 6_738
            .saturating_add(Weight::from_parts(3_101_844, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_138_000 picoseconds.
        Weight::from_parts(2_155_000, 0)
            // Standard Error: 4_379
            .saturating_add(Weight::from_parts(2_613_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_046_000 picoseconds.
        Weight::from_parts(2_127_000, 0)
            // Standard Error: 3_513
            .saturating_add(Weight::from_parts(525_212, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_127_000 picoseconds.
        Weight::from_parts(1_669_179, 0)
            // Standard Error: 2_817
            .saturating_add(Weight::from_parts(367_599, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_131_000 picoseconds.
        Weight::from_parts(2_169_000, 0)
            // Standard Error: 11_816
            .saturating_add(Weight::from_parts(1_810_781, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_087_000 picoseconds.
        Weight::from_parts(2_194_000, 0)
            // Standard Error: 7_361
            .saturating_add(Weight::from_parts(1_130_773, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_061_000 picoseconds.
        Weight::from_parts(1_850_477, 0)
            // Standard Error: 2_695
            .saturating_add(Weight::from_parts(318_827, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_115_000 picoseconds.
        Weight::from_parts(1_764_589, 0)
            // Standard Error: 2_923
            .saturating_add(Weight::from_parts(329_840, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_109_000 picoseconds.
        Weight::from_parts(859_995, 0)
            // Standard Error: 4_546
            .saturating_add(Weight::from_parts(467_944, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_010_000 picoseconds.
        Weight::from_parts(2_081_000, 0)
            // Standard Error: 3_959
            .saturating_add(Weight::from_parts(472_947, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_105_000 picoseconds.
        Weight::from_parts(1_247_124, 0)
            // Standard Error: 4_390
            .saturating_add(Weight::from_parts(436_907, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_140_000 picoseconds.
        Weight::from_parts(2_251_532, 0)
            // Standard Error: 2_995
            .saturating_add(Weight::from_parts(280_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_119_000 picoseconds.
        Weight::from_parts(2_808_547, 0)
            // Standard Error: 1_453
            .saturating_add(Weight::from_parts(143_409, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_043_000 picoseconds.
        Weight::from_parts(2_639_820, 0)
            // Standard Error: 1_638
            .saturating_add(Weight::from_parts(159_792, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_128_000 picoseconds.
        Weight::from_parts(2_166_000, 0)
            // Standard Error: 11_777
            .saturating_add(Weight::from_parts(1_709_510, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_100_000 picoseconds.
        Weight::from_parts(2_136_000, 0)
            // Standard Error: 7_491
            .saturating_add(Weight::from_parts(1_105_807, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_088_000 picoseconds.
        Weight::from_parts(2_171_000, 0)
            // Standard Error: 11_841
            .saturating_add(Weight::from_parts(1_785_140, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_042_000 picoseconds.
        Weight::from_parts(2_181_000, 0)
            // Standard Error: 7_479
            .saturating_add(Weight::from_parts(1_086_144, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_109_000 picoseconds.
        Weight::from_parts(2_151_000, 0)
            // Standard Error: 13_111
            .saturating_add(Weight::from_parts(1_829_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_130_000 picoseconds.
        Weight::from_parts(2_153_000, 0)
            // Standard Error: 7_632
            .saturating_add(Weight::from_parts(1_102_522, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_155_000 picoseconds.
        Weight::from_parts(2_231_000, 0)
            // Standard Error: 11_689
            .saturating_add(Weight::from_parts(1_768_866, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_094_000 picoseconds.
        Weight::from_parts(2_163_000, 0)
            // Standard Error: 7_348
            .saturating_add(Weight::from_parts(1_057_058, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_095_000 picoseconds.
        Weight::from_parts(2_142_000, 0)
            // Standard Error: 12_173
            .saturating_add(Weight::from_parts(1_786_184, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_122_000 picoseconds.
        Weight::from_parts(2_206_000, 0)
            // Standard Error: 7_244
            .saturating_add(Weight::from_parts(1_066_057, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_090_000 picoseconds.
        Weight::from_parts(2_175_000, 0)
            // Standard Error: 11_967
            .saturating_add(Weight::from_parts(1_782_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_091_000 picoseconds.
        Weight::from_parts(2_169_000, 0)
            // Standard Error: 7_205
            .saturating_add(Weight::from_parts(1_048_140, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_164_000 picoseconds.
        Weight::from_parts(2_198_000, 0)
            // Standard Error: 12_228
            .saturating_add(Weight::from_parts(1_792_751, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_122_000 picoseconds.
        Weight::from_parts(2_186_000, 0)
            // Standard Error: 7_822
            .saturating_add(Weight::from_parts(1_052_385, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_055_000 picoseconds.
        Weight::from_parts(2_135_000, 0)
            // Standard Error: 12_011
            .saturating_add(Weight::from_parts(1_789_504, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_447_000 picoseconds.
        Weight::from_parts(2_540_000, 0)
            // Standard Error: 7_696
            .saturating_add(Weight::from_parts(1_062_612, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_077_000 picoseconds.
        Weight::from_parts(2_107_000, 0)
            // Standard Error: 12_070
            .saturating_add(Weight::from_parts(1_771_498, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_123_000 picoseconds.
        Weight::from_parts(2_156_000, 0)
            // Standard Error: 7_108
            .saturating_add(Weight::from_parts(1_072_471, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_038_000 picoseconds.
        Weight::from_parts(2_145_000, 0)
            // Standard Error: 11_990
            .saturating_add(Weight::from_parts(1_786_273, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_059_000 picoseconds.
        Weight::from_parts(2_122_000, 0)
            // Standard Error: 7_164
            .saturating_add(Weight::from_parts(1_070_909, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_065_000 picoseconds.
        Weight::from_parts(2_181_000, 0)
            // Standard Error: 7_265
            .saturating_add(Weight::from_parts(1_152_228, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_107_000 picoseconds.
        Weight::from_parts(2_160_000, 0)
            // Standard Error: 5_101
            .saturating_add(Weight::from_parts(578_660, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_130_000 picoseconds.
        Weight::from_parts(2_184_000, 0)
            // Standard Error: 9_299
            .saturating_add(Weight::from_parts(1_257_633, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_119_000 picoseconds.
        Weight::from_parts(2_262_000, 0)
            // Standard Error: 3_957
            .saturating_add(Weight::from_parts(557_957, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_045_000 picoseconds.
        Weight::from_parts(2_157_000, 0)
            // Standard Error: 10_839
            .saturating_add(Weight::from_parts(1_686_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_232_000 picoseconds.
        Weight::from_parts(2_250_000, 0)
            // Standard Error: 7_276
            .saturating_add(Weight::from_parts(1_096_252, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_107_000 picoseconds.
        Weight::from_parts(1_434_170, 0)
            // Standard Error: 21_965
            .saturating_add(Weight::from_parts(2_633_663, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_098_000 picoseconds.
        Weight::from_parts(2_122_681, 0)
            // Standard Error: 10_815
            .saturating_add(Weight::from_parts(2_335_842, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_153_000 picoseconds.
        Weight::from_parts(145_632, 0)
            // Standard Error: 12_320
            .saturating_add(Weight::from_parts(2_992_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_142_000 picoseconds.
        Weight::from_parts(2_180_000, 0)
            // Standard Error: 4_944
            .saturating_add(Weight::from_parts(2_466_854, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_143_000 picoseconds.
        Weight::from_parts(2_204_000, 0)
            // Standard Error: 14_500
            .saturating_add(Weight::from_parts(9_530_241, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_132_000 picoseconds.
        Weight::from_parts(2_183_000, 0)
            // Standard Error: 22_303
            .saturating_add(Weight::from_parts(7_508_848, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_133_000 picoseconds.
        Weight::from_parts(2_183_000, 0)
            // Standard Error: 5_407
            .saturating_add(Weight::from_parts(2_948_013, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_124_000 picoseconds.
        Weight::from_parts(2_150_000, 0)
            // Standard Error: 6_372
            .saturating_add(Weight::from_parts(2_362_416, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_174_000 picoseconds.
        Weight::from_parts(2_219_000, 0)
            // Standard Error: 7_670
            .saturating_add(Weight::from_parts(1_174_342, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_094_000 picoseconds.
        Weight::from_parts(2_109_000, 0)
            // Standard Error: 3_988
            .saturating_add(Weight::from_parts(566_949, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_049_000 picoseconds.
        Weight::from_parts(2_117_000, 0)
            // Standard Error: 8_393
            .saturating_add(Weight::from_parts(1_160_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_107_000 picoseconds.
        Weight::from_parts(2_152_000, 0)
            // Standard Error: 4_769
            .saturating_add(Weight::from_parts(585_265, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_115_000 picoseconds.
        Weight::from_parts(2_170_000, 0)
            // Standard Error: 7_943
            .saturating_add(Weight::from_parts(1_185_174, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_139_000 picoseconds.
        Weight::from_parts(2_183_000, 0)
            // Standard Error: 4_608
            .saturating_add(Weight::from_parts(563_329, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_144_000 picoseconds.
        Weight::from_parts(2_178_000, 0)
            // Standard Error: 6_727
            .saturating_add(Weight::from_parts(1_000_757, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_107_000 picoseconds.
        Weight::from_parts(2_212_000, 0)
            // Standard Error: 3_536
            .saturating_add(Weight::from_parts(504_096, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_167_000 picoseconds.
        Weight::from_parts(2_218_000, 0)
            // Standard Error: 7_170
            .saturating_add(Weight::from_parts(966_365, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_149_000 picoseconds.
        Weight::from_parts(140_768, 0)
            // Standard Error: 5_221
            .saturating_add(Weight::from_parts(551_550, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_122_000 picoseconds.
        Weight::from_parts(2_159_000, 0)
            // Standard Error: 7_621
            .saturating_add(Weight::from_parts(997_420, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_069_000 picoseconds.
        Weight::from_parts(2_106_000, 0)
            // Standard Error: 3_980
            .saturating_add(Weight::from_parts(537_014, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_097_000 picoseconds.
        Weight::from_parts(2_191_000, 0)
            // Standard Error: 9_419
            .saturating_add(Weight::from_parts(1_050_292, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_051_000 picoseconds.
        Weight::from_parts(2_118_000, 0)
            // Standard Error: 4_228
            .saturating_add(Weight::from_parts(529_158, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_038_000 picoseconds.
        Weight::from_parts(2_116_000, 0)
            // Standard Error: 7_792
            .saturating_add(Weight::from_parts(1_027_370, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_077_000 picoseconds.
        Weight::from_parts(2_140_000, 0)
            // Standard Error: 4_450
            .saturating_add(Weight::from_parts(534_724, 0).saturating_mul(r.into()))
    }
}
