// This file is part of Gear.

// Copyright (C) 2022-2025 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-07-23, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --runtime=./target/production/wbuild/vara-runtime/vara_runtime.compact.compressed.wasm --genesis-builder=runtime --genesis-builder-preset=development --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=alloc,claim_value,claim_value_to_inheritor,create_program,db_read_per_kb,db_write_per_kb,free,free_range,free_range_per_page,gr_block_height,gr_block_timestamp,gr_create_program,gr_create_program_per_kb,gr_create_program_wgas,gr_create_program_wgas_per_kb,gr_debug,gr_debug_per_kb,gr_env_vars,gr_gas_available,gr_message_id,gr_program_id,gr_random,gr_read,gr_read_per_kb,gr_reply_code,gr_reply_deposit,gr_reply_per_kb,gr_reply_push,gr_reply_push_input,gr_reply_push_input_per_kb,gr_reply_push_per_kb,gr_reply_to,gr_reply_wgas_per_kb,gr_reservation_reply_commit_per_kb,gr_reservation_reply_per_kb,gr_reservation_send,gr_reservation_send_commit,gr_reservation_send_per_kb,gr_reserve_gas,gr_send,gr_send_commit,gr_send_commit_wgas,gr_send_init,gr_send_input,gr_send_input_wgas,gr_send_per_kb,gr_send_push,gr_send_push_input,gr_send_push_input_per_kb,gr_send_push_per_kb,gr_send_wgas,gr_send_wgas_per_kb,gr_signal_code,gr_signal_from,gr_size,gr_source,gr_system_reserve_gas,gr_unreserve_gas,gr_value,gr_value_available,gr_wake,instantiate_module_code_section_per_kb,instantiate_module_data_section_per_kb,instantiate_module_element_section_per_kb,instantiate_module_global_section_per_kb,instantiate_module_table_section_per_kb,instantiate_module_type_section_per_kb,instr_br,instr_br_if,instr_br_table,instr_br_table_per_entry,instr_call,instr_call_const,instr_call_indirect,instr_call_indirect_per_param,instr_call_per_local,instr_global_get,instr_global_set,instr_i32add,instr_i32and,instr_i32clz,instr_i32ctz,instr_i32divs,instr_i32divu,instr_i32eq,instr_i32eqz,instr_i32extend16s,instr_i32extend8s,instr_i32ges,instr_i32geu,instr_i32gts,instr_i32gtu,instr_i32les,instr_i32leu,instr_i32load,instr_i32lts,instr_i32ltu,instr_i32mul,instr_i32ne,instr_i32or,instr_i32popcnt,instr_i32rems,instr_i32remu,instr_i32rotl,instr_i32rotr,instr_i32shl,instr_i32shrs,instr_i32shru,instr_i32store,instr_i32sub,instr_i32wrapi64,instr_i32xor,instr_i64add,instr_i64and,instr_i64clz,instr_i64ctz,instr_i64divs,instr_i64divu,instr_i64eq,instr_i64eqz,instr_i64extend16s,instr_i64extend32s,instr_i64extend8s,instr_i64extendsi32,instr_i64extendui32,instr_i64ges,instr_i64geu,instr_i64gts,instr_i64gtu,instr_i64les,instr_i64leu,instr_i64load,instr_i64lts,instr_i64ltu,instr_i64mul,instr_i64ne,instr_i64or,instr_i64popcnt,instr_i64rems,instr_i64remu,instr_i64rotl,instr_i64rotr,instr_i64shl,instr_i64shrs,instr_i64shru,instr_i64store,instr_i64sub,instr_i64xor,instr_if,instr_local_get,instr_local_set,instr_local_tee,instr_memory_current,instr_select,lazy_pages_host_func_read,lazy_pages_host_func_write,lazy_pages_host_func_write_after_read,lazy_pages_load_page_storage_data,lazy_pages_signal_read,lazy_pages_signal_write,lazy_pages_signal_write_after_read,load_allocations_per_interval,mem_grow,mem_grow_per_page,reinstrument_per_kb,send_message,send_reply,tasks_remove_from_mailbox,tasks_remove_from_waitlist,tasks_remove_gas_reservation,tasks_send_dispatch,tasks_send_user_message,tasks_send_user_message_to_mailbox,tasks_wake_message,tasks_wake_message_no_wake,upload_code,upload_program --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_code_section_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_data_section_per_kb(d: u32, ) -> Weight;
    fn instantiate_module_global_section_per_kb(g: u32, ) -> Weight;
    fn instantiate_module_table_section_per_kb(t: u32, ) -> Weight;
    fn instantiate_module_element_section_per_kb(e: u32, ) -> Weight;
    fn instantiate_module_type_section_per_kb(t: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn claim_value_to_inheritor(d: u32, ) -> Weight;
    fn reinstrument_per_kb(e: u32, ) -> Weight;
    fn load_allocations_per_interval(a: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn mem_grow_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn free_range(r: u32, ) -> Weight;
    fn free_range_per_page(p: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_env_vars(r: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn tasks_remove_gas_reservation() -> Weight;
    fn tasks_send_user_message_to_mailbox() -> Weight;
    fn tasks_send_user_message() -> Weight;
    fn tasks_send_dispatch() -> Weight;
    fn tasks_wake_message() -> Weight;
    fn tasks_wake_message_no_wake() -> Weight;
    fn tasks_remove_from_waitlist() -> Weight;
    fn tasks_remove_from_mailbox() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_221_000 picoseconds.
        Weight::from_parts(89_685_408, 0)
            // Standard Error: 76_030
            .saturating_add(Weight::from_parts(13_932_546, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_919_000 picoseconds.
        Weight::from_parts(90_230_368, 0)
            // Standard Error: 75_312
            .saturating_add(Weight::from_parts(13_545_610, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_762_000 picoseconds.
        Weight::from_parts(88_725_822, 0)
            // Standard Error: 75_113
            .saturating_add(Weight::from_parts(14_190_304, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_145_000 picoseconds.
        Weight::from_parts(89_837_930, 0)
            // Standard Error: 75_806
            .saturating_add(Weight::from_parts(12_438_052, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_347_000 picoseconds.
        Weight::from_parts(94_421_476, 0)
            // Standard Error: 67_312
            .saturating_add(Weight::from_parts(14_554_248, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_432_000 picoseconds.
        Weight::from_parts(92_172_286, 0)
            // Standard Error: 73_273
            .saturating_add(Weight::from_parts(12_861_480, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_541_000 picoseconds.
        Weight::from_parts(90_529_024, 0)
            // Standard Error: 81_341
            .saturating_add(Weight::from_parts(9_916_828, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_863_000 picoseconds.
        Weight::from_parts(89_974_826, 0)
            // Standard Error: 86_331
            .saturating_add(Weight::from_parts(9_905_924, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_484_000 picoseconds.
        Weight::from_parts(86_749_622, 0)
            // Standard Error: 82_358
            .saturating_add(Weight::from_parts(21_540_542, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_725_000 picoseconds.
        Weight::from_parts(86_343_676, 0)
            // Standard Error: 78_024
            .saturating_add(Weight::from_parts(16_282_680, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_804_000 picoseconds.
        Weight::from_parts(86_434_286, 0)
            // Standard Error: 80_058
            .saturating_add(Weight::from_parts(15_669_854, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_451_000 picoseconds.
        Weight::from_parts(86_355_446, 0)
            // Standard Error: 84_338
            .saturating_add(Weight::from_parts(16_128_408, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_881_000 picoseconds.
        Weight::from_parts(86_299_060, 0)
            // Standard Error: 80_516
            .saturating_add(Weight::from_parts(16_617_294, 0).saturating_mul(r.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_328_000 picoseconds.
        Weight::from_parts(1_396_000, 0)
            // Standard Error: 687
            .saturating_add(Weight::from_parts(243_371, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3577 + c * (1024 ±0)`
        // Minimum execution time: 6_366_000 picoseconds.
        Weight::from_parts(4_457_513, 3577)
            // Standard Error: 3_364
            .saturating_add(Weight::from_parts(850_501, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_code_section_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 49_470_000 picoseconds.
        Weight::from_parts(52_568_000, 0)
            // Standard Error: 27_384
            .saturating_add(Weight::from_parts(2_839_201, 0).saturating_mul(c.into()))
    }
    /// The range of component `d` is `[0, 512]`.
    fn instantiate_module_data_section_per_kb(d: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 69_794_000 picoseconds.
        Weight::from_parts(106_700_181, 0)
            // Standard Error: 2_619
            .saturating_add(Weight::from_parts(662_570, 0).saturating_mul(d.into()))
    }
    /// The range of component `g` is `[0, 512]`.
    fn instantiate_module_global_section_per_kb(g: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_272_000 picoseconds.
        Weight::from_parts(51_480_000, 0)
            // Standard Error: 34_099
            .saturating_add(Weight::from_parts(3_107_233, 0).saturating_mul(g.into()))
    }
    /// The range of component `t` is `[0, 9765]`.
    fn instantiate_module_table_section_per_kb(t: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_076_000 picoseconds.
        Weight::from_parts(585_729_104, 0)
            // Standard Error: 28_189
            .saturating_add(Weight::from_parts(643_650, 0).saturating_mul(t.into()))
    }
    /// The range of component `e` is `[0, 512]`.
    fn instantiate_module_element_section_per_kb(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 269_958_000 picoseconds.
        Weight::from_parts(445_421_769, 0)
            // Standard Error: 45_031
            .saturating_add(Weight::from_parts(2_752_835, 0).saturating_mul(e.into()))
    }
    /// The range of component `t` is `[0, 512]`.
    fn instantiate_module_type_section_per_kb(t: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_348_000 picoseconds.
        Weight::from_parts(54_878_081, 0)
            // Standard Error: 389
            .saturating_add(Weight::from_parts(754, 0).saturating_mul(t.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1335`
        //  Estimated: `8799`
        // Minimum execution time: 183_707_000 picoseconds.
        Weight::from_parts(190_443_000, 8799)
            .saturating_add(T::DbWeight::get().reads(18_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4`
        //  Estimated: `3469`
        // Minimum execution time: 94_733_000 picoseconds.
        Weight::from_parts(107_605_988, 3469)
            // Standard Error: 33_518
            .saturating_add(Weight::from_parts(90_456_100, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `669`
        //  Estimated: `6196`
        // Minimum execution time: 199_441_000 picoseconds.
        Weight::from_parts(292_072_235, 6196)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(2_053, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `461`
        //  Estimated: `6196`
        // Minimum execution time: 8_198_938_000 picoseconds.
        Weight::from_parts(8_277_277_000, 6196)
            // Standard Error: 389_326
            .saturating_add(Weight::from_parts(72_047_102, 0).saturating_mul(c.into()))
            // Standard Error: 23
            .saturating_add(Weight::from_parts(668, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(15_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `531`
        //  Estimated: `6196`
        // Minimum execution time: 127_293_000 picoseconds.
        Weight::from_parts(100_882_949, 6196)
            // Standard Error: 4
            .saturating_add(Weight::from_parts(1_239, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(12_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1334`
        //  Estimated: `8799`
        // Minimum execution time: 213_508_000 picoseconds.
        Weight::from_parts(208_366_461, 8799)
            // Standard Error: 5
            .saturating_add(Weight::from_parts(1_233, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(19_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `d` is `[1, 1024]`.
    fn claim_value_to_inheritor(d: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + d * (207 ±0)`
        //  Estimated: `3593 + d * (2683 ±0)`
        // Minimum execution time: 68_780_000 picoseconds.
        Weight::from_parts(70_551_000, 3593)
            // Standard Error: 30_489
            .saturating_add(Weight::from_parts(53_818_642, 0).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
            .saturating_add(Weight::from_parts(0, 2683).saturating_mul(d.into()))
    }
    /// The range of component `e` is `[0, 512]`.
    fn reinstrument_per_kb(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `296 + e * (1024 ±0)`
        //  Estimated: `3760 + e * (1024 ±0)`
        // Minimum execution time: 83_580_000 picoseconds.
        Weight::from_parts(83_799_000, 3760)
            // Standard Error: 274_742
            .saturating_add(Weight::from_parts(744_281_309, 0).saturating_mul(e.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(e.into()))
    }
    /// The range of component `a` is `[0, 32767]`.
    fn load_allocations_per_interval(a: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101 + a * (8 ±0)`
        //  Estimated: `3566 + a * (8 ±0)`
        // Minimum execution time: 7_040_000 picoseconds.
        Weight::from_parts(11_560_737, 3566)
            // Standard Error: 40
            .saturating_add(Weight::from_parts(23_856, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 8).saturating_mul(a.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 241_748_000 picoseconds.
        Weight::from_parts(158_705_880, 0)
            // Standard Error: 310_791
            .saturating_add(Weight::from_parts(143_780_818, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 175_000 picoseconds.
        Weight::from_parts(1_792_344, 0)
            // Standard Error: 19_959
            .saturating_add(Weight::from_parts(58_276_525, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 819]`.
    fn mem_grow_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 58_797_000 picoseconds.
        Weight::from_parts(60_305_892, 0)
            // Standard Error: 53
            .saturating_add(Weight::from_parts(455, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 183_542_000 picoseconds.
        Weight::from_parts(142_888_819, 0)
            // Standard Error: 457_925
            .saturating_add(Weight::from_parts(79_751_904, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 185_534_000 picoseconds.
        Weight::from_parts(141_357_055, 0)
            // Standard Error: 439_854
            .saturating_add(Weight::from_parts(82_974_526, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 700]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 188_895_000 picoseconds.
        Weight::from_parts(301_737_469, 0)
            // Standard Error: 7_787
            .saturating_add(Weight::from_parts(4_282_520, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_998_000 picoseconds.
        Weight::from_parts(82_330_269, 0)
            // Standard Error: 4_266
            .saturating_add(Weight::from_parts(2_557_671, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 152_787_000 picoseconds.
        Weight::from_parts(178_020_213, 0)
            // Standard Error: 5_540
            .saturating_add(Weight::from_parts(2_532_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_302_000 picoseconds.
        Weight::from_parts(85_487_995, 0)
            // Standard Error: 262_291
            .saturating_add(Weight::from_parts(103_288_962, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_969_000 picoseconds.
        Weight::from_parts(83_145_256, 0)
            // Standard Error: 264_140
            .saturating_add(Weight::from_parts(97_459_813, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_680_000 picoseconds.
        Weight::from_parts(82_572_506, 0)
            // Standard Error: 274_118
            .saturating_add(Weight::from_parts(97_353_386, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_809_000 picoseconds.
        Weight::from_parts(79_037_431, 0)
            // Standard Error: 273_174
            .saturating_add(Weight::from_parts(100_830_644, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_756_000 picoseconds.
        Weight::from_parts(77_886_175, 0)
            // Standard Error: 275_836
            .saturating_add(Weight::from_parts(97_786_559, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_132_000 picoseconds.
        Weight::from_parts(79_383_950, 0)
            // Standard Error: 263_615
            .saturating_add(Weight::from_parts(99_759_952, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_664_000 picoseconds.
        Weight::from_parts(83_916_121, 0)
            // Standard Error: 269_602
            .saturating_add(Weight::from_parts(96_882_753, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_124_000 picoseconds.
        Weight::from_parts(78_614_864, 0)
            // Standard Error: 262_077
            .saturating_add(Weight::from_parts(98_270_578, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_214_000 picoseconds.
        Weight::from_parts(119_917_103, 0)
            // Standard Error: 384_045
            .saturating_add(Weight::from_parts(147_105_076, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 213_928_000 picoseconds.
        Weight::from_parts(217_044_000, 0)
            // Standard Error: 124_675
            .saturating_add(Weight::from_parts(17_730_095, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_039_000 picoseconds.
        Weight::from_parts(90_735_352, 0)
            // Standard Error: 319_569
            .saturating_add(Weight::from_parts(99_080_769, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_866_000 picoseconds.
        Weight::from_parts(81_080_635, 0)
            // Standard Error: 284_681
            .saturating_add(Weight::from_parts(97_035_358, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_161_000 picoseconds.
        Weight::from_parts(75_951_196, 0)
            // Standard Error: 288_565
            .saturating_add(Weight::from_parts(98_244_729, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_343_000 picoseconds.
        Weight::from_parts(90_359_109, 0)
            // Standard Error: 313_116
            .saturating_add(Weight::from_parts(175_474_759, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_196_000 picoseconds.
        Weight::from_parts(88_074_000, 0)
            // Standard Error: 3_201_939
            .saturating_add(Weight::from_parts(717_658_408, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_483_000 picoseconds.
        Weight::from_parts(131_255_323, 0)
            // Standard Error: 381_746
            .saturating_add(Weight::from_parts(254_039_013, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 318_095_000 picoseconds.
        Weight::from_parts(323_890_000, 0)
            // Standard Error: 269_737
            .saturating_add(Weight::from_parts(43_025_039, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_196_000 picoseconds.
        Weight::from_parts(145_459_941, 0)
            // Standard Error: 300_744
            .saturating_add(Weight::from_parts(255_946_135, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 320_682_000 picoseconds.
        Weight::from_parts(330_726_000, 0)
            // Standard Error: 258_580
            .saturating_add(Weight::from_parts(42_647_670, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_991_000 picoseconds.
        Weight::from_parts(121_980_900, 0)
            // Standard Error: 334_031
            .saturating_add(Weight::from_parts(244_057_645, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_083_000 picoseconds.
        Weight::from_parts(123_654_437, 0)
            // Standard Error: 271_404
            .saturating_add(Weight::from_parts(248_621_019, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_739_000 picoseconds.
        Weight::from_parts(74_184_566, 0)
            // Standard Error: 259_313
            .saturating_add(Weight::from_parts(109_755_394, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_172_039_000 picoseconds.
        Weight::from_parts(2_290_598_363, 0)
            // Standard Error: 225_988
            .saturating_add(Weight::from_parts(170_049_007, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 327_539_000 picoseconds.
        Weight::from_parts(332_002_000, 0)
            // Standard Error: 270_562
            .saturating_add(Weight::from_parts(43_591_798, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_173_442_000 picoseconds.
        Weight::from_parts(2_285_164_277, 0)
            // Standard Error: 316_500
            .saturating_add(Weight::from_parts(206_577_279, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_171_936_000 picoseconds.
        Weight::from_parts(2_269_937_289, 0)
            // Standard Error: 316_592
            .saturating_add(Weight::from_parts(210_288_284, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 210_143_000 picoseconds.
        Weight::from_parts(242_076_087, 0)
            // Standard Error: 259_301
            .saturating_add(Weight::from_parts(303_794_270, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 498_120_000 picoseconds.
        Weight::from_parts(504_437_000, 0)
            // Standard Error: 269_018
            .saturating_add(Weight::from_parts(44_047_756, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_293_447_000 picoseconds.
        Weight::from_parts(2_369_959_238, 0)
            // Standard Error: 363_815
            .saturating_add(Weight::from_parts(268_184_441, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_706_000 picoseconds.
        Weight::from_parts(16_063_081, 0)
            // Standard Error: 3_995
            .saturating_add(Weight::from_parts(798_868, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_470_000 picoseconds.
        Weight::from_parts(16_014_592, 0)
            // Standard Error: 4_060
            .saturating_add(Weight::from_parts(801_203, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_192_000 picoseconds.
        Weight::from_parts(124_691_586, 0)
            // Standard Error: 326_102
            .saturating_add(Weight::from_parts(159_575_116, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_700_000 picoseconds.
        Weight::from_parts(113_227_572, 0)
            // Standard Error: 821
            .saturating_add(Weight::from_parts(727_420, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_771_000 picoseconds.
        Weight::from_parts(13_307_768, 0)
            // Standard Error: 4_140
            .saturating_add(Weight::from_parts(786_310, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_433_000 picoseconds.
        Weight::from_parts(13_317_909, 0)
            // Standard Error: 4_132
            .saturating_add(Weight::from_parts(797_794, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_397_000 picoseconds.
        Weight::from_parts(86_200_625, 0)
            // Standard Error: 249_756
            .saturating_add(Weight::from_parts(99_340_201, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_350_000 picoseconds.
        Weight::from_parts(81_904_599, 0)
            // Standard Error: 239_785
            .saturating_add(Weight::from_parts(99_474_698, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_240_000 picoseconds.
        Weight::from_parts(81_432_280, 0)
            // Standard Error: 232_906
            .saturating_add(Weight::from_parts(100_267_206, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_040_000 picoseconds.
        Weight::from_parts(104_777_178, 0)
            // Standard Error: 317_975
            .saturating_add(Weight::from_parts(111_524_265, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_874_000 picoseconds.
        Weight::from_parts(107_419_676, 0)
            // Standard Error: 159
            .saturating_add(Weight::from_parts(132_774, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_183_444_000 picoseconds.
        Weight::from_parts(2_299_624_214, 0)
            // Standard Error: 337_163
            .saturating_add(Weight::from_parts(127_003_440, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_311_013_000 picoseconds.
        Weight::from_parts(2_008_533_435, 0)
            // Standard Error: 11_662
            .saturating_add(Weight::from_parts(12_885_500, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_946_000 picoseconds.
        Weight::from_parts(100_192_570, 0)
            // Standard Error: 372_164
            .saturating_add(Weight::from_parts(113_889_342, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 151_569_000 picoseconds.
        Weight::from_parts(154_206_000, 0)
            // Standard Error: 277_911
            .saturating_add(Weight::from_parts(40_514_999, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_526_000 picoseconds.
        Weight::from_parts(81_921_187, 0)
            // Standard Error: 242_847
            .saturating_add(Weight::from_parts(100_058_588, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 153_694_000 picoseconds.
        Weight::from_parts(159_042_000, 0)
            // Standard Error: 1_168_368
            .saturating_add(Weight::from_parts(262_903_409, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_370_000 picoseconds.
        Weight::from_parts(126_759_182, 0)
            // Standard Error: 288_690
            .saturating_add(Weight::from_parts(321_365_678, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 67_647_679_000 picoseconds.
        Weight::from_parts(67_678_303_000, 0)
            // Standard Error: 476_281
            .saturating_add(Weight::from_parts(10_636_136, 0).saturating_mul(p.into()))
            // Standard Error: 476_257
            .saturating_add(Weight::from_parts(133_238_394, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_188_000 picoseconds.
        Weight::from_parts(124_110_039, 0)
            // Standard Error: 289_905
            .saturating_add(Weight::from_parts(329_480_729, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 67_616_788_000 picoseconds.
        Weight::from_parts(67_667_821_000, 0)
            // Standard Error: 475_977
            .saturating_add(Weight::from_parts(10_658_185, 0).saturating_mul(p.into()))
            // Standard Error: 475_954
            .saturating_add(Weight::from_parts(133_251_930, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `1098 + p * (9900 ±0)`
        // Minimum execution time: 85_942_000 picoseconds.
        Weight::from_parts(108_024_660, 1098)
            // Standard Error: 9_693
            .saturating_add(Weight::from_parts(16_542_269, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `1098 + p * (9900 ±0)`
        // Minimum execution time: 87_917_000 picoseconds.
        Weight::from_parts(90_337_000, 1098)
            // Standard Error: 30_241
            .saturating_add(Weight::from_parts(43_738_719, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `5069898`
        // Minimum execution time: 8_559_186_000 picoseconds.
        Weight::from_parts(8_502_224_926, 5069898)
            // Standard Error: 30_589
            .saturating_add(Weight::from_parts(42_648_889, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1787 + p * (65580 ±0)`
        //  Estimated: `1913 + p * (75482 ±0)`
        // Minimum execution time: 85_952_000 picoseconds.
        Weight::from_parts(91_564_000, 1913)
            // Standard Error: 44_275
            .saturating_add(Weight::from_parts(59_592_969, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `1098 + p * (9900 ±0)`
        // Minimum execution time: 90_273_000 picoseconds.
        Weight::from_parts(26_225_241, 1098)
            // Standard Error: 254_821
            .saturating_add(Weight::from_parts(53_955_219, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `1463 + p * (9883 ±2)`
        // Minimum execution time: 113_317_000 picoseconds.
        Weight::from_parts(118_285_000, 1463)
            // Standard Error: 265_057
            .saturating_add(Weight::from_parts(59_296_574, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `317898`
        // Minimum execution time: 646_830_000 picoseconds.
        Weight::from_parts(530_237_529, 317898)
            // Standard Error: 385_746
            .saturating_add(Weight::from_parts(64_122_238, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_284_807_000 picoseconds.
        Weight::from_parts(5_399_478_957, 0)
            // Standard Error: 37_446
            .saturating_add(Weight::from_parts(2_514_695 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_288_369_000 picoseconds.
        Weight::from_parts(5_409_074_344, 0)
            // Standard Error: 37_363
            .saturating_add(Weight::from_parts(2_398_379 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_650_763_000 picoseconds.
        Weight::from_parts(11_311_333_372, 0)
            // Standard Error: 55_640
            .saturating_add(Weight::from_parts(4_909_129 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_640_535_000 picoseconds.
        Weight::from_parts(11_319_558_428, 0)
            // Standard Error: 62_662
            .saturating_add(Weight::from_parts(4_745_116 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_323_000 picoseconds.
        Weight::from_parts(1_377_000, 0)
            // Standard Error: 10_314
            .saturating_add(Weight::from_parts(3_396_267 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_333_000 picoseconds.
        Weight::from_parts(1_426_000, 0)
            // Standard Error: 4_509
            .saturating_add(Weight::from_parts(2_473_545 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_332_000 picoseconds.
        Weight::from_parts(2_045_029, 0)
            // Standard Error: 564
            .saturating_add(Weight::from_parts(1_747_914 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_336_000 picoseconds.
        Weight::from_parts(1_405_000, 0)
            // Standard Error: 7_895
            .saturating_add(Weight::from_parts(2_950_664 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_312_000 picoseconds.
        Weight::from_parts(1_400_000, 0)
            // Standard Error: 31_027
            .saturating_add(Weight::from_parts(5_236_376 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_725_000 picoseconds.
        Weight::from_parts(6_691_481, 0)
            // Standard Error: 493
            .saturating_add(Weight::from_parts(68_422 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_323_000 picoseconds.
        Weight::from_parts(1_554_360, 0)
            // Standard Error: 6_197
            .saturating_add(Weight::from_parts(2_839_324 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts((2_839_324 -
            2_660_827) * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_369_000 picoseconds.
        Weight::from_parts(1_767_463, 0)
            // Standard Error: 13_826
            .saturating_add(Weight::from_parts(2_660_827 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_487_000 picoseconds.
        Weight::from_parts(1_558_000, 0)
            // Standard Error: 21_201
            .saturating_add(Weight::from_parts(11_551_348 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_702_000 picoseconds.
        Weight::from_parts(11_858_000, 0)
            // Standard Error: 11_289
            .saturating_add(Weight::from_parts(683_383 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_154_000 picoseconds.
        Weight::from_parts(4_406_442, 0)
            // Standard Error: 8
            .saturating_add(Weight::from_parts(1 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_237_000 picoseconds.
        Weight::from_parts(10_096_539, 0)
            // Standard Error: 3_015
            .saturating_add(Weight::from_parts(308_686 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_247_000 picoseconds.
        Weight::from_parts(10_280_433, 0)
            // Standard Error: 2_412
            .saturating_add(Weight::from_parts(753_026 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_289_000 picoseconds.
        Weight::from_parts(10_581_279, 0)
            // Standard Error: 2_317
            .saturating_add(Weight::from_parts(745_402 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_383_000 picoseconds.
        Weight::from_parts(1_063_303, 0)
            // Standard Error: 1_703
            .saturating_add(Weight::from_parts(324_823 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_388_000 picoseconds.
        Weight::from_parts(1_484_000, 0)
            // Standard Error: 2_872
            .saturating_add(Weight::from_parts(576_956 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_429_000 picoseconds.
        Weight::from_parts(159_110, 0)
            // Standard Error: 7_315
            .saturating_add(Weight::from_parts(6_563_503 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_292_000 picoseconds.
        Weight::from_parts(1_362_000, 0)
            // Standard Error: 4_234
            .saturating_add(Weight::from_parts(339_306 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_340_000 picoseconds.
        Weight::from_parts(1_671_037, 0)
            // Standard Error: 726
            .saturating_add(Weight::from_parts(197_327 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_301_000 picoseconds.
        Weight::from_parts(440_987, 0)
            // Standard Error: 6_205
            .saturating_add(Weight::from_parts(339_101 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_322_000 picoseconds.
        Weight::from_parts(1_682_632, 0)
            // Standard Error: 629
            .saturating_add(Weight::from_parts(197_526 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_346_000 picoseconds.
        Weight::from_parts(1_230_564, 0)
            // Standard Error: 1_587
            .saturating_add(Weight::from_parts(288_827 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_331_000 picoseconds.
        Weight::from_parts(1_687_791, 0)
            // Standard Error: 754
            .saturating_add(Weight::from_parts(208_983 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_316_000 picoseconds.
        Weight::from_parts(1_389_000, 0)
            // Standard Error: 11_210
            .saturating_add(Weight::from_parts(919_617 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_368_000 picoseconds.
        Weight::from_parts(1_413_000, 0)
            // Standard Error: 3_479
            .saturating_add(Weight::from_parts(516_855 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_336_000 picoseconds.
        Weight::from_parts(1_491_667, 0)
            // Standard Error: 965
            .saturating_add(Weight::from_parts(195_363 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_349_000 picoseconds.
        Weight::from_parts(1_464_409, 0)
            // Standard Error: 939
            .saturating_add(Weight::from_parts(196_288 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_324_000 picoseconds.
        Weight::from_parts(1_242_652, 0)
            // Standard Error: 2_248
            .saturating_add(Weight::from_parts(265_582 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_343_000 picoseconds.
        Weight::from_parts(1_266_420, 0)
            // Standard Error: 2_145
            .saturating_add(Weight::from_parts(269_322 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_303_000 picoseconds.
        Weight::from_parts(1_407_695, 0)
            // Standard Error: 2_792
            .saturating_add(Weight::from_parts(243_932 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_333_000 picoseconds.
        Weight::from_parts(1_523_331, 0)
            // Standard Error: 811
            .saturating_add(Weight::from_parts(175_821 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_270_000 picoseconds.
        Weight::from_parts(1_714_165, 0)
            // Standard Error: 510
            .saturating_add(Weight::from_parts(99_738 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_267_000 picoseconds.
        Weight::from_parts(1_796_577, 0)
            // Standard Error: 437
            .saturating_add(Weight::from_parts(99_025 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_315_000 picoseconds.
        Weight::from_parts(1_346_000, 0)
            // Standard Error: 7_812
            .saturating_add(Weight::from_parts(913_156 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_326_000 picoseconds.
        Weight::from_parts(1_398_000, 0)
            // Standard Error: 3_266
            .saturating_add(Weight::from_parts(529_651 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_295_000 picoseconds.
        Weight::from_parts(1_338_000, 0)
            // Standard Error: 7_540
            .saturating_add(Weight::from_parts(900_199 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_257_000 picoseconds.
        Weight::from_parts(1_334_000, 0)
            // Standard Error: 6_627
            .saturating_add(Weight::from_parts(558_800 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_300_000 picoseconds.
        Weight::from_parts(1_396_000, 0)
            // Standard Error: 9_040
            .saturating_add(Weight::from_parts(932_346 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_264_000 picoseconds.
        Weight::from_parts(1_365_000, 0)
            // Standard Error: 3_372
            .saturating_add(Weight::from_parts(522_683 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_337_000 picoseconds.
        Weight::from_parts(1_418_000, 0)
            // Standard Error: 8_646
            .saturating_add(Weight::from_parts(914_578 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_328_000 picoseconds.
        Weight::from_parts(1_372_000, 0)
            // Standard Error: 7_710
            .saturating_add(Weight::from_parts(549_895 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_326_000 picoseconds.
        Weight::from_parts(1_385_000, 0)
            // Standard Error: 7_970
            .saturating_add(Weight::from_parts(904_254 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_285_000 picoseconds.
        Weight::from_parts(1_361_000, 0)
            // Standard Error: 7_084
            .saturating_add(Weight::from_parts(551_858 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_268_000 picoseconds.
        Weight::from_parts(1_386_000, 0)
            // Standard Error: 8_175
            .saturating_add(Weight::from_parts(919_620 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_357_000 picoseconds.
        Weight::from_parts(1_414_000, 0)
            // Standard Error: 3_026
            .saturating_add(Weight::from_parts(527_129 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_282_000 picoseconds.
        Weight::from_parts(1_384_000, 0)
            // Standard Error: 9_757
            .saturating_add(Weight::from_parts(939_039 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_351_000 picoseconds.
        Weight::from_parts(1_430_000, 0)
            // Standard Error: 6_458
            .saturating_add(Weight::from_parts(535_040 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_357_000 picoseconds.
        Weight::from_parts(1_397_000, 0)
            // Standard Error: 8_009
            .saturating_add(Weight::from_parts(905_230 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_336_000 picoseconds.
        Weight::from_parts(1_434_000, 0)
            // Standard Error: 2_552
            .saturating_add(Weight::from_parts(510_598 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_362_000 picoseconds.
        Weight::from_parts(1_440_000, 0)
            // Standard Error: 8_120
            .saturating_add(Weight::from_parts(913_405 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_324_000 picoseconds.
        Weight::from_parts(1_385_000, 0)
            // Standard Error: 2_777
            .saturating_add(Weight::from_parts(515_942 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_351_000 picoseconds.
        Weight::from_parts(1_420_000, 0)
            // Standard Error: 7_892
            .saturating_add(Weight::from_parts(899_416 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_340_000 picoseconds.
        Weight::from_parts(1_396_000, 0)
            // Standard Error: 2_691
            .saturating_add(Weight::from_parts(517_181 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_331_000 picoseconds.
        Weight::from_parts(1_408_000, 0)
            // Standard Error: 3_576
            .saturating_add(Weight::from_parts(586_185 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_376_000 picoseconds.
        Weight::from_parts(1_232_961, 0)
            // Standard Error: 2_856
            .saturating_add(Weight::from_parts(311_321 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_311_000 picoseconds.
        Weight::from_parts(1_402_000, 0)
            // Standard Error: 3_641
            .saturating_add(Weight::from_parts(585_217 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_321_000 picoseconds.
        Weight::from_parts(1_109_846, 0)
            // Standard Error: 1_429
            .saturating_add(Weight::from_parts(310_413 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_339_000 picoseconds.
        Weight::from_parts(1_456_000, 0)
            // Standard Error: 9_208
            .saturating_add(Weight::from_parts(905_384 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_324_000 picoseconds.
        Weight::from_parts(1_424_000, 0)
            // Standard Error: 3_077
            .saturating_add(Weight::from_parts(550_130 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_319_000 picoseconds.
        Weight::from_parts(1_123_741, 0)
            // Standard Error: 10_535
            .saturating_add(Weight::from_parts(1_903_611 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_368_000 picoseconds.
        Weight::from_parts(1_402_000, 0)
            // Standard Error: 7_228
            .saturating_add(Weight::from_parts(1_348_198 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_297_000 picoseconds.
        Weight::from_parts(1_376_000, 0)
            // Standard Error: 5_594
            .saturating_add(Weight::from_parts(1_928_813 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_315_000 picoseconds.
        Weight::from_parts(1_384_000, 0)
            // Standard Error: 9_638
            .saturating_add(Weight::from_parts(1_373_567 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_382_000 picoseconds.
        Weight::from_parts(1_446_000, 0)
            // Standard Error: 36_346
            .saturating_add(Weight::from_parts(9_771_506 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_384_000 picoseconds.
        Weight::from_parts(1_448_000, 0)
            // Standard Error: 45_347
            .saturating_add(Weight::from_parts(8_203_045 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_397_000 picoseconds.
        Weight::from_parts(1_432_000, 0)
            // Standard Error: 8_655
            .saturating_add(Weight::from_parts(1_969_861 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_340_000 picoseconds.
        Weight::from_parts(1_397_000, 0)
            // Standard Error: 10_245
            .saturating_add(Weight::from_parts(1_400_327 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_317_000 picoseconds.
        Weight::from_parts(1_384_000, 0)
            // Standard Error: 6_330
            .saturating_add(Weight::from_parts(668_554 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_331_000 picoseconds.
        Weight::from_parts(943_013, 0)
            // Standard Error: 1_910
            .saturating_add(Weight::from_parts(339_179 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_417_000 picoseconds.
        Weight::from_parts(1_444_000, 0)
            // Standard Error: 5_904
            .saturating_add(Weight::from_parts(656_025 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_312_000 picoseconds.
        Weight::from_parts(638_154, 0)
            // Standard Error: 6_097
            .saturating_add(Weight::from_parts(364_863 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_283_000 picoseconds.
        Weight::from_parts(1_382_000, 0)
            // Standard Error: 4_056
            .saturating_add(Weight::from_parts(642_425 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_297_000 picoseconds.
        Weight::from_parts(1_058_003, 0)
            // Standard Error: 1_579
            .saturating_add(Weight::from_parts(335_932 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_351_000 picoseconds.
        Weight::from_parts(1_399_000, 0)
            // Standard Error: 3_196
            .saturating_add(Weight::from_parts(532_298 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_352_000 picoseconds.
        Weight::from_parts(1_236_561, 0)
            // Standard Error: 1_939
            .saturating_add(Weight::from_parts(308_925 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_276_000 picoseconds.
        Weight::from_parts(1_395_000, 0)
            // Standard Error: 2_787
            .saturating_add(Weight::from_parts(529_480 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_355_000 picoseconds.
        Weight::from_parts(1_268_237, 0)
            // Standard Error: 1_470
            .saturating_add(Weight::from_parts(307_928 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_335_000 picoseconds.
        Weight::from_parts(1_381_000, 0)
            // Standard Error: 4_640
            .saturating_add(Weight::from_parts(547_074 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_276_000 picoseconds.
        Weight::from_parts(1_232_186, 0)
            // Standard Error: 1_605
            .saturating_add(Weight::from_parts(307_813 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_246_000 picoseconds.
        Weight::from_parts(1_380_000, 0)
            // Standard Error: 2_619
            .saturating_add(Weight::from_parts(526_315 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_308_000 picoseconds.
        Weight::from_parts(1_235_811, 0)
            // Standard Error: 2_117
            .saturating_add(Weight::from_parts(310_852 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_285_000 picoseconds.
        Weight::from_parts(1_369_000, 0)
            // Standard Error: 3_500
            .saturating_add(Weight::from_parts(541_717 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_320_000 picoseconds.
        Weight::from_parts(1_227_586, 0)
            // Standard Error: 2_335
            .saturating_add(Weight::from_parts(315_688 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1134`
        //  Estimated: `6196`
        // Minimum execution time: 105_101_000 picoseconds.
        Weight::from_parts(106_280_000, 6196)
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `825`
        //  Estimated: `4290`
        // Minimum execution time: 58_312_000 picoseconds.
        Weight::from_parts(59_875_000, 4290)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1096`
        //  Estimated: `6196`
        // Minimum execution time: 118_483_000 picoseconds.
        Weight::from_parts(121_408_000, 6196)
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `661`
        //  Estimated: `4126`
        // Minimum execution time: 39_337_000 picoseconds.
        Weight::from_parts(40_761_000, 4126)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `906`
        //  Estimated: `4371`
        // Minimum execution time: 56_986_000 picoseconds.
        Weight::from_parts(57_831_000, 4371)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 6_642_000 picoseconds.
        Weight::from_parts(6_912_000, 3545)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1658`
        //  Estimated: `7598`
        // Minimum execution time: 158_063_000 picoseconds.
        Weight::from_parts(161_031_000, 7598)
            .saturating_add(T::DbWeight::get().reads(18_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1381`
        //  Estimated: `7321`
        // Minimum execution time: 138_497_000 picoseconds.
        Weight::from_parts(140_393_000, 7321)
            .saturating_add(T::DbWeight::get().reads(17_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_221_000 picoseconds.
        Weight::from_parts(89_685_408, 0)
            // Standard Error: 76_030
            .saturating_add(Weight::from_parts(13_932_546, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_919_000 picoseconds.
        Weight::from_parts(90_230_368, 0)
            // Standard Error: 75_312
            .saturating_add(Weight::from_parts(13_545_610, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_762_000 picoseconds.
        Weight::from_parts(88_725_822, 0)
            // Standard Error: 75_113
            .saturating_add(Weight::from_parts(14_190_304, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_145_000 picoseconds.
        Weight::from_parts(89_837_930, 0)
            // Standard Error: 75_806
            .saturating_add(Weight::from_parts(12_438_052, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_347_000 picoseconds.
        Weight::from_parts(94_421_476, 0)
            // Standard Error: 67_312
            .saturating_add(Weight::from_parts(14_554_248, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_432_000 picoseconds.
        Weight::from_parts(92_172_286, 0)
            // Standard Error: 73_273
            .saturating_add(Weight::from_parts(12_861_480, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_541_000 picoseconds.
        Weight::from_parts(90_529_024, 0)
            // Standard Error: 81_341
            .saturating_add(Weight::from_parts(9_916_828, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_863_000 picoseconds.
        Weight::from_parts(89_974_826, 0)
            // Standard Error: 86_331
            .saturating_add(Weight::from_parts(9_905_924, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_484_000 picoseconds.
        Weight::from_parts(86_749_622, 0)
            // Standard Error: 82_358
            .saturating_add(Weight::from_parts(21_540_542, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_725_000 picoseconds.
        Weight::from_parts(86_343_676, 0)
            // Standard Error: 78_024
            .saturating_add(Weight::from_parts(16_282_680, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_804_000 picoseconds.
        Weight::from_parts(86_434_286, 0)
            // Standard Error: 80_058
            .saturating_add(Weight::from_parts(15_669_854, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_451_000 picoseconds.
        Weight::from_parts(86_355_446, 0)
            // Standard Error: 84_338
            .saturating_add(Weight::from_parts(16_128_408, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_881_000 picoseconds.
        Weight::from_parts(86_299_060, 0)
            // Standard Error: 80_516
            .saturating_add(Weight::from_parts(16_617_294, 0).saturating_mul(r.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_328_000 picoseconds.
        Weight::from_parts(1_396_000, 0)
            // Standard Error: 687
            .saturating_add(Weight::from_parts(243_371, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3577 + c * (1024 ±0)`
        // Minimum execution time: 6_366_000 picoseconds.
        Weight::from_parts(4_457_513, 3577)
            // Standard Error: 3_364
            .saturating_add(Weight::from_parts(850_501, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_code_section_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 49_470_000 picoseconds.
        Weight::from_parts(52_568_000, 0)
            // Standard Error: 27_384
            .saturating_add(Weight::from_parts(2_839_201, 0).saturating_mul(c.into()))
    }
    /// The range of component `d` is `[0, 512]`.
    fn instantiate_module_data_section_per_kb(d: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 69_794_000 picoseconds.
        Weight::from_parts(106_700_181, 0)
            // Standard Error: 2_619
            .saturating_add(Weight::from_parts(662_570, 0).saturating_mul(d.into()))
    }
    /// The range of component `g` is `[0, 512]`.
    fn instantiate_module_global_section_per_kb(g: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_272_000 picoseconds.
        Weight::from_parts(51_480_000, 0)
            // Standard Error: 34_099
            .saturating_add(Weight::from_parts(3_107_233, 0).saturating_mul(g.into()))
    }
    /// The range of component `t` is `[0, 9765]`.
    fn instantiate_module_table_section_per_kb(t: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_076_000 picoseconds.
        Weight::from_parts(585_729_104, 0)
            // Standard Error: 28_189
            .saturating_add(Weight::from_parts(643_650, 0).saturating_mul(t.into()))
    }
    /// The range of component `e` is `[0, 512]`.
    fn instantiate_module_element_section_per_kb(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 269_958_000 picoseconds.
        Weight::from_parts(445_421_769, 0)
            // Standard Error: 45_031
            .saturating_add(Weight::from_parts(2_752_835, 0).saturating_mul(e.into()))
    }
    /// The range of component `t` is `[0, 512]`.
    fn instantiate_module_type_section_per_kb(t: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_348_000 picoseconds.
        Weight::from_parts(54_878_081, 0)
            // Standard Error: 389
            .saturating_add(Weight::from_parts(754, 0).saturating_mul(t.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1335`
        //  Estimated: `8799`
        // Minimum execution time: 183_707_000 picoseconds.
        Weight::from_parts(190_443_000, 8799)
            .saturating_add(RocksDbWeight::get().reads(18_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4`
        //  Estimated: `3469`
        // Minimum execution time: 94_733_000 picoseconds.
        Weight::from_parts(107_605_988, 3469)
            // Standard Error: 33_518
            .saturating_add(Weight::from_parts(90_456_100, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `669`
        //  Estimated: `6196`
        // Minimum execution time: 199_441_000 picoseconds.
        Weight::from_parts(292_072_235, 6196)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(2_053, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `461`
        //  Estimated: `6196`
        // Minimum execution time: 8_198_938_000 picoseconds.
        Weight::from_parts(8_277_277_000, 6196)
            // Standard Error: 389_326
            .saturating_add(Weight::from_parts(72_047_102, 0).saturating_mul(c.into()))
            // Standard Error: 23
            .saturating_add(Weight::from_parts(668, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(15_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `531`
        //  Estimated: `6196`
        // Minimum execution time: 127_293_000 picoseconds.
        Weight::from_parts(100_882_949, 6196)
            // Standard Error: 4
            .saturating_add(Weight::from_parts(1_239, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(12_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1334`
        //  Estimated: `8799`
        // Minimum execution time: 213_508_000 picoseconds.
        Weight::from_parts(208_366_461, 8799)
            // Standard Error: 5
            .saturating_add(Weight::from_parts(1_233, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(19_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `d` is `[1, 1024]`.
    fn claim_value_to_inheritor(d: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + d * (207 ±0)`
        //  Estimated: `3593 + d * (2683 ±0)`
        // Minimum execution time: 68_780_000 picoseconds.
        Weight::from_parts(70_551_000, 3593)
            // Standard Error: 30_489
            .saturating_add(Weight::from_parts(53_818_642, 0).saturating_mul(d.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(d.into())))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(d.into())))
            .saturating_add(Weight::from_parts(0, 2683).saturating_mul(d.into()))
    }
    /// The range of component `e` is `[0, 512]`.
    fn reinstrument_per_kb(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `296 + e * (1024 ±0)`
        //  Estimated: `3760 + e * (1024 ±0)`
        // Minimum execution time: 83_580_000 picoseconds.
        Weight::from_parts(83_799_000, 3760)
            // Standard Error: 274_742
            .saturating_add(Weight::from_parts(744_281_309, 0).saturating_mul(e.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(e.into()))
    }
    /// The range of component `a` is `[0, 32767]`.
    fn load_allocations_per_interval(a: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101 + a * (8 ±0)`
        //  Estimated: `3566 + a * (8 ±0)`
        // Minimum execution time: 7_040_000 picoseconds.
        Weight::from_parts(11_560_737, 3566)
            // Standard Error: 40
            .saturating_add(Weight::from_parts(23_856, 0).saturating_mul(a.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 8).saturating_mul(a.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 241_748_000 picoseconds.
        Weight::from_parts(158_705_880, 0)
            // Standard Error: 310_791
            .saturating_add(Weight::from_parts(143_780_818, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 175_000 picoseconds.
        Weight::from_parts(1_792_344, 0)
            // Standard Error: 19_959
            .saturating_add(Weight::from_parts(58_276_525, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 819]`.
    fn mem_grow_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 58_797_000 picoseconds.
        Weight::from_parts(60_305_892, 0)
            // Standard Error: 53
            .saturating_add(Weight::from_parts(455, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 183_542_000 picoseconds.
        Weight::from_parts(142_888_819, 0)
            // Standard Error: 457_925
            .saturating_add(Weight::from_parts(79_751_904, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 185_534_000 picoseconds.
        Weight::from_parts(141_357_055, 0)
            // Standard Error: 439_854
            .saturating_add(Weight::from_parts(82_974_526, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 700]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 188_895_000 picoseconds.
        Weight::from_parts(301_737_469, 0)
            // Standard Error: 7_787
            .saturating_add(Weight::from_parts(4_282_520, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_998_000 picoseconds.
        Weight::from_parts(82_330_269, 0)
            // Standard Error: 4_266
            .saturating_add(Weight::from_parts(2_557_671, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 152_787_000 picoseconds.
        Weight::from_parts(178_020_213, 0)
            // Standard Error: 5_540
            .saturating_add(Weight::from_parts(2_532_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_302_000 picoseconds.
        Weight::from_parts(85_487_995, 0)
            // Standard Error: 262_291
            .saturating_add(Weight::from_parts(103_288_962, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_969_000 picoseconds.
        Weight::from_parts(83_145_256, 0)
            // Standard Error: 264_140
            .saturating_add(Weight::from_parts(97_459_813, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_680_000 picoseconds.
        Weight::from_parts(82_572_506, 0)
            // Standard Error: 274_118
            .saturating_add(Weight::from_parts(97_353_386, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_809_000 picoseconds.
        Weight::from_parts(79_037_431, 0)
            // Standard Error: 273_174
            .saturating_add(Weight::from_parts(100_830_644, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_756_000 picoseconds.
        Weight::from_parts(77_886_175, 0)
            // Standard Error: 275_836
            .saturating_add(Weight::from_parts(97_786_559, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_132_000 picoseconds.
        Weight::from_parts(79_383_950, 0)
            // Standard Error: 263_615
            .saturating_add(Weight::from_parts(99_759_952, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_664_000 picoseconds.
        Weight::from_parts(83_916_121, 0)
            // Standard Error: 269_602
            .saturating_add(Weight::from_parts(96_882_753, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_124_000 picoseconds.
        Weight::from_parts(78_614_864, 0)
            // Standard Error: 262_077
            .saturating_add(Weight::from_parts(98_270_578, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_214_000 picoseconds.
        Weight::from_parts(119_917_103, 0)
            // Standard Error: 384_045
            .saturating_add(Weight::from_parts(147_105_076, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 213_928_000 picoseconds.
        Weight::from_parts(217_044_000, 0)
            // Standard Error: 124_675
            .saturating_add(Weight::from_parts(17_730_095, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_039_000 picoseconds.
        Weight::from_parts(90_735_352, 0)
            // Standard Error: 319_569
            .saturating_add(Weight::from_parts(99_080_769, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_866_000 picoseconds.
        Weight::from_parts(81_080_635, 0)
            // Standard Error: 284_681
            .saturating_add(Weight::from_parts(97_035_358, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_161_000 picoseconds.
        Weight::from_parts(75_951_196, 0)
            // Standard Error: 288_565
            .saturating_add(Weight::from_parts(98_244_729, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_343_000 picoseconds.
        Weight::from_parts(90_359_109, 0)
            // Standard Error: 313_116
            .saturating_add(Weight::from_parts(175_474_759, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_196_000 picoseconds.
        Weight::from_parts(88_074_000, 0)
            // Standard Error: 3_201_939
            .saturating_add(Weight::from_parts(717_658_408, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_483_000 picoseconds.
        Weight::from_parts(131_255_323, 0)
            // Standard Error: 381_746
            .saturating_add(Weight::from_parts(254_039_013, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 318_095_000 picoseconds.
        Weight::from_parts(323_890_000, 0)
            // Standard Error: 269_737
            .saturating_add(Weight::from_parts(43_025_039, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_196_000 picoseconds.
        Weight::from_parts(145_459_941, 0)
            // Standard Error: 300_744
            .saturating_add(Weight::from_parts(255_946_135, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 320_682_000 picoseconds.
        Weight::from_parts(330_726_000, 0)
            // Standard Error: 258_580
            .saturating_add(Weight::from_parts(42_647_670, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_991_000 picoseconds.
        Weight::from_parts(121_980_900, 0)
            // Standard Error: 334_031
            .saturating_add(Weight::from_parts(244_057_645, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_083_000 picoseconds.
        Weight::from_parts(123_654_437, 0)
            // Standard Error: 271_404
            .saturating_add(Weight::from_parts(248_621_019, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_739_000 picoseconds.
        Weight::from_parts(74_184_566, 0)
            // Standard Error: 259_313
            .saturating_add(Weight::from_parts(109_755_394, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_172_039_000 picoseconds.
        Weight::from_parts(2_290_598_363, 0)
            // Standard Error: 225_988
            .saturating_add(Weight::from_parts(170_049_007, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 327_539_000 picoseconds.
        Weight::from_parts(332_002_000, 0)
            // Standard Error: 270_562
            .saturating_add(Weight::from_parts(43_591_798, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_173_442_000 picoseconds.
        Weight::from_parts(2_285_164_277, 0)
            // Standard Error: 316_500
            .saturating_add(Weight::from_parts(206_577_279, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_171_936_000 picoseconds.
        Weight::from_parts(2_269_937_289, 0)
            // Standard Error: 316_592
            .saturating_add(Weight::from_parts(210_288_284, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 210_143_000 picoseconds.
        Weight::from_parts(242_076_087, 0)
            // Standard Error: 259_301
            .saturating_add(Weight::from_parts(303_794_270, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 498_120_000 picoseconds.
        Weight::from_parts(504_437_000, 0)
            // Standard Error: 269_018
            .saturating_add(Weight::from_parts(44_047_756, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_293_447_000 picoseconds.
        Weight::from_parts(2_369_959_238, 0)
            // Standard Error: 363_815
            .saturating_add(Weight::from_parts(268_184_441, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_706_000 picoseconds.
        Weight::from_parts(16_063_081, 0)
            // Standard Error: 3_995
            .saturating_add(Weight::from_parts(798_868, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_470_000 picoseconds.
        Weight::from_parts(16_014_592, 0)
            // Standard Error: 4_060
            .saturating_add(Weight::from_parts(801_203, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_192_000 picoseconds.
        Weight::from_parts(124_691_586, 0)
            // Standard Error: 326_102
            .saturating_add(Weight::from_parts(159_575_116, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_700_000 picoseconds.
        Weight::from_parts(113_227_572, 0)
            // Standard Error: 821
            .saturating_add(Weight::from_parts(727_420, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_771_000 picoseconds.
        Weight::from_parts(13_307_768, 0)
            // Standard Error: 4_140
            .saturating_add(Weight::from_parts(786_310, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_433_000 picoseconds.
        Weight::from_parts(13_317_909, 0)
            // Standard Error: 4_132
            .saturating_add(Weight::from_parts(797_794, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_397_000 picoseconds.
        Weight::from_parts(86_200_625, 0)
            // Standard Error: 249_756
            .saturating_add(Weight::from_parts(99_340_201, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_350_000 picoseconds.
        Weight::from_parts(81_904_599, 0)
            // Standard Error: 239_785
            .saturating_add(Weight::from_parts(99_474_698, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_240_000 picoseconds.
        Weight::from_parts(81_432_280, 0)
            // Standard Error: 232_906
            .saturating_add(Weight::from_parts(100_267_206, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_040_000 picoseconds.
        Weight::from_parts(104_777_178, 0)
            // Standard Error: 317_975
            .saturating_add(Weight::from_parts(111_524_265, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_874_000 picoseconds.
        Weight::from_parts(107_419_676, 0)
            // Standard Error: 159
            .saturating_add(Weight::from_parts(132_774, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_183_444_000 picoseconds.
        Weight::from_parts(2_299_624_214, 0)
            // Standard Error: 337_163
            .saturating_add(Weight::from_parts(127_003_440, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_311_013_000 picoseconds.
        Weight::from_parts(2_008_533_435, 0)
            // Standard Error: 11_662
            .saturating_add(Weight::from_parts(12_885_500, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_946_000 picoseconds.
        Weight::from_parts(100_192_570, 0)
            // Standard Error: 372_164
            .saturating_add(Weight::from_parts(113_889_342, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 151_569_000 picoseconds.
        Weight::from_parts(154_206_000, 0)
            // Standard Error: 277_911
            .saturating_add(Weight::from_parts(40_514_999, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_526_000 picoseconds.
        Weight::from_parts(81_921_187, 0)
            // Standard Error: 242_847
            .saturating_add(Weight::from_parts(100_058_588, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 153_694_000 picoseconds.
        Weight::from_parts(159_042_000, 0)
            // Standard Error: 1_168_368
            .saturating_add(Weight::from_parts(262_903_409, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_370_000 picoseconds.
        Weight::from_parts(126_759_182, 0)
            // Standard Error: 288_690
            .saturating_add(Weight::from_parts(321_365_678, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 67_647_679_000 picoseconds.
        Weight::from_parts(67_678_303_000, 0)
            // Standard Error: 476_281
            .saturating_add(Weight::from_parts(10_636_136, 0).saturating_mul(p.into()))
            // Standard Error: 476_257
            .saturating_add(Weight::from_parts(133_238_394, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_188_000 picoseconds.
        Weight::from_parts(124_110_039, 0)
            // Standard Error: 289_905
            .saturating_add(Weight::from_parts(329_480_729, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 67_616_788_000 picoseconds.
        Weight::from_parts(67_667_821_000, 0)
            // Standard Error: 475_977
            .saturating_add(Weight::from_parts(10_658_185, 0).saturating_mul(p.into()))
            // Standard Error: 475_954
            .saturating_add(Weight::from_parts(133_251_930, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `1098 + p * (9900 ±0)`
        // Minimum execution time: 85_942_000 picoseconds.
        Weight::from_parts(108_024_660, 1098)
            // Standard Error: 9_693
            .saturating_add(Weight::from_parts(16_542_269, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `1098 + p * (9900 ±0)`
        // Minimum execution time: 87_917_000 picoseconds.
        Weight::from_parts(90_337_000, 1098)
            // Standard Error: 30_241
            .saturating_add(Weight::from_parts(43_738_719, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `5069898`
        // Minimum execution time: 8_559_186_000 picoseconds.
        Weight::from_parts(8_502_224_926, 5069898)
            // Standard Error: 30_589
            .saturating_add(Weight::from_parts(42_648_889, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1787 + p * (65580 ±0)`
        //  Estimated: `1913 + p * (75482 ±0)`
        // Minimum execution time: 85_952_000 picoseconds.
        Weight::from_parts(91_564_000, 1913)
            // Standard Error: 44_275
            .saturating_add(Weight::from_parts(59_592_969, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `1098 + p * (9900 ±0)`
        // Minimum execution time: 90_273_000 picoseconds.
        Weight::from_parts(26_225_241, 1098)
            // Standard Error: 254_821
            .saturating_add(Weight::from_parts(53_955_219, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `1463 + p * (9883 ±2)`
        // Minimum execution time: 113_317_000 picoseconds.
        Weight::from_parts(118_285_000, 1463)
            // Standard Error: 265_057
            .saturating_add(Weight::from_parts(59_296_574, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `317898`
        // Minimum execution time: 646_830_000 picoseconds.
        Weight::from_parts(530_237_529, 317898)
            // Standard Error: 385_746
            .saturating_add(Weight::from_parts(64_122_238, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_284_807_000 picoseconds.
        Weight::from_parts(5_399_478_957, 0)
            // Standard Error: 37_446
            .saturating_add(Weight::from_parts(2_514_695 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_288_369_000 picoseconds.
        Weight::from_parts(5_409_074_344, 0)
            // Standard Error: 37_363
            .saturating_add(Weight::from_parts(2_398_379 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_650_763_000 picoseconds.
        Weight::from_parts(11_311_333_372, 0)
            // Standard Error: 55_640
            .saturating_add(Weight::from_parts(4_909_129 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_640_535_000 picoseconds.
        Weight::from_parts(11_319_558_428, 0)
            // Standard Error: 62_662
            .saturating_add(Weight::from_parts(4_745_116 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_323_000 picoseconds.
        Weight::from_parts(1_377_000, 0)
            // Standard Error: 10_314
            .saturating_add(Weight::from_parts(3_396_267 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_333_000 picoseconds.
        Weight::from_parts(1_426_000, 0)
            // Standard Error: 4_509
            .saturating_add(Weight::from_parts(2_473_545 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_332_000 picoseconds.
        Weight::from_parts(2_045_029, 0)
            // Standard Error: 564
            .saturating_add(Weight::from_parts(1_747_914 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_336_000 picoseconds.
        Weight::from_parts(1_405_000, 0)
            // Standard Error: 7_895
            .saturating_add(Weight::from_parts(2_950_664 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_312_000 picoseconds.
        Weight::from_parts(1_400_000, 0)
            // Standard Error: 31_027
            .saturating_add(Weight::from_parts(5_236_376 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_725_000 picoseconds.
        Weight::from_parts(6_691_481, 0)
            // Standard Error: 493
            .saturating_add(Weight::from_parts(68_422 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_323_000 picoseconds.
        Weight::from_parts(1_554_360, 0)
            // Standard Error: 6_197
            .saturating_add(Weight::from_parts(2_839_324 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts((2_839_324 -
            2_660_827) * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_369_000 picoseconds.
        Weight::from_parts(1_767_463, 0)
            // Standard Error: 13_826
            .saturating_add(Weight::from_parts(2_660_827 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_487_000 picoseconds.
        Weight::from_parts(1_558_000, 0)
            // Standard Error: 21_201
            .saturating_add(Weight::from_parts(11_551_348 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_702_000 picoseconds.
        Weight::from_parts(11_858_000, 0)
            // Standard Error: 11_289
            .saturating_add(Weight::from_parts(683_383 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_154_000 picoseconds.
        Weight::from_parts(4_406_442, 0)
            // Standard Error: 8
            .saturating_add(Weight::from_parts(1 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_237_000 picoseconds.
        Weight::from_parts(10_096_539, 0)
            // Standard Error: 3_015
            .saturating_add(Weight::from_parts(308_686 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_247_000 picoseconds.
        Weight::from_parts(10_280_433, 0)
            // Standard Error: 2_412
            .saturating_add(Weight::from_parts(753_026 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_289_000 picoseconds.
        Weight::from_parts(10_581_279, 0)
            // Standard Error: 2_317
            .saturating_add(Weight::from_parts(745_402 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_383_000 picoseconds.
        Weight::from_parts(1_063_303, 0)
            // Standard Error: 1_703
            .saturating_add(Weight::from_parts(324_823 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_388_000 picoseconds.
        Weight::from_parts(1_484_000, 0)
            // Standard Error: 2_872
            .saturating_add(Weight::from_parts(576_956 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_429_000 picoseconds.
        Weight::from_parts(159_110, 0)
            // Standard Error: 7_315
            .saturating_add(Weight::from_parts(6_563_503 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_292_000 picoseconds.
        Weight::from_parts(1_362_000, 0)
            // Standard Error: 4_234
            .saturating_add(Weight::from_parts(339_306 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_340_000 picoseconds.
        Weight::from_parts(1_671_037, 0)
            // Standard Error: 726
            .saturating_add(Weight::from_parts(197_327 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_301_000 picoseconds.
        Weight::from_parts(440_987, 0)
            // Standard Error: 6_205
            .saturating_add(Weight::from_parts(339_101 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_322_000 picoseconds.
        Weight::from_parts(1_682_632, 0)
            // Standard Error: 629
            .saturating_add(Weight::from_parts(197_526 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_346_000 picoseconds.
        Weight::from_parts(1_230_564, 0)
            // Standard Error: 1_587
            .saturating_add(Weight::from_parts(288_827 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_331_000 picoseconds.
        Weight::from_parts(1_687_791, 0)
            // Standard Error: 754
            .saturating_add(Weight::from_parts(208_983 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_316_000 picoseconds.
        Weight::from_parts(1_389_000, 0)
            // Standard Error: 11_210
            .saturating_add(Weight::from_parts(919_617 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_368_000 picoseconds.
        Weight::from_parts(1_413_000, 0)
            // Standard Error: 3_479
            .saturating_add(Weight::from_parts(516_855 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_336_000 picoseconds.
        Weight::from_parts(1_491_667, 0)
            // Standard Error: 965
            .saturating_add(Weight::from_parts(195_363 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_349_000 picoseconds.
        Weight::from_parts(1_464_409, 0)
            // Standard Error: 939
            .saturating_add(Weight::from_parts(196_288 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_324_000 picoseconds.
        Weight::from_parts(1_242_652, 0)
            // Standard Error: 2_248
            .saturating_add(Weight::from_parts(265_582 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_343_000 picoseconds.
        Weight::from_parts(1_266_420, 0)
            // Standard Error: 2_145
            .saturating_add(Weight::from_parts(269_322 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_303_000 picoseconds.
        Weight::from_parts(1_407_695, 0)
            // Standard Error: 2_792
            .saturating_add(Weight::from_parts(243_932 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_333_000 picoseconds.
        Weight::from_parts(1_523_331, 0)
            // Standard Error: 811
            .saturating_add(Weight::from_parts(175_821 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_270_000 picoseconds.
        Weight::from_parts(1_714_165, 0)
            // Standard Error: 510
            .saturating_add(Weight::from_parts(99_738 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_267_000 picoseconds.
        Weight::from_parts(1_796_577, 0)
            // Standard Error: 437
            .saturating_add(Weight::from_parts(99_025 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_315_000 picoseconds.
        Weight::from_parts(1_346_000, 0)
            // Standard Error: 7_812
            .saturating_add(Weight::from_parts(913_156 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_326_000 picoseconds.
        Weight::from_parts(1_398_000, 0)
            // Standard Error: 3_266
            .saturating_add(Weight::from_parts(529_651 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_295_000 picoseconds.
        Weight::from_parts(1_338_000, 0)
            // Standard Error: 7_540
            .saturating_add(Weight::from_parts(900_199 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_257_000 picoseconds.
        Weight::from_parts(1_334_000, 0)
            // Standard Error: 6_627
            .saturating_add(Weight::from_parts(558_800 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_300_000 picoseconds.
        Weight::from_parts(1_396_000, 0)
            // Standard Error: 9_040
            .saturating_add(Weight::from_parts(932_346 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_264_000 picoseconds.
        Weight::from_parts(1_365_000, 0)
            // Standard Error: 3_372
            .saturating_add(Weight::from_parts(522_683 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_337_000 picoseconds.
        Weight::from_parts(1_418_000, 0)
            // Standard Error: 8_646
            .saturating_add(Weight::from_parts(914_578 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_328_000 picoseconds.
        Weight::from_parts(1_372_000, 0)
            // Standard Error: 7_710
            .saturating_add(Weight::from_parts(549_895 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_326_000 picoseconds.
        Weight::from_parts(1_385_000, 0)
            // Standard Error: 7_970
            .saturating_add(Weight::from_parts(904_254 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_285_000 picoseconds.
        Weight::from_parts(1_361_000, 0)
            // Standard Error: 7_084
            .saturating_add(Weight::from_parts(551_858 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_268_000 picoseconds.
        Weight::from_parts(1_386_000, 0)
            // Standard Error: 8_175
            .saturating_add(Weight::from_parts(919_620 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_357_000 picoseconds.
        Weight::from_parts(1_414_000, 0)
            // Standard Error: 3_026
            .saturating_add(Weight::from_parts(527_129 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_282_000 picoseconds.
        Weight::from_parts(1_384_000, 0)
            // Standard Error: 9_757
            .saturating_add(Weight::from_parts(939_039 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_351_000 picoseconds.
        Weight::from_parts(1_430_000, 0)
            // Standard Error: 6_458
            .saturating_add(Weight::from_parts(535_040 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_357_000 picoseconds.
        Weight::from_parts(1_397_000, 0)
            // Standard Error: 8_009
            .saturating_add(Weight::from_parts(905_230 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_336_000 picoseconds.
        Weight::from_parts(1_434_000, 0)
            // Standard Error: 2_552
            .saturating_add(Weight::from_parts(510_598 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_362_000 picoseconds.
        Weight::from_parts(1_440_000, 0)
            // Standard Error: 8_120
            .saturating_add(Weight::from_parts(913_405 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_324_000 picoseconds.
        Weight::from_parts(1_385_000, 0)
            // Standard Error: 2_777
            .saturating_add(Weight::from_parts(515_942 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_351_000 picoseconds.
        Weight::from_parts(1_420_000, 0)
            // Standard Error: 7_892
            .saturating_add(Weight::from_parts(899_416 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_340_000 picoseconds.
        Weight::from_parts(1_396_000, 0)
            // Standard Error: 2_691
            .saturating_add(Weight::from_parts(517_181 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_331_000 picoseconds.
        Weight::from_parts(1_408_000, 0)
            // Standard Error: 3_576
            .saturating_add(Weight::from_parts(586_185 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_376_000 picoseconds.
        Weight::from_parts(1_232_961, 0)
            // Standard Error: 2_856
            .saturating_add(Weight::from_parts(311_321 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_311_000 picoseconds.
        Weight::from_parts(1_402_000, 0)
            // Standard Error: 3_641
            .saturating_add(Weight::from_parts(585_217 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_321_000 picoseconds.
        Weight::from_parts(1_109_846, 0)
            // Standard Error: 1_429
            .saturating_add(Weight::from_parts(310_413 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_339_000 picoseconds.
        Weight::from_parts(1_456_000, 0)
            // Standard Error: 9_208
            .saturating_add(Weight::from_parts(905_384 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_324_000 picoseconds.
        Weight::from_parts(1_424_000, 0)
            // Standard Error: 3_077
            .saturating_add(Weight::from_parts(550_130 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_319_000 picoseconds.
        Weight::from_parts(1_123_741, 0)
            // Standard Error: 10_535
            .saturating_add(Weight::from_parts(1_903_611 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_368_000 picoseconds.
        Weight::from_parts(1_402_000, 0)
            // Standard Error: 7_228
            .saturating_add(Weight::from_parts(1_348_198 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_297_000 picoseconds.
        Weight::from_parts(1_376_000, 0)
            // Standard Error: 5_594
            .saturating_add(Weight::from_parts(1_928_813 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_315_000 picoseconds.
        Weight::from_parts(1_384_000, 0)
            // Standard Error: 9_638
            .saturating_add(Weight::from_parts(1_373_567 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_382_000 picoseconds.
        Weight::from_parts(1_446_000, 0)
            // Standard Error: 36_346
            .saturating_add(Weight::from_parts(9_771_506 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_384_000 picoseconds.
        Weight::from_parts(1_448_000, 0)
            // Standard Error: 45_347
            .saturating_add(Weight::from_parts(8_203_045 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_397_000 picoseconds.
        Weight::from_parts(1_432_000, 0)
            // Standard Error: 8_655
            .saturating_add(Weight::from_parts(1_969_861 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_340_000 picoseconds.
        Weight::from_parts(1_397_000, 0)
            // Standard Error: 10_245
            .saturating_add(Weight::from_parts(1_400_327 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_317_000 picoseconds.
        Weight::from_parts(1_384_000, 0)
            // Standard Error: 6_330
            .saturating_add(Weight::from_parts(668_554 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_331_000 picoseconds.
        Weight::from_parts(943_013, 0)
            // Standard Error: 1_910
            .saturating_add(Weight::from_parts(339_179 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_417_000 picoseconds.
        Weight::from_parts(1_444_000, 0)
            // Standard Error: 5_904
            .saturating_add(Weight::from_parts(656_025 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_312_000 picoseconds.
        Weight::from_parts(638_154, 0)
            // Standard Error: 6_097
            .saturating_add(Weight::from_parts(364_863 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_283_000 picoseconds.
        Weight::from_parts(1_382_000, 0)
            // Standard Error: 4_056
            .saturating_add(Weight::from_parts(642_425 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_297_000 picoseconds.
        Weight::from_parts(1_058_003, 0)
            // Standard Error: 1_579
            .saturating_add(Weight::from_parts(335_932 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_351_000 picoseconds.
        Weight::from_parts(1_399_000, 0)
            // Standard Error: 3_196
            .saturating_add(Weight::from_parts(532_298 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_352_000 picoseconds.
        Weight::from_parts(1_236_561, 0)
            // Standard Error: 1_939
            .saturating_add(Weight::from_parts(308_925 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_276_000 picoseconds.
        Weight::from_parts(1_395_000, 0)
            // Standard Error: 2_787
            .saturating_add(Weight::from_parts(529_480 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_355_000 picoseconds.
        Weight::from_parts(1_268_237, 0)
            // Standard Error: 1_470
            .saturating_add(Weight::from_parts(307_928 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_335_000 picoseconds.
        Weight::from_parts(1_381_000, 0)
            // Standard Error: 4_640
            .saturating_add(Weight::from_parts(547_074 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_276_000 picoseconds.
        Weight::from_parts(1_232_186, 0)
            // Standard Error: 1_605
            .saturating_add(Weight::from_parts(307_813 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_246_000 picoseconds.
        Weight::from_parts(1_380_000, 0)
            // Standard Error: 2_619
            .saturating_add(Weight::from_parts(526_315 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_308_000 picoseconds.
        Weight::from_parts(1_235_811, 0)
            // Standard Error: 2_117
            .saturating_add(Weight::from_parts(310_852 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_285_000 picoseconds.
        Weight::from_parts(1_369_000, 0)
            // Standard Error: 3_500
            .saturating_add(Weight::from_parts(541_717 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_320_000 picoseconds.
        Weight::from_parts(1_227_586, 0)
            // Standard Error: 2_335
            .saturating_add(Weight::from_parts(315_688 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1134`
        //  Estimated: `6196`
        // Minimum execution time: 105_101_000 picoseconds.
        Weight::from_parts(106_280_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `825`
        //  Estimated: `4290`
        // Minimum execution time: 58_312_000 picoseconds.
        Weight::from_parts(59_875_000, 4290)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1096`
        //  Estimated: `6196`
        // Minimum execution time: 118_483_000 picoseconds.
        Weight::from_parts(121_408_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `661`
        //  Estimated: `4126`
        // Minimum execution time: 39_337_000 picoseconds.
        Weight::from_parts(40_761_000, 4126)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `906`
        //  Estimated: `4371`
        // Minimum execution time: 56_986_000 picoseconds.
        Weight::from_parts(57_831_000, 4371)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 6_642_000 picoseconds.
        Weight::from_parts(6_912_000, 3545)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1658`
        //  Estimated: `7598`
        // Minimum execution time: 158_063_000 picoseconds.
        Weight::from_parts(161_031_000, 7598)
            .saturating_add(RocksDbWeight::get().reads(18_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1381`
        //  Estimated: `7321`
        // Minimum execution time: 138_497_000 picoseconds.
        Weight::from_parts(140_393_000, 7321)
            .saturating_add(RocksDbWeight::get().reads(17_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
}
