// This file is part of Gear.

// Copyright (C) 2022-2025 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-10-08, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --runtime=./target/production/wbuild/vara-runtime/vara_runtime.compact.compressed.wasm --genesis-builder=runtime --genesis-builder-preset=development --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=alloc,claim_value,claim_value_to_inheritor,create_program,db_read_per_kb,db_write_per_kb,free,free_range,free_range_per_page,gr_block_height,gr_block_timestamp,gr_create_program,gr_create_program_per_kb,gr_create_program_wgas,gr_create_program_wgas_per_kb,gr_debug,gr_debug_per_kb,gr_env_vars,gr_gas_available,gr_message_id,gr_program_id,gr_random,gr_read,gr_read_per_kb,gr_reply_code,gr_reply_deposit,gr_reply_per_kb,gr_reply_push,gr_reply_push_input,gr_reply_push_input_per_kb,gr_reply_push_per_kb,gr_reply_to,gr_reply_wgas_per_kb,gr_reservation_reply_commit_per_kb,gr_reservation_reply_per_kb,gr_reservation_send,gr_reservation_send_commit,gr_reservation_send_per_kb,gr_reserve_gas,gr_send,gr_send_commit,gr_send_commit_wgas,gr_send_init,gr_send_input,gr_send_input_wgas,gr_send_per_kb,gr_send_push,gr_send_push_input,gr_send_push_input_per_kb,gr_send_push_per_kb,gr_send_wgas,gr_send_wgas_per_kb,gr_signal_code,gr_signal_from,gr_size,gr_source,gr_system_reserve_gas,gr_unreserve_gas,gr_value,gr_value_available,gr_wake,instantiate_module_code_section_per_kb,instantiate_module_data_section_per_kb,instantiate_module_element_section_per_kb,instantiate_module_global_section_per_kb,instantiate_module_table_section_per_kb,instantiate_module_type_section_per_kb,instr_br,instr_br_if,instr_br_table,instr_br_table_per_entry,instr_call,instr_call_const,instr_call_indirect,instr_call_indirect_per_param,instr_call_per_local,instr_global_get,instr_global_set,instr_i32add,instr_i32and,instr_i32clz,instr_i32ctz,instr_i32divs,instr_i32divu,instr_i32eq,instr_i32eqz,instr_i32extend16s,instr_i32extend8s,instr_i32ges,instr_i32geu,instr_i32gts,instr_i32gtu,instr_i32les,instr_i32leu,instr_i32load,instr_i32lts,instr_i32ltu,instr_i32mul,instr_i32ne,instr_i32or,instr_i32popcnt,instr_i32rems,instr_i32remu,instr_i32rotl,instr_i32rotr,instr_i32shl,instr_i32shrs,instr_i32shru,instr_i32store,instr_i32sub,instr_i32wrapi64,instr_i32xor,instr_i64add,instr_i64and,instr_i64clz,instr_i64ctz,instr_i64divs,instr_i64divu,instr_i64eq,instr_i64eqz,instr_i64extend16s,instr_i64extend32s,instr_i64extend8s,instr_i64extendsi32,instr_i64extendui32,instr_i64ges,instr_i64geu,instr_i64gts,instr_i64gtu,instr_i64les,instr_i64leu,instr_i64load,instr_i64lts,instr_i64ltu,instr_i64mul,instr_i64ne,instr_i64or,instr_i64popcnt,instr_i64rems,instr_i64remu,instr_i64rotl,instr_i64rotr,instr_i64shl,instr_i64shrs,instr_i64shru,instr_i64store,instr_i64sub,instr_i64xor,instr_if,instr_local_get,instr_local_set,instr_local_tee,instr_memory_current,instr_select,lazy_pages_host_func_read,lazy_pages_host_func_write,lazy_pages_host_func_write_after_read,lazy_pages_load_page_storage_data,lazy_pages_signal_read,lazy_pages_signal_write,lazy_pages_signal_write_after_read,load_allocations_per_interval,mem_grow,mem_grow_per_page,reinstrument_per_kb,send_message,send_reply,tasks_remove_from_mailbox,tasks_remove_from_waitlist,tasks_remove_gas_reservation,tasks_send_dispatch,tasks_send_user_message,tasks_send_user_message_to_mailbox,tasks_wake_message,tasks_wake_message_no_wake,upload_code,upload_program --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_code_section_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_data_section_per_kb(d: u32, ) -> Weight;
    fn instantiate_module_global_section_per_kb(g: u32, ) -> Weight;
    fn instantiate_module_table_section_per_kb(t: u32, ) -> Weight;
    fn instantiate_module_element_section_per_kb(e: u32, ) -> Weight;
    fn instantiate_module_type_section_per_kb(t: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn claim_value_to_inheritor(d: u32, ) -> Weight;
    fn reinstrument_per_kb(e: u32, ) -> Weight;
    fn load_allocations_per_interval(a: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn mem_grow_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn free_range(r: u32, ) -> Weight;
    fn free_range_per_page(p: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_env_vars(r: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn tasks_remove_gas_reservation() -> Weight;
    fn tasks_send_user_message_to_mailbox() -> Weight;
    fn tasks_send_user_message() -> Weight;
    fn tasks_send_dispatch() -> Weight;
    fn tasks_wake_message() -> Weight;
    fn tasks_wake_message_no_wake() -> Weight;
    fn tasks_remove_from_waitlist() -> Weight;
    fn tasks_remove_from_mailbox() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_638_000 picoseconds.
        Weight::from_parts(87_698_814, 0)
            // Standard Error: 81_383
            .saturating_add(Weight::from_parts(14_760_924, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_464_000 picoseconds.
        Weight::from_parts(87_970_042, 0)
            // Standard Error: 84_207
            .saturating_add(Weight::from_parts(14_403_406, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_961_000 picoseconds.
        Weight::from_parts(87_629_768, 0)
            // Standard Error: 83_594
            .saturating_add(Weight::from_parts(13_245_088, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_418_000 picoseconds.
        Weight::from_parts(88_186_426, 0)
            // Standard Error: 79_425
            .saturating_add(Weight::from_parts(12_897_324, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_090_000 picoseconds.
        Weight::from_parts(92_626_578, 0)
            // Standard Error: 78_948
            .saturating_add(Weight::from_parts(11_077_460, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_748_000 picoseconds.
        Weight::from_parts(90_598_670, 0)
            // Standard Error: 81_358
            .saturating_add(Weight::from_parts(13_233_944, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_241_000 picoseconds.
        Weight::from_parts(88_945_066, 0)
            // Standard Error: 82_147
            .saturating_add(Weight::from_parts(9_593_070, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_355_000 picoseconds.
        Weight::from_parts(89_317_676, 0)
            // Standard Error: 82_851
            .saturating_add(Weight::from_parts(8_510_322, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_022_000 picoseconds.
        Weight::from_parts(84_783_048, 0)
            // Standard Error: 79_540
            .saturating_add(Weight::from_parts(20_969_518, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_037_000 picoseconds.
        Weight::from_parts(85_412_290, 0)
            // Standard Error: 80_224
            .saturating_add(Weight::from_parts(15_865_290, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_584_000 picoseconds.
        Weight::from_parts(85_460_050, 0)
            // Standard Error: 82_489
            .saturating_add(Weight::from_parts(14_931_310, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_049_000 picoseconds.
        Weight::from_parts(85_177_914, 0)
            // Standard Error: 81_098
            .saturating_add(Weight::from_parts(15_026_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_390_000 picoseconds.
        Weight::from_parts(84_760_726, 0)
            // Standard Error: 74_444
            .saturating_add(Weight::from_parts(15_584_970, 0).saturating_mul(r.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_376_000 picoseconds.
        Weight::from_parts(1_430_000, 0)
            // Standard Error: 548
            .saturating_add(Weight::from_parts(244_302, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3577 + c * (1024 ±0)`
        // Minimum execution time: 6_369_000 picoseconds.
        Weight::from_parts(836_623, 3577)
            // Standard Error: 3_395
            .saturating_add(Weight::from_parts(873_479, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_code_section_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 52_395_000 picoseconds.
        Weight::from_parts(56_611_000, 0)
            // Standard Error: 29_413
            .saturating_add(Weight::from_parts(2_865_471, 0).saturating_mul(c.into()))
    }
    /// The range of component `d` is `[0, 512]`.
    fn instantiate_module_data_section_per_kb(d: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 72_952_000 picoseconds.
        Weight::from_parts(108_636_151, 0)
            // Standard Error: 2_663
            .saturating_add(Weight::from_parts(677_133, 0).saturating_mul(d.into()))
    }
    /// The range of component `g` is `[0, 512]`.
    fn instantiate_module_global_section_per_kb(g: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_073_000 picoseconds.
        Weight::from_parts(53_381_000, 0)
            // Standard Error: 32_953
            .saturating_add(Weight::from_parts(3_016_261, 0).saturating_mul(g.into()))
    }
    /// The range of component `t` is `[0, 9765]`.
    fn instantiate_module_table_section_per_kb(t: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 53_918_000 picoseconds.
        Weight::from_parts(534_874_669, 0)
            // Standard Error: 26_786
            .saturating_add(Weight::from_parts(659_605, 0).saturating_mul(t.into()))
    }
    /// The range of component `e` is `[0, 512]`.
    fn instantiate_module_element_section_per_kb(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 299_959_000 picoseconds.
        Weight::from_parts(433_376_465, 0)
            // Standard Error: 25_294
            .saturating_add(Weight::from_parts(2_546_815, 0).saturating_mul(e.into()))
    }
    /// The range of component `t` is `[0, 20]`.
    fn instantiate_module_type_section_per_kb(t: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_150_000 picoseconds.
        Weight::from_parts(42_500_272, 0)
            // Standard Error: 175_184
            .saturating_add(Weight::from_parts(22_893_152, 0).saturating_mul(t.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1335`
        //  Estimated: `8799`
        // Minimum execution time: 182_585_000 picoseconds.
        Weight::from_parts(187_382_000, 8799)
            .saturating_add(T::DbWeight::get().reads(18_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4`
        //  Estimated: `3469`
        // Minimum execution time: 93_970_000 picoseconds.
        Weight::from_parts(141_601_671, 3469)
            // Standard Error: 49_312
            .saturating_add(Weight::from_parts(88_834_733, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `669`
        //  Estimated: `6196`
        // Minimum execution time: 201_951_000 picoseconds.
        Weight::from_parts(299_426_143, 6196)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(2_077, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `461`
        //  Estimated: `6196`
        // Minimum execution time: 8_257_080_000 picoseconds.
        Weight::from_parts(8_266_593_000, 6196)
            // Standard Error: 393_001
            .saturating_add(Weight::from_parts(68_759_963, 0).saturating_mul(c.into()))
            // Standard Error: 23
            .saturating_add(Weight::from_parts(712, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(15_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `531`
        //  Estimated: `6196`
        // Minimum execution time: 126_226_000 picoseconds.
        Weight::from_parts(105_291_661, 6196)
            // Standard Error: 5
            .saturating_add(Weight::from_parts(1_238, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(12_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1334`
        //  Estimated: `8799`
        // Minimum execution time: 213_941_000 picoseconds.
        Weight::from_parts(206_322_064, 8799)
            // Standard Error: 5
            .saturating_add(Weight::from_parts(1_249, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(19_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `d` is `[1, 1024]`.
    fn claim_value_to_inheritor(d: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + d * (207 ±0)`
        //  Estimated: `3593 + d * (2683 ±0)`
        // Minimum execution time: 68_782_000 picoseconds.
        Weight::from_parts(69_437_000, 3593)
            // Standard Error: 36_215
            .saturating_add(Weight::from_parts(53_874_207, 0).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
            .saturating_add(Weight::from_parts(0, 2683).saturating_mul(d.into()))
    }
    /// The range of component `e` is `[0, 512]`.
    fn reinstrument_per_kb(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `296 + e * (1024 ±0)`
        //  Estimated: `3760 + e * (1024 ±0)`
        // Minimum execution time: 84_055_000 picoseconds.
        Weight::from_parts(187_026_293, 3760)
            // Standard Error: 475_717
            .saturating_add(Weight::from_parts(753_801_065, 0).saturating_mul(e.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(e.into()))
    }
    /// The range of component `a` is `[0, 32767]`.
    fn load_allocations_per_interval(a: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101 + a * (8 ±0)`
        //  Estimated: `3566 + a * (8 ±0)`
        // Minimum execution time: 6_952_000 picoseconds.
        Weight::from_parts(10_328_075, 3566)
            // Standard Error: 30
            .saturating_add(Weight::from_parts(23_938, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 8).saturating_mul(a.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 241_096_000 picoseconds.
        Weight::from_parts(165_695_918, 0)
            // Standard Error: 323_636
            .saturating_add(Weight::from_parts(145_032_627, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 188_000 picoseconds.
        Weight::from_parts(707_132, 0)
            // Standard Error: 35_459
            .saturating_add(Weight::from_parts(59_008_025, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 819]`.
    fn mem_grow_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 59_391_000 picoseconds.
        Weight::from_parts(61_143_899, 0)
            // Standard Error: 103
            .saturating_add(Weight::from_parts(313, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 183_614_000 picoseconds.
        Weight::from_parts(148_096_618, 0)
            // Standard Error: 457_192
            .saturating_add(Weight::from_parts(79_118_397, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 188_386_000 picoseconds.
        Weight::from_parts(144_413_884, 0)
            // Standard Error: 445_383
            .saturating_add(Weight::from_parts(83_190_740, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 700]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 187_837_000 picoseconds.
        Weight::from_parts(317_199_602, 0)
            // Standard Error: 8_450
            .saturating_add(Weight::from_parts(4_324_506, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_280_000 picoseconds.
        Weight::from_parts(81_427_826, 0)
            // Standard Error: 4_521
            .saturating_add(Weight::from_parts(2_525_760, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 152_543_000 picoseconds.
        Weight::from_parts(172_546_593, 0)
            // Standard Error: 6_352
            .saturating_add(Weight::from_parts(2_532_797, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_778_000 picoseconds.
        Weight::from_parts(91_015_108, 0)
            // Standard Error: 299_393
            .saturating_add(Weight::from_parts(94_842_820, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_821_000 picoseconds.
        Weight::from_parts(88_683_976, 0)
            // Standard Error: 270_532
            .saturating_add(Weight::from_parts(92_156_586, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_080_000 picoseconds.
        Weight::from_parts(99_655_018, 0)
            // Standard Error: 268_557
            .saturating_add(Weight::from_parts(89_605_619, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_349_000 picoseconds.
        Weight::from_parts(81_114_956, 0)
            // Standard Error: 287_304
            .saturating_add(Weight::from_parts(91_170_430, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_993_000 picoseconds.
        Weight::from_parts(86_349_176, 0)
            // Standard Error: 259_423
            .saturating_add(Weight::from_parts(90_135_604, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_414_000 picoseconds.
        Weight::from_parts(88_688_115, 0)
            // Standard Error: 265_181
            .saturating_add(Weight::from_parts(91_645_825, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_772_000 picoseconds.
        Weight::from_parts(90_955_250, 0)
            // Standard Error: 248_397
            .saturating_add(Weight::from_parts(91_741_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_771_000 picoseconds.
        Weight::from_parts(81_534_828, 0)
            // Standard Error: 257_862
            .saturating_add(Weight::from_parts(92_035_387, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_914_000 picoseconds.
        Weight::from_parts(115_392_314, 0)
            // Standard Error: 394_133
            .saturating_add(Weight::from_parts(138_505_525, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 204_002_000 picoseconds.
        Weight::from_parts(204_943_000, 0)
            // Standard Error: 121_704
            .saturating_add(Weight::from_parts(17_164_182, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_867_000 picoseconds.
        Weight::from_parts(87_932_805, 0)
            // Standard Error: 357_927
            .saturating_add(Weight::from_parts(94_605_306, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_116_000 picoseconds.
        Weight::from_parts(109_127_153, 0)
            // Standard Error: 331_070
            .saturating_add(Weight::from_parts(91_066_520, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_552_000 picoseconds.
        Weight::from_parts(90_890_169, 0)
            // Standard Error: 275_600
            .saturating_add(Weight::from_parts(89_568_386, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_845_000 picoseconds.
        Weight::from_parts(96_148_475, 0)
            // Standard Error: 305_215
            .saturating_add(Weight::from_parts(176_245_357, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_588_000 picoseconds.
        Weight::from_parts(88_326_000, 0)
            // Standard Error: 3_164_088
            .saturating_add(Weight::from_parts(709_013_789, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_243_000 picoseconds.
        Weight::from_parts(131_282_160, 0)
            // Standard Error: 335_558
            .saturating_add(Weight::from_parts(250_152_617, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 319_905_000 picoseconds.
        Weight::from_parts(324_723_000, 0)
            // Standard Error: 263_838
            .saturating_add(Weight::from_parts(41_977_002, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_588_000 picoseconds.
        Weight::from_parts(152_273_758, 0)
            // Standard Error: 328_432
            .saturating_add(Weight::from_parts(250_619_858, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 322_231_000 picoseconds.
        Weight::from_parts(327_207_000, 0)
            // Standard Error: 265_588
            .saturating_add(Weight::from_parts(42_088_275, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_546_000 picoseconds.
        Weight::from_parts(120_888_846, 0)
            // Standard Error: 279_924
            .saturating_add(Weight::from_parts(253_832_475, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_526_000 picoseconds.
        Weight::from_parts(127_681_539, 0)
            // Standard Error: 279_881
            .saturating_add(Weight::from_parts(249_038_114, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_271_000 picoseconds.
        Weight::from_parts(83_163_924, 0)
            // Standard Error: 295_911
            .saturating_add(Weight::from_parts(102_832_505, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_038_401_000 picoseconds.
        Weight::from_parts(2_173_192_003, 0)
            // Standard Error: 776_358
            .saturating_add(Weight::from_parts(163_388_582, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 302_524_000 picoseconds.
        Weight::from_parts(310_643_000, 0)
            // Standard Error: 265_158
            .saturating_add(Weight::from_parts(41_910_958, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_033_773_000 picoseconds.
        Weight::from_parts(2_140_320_983, 0)
            // Standard Error: 507_206
            .saturating_add(Weight::from_parts(208_490_315, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_039_662_000 picoseconds.
        Weight::from_parts(2_137_623_740, 0)
            // Standard Error: 630_747
            .saturating_add(Weight::from_parts(213_378_845, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 202_728_000 picoseconds.
        Weight::from_parts(231_899_334, 0)
            // Standard Error: 270_610
            .saturating_add(Weight::from_parts(303_459_719, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 479_308_000 picoseconds.
        Weight::from_parts(485_802_000, 0)
            // Standard Error: 254_576
            .saturating_add(Weight::from_parts(42_116_270, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_144_866_000 picoseconds.
        Weight::from_parts(2_194_910_061, 0)
            // Standard Error: 461_163
            .saturating_add(Weight::from_parts(263_162_149, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_691_000 picoseconds.
        Weight::from_parts(20_147_485, 0)
            // Standard Error: 3_811
            .saturating_add(Weight::from_parts(772_277, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_373_000 picoseconds.
        Weight::from_parts(20_365_478, 0)
            // Standard Error: 3_809
            .saturating_add(Weight::from_parts(770_842, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_397_000 picoseconds.
        Weight::from_parts(133_338_372, 0)
            // Standard Error: 295_247
            .saturating_add(Weight::from_parts(150_253_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_095_000 picoseconds.
        Weight::from_parts(101_167_789, 0)
            // Standard Error: 698
            .saturating_add(Weight::from_parts(708_223, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_342_000 picoseconds.
        Weight::from_parts(18_990_604, 0)
            // Standard Error: 3_876
            .saturating_add(Weight::from_parts(759_878, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_034_000 picoseconds.
        Weight::from_parts(19_565_199, 0)
            // Standard Error: 3_843
            .saturating_add(Weight::from_parts(770_578, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_242_000 picoseconds.
        Weight::from_parts(80_061_244, 0)
            // Standard Error: 272_456
            .saturating_add(Weight::from_parts(91_580_116, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_784_000 picoseconds.
        Weight::from_parts(82_124_586, 0)
            // Standard Error: 292_406
            .saturating_add(Weight::from_parts(90_316_249, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_941_000 picoseconds.
        Weight::from_parts(82_127_353, 0)
            // Standard Error: 251_102
            .saturating_add(Weight::from_parts(90_442_360, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_254_000 picoseconds.
        Weight::from_parts(107_600_579, 0)
            // Standard Error: 343_109
            .saturating_add(Weight::from_parts(102_087_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_151_000 picoseconds.
        Weight::from_parts(103_233_197, 0)
            // Standard Error: 158
            .saturating_add(Weight::from_parts(132_008, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_046_482_000 picoseconds.
        Weight::from_parts(2_153_701_768, 0)
            // Standard Error: 500_783
            .saturating_add(Weight::from_parts(118_962_918, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_294_808_000 picoseconds.
        Weight::from_parts(1_879_896_333, 0)
            // Standard Error: 10_458
            .saturating_add(Weight::from_parts(12_529_044, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_410_000 picoseconds.
        Weight::from_parts(97_932_827, 0)
            // Standard Error: 332_755
            .saturating_add(Weight::from_parts(107_072_254, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 148_201_000 picoseconds.
        Weight::from_parts(151_043_000, 0)
            // Standard Error: 262_608
            .saturating_add(Weight::from_parts(39_038_912, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_260_000 picoseconds.
        Weight::from_parts(92_012_597, 0)
            // Standard Error: 264_037
            .saturating_add(Weight::from_parts(90_985_399, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 148_266_000 picoseconds.
        Weight::from_parts(171_635_000, 0)
            // Standard Error: 1_207_735
            .saturating_add(Weight::from_parts(258_703_327, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_832_000 picoseconds.
        Weight::from_parts(125_007_816, 0)
            // Standard Error: 258_543
            .saturating_add(Weight::from_parts(319_551_330, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_091_421_000 picoseconds.
        Weight::from_parts(64_126_155_000, 0)
            // Standard Error: 448_008
            .saturating_add(Weight::from_parts(10_058_434, 0).saturating_mul(p.into()))
            // Standard Error: 447_986
            .saturating_add(Weight::from_parts(133_592_054, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_637_000 picoseconds.
        Weight::from_parts(124_599_113, 0)
            // Standard Error: 267_959
            .saturating_add(Weight::from_parts(322_883_759, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_054_038_000 picoseconds.
        Weight::from_parts(64_128_795_000, 0)
            // Standard Error: 445_611
            .saturating_add(Weight::from_parts(9_997_787, 0).saturating_mul(p.into()))
            // Standard Error: 445_589
            .saturating_add(Weight::from_parts(133_584_759, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `1098 + p * (9900 ±0)`
        // Minimum execution time: 82_552_000 picoseconds.
        Weight::from_parts(103_400_516, 1098)
            // Standard Error: 9_266
            .saturating_add(Weight::from_parts(16_776_145, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `1098 + p * (9900 ±0)`
        // Minimum execution time: 81_679_000 picoseconds.
        Weight::from_parts(86_521_000, 1098)
            // Standard Error: 29_105
            .saturating_add(Weight::from_parts(43_796_361, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `5069898`
        // Minimum execution time: 8_632_356_000 picoseconds.
        Weight::from_parts(8_578_238_835, 5069898)
            // Standard Error: 25_380
            .saturating_add(Weight::from_parts(42_694_917, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1787 + p * (65580 ±0)`
        //  Estimated: `1913 + p * (75482 ±0)`
        // Minimum execution time: 83_196_000 picoseconds.
        Weight::from_parts(85_453_000, 1913)
            // Standard Error: 42_540
            .saturating_add(Weight::from_parts(59_131_206, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `1098 + p * (9900 ±0)`
        // Minimum execution time: 89_814_000 picoseconds.
        Weight::from_parts(24_397_595, 1098)
            // Standard Error: 253_978
            .saturating_add(Weight::from_parts(54_414_944, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `1463 + p * (9883 ±2)`
        // Minimum execution time: 117_657_000 picoseconds.
        Weight::from_parts(120_686_000, 1463)
            // Standard Error: 257_835
            .saturating_add(Weight::from_parts(60_089_209, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `317898`
        // Minimum execution time: 655_273_000 picoseconds.
        Weight::from_parts(543_629_587, 317898)
            // Standard Error: 378_355
            .saturating_add(Weight::from_parts(64_704_940, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_365_156_000 picoseconds.
        Weight::from_parts(5_421_553_096, 0)
            // Standard Error: 34_431
            .saturating_add(Weight::from_parts(2_498_791 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_326_209_000 picoseconds.
        Weight::from_parts(5_425_169_577, 0)
            // Standard Error: 34_417
            .saturating_add(Weight::from_parts(2_417_941 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_703_833_000 picoseconds.
        Weight::from_parts(11_269_918_717, 0)
            // Standard Error: 51_866
            .saturating_add(Weight::from_parts(4_750_092 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_568_370_000 picoseconds.
        Weight::from_parts(11_234_712_546, 0)
            // Standard Error: 57_509
            .saturating_add(Weight::from_parts(4_745_041 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_488_000 picoseconds.
        Weight::from_parts(1_540_000, 0)
            // Standard Error: 10_157
            .saturating_add(Weight::from_parts(3_396_426 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_468_000 picoseconds.
        Weight::from_parts(1_512_000, 0)
            // Standard Error: 5_347
            .saturating_add(Weight::from_parts(2_460_431 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_440_000 picoseconds.
        Weight::from_parts(2_125_238, 0)
            // Standard Error: 582
            .saturating_add(Weight::from_parts(1_751_129 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_512_000 picoseconds.
        Weight::from_parts(1_559_000, 0)
            // Standard Error: 8_727
            .saturating_add(Weight::from_parts(2_978_766 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_469_000 picoseconds.
        Weight::from_parts(1_518_000, 0)
            // Standard Error: 30_680
            .saturating_add(Weight::from_parts(5_226_956 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_938_000 picoseconds.
        Weight::from_parts(6_489_457, 0)
            // Standard Error: 1_374
            .saturating_add(Weight::from_parts(78_849 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_490_000 picoseconds.
        Weight::from_parts(1_954_791, 0)
            // Standard Error: 6_197
            .saturating_add(Weight::from_parts(2_826_066 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts((2_826_066 -
            2_651_870) * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_529_000 picoseconds.
        Weight::from_parts(2_100_483, 0)
            // Standard Error: 14_142
            .saturating_add(Weight::from_parts(2_651_870 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_610_000 picoseconds.
        Weight::from_parts(1_685_000, 0)
            // Standard Error: 20_592
            .saturating_add(Weight::from_parts(11_542_905 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_623_000 picoseconds.
        Weight::from_parts(11_933_000, 0)
            // Standard Error: 10_927
            .saturating_add(Weight::from_parts(696_011 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_341_000 picoseconds.
        Weight::from_parts(4_564_309, 0)
            // Standard Error: 8
            .saturating_add(Weight::from_parts(21 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_491_000 picoseconds.
        Weight::from_parts(10_815_117, 0)
            // Standard Error: 2_990
            .saturating_add(Weight::from_parts(309_062 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_686_000 picoseconds.
        Weight::from_parts(11_105_262, 0)
            // Standard Error: 2_709
            .saturating_add(Weight::from_parts(744_921 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_718_000 picoseconds.
        Weight::from_parts(10_718_173, 0)
            // Standard Error: 5_858
            .saturating_add(Weight::from_parts(776_079 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_620_000 picoseconds.
        Weight::from_parts(1_320_212, 0)
            // Standard Error: 3_684
            .saturating_add(Weight::from_parts(342_526 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_645_000 picoseconds.
        Weight::from_parts(1_699_000, 0)
            // Standard Error: 5_764
            .saturating_add(Weight::from_parts(626_786 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_536_000 picoseconds.
        Weight::from_parts(420_239, 0)
            // Standard Error: 6_966
            .saturating_add(Weight::from_parts(6_557_730 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_446_000 picoseconds.
        Weight::from_parts(604_881, 0)
            // Standard Error: 7_594
            .saturating_add(Weight::from_parts(360_970 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_427_000 picoseconds.
        Weight::from_parts(1_770_900, 0)
            // Standard Error: 3_552
            .saturating_add(Weight::from_parts(219_486 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_436_000 picoseconds.
        Weight::from_parts(436_195, 0)
            // Standard Error: 6_583
            .saturating_add(Weight::from_parts(365_422 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_483_000 picoseconds.
        Weight::from_parts(1_825_830, 0)
            // Standard Error: 2_577
            .saturating_add(Weight::from_parts(209_982 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_465_000 picoseconds.
        Weight::from_parts(499_949, 0)
            // Standard Error: 9_085
            .saturating_add(Weight::from_parts(358_929 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_453_000 picoseconds.
        Weight::from_parts(1_878_001, 0)
            // Standard Error: 867
            .saturating_add(Weight::from_parts(217_828 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_422_000 picoseconds.
        Weight::from_parts(1_496_000, 0)
            // Standard Error: 15_254
            .saturating_add(Weight::from_parts(1_027_688 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_421_000 picoseconds.
        Weight::from_parts(1_514_000, 0)
            // Standard Error: 7_533
            .saturating_add(Weight::from_parts(572_714 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_452_000 picoseconds.
        Weight::from_parts(1_559_426, 0)
            // Standard Error: 2_044
            .saturating_add(Weight::from_parts(210_333 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_405_000 picoseconds.
        Weight::from_parts(1_452_217, 0)
            // Standard Error: 2_314
            .saturating_add(Weight::from_parts(217_031 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_486_000 picoseconds.
        Weight::from_parts(1_409_753, 0)
            // Standard Error: 2_722
            .saturating_add(Weight::from_parts(275_619 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_422_000 picoseconds.
        Weight::from_parts(1_531_496, 0)
            // Standard Error: 4_069
            .saturating_add(Weight::from_parts(278_050 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_456_000 picoseconds.
        Weight::from_parts(1_229_979, 0)
            // Standard Error: 6_232
            .saturating_add(Weight::from_parts(276_862 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_441_000 picoseconds.
        Weight::from_parts(1_669_151, 0)
            // Standard Error: 854
            .saturating_add(Weight::from_parts(185_751 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_448_000 picoseconds.
        Weight::from_parts(1_838_564, 0)
            // Standard Error: 827
            .saturating_add(Weight::from_parts(109_516 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_442_000 picoseconds.
        Weight::from_parts(1_912_401, 0)
            // Standard Error: 494
            .saturating_add(Weight::from_parts(108_984 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_448_000 picoseconds.
        Weight::from_parts(1_532_000, 0)
            // Standard Error: 9_796
            .saturating_add(Weight::from_parts(970_993 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_424_000 picoseconds.
        Weight::from_parts(1_518_000, 0)
            // Standard Error: 7_329
            .saturating_add(Weight::from_parts(584_961 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_402_000 picoseconds.
        Weight::from_parts(1_510_000, 0)
            // Standard Error: 9_357
            .saturating_add(Weight::from_parts(1_002_170 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_429_000 picoseconds.
        Weight::from_parts(1_540_000, 0)
            // Standard Error: 7_414
            .saturating_add(Weight::from_parts(584_935 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_410_000 picoseconds.
        Weight::from_parts(1_465_000, 0)
            // Standard Error: 8_454
            .saturating_add(Weight::from_parts(962_862 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_412_000 picoseconds.
        Weight::from_parts(29_233, 0)
            // Standard Error: 11_359
            .saturating_add(Weight::from_parts(610_276 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_456_000 picoseconds.
        Weight::from_parts(1_498_000, 0)
            // Standard Error: 13_417
            .saturating_add(Weight::from_parts(1_021_525 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_448_000 picoseconds.
        Weight::from_parts(1_525_000, 0)
            // Standard Error: 8_303
            .saturating_add(Weight::from_parts(591_034 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_471_000 picoseconds.
        Weight::from_parts(1_540_000, 0)
            // Standard Error: 13_089
            .saturating_add(Weight::from_parts(1_022_497 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_449_000 picoseconds.
        Weight::from_parts(1_517_000, 0)
            // Standard Error: 8_698
            .saturating_add(Weight::from_parts(594_879 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_462_000 picoseconds.
        Weight::from_parts(1_524_000, 0)
            // Standard Error: 8_756
            .saturating_add(Weight::from_parts(963_318 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_515_000 picoseconds.
        Weight::from_parts(1_562_000, 0)
            // Standard Error: 6_417
            .saturating_add(Weight::from_parts(580_334 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_492_000 picoseconds.
        Weight::from_parts(1_540_000, 0)
            // Standard Error: 10_610
            .saturating_add(Weight::from_parts(993_973 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_417_000 picoseconds.
        Weight::from_parts(1_512_000, 0)
            // Standard Error: 6_892
            .saturating_add(Weight::from_parts(585_613 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_419_000 picoseconds.
        Weight::from_parts(1_508_000, 0)
            // Standard Error: 10_576
            .saturating_add(Weight::from_parts(973_945 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_396_000 picoseconds.
        Weight::from_parts(1_506_000, 0)
            // Standard Error: 3_225
            .saturating_add(Weight::from_parts(548_021 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_446_000 picoseconds.
        Weight::from_parts(1_516_000, 0)
            // Standard Error: 13_055
            .saturating_add(Weight::from_parts(1_032_411 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_471_000 picoseconds.
        Weight::from_parts(1_513_000, 0)
            // Standard Error: 2_777
            .saturating_add(Weight::from_parts(539_489 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_463_000 picoseconds.
        Weight::from_parts(1_518_000, 0)
            // Standard Error: 12_479
            .saturating_add(Weight::from_parts(1_035_516 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_418_000 picoseconds.
        Weight::from_parts(1_554_000, 0)
            // Standard Error: 7_777
            .saturating_add(Weight::from_parts(584_889 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_504_000 picoseconds.
        Weight::from_parts(1_533_000, 0)
            // Standard Error: 5_641
            .saturating_add(Weight::from_parts(617_995 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_446_000 picoseconds.
        Weight::from_parts(1_110_425, 0)
            // Standard Error: 6_956
            .saturating_add(Weight::from_parts(348_188 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_461_000 picoseconds.
        Weight::from_parts(1_522_000, 0)
            // Standard Error: 10_294
            .saturating_add(Weight::from_parts(673_245 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_470_000 picoseconds.
        Weight::from_parts(1_347_726, 0)
            // Standard Error: 4_264
            .saturating_add(Weight::from_parts(331_454 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_504_000 picoseconds.
        Weight::from_parts(1_550_000, 0)
            // Standard Error: 11_669
            .saturating_add(Weight::from_parts(962_200 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_475_000 picoseconds.
        Weight::from_parts(1_497_000, 0)
            // Standard Error: 2_879
            .saturating_add(Weight::from_parts(574_079 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_480_000 picoseconds.
        Weight::from_parts(142_478, 0)
            // Standard Error: 13_071
            .saturating_add(Weight::from_parts(1_908_564 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_489_000 picoseconds.
        Weight::from_parts(1_528_000, 0)
            // Standard Error: 11_306
            .saturating_add(Weight::from_parts(1_360_255 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_450_000 picoseconds.
        Weight::from_parts(1_513_000, 0)
            // Standard Error: 7_987
            .saturating_add(Weight::from_parts(1_919_884 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_463_000 picoseconds.
        Weight::from_parts(1_506_000, 0)
            // Standard Error: 10_766
            .saturating_add(Weight::from_parts(1_324_346 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_396_000 picoseconds.
        Weight::from_parts(1_518_000, 0)
            // Standard Error: 36_922
            .saturating_add(Weight::from_parts(9_859_819 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_440_000 picoseconds.
        Weight::from_parts(1_482_000, 0)
            // Standard Error: 47_816
            .saturating_add(Weight::from_parts(8_166_575 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_480_000 picoseconds.
        Weight::from_parts(321_354, 0)
            // Standard Error: 16_552
            .saturating_add(Weight::from_parts(1_961_929 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_439_000 picoseconds.
        Weight::from_parts(1_506_000, 0)
            // Standard Error: 9_991
            .saturating_add(Weight::from_parts(1_343_263 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_459_000 picoseconds.
        Weight::from_parts(1_494_000, 0)
            // Standard Error: 8_577
            .saturating_add(Weight::from_parts(669_117 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_445_000 picoseconds.
        Weight::from_parts(998_293, 0)
            // Standard Error: 8_098
            .saturating_add(Weight::from_parts(359_466 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_492_000 picoseconds.
        Weight::from_parts(1_530_000, 0)
            // Standard Error: 3_963
            .saturating_add(Weight::from_parts(616_432 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_418_000 picoseconds.
        Weight::from_parts(699_536, 0)
            // Standard Error: 9_057
            .saturating_add(Weight::from_parts(376_105 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_420_000 picoseconds.
        Weight::from_parts(1_465_000, 0)
            // Standard Error: 6_079
            .saturating_add(Weight::from_parts(638_681 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_379_000 picoseconds.
        Weight::from_parts(141_407, 0)
            // Standard Error: 11_857
            .saturating_add(Weight::from_parts(413_984 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_482_000 picoseconds.
        Weight::from_parts(1_544_000, 0)
            // Standard Error: 6_715
            .saturating_add(Weight::from_parts(548_894 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_488_000 picoseconds.
        Weight::from_parts(1_517_160, 0)
            // Standard Error: 4_820
            .saturating_add(Weight::from_parts(304_341 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_434_000 picoseconds.
        Weight::from_parts(1_510_000, 0)
            // Standard Error: 6_855
            .saturating_add(Weight::from_parts(570_233 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_434_000 picoseconds.
        Weight::from_parts(1_523_237, 0)
            // Standard Error: 2_690
            .saturating_add(Weight::from_parts(301_214 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_443_000 picoseconds.
        Weight::from_parts(1_512_000, 0)
            // Standard Error: 5_844
            .saturating_add(Weight::from_parts(542_317 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_427_000 picoseconds.
        Weight::from_parts(662_890, 0)
            // Standard Error: 8_258
            .saturating_add(Weight::from_parts(345_137 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_460_000 picoseconds.
        Weight::from_parts(1_533_000, 0)
            // Standard Error: 5_568
            .saturating_add(Weight::from_parts(539_050 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_442_000 picoseconds.
        Weight::from_parts(1_114_134, 0)
            // Standard Error: 6_367
            .saturating_add(Weight::from_parts(324_106 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_470_000 picoseconds.
        Weight::from_parts(1_517_000, 0)
            // Standard Error: 3_614
            .saturating_add(Weight::from_parts(532_028 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_449_000 picoseconds.
        Weight::from_parts(978_738, 0)
            // Standard Error: 6_752
            .saturating_add(Weight::from_parts(334_980 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1134`
        //  Estimated: `6196`
        // Minimum execution time: 104_187_000 picoseconds.
        Weight::from_parts(105_875_000, 6196)
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `825`
        //  Estimated: `4290`
        // Minimum execution time: 58_005_000 picoseconds.
        Weight::from_parts(59_814_000, 4290)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1096`
        //  Estimated: `6196`
        // Minimum execution time: 120_469_000 picoseconds.
        Weight::from_parts(126_556_000, 6196)
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `661`
        //  Estimated: `4126`
        // Minimum execution time: 39_083_000 picoseconds.
        Weight::from_parts(40_503_000, 4126)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `906`
        //  Estimated: `4371`
        // Minimum execution time: 55_996_000 picoseconds.
        Weight::from_parts(57_366_000, 4371)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 6_440_000 picoseconds.
        Weight::from_parts(6_777_000, 3545)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1621`
        //  Estimated: `7561`
        // Minimum execution time: 158_607_000 picoseconds.
        Weight::from_parts(160_937_000, 7561)
            .saturating_add(T::DbWeight::get().reads(18_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1381`
        //  Estimated: `7321`
        // Minimum execution time: 139_327_000 picoseconds.
        Weight::from_parts(140_584_000, 7321)
            .saturating_add(T::DbWeight::get().reads(17_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_638_000 picoseconds.
        Weight::from_parts(87_698_814, 0)
            // Standard Error: 81_383
            .saturating_add(Weight::from_parts(14_760_924, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_464_000 picoseconds.
        Weight::from_parts(87_970_042, 0)
            // Standard Error: 84_207
            .saturating_add(Weight::from_parts(14_403_406, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_961_000 picoseconds.
        Weight::from_parts(87_629_768, 0)
            // Standard Error: 83_594
            .saturating_add(Weight::from_parts(13_245_088, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_418_000 picoseconds.
        Weight::from_parts(88_186_426, 0)
            // Standard Error: 79_425
            .saturating_add(Weight::from_parts(12_897_324, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_090_000 picoseconds.
        Weight::from_parts(92_626_578, 0)
            // Standard Error: 78_948
            .saturating_add(Weight::from_parts(11_077_460, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_748_000 picoseconds.
        Weight::from_parts(90_598_670, 0)
            // Standard Error: 81_358
            .saturating_add(Weight::from_parts(13_233_944, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_241_000 picoseconds.
        Weight::from_parts(88_945_066, 0)
            // Standard Error: 82_147
            .saturating_add(Weight::from_parts(9_593_070, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_355_000 picoseconds.
        Weight::from_parts(89_317_676, 0)
            // Standard Error: 82_851
            .saturating_add(Weight::from_parts(8_510_322, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_022_000 picoseconds.
        Weight::from_parts(84_783_048, 0)
            // Standard Error: 79_540
            .saturating_add(Weight::from_parts(20_969_518, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_037_000 picoseconds.
        Weight::from_parts(85_412_290, 0)
            // Standard Error: 80_224
            .saturating_add(Weight::from_parts(15_865_290, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_584_000 picoseconds.
        Weight::from_parts(85_460_050, 0)
            // Standard Error: 82_489
            .saturating_add(Weight::from_parts(14_931_310, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_049_000 picoseconds.
        Weight::from_parts(85_177_914, 0)
            // Standard Error: 81_098
            .saturating_add(Weight::from_parts(15_026_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_390_000 picoseconds.
        Weight::from_parts(84_760_726, 0)
            // Standard Error: 74_444
            .saturating_add(Weight::from_parts(15_584_970, 0).saturating_mul(r.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_376_000 picoseconds.
        Weight::from_parts(1_430_000, 0)
            // Standard Error: 548
            .saturating_add(Weight::from_parts(244_302, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3577 + c * (1024 ±0)`
        // Minimum execution time: 6_369_000 picoseconds.
        Weight::from_parts(836_623, 3577)
            // Standard Error: 3_395
            .saturating_add(Weight::from_parts(873_479, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_code_section_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 52_395_000 picoseconds.
        Weight::from_parts(56_611_000, 0)
            // Standard Error: 29_413
            .saturating_add(Weight::from_parts(2_865_471, 0).saturating_mul(c.into()))
    }
    /// The range of component `d` is `[0, 512]`.
    fn instantiate_module_data_section_per_kb(d: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 72_952_000 picoseconds.
        Weight::from_parts(108_636_151, 0)
            // Standard Error: 2_663
            .saturating_add(Weight::from_parts(677_133, 0).saturating_mul(d.into()))
    }
    /// The range of component `g` is `[0, 512]`.
    fn instantiate_module_global_section_per_kb(g: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_073_000 picoseconds.
        Weight::from_parts(53_381_000, 0)
            // Standard Error: 32_953
            .saturating_add(Weight::from_parts(3_016_261, 0).saturating_mul(g.into()))
    }
    /// The range of component `t` is `[0, 9765]`.
    fn instantiate_module_table_section_per_kb(t: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 53_918_000 picoseconds.
        Weight::from_parts(534_874_669, 0)
            // Standard Error: 26_786
            .saturating_add(Weight::from_parts(659_605, 0).saturating_mul(t.into()))
    }
    /// The range of component `e` is `[0, 512]`.
    fn instantiate_module_element_section_per_kb(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 299_959_000 picoseconds.
        Weight::from_parts(433_376_465, 0)
            // Standard Error: 25_294
            .saturating_add(Weight::from_parts(2_546_815, 0).saturating_mul(e.into()))
    }
    /// The range of component `t` is `[0, 20]`.
    fn instantiate_module_type_section_per_kb(t: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_150_000 picoseconds.
        Weight::from_parts(42_500_272, 0)
            // Standard Error: 175_184
            .saturating_add(Weight::from_parts(22_893_152, 0).saturating_mul(t.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1335`
        //  Estimated: `8799`
        // Minimum execution time: 182_585_000 picoseconds.
        Weight::from_parts(187_382_000, 8799)
            .saturating_add(RocksDbWeight::get().reads(18_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4`
        //  Estimated: `3469`
        // Minimum execution time: 93_970_000 picoseconds.
        Weight::from_parts(141_601_671, 3469)
            // Standard Error: 49_312
            .saturating_add(Weight::from_parts(88_834_733, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `669`
        //  Estimated: `6196`
        // Minimum execution time: 201_951_000 picoseconds.
        Weight::from_parts(299_426_143, 6196)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(2_077, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `461`
        //  Estimated: `6196`
        // Minimum execution time: 8_257_080_000 picoseconds.
        Weight::from_parts(8_266_593_000, 6196)
            // Standard Error: 393_001
            .saturating_add(Weight::from_parts(68_759_963, 0).saturating_mul(c.into()))
            // Standard Error: 23
            .saturating_add(Weight::from_parts(712, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(15_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `531`
        //  Estimated: `6196`
        // Minimum execution time: 126_226_000 picoseconds.
        Weight::from_parts(105_291_661, 6196)
            // Standard Error: 5
            .saturating_add(Weight::from_parts(1_238, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(12_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1334`
        //  Estimated: `8799`
        // Minimum execution time: 213_941_000 picoseconds.
        Weight::from_parts(206_322_064, 8799)
            // Standard Error: 5
            .saturating_add(Weight::from_parts(1_249, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(19_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `d` is `[1, 1024]`.
    fn claim_value_to_inheritor(d: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + d * (207 ±0)`
        //  Estimated: `3593 + d * (2683 ±0)`
        // Minimum execution time: 68_782_000 picoseconds.
        Weight::from_parts(69_437_000, 3593)
            // Standard Error: 36_215
            .saturating_add(Weight::from_parts(53_874_207, 0).saturating_mul(d.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(d.into())))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(d.into())))
            .saturating_add(Weight::from_parts(0, 2683).saturating_mul(d.into()))
    }
    /// The range of component `e` is `[0, 512]`.
    fn reinstrument_per_kb(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `296 + e * (1024 ±0)`
        //  Estimated: `3760 + e * (1024 ±0)`
        // Minimum execution time: 84_055_000 picoseconds.
        Weight::from_parts(187_026_293, 3760)
            // Standard Error: 475_717
            .saturating_add(Weight::from_parts(753_801_065, 0).saturating_mul(e.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(e.into()))
    }
    /// The range of component `a` is `[0, 32767]`.
    fn load_allocations_per_interval(a: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101 + a * (8 ±0)`
        //  Estimated: `3566 + a * (8 ±0)`
        // Minimum execution time: 6_952_000 picoseconds.
        Weight::from_parts(10_328_075, 3566)
            // Standard Error: 30
            .saturating_add(Weight::from_parts(23_938, 0).saturating_mul(a.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 8).saturating_mul(a.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 241_096_000 picoseconds.
        Weight::from_parts(165_695_918, 0)
            // Standard Error: 323_636
            .saturating_add(Weight::from_parts(145_032_627, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 188_000 picoseconds.
        Weight::from_parts(707_132, 0)
            // Standard Error: 35_459
            .saturating_add(Weight::from_parts(59_008_025, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 819]`.
    fn mem_grow_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 59_391_000 picoseconds.
        Weight::from_parts(61_143_899, 0)
            // Standard Error: 103
            .saturating_add(Weight::from_parts(313, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 183_614_000 picoseconds.
        Weight::from_parts(148_096_618, 0)
            // Standard Error: 457_192
            .saturating_add(Weight::from_parts(79_118_397, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 188_386_000 picoseconds.
        Weight::from_parts(144_413_884, 0)
            // Standard Error: 445_383
            .saturating_add(Weight::from_parts(83_190_740, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 700]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 187_837_000 picoseconds.
        Weight::from_parts(317_199_602, 0)
            // Standard Error: 8_450
            .saturating_add(Weight::from_parts(4_324_506, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_280_000 picoseconds.
        Weight::from_parts(81_427_826, 0)
            // Standard Error: 4_521
            .saturating_add(Weight::from_parts(2_525_760, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 152_543_000 picoseconds.
        Weight::from_parts(172_546_593, 0)
            // Standard Error: 6_352
            .saturating_add(Weight::from_parts(2_532_797, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_778_000 picoseconds.
        Weight::from_parts(91_015_108, 0)
            // Standard Error: 299_393
            .saturating_add(Weight::from_parts(94_842_820, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_821_000 picoseconds.
        Weight::from_parts(88_683_976, 0)
            // Standard Error: 270_532
            .saturating_add(Weight::from_parts(92_156_586, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_080_000 picoseconds.
        Weight::from_parts(99_655_018, 0)
            // Standard Error: 268_557
            .saturating_add(Weight::from_parts(89_605_619, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_349_000 picoseconds.
        Weight::from_parts(81_114_956, 0)
            // Standard Error: 287_304
            .saturating_add(Weight::from_parts(91_170_430, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_993_000 picoseconds.
        Weight::from_parts(86_349_176, 0)
            // Standard Error: 259_423
            .saturating_add(Weight::from_parts(90_135_604, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_414_000 picoseconds.
        Weight::from_parts(88_688_115, 0)
            // Standard Error: 265_181
            .saturating_add(Weight::from_parts(91_645_825, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_772_000 picoseconds.
        Weight::from_parts(90_955_250, 0)
            // Standard Error: 248_397
            .saturating_add(Weight::from_parts(91_741_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_771_000 picoseconds.
        Weight::from_parts(81_534_828, 0)
            // Standard Error: 257_862
            .saturating_add(Weight::from_parts(92_035_387, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_914_000 picoseconds.
        Weight::from_parts(115_392_314, 0)
            // Standard Error: 394_133
            .saturating_add(Weight::from_parts(138_505_525, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 204_002_000 picoseconds.
        Weight::from_parts(204_943_000, 0)
            // Standard Error: 121_704
            .saturating_add(Weight::from_parts(17_164_182, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_867_000 picoseconds.
        Weight::from_parts(87_932_805, 0)
            // Standard Error: 357_927
            .saturating_add(Weight::from_parts(94_605_306, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_116_000 picoseconds.
        Weight::from_parts(109_127_153, 0)
            // Standard Error: 331_070
            .saturating_add(Weight::from_parts(91_066_520, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_552_000 picoseconds.
        Weight::from_parts(90_890_169, 0)
            // Standard Error: 275_600
            .saturating_add(Weight::from_parts(89_568_386, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_845_000 picoseconds.
        Weight::from_parts(96_148_475, 0)
            // Standard Error: 305_215
            .saturating_add(Weight::from_parts(176_245_357, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_588_000 picoseconds.
        Weight::from_parts(88_326_000, 0)
            // Standard Error: 3_164_088
            .saturating_add(Weight::from_parts(709_013_789, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_243_000 picoseconds.
        Weight::from_parts(131_282_160, 0)
            // Standard Error: 335_558
            .saturating_add(Weight::from_parts(250_152_617, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 319_905_000 picoseconds.
        Weight::from_parts(324_723_000, 0)
            // Standard Error: 263_838
            .saturating_add(Weight::from_parts(41_977_002, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_588_000 picoseconds.
        Weight::from_parts(152_273_758, 0)
            // Standard Error: 328_432
            .saturating_add(Weight::from_parts(250_619_858, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 322_231_000 picoseconds.
        Weight::from_parts(327_207_000, 0)
            // Standard Error: 265_588
            .saturating_add(Weight::from_parts(42_088_275, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_546_000 picoseconds.
        Weight::from_parts(120_888_846, 0)
            // Standard Error: 279_924
            .saturating_add(Weight::from_parts(253_832_475, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_526_000 picoseconds.
        Weight::from_parts(127_681_539, 0)
            // Standard Error: 279_881
            .saturating_add(Weight::from_parts(249_038_114, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_271_000 picoseconds.
        Weight::from_parts(83_163_924, 0)
            // Standard Error: 295_911
            .saturating_add(Weight::from_parts(102_832_505, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_038_401_000 picoseconds.
        Weight::from_parts(2_173_192_003, 0)
            // Standard Error: 776_358
            .saturating_add(Weight::from_parts(163_388_582, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 302_524_000 picoseconds.
        Weight::from_parts(310_643_000, 0)
            // Standard Error: 265_158
            .saturating_add(Weight::from_parts(41_910_958, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_033_773_000 picoseconds.
        Weight::from_parts(2_140_320_983, 0)
            // Standard Error: 507_206
            .saturating_add(Weight::from_parts(208_490_315, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_039_662_000 picoseconds.
        Weight::from_parts(2_137_623_740, 0)
            // Standard Error: 630_747
            .saturating_add(Weight::from_parts(213_378_845, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 202_728_000 picoseconds.
        Weight::from_parts(231_899_334, 0)
            // Standard Error: 270_610
            .saturating_add(Weight::from_parts(303_459_719, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 479_308_000 picoseconds.
        Weight::from_parts(485_802_000, 0)
            // Standard Error: 254_576
            .saturating_add(Weight::from_parts(42_116_270, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_144_866_000 picoseconds.
        Weight::from_parts(2_194_910_061, 0)
            // Standard Error: 461_163
            .saturating_add(Weight::from_parts(263_162_149, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_691_000 picoseconds.
        Weight::from_parts(20_147_485, 0)
            // Standard Error: 3_811
            .saturating_add(Weight::from_parts(772_277, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_373_000 picoseconds.
        Weight::from_parts(20_365_478, 0)
            // Standard Error: 3_809
            .saturating_add(Weight::from_parts(770_842, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_397_000 picoseconds.
        Weight::from_parts(133_338_372, 0)
            // Standard Error: 295_247
            .saturating_add(Weight::from_parts(150_253_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_095_000 picoseconds.
        Weight::from_parts(101_167_789, 0)
            // Standard Error: 698
            .saturating_add(Weight::from_parts(708_223, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_342_000 picoseconds.
        Weight::from_parts(18_990_604, 0)
            // Standard Error: 3_876
            .saturating_add(Weight::from_parts(759_878, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_034_000 picoseconds.
        Weight::from_parts(19_565_199, 0)
            // Standard Error: 3_843
            .saturating_add(Weight::from_parts(770_578, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_242_000 picoseconds.
        Weight::from_parts(80_061_244, 0)
            // Standard Error: 272_456
            .saturating_add(Weight::from_parts(91_580_116, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_784_000 picoseconds.
        Weight::from_parts(82_124_586, 0)
            // Standard Error: 292_406
            .saturating_add(Weight::from_parts(90_316_249, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_941_000 picoseconds.
        Weight::from_parts(82_127_353, 0)
            // Standard Error: 251_102
            .saturating_add(Weight::from_parts(90_442_360, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_254_000 picoseconds.
        Weight::from_parts(107_600_579, 0)
            // Standard Error: 343_109
            .saturating_add(Weight::from_parts(102_087_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_151_000 picoseconds.
        Weight::from_parts(103_233_197, 0)
            // Standard Error: 158
            .saturating_add(Weight::from_parts(132_008, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_046_482_000 picoseconds.
        Weight::from_parts(2_153_701_768, 0)
            // Standard Error: 500_783
            .saturating_add(Weight::from_parts(118_962_918, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_294_808_000 picoseconds.
        Weight::from_parts(1_879_896_333, 0)
            // Standard Error: 10_458
            .saturating_add(Weight::from_parts(12_529_044, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_410_000 picoseconds.
        Weight::from_parts(97_932_827, 0)
            // Standard Error: 332_755
            .saturating_add(Weight::from_parts(107_072_254, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 148_201_000 picoseconds.
        Weight::from_parts(151_043_000, 0)
            // Standard Error: 262_608
            .saturating_add(Weight::from_parts(39_038_912, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_260_000 picoseconds.
        Weight::from_parts(92_012_597, 0)
            // Standard Error: 264_037
            .saturating_add(Weight::from_parts(90_985_399, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 148_266_000 picoseconds.
        Weight::from_parts(171_635_000, 0)
            // Standard Error: 1_207_735
            .saturating_add(Weight::from_parts(258_703_327, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_832_000 picoseconds.
        Weight::from_parts(125_007_816, 0)
            // Standard Error: 258_543
            .saturating_add(Weight::from_parts(319_551_330, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_091_421_000 picoseconds.
        Weight::from_parts(64_126_155_000, 0)
            // Standard Error: 448_008
            .saturating_add(Weight::from_parts(10_058_434, 0).saturating_mul(p.into()))
            // Standard Error: 447_986
            .saturating_add(Weight::from_parts(133_592_054, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_637_000 picoseconds.
        Weight::from_parts(124_599_113, 0)
            // Standard Error: 267_959
            .saturating_add(Weight::from_parts(322_883_759, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_054_038_000 picoseconds.
        Weight::from_parts(64_128_795_000, 0)
            // Standard Error: 445_611
            .saturating_add(Weight::from_parts(9_997_787, 0).saturating_mul(p.into()))
            // Standard Error: 445_589
            .saturating_add(Weight::from_parts(133_584_759, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `1098 + p * (9900 ±0)`
        // Minimum execution time: 82_552_000 picoseconds.
        Weight::from_parts(103_400_516, 1098)
            // Standard Error: 9_266
            .saturating_add(Weight::from_parts(16_776_145, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `1098 + p * (9900 ±0)`
        // Minimum execution time: 81_679_000 picoseconds.
        Weight::from_parts(86_521_000, 1098)
            // Standard Error: 29_105
            .saturating_add(Weight::from_parts(43_796_361, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `5069898`
        // Minimum execution time: 8_632_356_000 picoseconds.
        Weight::from_parts(8_578_238_835, 5069898)
            // Standard Error: 25_380
            .saturating_add(Weight::from_parts(42_694_917, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1787 + p * (65580 ±0)`
        //  Estimated: `1913 + p * (75482 ±0)`
        // Minimum execution time: 83_196_000 picoseconds.
        Weight::from_parts(85_453_000, 1913)
            // Standard Error: 42_540
            .saturating_add(Weight::from_parts(59_131_206, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `1098 + p * (9900 ±0)`
        // Minimum execution time: 89_814_000 picoseconds.
        Weight::from_parts(24_397_595, 1098)
            // Standard Error: 253_978
            .saturating_add(Weight::from_parts(54_414_944, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `1463 + p * (9883 ±2)`
        // Minimum execution time: 117_657_000 picoseconds.
        Weight::from_parts(120_686_000, 1463)
            // Standard Error: 257_835
            .saturating_add(Weight::from_parts(60_089_209, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `317898`
        // Minimum execution time: 655_273_000 picoseconds.
        Weight::from_parts(543_629_587, 317898)
            // Standard Error: 378_355
            .saturating_add(Weight::from_parts(64_704_940, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_365_156_000 picoseconds.
        Weight::from_parts(5_421_553_096, 0)
            // Standard Error: 34_431
            .saturating_add(Weight::from_parts(2_498_791 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_326_209_000 picoseconds.
        Weight::from_parts(5_425_169_577, 0)
            // Standard Error: 34_417
            .saturating_add(Weight::from_parts(2_417_941 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_703_833_000 picoseconds.
        Weight::from_parts(11_269_918_717, 0)
            // Standard Error: 51_866
            .saturating_add(Weight::from_parts(4_750_092 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_568_370_000 picoseconds.
        Weight::from_parts(11_234_712_546, 0)
            // Standard Error: 57_509
            .saturating_add(Weight::from_parts(4_745_041 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_488_000 picoseconds.
        Weight::from_parts(1_540_000, 0)
            // Standard Error: 10_157
            .saturating_add(Weight::from_parts(3_396_426 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_468_000 picoseconds.
        Weight::from_parts(1_512_000, 0)
            // Standard Error: 5_347
            .saturating_add(Weight::from_parts(2_460_431 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_440_000 picoseconds.
        Weight::from_parts(2_125_238, 0)
            // Standard Error: 582
            .saturating_add(Weight::from_parts(1_751_129 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_512_000 picoseconds.
        Weight::from_parts(1_559_000, 0)
            // Standard Error: 8_727
            .saturating_add(Weight::from_parts(2_978_766 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_469_000 picoseconds.
        Weight::from_parts(1_518_000, 0)
            // Standard Error: 30_680
            .saturating_add(Weight::from_parts(5_226_956 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_938_000 picoseconds.
        Weight::from_parts(6_489_457, 0)
            // Standard Error: 1_374
            .saturating_add(Weight::from_parts(78_849 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_490_000 picoseconds.
        Weight::from_parts(1_954_791, 0)
            // Standard Error: 6_197
            .saturating_add(Weight::from_parts(2_826_066 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts((2_826_066 -
            2_651_870) * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_529_000 picoseconds.
        Weight::from_parts(2_100_483, 0)
            // Standard Error: 14_142
            .saturating_add(Weight::from_parts(2_651_870 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_610_000 picoseconds.
        Weight::from_parts(1_685_000, 0)
            // Standard Error: 20_592
            .saturating_add(Weight::from_parts(11_542_905 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_623_000 picoseconds.
        Weight::from_parts(11_933_000, 0)
            // Standard Error: 10_927
            .saturating_add(Weight::from_parts(696_011 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_341_000 picoseconds.
        Weight::from_parts(4_564_309, 0)
            // Standard Error: 8
            .saturating_add(Weight::from_parts(21 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_491_000 picoseconds.
        Weight::from_parts(10_815_117, 0)
            // Standard Error: 2_990
            .saturating_add(Weight::from_parts(309_062 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_686_000 picoseconds.
        Weight::from_parts(11_105_262, 0)
            // Standard Error: 2_709
            .saturating_add(Weight::from_parts(744_921 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_718_000 picoseconds.
        Weight::from_parts(10_718_173, 0)
            // Standard Error: 5_858
            .saturating_add(Weight::from_parts(776_079 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_620_000 picoseconds.
        Weight::from_parts(1_320_212, 0)
            // Standard Error: 3_684
            .saturating_add(Weight::from_parts(342_526 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_645_000 picoseconds.
        Weight::from_parts(1_699_000, 0)
            // Standard Error: 5_764
            .saturating_add(Weight::from_parts(626_786 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_536_000 picoseconds.
        Weight::from_parts(420_239, 0)
            // Standard Error: 6_966
            .saturating_add(Weight::from_parts(6_557_730 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_446_000 picoseconds.
        Weight::from_parts(604_881, 0)
            // Standard Error: 7_594
            .saturating_add(Weight::from_parts(360_970 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_427_000 picoseconds.
        Weight::from_parts(1_770_900, 0)
            // Standard Error: 3_552
            .saturating_add(Weight::from_parts(219_486 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_436_000 picoseconds.
        Weight::from_parts(436_195, 0)
            // Standard Error: 6_583
            .saturating_add(Weight::from_parts(365_422 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_483_000 picoseconds.
        Weight::from_parts(1_825_830, 0)
            // Standard Error: 2_577
            .saturating_add(Weight::from_parts(209_982 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_465_000 picoseconds.
        Weight::from_parts(499_949, 0)
            // Standard Error: 9_085
            .saturating_add(Weight::from_parts(358_929 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_453_000 picoseconds.
        Weight::from_parts(1_878_001, 0)
            // Standard Error: 867
            .saturating_add(Weight::from_parts(217_828 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_422_000 picoseconds.
        Weight::from_parts(1_496_000, 0)
            // Standard Error: 15_254
            .saturating_add(Weight::from_parts(1_027_688 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_421_000 picoseconds.
        Weight::from_parts(1_514_000, 0)
            // Standard Error: 7_533
            .saturating_add(Weight::from_parts(572_714 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_452_000 picoseconds.
        Weight::from_parts(1_559_426, 0)
            // Standard Error: 2_044
            .saturating_add(Weight::from_parts(210_333 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_405_000 picoseconds.
        Weight::from_parts(1_452_217, 0)
            // Standard Error: 2_314
            .saturating_add(Weight::from_parts(217_031 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_486_000 picoseconds.
        Weight::from_parts(1_409_753, 0)
            // Standard Error: 2_722
            .saturating_add(Weight::from_parts(275_619 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_422_000 picoseconds.
        Weight::from_parts(1_531_496, 0)
            // Standard Error: 4_069
            .saturating_add(Weight::from_parts(278_050 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_456_000 picoseconds.
        Weight::from_parts(1_229_979, 0)
            // Standard Error: 6_232
            .saturating_add(Weight::from_parts(276_862 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_441_000 picoseconds.
        Weight::from_parts(1_669_151, 0)
            // Standard Error: 854
            .saturating_add(Weight::from_parts(185_751 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_448_000 picoseconds.
        Weight::from_parts(1_838_564, 0)
            // Standard Error: 827
            .saturating_add(Weight::from_parts(109_516 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_442_000 picoseconds.
        Weight::from_parts(1_912_401, 0)
            // Standard Error: 494
            .saturating_add(Weight::from_parts(108_984 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_448_000 picoseconds.
        Weight::from_parts(1_532_000, 0)
            // Standard Error: 9_796
            .saturating_add(Weight::from_parts(970_993 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_424_000 picoseconds.
        Weight::from_parts(1_518_000, 0)
            // Standard Error: 7_329
            .saturating_add(Weight::from_parts(584_961 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_402_000 picoseconds.
        Weight::from_parts(1_510_000, 0)
            // Standard Error: 9_357
            .saturating_add(Weight::from_parts(1_002_170 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_429_000 picoseconds.
        Weight::from_parts(1_540_000, 0)
            // Standard Error: 7_414
            .saturating_add(Weight::from_parts(584_935 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_410_000 picoseconds.
        Weight::from_parts(1_465_000, 0)
            // Standard Error: 8_454
            .saturating_add(Weight::from_parts(962_862 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_412_000 picoseconds.
        Weight::from_parts(29_233, 0)
            // Standard Error: 11_359
            .saturating_add(Weight::from_parts(610_276 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_456_000 picoseconds.
        Weight::from_parts(1_498_000, 0)
            // Standard Error: 13_417
            .saturating_add(Weight::from_parts(1_021_525 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_448_000 picoseconds.
        Weight::from_parts(1_525_000, 0)
            // Standard Error: 8_303
            .saturating_add(Weight::from_parts(591_034 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_471_000 picoseconds.
        Weight::from_parts(1_540_000, 0)
            // Standard Error: 13_089
            .saturating_add(Weight::from_parts(1_022_497 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_449_000 picoseconds.
        Weight::from_parts(1_517_000, 0)
            // Standard Error: 8_698
            .saturating_add(Weight::from_parts(594_879 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_462_000 picoseconds.
        Weight::from_parts(1_524_000, 0)
            // Standard Error: 8_756
            .saturating_add(Weight::from_parts(963_318 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_515_000 picoseconds.
        Weight::from_parts(1_562_000, 0)
            // Standard Error: 6_417
            .saturating_add(Weight::from_parts(580_334 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_492_000 picoseconds.
        Weight::from_parts(1_540_000, 0)
            // Standard Error: 10_610
            .saturating_add(Weight::from_parts(993_973 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_417_000 picoseconds.
        Weight::from_parts(1_512_000, 0)
            // Standard Error: 6_892
            .saturating_add(Weight::from_parts(585_613 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_419_000 picoseconds.
        Weight::from_parts(1_508_000, 0)
            // Standard Error: 10_576
            .saturating_add(Weight::from_parts(973_945 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_396_000 picoseconds.
        Weight::from_parts(1_506_000, 0)
            // Standard Error: 3_225
            .saturating_add(Weight::from_parts(548_021 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_446_000 picoseconds.
        Weight::from_parts(1_516_000, 0)
            // Standard Error: 13_055
            .saturating_add(Weight::from_parts(1_032_411 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_471_000 picoseconds.
        Weight::from_parts(1_513_000, 0)
            // Standard Error: 2_777
            .saturating_add(Weight::from_parts(539_489 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_463_000 picoseconds.
        Weight::from_parts(1_518_000, 0)
            // Standard Error: 12_479
            .saturating_add(Weight::from_parts(1_035_516 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_418_000 picoseconds.
        Weight::from_parts(1_554_000, 0)
            // Standard Error: 7_777
            .saturating_add(Weight::from_parts(584_889 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_504_000 picoseconds.
        Weight::from_parts(1_533_000, 0)
            // Standard Error: 5_641
            .saturating_add(Weight::from_parts(617_995 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_446_000 picoseconds.
        Weight::from_parts(1_110_425, 0)
            // Standard Error: 6_956
            .saturating_add(Weight::from_parts(348_188 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_461_000 picoseconds.
        Weight::from_parts(1_522_000, 0)
            // Standard Error: 10_294
            .saturating_add(Weight::from_parts(673_245 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_470_000 picoseconds.
        Weight::from_parts(1_347_726, 0)
            // Standard Error: 4_264
            .saturating_add(Weight::from_parts(331_454 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_504_000 picoseconds.
        Weight::from_parts(1_550_000, 0)
            // Standard Error: 11_669
            .saturating_add(Weight::from_parts(962_200 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_475_000 picoseconds.
        Weight::from_parts(1_497_000, 0)
            // Standard Error: 2_879
            .saturating_add(Weight::from_parts(574_079 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_480_000 picoseconds.
        Weight::from_parts(142_478, 0)
            // Standard Error: 13_071
            .saturating_add(Weight::from_parts(1_908_564 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_489_000 picoseconds.
        Weight::from_parts(1_528_000, 0)
            // Standard Error: 11_306
            .saturating_add(Weight::from_parts(1_360_255 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_450_000 picoseconds.
        Weight::from_parts(1_513_000, 0)
            // Standard Error: 7_987
            .saturating_add(Weight::from_parts(1_919_884 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_463_000 picoseconds.
        Weight::from_parts(1_506_000, 0)
            // Standard Error: 10_766
            .saturating_add(Weight::from_parts(1_324_346 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_396_000 picoseconds.
        Weight::from_parts(1_518_000, 0)
            // Standard Error: 36_922
            .saturating_add(Weight::from_parts(9_859_819 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_440_000 picoseconds.
        Weight::from_parts(1_482_000, 0)
            // Standard Error: 47_816
            .saturating_add(Weight::from_parts(8_166_575 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_480_000 picoseconds.
        Weight::from_parts(321_354, 0)
            // Standard Error: 16_552
            .saturating_add(Weight::from_parts(1_961_929 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_439_000 picoseconds.
        Weight::from_parts(1_506_000, 0)
            // Standard Error: 9_991
            .saturating_add(Weight::from_parts(1_343_263 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_459_000 picoseconds.
        Weight::from_parts(1_494_000, 0)
            // Standard Error: 8_577
            .saturating_add(Weight::from_parts(669_117 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_445_000 picoseconds.
        Weight::from_parts(998_293, 0)
            // Standard Error: 8_098
            .saturating_add(Weight::from_parts(359_466 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_492_000 picoseconds.
        Weight::from_parts(1_530_000, 0)
            // Standard Error: 3_963
            .saturating_add(Weight::from_parts(616_432 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_418_000 picoseconds.
        Weight::from_parts(699_536, 0)
            // Standard Error: 9_057
            .saturating_add(Weight::from_parts(376_105 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_420_000 picoseconds.
        Weight::from_parts(1_465_000, 0)
            // Standard Error: 6_079
            .saturating_add(Weight::from_parts(638_681 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_379_000 picoseconds.
        Weight::from_parts(141_407, 0)
            // Standard Error: 11_857
            .saturating_add(Weight::from_parts(413_984 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_482_000 picoseconds.
        Weight::from_parts(1_544_000, 0)
            // Standard Error: 6_715
            .saturating_add(Weight::from_parts(548_894 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_488_000 picoseconds.
        Weight::from_parts(1_517_160, 0)
            // Standard Error: 4_820
            .saturating_add(Weight::from_parts(304_341 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_434_000 picoseconds.
        Weight::from_parts(1_510_000, 0)
            // Standard Error: 6_855
            .saturating_add(Weight::from_parts(570_233 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_434_000 picoseconds.
        Weight::from_parts(1_523_237, 0)
            // Standard Error: 2_690
            .saturating_add(Weight::from_parts(301_214 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_443_000 picoseconds.
        Weight::from_parts(1_512_000, 0)
            // Standard Error: 5_844
            .saturating_add(Weight::from_parts(542_317 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_427_000 picoseconds.
        Weight::from_parts(662_890, 0)
            // Standard Error: 8_258
            .saturating_add(Weight::from_parts(345_137 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_460_000 picoseconds.
        Weight::from_parts(1_533_000, 0)
            // Standard Error: 5_568
            .saturating_add(Weight::from_parts(539_050 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_442_000 picoseconds.
        Weight::from_parts(1_114_134, 0)
            // Standard Error: 6_367
            .saturating_add(Weight::from_parts(324_106 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_470_000 picoseconds.
        Weight::from_parts(1_517_000, 0)
            // Standard Error: 3_614
            .saturating_add(Weight::from_parts(532_028 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_449_000 picoseconds.
        Weight::from_parts(978_738, 0)
            // Standard Error: 6_752
            .saturating_add(Weight::from_parts(334_980 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1134`
        //  Estimated: `6196`
        // Minimum execution time: 104_187_000 picoseconds.
        Weight::from_parts(105_875_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `825`
        //  Estimated: `4290`
        // Minimum execution time: 58_005_000 picoseconds.
        Weight::from_parts(59_814_000, 4290)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1096`
        //  Estimated: `6196`
        // Minimum execution time: 120_469_000 picoseconds.
        Weight::from_parts(126_556_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `661`
        //  Estimated: `4126`
        // Minimum execution time: 39_083_000 picoseconds.
        Weight::from_parts(40_503_000, 4126)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `906`
        //  Estimated: `4371`
        // Minimum execution time: 55_996_000 picoseconds.
        Weight::from_parts(57_366_000, 4371)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 6_440_000 picoseconds.
        Weight::from_parts(6_777_000, 3545)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1621`
        //  Estimated: `7561`
        // Minimum execution time: 158_607_000 picoseconds.
        Weight::from_parts(160_937_000, 7561)
            .saturating_add(RocksDbWeight::get().reads(18_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1381`
        //  Estimated: `7321`
        // Minimum execution time: 139_327_000 picoseconds.
        Weight::from_parts(140_584_000, 7321)
            .saturating_add(RocksDbWeight::get().reads(17_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
}
