// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-01, STEPS: `25`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Vadims-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/gear benchmark pallet --chain=dev --steps=25 --repeat=10 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./weights_new.rs --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_error(r: u32, ) -> Weight;
    fn gr_status_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_read_access(p: u32, ) -> Weight;
    fn lazy_pages_write_access(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_000 nanoseconds.
		Weight::from_ref_time(1_000_000)
			// Standard Error: 1_584
			.saturating_add(Weight::from_ref_time(140_037).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `74 + c * (1024 ±0)`
		//  Estimated: `2543 + c * (1024 ±0)`
		// Minimum execution time: 2_000 nanoseconds.
		Weight::from_parts(4_828_923, 2543)
			// Standard Error: 9_071
			.saturating_add(Weight::from_ref_time(406_749).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_proof_size(1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 64_000 nanoseconds.
		Weight::from_ref_time(53_829_011)
			// Standard Error: 11_615
			.saturating_add(Weight::from_ref_time(1_307_562).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `847`
		//  Estimated: `17017`
		// Minimum execution time: 46_000 nanoseconds.
		Weight::from_parts(47_000_000, 17017)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10`
		//  Estimated: `3010`
		// Minimum execution time: 48_000 nanoseconds.
		Weight::from_parts(48_000_000, 3010)
			// Standard Error: 76_510
			.saturating_add(Weight::from_ref_time(82_292_651).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `577`
		//  Estimated: `17498`
		// Minimum execution time: 41_000 nanoseconds.
		Weight::from_parts(57_119_435, 17498)
			// Standard Error: 1
			.saturating_add(Weight::from_ref_time(1_389).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `55`
		//  Estimated: `13432`
		// Minimum execution time: 5_909_000 nanoseconds.
		Weight::from_parts(108_831_542, 13432)
			// Standard Error: 221_904
			.saturating_add(Weight::from_ref_time(81_560_321).saturating_mul(c.into()))
			// Standard Error: 13
			.saturating_add(Weight::from_ref_time(1_386).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_message(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `422`
		//  Estimated: `15047`
		// Minimum execution time: 45_000 nanoseconds.
		Weight::from_parts(27_534_532, 15047)
			// Standard Error: 5
			.saturating_add(Weight::from_ref_time(548).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_reply(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1090`
		//  Estimated: `31263`
		// Minimum execution time: 63_000 nanoseconds.
		Weight::from_parts(57_204_792, 31263)
			// Standard Error: 5
			.saturating_add(Weight::from_ref_time(528).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `545`
		//  Estimated: `37691`
		// Minimum execution time: 157_000 nanoseconds.
		Weight::from_parts(162_040_810, 37691)
			.saturating_add(T::DbWeight::get().reads(22_u64))
			.saturating_add(T::DbWeight::get().writes(21_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `545`
		//  Estimated: `37466`
		// Minimum execution time: 163_000 nanoseconds.
		Weight::from_parts(165_155_034, 37466)
			// Standard Error: 3_020
			.saturating_add(Weight::from_ref_time(12_039).saturating_mul(q.into()))
			.saturating_add(T::DbWeight::get().reads(22_u64))
			.saturating_add(T::DbWeight::get().writes(21_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `215 + c * (1075 ±0)`
		//  Estimated: `2931 + c * (2150 ±0)`
		// Minimum execution time: 39_000 nanoseconds.
		Weight::from_parts(39_000_000, 2931)
			// Standard Error: 68_956
			.saturating_add(Weight::from_ref_time(81_201_258).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_proof_size(2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 75_000 nanoseconds.
		Weight::from_ref_time(80_042_263)
			// Standard Error: 178_484
			.saturating_add(Weight::from_ref_time(158_780_433).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 235_000 nanoseconds.
		Weight::from_ref_time(229_684_089)
			// Standard Error: 284_260
			.saturating_add(Weight::from_ref_time(160_614_390).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_parts(81_000_000, 10041)
			// Standard Error: 1_562_405
			.saturating_add(Weight::from_ref_time(366_274_919).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5394 + r * (1693 ±42)`
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_parts(87_981_639, 5394)
			// Standard Error: 685_060
			.saturating_add(Weight::from_ref_time(374_835_947).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(1693).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_parts(97_204_342, 10041)
			// Standard Error: 361_365
			.saturating_add(Weight::from_ref_time(241_526_799).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_parts(103_377_670, 10041)
			// Standard Error: 841_689
			.saturating_add(Weight::from_ref_time(245_119_109).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 81_000 nanoseconds.
		Weight::from_parts(93_726_272, 10041)
			// Standard Error: 161_447
			.saturating_add(Weight::from_ref_time(243_749_180).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 78_000 nanoseconds.
		Weight::from_parts(90_653_290, 10041)
			// Standard Error: 127_627
			.saturating_add(Weight::from_ref_time(244_018_284).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_parts(94_221_161, 10041)
			// Standard Error: 131_309
			.saturating_add(Weight::from_ref_time(243_323_619).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_parts(98_955_870, 10041)
			// Standard Error: 317_122
			.saturating_add(Weight::from_ref_time(247_269_758).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 78_000 nanoseconds.
		Weight::from_parts(97_240_468, 10041)
			// Standard Error: 122_495
			.saturating_add(Weight::from_ref_time(246_736_850).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_parts(91_853_523, 10041)
			// Standard Error: 119_627
			.saturating_add(Weight::from_ref_time(237_015_796).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 78_000 nanoseconds.
		Weight::from_parts(98_343_897, 10041)
			// Standard Error: 105_433
			.saturating_add(Weight::from_ref_time(237_082_729).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_parts(116_465_821, 10041)
			// Standard Error: 728_678
			.saturating_add(Weight::from_ref_time(345_435_401).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `6953 + n * (619 ±0)`
		// Minimum execution time: 433_000 nanoseconds.
		Weight::from_parts(718_845_078, 6953)
			// Standard Error: 116_806
			.saturating_add(Weight::from_ref_time(6_048_236).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_parts(66_619_896, 10041)
			// Standard Error: 631_168
			.saturating_add(Weight::from_ref_time(243_561_575).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 82_000 nanoseconds.
		Weight::from_parts(105_586_907, 10041)
			// Standard Error: 649_367
			.saturating_add(Weight::from_ref_time(239_483_086).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 81_000 nanoseconds.
		Weight::from_parts(72_138_094, 10041)
			// Standard Error: 840_144
			.saturating_add(Weight::from_ref_time(303_884_341).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 83_000 nanoseconds.
		Weight::from_parts(69_700_881, 10041)
			// Standard Error: 793_412
			.saturating_add(Weight::from_ref_time(256_462_662).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_parts(113_508_003, 10041)
			// Standard Error: 473_222
			.saturating_add(Weight::from_ref_time(631_020_190).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `6953 + n * (619 ±0)`
		// Minimum execution time: 700_000 nanoseconds.
		Weight::from_parts(755_288_522, 6953)
			// Standard Error: 32_244
			.saturating_add(Weight::from_ref_time(17_527_578).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 87_000 nanoseconds.
		Weight::from_parts(99_842_734, 10041)
			// Standard Error: 512_794
			.saturating_add(Weight::from_ref_time(436_845_167).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `6953 + n * (619 ±0)`
		// Minimum execution time: 543_000 nanoseconds.
		Weight::from_parts(804_979_308, 6953)
			// Standard Error: 66_454
			.saturating_add(Weight::from_ref_time(11_584_872).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5902 + r * (4012 ±44)`
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_parts(64_143_745, 5902)
			// Standard Error: 939_384
			.saturating_add(Weight::from_ref_time(462_280_860).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(4012).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10492 + n * (618 ±0)`
		// Minimum execution time: 556_000 nanoseconds.
		Weight::from_parts(711_481_866, 10492)
			// Standard Error: 49_731
			.saturating_add(Weight::from_ref_time(11_606_508).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(Weight::from_proof_size(618).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + r * (141 ±0)`
		//  Estimated: `5021 + r * (5021 ±0)`
		// Minimum execution time: 76_000 nanoseconds.
		Weight::from_parts(81_733_333, 5021)
			// Standard Error: 551_439
			.saturating_add(Weight::from_ref_time(22_266_666).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(5021).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 78_000 nanoseconds.
		Weight::from_parts(89_455_140, 10041)
			// Standard Error: 410_772
			.saturating_add(Weight::from_ref_time(355_508_963).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `7185 + n * (619 ±0)`
		// Minimum execution time: 102_000 nanoseconds.
		Weight::from_parts(79_438_945, 7185)
			// Standard Error: 3_391
			.saturating_add(Weight::from_ref_time(473_862).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + r * (141 ±0)`
		//  Estimated: `5021 + r * (5021 ±0)`
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_parts(83_841_666, 5021)
			// Standard Error: 812_260
			.saturating_add(Weight::from_ref_time(41_658_333).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(5021).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 78_000 nanoseconds.
		Weight::from_parts(90_296_198, 10041)
			// Standard Error: 189_760
			.saturating_add(Weight::from_ref_time(242_494_159).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `19941`
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_parts(102_181_953, 19941)
			// Standard Error: 120_423
			.saturating_add(Weight::from_ref_time(245_579_103).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_parts(82_667_865, 10041)
			// Standard Error: 630_133
			.saturating_add(Weight::from_ref_time(261_885_625).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 96_000 nanoseconds.
		Weight::from_parts(95_718_538, 10041)
			// Standard Error: 978
			.saturating_add(Weight::from_ref_time(317_785).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_parts(100_400_708, 10041)
			// Standard Error: 335_597
			.saturating_add(Weight::from_ref_time(530_331_956).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 614_000 nanoseconds.
		Weight::from_parts(658_431_124, 10041)
			// Standard Error: 15_546
			.saturating_add(Weight::from_ref_time(10_673_367).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 76_000 nanoseconds.
		Weight::from_parts(89_363_960, 10041)
			// Standard Error: 179_264
			.saturating_add(Weight::from_ref_time(254_755_302).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `6953 + n * (619 ±0)`
		// Minimum execution time: 331_000 nanoseconds.
		Weight::from_parts(387_186_832, 6953)
			// Standard Error: 21_545
			.saturating_add(Weight::from_ref_time(17_546_786).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 81_000 nanoseconds.
		Weight::from_parts(78_577_307, 10041)
			// Standard Error: 348_094
			.saturating_add(Weight::from_ref_time(581_498_566).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_parts(102_709_912, 10041)
			// Standard Error: 409_237
			.saturating_add(Weight::from_ref_time(237_977_675).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + r * (141 ±0)`
		//  Estimated: `5021 + r * (5021 ±0)`
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_parts(83_925_000, 5021)
			// Standard Error: 741_090
			.saturating_add(Weight::from_ref_time(26_908_333).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(5021).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 76_000 nanoseconds.
		Weight::from_ref_time(84_125_000)
			// Standard Error: 791_997
			.saturating_add(Weight::from_ref_time(16_208_333).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 76_000 nanoseconds.
		Weight::from_ref_time(84_175_000)
			// Standard Error: 833_977
			.saturating_add(Weight::from_ref_time(12_325_000).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 76_000 nanoseconds.
		Weight::from_ref_time(83_308_333)
			// Standard Error: 660_468
			.saturating_add(Weight::from_ref_time(14_191_666).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 76_000 nanoseconds.
		Weight::from_ref_time(84_208_333)
			// Standard Error: 785_436
			.saturating_add(Weight::from_ref_time(14_125_000).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5394 + r * (1693 ±42)`
		// Minimum execution time: 76_000 nanoseconds.
		Weight::from_parts(104_828_781, 5394)
			// Standard Error: 243_173
			.saturating_add(Weight::from_ref_time(364_594_429).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(1693).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 91_000 nanoseconds.
		Weight::from_parts(115_095_343, 10041)
			// Standard Error: 1_168_355
			.saturating_add(Weight::from_ref_time(499_080_044).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `p` is `[0, 1024]`.
    /// The range of component `s` is `[1, 1024]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `16382 + p * (621 ±0) + s * (618 ±0)`
		// Minimum execution time: 12_715_000 nanoseconds.
		Weight::from_parts(3_607_533_328, 16382)
			// Standard Error: 299_028
			.saturating_add(Weight::from_ref_time(11_805_876).saturating_mul(p.into()))
			// Standard Error: 299_286
			.saturating_add(Weight::from_ref_time(108_242_162).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(Weight::from_proof_size(621).saturating_mul(p.into()))
			.saturating_add(Weight::from_proof_size(618).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_read_access(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `141 + p * (39600 ±0)`
		// Minimum execution time: 76_000 nanoseconds.
		Weight::from_parts(5_935_414, 141)
			// Standard Error: 163_142
			.saturating_add(Weight::from_ref_time(66_426_983).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads((16_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_proof_size(39600).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_write_access(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `20275341`
		// Minimum execution time: 33_381_000 nanoseconds.
		Weight::from_parts(32_042_434_187, 20275341)
			// Standard Error: 1_361_556
			.saturating_add(Weight::from_ref_time(82_999_057).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(8192_u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_397_000 nanoseconds.
		Weight::from_ref_time(2_580_960_973)
			// Standard Error: 667_421
			.saturating_add(Weight::from_ref_time(9_911_741).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_239_000 nanoseconds.
		Weight::from_ref_time(2_502_515_626)
			// Standard Error: 695_836
			.saturating_add(Weight::from_ref_time(7_916_573).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(1_383_444)
			// Standard Error: 53_497
			.saturating_add(Weight::from_ref_time(2_232_487).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(2_133_568)
			// Standard Error: 16_224
			.saturating_add(Weight::from_ref_time(1_684_843).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(4_939_666)
			// Standard Error: 9_134
			.saturating_add(Weight::from_ref_time(210_111).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(3_721_006)
			// Standard Error: 10_242
			.saturating_add(Weight::from_ref_time(843_607).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(3_108_349)
			// Standard Error: 21_392
			.saturating_add(Weight::from_ref_time(1_876_152).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(7_015_552)
			// Standard Error: 1_501
			.saturating_add(Weight::from_ref_time(101_689).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(5_422_641)
			// Standard Error: 6_807
			.saturating_add(Weight::from_ref_time(495_277).saturating_mul(r.into()))
    }
    fn instr_i64const(
       r: u32,
    ) -> Weight {
		Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(495_277 -
            413_266).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(5_483_511)
			// Standard Error: 7_009
			.saturating_add(Weight::from_ref_time(413_266).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(7_903_736)
			// Standard Error: 56_920
			.saturating_add(Weight::from_ref_time(3_489_261).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_000 nanoseconds.
		Weight::from_ref_time(4_746_767)
			// Standard Error: 20_746
			.saturating_add(Weight::from_ref_time(731_049).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(5_171_683)
			// Standard Error: 8_510
			.saturating_add(Weight::from_ref_time(736_766).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(4_208_832)
			// Standard Error: 11_736
			.saturating_add(Weight::from_ref_time(1_043_342).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(4_875_135)
			// Standard Error: 9_527
			.saturating_add(Weight::from_ref_time(1_015_941).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_000 nanoseconds.
		Weight::from_ref_time(10_025_796)
			// Standard Error: 8_477
			.saturating_add(Weight::from_ref_time(514_964).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_000 nanoseconds.
		Weight::from_ref_time(9_520_088)
			// Standard Error: 7_933
			.saturating_add(Weight::from_ref_time(1_032_569).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000 nanoseconds.
		Weight::from_ref_time(8_785_415)
			// Standard Error: 12_759
			.saturating_add(Weight::from_ref_time(1_553_253).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(4_852_259)
			// Standard Error: 11_009
			.saturating_add(Weight::from_ref_time(674_853).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(5_077_806)
			// Standard Error: 28_332
			.saturating_add(Weight::from_ref_time(781_305).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(3_763_462)
			// Standard Error: 92_533
			.saturating_add(Weight::from_ref_time(6_453_170).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(5_230_999)
			// Standard Error: 16_116
			.saturating_add(Weight::from_ref_time(822_299).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(4_442_623)
			// Standard Error: 10_428
			.saturating_add(Weight::from_ref_time(443_161).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(5_129_790)
			// Standard Error: 10_028
			.saturating_add(Weight::from_ref_time(443_141).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(4_040_590)
			// Standard Error: 9_959
			.saturating_add(Weight::from_ref_time(708_716).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(5_077_761)
			// Standard Error: 33_171
			.saturating_add(Weight::from_ref_time(1_350_796).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(6_104_470)
			// Standard Error: 33_171
			.saturating_add(Weight::from_ref_time(1_318_764).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(4_095_366)
			// Standard Error: 43_742
			.saturating_add(Weight::from_ref_time(1_364_738).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(2_842_626)
			// Standard Error: 62_102
			.saturating_add(Weight::from_ref_time(1_454_561).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(4_618_011)
			// Standard Error: 8_735
			.saturating_add(Weight::from_ref_time(1_293_783).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(3_346_182)
			// Standard Error: 20_655
			.saturating_add(Weight::from_ref_time(1_396_056).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(5_296_512)
			// Standard Error: 17_540
			.saturating_add(Weight::from_ref_time(1_328_317).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(4_558_870)
			// Standard Error: 15_272
			.saturating_add(Weight::from_ref_time(1_318_449).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(219_560)
			// Standard Error: 66_374
			.saturating_add(Weight::from_ref_time(1_605_338).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(4_013_933)
			// Standard Error: 43_980
			.saturating_add(Weight::from_ref_time(1_366_425).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(2_336_362)
			// Standard Error: 63_852
			.saturating_add(Weight::from_ref_time(1_351_396).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(2_467_026)
			// Standard Error: 65_321
			.saturating_add(Weight::from_ref_time(1_345_533).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(3_853_723)
			// Standard Error: 44_469
			.saturating_add(Weight::from_ref_time(1_229_625).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(3_984_820)
			// Standard Error: 37_254
			.saturating_add(Weight::from_ref_time(2_193_343).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(4_188_881)
			// Standard Error: 25_473
			.saturating_add(Weight::from_ref_time(1_302_298).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(3_952_324)
			// Standard Error: 26_573
			.saturating_add(Weight::from_ref_time(1_429_465).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(4_773_045)
			// Standard Error: 24_930
			.saturating_add(Weight::from_ref_time(1_390_619).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(5_182_681)
			// Standard Error: 24_848
			.saturating_add(Weight::from_ref_time(1_122_312).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(3_285_463)
			// Standard Error: 45_658
			.saturating_add(Weight::from_ref_time(1_243_262).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(1_658_072)
			// Standard Error: 68_181
			.saturating_add(Weight::from_ref_time(1_402_901).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(4_819_188)
			// Standard Error: 8_300
			.saturating_add(Weight::from_ref_time(1_130_869).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(950_442)
			// Standard Error: 55_722
			.saturating_add(Weight::from_ref_time(1_378_782).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(5_519_647)
			// Standard Error: 24_814
			.saturating_add(Weight::from_ref_time(1_117_821).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(2_366_423)
			// Standard Error: 67_745
			.saturating_add(Weight::from_ref_time(869_988).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(2_104_338)
			// Standard Error: 47_298
			.saturating_add(Weight::from_ref_time(1_296_240).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_000 nanoseconds.
		Weight::from_ref_time(1_000_000)
			// Standard Error: 1_584
			.saturating_add(Weight::from_ref_time(140_037).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `74 + c * (1024 ±0)`
		//  Estimated: `2543 + c * (1024 ±0)`
		// Minimum execution time: 2_000 nanoseconds.
		Weight::from_parts(4_828_923, 2543)
			// Standard Error: 9_071
			.saturating_add(Weight::from_ref_time(406_749).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_proof_size(1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 64_000 nanoseconds.
		Weight::from_ref_time(53_829_011)
			// Standard Error: 11_615
			.saturating_add(Weight::from_ref_time(1_307_562).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `847`
		//  Estimated: `17017`
		// Minimum execution time: 46_000 nanoseconds.
		Weight::from_parts(47_000_000, 17017)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10`
		//  Estimated: `3010`
		// Minimum execution time: 48_000 nanoseconds.
		Weight::from_parts(48_000_000, 3010)
			// Standard Error: 76_510
			.saturating_add(Weight::from_ref_time(82_292_651).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `577`
		//  Estimated: `17498`
		// Minimum execution time: 41_000 nanoseconds.
		Weight::from_parts(57_119_435, 17498)
			// Standard Error: 1
			.saturating_add(Weight::from_ref_time(1_389).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `55`
		//  Estimated: `13432`
		// Minimum execution time: 5_909_000 nanoseconds.
		Weight::from_parts(108_831_542, 13432)
			// Standard Error: 221_904
			.saturating_add(Weight::from_ref_time(81_560_321).saturating_mul(c.into()))
			// Standard Error: 13
			.saturating_add(Weight::from_ref_time(1_386).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_message(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `422`
		//  Estimated: `15047`
		// Minimum execution time: 45_000 nanoseconds.
		Weight::from_parts(27_534_532, 15047)
			// Standard Error: 5
			.saturating_add(Weight::from_ref_time(548).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_reply(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1090`
		//  Estimated: `31263`
		// Minimum execution time: 63_000 nanoseconds.
		Weight::from_parts(57_204_792, 31263)
			// Standard Error: 5
			.saturating_add(Weight::from_ref_time(528).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `545`
		//  Estimated: `37691`
		// Minimum execution time: 157_000 nanoseconds.
		Weight::from_parts(162_040_810, 37691)
			.saturating_add(RocksDbWeight::get().reads(22_u64))
			.saturating_add(RocksDbWeight::get().writes(21_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `545`
		//  Estimated: `37466`
		// Minimum execution time: 163_000 nanoseconds.
		Weight::from_parts(165_155_034, 37466)
			// Standard Error: 3_020
			.saturating_add(Weight::from_ref_time(12_039).saturating_mul(q.into()))
			.saturating_add(RocksDbWeight::get().reads(22_u64))
			.saturating_add(RocksDbWeight::get().writes(21_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `215 + c * (1075 ±0)`
		//  Estimated: `2931 + c * (2150 ±0)`
		// Minimum execution time: 39_000 nanoseconds.
		Weight::from_parts(39_000_000, 2931)
			// Standard Error: 68_956
			.saturating_add(Weight::from_ref_time(81_201_258).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_proof_size(2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 75_000 nanoseconds.
		Weight::from_ref_time(80_042_263)
			// Standard Error: 178_484
			.saturating_add(Weight::from_ref_time(158_780_433).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 235_000 nanoseconds.
		Weight::from_ref_time(229_684_089)
			// Standard Error: 284_260
			.saturating_add(Weight::from_ref_time(160_614_390).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_parts(81_000_000, 10041)
			// Standard Error: 1_562_405
			.saturating_add(Weight::from_ref_time(366_274_919).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5394 + r * (1693 ±42)`
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_parts(87_981_639, 5394)
			// Standard Error: 685_060
			.saturating_add(Weight::from_ref_time(374_835_947).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(1693).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_parts(97_204_342, 10041)
			// Standard Error: 361_365
			.saturating_add(Weight::from_ref_time(241_526_799).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_parts(103_377_670, 10041)
			// Standard Error: 841_689
			.saturating_add(Weight::from_ref_time(245_119_109).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 81_000 nanoseconds.
		Weight::from_parts(93_726_272, 10041)
			// Standard Error: 161_447
			.saturating_add(Weight::from_ref_time(243_749_180).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 78_000 nanoseconds.
		Weight::from_parts(90_653_290, 10041)
			// Standard Error: 127_627
			.saturating_add(Weight::from_ref_time(244_018_284).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_parts(94_221_161, 10041)
			// Standard Error: 131_309
			.saturating_add(Weight::from_ref_time(243_323_619).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_parts(98_955_870, 10041)
			// Standard Error: 317_122
			.saturating_add(Weight::from_ref_time(247_269_758).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 78_000 nanoseconds.
		Weight::from_parts(97_240_468, 10041)
			// Standard Error: 122_495
			.saturating_add(Weight::from_ref_time(246_736_850).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_parts(91_853_523, 10041)
			// Standard Error: 119_627
			.saturating_add(Weight::from_ref_time(237_015_796).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 78_000 nanoseconds.
		Weight::from_parts(98_343_897, 10041)
			// Standard Error: 105_433
			.saturating_add(Weight::from_ref_time(237_082_729).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_parts(116_465_821, 10041)
			// Standard Error: 728_678
			.saturating_add(Weight::from_ref_time(345_435_401).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `6953 + n * (619 ±0)`
		// Minimum execution time: 433_000 nanoseconds.
		Weight::from_parts(718_845_078, 6953)
			// Standard Error: 116_806
			.saturating_add(Weight::from_ref_time(6_048_236).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_parts(66_619_896, 10041)
			// Standard Error: 631_168
			.saturating_add(Weight::from_ref_time(243_561_575).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 82_000 nanoseconds.
		Weight::from_parts(105_586_907, 10041)
			// Standard Error: 649_367
			.saturating_add(Weight::from_ref_time(239_483_086).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 81_000 nanoseconds.
		Weight::from_parts(72_138_094, 10041)
			// Standard Error: 840_144
			.saturating_add(Weight::from_ref_time(303_884_341).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 83_000 nanoseconds.
		Weight::from_parts(69_700_881, 10041)
			// Standard Error: 793_412
			.saturating_add(Weight::from_ref_time(256_462_662).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_parts(113_508_003, 10041)
			// Standard Error: 473_222
			.saturating_add(Weight::from_ref_time(631_020_190).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `6953 + n * (619 ±0)`
		// Minimum execution time: 700_000 nanoseconds.
		Weight::from_parts(755_288_522, 6953)
			// Standard Error: 32_244
			.saturating_add(Weight::from_ref_time(17_527_578).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 87_000 nanoseconds.
		Weight::from_parts(99_842_734, 10041)
			// Standard Error: 512_794
			.saturating_add(Weight::from_ref_time(436_845_167).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `6953 + n * (619 ±0)`
		// Minimum execution time: 543_000 nanoseconds.
		Weight::from_parts(804_979_308, 6953)
			// Standard Error: 66_454
			.saturating_add(Weight::from_ref_time(11_584_872).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5902 + r * (4012 ±44)`
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_parts(64_143_745, 5902)
			// Standard Error: 939_384
			.saturating_add(Weight::from_ref_time(462_280_860).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(4012).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10492 + n * (618 ±0)`
		// Minimum execution time: 556_000 nanoseconds.
		Weight::from_parts(711_481_866, 10492)
			// Standard Error: 49_731
			.saturating_add(Weight::from_ref_time(11_606_508).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(Weight::from_proof_size(618).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + r * (141 ±0)`
		//  Estimated: `5021 + r * (5021 ±0)`
		// Minimum execution time: 76_000 nanoseconds.
		Weight::from_parts(81_733_333, 5021)
			// Standard Error: 551_439
			.saturating_add(Weight::from_ref_time(22_266_666).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(5021).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 78_000 nanoseconds.
		Weight::from_parts(89_455_140, 10041)
			// Standard Error: 410_772
			.saturating_add(Weight::from_ref_time(355_508_963).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `7185 + n * (619 ±0)`
		// Minimum execution time: 102_000 nanoseconds.
		Weight::from_parts(79_438_945, 7185)
			// Standard Error: 3_391
			.saturating_add(Weight::from_ref_time(473_862).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + r * (141 ±0)`
		//  Estimated: `5021 + r * (5021 ±0)`
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_parts(83_841_666, 5021)
			// Standard Error: 812_260
			.saturating_add(Weight::from_ref_time(41_658_333).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(5021).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 78_000 nanoseconds.
		Weight::from_parts(90_296_198, 10041)
			// Standard Error: 189_760
			.saturating_add(Weight::from_ref_time(242_494_159).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `19941`
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_parts(102_181_953, 19941)
			// Standard Error: 120_423
			.saturating_add(Weight::from_ref_time(245_579_103).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_parts(82_667_865, 10041)
			// Standard Error: 630_133
			.saturating_add(Weight::from_ref_time(261_885_625).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 96_000 nanoseconds.
		Weight::from_parts(95_718_538, 10041)
			// Standard Error: 978
			.saturating_add(Weight::from_ref_time(317_785).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_parts(100_400_708, 10041)
			// Standard Error: 335_597
			.saturating_add(Weight::from_ref_time(530_331_956).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 614_000 nanoseconds.
		Weight::from_parts(658_431_124, 10041)
			// Standard Error: 15_546
			.saturating_add(Weight::from_ref_time(10_673_367).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 76_000 nanoseconds.
		Weight::from_parts(89_363_960, 10041)
			// Standard Error: 179_264
			.saturating_add(Weight::from_ref_time(254_755_302).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `6953 + n * (619 ±0)`
		// Minimum execution time: 331_000 nanoseconds.
		Weight::from_parts(387_186_832, 6953)
			// Standard Error: 21_545
			.saturating_add(Weight::from_ref_time(17_546_786).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 81_000 nanoseconds.
		Weight::from_parts(78_577_307, 10041)
			// Standard Error: 348_094
			.saturating_add(Weight::from_ref_time(581_498_566).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_parts(102_709_912, 10041)
			// Standard Error: 409_237
			.saturating_add(Weight::from_ref_time(237_977_675).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + r * (141 ±0)`
		//  Estimated: `5021 + r * (5021 ±0)`
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_parts(83_925_000, 5021)
			// Standard Error: 741_090
			.saturating_add(Weight::from_ref_time(26_908_333).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(5021).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 76_000 nanoseconds.
		Weight::from_ref_time(84_125_000)
			// Standard Error: 791_997
			.saturating_add(Weight::from_ref_time(16_208_333).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 76_000 nanoseconds.
		Weight::from_ref_time(84_175_000)
			// Standard Error: 833_977
			.saturating_add(Weight::from_ref_time(12_325_000).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 76_000 nanoseconds.
		Weight::from_ref_time(83_308_333)
			// Standard Error: 660_468
			.saturating_add(Weight::from_ref_time(14_191_666).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 76_000 nanoseconds.
		Weight::from_ref_time(84_208_333)
			// Standard Error: 785_436
			.saturating_add(Weight::from_ref_time(14_125_000).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5394 + r * (1693 ±42)`
		// Minimum execution time: 76_000 nanoseconds.
		Weight::from_parts(104_828_781, 5394)
			// Standard Error: 243_173
			.saturating_add(Weight::from_ref_time(364_594_429).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(1693).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 91_000 nanoseconds.
		Weight::from_parts(115_095_343, 10041)
			// Standard Error: 1_168_355
			.saturating_add(Weight::from_ref_time(499_080_044).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `p` is `[0, 1024]`.
    /// The range of component `s` is `[1, 1024]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `16382 + p * (621 ±0) + s * (618 ±0)`
		// Minimum execution time: 12_715_000 nanoseconds.
		Weight::from_parts(3_607_533_328, 16382)
			// Standard Error: 299_028
			.saturating_add(Weight::from_ref_time(11_805_876).saturating_mul(p.into()))
			// Standard Error: 299_286
			.saturating_add(Weight::from_ref_time(108_242_162).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(Weight::from_proof_size(621).saturating_mul(p.into()))
			.saturating_add(Weight::from_proof_size(618).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_read_access(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `141 + p * (39600 ±0)`
		// Minimum execution time: 76_000 nanoseconds.
		Weight::from_parts(5_935_414, 141)
			// Standard Error: 163_142
			.saturating_add(Weight::from_ref_time(66_426_983).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads((16_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_proof_size(39600).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_write_access(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `20275341`
		// Minimum execution time: 33_381_000 nanoseconds.
		Weight::from_parts(32_042_434_187, 20275341)
			// Standard Error: 1_361_556
			.saturating_add(Weight::from_ref_time(82_999_057).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(8192_u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_397_000 nanoseconds.
		Weight::from_ref_time(2_580_960_973)
			// Standard Error: 667_421
			.saturating_add(Weight::from_ref_time(9_911_741).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_239_000 nanoseconds.
		Weight::from_ref_time(2_502_515_626)
			// Standard Error: 695_836
			.saturating_add(Weight::from_ref_time(7_916_573).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(1_383_444)
			// Standard Error: 53_497
			.saturating_add(Weight::from_ref_time(2_232_487).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(2_133_568)
			// Standard Error: 16_224
			.saturating_add(Weight::from_ref_time(1_684_843).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(4_939_666)
			// Standard Error: 9_134
			.saturating_add(Weight::from_ref_time(210_111).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(3_721_006)
			// Standard Error: 10_242
			.saturating_add(Weight::from_ref_time(843_607).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(3_108_349)
			// Standard Error: 21_392
			.saturating_add(Weight::from_ref_time(1_876_152).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(7_015_552)
			// Standard Error: 1_501
			.saturating_add(Weight::from_ref_time(101_689).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(5_422_641)
			// Standard Error: 6_807
			.saturating_add(Weight::from_ref_time(495_277).saturating_mul(r.into()))
    }
    fn instr_i64const(
       r: u32,
    ) -> Weight {
		Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(495_277 -
            413_266).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(5_483_511)
			// Standard Error: 7_009
			.saturating_add(Weight::from_ref_time(413_266).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(7_903_736)
			// Standard Error: 56_920
			.saturating_add(Weight::from_ref_time(3_489_261).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_000 nanoseconds.
		Weight::from_ref_time(4_746_767)
			// Standard Error: 20_746
			.saturating_add(Weight::from_ref_time(731_049).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(5_171_683)
			// Standard Error: 8_510
			.saturating_add(Weight::from_ref_time(736_766).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(4_208_832)
			// Standard Error: 11_736
			.saturating_add(Weight::from_ref_time(1_043_342).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(4_875_135)
			// Standard Error: 9_527
			.saturating_add(Weight::from_ref_time(1_015_941).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_000 nanoseconds.
		Weight::from_ref_time(10_025_796)
			// Standard Error: 8_477
			.saturating_add(Weight::from_ref_time(514_964).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_000 nanoseconds.
		Weight::from_ref_time(9_520_088)
			// Standard Error: 7_933
			.saturating_add(Weight::from_ref_time(1_032_569).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000 nanoseconds.
		Weight::from_ref_time(8_785_415)
			// Standard Error: 12_759
			.saturating_add(Weight::from_ref_time(1_553_253).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(4_852_259)
			// Standard Error: 11_009
			.saturating_add(Weight::from_ref_time(674_853).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(5_077_806)
			// Standard Error: 28_332
			.saturating_add(Weight::from_ref_time(781_305).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(3_763_462)
			// Standard Error: 92_533
			.saturating_add(Weight::from_ref_time(6_453_170).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(5_230_999)
			// Standard Error: 16_116
			.saturating_add(Weight::from_ref_time(822_299).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(4_442_623)
			// Standard Error: 10_428
			.saturating_add(Weight::from_ref_time(443_161).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(5_129_790)
			// Standard Error: 10_028
			.saturating_add(Weight::from_ref_time(443_141).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(4_040_590)
			// Standard Error: 9_959
			.saturating_add(Weight::from_ref_time(708_716).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(5_077_761)
			// Standard Error: 33_171
			.saturating_add(Weight::from_ref_time(1_350_796).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(6_104_470)
			// Standard Error: 33_171
			.saturating_add(Weight::from_ref_time(1_318_764).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(4_095_366)
			// Standard Error: 43_742
			.saturating_add(Weight::from_ref_time(1_364_738).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(2_842_626)
			// Standard Error: 62_102
			.saturating_add(Weight::from_ref_time(1_454_561).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(4_618_011)
			// Standard Error: 8_735
			.saturating_add(Weight::from_ref_time(1_293_783).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(3_346_182)
			// Standard Error: 20_655
			.saturating_add(Weight::from_ref_time(1_396_056).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(5_296_512)
			// Standard Error: 17_540
			.saturating_add(Weight::from_ref_time(1_328_317).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(4_558_870)
			// Standard Error: 15_272
			.saturating_add(Weight::from_ref_time(1_318_449).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(219_560)
			// Standard Error: 66_374
			.saturating_add(Weight::from_ref_time(1_605_338).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(4_013_933)
			// Standard Error: 43_980
			.saturating_add(Weight::from_ref_time(1_366_425).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(2_336_362)
			// Standard Error: 63_852
			.saturating_add(Weight::from_ref_time(1_351_396).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(2_467_026)
			// Standard Error: 65_321
			.saturating_add(Weight::from_ref_time(1_345_533).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(3_853_723)
			// Standard Error: 44_469
			.saturating_add(Weight::from_ref_time(1_229_625).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(3_984_820)
			// Standard Error: 37_254
			.saturating_add(Weight::from_ref_time(2_193_343).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(4_188_881)
			// Standard Error: 25_473
			.saturating_add(Weight::from_ref_time(1_302_298).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(3_952_324)
			// Standard Error: 26_573
			.saturating_add(Weight::from_ref_time(1_429_465).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(4_773_045)
			// Standard Error: 24_930
			.saturating_add(Weight::from_ref_time(1_390_619).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(5_182_681)
			// Standard Error: 24_848
			.saturating_add(Weight::from_ref_time(1_122_312).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(3_285_463)
			// Standard Error: 45_658
			.saturating_add(Weight::from_ref_time(1_243_262).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(1_658_072)
			// Standard Error: 68_181
			.saturating_add(Weight::from_ref_time(1_402_901).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(4_819_188)
			// Standard Error: 8_300
			.saturating_add(Weight::from_ref_time(1_130_869).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(950_442)
			// Standard Error: 55_722
			.saturating_add(Weight::from_ref_time(1_378_782).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(5_519_647)
			// Standard Error: 24_814
			.saturating_add(Weight::from_ref_time(1_117_821).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(2_366_423)
			// Standard Error: 67_745
			.saturating_add(Weight::from_ref_time(869_988).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(2_104_338)
			// Standard Error: 47_298
			.saturating_add(Weight::from_ref_time(1_296_240).saturating_mul(r.into()))
    }
}
