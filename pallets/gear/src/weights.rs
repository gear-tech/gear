// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-13, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_message_with_voucher(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn send_reply_with_voucher(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 990_000 picoseconds.
        Weight::from_parts(1_049_000, 0)
            // Standard Error: 686
            .saturating_add(Weight::from_parts(242_487, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_776_000 picoseconds.
        Weight::from_parts(2_926_000, 3506)
            // Standard Error: 1_056
            .saturating_add(Weight::from_parts(670_577, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 52_388_000 picoseconds.
        Weight::from_parts(74_229_765, 0)
            // Standard Error: 7_680
            .saturating_add(Weight::from_parts(2_427_178, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `42236`
        // Minimum execution time: 83_751_000 picoseconds.
        Weight::from_parts(85_540_000, 42236)
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `886`
        //  Estimated: `21261`
        // Minimum execution time: 53_792_000 picoseconds.
        Weight::from_parts(55_210_000, 21261)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `534`
        //  Estimated: `17070`
        // Minimum execution time: 29_277_000 picoseconds.
        Weight::from_parts(30_570_000, 17070)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_365_000 picoseconds.
        Weight::from_parts(8_305_380, 7640)
            // Standard Error: 43_605
            .saturating_add(Weight::from_parts(16_354_224, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1364 + c * (16389 ±0)`
        //  Estimated: `41434 + c * (131112 ±0)`
        // Minimum execution time: 70_339_000 picoseconds.
        Weight::from_parts(71_233_000, 41434)
            // Standard Error: 169_422
            .saturating_add(Weight::from_parts(55_572_368, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 64_030_000 picoseconds.
        Weight::from_parts(49_650_288, 4990)
            // Standard Error: 40_921
            .saturating_add(Weight::from_parts(53_077_064, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `738`
        //  Estimated: `39375`
        // Minimum execution time: 64_745_000 picoseconds.
        Weight::from_parts(96_452_812, 39375)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_572, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `235`
        //  Estimated: `34312`
        // Minimum execution time: 10_914_264_000 picoseconds.
        Weight::from_parts(278_764_650, 34312)
            // Standard Error: 156_493
            .saturating_add(Weight::from_parts(53_766_782, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_517, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `348`
        //  Estimated: `23853`
        // Minimum execution time: 55_487_000 picoseconds.
        Weight::from_parts(31_180_048, 23853)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_177, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `451`
        //  Estimated: `27177`
        // Minimum execution time: 59_745_000 picoseconds.
        Weight::from_parts(32_264_542, 27177)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_185, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `978`
        //  Estimated: `42227`
        // Minimum execution time: 83_935_000 picoseconds.
        Weight::from_parts(67_556_120, 42227)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_190, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1081`
        //  Estimated: `45757`
        // Minimum execution time: 95_523_000 picoseconds.
        Weight::from_parts(67_846_891, 45757)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_213, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 306_381_000 picoseconds.
        Weight::from_parts(319_153_310, 74319)
            // Standard Error: 1_387
            .saturating_add(Weight::from_parts(6_138, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(27_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 319_572_000 picoseconds.
        Weight::from_parts(332_017_272, 74319)
            // Standard Error: 1_262
            .saturating_add(Weight::from_parts(2_004, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(27_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 47_252_000 picoseconds.
        Weight::from_parts(47_900_000, 3899)
            // Standard Error: 26_716
            .saturating_add(Weight::from_parts(51_791_764, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_222_000 picoseconds.
        Weight::from_parts(87_003_000, 0)
            // Standard Error: 4_412_345
            .saturating_add(Weight::from_parts(709_555_221, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 418_248_000 picoseconds.
        Weight::from_parts(357_180_796, 0)
            // Standard Error: 10_036
            .saturating_add(Weight::from_parts(34_125_905, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 252_299_000 picoseconds.
        Weight::from_parts(290_811_825, 0)
            // Standard Error: 441_558
            .saturating_add(Weight::from_parts(168_655_080, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_637_000 picoseconds.
        Weight::from_parts(93_539_683, 0)
            // Standard Error: 5_764
            .saturating_add(Weight::from_parts(4_269_453, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 137_667_000 picoseconds.
        Weight::from_parts(153_461_952, 0)
            // Standard Error: 28_015
            .saturating_add(Weight::from_parts(4_740_934, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_605_000 picoseconds.
        Weight::from_parts(115_078_201, 0)
            // Standard Error: 420_788
            .saturating_add(Weight::from_parts(235_062_438, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_883_000 picoseconds.
        Weight::from_parts(84_013_989, 0)
            // Standard Error: 315_983
            .saturating_add(Weight::from_parts(233_618_600, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_674_000 picoseconds.
        Weight::from_parts(84_138_097, 0)
            // Standard Error: 394_031
            .saturating_add(Weight::from_parts(234_112_935, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_037_000 picoseconds.
        Weight::from_parts(80_043_119, 0)
            // Standard Error: 363_071
            .saturating_add(Weight::from_parts(234_440_419, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_970_000 picoseconds.
        Weight::from_parts(79_191_736, 0)
            // Standard Error: 388_386
            .saturating_add(Weight::from_parts(234_797_123, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_955_000 picoseconds.
        Weight::from_parts(76_258_811, 0)
            // Standard Error: 378_019
            .saturating_add(Weight::from_parts(235_845_928, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_420_000 picoseconds.
        Weight::from_parts(80_595_371, 0)
            // Standard Error: 321_668
            .saturating_add(Weight::from_parts(234_918_409, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_641_000 picoseconds.
        Weight::from_parts(79_056_207, 0)
            // Standard Error: 372_009
            .saturating_add(Weight::from_parts(236_443_753, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 712_026_000 picoseconds.
        Weight::from_parts(757_785_668, 0)
            // Standard Error: 464_262
            .saturating_add(Weight::from_parts(317_512_842, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 977_690_000 picoseconds.
        Weight::from_parts(991_462_000, 0)
            // Standard Error: 58_744
            .saturating_add(Weight::from_parts(13_316_633, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_258_000 picoseconds.
        Weight::from_parts(75_200_329, 0)
            // Standard Error: 367_397
            .saturating_add(Weight::from_parts(234_793_089, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_774_000 picoseconds.
        Weight::from_parts(86_726_743, 0)
            // Standard Error: 344_677
            .saturating_add(Weight::from_parts(232_758_004, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_660_000 picoseconds.
        Weight::from_parts(107_246_381, 0)
            // Standard Error: 450_595
            .saturating_add(Weight::from_parts(299_226_823, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_608_000 picoseconds.
        Weight::from_parts(88_218_000, 0)
            // Standard Error: 3_603_226
            .saturating_add(Weight::from_parts(1_138_570_591, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_028_000 picoseconds.
        Weight::from_parts(148_854_569, 0)
            // Standard Error: 521_593
            .saturating_add(Weight::from_parts(444_403_185, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 526_298_000 picoseconds.
        Weight::from_parts(529_334_000, 0)
            // Standard Error: 64_334
            .saturating_add(Weight::from_parts(21_542_119, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_355_000 picoseconds.
        Weight::from_parts(150_399_219, 0)
            // Standard Error: 494_235
            .saturating_add(Weight::from_parts(448_618_346, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 527_623_000 picoseconds.
        Weight::from_parts(531_388_000, 0)
            // Standard Error: 68_048
            .saturating_add(Weight::from_parts(21_511_303, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 714_514_000 picoseconds.
        Weight::from_parts(770_347_767, 0)
            // Standard Error: 491_305
            .saturating_add(Weight::from_parts(460_521_622, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 727_797_000 picoseconds.
        Weight::from_parts(796_951_141, 0)
            // Standard Error: 511_348
            .saturating_add(Weight::from_parts(465_952_417, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_511_000 picoseconds.
        Weight::from_parts(70_108_276, 0)
            // Standard Error: 369_170
            .saturating_add(Weight::from_parts(244_926_400, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_793_504_000 picoseconds.
        Weight::from_parts(4_938_314_567, 0)
            // Standard Error: 404_342
            .saturating_add(Weight::from_parts(338_431_048, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 591_844_000 picoseconds.
        Weight::from_parts(598_128_000, 0)
            // Standard Error: 54_800
            .saturating_add(Weight::from_parts(31_272_502, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_793_559_000 picoseconds.
        Weight::from_parts(4_953_984_624, 0)
            // Standard Error: 454_672
            .saturating_add(Weight::from_parts(391_509_821, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_774_023_000 picoseconds.
        Weight::from_parts(4_926_440_375, 0)
            // Standard Error: 406_352
            .saturating_add(Weight::from_parts(410_066_296, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 252_283_000 picoseconds.
        Weight::from_parts(317_036_023, 0)
            // Standard Error: 491_835
            .saturating_add(Weight::from_parts(459_054_688, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 690_374_000 picoseconds.
        Weight::from_parts(696_614_000, 0)
            // Standard Error: 57_727
            .saturating_add(Weight::from_parts(21_193_900, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_942_359_000 picoseconds.
        Weight::from_parts(5_078_327_071, 0)
            // Standard Error: 452_216
            .saturating_add(Weight::from_parts(410_586_501, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_677_000 picoseconds.
        Weight::from_parts(88_427_695, 0)
            // Standard Error: 289_964
            .saturating_add(Weight::from_parts(20_836_104, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_884_000 picoseconds.
        Weight::from_parts(94_128_638, 0)
            // Standard Error: 1_150
            .saturating_add(Weight::from_parts(427_959, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_126_000 picoseconds.
        Weight::from_parts(91_658_518, 0)
            // Standard Error: 269_208
            .saturating_add(Weight::from_parts(19_110_181, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_968_000 picoseconds.
        Weight::from_parts(96_214_665, 0)
            // Standard Error: 1_051
            .saturating_add(Weight::from_parts(424_356, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_080_000 picoseconds.
        Weight::from_parts(88_919_016, 0)
            // Standard Error: 290_610
            .saturating_add(Weight::from_parts(20_031_683, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_877_000 picoseconds.
        Weight::from_parts(89_997_934, 0)
            // Standard Error: 353_369
            .saturating_add(Weight::from_parts(21_258_265, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_914_000 picoseconds.
        Weight::from_parts(128_101_726, 0)
            // Standard Error: 456_540
            .saturating_add(Weight::from_parts(327_004_586, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_098_000 picoseconds.
        Weight::from_parts(107_176_000, 0)
            // Standard Error: 2_365
            .saturating_add(Weight::from_parts(643_572, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 706_872_000 picoseconds.
        Weight::from_parts(729_697_981, 0)
            // Standard Error: 1_976_351
            .saturating_add(Weight::from_parts(36_344_818, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 706_823_000 picoseconds.
        Weight::from_parts(739_731_189, 0)
            // Standard Error: 3_069_948
            .saturating_add(Weight::from_parts(1_778_910, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_313_000 picoseconds.
        Weight::from_parts(101_011_510, 0)
            // Standard Error: 309_893
            .saturating_add(Weight::from_parts(12_424_889, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_082_000 picoseconds.
        Weight::from_parts(94_741_351, 0)
            // Standard Error: 1_210
            .saturating_add(Weight::from_parts(428_098, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_144_000 picoseconds.
        Weight::from_parts(100_819_965, 0)
            // Standard Error: 312_160
            .saturating_add(Weight::from_parts(12_498_034, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_817_000 picoseconds.
        Weight::from_parts(98_997_460, 0)
            // Standard Error: 911
            .saturating_add(Weight::from_parts(418_183, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_937_000 picoseconds.
        Weight::from_parts(79_415_972, 0)
            // Standard Error: 348_880
            .saturating_add(Weight::from_parts(235_937_217, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_627_000 picoseconds.
        Weight::from_parts(83_675_859, 0)
            // Standard Error: 339_403
            .saturating_add(Weight::from_parts(235_762_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 716_756_000 picoseconds.
        Weight::from_parts(761_461_420, 0)
            // Standard Error: 454_456
            .saturating_add(Weight::from_parts(248_489_654, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 732_309_000 picoseconds.
        Weight::from_parts(759_387_651, 0)
            // Standard Error: 1_129
            .saturating_add(Weight::from_parts(146_886, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_427_965_000 picoseconds.
        Weight::from_parts(5_584_572_405, 0)
            // Standard Error: 509_610
            .saturating_add(Weight::from_parts(266_723_710, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_746_904_000 picoseconds.
        Weight::from_parts(5_825_570_819, 0)
            // Standard Error: 10_085
            .saturating_add(Weight::from_parts(13_639_502, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_800_000 picoseconds.
        Weight::from_parts(107_792_324, 0)
            // Standard Error: 431_628
            .saturating_add(Weight::from_parts(246_303_550, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 235_563_000 picoseconds.
        Weight::from_parts(238_625_000, 0)
            // Standard Error: 50_499
            .saturating_add(Weight::from_parts(25_511_187, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_947_000 picoseconds.
        Weight::from_parts(89_682_740, 0)
            // Standard Error: 348_317
            .saturating_add(Weight::from_parts(234_018_615, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_100_000 picoseconds.
        Weight::from_parts(87_707_777, 0)
            // Standard Error: 258_445
            .saturating_add(Weight::from_parts(29_983_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_620_000 picoseconds.
        Weight::from_parts(88_230_306, 0)
            // Standard Error: 272_978
            .saturating_add(Weight::from_parts(17_120_893, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_978_000 picoseconds.
        Weight::from_parts(91_119_451, 0)
            // Standard Error: 269_369
            .saturating_add(Weight::from_parts(15_184_548, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_688_000 picoseconds.
        Weight::from_parts(90_189_414, 0)
            // Standard Error: 273_180
            .saturating_add(Weight::from_parts(15_680_285, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_875_000 picoseconds.
        Weight::from_parts(88_169_159, 0)
            // Standard Error: 275_439
            .saturating_add(Weight::from_parts(14_520_840, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 137_675_000 picoseconds.
        Weight::from_parts(223_939_434, 0)
            // Standard Error: 432_414
            .saturating_add(Weight::from_parts(337_824_841, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_934_000 picoseconds.
        Weight::from_parts(156_494_816, 0)
            // Standard Error: 447_955
            .saturating_add(Weight::from_parts(528_564_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 46_437_864_000 picoseconds.
        Weight::from_parts(46_530_376_000, 0)
            // Standard Error: 266_354
            .saturating_add(Weight::from_parts(7_234_250, 0).saturating_mul(p.into()))
            // Standard Error: 266_341
            .saturating_add(Weight::from_parts(176_106_088, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_476_000 picoseconds.
        Weight::from_parts(153_424_122, 0)
            // Standard Error: 465_906
            .saturating_add(Weight::from_parts(532_257_834, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 46_304_524_000 picoseconds.
        Weight::from_parts(46_363_097_000, 0)
            // Standard Error: 282_696
            .saturating_add(Weight::from_parts(6_905_555, 0).saturating_mul(p.into()))
            // Standard Error: 282_682
            .saturating_add(Weight::from_parts(176_467_418, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_152_000 picoseconds.
        Weight::from_parts(103_953_387, 0)
            // Standard Error: 31_619
            .saturating_add(Weight::from_parts(4_051_743, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 85_577_000 picoseconds.
        Weight::from_parts(130_463_800, 1131)
            // Standard Error: 8_489
            .saturating_add(Weight::from_parts(12_233_025, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 85_637_000 picoseconds.
        Weight::from_parts(87_209_000, 1131)
            // Standard Error: 34_392
            .saturating_add(Weight::from_parts(35_611_270, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_359_334_000 picoseconds.
        Weight::from_parts(6_121_083_942, 5069931)
            // Standard Error: 63_810
            .saturating_add(Weight::from_parts(36_566_054, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 85_837_000 picoseconds.
        Weight::from_parts(86_734_000, 1939)
            // Standard Error: 52_031
            .saturating_add(Weight::from_parts(47_935_831, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 91_093_000 picoseconds.
        Weight::from_parts(89_453_904, 1131)
            // Standard Error: 67_270
            .saturating_add(Weight::from_parts(36_623_289, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 742_900_000 picoseconds.
        Weight::from_parts(797_212_869, 1496)
            // Standard Error: 203_408
            .saturating_add(Weight::from_parts(39_864_931, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_154_233_000 picoseconds.
        Weight::from_parts(1_168_913_585, 317931)
            // Standard Error: 156_513
            .saturating_add(Weight::from_parts(40_911_219, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_637_000 picoseconds.
        Weight::from_parts(1_579_535, 0)
            // Standard Error: 10_282
            .saturating_add(Weight::from_parts(23_979_117, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_337_100_000 picoseconds.
        Weight::from_parts(4_301_699_118, 0)
            // Standard Error: 35_988
            .saturating_add(Weight::from_parts(3_646_485, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_335_883_000 picoseconds.
        Weight::from_parts(4_309_192_543, 0)
            // Standard Error: 54_788
            .saturating_add(Weight::from_parts(3_782_929, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_564_573_000 picoseconds.
        Weight::from_parts(11_470_489_007, 0)
            // Standard Error: 145_973
            .saturating_add(Weight::from_parts(9_000_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_413_294_000 picoseconds.
        Weight::from_parts(10_646_734_527, 0)
            // Standard Error: 186_523
            .saturating_add(Weight::from_parts(10_318_180, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_213_000 picoseconds.
        Weight::from_parts(2_271_000, 0)
            // Standard Error: 8_412
            .saturating_add(Weight::from_parts(3_826_675, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_177_000 picoseconds.
        Weight::from_parts(2_258_000, 0)
            // Standard Error: 6_151
            .saturating_add(Weight::from_parts(3_061_817, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_229_000 picoseconds.
        Weight::from_parts(3_426_438, 0)
            // Standard Error: 1_152
            .saturating_add(Weight::from_parts(1_567_482, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_213_000 picoseconds.
        Weight::from_parts(2_263_000, 0)
            // Standard Error: 9_581
            .saturating_add(Weight::from_parts(2_965_066, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_163_000 picoseconds.
        Weight::from_parts(2_792_586, 0)
            // Standard Error: 14_585
            .saturating_add(Weight::from_parts(5_083_752, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_660_000 picoseconds.
        Weight::from_parts(6_432_123, 0)
            // Standard Error: 1_897
            .saturating_add(Weight::from_parts(133_494, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_190_000 picoseconds.
        Weight::from_parts(4_331_035, 0)
            // Standard Error: 6_255
            .saturating_add(Weight::from_parts(2_559_212, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_559_212 -
            2_413_142, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_192_000 picoseconds.
        Weight::from_parts(3_893_976, 0)
            // Standard Error: 12_129
            .saturating_add(Weight::from_parts(2_413_142, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_543_000 picoseconds.
        Weight::from_parts(7_683_499, 0)
            // Standard Error: 22_341
            .saturating_add(Weight::from_parts(10_324_116, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_819_000 picoseconds.
        Weight::from_parts(12_406_000, 0)
            // Standard Error: 6_552
            .saturating_add(Weight::from_parts(1_132_455, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_266_000 picoseconds.
        Weight::from_parts(5_637_030, 0)
            // Standard Error: 14
            .saturating_add(Weight::from_parts(61, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_271_000 picoseconds.
        Weight::from_parts(1_703_004, 0)
            // Standard Error: 3_377
            .saturating_add(Weight::from_parts(252_219, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_157_000 picoseconds.
        Weight::from_parts(2_248_000, 0)
            // Standard Error: 5_108
            .saturating_add(Weight::from_parts(763_832, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_249_000 picoseconds.
        Weight::from_parts(2_302_000, 0)
            // Standard Error: 5_040
            .saturating_add(Weight::from_parts(747_294, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_251_000 picoseconds.
        Weight::from_parts(1_658_576, 0)
            // Standard Error: 9_292
            .saturating_add(Weight::from_parts(832_114, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_366_000 picoseconds.
        Weight::from_parts(6_431_000, 0)
            // Standard Error: 10_465
            .saturating_add(Weight::from_parts(1_323_456, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_241_000 picoseconds.
        Weight::from_parts(1_511_304, 0)
            // Standard Error: 11_616
            .saturating_add(Weight::from_parts(7_105_356, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_186_000 picoseconds.
        Weight::from_parts(2_232_000, 0)
            // Standard Error: 5_638
            .saturating_add(Weight::from_parts(3_240_080, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_179_000 picoseconds.
        Weight::from_parts(2_238_000, 0)
            // Standard Error: 6_253
            .saturating_add(Weight::from_parts(3_051_377, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_193_000 picoseconds.
        Weight::from_parts(2_279_000, 0)
            // Standard Error: 6_246
            .saturating_add(Weight::from_parts(3_014_119, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_212_000 picoseconds.
        Weight::from_parts(2_278_000, 0)
            // Standard Error: 4_860
            .saturating_add(Weight::from_parts(2_602_767, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_162_000 picoseconds.
        Weight::from_parts(2_237_000, 0)
            // Standard Error: 3_577
            .saturating_add(Weight::from_parts(551_139, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_179_000 picoseconds.
        Weight::from_parts(1_480_989, 0)
            // Standard Error: 3_344
            .saturating_add(Weight::from_parts(381_312, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_190_000 picoseconds.
        Weight::from_parts(2_251_000, 0)
            // Standard Error: 11_018
            .saturating_add(Weight::from_parts(1_807_489, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_219_000 picoseconds.
        Weight::from_parts(2_306_000, 0)
            // Standard Error: 7_919
            .saturating_add(Weight::from_parts(1_121_167, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_223_000 picoseconds.
        Weight::from_parts(1_457_189, 0)
            // Standard Error: 3_846
            .saturating_add(Weight::from_parts(363_435, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_222_000 picoseconds.
        Weight::from_parts(1_738_887, 0)
            // Standard Error: 3_502
            .saturating_add(Weight::from_parts(345_478, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_250_000 picoseconds.
        Weight::from_parts(2_288_000, 0)
            // Standard Error: 3_606
            .saturating_add(Weight::from_parts(488_901, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_163_000 picoseconds.
        Weight::from_parts(2_279_000, 0)
            // Standard Error: 3_193
            .saturating_add(Weight::from_parts(508_952, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_102_000 picoseconds.
        Weight::from_parts(458_524, 0)
            // Standard Error: 4_582
            .saturating_add(Weight::from_parts(485_788, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_235_000 picoseconds.
        Weight::from_parts(1_405_338, 0)
            // Standard Error: 3_418
            .saturating_add(Weight::from_parts(336_701, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_230_000 picoseconds.
        Weight::from_parts(2_703_008, 0)
            // Standard Error: 2_198
            .saturating_add(Weight::from_parts(159_072, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_176_000 picoseconds.
        Weight::from_parts(2_814_821, 0)
            // Standard Error: 1_823
            .saturating_add(Weight::from_parts(151_994, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_216_000 picoseconds.
        Weight::from_parts(2_290_000, 0)
            // Standard Error: 10_432
            .saturating_add(Weight::from_parts(1_731_609, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_214_000 picoseconds.
        Weight::from_parts(2_250_000, 0)
            // Standard Error: 6_705
            .saturating_add(Weight::from_parts(1_081_519, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_202_000 picoseconds.
        Weight::from_parts(2_237_000, 0)
            // Standard Error: 9_924
            .saturating_add(Weight::from_parts(1_713_791, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_170_000 picoseconds.
        Weight::from_parts(2_207_000, 0)
            // Standard Error: 7_700
            .saturating_add(Weight::from_parts(1_115_377, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_175_000 picoseconds.
        Weight::from_parts(2_283_000, 0)
            // Standard Error: 9_760
            .saturating_add(Weight::from_parts(1_721_139, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_143_000 picoseconds.
        Weight::from_parts(2_264_000, 0)
            // Standard Error: 8_446
            .saturating_add(Weight::from_parts(1_220_324, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_294_000 picoseconds.
        Weight::from_parts(2_361_000, 0)
            // Standard Error: 8_442
            .saturating_add(Weight::from_parts(1_872_827, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_197_000 picoseconds.
        Weight::from_parts(2_253_000, 0)
            // Standard Error: 7_989
            .saturating_add(Weight::from_parts(1_245_468, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_178_000 picoseconds.
        Weight::from_parts(2_242_000, 0)
            // Standard Error: 9_083
            .saturating_add(Weight::from_parts(1_890_871, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_165_000 picoseconds.
        Weight::from_parts(2_269_000, 0)
            // Standard Error: 6_819
            .saturating_add(Weight::from_parts(1_201_641, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_176_000 picoseconds.
        Weight::from_parts(2_236_000, 0)
            // Standard Error: 9_879
            .saturating_add(Weight::from_parts(1_860_276, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_144_000 picoseconds.
        Weight::from_parts(2_226_000, 0)
            // Standard Error: 7_454
            .saturating_add(Weight::from_parts(1_149_019, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_162_000 picoseconds.
        Weight::from_parts(2_259_000, 0)
            // Standard Error: 9_793
            .saturating_add(Weight::from_parts(1_816_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_202_000 picoseconds.
        Weight::from_parts(2_280_000, 0)
            // Standard Error: 7_439
            .saturating_add(Weight::from_parts(1_151_067, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_176_000 picoseconds.
        Weight::from_parts(2_278_000, 0)
            // Standard Error: 10_695
            .saturating_add(Weight::from_parts(1_814_768, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_571_000 picoseconds.
        Weight::from_parts(2_646_000, 0)
            // Standard Error: 7_097
            .saturating_add(Weight::from_parts(1_043_279, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_083_000 picoseconds.
        Weight::from_parts(2_227_000, 0)
            // Standard Error: 12_723
            .saturating_add(Weight::from_parts(1_829_503, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_167_000 picoseconds.
        Weight::from_parts(2_206_000, 0)
            // Standard Error: 6_578
            .saturating_add(Weight::from_parts(1_119_805, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_158_000 picoseconds.
        Weight::from_parts(2_223_000, 0)
            // Standard Error: 12_281
            .saturating_add(Weight::from_parts(1_810_231, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_198_000 picoseconds.
        Weight::from_parts(2_307_000, 0)
            // Standard Error: 7_105
            .saturating_add(Weight::from_parts(1_121_865, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_112_000 picoseconds.
        Weight::from_parts(2_192_000, 0)
            // Standard Error: 7_396
            .saturating_add(Weight::from_parts(1_189_208, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_187_000 picoseconds.
        Weight::from_parts(2_282_000, 0)
            // Standard Error: 3_728
            .saturating_add(Weight::from_parts(574_689, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_178_000 picoseconds.
        Weight::from_parts(2_261_000, 0)
            // Standard Error: 7_710
            .saturating_add(Weight::from_parts(1_197_933, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_277_000 picoseconds.
        Weight::from_parts(2_337_000, 0)
            // Standard Error: 4_189
            .saturating_add(Weight::from_parts(583_754, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_083_000 picoseconds.
        Weight::from_parts(2_206_000, 0)
            // Standard Error: 12_478
            .saturating_add(Weight::from_parts(1_753_748, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_292_000 picoseconds.
        Weight::from_parts(2_326_000, 0)
            // Standard Error: 6_909
            .saturating_add(Weight::from_parts(1_132_352, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_188_000 picoseconds.
        Weight::from_parts(522_728, 0)
            // Standard Error: 19_552
            .saturating_add(Weight::from_parts(2_704_339, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_153_000 picoseconds.
        Weight::from_parts(1_526_164, 0)
            // Standard Error: 10_257
            .saturating_add(Weight::from_parts(2_359_880, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_094_000 picoseconds.
        Weight::from_parts(2_144_000, 0)
            // Standard Error: 5_377
            .saturating_add(Weight::from_parts(2_945_867, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_169_000 picoseconds.
        Weight::from_parts(2_211_000, 0)
            // Standard Error: 5_247
            .saturating_add(Weight::from_parts(2_431_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_256_000 picoseconds.
        Weight::from_parts(2_322_000, 0)
            // Standard Error: 16_019
            .saturating_add(Weight::from_parts(9_677_056, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_236_000 picoseconds.
        Weight::from_parts(2_063_031, 0)
            // Standard Error: 44_174
            .saturating_add(Weight::from_parts(7_541_106, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_127_000 picoseconds.
        Weight::from_parts(5_205_597, 0)
            // Standard Error: 24_468
            .saturating_add(Weight::from_parts(2_768_332, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_179_000 picoseconds.
        Weight::from_parts(2_216_000, 0)
            // Standard Error: 6_057
            .saturating_add(Weight::from_parts(2_466_947, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_260_000 picoseconds.
        Weight::from_parts(2_298_000, 0)
            // Standard Error: 6_931
            .saturating_add(Weight::from_parts(1_211_851, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_211_000 picoseconds.
        Weight::from_parts(2_267_000, 0)
            // Standard Error: 5_345
            .saturating_add(Weight::from_parts(611_062, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_158_000 picoseconds.
        Weight::from_parts(2_268_000, 0)
            // Standard Error: 9_629
            .saturating_add(Weight::from_parts(1_243_254, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_342_000 picoseconds.
        Weight::from_parts(2_377_000, 0)
            // Standard Error: 4_075
            .saturating_add(Weight::from_parts(564_916, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_174_000 picoseconds.
        Weight::from_parts(2_250_000, 0)
            // Standard Error: 7_454
            .saturating_add(Weight::from_parts(1_212_472, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_174_000 picoseconds.
        Weight::from_parts(2_238_000, 0)
            // Standard Error: 3_674
            .saturating_add(Weight::from_parts(587_206, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_178_000 picoseconds.
        Weight::from_parts(2_219_000, 0)
            // Standard Error: 6_543
            .saturating_add(Weight::from_parts(993_044, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_151_000 picoseconds.
        Weight::from_parts(2_225_000, 0)
            // Standard Error: 3_274
            .saturating_add(Weight::from_parts(509_569, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_151_000 picoseconds.
        Weight::from_parts(2_197_000, 0)
            // Standard Error: 6_768
            .saturating_add(Weight::from_parts(979_181, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_213_000 picoseconds.
        Weight::from_parts(26_961, 0)
            // Standard Error: 6_012
            .saturating_add(Weight::from_parts(578_422, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_173_000 picoseconds.
        Weight::from_parts(2_320_000, 0)
            // Standard Error: 7_198
            .saturating_add(Weight::from_parts(985_992, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_213_000 picoseconds.
        Weight::from_parts(2_279_000, 0)
            // Standard Error: 3_582
            .saturating_add(Weight::from_parts(504_208, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_180_000 picoseconds.
        Weight::from_parts(2_242_000, 0)
            // Standard Error: 8_356
            .saturating_add(Weight::from_parts(1_025_849, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_305_000 picoseconds.
        Weight::from_parts(272_670, 0)
            // Standard Error: 6_376
            .saturating_add(Weight::from_parts(599_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_184_000 picoseconds.
        Weight::from_parts(2_288_000, 0)
            // Standard Error: 6_937
            .saturating_add(Weight::from_parts(1_018_594, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_161_000 picoseconds.
        Weight::from_parts(2_202_000, 0)
            // Standard Error: 4_010
            .saturating_add(Weight::from_parts(573_907, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 990_000 picoseconds.
        Weight::from_parts(1_049_000, 0)
            // Standard Error: 686
            .saturating_add(Weight::from_parts(242_487, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_776_000 picoseconds.
        Weight::from_parts(2_926_000, 3506)
            // Standard Error: 1_056
            .saturating_add(Weight::from_parts(670_577, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 52_388_000 picoseconds.
        Weight::from_parts(74_229_765, 0)
            // Standard Error: 7_680
            .saturating_add(Weight::from_parts(2_427_178, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `42236`
        // Minimum execution time: 83_751_000 picoseconds.
        Weight::from_parts(85_540_000, 42236)
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `886`
        //  Estimated: `21261`
        // Minimum execution time: 53_792_000 picoseconds.
        Weight::from_parts(55_210_000, 21261)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `534`
        //  Estimated: `17070`
        // Minimum execution time: 29_277_000 picoseconds.
        Weight::from_parts(30_570_000, 17070)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_365_000 picoseconds.
        Weight::from_parts(8_305_380, 7640)
            // Standard Error: 43_605
            .saturating_add(Weight::from_parts(16_354_224, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1364 + c * (16389 ±0)`
        //  Estimated: `41434 + c * (131112 ±0)`
        // Minimum execution time: 70_339_000 picoseconds.
        Weight::from_parts(71_233_000, 41434)
            // Standard Error: 169_422
            .saturating_add(Weight::from_parts(55_572_368, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 64_030_000 picoseconds.
        Weight::from_parts(49_650_288, 4990)
            // Standard Error: 40_921
            .saturating_add(Weight::from_parts(53_077_064, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `738`
        //  Estimated: `39375`
        // Minimum execution time: 64_745_000 picoseconds.
        Weight::from_parts(96_452_812, 39375)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_572, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `235`
        //  Estimated: `34312`
        // Minimum execution time: 10_914_264_000 picoseconds.
        Weight::from_parts(278_764_650, 34312)
            // Standard Error: 156_493
            .saturating_add(Weight::from_parts(53_766_782, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_517, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `348`
        //  Estimated: `23853`
        // Minimum execution time: 55_487_000 picoseconds.
        Weight::from_parts(31_180_048, 23853)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_177, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `451`
        //  Estimated: `27177`
        // Minimum execution time: 59_745_000 picoseconds.
        Weight::from_parts(32_264_542, 27177)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_185, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `978`
        //  Estimated: `42227`
        // Minimum execution time: 83_935_000 picoseconds.
        Weight::from_parts(67_556_120, 42227)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_190, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1081`
        //  Estimated: `45757`
        // Minimum execution time: 95_523_000 picoseconds.
        Weight::from_parts(67_846_891, 45757)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_213, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 306_381_000 picoseconds.
        Weight::from_parts(319_153_310, 74319)
            // Standard Error: 1_387
            .saturating_add(Weight::from_parts(6_138, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(27_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 319_572_000 picoseconds.
        Weight::from_parts(332_017_272, 74319)
            // Standard Error: 1_262
            .saturating_add(Weight::from_parts(2_004, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(27_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 47_252_000 picoseconds.
        Weight::from_parts(47_900_000, 3899)
            // Standard Error: 26_716
            .saturating_add(Weight::from_parts(51_791_764, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_222_000 picoseconds.
        Weight::from_parts(87_003_000, 0)
            // Standard Error: 4_412_345
            .saturating_add(Weight::from_parts(709_555_221, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 418_248_000 picoseconds.
        Weight::from_parts(357_180_796, 0)
            // Standard Error: 10_036
            .saturating_add(Weight::from_parts(34_125_905, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 252_299_000 picoseconds.
        Weight::from_parts(290_811_825, 0)
            // Standard Error: 441_558
            .saturating_add(Weight::from_parts(168_655_080, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_637_000 picoseconds.
        Weight::from_parts(93_539_683, 0)
            // Standard Error: 5_764
            .saturating_add(Weight::from_parts(4_269_453, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 137_667_000 picoseconds.
        Weight::from_parts(153_461_952, 0)
            // Standard Error: 28_015
            .saturating_add(Weight::from_parts(4_740_934, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_605_000 picoseconds.
        Weight::from_parts(115_078_201, 0)
            // Standard Error: 420_788
            .saturating_add(Weight::from_parts(235_062_438, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_883_000 picoseconds.
        Weight::from_parts(84_013_989, 0)
            // Standard Error: 315_983
            .saturating_add(Weight::from_parts(233_618_600, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_674_000 picoseconds.
        Weight::from_parts(84_138_097, 0)
            // Standard Error: 394_031
            .saturating_add(Weight::from_parts(234_112_935, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_037_000 picoseconds.
        Weight::from_parts(80_043_119, 0)
            // Standard Error: 363_071
            .saturating_add(Weight::from_parts(234_440_419, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_970_000 picoseconds.
        Weight::from_parts(79_191_736, 0)
            // Standard Error: 388_386
            .saturating_add(Weight::from_parts(234_797_123, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_955_000 picoseconds.
        Weight::from_parts(76_258_811, 0)
            // Standard Error: 378_019
            .saturating_add(Weight::from_parts(235_845_928, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_420_000 picoseconds.
        Weight::from_parts(80_595_371, 0)
            // Standard Error: 321_668
            .saturating_add(Weight::from_parts(234_918_409, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_641_000 picoseconds.
        Weight::from_parts(79_056_207, 0)
            // Standard Error: 372_009
            .saturating_add(Weight::from_parts(236_443_753, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 712_026_000 picoseconds.
        Weight::from_parts(757_785_668, 0)
            // Standard Error: 464_262
            .saturating_add(Weight::from_parts(317_512_842, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 977_690_000 picoseconds.
        Weight::from_parts(991_462_000, 0)
            // Standard Error: 58_744
            .saturating_add(Weight::from_parts(13_316_633, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_258_000 picoseconds.
        Weight::from_parts(75_200_329, 0)
            // Standard Error: 367_397
            .saturating_add(Weight::from_parts(234_793_089, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_774_000 picoseconds.
        Weight::from_parts(86_726_743, 0)
            // Standard Error: 344_677
            .saturating_add(Weight::from_parts(232_758_004, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_660_000 picoseconds.
        Weight::from_parts(107_246_381, 0)
            // Standard Error: 450_595
            .saturating_add(Weight::from_parts(299_226_823, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_608_000 picoseconds.
        Weight::from_parts(88_218_000, 0)
            // Standard Error: 3_603_226
            .saturating_add(Weight::from_parts(1_138_570_591, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_028_000 picoseconds.
        Weight::from_parts(148_854_569, 0)
            // Standard Error: 521_593
            .saturating_add(Weight::from_parts(444_403_185, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 526_298_000 picoseconds.
        Weight::from_parts(529_334_000, 0)
            // Standard Error: 64_334
            .saturating_add(Weight::from_parts(21_542_119, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_355_000 picoseconds.
        Weight::from_parts(150_399_219, 0)
            // Standard Error: 494_235
            .saturating_add(Weight::from_parts(448_618_346, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 527_623_000 picoseconds.
        Weight::from_parts(531_388_000, 0)
            // Standard Error: 68_048
            .saturating_add(Weight::from_parts(21_511_303, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 714_514_000 picoseconds.
        Weight::from_parts(770_347_767, 0)
            // Standard Error: 491_305
            .saturating_add(Weight::from_parts(460_521_622, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 727_797_000 picoseconds.
        Weight::from_parts(796_951_141, 0)
            // Standard Error: 511_348
            .saturating_add(Weight::from_parts(465_952_417, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_511_000 picoseconds.
        Weight::from_parts(70_108_276, 0)
            // Standard Error: 369_170
            .saturating_add(Weight::from_parts(244_926_400, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_793_504_000 picoseconds.
        Weight::from_parts(4_938_314_567, 0)
            // Standard Error: 404_342
            .saturating_add(Weight::from_parts(338_431_048, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 591_844_000 picoseconds.
        Weight::from_parts(598_128_000, 0)
            // Standard Error: 54_800
            .saturating_add(Weight::from_parts(31_272_502, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_793_559_000 picoseconds.
        Weight::from_parts(4_953_984_624, 0)
            // Standard Error: 454_672
            .saturating_add(Weight::from_parts(391_509_821, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_774_023_000 picoseconds.
        Weight::from_parts(4_926_440_375, 0)
            // Standard Error: 406_352
            .saturating_add(Weight::from_parts(410_066_296, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 252_283_000 picoseconds.
        Weight::from_parts(317_036_023, 0)
            // Standard Error: 491_835
            .saturating_add(Weight::from_parts(459_054_688, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 690_374_000 picoseconds.
        Weight::from_parts(696_614_000, 0)
            // Standard Error: 57_727
            .saturating_add(Weight::from_parts(21_193_900, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_942_359_000 picoseconds.
        Weight::from_parts(5_078_327_071, 0)
            // Standard Error: 452_216
            .saturating_add(Weight::from_parts(410_586_501, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_677_000 picoseconds.
        Weight::from_parts(88_427_695, 0)
            // Standard Error: 289_964
            .saturating_add(Weight::from_parts(20_836_104, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_884_000 picoseconds.
        Weight::from_parts(94_128_638, 0)
            // Standard Error: 1_150
            .saturating_add(Weight::from_parts(427_959, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_126_000 picoseconds.
        Weight::from_parts(91_658_518, 0)
            // Standard Error: 269_208
            .saturating_add(Weight::from_parts(19_110_181, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_968_000 picoseconds.
        Weight::from_parts(96_214_665, 0)
            // Standard Error: 1_051
            .saturating_add(Weight::from_parts(424_356, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_080_000 picoseconds.
        Weight::from_parts(88_919_016, 0)
            // Standard Error: 290_610
            .saturating_add(Weight::from_parts(20_031_683, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_877_000 picoseconds.
        Weight::from_parts(89_997_934, 0)
            // Standard Error: 353_369
            .saturating_add(Weight::from_parts(21_258_265, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_914_000 picoseconds.
        Weight::from_parts(128_101_726, 0)
            // Standard Error: 456_540
            .saturating_add(Weight::from_parts(327_004_586, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_098_000 picoseconds.
        Weight::from_parts(107_176_000, 0)
            // Standard Error: 2_365
            .saturating_add(Weight::from_parts(643_572, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 706_872_000 picoseconds.
        Weight::from_parts(729_697_981, 0)
            // Standard Error: 1_976_351
            .saturating_add(Weight::from_parts(36_344_818, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 706_823_000 picoseconds.
        Weight::from_parts(739_731_189, 0)
            // Standard Error: 3_069_948
            .saturating_add(Weight::from_parts(1_778_910, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_313_000 picoseconds.
        Weight::from_parts(101_011_510, 0)
            // Standard Error: 309_893
            .saturating_add(Weight::from_parts(12_424_889, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_082_000 picoseconds.
        Weight::from_parts(94_741_351, 0)
            // Standard Error: 1_210
            .saturating_add(Weight::from_parts(428_098, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_144_000 picoseconds.
        Weight::from_parts(100_819_965, 0)
            // Standard Error: 312_160
            .saturating_add(Weight::from_parts(12_498_034, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_817_000 picoseconds.
        Weight::from_parts(98_997_460, 0)
            // Standard Error: 911
            .saturating_add(Weight::from_parts(418_183, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_937_000 picoseconds.
        Weight::from_parts(79_415_972, 0)
            // Standard Error: 348_880
            .saturating_add(Weight::from_parts(235_937_217, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_627_000 picoseconds.
        Weight::from_parts(83_675_859, 0)
            // Standard Error: 339_403
            .saturating_add(Weight::from_parts(235_762_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 716_756_000 picoseconds.
        Weight::from_parts(761_461_420, 0)
            // Standard Error: 454_456
            .saturating_add(Weight::from_parts(248_489_654, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 732_309_000 picoseconds.
        Weight::from_parts(759_387_651, 0)
            // Standard Error: 1_129
            .saturating_add(Weight::from_parts(146_886, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_427_965_000 picoseconds.
        Weight::from_parts(5_584_572_405, 0)
            // Standard Error: 509_610
            .saturating_add(Weight::from_parts(266_723_710, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_746_904_000 picoseconds.
        Weight::from_parts(5_825_570_819, 0)
            // Standard Error: 10_085
            .saturating_add(Weight::from_parts(13_639_502, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_800_000 picoseconds.
        Weight::from_parts(107_792_324, 0)
            // Standard Error: 431_628
            .saturating_add(Weight::from_parts(246_303_550, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 235_563_000 picoseconds.
        Weight::from_parts(238_625_000, 0)
            // Standard Error: 50_499
            .saturating_add(Weight::from_parts(25_511_187, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_947_000 picoseconds.
        Weight::from_parts(89_682_740, 0)
            // Standard Error: 348_317
            .saturating_add(Weight::from_parts(234_018_615, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_100_000 picoseconds.
        Weight::from_parts(87_707_777, 0)
            // Standard Error: 258_445
            .saturating_add(Weight::from_parts(29_983_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_620_000 picoseconds.
        Weight::from_parts(88_230_306, 0)
            // Standard Error: 272_978
            .saturating_add(Weight::from_parts(17_120_893, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_978_000 picoseconds.
        Weight::from_parts(91_119_451, 0)
            // Standard Error: 269_369
            .saturating_add(Weight::from_parts(15_184_548, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_688_000 picoseconds.
        Weight::from_parts(90_189_414, 0)
            // Standard Error: 273_180
            .saturating_add(Weight::from_parts(15_680_285, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_875_000 picoseconds.
        Weight::from_parts(88_169_159, 0)
            // Standard Error: 275_439
            .saturating_add(Weight::from_parts(14_520_840, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 137_675_000 picoseconds.
        Weight::from_parts(223_939_434, 0)
            // Standard Error: 432_414
            .saturating_add(Weight::from_parts(337_824_841, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_934_000 picoseconds.
        Weight::from_parts(156_494_816, 0)
            // Standard Error: 447_955
            .saturating_add(Weight::from_parts(528_564_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 46_437_864_000 picoseconds.
        Weight::from_parts(46_530_376_000, 0)
            // Standard Error: 266_354
            .saturating_add(Weight::from_parts(7_234_250, 0).saturating_mul(p.into()))
            // Standard Error: 266_341
            .saturating_add(Weight::from_parts(176_106_088, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_476_000 picoseconds.
        Weight::from_parts(153_424_122, 0)
            // Standard Error: 465_906
            .saturating_add(Weight::from_parts(532_257_834, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 46_304_524_000 picoseconds.
        Weight::from_parts(46_363_097_000, 0)
            // Standard Error: 282_696
            .saturating_add(Weight::from_parts(6_905_555, 0).saturating_mul(p.into()))
            // Standard Error: 282_682
            .saturating_add(Weight::from_parts(176_467_418, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_152_000 picoseconds.
        Weight::from_parts(103_953_387, 0)
            // Standard Error: 31_619
            .saturating_add(Weight::from_parts(4_051_743, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 85_577_000 picoseconds.
        Weight::from_parts(130_463_800, 1131)
            // Standard Error: 8_489
            .saturating_add(Weight::from_parts(12_233_025, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 85_637_000 picoseconds.
        Weight::from_parts(87_209_000, 1131)
            // Standard Error: 34_392
            .saturating_add(Weight::from_parts(35_611_270, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_359_334_000 picoseconds.
        Weight::from_parts(6_121_083_942, 5069931)
            // Standard Error: 63_810
            .saturating_add(Weight::from_parts(36_566_054, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 85_837_000 picoseconds.
        Weight::from_parts(86_734_000, 1939)
            // Standard Error: 52_031
            .saturating_add(Weight::from_parts(47_935_831, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 91_093_000 picoseconds.
        Weight::from_parts(89_453_904, 1131)
            // Standard Error: 67_270
            .saturating_add(Weight::from_parts(36_623_289, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 742_900_000 picoseconds.
        Weight::from_parts(797_212_869, 1496)
            // Standard Error: 203_408
            .saturating_add(Weight::from_parts(39_864_931, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_154_233_000 picoseconds.
        Weight::from_parts(1_168_913_585, 317931)
            // Standard Error: 156_513
            .saturating_add(Weight::from_parts(40_911_219, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_637_000 picoseconds.
        Weight::from_parts(1_579_535, 0)
            // Standard Error: 10_282
            .saturating_add(Weight::from_parts(23_979_117, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_337_100_000 picoseconds.
        Weight::from_parts(4_301_699_118, 0)
            // Standard Error: 35_988
            .saturating_add(Weight::from_parts(3_646_485, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_335_883_000 picoseconds.
        Weight::from_parts(4_309_192_543, 0)
            // Standard Error: 54_788
            .saturating_add(Weight::from_parts(3_782_929, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_564_573_000 picoseconds.
        Weight::from_parts(11_470_489_007, 0)
            // Standard Error: 145_973
            .saturating_add(Weight::from_parts(9_000_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_413_294_000 picoseconds.
        Weight::from_parts(10_646_734_527, 0)
            // Standard Error: 186_523
            .saturating_add(Weight::from_parts(10_318_180, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_213_000 picoseconds.
        Weight::from_parts(2_271_000, 0)
            // Standard Error: 8_412
            .saturating_add(Weight::from_parts(3_826_675, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_177_000 picoseconds.
        Weight::from_parts(2_258_000, 0)
            // Standard Error: 6_151
            .saturating_add(Weight::from_parts(3_061_817, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_229_000 picoseconds.
        Weight::from_parts(3_426_438, 0)
            // Standard Error: 1_152
            .saturating_add(Weight::from_parts(1_567_482, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_213_000 picoseconds.
        Weight::from_parts(2_263_000, 0)
            // Standard Error: 9_581
            .saturating_add(Weight::from_parts(2_965_066, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_163_000 picoseconds.
        Weight::from_parts(2_792_586, 0)
            // Standard Error: 14_585
            .saturating_add(Weight::from_parts(5_083_752, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_660_000 picoseconds.
        Weight::from_parts(6_432_123, 0)
            // Standard Error: 1_897
            .saturating_add(Weight::from_parts(133_494, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_190_000 picoseconds.
        Weight::from_parts(4_331_035, 0)
            // Standard Error: 6_255
            .saturating_add(Weight::from_parts(2_559_212, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_559_212 -
            2_413_142, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_192_000 picoseconds.
        Weight::from_parts(3_893_976, 0)
            // Standard Error: 12_129
            .saturating_add(Weight::from_parts(2_413_142, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_543_000 picoseconds.
        Weight::from_parts(7_683_499, 0)
            // Standard Error: 22_341
            .saturating_add(Weight::from_parts(10_324_116, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_819_000 picoseconds.
        Weight::from_parts(12_406_000, 0)
            // Standard Error: 6_552
            .saturating_add(Weight::from_parts(1_132_455, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_266_000 picoseconds.
        Weight::from_parts(5_637_030, 0)
            // Standard Error: 14
            .saturating_add(Weight::from_parts(61, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_271_000 picoseconds.
        Weight::from_parts(1_703_004, 0)
            // Standard Error: 3_377
            .saturating_add(Weight::from_parts(252_219, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_157_000 picoseconds.
        Weight::from_parts(2_248_000, 0)
            // Standard Error: 5_108
            .saturating_add(Weight::from_parts(763_832, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_249_000 picoseconds.
        Weight::from_parts(2_302_000, 0)
            // Standard Error: 5_040
            .saturating_add(Weight::from_parts(747_294, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_251_000 picoseconds.
        Weight::from_parts(1_658_576, 0)
            // Standard Error: 9_292
            .saturating_add(Weight::from_parts(832_114, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_366_000 picoseconds.
        Weight::from_parts(6_431_000, 0)
            // Standard Error: 10_465
            .saturating_add(Weight::from_parts(1_323_456, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_241_000 picoseconds.
        Weight::from_parts(1_511_304, 0)
            // Standard Error: 11_616
            .saturating_add(Weight::from_parts(7_105_356, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_186_000 picoseconds.
        Weight::from_parts(2_232_000, 0)
            // Standard Error: 5_638
            .saturating_add(Weight::from_parts(3_240_080, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_179_000 picoseconds.
        Weight::from_parts(2_238_000, 0)
            // Standard Error: 6_253
            .saturating_add(Weight::from_parts(3_051_377, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_193_000 picoseconds.
        Weight::from_parts(2_279_000, 0)
            // Standard Error: 6_246
            .saturating_add(Weight::from_parts(3_014_119, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_212_000 picoseconds.
        Weight::from_parts(2_278_000, 0)
            // Standard Error: 4_860
            .saturating_add(Weight::from_parts(2_602_767, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_162_000 picoseconds.
        Weight::from_parts(2_237_000, 0)
            // Standard Error: 3_577
            .saturating_add(Weight::from_parts(551_139, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_179_000 picoseconds.
        Weight::from_parts(1_480_989, 0)
            // Standard Error: 3_344
            .saturating_add(Weight::from_parts(381_312, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_190_000 picoseconds.
        Weight::from_parts(2_251_000, 0)
            // Standard Error: 11_018
            .saturating_add(Weight::from_parts(1_807_489, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_219_000 picoseconds.
        Weight::from_parts(2_306_000, 0)
            // Standard Error: 7_919
            .saturating_add(Weight::from_parts(1_121_167, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_223_000 picoseconds.
        Weight::from_parts(1_457_189, 0)
            // Standard Error: 3_846
            .saturating_add(Weight::from_parts(363_435, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_222_000 picoseconds.
        Weight::from_parts(1_738_887, 0)
            // Standard Error: 3_502
            .saturating_add(Weight::from_parts(345_478, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_250_000 picoseconds.
        Weight::from_parts(2_288_000, 0)
            // Standard Error: 3_606
            .saturating_add(Weight::from_parts(488_901, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_163_000 picoseconds.
        Weight::from_parts(2_279_000, 0)
            // Standard Error: 3_193
            .saturating_add(Weight::from_parts(508_952, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_102_000 picoseconds.
        Weight::from_parts(458_524, 0)
            // Standard Error: 4_582
            .saturating_add(Weight::from_parts(485_788, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_235_000 picoseconds.
        Weight::from_parts(1_405_338, 0)
            // Standard Error: 3_418
            .saturating_add(Weight::from_parts(336_701, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_230_000 picoseconds.
        Weight::from_parts(2_703_008, 0)
            // Standard Error: 2_198
            .saturating_add(Weight::from_parts(159_072, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_176_000 picoseconds.
        Weight::from_parts(2_814_821, 0)
            // Standard Error: 1_823
            .saturating_add(Weight::from_parts(151_994, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_216_000 picoseconds.
        Weight::from_parts(2_290_000, 0)
            // Standard Error: 10_432
            .saturating_add(Weight::from_parts(1_731_609, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_214_000 picoseconds.
        Weight::from_parts(2_250_000, 0)
            // Standard Error: 6_705
            .saturating_add(Weight::from_parts(1_081_519, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_202_000 picoseconds.
        Weight::from_parts(2_237_000, 0)
            // Standard Error: 9_924
            .saturating_add(Weight::from_parts(1_713_791, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_170_000 picoseconds.
        Weight::from_parts(2_207_000, 0)
            // Standard Error: 7_700
            .saturating_add(Weight::from_parts(1_115_377, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_175_000 picoseconds.
        Weight::from_parts(2_283_000, 0)
            // Standard Error: 9_760
            .saturating_add(Weight::from_parts(1_721_139, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_143_000 picoseconds.
        Weight::from_parts(2_264_000, 0)
            // Standard Error: 8_446
            .saturating_add(Weight::from_parts(1_220_324, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_294_000 picoseconds.
        Weight::from_parts(2_361_000, 0)
            // Standard Error: 8_442
            .saturating_add(Weight::from_parts(1_872_827, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_197_000 picoseconds.
        Weight::from_parts(2_253_000, 0)
            // Standard Error: 7_989
            .saturating_add(Weight::from_parts(1_245_468, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_178_000 picoseconds.
        Weight::from_parts(2_242_000, 0)
            // Standard Error: 9_083
            .saturating_add(Weight::from_parts(1_890_871, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_165_000 picoseconds.
        Weight::from_parts(2_269_000, 0)
            // Standard Error: 6_819
            .saturating_add(Weight::from_parts(1_201_641, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_176_000 picoseconds.
        Weight::from_parts(2_236_000, 0)
            // Standard Error: 9_879
            .saturating_add(Weight::from_parts(1_860_276, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_144_000 picoseconds.
        Weight::from_parts(2_226_000, 0)
            // Standard Error: 7_454
            .saturating_add(Weight::from_parts(1_149_019, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_162_000 picoseconds.
        Weight::from_parts(2_259_000, 0)
            // Standard Error: 9_793
            .saturating_add(Weight::from_parts(1_816_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_202_000 picoseconds.
        Weight::from_parts(2_280_000, 0)
            // Standard Error: 7_439
            .saturating_add(Weight::from_parts(1_151_067, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_176_000 picoseconds.
        Weight::from_parts(2_278_000, 0)
            // Standard Error: 10_695
            .saturating_add(Weight::from_parts(1_814_768, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_571_000 picoseconds.
        Weight::from_parts(2_646_000, 0)
            // Standard Error: 7_097
            .saturating_add(Weight::from_parts(1_043_279, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_083_000 picoseconds.
        Weight::from_parts(2_227_000, 0)
            // Standard Error: 12_723
            .saturating_add(Weight::from_parts(1_829_503, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_167_000 picoseconds.
        Weight::from_parts(2_206_000, 0)
            // Standard Error: 6_578
            .saturating_add(Weight::from_parts(1_119_805, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_158_000 picoseconds.
        Weight::from_parts(2_223_000, 0)
            // Standard Error: 12_281
            .saturating_add(Weight::from_parts(1_810_231, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_198_000 picoseconds.
        Weight::from_parts(2_307_000, 0)
            // Standard Error: 7_105
            .saturating_add(Weight::from_parts(1_121_865, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_112_000 picoseconds.
        Weight::from_parts(2_192_000, 0)
            // Standard Error: 7_396
            .saturating_add(Weight::from_parts(1_189_208, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_187_000 picoseconds.
        Weight::from_parts(2_282_000, 0)
            // Standard Error: 3_728
            .saturating_add(Weight::from_parts(574_689, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_178_000 picoseconds.
        Weight::from_parts(2_261_000, 0)
            // Standard Error: 7_710
            .saturating_add(Weight::from_parts(1_197_933, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_277_000 picoseconds.
        Weight::from_parts(2_337_000, 0)
            // Standard Error: 4_189
            .saturating_add(Weight::from_parts(583_754, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_083_000 picoseconds.
        Weight::from_parts(2_206_000, 0)
            // Standard Error: 12_478
            .saturating_add(Weight::from_parts(1_753_748, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_292_000 picoseconds.
        Weight::from_parts(2_326_000, 0)
            // Standard Error: 6_909
            .saturating_add(Weight::from_parts(1_132_352, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_188_000 picoseconds.
        Weight::from_parts(522_728, 0)
            // Standard Error: 19_552
            .saturating_add(Weight::from_parts(2_704_339, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_153_000 picoseconds.
        Weight::from_parts(1_526_164, 0)
            // Standard Error: 10_257
            .saturating_add(Weight::from_parts(2_359_880, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_094_000 picoseconds.
        Weight::from_parts(2_144_000, 0)
            // Standard Error: 5_377
            .saturating_add(Weight::from_parts(2_945_867, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_169_000 picoseconds.
        Weight::from_parts(2_211_000, 0)
            // Standard Error: 5_247
            .saturating_add(Weight::from_parts(2_431_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_256_000 picoseconds.
        Weight::from_parts(2_322_000, 0)
            // Standard Error: 16_019
            .saturating_add(Weight::from_parts(9_677_056, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_236_000 picoseconds.
        Weight::from_parts(2_063_031, 0)
            // Standard Error: 44_174
            .saturating_add(Weight::from_parts(7_541_106, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_127_000 picoseconds.
        Weight::from_parts(5_205_597, 0)
            // Standard Error: 24_468
            .saturating_add(Weight::from_parts(2_768_332, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_179_000 picoseconds.
        Weight::from_parts(2_216_000, 0)
            // Standard Error: 6_057
            .saturating_add(Weight::from_parts(2_466_947, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_260_000 picoseconds.
        Weight::from_parts(2_298_000, 0)
            // Standard Error: 6_931
            .saturating_add(Weight::from_parts(1_211_851, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_211_000 picoseconds.
        Weight::from_parts(2_267_000, 0)
            // Standard Error: 5_345
            .saturating_add(Weight::from_parts(611_062, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_158_000 picoseconds.
        Weight::from_parts(2_268_000, 0)
            // Standard Error: 9_629
            .saturating_add(Weight::from_parts(1_243_254, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_342_000 picoseconds.
        Weight::from_parts(2_377_000, 0)
            // Standard Error: 4_075
            .saturating_add(Weight::from_parts(564_916, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_174_000 picoseconds.
        Weight::from_parts(2_250_000, 0)
            // Standard Error: 7_454
            .saturating_add(Weight::from_parts(1_212_472, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_174_000 picoseconds.
        Weight::from_parts(2_238_000, 0)
            // Standard Error: 3_674
            .saturating_add(Weight::from_parts(587_206, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_178_000 picoseconds.
        Weight::from_parts(2_219_000, 0)
            // Standard Error: 6_543
            .saturating_add(Weight::from_parts(993_044, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_151_000 picoseconds.
        Weight::from_parts(2_225_000, 0)
            // Standard Error: 3_274
            .saturating_add(Weight::from_parts(509_569, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_151_000 picoseconds.
        Weight::from_parts(2_197_000, 0)
            // Standard Error: 6_768
            .saturating_add(Weight::from_parts(979_181, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_213_000 picoseconds.
        Weight::from_parts(26_961, 0)
            // Standard Error: 6_012
            .saturating_add(Weight::from_parts(578_422, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_173_000 picoseconds.
        Weight::from_parts(2_320_000, 0)
            // Standard Error: 7_198
            .saturating_add(Weight::from_parts(985_992, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_213_000 picoseconds.
        Weight::from_parts(2_279_000, 0)
            // Standard Error: 3_582
            .saturating_add(Weight::from_parts(504_208, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_180_000 picoseconds.
        Weight::from_parts(2_242_000, 0)
            // Standard Error: 8_356
            .saturating_add(Weight::from_parts(1_025_849, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_305_000 picoseconds.
        Weight::from_parts(272_670, 0)
            // Standard Error: 6_376
            .saturating_add(Weight::from_parts(599_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_184_000 picoseconds.
        Weight::from_parts(2_288_000, 0)
            // Standard Error: 6_937
            .saturating_add(Weight::from_parts(1_018_594, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_161_000 picoseconds.
        Weight::from_parts(2_202_000, 0)
            // Standard Error: 4_010
            .saturating_add(Weight::from_parts(573_907, 0).saturating_mul(r.into()))
    }
}
