// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-07-27, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/gear-node benchmark pallet --chain=dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./pallets/gear/src/weights.rs --template=./.maintain/gear-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
	fn allocation_cost() -> Weight;
	fn grow_cost() -> Weight;
	fn initial_cost() -> Weight;
	fn load_cost() -> Weight;
	fn claim_value() -> Weight;
	fn upload_code(c: u32, ) -> Weight;
	fn create_program(s: u32, ) -> Weight;
	fn upload_program(c: u32, s: u32, ) -> Weight;
	fn send_message(p: u32, ) -> Weight;
	fn send_reply(p: u32, ) -> Weight;
	fn initial_allocation(q: u32, ) -> Weight;
	fn alloc_in_handle(q: u32, ) -> Weight;
	fn reinstrument(c: u32, ) -> Weight;
	fn alloc(r: u32, ) -> Weight;
	fn gas(r: u32, ) -> Weight;
	fn gr_gas_available(r: u32, ) -> Weight;
	fn gr_msg_id(r: u32, ) -> Weight;
	fn gr_origin(r: u32, ) -> Weight;
	fn gr_program_id(r: u32, ) -> Weight;
	fn gr_source(r: u32, ) -> Weight;
	fn gr_value(r: u32, ) -> Weight;
	fn gr_value_available(r: u32, ) -> Weight;
	fn gr_size(r: u32, ) -> Weight;
	fn gr_read(r: u32, ) -> Weight;
	fn gr_read_per_kb(n: u32, ) -> Weight;
	fn gr_block_height(r: u32, ) -> Weight;
	fn gr_block_timestamp(r: u32, ) -> Weight;
	fn gr_send_init(r: u32, ) -> Weight;
	fn gr_send_push(r: u32, ) -> Weight;
	fn gr_send_push_per_kb(n: u32, ) -> Weight;
	fn gr_send_commit(r: u32, ) -> Weight;
	fn gr_send_commit_per_kb(n: u32, ) -> Weight;
	fn gr_reply_commit(r: u32, ) -> Weight;
	fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
	fn gr_reply_push(r: u32, ) -> Weight;
	fn gr_reply_push_per_kb(n: u32, ) -> Weight;
	fn gr_reply_to(r: u32, ) -> Weight;
	fn gr_debug(r: u32, ) -> Weight;
	fn gr_exit_code(r: u32, ) -> Weight;
	fn gr_exit(r: u32, ) -> Weight;
	fn gr_leave(r: u32, ) -> Weight;
	fn gr_wait(r: u32, ) -> Weight;
	fn gr_wake(r: u32, ) -> Weight;
	fn gr_create_program_wgas(r: u32, ) -> Weight;
	fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct GearWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for GearWeight<T> {
	fn allocation_cost() -> Weight {
		// To be changed with the proper value.
		T::DbWeight::get().writes(1 as Weight)
	}
	fn grow_cost() -> Weight {
		// To be changed with the proper value.
		T::DbWeight::get().writes(1 as Weight)
	}
	fn initial_cost() -> Weight {
		T::DbWeight::get().writes(1 as Weight)
	}
	fn load_cost() -> Weight {
		T::DbWeight::get().reads(1 as Weight)
	}
	fn claim_value() -> Weight {
		(173_550_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn upload_code(c: u32, ) -> Weight {
		(79_281_000 as Weight)
			// Standard Error: 0
			.saturating_add((63_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn create_program(s: u32, ) -> Weight {
		(75_038_000 as Weight)
			// Standard Error: 0
			.saturating_add((3_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn upload_program(c: u32, s: u32, ) -> Weight {
		(365_807_000 as Weight)
			// Standard Error: 0
			.saturating_add((61_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((3_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn send_message(p: u32, ) -> Weight {
		(121_013_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn send_reply(p: u32, ) -> Weight {
		(194_504_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn initial_allocation(_q: u32, ) -> Weight {
		(355_808_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(28 as Weight))
			.saturating_add(T::DbWeight::get().writes(26 as Weight))
	}
	fn alloc_in_handle(q: u32, ) -> Weight {
		(536_115_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((36_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(26 as Weight))
			.saturating_add(T::DbWeight::get().writes(24 as Weight))
	}
	fn reinstrument(c: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 0
			.saturating_add((65_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn alloc(r: u32, ) -> Weight {
		(159_566_000 as Weight)
			// Standard Error: 312_000
			.saturating_add((363_321_000 as Weight).saturating_mul(r as Weight))
	}
	fn gas(r: u32, ) -> Weight {
		(155_470_000 as Weight)
			// Standard Error: 117_000
			.saturating_add((101_710_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_gas_available(r: u32, ) -> Weight {
		(158_032_000 as Weight)
			// Standard Error: 109_000
			.saturating_add((101_240_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_msg_id(r: u32, ) -> Weight {
		(197_083_000 as Weight)
			// Standard Error: 301_000
			.saturating_add((125_396_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_origin(r: u32, ) -> Weight {
		(178_845_000 as Weight)
			// Standard Error: 2_242_000
			.saturating_add((132_704_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_program_id(r: u32, ) -> Weight {
		(205_288_000 as Weight)
			// Standard Error: 198_000
			.saturating_add((123_254_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_source(r: u32, ) -> Weight {
		(203_880_000 as Weight)
			// Standard Error: 199_000
			.saturating_add((123_861_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_value(r: u32, ) -> Weight {
		(212_915_000 as Weight)
			// Standard Error: 304_000
			.saturating_add((127_905_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_value_available(r: u32, ) -> Weight {
		(204_720_000 as Weight)
			// Standard Error: 184_000
			.saturating_add((123_582_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_size(r: u32, ) -> Weight {
		(117_034_000 as Weight)
			// Standard Error: 1_647_000
			.saturating_add((91_089_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_read(r: u32, ) -> Weight {
		(181_458_000 as Weight)
			// Standard Error: 124_000
			.saturating_add((122_195_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_read_per_kb(n: u32, ) -> Weight {
		(307_112_000 as Weight)
			// Standard Error: 126_000
			.saturating_add((32_777_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_block_height(r: u32, ) -> Weight {
		(159_888_000 as Weight)
			// Standard Error: 109_000
			.saturating_add((85_699_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_block_timestamp(r: u32, ) -> Weight {
		(156_910_000 as Weight)
			// Standard Error: 95_000
			.saturating_add((101_156_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_send_init(r: u32, ) -> Weight {
		(195_480_000 as Weight)
			// Standard Error: 213_000
			.saturating_add((148_966_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_send_push(r: u32, ) -> Weight {
		(208_335_000 as Weight)
			// Standard Error: 256_000
			.saturating_add((300_021_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_send_push_per_kb(n: u32, ) -> Weight {
		(520_314_000 as Weight)
			// Standard Error: 164_000
			.saturating_add((60_099_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_send_commit(r: u32, ) -> Weight {
		(213_799_000 as Weight)
			// Standard Error: 145_000
			.saturating_add((74_630_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_send_commit_per_kb(n: u32, ) -> Weight {
		(220_704_000 as Weight)
			// Standard Error: 33_000
			.saturating_add((3_869_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_reply_commit(r: u32, ) -> Weight {
		(219_239_000 as Weight)
			// Standard Error: 212_000
			.saturating_add((158_036_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
		(398_282_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((147_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
	}
	fn gr_reply_push(r: u32, ) -> Weight {
		(184_195_000 as Weight)
			// Standard Error: 94_000
			.saturating_add((133_810_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_reply_push_per_kb(n: u32, ) -> Weight {
		(339_846_000 as Weight)
			// Standard Error: 52_000
			.saturating_add((63_181_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_reply_to(r: u32, ) -> Weight {
		(151_361_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((4_578_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_debug(r: u32, ) -> Weight {
		(160_487_000 as Weight)
			// Standard Error: 143_000
			.saturating_add((125_875_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_exit_code(r: u32, ) -> Weight {
		(158_655_000 as Weight)
			// Standard Error: 169_000
			.saturating_add((4_167_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_exit(r: u32, ) -> Weight {
		(172_363_000 as Weight)
			// Standard Error: 350_000
			.saturating_add((62_731_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_leave(r: u32, ) -> Weight {
		(149_149_000 as Weight)
			// Standard Error: 440_000
			.saturating_add((28_134_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_wait(r: u32, ) -> Weight {
		(148_603_000 as Weight)
			// Standard Error: 423_000
			.saturating_add((29_190_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_wake(r: u32, ) -> Weight {
		(216_861_000 as Weight)
			// Standard Error: 323_000
			.saturating_add((179_104_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_create_program_wgas(r: u32, ) -> Weight {
		(174_654_000 as Weight)
			// Standard Error: 418_000
			.saturating_add((73_615_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
		(255_293_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((3_908_000 as Weight).saturating_mul(n as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(8_309_000 as Weight)
			// Standard Error: 0
			.saturating_add((4_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(45_379_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((372_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(64_665_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((587_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(8_179_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((666_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(8_376_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((670_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(8_338_000 as Weight)
			// Standard Error: 0
			.saturating_add((398_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(9_215_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((526_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(9_187_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_610_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(10_100_000 as Weight)
			// Standard Error: 0
			.saturating_add((19_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(8_896_000 as Weight)
			// Standard Error: 0
			.saturating_add((598_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(13_216_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_758_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(11_100_000 as Weight)
			// Standard Error: 0
			.saturating_add((165_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(8_539_000 as Weight)
			// Standard Error: 0
			.saturating_add((66_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(8_709_000 as Weight)
			// Standard Error: 0
			.saturating_add((133_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(8_558_000 as Weight)
			// Standard Error: 0
			.saturating_add((139_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(23_092_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((193_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(24_982_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((268_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(13_330_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_840_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(8_746_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((623_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(8_570_000 as Weight)
			// Standard Error: 0
			.saturating_add((612_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(8_275_000 as Weight)
			// Standard Error: 0
			.saturating_add((120_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(8_322_000 as Weight)
			// Standard Error: 0
			.saturating_add((259_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(8_311_000 as Weight)
			// Standard Error: 0
			.saturating_add((80_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(8_325_000 as Weight)
			// Standard Error: 0
			.saturating_add((52_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(8_349_000 as Weight)
			// Standard Error: 0
			.saturating_add((50_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(8_397_000 as Weight)
			// Standard Error: 0
			.saturating_add((257_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(8_425_000 as Weight)
			// Standard Error: 0
			.saturating_add((258_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(8_456_000 as Weight)
			// Standard Error: 0
			.saturating_add((258_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(8_368_000 as Weight)
			// Standard Error: 0
			.saturating_add((259_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(8_395_000 as Weight)
			// Standard Error: 0
			.saturating_add((259_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(8_450_000 as Weight)
			// Standard Error: 0
			.saturating_add((257_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(8_460_000 as Weight)
			// Standard Error: 0
			.saturating_add((254_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(8_452_000 as Weight)
			// Standard Error: 0
			.saturating_add((256_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(8_415_000 as Weight)
			// Standard Error: 0
			.saturating_add((258_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(8_470_000 as Weight)
			// Standard Error: 0
			.saturating_add((256_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(8_447_000 as Weight)
			// Standard Error: 0
			.saturating_add((197_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(8_418_000 as Weight)
			// Standard Error: 0
			.saturating_add((196_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(8_435_000 as Weight)
			// Standard Error: 0
			.saturating_add((249_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(9_751_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((933_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(9_174_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((873_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(7_105_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_881_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(9_694_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((856_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(8_507_000 as Weight)
			// Standard Error: 0
			.saturating_add((193_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(8_576_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((192_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(8_471_000 as Weight)
			// Standard Error: 0
			.saturating_add((196_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(8_509_000 as Weight)
			// Standard Error: 0
			.saturating_add((174_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(9_279_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((168_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(8_572_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((176_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(8_501_000 as Weight)
			// Standard Error: 0
			.saturating_add((176_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(8_433_000 as Weight)
			// Standard Error: 0
			.saturating_add((178_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn allocation_cost() -> Weight {
		// To be changed with the proper value.
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn grow_cost() -> Weight {
		// To be changed with the proper value.
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn initial_cost() -> Weight {
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn load_cost() -> Weight {
		RocksDbWeight::get().reads(1 as Weight)
	}
	fn claim_value() -> Weight {
		(173_550_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn upload_code(c: u32, ) -> Weight {
		(79_281_000 as Weight)
			// Standard Error: 0
			.saturating_add((63_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn create_program(s: u32, ) -> Weight {
		(75_038_000 as Weight)
			// Standard Error: 0
			.saturating_add((3_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn upload_program(c: u32, s: u32, ) -> Weight {
		(365_807_000 as Weight)
			// Standard Error: 0
			.saturating_add((61_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((3_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn send_message(p: u32, ) -> Weight {
		(121_013_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn send_reply(p: u32, ) -> Weight {
		(194_504_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn initial_allocation(_q: u32, ) -> Weight {
		(355_808_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(28 as Weight))
			.saturating_add(RocksDbWeight::get().writes(26 as Weight))
	}
	fn alloc_in_handle(q: u32, ) -> Weight {
		(536_115_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((36_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(26 as Weight))
			.saturating_add(RocksDbWeight::get().writes(24 as Weight))
	}
	fn reinstrument(c: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 0
			.saturating_add((65_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn alloc(r: u32, ) -> Weight {
		(159_566_000 as Weight)
			// Standard Error: 312_000
			.saturating_add((363_321_000 as Weight).saturating_mul(r as Weight))
	}
	fn gas(r: u32, ) -> Weight {
		(155_470_000 as Weight)
			// Standard Error: 117_000
			.saturating_add((101_710_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_gas_available(r: u32, ) -> Weight {
		(158_032_000 as Weight)
			// Standard Error: 109_000
			.saturating_add((101_240_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_msg_id(r: u32, ) -> Weight {
		(197_083_000 as Weight)
			// Standard Error: 301_000
			.saturating_add((125_396_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_origin(r: u32, ) -> Weight {
		(178_845_000 as Weight)
			// Standard Error: 2_242_000
			.saturating_add((132_704_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_program_id(r: u32, ) -> Weight {
		(205_288_000 as Weight)
			// Standard Error: 198_000
			.saturating_add((123_254_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_source(r: u32, ) -> Weight {
		(203_880_000 as Weight)
			// Standard Error: 199_000
			.saturating_add((123_861_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_value(r: u32, ) -> Weight {
		(212_915_000 as Weight)
			// Standard Error: 304_000
			.saturating_add((127_905_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_value_available(r: u32, ) -> Weight {
		(204_720_000 as Weight)
			// Standard Error: 184_000
			.saturating_add((123_582_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_size(r: u32, ) -> Weight {
		(117_034_000 as Weight)
			// Standard Error: 1_647_000
			.saturating_add((91_089_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_read(r: u32, ) -> Weight {
		(181_458_000 as Weight)
			// Standard Error: 124_000
			.saturating_add((122_195_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_read_per_kb(n: u32, ) -> Weight {
		(307_112_000 as Weight)
			// Standard Error: 126_000
			.saturating_add((32_777_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_block_height(r: u32, ) -> Weight {
		(159_888_000 as Weight)
			// Standard Error: 109_000
			.saturating_add((85_699_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_block_timestamp(r: u32, ) -> Weight {
		(156_910_000 as Weight)
			// Standard Error: 95_000
			.saturating_add((101_156_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_send_init(r: u32, ) -> Weight {
		(195_480_000 as Weight)
			// Standard Error: 213_000
			.saturating_add((148_966_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_send_push(r: u32, ) -> Weight {
		(208_335_000 as Weight)
			// Standard Error: 256_000
			.saturating_add((300_021_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_send_push_per_kb(n: u32, ) -> Weight {
		(520_314_000 as Weight)
			// Standard Error: 164_000
			.saturating_add((60_099_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_send_commit(r: u32, ) -> Weight {
		(213_799_000 as Weight)
			// Standard Error: 145_000
			.saturating_add((74_630_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_send_commit_per_kb(n: u32, ) -> Weight {
		(220_704_000 as Weight)
			// Standard Error: 33_000
			.saturating_add((3_869_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_reply_commit(r: u32, ) -> Weight {
		(219_239_000 as Weight)
			// Standard Error: 212_000
			.saturating_add((158_036_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
		(398_282_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((147_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
	}
	fn gr_reply_push(r: u32, ) -> Weight {
		(184_195_000 as Weight)
			// Standard Error: 94_000
			.saturating_add((133_810_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_reply_push_per_kb(n: u32, ) -> Weight {
		(339_846_000 as Weight)
			// Standard Error: 52_000
			.saturating_add((63_181_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_reply_to(r: u32, ) -> Weight {
		(151_361_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((4_578_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_debug(r: u32, ) -> Weight {
		(160_487_000 as Weight)
			// Standard Error: 143_000
			.saturating_add((125_875_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_exit_code(r: u32, ) -> Weight {
		(158_655_000 as Weight)
			// Standard Error: 169_000
			.saturating_add((4_167_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_exit(r: u32, ) -> Weight {
		(172_363_000 as Weight)
			// Standard Error: 350_000
			.saturating_add((62_731_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_leave(r: u32, ) -> Weight {
		(149_149_000 as Weight)
			// Standard Error: 440_000
			.saturating_add((28_134_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_wait(r: u32, ) -> Weight {
		(148_603_000 as Weight)
			// Standard Error: 423_000
			.saturating_add((29_190_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_wake(r: u32, ) -> Weight {
		(216_861_000 as Weight)
			// Standard Error: 323_000
			.saturating_add((179_104_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_create_program_wgas(r: u32, ) -> Weight {
		(174_654_000 as Weight)
			// Standard Error: 418_000
			.saturating_add((73_615_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
		(255_293_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((3_908_000 as Weight).saturating_mul(n as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(8_309_000 as Weight)
			// Standard Error: 0
			.saturating_add((4_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(45_379_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((372_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(64_665_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((587_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(8_179_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((666_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(8_376_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((670_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(8_338_000 as Weight)
			// Standard Error: 0
			.saturating_add((398_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(9_215_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((526_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(9_187_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_610_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(10_100_000 as Weight)
			// Standard Error: 0
			.saturating_add((19_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(8_896_000 as Weight)
			// Standard Error: 0
			.saturating_add((598_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(13_216_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_758_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(11_100_000 as Weight)
			// Standard Error: 0
			.saturating_add((165_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(8_539_000 as Weight)
			// Standard Error: 0
			.saturating_add((66_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(8_709_000 as Weight)
			// Standard Error: 0
			.saturating_add((133_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(8_558_000 as Weight)
			// Standard Error: 0
			.saturating_add((139_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(23_092_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((193_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(24_982_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((268_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(13_330_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_840_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(8_746_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((623_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(8_570_000 as Weight)
			// Standard Error: 0
			.saturating_add((612_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(8_275_000 as Weight)
			// Standard Error: 0
			.saturating_add((120_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(8_322_000 as Weight)
			// Standard Error: 0
			.saturating_add((259_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(8_311_000 as Weight)
			// Standard Error: 0
			.saturating_add((80_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(8_325_000 as Weight)
			// Standard Error: 0
			.saturating_add((52_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(8_349_000 as Weight)
			// Standard Error: 0
			.saturating_add((50_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(8_397_000 as Weight)
			// Standard Error: 0
			.saturating_add((257_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(8_425_000 as Weight)
			// Standard Error: 0
			.saturating_add((258_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(8_456_000 as Weight)
			// Standard Error: 0
			.saturating_add((258_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(8_368_000 as Weight)
			// Standard Error: 0
			.saturating_add((259_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(8_395_000 as Weight)
			// Standard Error: 0
			.saturating_add((259_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(8_450_000 as Weight)
			// Standard Error: 0
			.saturating_add((257_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(8_460_000 as Weight)
			// Standard Error: 0
			.saturating_add((254_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(8_452_000 as Weight)
			// Standard Error: 0
			.saturating_add((256_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(8_415_000 as Weight)
			// Standard Error: 0
			.saturating_add((258_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(8_470_000 as Weight)
			// Standard Error: 0
			.saturating_add((256_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(8_447_000 as Weight)
			// Standard Error: 0
			.saturating_add((197_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(8_418_000 as Weight)
			// Standard Error: 0
			.saturating_add((196_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(8_435_000 as Weight)
			// Standard Error: 0
			.saturating_add((249_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(9_751_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((933_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(9_174_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((873_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(7_105_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_881_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(9_694_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((856_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(8_507_000 as Weight)
			// Standard Error: 0
			.saturating_add((193_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(8_576_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((192_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(8_471_000 as Weight)
			// Standard Error: 0
			.saturating_add((196_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(8_509_000 as Weight)
			// Standard Error: 0
			.saturating_add((174_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(9_279_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((168_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(8_572_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((176_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(8_501_000 as Weight)
			// Standard Error: 0
			.saturating_add((176_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(8_433_000 as Weight)
			// Standard Error: 0
			.saturating_add((178_000 as Weight).saturating_mul(r as Weight))
	}
}
