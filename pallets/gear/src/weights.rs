// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-28, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=alloc,alloc_in_handle,alloc_per_page,claim_value,create_program,db_read_per_kb,db_write_per_kb,free,gr_block_height,gr_block_timestamp,gr_create_program,gr_create_program_per_kb,gr_create_program_wgas,gr_create_program_wgas_per_kb,gr_debug,gr_debug_per_kb,gr_gas_available,gr_message_id,gr_pay_program_rent,gr_program_id,gr_random,gr_read,gr_read_per_kb,gr_reply_code,gr_reply_deposit,gr_reply_per_kb,gr_reply_push,gr_reply_push_input,gr_reply_push_input_per_kb,gr_reply_push_per_kb,gr_reply_to,gr_reply_wgas_per_kb,gr_reservation_reply_commit_per_kb,gr_reservation_reply_per_kb,gr_reservation_send,gr_reservation_send_commit,gr_reservation_send_per_kb,gr_reserve_gas,gr_send,gr_send_commit,gr_send_commit_wgas,gr_send_init,gr_send_input,gr_send_input_wgas,gr_send_per_kb,gr_send_push,gr_send_push_input,gr_send_push_input_per_kb,gr_send_push_per_kb,gr_send_wgas,gr_send_wgas_per_kb,gr_signal_code,gr_signal_from,gr_size,gr_source,gr_system_reserve_gas,gr_unreserve_gas,gr_value,gr_value_available,gr_wake,initial_allocation,instantiate_module_per_kb,instr_br,instr_br_if,instr_br_table,instr_br_table_per_entry,instr_call,instr_call_const,instr_call_indirect,instr_call_indirect_per_param,instr_call_per_local,instr_global_get,instr_global_set,instr_i32add,instr_i32and,instr_i32clz,instr_i32ctz,instr_i32divs,instr_i32divu,instr_i32eq,instr_i32eqz,instr_i32extend16s,instr_i32extend8s,instr_i32ges,instr_i32geu,instr_i32gts,instr_i32gtu,instr_i32les,instr_i32leu,instr_i32load,instr_i32lts,instr_i32ltu,instr_i32mul,instr_i32ne,instr_i32or,instr_i32popcnt,instr_i32rems,instr_i32remu,instr_i32rotl,instr_i32rotr,instr_i32shl,instr_i32shrs,instr_i32shru,instr_i32store,instr_i32sub,instr_i32wrapi64,instr_i32xor,instr_i64add,instr_i64and,instr_i64clz,instr_i64ctz,instr_i64divs,instr_i64divu,instr_i64eq,instr_i64eqz,instr_i64extend16s,instr_i64extend32s,instr_i64extend8s,instr_i64extendsi32,instr_i64extendui32,instr_i64ges,instr_i64geu,instr_i64gts,instr_i64gtu,instr_i64les,instr_i64leu,instr_i64load,instr_i64lts,instr_i64ltu,instr_i64mul,instr_i64ne,instr_i64or,instr_i64popcnt,instr_i64rems,instr_i64remu,instr_i64rotl,instr_i64rotr,instr_i64shl,instr_i64shrs,instr_i64shru,instr_i64store,instr_i64sub,instr_i64xor,instr_if,instr_local_get,instr_local_set,instr_local_tee,instr_memory_current,instr_select,lazy_pages_host_func_read,lazy_pages_host_func_write,lazy_pages_host_func_write_after_read,lazy_pages_load_page_storage_data,lazy_pages_signal_read,lazy_pages_signal_write,lazy_pages_signal_write_after_read,mem_grow,pay_program_rent,reinstrument_per_kb,resume_session_commit,resume_session_init,resume_session_push,send_message,send_reply,tasks_pause_program,tasks_pause_program_uninited,tasks_remove_from_mailbox,tasks_remove_from_waitlist,tasks_remove_gas_reservation,tasks_remove_resume_session,tasks_send_dispatch,tasks_send_user_message,tasks_send_user_message_to_mailbox,tasks_wake_message,tasks_wake_message_no_wake,upload_code,upload_program --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn tasks_remove_resume_session() -> Weight;
    fn tasks_remove_gas_reservation() -> Weight;
    fn tasks_send_user_message_to_mailbox() -> Weight;
    fn tasks_send_user_message() -> Weight;
    fn tasks_send_dispatch() -> Weight;
    fn tasks_wake_message() -> Weight;
    fn tasks_wake_message_no_wake() -> Weight;
    fn tasks_remove_from_waitlist() -> Weight;
    fn tasks_remove_from_mailbox() -> Weight;
    fn tasks_pause_program(c: u32, ) -> Weight;
    fn tasks_pause_program_uninited(c: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_792_000 picoseconds.
        Weight::from_parts(103_063_604, 0)
            // Standard Error: 103_375
            .saturating_add(Weight::from_parts(18_929_072, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_154_000 picoseconds.
        Weight::from_parts(107_249_232, 0)
            // Standard Error: 99_969
            .saturating_add(Weight::from_parts(19_062_846, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_701_000 picoseconds.
        Weight::from_parts(109_478_842, 0)
            // Standard Error: 104_175
            .saturating_add(Weight::from_parts(10_887_124, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_910_000 picoseconds.
        Weight::from_parts(109_181_566, 0)
            // Standard Error: 81_801
            .saturating_add(Weight::from_parts(12_077_508, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 719_481_000 picoseconds.
        Weight::from_parts(765_485_196, 0)
            // Standard Error: 676_170
            .saturating_add(Weight::from_parts(17_778_524, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 720_914_000 picoseconds.
        Weight::from_parts(776_554_516, 0)
            // Standard Error: 1_018_495
            .saturating_add(Weight::from_parts(38_306_948, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_823_000 picoseconds.
        Weight::from_parts(112_820_586, 0)
            // Standard Error: 82_530
            .saturating_add(Weight::from_parts(14_370_506, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_415_000 picoseconds.
        Weight::from_parts(110_005_402, 0)
            // Standard Error: 87_514
            .saturating_add(Weight::from_parts(6_578_880, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_593_000 picoseconds.
        Weight::from_parts(104_873_732, 0)
            // Standard Error: 2_095_391
            .saturating_add(Weight::from_parts(193_359_282, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_619_000 picoseconds.
        Weight::from_parts(99_623_244, 0)
            // Standard Error: 1_945_328
            .saturating_add(Weight::from_parts(179_784_494, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_936_000 picoseconds.
        Weight::from_parts(100_139_452, 0)
            // Standard Error: 1_753_555
            .saturating_add(Weight::from_parts(132_465_876, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_955_000 picoseconds.
        Weight::from_parts(100_650_632, 0)
            // Standard Error: 2_018_388
            .saturating_add(Weight::from_parts(178_916_382, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_467_000 picoseconds.
        Weight::from_parts(102_532_790, 0)
            // Standard Error: 2_065_180
            .saturating_add(Weight::from_parts(187_152_790, 0).saturating_mul(r.into()))
    }
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_040_000 picoseconds.
        Weight::from_parts(1_087_000, 0)
            // Standard Error: 940
            .saturating_add(Weight::from_parts(251_751, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `79 + c * (1024 ±0)`
        //  Estimated: `3543 + c * (1024 ±0)`
        // Minimum execution time: 3_333_000 picoseconds.
        Weight::from_parts(3_463_000, 3543)
            // Standard Error: 966
            .saturating_add(Weight::from_parts(678_430, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_586_000 picoseconds.
        Weight::from_parts(95_956_778, 0)
            // Standard Error: 5_472
            .saturating_add(Weight::from_parts(2_353_352, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1304`
        //  Estimated: `51293`
        // Minimum execution time: 105_420_000 picoseconds.
        Weight::from_parts(109_120_000, 51293)
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `923`
        //  Estimated: `21372`
        // Minimum execution time: 54_290_000 picoseconds.
        Weight::from_parts(55_929_000, 21372)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `570`
        //  Estimated: `17214`
        // Minimum execution time: 29_539_000 picoseconds.
        Weight::from_parts(30_515_000, 17214)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_426_000 picoseconds.
        Weight::from_parts(5_984_423, 7640)
            // Standard Error: 33_789
            .saturating_add(Weight::from_parts(13_895_151, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1457 + c * (16389 ±0)`
        //  Estimated: `42178 + c * (131112 ±0)`
        // Minimum execution time: 71_198_000 picoseconds.
        Weight::from_parts(72_033_000, 42178)
            // Standard Error: 159_543
            .saturating_add(Weight::from_parts(54_764_270, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `46`
        //  Estimated: `5134`
        // Minimum execution time: 77_259_000 picoseconds.
        Weight::from_parts(52_968_469, 5134)
            // Standard Error: 43_186
            .saturating_add(Weight::from_parts(59_988_588, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1043`
        //  Estimated: `49852`
        // Minimum execution time: 96_734_000 picoseconds.
        Weight::from_parts(136_364_170, 49852)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_592, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `453`
        //  Estimated: `44268`
        // Minimum execution time: 11_047_048_000 picoseconds.
        Weight::from_parts(211_012_859, 44268)
            // Standard Error: 157_221
            .saturating_add(Weight::from_parts(59_860_835, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_554, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `530`
        //  Estimated: `31259`
        // Minimum execution time: 73_682_000 picoseconds.
        Weight::from_parts(48_414_295, 31259)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_040, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1303`
        //  Estimated: `53823`
        // Minimum execution time: 122_837_000 picoseconds.
        Weight::from_parts(97_209_014, 53823)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_068, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `89393`
        // Minimum execution time: 354_207_000 picoseconds.
        Weight::from_parts(374_297_966, 89393)
            .saturating_add(T::DbWeight::get().reads(31_u64))
            .saturating_add(T::DbWeight::get().writes(24_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `89133`
        // Minimum execution time: 368_424_000 picoseconds.
        Weight::from_parts(387_073_481, 89133)
            // Standard Error: 1_472
            .saturating_add(Weight::from_parts(4_343, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(31_u64))
            .saturating_add(T::DbWeight::get().writes(24_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 58_209_000 picoseconds.
        Weight::from_parts(58_498_000, 3899)
            // Standard Error: 35_860
            .saturating_add(Weight::from_parts(58_109_594, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_645_000 picoseconds.
        Weight::from_parts(95_763_000, 0)
            // Standard Error: 3_691_564
            .saturating_add(Weight::from_parts(713_537_659, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 495_006_000 picoseconds.
        Weight::from_parts(421_459_793, 0)
            // Standard Error: 9_156
            .saturating_add(Weight::from_parts(29_070_022, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 219_414_000 picoseconds.
        Weight::from_parts(206_118_379, 0)
            // Standard Error: 320_555
            .saturating_add(Weight::from_parts(64_665_141, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_871_000 picoseconds.
        Weight::from_parts(104_318_392, 0)
            // Standard Error: 4_224
            .saturating_add(Weight::from_parts(2_443_618, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 152_658_000 picoseconds.
        Weight::from_parts(218_177_774, 0)
            // Standard Error: 23_640
            .saturating_add(Weight::from_parts(2_186_094, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_532_000 picoseconds.
        Weight::from_parts(112_244_990, 0)
            // Standard Error: 370_435
            .saturating_add(Weight::from_parts(102_977_688, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_116_000 picoseconds.
        Weight::from_parts(85_754_801, 0)
            // Standard Error: 322_936
            .saturating_add(Weight::from_parts(85_646_040, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_226_000 picoseconds.
        Weight::from_parts(96_400_189, 0)
            // Standard Error: 308_975
            .saturating_add(Weight::from_parts(84_400_658, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_667_000 picoseconds.
        Weight::from_parts(95_221_535, 0)
            // Standard Error: 320_528
            .saturating_add(Weight::from_parts(85_320_330, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_400_000 picoseconds.
        Weight::from_parts(83_830_464, 0)
            // Standard Error: 333_677
            .saturating_add(Weight::from_parts(86_153_462, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_322_000 picoseconds.
        Weight::from_parts(88_780_011, 0)
            // Standard Error: 365_736
            .saturating_add(Weight::from_parts(86_373_607, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_234_000 picoseconds.
        Weight::from_parts(93_394_916, 0)
            // Standard Error: 310_495
            .saturating_add(Weight::from_parts(85_678_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_316_000 picoseconds.
        Weight::from_parts(88_012_950, 0)
            // Standard Error: 309_598
            .saturating_add(Weight::from_parts(85_813_369, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 715_150_000 picoseconds.
        Weight::from_parts(769_593_524, 0)
            // Standard Error: 493_525
            .saturating_add(Weight::from_parts(140_935_499, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 844_162_000 picoseconds.
        Weight::from_parts(851_053_000, 0)
            // Standard Error: 50_294
            .saturating_add(Weight::from_parts(13_068_816, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_243_000 picoseconds.
        Weight::from_parts(87_583_955, 0)
            // Standard Error: 343_578
            .saturating_add(Weight::from_parts(84_267_053, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_559_000 picoseconds.
        Weight::from_parts(92_460_596, 0)
            // Standard Error: 340_344
            .saturating_add(Weight::from_parts(85_006_110, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_023_000 picoseconds.
        Weight::from_parts(113_045_564, 0)
            // Standard Error: 350_542
            .saturating_add(Weight::from_parts(169_289_972, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_407_000 picoseconds.
        Weight::from_parts(99_094_000, 0)
            // Standard Error: 3_585_438
            .saturating_add(Weight::from_parts(776_362_449, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_709_000 picoseconds.
        Weight::from_parts(153_262_764, 0)
            // Standard Error: 391_637
            .saturating_add(Weight::from_parts(256_389_022, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 341_633_000 picoseconds.
        Weight::from_parts(345_693_000, 0)
            // Standard Error: 61_029
            .saturating_add(Weight::from_parts(21_298_548, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_817_000 picoseconds.
        Weight::from_parts(172_033_153, 0)
            // Standard Error: 412_230
            .saturating_add(Weight::from_parts(260_826_119, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 353_433_000 picoseconds.
        Weight::from_parts(359_185_000, 0)
            // Standard Error: 60_153
            .saturating_add(Weight::from_parts(21_224_949, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 716_180_000 picoseconds.
        Weight::from_parts(782_890_839, 0)
            // Standard Error: 547_225
            .saturating_add(Weight::from_parts(273_570_636, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 719_827_000 picoseconds.
        Weight::from_parts(805_763_844, 0)
            // Standard Error: 503_245
            .saturating_add(Weight::from_parts(278_200_889, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_518_000 picoseconds.
        Weight::from_parts(82_218_173, 0)
            // Standard Error: 358_867
            .saturating_add(Weight::from_parts(92_408_337, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_829_368_000 picoseconds.
        Weight::from_parts(1_976_758_302, 0)
            // Standard Error: 349_703
            .saturating_add(Weight::from_parts(163_038_781, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 315_829_000 picoseconds.
        Weight::from_parts(318_464_000, 0)
            // Standard Error: 54_637
            .saturating_add(Weight::from_parts(31_280_567, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_818_937_000 picoseconds.
        Weight::from_parts(1_941_969_566, 0)
            // Standard Error: 412_244
            .saturating_add(Weight::from_parts(220_650_756, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_815_762_000 picoseconds.
        Weight::from_parts(1_958_182_203, 0)
            // Standard Error: 374_381
            .saturating_add(Weight::from_parts(229_106_637, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 259_040_000 picoseconds.
        Weight::from_parts(345_586_401, 0)
            // Standard Error: 402_258
            .saturating_add(Weight::from_parts(274_866_021, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 523_014_000 picoseconds.
        Weight::from_parts(525_681_000, 0)
            // Standard Error: 56_470
            .saturating_add(Weight::from_parts(21_443_571, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_967_181_000 picoseconds.
        Weight::from_parts(2_076_078_781, 0)
            // Standard Error: 455_370
            .saturating_add(Weight::from_parts(246_494_683, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 114_790_000 picoseconds.
        Weight::from_parts(106_908_278, 0)
            // Standard Error: 1_274
            .saturating_add(Weight::from_parts(430_785, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 115_541_000 picoseconds.
        Weight::from_parts(101_956_035, 0)
            // Standard Error: 3_603
            .saturating_add(Weight::from_parts(442_387, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_082_000 picoseconds.
        Weight::from_parts(138_243_307, 0)
            // Standard Error: 409_163
            .saturating_add(Weight::from_parts(154_758_505, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 111_536_000 picoseconds.
        Weight::from_parts(114_497_000, 0)
            // Standard Error: 2_599
            .saturating_add(Weight::from_parts(656_994, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 114_322_000 picoseconds.
        Weight::from_parts(113_131_028, 0)
            // Standard Error: 3_727
            .saturating_add(Weight::from_parts(436_168, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_751_000 picoseconds.
        Weight::from_parts(161_418_174, 0)
            // Standard Error: 6_635
            .saturating_add(Weight::from_parts(405_229, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_524_000 picoseconds.
        Weight::from_parts(89_332_032, 0)
            // Standard Error: 294_566
            .saturating_add(Weight::from_parts(86_798_759, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_216_000 picoseconds.
        Weight::from_parts(83_424_786, 0)
            // Standard Error: 316_301
            .saturating_add(Weight::from_parts(84_774_296, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_461_000 picoseconds.
        Weight::from_parts(97_636_300, 0)
            // Standard Error: 278_297
            .saturating_add(Weight::from_parts(86_743_159, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 724_902_000 picoseconds.
        Weight::from_parts(784_128_285, 0)
            // Standard Error: 444_406
            .saturating_add(Weight::from_parts(105_223_470, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 737_666_000 picoseconds.
        Weight::from_parts(758_797_216, 0)
            // Standard Error: 1_260
            .saturating_add(Weight::from_parts(154_837, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_498_871_000 picoseconds.
        Weight::from_parts(2_688_516_696, 0)
            // Standard Error: 531_545
            .saturating_add(Weight::from_parts(131_060_314, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_657_855_000 picoseconds.
        Weight::from_parts(2_746_003_287, 0)
            // Standard Error: 12_743
            .saturating_add(Weight::from_parts(13_716_214, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_990_000 picoseconds.
        Weight::from_parts(110_812_744, 0)
            // Standard Error: 347_035
            .saturating_add(Weight::from_parts(120_462_128, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 170_244_000 picoseconds.
        Weight::from_parts(175_502_000, 0)
            // Standard Error: 56_203
            .saturating_add(Weight::from_parts(25_870_902, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_676_000 picoseconds.
        Weight::from_parts(91_226_383, 0)
            // Standard Error: 320_296
            .saturating_add(Weight::from_parts(82_761_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 149_319_000 picoseconds.
        Weight::from_parts(230_971_562, 0)
            // Standard Error: 338_138
            .saturating_add(Weight::from_parts(157_262_608, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_167_000 picoseconds.
        Weight::from_parts(178_994_489, 0)
            // Standard Error: 404_012
            .saturating_add(Weight::from_parts(348_487_075, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_645_119_000 picoseconds.
        Weight::from_parts(43_811_648_000, 0)
            // Standard Error: 262_276
            .saturating_add(Weight::from_parts(7_776_587, 0).saturating_mul(p.into()))
            // Standard Error: 262_263
            .saturating_add(Weight::from_parts(178_958_075, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_639_000 picoseconds.
        Weight::from_parts(169_517_206, 0)
            // Standard Error: 363_225
            .saturating_add(Weight::from_parts(357_078_703, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 46_491_851_000 picoseconds.
        Weight::from_parts(46_603_783_000, 0)
            // Standard Error: 280_431
            .saturating_add(Weight::from_parts(7_250_257, 0).saturating_mul(p.into()))
            // Standard Error: 280_417
            .saturating_add(Weight::from_parts(177_722_888, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_721_000 picoseconds.
        Weight::from_parts(114_995_832, 0)
            // Standard Error: 36_809
            .saturating_add(Weight::from_parts(1_873_016, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 97_655_000 picoseconds.
        Weight::from_parts(138_058_498, 1131)
            // Standard Error: 18_813
            .saturating_add(Weight::from_parts(16_311_194, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 96_083_000 picoseconds.
        Weight::from_parts(98_597_000, 1131)
            // Standard Error: 43_515
            .saturating_add(Weight::from_parts(42_632_421, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_196_422_000 picoseconds.
        Weight::from_parts(8_474_214_520, 5069931)
            // Standard Error: 71_564
            .saturating_add(Weight::from_parts(41_738_666, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 93_446_000 picoseconds.
        Weight::from_parts(96_664_000, 1939)
            // Standard Error: 46_722
            .saturating_add(Weight::from_parts(55_567_620, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 106_137_000 picoseconds.
        Weight::from_parts(107_751_954, 1131)
            // Standard Error: 71_200
            .saturating_add(Weight::from_parts(41_236_505, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 758_237_000 picoseconds.
        Weight::from_parts(760_351_083, 1496)
            // Standard Error: 319_479
            .saturating_add(Weight::from_parts(53_277_303, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_299_071_000 picoseconds.
        Weight::from_parts(1_320_542_278, 317931)
            // Standard Error: 364_770
            .saturating_add(Weight::from_parts(53_225_083, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_118_000 picoseconds.
        Weight::from_parts(7_418_987, 0)
            // Standard Error: 299_976
            .saturating_add(Weight::from_parts(77_036_564, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_461_228_000 picoseconds.
        Weight::from_parts(4_172_544_233, 0)
            // Standard Error: 108_717
            .saturating_add(Weight::from_parts(5_492_504, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_440_105_000 picoseconds.
        Weight::from_parts(4_189_326_223, 0)
            // Standard Error: 94_884
            .saturating_add(Weight::from_parts(5_283_060, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_389_557_000 picoseconds.
        Weight::from_parts(11_860_510_711, 0)
            // Standard Error: 156_021
            .saturating_add(Weight::from_parts(9_199_358, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_497_103_000 picoseconds.
        Weight::from_parts(11_330_880_436, 0)
            // Standard Error: 132_247
            .saturating_add(Weight::from_parts(10_016_516, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_381_000 picoseconds.
        Weight::from_parts(2_444_000, 0)
            // Standard Error: 7_402
            .saturating_add(Weight::from_parts(3_876_295, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_405_000 picoseconds.
        Weight::from_parts(481_308, 0)
            // Standard Error: 8_161
            .saturating_add(Weight::from_parts(3_159_957, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_371_000 picoseconds.
        Weight::from_parts(3_249_787, 0)
            // Standard Error: 1_586
            .saturating_add(Weight::from_parts(1_582_965, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_216_000 picoseconds.
        Weight::from_parts(2_300_000, 0)
            // Standard Error: 6_757
            .saturating_add(Weight::from_parts(2_971_649, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_259_000 picoseconds.
        Weight::from_parts(2_872_259, 0)
            // Standard Error: 19_834
            .saturating_add(Weight::from_parts(5_176_111, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_999_000 picoseconds.
        Weight::from_parts(6_015_140, 0)
            // Standard Error: 1_903
            .saturating_add(Weight::from_parts(170_143, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_308_000 picoseconds.
        Weight::from_parts(5_881_148, 0)
            // Standard Error: 9_069
            .saturating_add(Weight::from_parts(2_574_099, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_574_099 -
            2_423_093, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_337_000 picoseconds.
        Weight::from_parts(5_123_036, 0)
            // Standard Error: 12_143
            .saturating_add(Weight::from_parts(2_423_093, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_736_000 picoseconds.
        Weight::from_parts(16_600_828, 0)
            // Standard Error: 30_025
            .saturating_add(Weight::from_parts(10_214_913, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_483_000 picoseconds.
        Weight::from_parts(1_416_669, 0)
            // Standard Error: 5_995
            .saturating_add(Weight::from_parts(1_336_453, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_497_000 picoseconds.
        Weight::from_parts(5_981_231, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_730_000 picoseconds.
        Weight::from_parts(5_851_529, 0)
            // Standard Error: 2_642
            .saturating_add(Weight::from_parts(392_869, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_837_000 picoseconds.
        Weight::from_parts(4_473_635, 0)
            // Standard Error: 5_210
            .saturating_add(Weight::from_parts(1_003_312, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_802_000 picoseconds.
        Weight::from_parts(2_153_776, 0)
            // Standard Error: 11_517
            .saturating_add(Weight::from_parts(1_186_032, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_375_000 picoseconds.
        Weight::from_parts(3_754_449, 0)
            // Standard Error: 5_686
            .saturating_add(Weight::from_parts(763_597, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_475_000 picoseconds.
        Weight::from_parts(266_670, 0)
            // Standard Error: 10_193
            .saturating_add(Weight::from_parts(1_552_777, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_887_000 picoseconds.
        Weight::from_parts(4_333_544, 0)
            // Standard Error: 10_173
            .saturating_add(Weight::from_parts(6_952_830, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_267_000 picoseconds.
        Weight::from_parts(2_351_000, 0)
            // Standard Error: 5_280
            .saturating_add(Weight::from_parts(3_360_413, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_283_000 picoseconds.
        Weight::from_parts(2_357_000, 0)
            // Standard Error: 4_452
            .saturating_add(Weight::from_parts(3_099_489, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_328_000 picoseconds.
        Weight::from_parts(2_417_000, 0)
            // Standard Error: 5_054
            .saturating_add(Weight::from_parts(3_106_996, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_230_000 picoseconds.
        Weight::from_parts(2_296_000, 0)
            // Standard Error: 3_924
            .saturating_add(Weight::from_parts(2_681_831, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_294_000 picoseconds.
        Weight::from_parts(2_438_000, 0)
            // Standard Error: 4_198
            .saturating_add(Weight::from_parts(603_106, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_257_000 picoseconds.
        Weight::from_parts(2_121_941, 0)
            // Standard Error: 3_525
            .saturating_add(Weight::from_parts(401_578, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_224_000 picoseconds.
        Weight::from_parts(2_291_000, 0)
            // Standard Error: 9_436
            .saturating_add(Weight::from_parts(1_891_725, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_273_000 picoseconds.
        Weight::from_parts(2_417_000, 0)
            // Standard Error: 8_255
            .saturating_add(Weight::from_parts(1_289_311, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_276_000 picoseconds.
        Weight::from_parts(1_306_236, 0)
            // Standard Error: 5_275
            .saturating_add(Weight::from_parts(426_430, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_341_000 picoseconds.
        Weight::from_parts(1_669_540, 0)
            // Standard Error: 4_902
            .saturating_add(Weight::from_parts(405_099, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_244_000 picoseconds.
        Weight::from_parts(2_317_000, 0)
            // Standard Error: 3_916
            .saturating_add(Weight::from_parts(552_354, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_316_000 picoseconds.
        Weight::from_parts(2_395_000, 0)
            // Standard Error: 5_375
            .saturating_add(Weight::from_parts(589_608, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(98_911, 0)
            // Standard Error: 7_257
            .saturating_add(Weight::from_parts(581_834, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_293_000 picoseconds.
        Weight::from_parts(1_730_402, 0)
            // Standard Error: 4_194
            .saturating_add(Weight::from_parts(357_287, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_580_000 picoseconds.
        Weight::from_parts(2_927_247, 0)
            // Standard Error: 2_012
            .saturating_add(Weight::from_parts(181_106, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_308_000 picoseconds.
        Weight::from_parts(2_742_236, 0)
            // Standard Error: 2_482
            .saturating_add(Weight::from_parts(187_830, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_324_000 picoseconds.
        Weight::from_parts(2_385_000, 0)
            // Standard Error: 9_154
            .saturating_add(Weight::from_parts(1_858_617, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_237_000 picoseconds.
        Weight::from_parts(2_302_000, 0)
            // Standard Error: 7_801
            .saturating_add(Weight::from_parts(1_226_411, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_265_000 picoseconds.
        Weight::from_parts(2_358_000, 0)
            // Standard Error: 9_102
            .saturating_add(Weight::from_parts(1_866_723, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_267_000 picoseconds.
        Weight::from_parts(2_381_000, 0)
            // Standard Error: 8_629
            .saturating_add(Weight::from_parts(1_209_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_274_000 picoseconds.
        Weight::from_parts(2_330_000, 0)
            // Standard Error: 9_193
            .saturating_add(Weight::from_parts(1_895_140, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_306_000 picoseconds.
        Weight::from_parts(2_394_000, 0)
            // Standard Error: 7_780
            .saturating_add(Weight::from_parts(1_209_776, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_273_000 picoseconds.
        Weight::from_parts(2_395_000, 0)
            // Standard Error: 8_868
            .saturating_add(Weight::from_parts(1_845_417, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_280_000 picoseconds.
        Weight::from_parts(2_360_000, 0)
            // Standard Error: 8_139
            .saturating_add(Weight::from_parts(1_208_611, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_299_000 picoseconds.
        Weight::from_parts(2_335_000, 0)
            // Standard Error: 8_008
            .saturating_add(Weight::from_parts(1_833_636, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_222_000 picoseconds.
        Weight::from_parts(2_376_000, 0)
            // Standard Error: 7_996
            .saturating_add(Weight::from_parts(1_224_203, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_371_000 picoseconds.
        Weight::from_parts(2_421_000, 0)
            // Standard Error: 9_119
            .saturating_add(Weight::from_parts(1_821_158, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_305_000 picoseconds.
        Weight::from_parts(2_418_000, 0)
            // Standard Error: 7_441
            .saturating_add(Weight::from_parts(1_186_995, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_340_000 picoseconds.
        Weight::from_parts(2_362_000, 0)
            // Standard Error: 8_788
            .saturating_add(Weight::from_parts(1_811_701, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_352_000 picoseconds.
        Weight::from_parts(2_431_000, 0)
            // Standard Error: 6_620
            .saturating_add(Weight::from_parts(1_171_906, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_352_000 picoseconds.
        Weight::from_parts(2_380_000, 0)
            // Standard Error: 8_554
            .saturating_add(Weight::from_parts(1_821_955, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_299_000 picoseconds.
        Weight::from_parts(2_389_000, 0)
            // Standard Error: 7_710
            .saturating_add(Weight::from_parts(1_188_722, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_325_000 picoseconds.
        Weight::from_parts(2_387_000, 0)
            // Standard Error: 10_150
            .saturating_add(Weight::from_parts(1_912_877, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_377_000 picoseconds.
        Weight::from_parts(2_423_000, 0)
            // Standard Error: 6_824
            .saturating_add(Weight::from_parts(1_181_831, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_292_000 picoseconds.
        Weight::from_parts(2_384_000, 0)
            // Standard Error: 9_214
            .saturating_add(Weight::from_parts(1_842_825, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_283_000 picoseconds.
        Weight::from_parts(2_344_000, 0)
            // Standard Error: 7_145
            .saturating_add(Weight::from_parts(1_216_207, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_232_000 picoseconds.
        Weight::from_parts(2_391_000, 0)
            // Standard Error: 9_159
            .saturating_add(Weight::from_parts(1_360_135, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_279_000 picoseconds.
        Weight::from_parts(2_379_000, 0)
            // Standard Error: 5_400
            .saturating_add(Weight::from_parts(704_012, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_355_000 picoseconds.
        Weight::from_parts(2_402_000, 0)
            // Standard Error: 8_632
            .saturating_add(Weight::from_parts(1_358_130, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_365_000 picoseconds.
        Weight::from_parts(2_389_000, 0)
            // Standard Error: 4_840
            .saturating_add(Weight::from_parts(658_882, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_209_000 picoseconds.
        Weight::from_parts(2_324_000, 0)
            // Standard Error: 8_679
            .saturating_add(Weight::from_parts(1_840_263, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(2_382_000, 0)
            // Standard Error: 7_484
            .saturating_add(Weight::from_parts(1_255_185, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_369_000 picoseconds.
        Weight::from_parts(6_412_885, 0)
            // Standard Error: 22_130
            .saturating_add(Weight::from_parts(2_376_785, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_266_000 picoseconds.
        Weight::from_parts(2_981_330, 0)
            // Standard Error: 11_996
            .saturating_add(Weight::from_parts(2_322_763, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_240_000 picoseconds.
        Weight::from_parts(7_628_007, 0)
            // Standard Error: 29_510
            .saturating_add(Weight::from_parts(2_483_957, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_387_000 picoseconds.
        Weight::from_parts(4_910_027, 0)
            // Standard Error: 23_548
            .saturating_add(Weight::from_parts(2_233_487, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_297_000 picoseconds.
        Weight::from_parts(16_240_633, 0)
            // Standard Error: 67_100
            .saturating_add(Weight::from_parts(8_506_720, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_234_000 picoseconds.
        Weight::from_parts(2_498_693, 0)
            // Standard Error: 48_996
            .saturating_add(Weight::from_parts(7_513_162, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_221_000 picoseconds.
        Weight::from_parts(5_074_264, 0)
            // Standard Error: 23_109
            .saturating_add(Weight::from_parts(2_727_269, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_283_000 picoseconds.
        Weight::from_parts(2_057_554, 0)
            // Standard Error: 15_404
            .saturating_add(Weight::from_parts(2_428_553, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_250_000 picoseconds.
        Weight::from_parts(2_359_000, 0)
            // Standard Error: 8_133
            .saturating_add(Weight::from_parts(1_333_125, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_251_000 picoseconds.
        Weight::from_parts(2_372_000, 0)
            // Standard Error: 4_205
            .saturating_add(Weight::from_parts(671_074, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_257_000 picoseconds.
        Weight::from_parts(2_323_000, 0)
            // Standard Error: 7_098
            .saturating_add(Weight::from_parts(1_323_703, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_247_000 picoseconds.
        Weight::from_parts(2_372_000, 0)
            // Standard Error: 6_649
            .saturating_add(Weight::from_parts(695_117, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_293_000 picoseconds.
        Weight::from_parts(2_347_000, 0)
            // Standard Error: 7_359
            .saturating_add(Weight::from_parts(1_355_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_239_000 picoseconds.
        Weight::from_parts(2_335_000, 0)
            // Standard Error: 4_076
            .saturating_add(Weight::from_parts(658_834, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_376_000 picoseconds.
        Weight::from_parts(2_444_000, 0)
            // Standard Error: 6_850
            .saturating_add(Weight::from_parts(1_191_253, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_240_000 picoseconds.
        Weight::from_parts(2_310_000, 0)
            // Standard Error: 4_398
            .saturating_add(Weight::from_parts(597_162, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_338_000 picoseconds.
        Weight::from_parts(2_421_000, 0)
            // Standard Error: 8_320
            .saturating_add(Weight::from_parts(1_163_071, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_376_000 picoseconds.
        Weight::from_parts(2_464_000, 0)
            // Standard Error: 5_750
            .saturating_add(Weight::from_parts(613_283, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_338_000 picoseconds.
        Weight::from_parts(2_378_000, 0)
            // Standard Error: 7_893
            .saturating_add(Weight::from_parts(1_161_655, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_260_000 picoseconds.
        Weight::from_parts(2_351_000, 0)
            // Standard Error: 3_972
            .saturating_add(Weight::from_parts(605_013, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_324_000 picoseconds.
        Weight::from_parts(2_375_000, 0)
            // Standard Error: 7_329
            .saturating_add(Weight::from_parts(1_108_542, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_342_000 picoseconds.
        Weight::from_parts(2_465_000, 0)
            // Standard Error: 5_553
            .saturating_add(Weight::from_parts(617_389, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_260_000 picoseconds.
        Weight::from_parts(2_419_000, 0)
            // Standard Error: 8_448
            .saturating_add(Weight::from_parts(1_105_239, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_255_000 picoseconds.
        Weight::from_parts(2_321_000, 0)
            // Standard Error: 5_862
            .saturating_add(Weight::from_parts(626_497, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_resume_session() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `352`
        //  Estimated: `4169`
        // Minimum execution time: 5_780_000 picoseconds.
        Weight::from_parts(6_083_000, 4169)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1039`
        //  Estimated: `23781`
        // Minimum execution time: 62_100_000 picoseconds.
        Weight::from_parts(64_771_000, 23781)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `820`
        //  Estimated: `21750`
        // Minimum execution time: 47_415_000 picoseconds.
        Weight::from_parts(48_906_000, 21750)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `942`
        //  Estimated: `34143`
        // Minimum execution time: 76_882_000 picoseconds.
        Weight::from_parts(79_728_000, 34143)
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `627`
        //  Estimated: `20101`
        // Minimum execution time: 32_342_000 picoseconds.
        Weight::from_parts(33_851_000, 20101)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `908`
        //  Estimated: `26160`
        // Minimum execution time: 50_697_000 picoseconds.
        Weight::from_parts(53_632_000, 26160)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_467_000 picoseconds.
        Weight::from_parts(3_690_000, 3545)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1558`
        //  Estimated: `57552`
        // Minimum execution time: 111_822_000 picoseconds.
        Weight::from_parts(115_245_000, 57552)
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1264`
        //  Estimated: `46350`
        // Minimum execution time: 92_407_000 picoseconds.
        Weight::from_parts(95_840_000, 46350)
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2236 + c * (16400 ±0)`
        //  Estimated: `19543 + c * (84480 ±0)`
        // Minimum execution time: 29_880_000 picoseconds.
        Weight::from_parts(30_555_000, 19543)
            // Standard Error: 65_806
            .saturating_add(Weight::from_parts(39_128_234, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 84480).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program_uninited(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3061 + c * (42 ±0)`
        //  Estimated: `59827 + c * (2947 ±0)`
        // Minimum execution time: 89_781_000 picoseconds.
        Weight::from_parts(109_193_287, 59827)
            // Standard Error: 2_877
            .saturating_add(Weight::from_parts(1_067_792, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2947).saturating_mul(c.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_792_000 picoseconds.
        Weight::from_parts(103_063_604, 0)
            // Standard Error: 103_375
            .saturating_add(Weight::from_parts(18_929_072, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_154_000 picoseconds.
        Weight::from_parts(107_249_232, 0)
            // Standard Error: 99_969
            .saturating_add(Weight::from_parts(19_062_846, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_701_000 picoseconds.
        Weight::from_parts(109_478_842, 0)
            // Standard Error: 104_175
            .saturating_add(Weight::from_parts(10_887_124, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_910_000 picoseconds.
        Weight::from_parts(109_181_566, 0)
            // Standard Error: 81_801
            .saturating_add(Weight::from_parts(12_077_508, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 719_481_000 picoseconds.
        Weight::from_parts(765_485_196, 0)
            // Standard Error: 676_170
            .saturating_add(Weight::from_parts(17_778_524, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 720_914_000 picoseconds.
        Weight::from_parts(776_554_516, 0)
            // Standard Error: 1_018_495
            .saturating_add(Weight::from_parts(38_306_948, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_823_000 picoseconds.
        Weight::from_parts(112_820_586, 0)
            // Standard Error: 82_530
            .saturating_add(Weight::from_parts(14_370_506, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_415_000 picoseconds.
        Weight::from_parts(110_005_402, 0)
            // Standard Error: 87_514
            .saturating_add(Weight::from_parts(6_578_880, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_593_000 picoseconds.
        Weight::from_parts(104_873_732, 0)
            // Standard Error: 2_095_391
            .saturating_add(Weight::from_parts(193_359_282, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_619_000 picoseconds.
        Weight::from_parts(99_623_244, 0)
            // Standard Error: 1_945_328
            .saturating_add(Weight::from_parts(179_784_494, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_936_000 picoseconds.
        Weight::from_parts(100_139_452, 0)
            // Standard Error: 1_753_555
            .saturating_add(Weight::from_parts(132_465_876, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_955_000 picoseconds.
        Weight::from_parts(100_650_632, 0)
            // Standard Error: 2_018_388
            .saturating_add(Weight::from_parts(178_916_382, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_467_000 picoseconds.
        Weight::from_parts(102_532_790, 0)
            // Standard Error: 2_065_180
            .saturating_add(Weight::from_parts(187_152_790, 0).saturating_mul(r.into()))
    }
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_040_000 picoseconds.
        Weight::from_parts(1_087_000, 0)
            // Standard Error: 940
            .saturating_add(Weight::from_parts(251_751, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `79 + c * (1024 ±0)`
        //  Estimated: `3543 + c * (1024 ±0)`
        // Minimum execution time: 3_333_000 picoseconds.
        Weight::from_parts(3_463_000, 3543)
            // Standard Error: 966
            .saturating_add(Weight::from_parts(678_430, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_586_000 picoseconds.
        Weight::from_parts(95_956_778, 0)
            // Standard Error: 5_472
            .saturating_add(Weight::from_parts(2_353_352, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1304`
        //  Estimated: `51293`
        // Minimum execution time: 105_420_000 picoseconds.
        Weight::from_parts(109_120_000, 51293)
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `923`
        //  Estimated: `21372`
        // Minimum execution time: 54_290_000 picoseconds.
        Weight::from_parts(55_929_000, 21372)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `570`
        //  Estimated: `17214`
        // Minimum execution time: 29_539_000 picoseconds.
        Weight::from_parts(30_515_000, 17214)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_426_000 picoseconds.
        Weight::from_parts(5_984_423, 7640)
            // Standard Error: 33_789
            .saturating_add(Weight::from_parts(13_895_151, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1457 + c * (16389 ±0)`
        //  Estimated: `42178 + c * (131112 ±0)`
        // Minimum execution time: 71_198_000 picoseconds.
        Weight::from_parts(72_033_000, 42178)
            // Standard Error: 159_543
            .saturating_add(Weight::from_parts(54_764_270, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `46`
        //  Estimated: `5134`
        // Minimum execution time: 77_259_000 picoseconds.
        Weight::from_parts(52_968_469, 5134)
            // Standard Error: 43_186
            .saturating_add(Weight::from_parts(59_988_588, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1043`
        //  Estimated: `49852`
        // Minimum execution time: 96_734_000 picoseconds.
        Weight::from_parts(136_364_170, 49852)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_592, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `453`
        //  Estimated: `44268`
        // Minimum execution time: 11_047_048_000 picoseconds.
        Weight::from_parts(211_012_859, 44268)
            // Standard Error: 157_221
            .saturating_add(Weight::from_parts(59_860_835, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_554, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `530`
        //  Estimated: `31259`
        // Minimum execution time: 73_682_000 picoseconds.
        Weight::from_parts(48_414_295, 31259)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_040, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1303`
        //  Estimated: `53823`
        // Minimum execution time: 122_837_000 picoseconds.
        Weight::from_parts(97_209_014, 53823)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_068, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `89393`
        // Minimum execution time: 354_207_000 picoseconds.
        Weight::from_parts(374_297_966, 89393)
            .saturating_add(RocksDbWeight::get().reads(31_u64))
            .saturating_add(RocksDbWeight::get().writes(24_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `89133`
        // Minimum execution time: 368_424_000 picoseconds.
        Weight::from_parts(387_073_481, 89133)
            // Standard Error: 1_472
            .saturating_add(Weight::from_parts(4_343, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(31_u64))
            .saturating_add(RocksDbWeight::get().writes(24_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 58_209_000 picoseconds.
        Weight::from_parts(58_498_000, 3899)
            // Standard Error: 35_860
            .saturating_add(Weight::from_parts(58_109_594, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_645_000 picoseconds.
        Weight::from_parts(95_763_000, 0)
            // Standard Error: 3_691_564
            .saturating_add(Weight::from_parts(713_537_659, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 495_006_000 picoseconds.
        Weight::from_parts(421_459_793, 0)
            // Standard Error: 9_156
            .saturating_add(Weight::from_parts(29_070_022, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 219_414_000 picoseconds.
        Weight::from_parts(206_118_379, 0)
            // Standard Error: 320_555
            .saturating_add(Weight::from_parts(64_665_141, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_871_000 picoseconds.
        Weight::from_parts(104_318_392, 0)
            // Standard Error: 4_224
            .saturating_add(Weight::from_parts(2_443_618, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 152_658_000 picoseconds.
        Weight::from_parts(218_177_774, 0)
            // Standard Error: 23_640
            .saturating_add(Weight::from_parts(2_186_094, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_532_000 picoseconds.
        Weight::from_parts(112_244_990, 0)
            // Standard Error: 370_435
            .saturating_add(Weight::from_parts(102_977_688, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_116_000 picoseconds.
        Weight::from_parts(85_754_801, 0)
            // Standard Error: 322_936
            .saturating_add(Weight::from_parts(85_646_040, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_226_000 picoseconds.
        Weight::from_parts(96_400_189, 0)
            // Standard Error: 308_975
            .saturating_add(Weight::from_parts(84_400_658, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_667_000 picoseconds.
        Weight::from_parts(95_221_535, 0)
            // Standard Error: 320_528
            .saturating_add(Weight::from_parts(85_320_330, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_400_000 picoseconds.
        Weight::from_parts(83_830_464, 0)
            // Standard Error: 333_677
            .saturating_add(Weight::from_parts(86_153_462, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_322_000 picoseconds.
        Weight::from_parts(88_780_011, 0)
            // Standard Error: 365_736
            .saturating_add(Weight::from_parts(86_373_607, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_234_000 picoseconds.
        Weight::from_parts(93_394_916, 0)
            // Standard Error: 310_495
            .saturating_add(Weight::from_parts(85_678_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_316_000 picoseconds.
        Weight::from_parts(88_012_950, 0)
            // Standard Error: 309_598
            .saturating_add(Weight::from_parts(85_813_369, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 715_150_000 picoseconds.
        Weight::from_parts(769_593_524, 0)
            // Standard Error: 493_525
            .saturating_add(Weight::from_parts(140_935_499, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 844_162_000 picoseconds.
        Weight::from_parts(851_053_000, 0)
            // Standard Error: 50_294
            .saturating_add(Weight::from_parts(13_068_816, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_243_000 picoseconds.
        Weight::from_parts(87_583_955, 0)
            // Standard Error: 343_578
            .saturating_add(Weight::from_parts(84_267_053, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_559_000 picoseconds.
        Weight::from_parts(92_460_596, 0)
            // Standard Error: 340_344
            .saturating_add(Weight::from_parts(85_006_110, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_023_000 picoseconds.
        Weight::from_parts(113_045_564, 0)
            // Standard Error: 350_542
            .saturating_add(Weight::from_parts(169_289_972, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_407_000 picoseconds.
        Weight::from_parts(99_094_000, 0)
            // Standard Error: 3_585_438
            .saturating_add(Weight::from_parts(776_362_449, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_709_000 picoseconds.
        Weight::from_parts(153_262_764, 0)
            // Standard Error: 391_637
            .saturating_add(Weight::from_parts(256_389_022, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 341_633_000 picoseconds.
        Weight::from_parts(345_693_000, 0)
            // Standard Error: 61_029
            .saturating_add(Weight::from_parts(21_298_548, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_817_000 picoseconds.
        Weight::from_parts(172_033_153, 0)
            // Standard Error: 412_230
            .saturating_add(Weight::from_parts(260_826_119, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 353_433_000 picoseconds.
        Weight::from_parts(359_185_000, 0)
            // Standard Error: 60_153
            .saturating_add(Weight::from_parts(21_224_949, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 716_180_000 picoseconds.
        Weight::from_parts(782_890_839, 0)
            // Standard Error: 547_225
            .saturating_add(Weight::from_parts(273_570_636, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 719_827_000 picoseconds.
        Weight::from_parts(805_763_844, 0)
            // Standard Error: 503_245
            .saturating_add(Weight::from_parts(278_200_889, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_518_000 picoseconds.
        Weight::from_parts(82_218_173, 0)
            // Standard Error: 358_867
            .saturating_add(Weight::from_parts(92_408_337, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_829_368_000 picoseconds.
        Weight::from_parts(1_976_758_302, 0)
            // Standard Error: 349_703
            .saturating_add(Weight::from_parts(163_038_781, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 315_829_000 picoseconds.
        Weight::from_parts(318_464_000, 0)
            // Standard Error: 54_637
            .saturating_add(Weight::from_parts(31_280_567, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_818_937_000 picoseconds.
        Weight::from_parts(1_941_969_566, 0)
            // Standard Error: 412_244
            .saturating_add(Weight::from_parts(220_650_756, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_815_762_000 picoseconds.
        Weight::from_parts(1_958_182_203, 0)
            // Standard Error: 374_381
            .saturating_add(Weight::from_parts(229_106_637, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 259_040_000 picoseconds.
        Weight::from_parts(345_586_401, 0)
            // Standard Error: 402_258
            .saturating_add(Weight::from_parts(274_866_021, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 523_014_000 picoseconds.
        Weight::from_parts(525_681_000, 0)
            // Standard Error: 56_470
            .saturating_add(Weight::from_parts(21_443_571, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_967_181_000 picoseconds.
        Weight::from_parts(2_076_078_781, 0)
            // Standard Error: 455_370
            .saturating_add(Weight::from_parts(246_494_683, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 114_790_000 picoseconds.
        Weight::from_parts(106_908_278, 0)
            // Standard Error: 1_274
            .saturating_add(Weight::from_parts(430_785, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 115_541_000 picoseconds.
        Weight::from_parts(101_956_035, 0)
            // Standard Error: 3_603
            .saturating_add(Weight::from_parts(442_387, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_082_000 picoseconds.
        Weight::from_parts(138_243_307, 0)
            // Standard Error: 409_163
            .saturating_add(Weight::from_parts(154_758_505, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 111_536_000 picoseconds.
        Weight::from_parts(114_497_000, 0)
            // Standard Error: 2_599
            .saturating_add(Weight::from_parts(656_994, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 114_322_000 picoseconds.
        Weight::from_parts(113_131_028, 0)
            // Standard Error: 3_727
            .saturating_add(Weight::from_parts(436_168, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_751_000 picoseconds.
        Weight::from_parts(161_418_174, 0)
            // Standard Error: 6_635
            .saturating_add(Weight::from_parts(405_229, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_524_000 picoseconds.
        Weight::from_parts(89_332_032, 0)
            // Standard Error: 294_566
            .saturating_add(Weight::from_parts(86_798_759, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_216_000 picoseconds.
        Weight::from_parts(83_424_786, 0)
            // Standard Error: 316_301
            .saturating_add(Weight::from_parts(84_774_296, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_461_000 picoseconds.
        Weight::from_parts(97_636_300, 0)
            // Standard Error: 278_297
            .saturating_add(Weight::from_parts(86_743_159, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 724_902_000 picoseconds.
        Weight::from_parts(784_128_285, 0)
            // Standard Error: 444_406
            .saturating_add(Weight::from_parts(105_223_470, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 737_666_000 picoseconds.
        Weight::from_parts(758_797_216, 0)
            // Standard Error: 1_260
            .saturating_add(Weight::from_parts(154_837, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_498_871_000 picoseconds.
        Weight::from_parts(2_688_516_696, 0)
            // Standard Error: 531_545
            .saturating_add(Weight::from_parts(131_060_314, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_657_855_000 picoseconds.
        Weight::from_parts(2_746_003_287, 0)
            // Standard Error: 12_743
            .saturating_add(Weight::from_parts(13_716_214, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_990_000 picoseconds.
        Weight::from_parts(110_812_744, 0)
            // Standard Error: 347_035
            .saturating_add(Weight::from_parts(120_462_128, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 170_244_000 picoseconds.
        Weight::from_parts(175_502_000, 0)
            // Standard Error: 56_203
            .saturating_add(Weight::from_parts(25_870_902, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_676_000 picoseconds.
        Weight::from_parts(91_226_383, 0)
            // Standard Error: 320_296
            .saturating_add(Weight::from_parts(82_761_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 149_319_000 picoseconds.
        Weight::from_parts(230_971_562, 0)
            // Standard Error: 338_138
            .saturating_add(Weight::from_parts(157_262_608, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_167_000 picoseconds.
        Weight::from_parts(178_994_489, 0)
            // Standard Error: 404_012
            .saturating_add(Weight::from_parts(348_487_075, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_645_119_000 picoseconds.
        Weight::from_parts(43_811_648_000, 0)
            // Standard Error: 262_276
            .saturating_add(Weight::from_parts(7_776_587, 0).saturating_mul(p.into()))
            // Standard Error: 262_263
            .saturating_add(Weight::from_parts(178_958_075, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_639_000 picoseconds.
        Weight::from_parts(169_517_206, 0)
            // Standard Error: 363_225
            .saturating_add(Weight::from_parts(357_078_703, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 46_491_851_000 picoseconds.
        Weight::from_parts(46_603_783_000, 0)
            // Standard Error: 280_431
            .saturating_add(Weight::from_parts(7_250_257, 0).saturating_mul(p.into()))
            // Standard Error: 280_417
            .saturating_add(Weight::from_parts(177_722_888, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_721_000 picoseconds.
        Weight::from_parts(114_995_832, 0)
            // Standard Error: 36_809
            .saturating_add(Weight::from_parts(1_873_016, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 97_655_000 picoseconds.
        Weight::from_parts(138_058_498, 1131)
            // Standard Error: 18_813
            .saturating_add(Weight::from_parts(16_311_194, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 96_083_000 picoseconds.
        Weight::from_parts(98_597_000, 1131)
            // Standard Error: 43_515
            .saturating_add(Weight::from_parts(42_632_421, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_196_422_000 picoseconds.
        Weight::from_parts(8_474_214_520, 5069931)
            // Standard Error: 71_564
            .saturating_add(Weight::from_parts(41_738_666, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 93_446_000 picoseconds.
        Weight::from_parts(96_664_000, 1939)
            // Standard Error: 46_722
            .saturating_add(Weight::from_parts(55_567_620, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 106_137_000 picoseconds.
        Weight::from_parts(107_751_954, 1131)
            // Standard Error: 71_200
            .saturating_add(Weight::from_parts(41_236_505, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 758_237_000 picoseconds.
        Weight::from_parts(760_351_083, 1496)
            // Standard Error: 319_479
            .saturating_add(Weight::from_parts(53_277_303, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_299_071_000 picoseconds.
        Weight::from_parts(1_320_542_278, 317931)
            // Standard Error: 364_770
            .saturating_add(Weight::from_parts(53_225_083, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_118_000 picoseconds.
        Weight::from_parts(7_418_987, 0)
            // Standard Error: 299_976
            .saturating_add(Weight::from_parts(77_036_564, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_461_228_000 picoseconds.
        Weight::from_parts(4_172_544_233, 0)
            // Standard Error: 108_717
            .saturating_add(Weight::from_parts(5_492_504, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_440_105_000 picoseconds.
        Weight::from_parts(4_189_326_223, 0)
            // Standard Error: 94_884
            .saturating_add(Weight::from_parts(5_283_060, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_389_557_000 picoseconds.
        Weight::from_parts(11_860_510_711, 0)
            // Standard Error: 156_021
            .saturating_add(Weight::from_parts(9_199_358, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_497_103_000 picoseconds.
        Weight::from_parts(11_330_880_436, 0)
            // Standard Error: 132_247
            .saturating_add(Weight::from_parts(10_016_516, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_381_000 picoseconds.
        Weight::from_parts(2_444_000, 0)
            // Standard Error: 7_402
            .saturating_add(Weight::from_parts(3_876_295, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_405_000 picoseconds.
        Weight::from_parts(481_308, 0)
            // Standard Error: 8_161
            .saturating_add(Weight::from_parts(3_159_957, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_371_000 picoseconds.
        Weight::from_parts(3_249_787, 0)
            // Standard Error: 1_586
            .saturating_add(Weight::from_parts(1_582_965, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_216_000 picoseconds.
        Weight::from_parts(2_300_000, 0)
            // Standard Error: 6_757
            .saturating_add(Weight::from_parts(2_971_649, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_259_000 picoseconds.
        Weight::from_parts(2_872_259, 0)
            // Standard Error: 19_834
            .saturating_add(Weight::from_parts(5_176_111, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_999_000 picoseconds.
        Weight::from_parts(6_015_140, 0)
            // Standard Error: 1_903
            .saturating_add(Weight::from_parts(170_143, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_308_000 picoseconds.
        Weight::from_parts(5_881_148, 0)
            // Standard Error: 9_069
            .saturating_add(Weight::from_parts(2_574_099, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_574_099 -
            2_423_093, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_337_000 picoseconds.
        Weight::from_parts(5_123_036, 0)
            // Standard Error: 12_143
            .saturating_add(Weight::from_parts(2_423_093, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_736_000 picoseconds.
        Weight::from_parts(16_600_828, 0)
            // Standard Error: 30_025
            .saturating_add(Weight::from_parts(10_214_913, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_483_000 picoseconds.
        Weight::from_parts(1_416_669, 0)
            // Standard Error: 5_995
            .saturating_add(Weight::from_parts(1_336_453, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_497_000 picoseconds.
        Weight::from_parts(5_981_231, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_730_000 picoseconds.
        Weight::from_parts(5_851_529, 0)
            // Standard Error: 2_642
            .saturating_add(Weight::from_parts(392_869, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_837_000 picoseconds.
        Weight::from_parts(4_473_635, 0)
            // Standard Error: 5_210
            .saturating_add(Weight::from_parts(1_003_312, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_802_000 picoseconds.
        Weight::from_parts(2_153_776, 0)
            // Standard Error: 11_517
            .saturating_add(Weight::from_parts(1_186_032, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_375_000 picoseconds.
        Weight::from_parts(3_754_449, 0)
            // Standard Error: 5_686
            .saturating_add(Weight::from_parts(763_597, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_475_000 picoseconds.
        Weight::from_parts(266_670, 0)
            // Standard Error: 10_193
            .saturating_add(Weight::from_parts(1_552_777, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_887_000 picoseconds.
        Weight::from_parts(4_333_544, 0)
            // Standard Error: 10_173
            .saturating_add(Weight::from_parts(6_952_830, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_267_000 picoseconds.
        Weight::from_parts(2_351_000, 0)
            // Standard Error: 5_280
            .saturating_add(Weight::from_parts(3_360_413, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_283_000 picoseconds.
        Weight::from_parts(2_357_000, 0)
            // Standard Error: 4_452
            .saturating_add(Weight::from_parts(3_099_489, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_328_000 picoseconds.
        Weight::from_parts(2_417_000, 0)
            // Standard Error: 5_054
            .saturating_add(Weight::from_parts(3_106_996, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_230_000 picoseconds.
        Weight::from_parts(2_296_000, 0)
            // Standard Error: 3_924
            .saturating_add(Weight::from_parts(2_681_831, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_294_000 picoseconds.
        Weight::from_parts(2_438_000, 0)
            // Standard Error: 4_198
            .saturating_add(Weight::from_parts(603_106, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_257_000 picoseconds.
        Weight::from_parts(2_121_941, 0)
            // Standard Error: 3_525
            .saturating_add(Weight::from_parts(401_578, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_224_000 picoseconds.
        Weight::from_parts(2_291_000, 0)
            // Standard Error: 9_436
            .saturating_add(Weight::from_parts(1_891_725, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_273_000 picoseconds.
        Weight::from_parts(2_417_000, 0)
            // Standard Error: 8_255
            .saturating_add(Weight::from_parts(1_289_311, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_276_000 picoseconds.
        Weight::from_parts(1_306_236, 0)
            // Standard Error: 5_275
            .saturating_add(Weight::from_parts(426_430, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_341_000 picoseconds.
        Weight::from_parts(1_669_540, 0)
            // Standard Error: 4_902
            .saturating_add(Weight::from_parts(405_099, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_244_000 picoseconds.
        Weight::from_parts(2_317_000, 0)
            // Standard Error: 3_916
            .saturating_add(Weight::from_parts(552_354, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_316_000 picoseconds.
        Weight::from_parts(2_395_000, 0)
            // Standard Error: 5_375
            .saturating_add(Weight::from_parts(589_608, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(98_911, 0)
            // Standard Error: 7_257
            .saturating_add(Weight::from_parts(581_834, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_293_000 picoseconds.
        Weight::from_parts(1_730_402, 0)
            // Standard Error: 4_194
            .saturating_add(Weight::from_parts(357_287, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_580_000 picoseconds.
        Weight::from_parts(2_927_247, 0)
            // Standard Error: 2_012
            .saturating_add(Weight::from_parts(181_106, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_308_000 picoseconds.
        Weight::from_parts(2_742_236, 0)
            // Standard Error: 2_482
            .saturating_add(Weight::from_parts(187_830, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_324_000 picoseconds.
        Weight::from_parts(2_385_000, 0)
            // Standard Error: 9_154
            .saturating_add(Weight::from_parts(1_858_617, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_237_000 picoseconds.
        Weight::from_parts(2_302_000, 0)
            // Standard Error: 7_801
            .saturating_add(Weight::from_parts(1_226_411, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_265_000 picoseconds.
        Weight::from_parts(2_358_000, 0)
            // Standard Error: 9_102
            .saturating_add(Weight::from_parts(1_866_723, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_267_000 picoseconds.
        Weight::from_parts(2_381_000, 0)
            // Standard Error: 8_629
            .saturating_add(Weight::from_parts(1_209_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_274_000 picoseconds.
        Weight::from_parts(2_330_000, 0)
            // Standard Error: 9_193
            .saturating_add(Weight::from_parts(1_895_140, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_306_000 picoseconds.
        Weight::from_parts(2_394_000, 0)
            // Standard Error: 7_780
            .saturating_add(Weight::from_parts(1_209_776, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_273_000 picoseconds.
        Weight::from_parts(2_395_000, 0)
            // Standard Error: 8_868
            .saturating_add(Weight::from_parts(1_845_417, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_280_000 picoseconds.
        Weight::from_parts(2_360_000, 0)
            // Standard Error: 8_139
            .saturating_add(Weight::from_parts(1_208_611, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_299_000 picoseconds.
        Weight::from_parts(2_335_000, 0)
            // Standard Error: 8_008
            .saturating_add(Weight::from_parts(1_833_636, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_222_000 picoseconds.
        Weight::from_parts(2_376_000, 0)
            // Standard Error: 7_996
            .saturating_add(Weight::from_parts(1_224_203, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_371_000 picoseconds.
        Weight::from_parts(2_421_000, 0)
            // Standard Error: 9_119
            .saturating_add(Weight::from_parts(1_821_158, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_305_000 picoseconds.
        Weight::from_parts(2_418_000, 0)
            // Standard Error: 7_441
            .saturating_add(Weight::from_parts(1_186_995, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_340_000 picoseconds.
        Weight::from_parts(2_362_000, 0)
            // Standard Error: 8_788
            .saturating_add(Weight::from_parts(1_811_701, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_352_000 picoseconds.
        Weight::from_parts(2_431_000, 0)
            // Standard Error: 6_620
            .saturating_add(Weight::from_parts(1_171_906, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_352_000 picoseconds.
        Weight::from_parts(2_380_000, 0)
            // Standard Error: 8_554
            .saturating_add(Weight::from_parts(1_821_955, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_299_000 picoseconds.
        Weight::from_parts(2_389_000, 0)
            // Standard Error: 7_710
            .saturating_add(Weight::from_parts(1_188_722, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_325_000 picoseconds.
        Weight::from_parts(2_387_000, 0)
            // Standard Error: 10_150
            .saturating_add(Weight::from_parts(1_912_877, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_377_000 picoseconds.
        Weight::from_parts(2_423_000, 0)
            // Standard Error: 6_824
            .saturating_add(Weight::from_parts(1_181_831, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_292_000 picoseconds.
        Weight::from_parts(2_384_000, 0)
            // Standard Error: 9_214
            .saturating_add(Weight::from_parts(1_842_825, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_283_000 picoseconds.
        Weight::from_parts(2_344_000, 0)
            // Standard Error: 7_145
            .saturating_add(Weight::from_parts(1_216_207, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_232_000 picoseconds.
        Weight::from_parts(2_391_000, 0)
            // Standard Error: 9_159
            .saturating_add(Weight::from_parts(1_360_135, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_279_000 picoseconds.
        Weight::from_parts(2_379_000, 0)
            // Standard Error: 5_400
            .saturating_add(Weight::from_parts(704_012, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_355_000 picoseconds.
        Weight::from_parts(2_402_000, 0)
            // Standard Error: 8_632
            .saturating_add(Weight::from_parts(1_358_130, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_365_000 picoseconds.
        Weight::from_parts(2_389_000, 0)
            // Standard Error: 4_840
            .saturating_add(Weight::from_parts(658_882, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_209_000 picoseconds.
        Weight::from_parts(2_324_000, 0)
            // Standard Error: 8_679
            .saturating_add(Weight::from_parts(1_840_263, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(2_382_000, 0)
            // Standard Error: 7_484
            .saturating_add(Weight::from_parts(1_255_185, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_369_000 picoseconds.
        Weight::from_parts(6_412_885, 0)
            // Standard Error: 22_130
            .saturating_add(Weight::from_parts(2_376_785, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_266_000 picoseconds.
        Weight::from_parts(2_981_330, 0)
            // Standard Error: 11_996
            .saturating_add(Weight::from_parts(2_322_763, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_240_000 picoseconds.
        Weight::from_parts(7_628_007, 0)
            // Standard Error: 29_510
            .saturating_add(Weight::from_parts(2_483_957, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_387_000 picoseconds.
        Weight::from_parts(4_910_027, 0)
            // Standard Error: 23_548
            .saturating_add(Weight::from_parts(2_233_487, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_297_000 picoseconds.
        Weight::from_parts(16_240_633, 0)
            // Standard Error: 67_100
            .saturating_add(Weight::from_parts(8_506_720, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_234_000 picoseconds.
        Weight::from_parts(2_498_693, 0)
            // Standard Error: 48_996
            .saturating_add(Weight::from_parts(7_513_162, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_221_000 picoseconds.
        Weight::from_parts(5_074_264, 0)
            // Standard Error: 23_109
            .saturating_add(Weight::from_parts(2_727_269, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_283_000 picoseconds.
        Weight::from_parts(2_057_554, 0)
            // Standard Error: 15_404
            .saturating_add(Weight::from_parts(2_428_553, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_250_000 picoseconds.
        Weight::from_parts(2_359_000, 0)
            // Standard Error: 8_133
            .saturating_add(Weight::from_parts(1_333_125, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_251_000 picoseconds.
        Weight::from_parts(2_372_000, 0)
            // Standard Error: 4_205
            .saturating_add(Weight::from_parts(671_074, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_257_000 picoseconds.
        Weight::from_parts(2_323_000, 0)
            // Standard Error: 7_098
            .saturating_add(Weight::from_parts(1_323_703, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_247_000 picoseconds.
        Weight::from_parts(2_372_000, 0)
            // Standard Error: 6_649
            .saturating_add(Weight::from_parts(695_117, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_293_000 picoseconds.
        Weight::from_parts(2_347_000, 0)
            // Standard Error: 7_359
            .saturating_add(Weight::from_parts(1_355_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_239_000 picoseconds.
        Weight::from_parts(2_335_000, 0)
            // Standard Error: 4_076
            .saturating_add(Weight::from_parts(658_834, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_376_000 picoseconds.
        Weight::from_parts(2_444_000, 0)
            // Standard Error: 6_850
            .saturating_add(Weight::from_parts(1_191_253, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_240_000 picoseconds.
        Weight::from_parts(2_310_000, 0)
            // Standard Error: 4_398
            .saturating_add(Weight::from_parts(597_162, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_338_000 picoseconds.
        Weight::from_parts(2_421_000, 0)
            // Standard Error: 8_320
            .saturating_add(Weight::from_parts(1_163_071, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_376_000 picoseconds.
        Weight::from_parts(2_464_000, 0)
            // Standard Error: 5_750
            .saturating_add(Weight::from_parts(613_283, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_338_000 picoseconds.
        Weight::from_parts(2_378_000, 0)
            // Standard Error: 7_893
            .saturating_add(Weight::from_parts(1_161_655, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_260_000 picoseconds.
        Weight::from_parts(2_351_000, 0)
            // Standard Error: 3_972
            .saturating_add(Weight::from_parts(605_013, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_324_000 picoseconds.
        Weight::from_parts(2_375_000, 0)
            // Standard Error: 7_329
            .saturating_add(Weight::from_parts(1_108_542, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_342_000 picoseconds.
        Weight::from_parts(2_465_000, 0)
            // Standard Error: 5_553
            .saturating_add(Weight::from_parts(617_389, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_260_000 picoseconds.
        Weight::from_parts(2_419_000, 0)
            // Standard Error: 8_448
            .saturating_add(Weight::from_parts(1_105_239, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_255_000 picoseconds.
        Weight::from_parts(2_321_000, 0)
            // Standard Error: 5_862
            .saturating_add(Weight::from_parts(626_497, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_resume_session() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `352`
        //  Estimated: `4169`
        // Minimum execution time: 5_780_000 picoseconds.
        Weight::from_parts(6_083_000, 4169)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1039`
        //  Estimated: `23781`
        // Minimum execution time: 62_100_000 picoseconds.
        Weight::from_parts(64_771_000, 23781)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `820`
        //  Estimated: `21750`
        // Minimum execution time: 47_415_000 picoseconds.
        Weight::from_parts(48_906_000, 21750)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `942`
        //  Estimated: `34143`
        // Minimum execution time: 76_882_000 picoseconds.
        Weight::from_parts(79_728_000, 34143)
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `627`
        //  Estimated: `20101`
        // Minimum execution time: 32_342_000 picoseconds.
        Weight::from_parts(33_851_000, 20101)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `908`
        //  Estimated: `26160`
        // Minimum execution time: 50_697_000 picoseconds.
        Weight::from_parts(53_632_000, 26160)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_467_000 picoseconds.
        Weight::from_parts(3_690_000, 3545)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1558`
        //  Estimated: `57552`
        // Minimum execution time: 111_822_000 picoseconds.
        Weight::from_parts(115_245_000, 57552)
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1264`
        //  Estimated: `46350`
        // Minimum execution time: 92_407_000 picoseconds.
        Weight::from_parts(95_840_000, 46350)
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2236 + c * (16400 ±0)`
        //  Estimated: `19543 + c * (84480 ±0)`
        // Minimum execution time: 29_880_000 picoseconds.
        Weight::from_parts(30_555_000, 19543)
            // Standard Error: 65_806
            .saturating_add(Weight::from_parts(39_128_234, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 84480).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program_uninited(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3061 + c * (42 ±0)`
        //  Estimated: `59827 + c * (2947 ±0)`
        // Minimum execution time: 89_781_000 picoseconds.
        Weight::from_parts(109_193_287, 59827)
            // Standard Error: 2_877
            .saturating_add(Weight::from_parts(1_067_792, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2947).saturating_mul(c.into()))
    }
}
