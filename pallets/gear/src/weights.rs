// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-04-20, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("local"), DB CACHE: 1024

// Executed Command:
// ./target/release/gear-node benchmark --chain=local --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./pallets/gear/src/weights.rs --template=./.maintain/gear-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
	fn submit_code(c: u32, ) -> Weight;
	fn submit_program(c: u32, s: u32, ) -> Weight;
	fn send_message(p: u32, ) -> Weight;
	fn send_reply(p: u32, ) -> Weight;
	fn initial_allocation(q: u32, ) -> Weight;
	fn alloc_in_handle(q: u32, ) -> Weight;
	fn reinstrument(c: u32, ) -> Weight;
	fn alloc(r: u32, ) -> Weight;
	fn gas(r: u32, ) -> Weight;
	fn gr_gas_available(r: u32, ) -> Weight;
	fn gr_msg_id(r: u32, ) -> Weight;
	fn gr_origin(r: u32, ) -> Weight;
	fn gr_program_id(r: u32, ) -> Weight;
	fn gr_source(r: u32, ) -> Weight;
	fn gr_value(r: u32, ) -> Weight;
	fn gr_value_available(r: u32, ) -> Weight;
	fn gr_size(r: u32, ) -> Weight;
	fn gr_read(r: u32, ) -> Weight;
	fn gr_read_per_kb(n: u32, ) -> Weight;
	fn gr_block_height(r: u32, ) -> Weight;
	fn gr_block_timestamp(r: u32, ) -> Weight;
	fn gr_send_init(r: u32, ) -> Weight;
	fn gr_send_push(r: u32, ) -> Weight;
	fn gr_send_push_per_kb(n: u32, ) -> Weight;
	fn gr_send_commit(r: u32, ) -> Weight;
	fn gr_send_commit_per_kb(n: u32, ) -> Weight;
	fn gr_reply(r: u32, ) -> Weight;
	fn gr_reply_per_kb(n: u32, ) -> Weight;
	fn gr_reply_to(r: u32, ) -> Weight;
	fn gr_exit_code(r: u32, ) -> Weight;
	fn gr_exit(r: u32, ) -> Weight;
	fn gr_leave(r: u32, ) -> Weight;
	fn gr_wait(r: u32, ) -> Weight;
	fn gr_wake(r: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct GearWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for GearWeight<T> {
	fn submit_code(c: u32, ) -> Weight {
		(5_061_000 as Weight)
			// Standard Error: 0
			.saturating_add((51_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn submit_program(c: u32, s: u32, ) -> Weight {
		(32_150_000 as Weight)
			// Standard Error: 0
			.saturating_add((49_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	fn send_message(_p: u32, ) -> Weight {
		(42_703_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn send_reply(_p: u32, ) -> Weight {
		(41_055_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn initial_allocation(q: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 34_562_000
			.saturating_add((3_106_011_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(18 as Weight))
			.saturating_add(T::DbWeight::get().writes(15 as Weight))
			.saturating_add(T::DbWeight::get().writes((16 as Weight).saturating_mul(q as Weight)))
	}
	fn alloc_in_handle(q: u32, ) -> Weight {
		(236_880_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((16_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(18 as Weight))
			.saturating_add(T::DbWeight::get().writes(31 as Weight))
	}
	fn reinstrument(c: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 0
			.saturating_add((51_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn alloc(r: u32, ) -> Weight {
		(273_565_000 as Weight)
			// Standard Error: 1_650_000
			.saturating_add((417_271_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gas(r: u32, ) -> Weight {
		(250_950_000 as Weight)
			// Standard Error: 157_000
			.saturating_add((63_439_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_gas_available(r: u32, ) -> Weight {
		(267_806_000 as Weight)
			// Standard Error: 541_000
			.saturating_add((62_905_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_msg_id(r: u32, ) -> Weight {
		(302_505_000 as Weight)
			// Standard Error: 640_000
			.saturating_add((78_579_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn gr_origin(r: u32, ) -> Weight {
		(437_266_000 as Weight)
			// Standard Error: 647_000
			.saturating_add((71_412_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn gr_program_id(r: u32, ) -> Weight {
		(376_646_000 as Weight)
			// Standard Error: 1_645_000
			.saturating_add((77_296_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn gr_source(r: u32, ) -> Weight {
		(355_010_000 as Weight)
			// Standard Error: 389_000
			.saturating_add((71_109_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn gr_value(r: u32, ) -> Weight {
		(323_610_000 as Weight)
			// Standard Error: 507_000
			.saturating_add((70_985_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_value_available(r: u32, ) -> Weight {
		(342_057_000 as Weight)
			// Standard Error: 830_000
			.saturating_add((74_932_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn gr_size(r: u32, ) -> Weight {
		(253_505_000 as Weight)
			// Standard Error: 569_000
			.saturating_add((58_156_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_read(r: u32, ) -> Weight {
		(320_792_000 as Weight)
			// Standard Error: 474_000
			.saturating_add((77_914_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_read_per_kb(n: u32, ) -> Weight {
		(269_497_000 as Weight)
			// Standard Error: 323_000
			.saturating_add((30_693_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	fn gr_block_height(r: u32, ) -> Weight {
		(265_300_000 as Weight)
			// Standard Error: 461_000
			.saturating_add((56_893_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_block_timestamp(r: u32, ) -> Weight {
		(233_419_000 as Weight)
			// Standard Error: 592_000
			.saturating_add((73_096_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_send_init(r: u32, ) -> Weight {
		(409_710_000 as Weight)
			// Standard Error: 814_000
			.saturating_add((91_025_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn gr_send_push(r: u32, ) -> Weight {
		(329_601_000 as Weight)
			// Standard Error: 1_883_000
			.saturating_add((204_431_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn gr_send_push_per_kb(n: u32, ) -> Weight {
		(386_632_000 as Weight)
			// Standard Error: 626_000
			.saturating_add((46_331_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn gr_send_commit(r: u32, ) -> Weight {
		(618_129_000 as Weight)
			// Standard Error: 3_633_000
			.saturating_add((894_787_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(15 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
			.saturating_add(T::DbWeight::get().writes((200 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_send_commit_per_kb(n: u32, ) -> Weight {
		(598_521_000 as Weight)
			// Standard Error: 963_000
			.saturating_add((207_054_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(210 as Weight))
	}
	fn gr_reply(r: u32, ) -> Weight {
		(426_726_000 as Weight)
			// Standard Error: 1_294_000
			.saturating_add((104_815_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn gr_reply_per_kb(n: u32, ) -> Weight {
		(537_851_000 as Weight)
			// Standard Error: 170_000
			.saturating_add((1_122_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(16 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	fn gr_reply_to(r: u32, ) -> Weight {
		(254_599_000 as Weight)
			// Standard Error: 181_000
			.saturating_add((5_239_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_exit_code(r: u32, ) -> Weight {
		(223_842_000 as Weight)
			// Standard Error: 96_000
			.saturating_add((7_473_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_exit(r: u32, ) -> Weight {
		(236_200_000 as Weight)
			// Standard Error: 521_000
			.saturating_add((236_700_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().reads((6 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
			.saturating_add(T::DbWeight::get().writes((257 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_leave(r: u32, ) -> Weight {
		(226_300_000 as Weight)
			// Standard Error: 567_000
			.saturating_add((3_800_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_wait(_r: u32, ) -> Weight {
		(230_800_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_wake(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 7_577_000
			.saturating_add((1_809_802_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().reads((101 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
			.saturating_add(T::DbWeight::get().writes((200 as Weight).saturating_mul(r as Weight)))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(9_208_000 as Weight)
			// Standard Error: 44_000
			.saturating_add((1_137_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(88_606_000 as Weight)
			// Standard Error: 125_000
			.saturating_add((2_763_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(79_850_000 as Weight)
			// Standard Error: 71_000
			.saturating_add((1_757_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(17_832_000 as Weight)
			// Standard Error: 51_000
			.saturating_add((1_609_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(16_828_000 as Weight)
			// Standard Error: 54_000
			.saturating_add((1_870_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(27_694_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((488_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(23_338_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((934_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(25_861_000 as Weight)
			// Standard Error: 41_000
			.saturating_add((1_202_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(14_627_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((67_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(10_454_000 as Weight)
			// Standard Error: 32_000
			.saturating_add((3_918_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(21_388_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((4_760_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(24_237_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((415_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(12_150_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((593_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(7_292_000 as Weight)
			// Standard Error: 55_000
			.saturating_add((1_320_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(19_734_000 as Weight)
			// Standard Error: 46_000
			.saturating_add((625_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(11_574_000 as Weight)
			// Standard Error: 58_000
			.saturating_add((1_243_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(17_431_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((661_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(7_366_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((805_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(8_268_000 as Weight)
			// Standard Error: 39_000
			.saturating_add((1_180_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(10_479_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((860_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(10_002_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((872_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(11_977_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((799_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(15_696_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((737_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(13_027_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((796_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(13_664_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((750_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(12_335_000 as Weight)
			// Standard Error: 44_000
			.saturating_add((1_420_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(13_101_000 as Weight)
			// Standard Error: 41_000
			.saturating_add((1_277_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(11_798_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((1_315_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(10_992_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((1_227_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(12_262_000 as Weight)
			// Standard Error: 46_000
			.saturating_add((1_342_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(13_342_000 as Weight)
			// Standard Error: 39_000
			.saturating_add((1_251_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(13_308_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((1_224_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(10_488_000 as Weight)
			// Standard Error: 44_000
			.saturating_add((1_417_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(12_863_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((1_268_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(12_152_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((1_225_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(11_532_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((1_376_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(12_098_000 as Weight)
			// Standard Error: 40_000
			.saturating_add((1_306_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(13_612_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((1_171_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(9_948_000 as Weight)
			// Standard Error: 39_000
			.saturating_add((1_367_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(11_428_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((1_292_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(14_065_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((1_321_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(8_190_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((1_352_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(17_417_000 as Weight)
			// Standard Error: 33_000
			.saturating_add((1_040_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(9_837_000 as Weight)
			// Standard Error: 46_000
			.saturating_add((1_440_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(10_693_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((1_269_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(10_012_000 as Weight)
			// Standard Error: 40_000
			.saturating_add((1_476_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(12_029_000 as Weight)
			// Standard Error: 39_000
			.saturating_add((1_282_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(12_569_000 as Weight)
			// Standard Error: 44_000
			.saturating_add((1_484_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(12_219_000 as Weight)
			// Standard Error: 41_000
			.saturating_add((1_314_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(12_359_000 as Weight)
			// Standard Error: 53_000
			.saturating_add((1_377_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn submit_code(c: u32, ) -> Weight {
		(5_061_000 as Weight)
			// Standard Error: 0
			.saturating_add((51_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn submit_program(c: u32, s: u32, ) -> Weight {
		(32_150_000 as Weight)
			// Standard Error: 0
			.saturating_add((49_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(10 as Weight))
	}
	fn send_message(_p: u32, ) -> Weight {
		(42_703_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn send_reply(_p: u32, ) -> Weight {
		(41_055_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn initial_allocation(q: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 34_562_000
			.saturating_add((3_106_011_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(18 as Weight))
			.saturating_add(RocksDbWeight::get().writes(15 as Weight))
			.saturating_add(RocksDbWeight::get().writes((16 as Weight).saturating_mul(q as Weight)))
	}
	fn alloc_in_handle(q: u32, ) -> Weight {
		(236_880_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((16_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(18 as Weight))
			.saturating_add(RocksDbWeight::get().writes(31 as Weight))
	}
	fn reinstrument(c: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 0
			.saturating_add((51_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn alloc(r: u32, ) -> Weight {
		(273_565_000 as Weight)
			// Standard Error: 1_650_000
			.saturating_add((417_271_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gas(r: u32, ) -> Weight {
		(250_950_000 as Weight)
			// Standard Error: 157_000
			.saturating_add((63_439_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_gas_available(r: u32, ) -> Weight {
		(267_806_000 as Weight)
			// Standard Error: 541_000
			.saturating_add((62_905_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_msg_id(r: u32, ) -> Weight {
		(302_505_000 as Weight)
			// Standard Error: 640_000
			.saturating_add((78_579_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn gr_origin(r: u32, ) -> Weight {
		(437_266_000 as Weight)
			// Standard Error: 647_000
			.saturating_add((71_412_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn gr_program_id(r: u32, ) -> Weight {
		(376_646_000 as Weight)
			// Standard Error: 1_645_000
			.saturating_add((77_296_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn gr_source(r: u32, ) -> Weight {
		(355_010_000 as Weight)
			// Standard Error: 389_000
			.saturating_add((71_109_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn gr_value(r: u32, ) -> Weight {
		(323_610_000 as Weight)
			// Standard Error: 507_000
			.saturating_add((70_985_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_value_available(r: u32, ) -> Weight {
		(342_057_000 as Weight)
			// Standard Error: 830_000
			.saturating_add((74_932_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn gr_size(r: u32, ) -> Weight {
		(253_505_000 as Weight)
			// Standard Error: 569_000
			.saturating_add((58_156_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_read(r: u32, ) -> Weight {
		(320_792_000 as Weight)
			// Standard Error: 474_000
			.saturating_add((77_914_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_read_per_kb(n: u32, ) -> Weight {
		(269_497_000 as Weight)
			// Standard Error: 323_000
			.saturating_add((30_693_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	fn gr_block_height(r: u32, ) -> Weight {
		(265_300_000 as Weight)
			// Standard Error: 461_000
			.saturating_add((56_893_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_block_timestamp(r: u32, ) -> Weight {
		(233_419_000 as Weight)
			// Standard Error: 592_000
			.saturating_add((73_096_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_send_init(r: u32, ) -> Weight {
		(409_710_000 as Weight)
			// Standard Error: 814_000
			.saturating_add((91_025_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn gr_send_push(r: u32, ) -> Weight {
		(329_601_000 as Weight)
			// Standard Error: 1_883_000
			.saturating_add((204_431_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn gr_send_push_per_kb(n: u32, ) -> Weight {
		(386_632_000 as Weight)
			// Standard Error: 626_000
			.saturating_add((46_331_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn gr_send_commit(r: u32, ) -> Weight {
		(618_129_000 as Weight)
			// Standard Error: 3_633_000
			.saturating_add((894_787_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(15 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes((200 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_send_commit_per_kb(n: u32, ) -> Weight {
		(598_521_000 as Weight)
			// Standard Error: 963_000
			.saturating_add((207_054_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(210 as Weight))
	}
	fn gr_reply(r: u32, ) -> Weight {
		(426_726_000 as Weight)
			// Standard Error: 1_294_000
			.saturating_add((104_815_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn gr_reply_per_kb(n: u32, ) -> Weight {
		(537_851_000 as Weight)
			// Standard Error: 170_000
			.saturating_add((1_122_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(16 as Weight))
			.saturating_add(RocksDbWeight::get().writes(10 as Weight))
	}
	fn gr_reply_to(r: u32, ) -> Weight {
		(254_599_000 as Weight)
			// Standard Error: 181_000
			.saturating_add((5_239_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_exit_code(r: u32, ) -> Weight {
		(223_842_000 as Weight)
			// Standard Error: 96_000
			.saturating_add((7_473_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_exit(r: u32, ) -> Weight {
		(236_200_000 as Weight)
			// Standard Error: 521_000
			.saturating_add((236_700_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().reads((6 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes((257 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_leave(r: u32, ) -> Weight {
		(226_300_000 as Weight)
			// Standard Error: 567_000
			.saturating_add((3_800_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_wait(_r: u32, ) -> Weight {
		(230_800_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_wake(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 7_577_000
			.saturating_add((1_809_802_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().reads((101 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes((200 as Weight).saturating_mul(r as Weight)))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(9_208_000 as Weight)
			// Standard Error: 44_000
			.saturating_add((1_137_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(88_606_000 as Weight)
			// Standard Error: 125_000
			.saturating_add((2_763_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(79_850_000 as Weight)
			// Standard Error: 71_000
			.saturating_add((1_757_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(17_832_000 as Weight)
			// Standard Error: 51_000
			.saturating_add((1_609_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(16_828_000 as Weight)
			// Standard Error: 54_000
			.saturating_add((1_870_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(27_694_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((488_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(23_338_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((934_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(25_861_000 as Weight)
			// Standard Error: 41_000
			.saturating_add((1_202_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(14_627_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((67_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(10_454_000 as Weight)
			// Standard Error: 32_000
			.saturating_add((3_918_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(21_388_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((4_760_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(24_237_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((415_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(12_150_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((593_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(7_292_000 as Weight)
			// Standard Error: 55_000
			.saturating_add((1_320_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(19_734_000 as Weight)
			// Standard Error: 46_000
			.saturating_add((625_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(11_574_000 as Weight)
			// Standard Error: 58_000
			.saturating_add((1_243_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(17_431_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((661_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(7_366_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((805_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(8_268_000 as Weight)
			// Standard Error: 39_000
			.saturating_add((1_180_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(10_479_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((860_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(10_002_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((872_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(11_977_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((799_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(15_696_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((737_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(13_027_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((796_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(13_664_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((750_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(12_335_000 as Weight)
			// Standard Error: 44_000
			.saturating_add((1_420_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(13_101_000 as Weight)
			// Standard Error: 41_000
			.saturating_add((1_277_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(11_798_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((1_315_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(10_992_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((1_227_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(12_262_000 as Weight)
			// Standard Error: 46_000
			.saturating_add((1_342_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(13_342_000 as Weight)
			// Standard Error: 39_000
			.saturating_add((1_251_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(13_308_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((1_224_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(10_488_000 as Weight)
			// Standard Error: 44_000
			.saturating_add((1_417_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(12_863_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((1_268_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(12_152_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((1_225_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(11_532_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((1_376_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(12_098_000 as Weight)
			// Standard Error: 40_000
			.saturating_add((1_306_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(13_612_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((1_171_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(9_948_000 as Weight)
			// Standard Error: 39_000
			.saturating_add((1_367_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(11_428_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((1_292_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(14_065_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((1_321_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(8_190_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((1_352_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(17_417_000 as Weight)
			// Standard Error: 33_000
			.saturating_add((1_040_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(9_837_000 as Weight)
			// Standard Error: 46_000
			.saturating_add((1_440_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(10_693_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((1_269_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(10_012_000 as Weight)
			// Standard Error: 40_000
			.saturating_add((1_476_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(12_029_000 as Weight)
			// Standard Error: 39_000
			.saturating_add((1_282_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(12_569_000 as Weight)
			// Standard Error: 44_000
			.saturating_add((1_484_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(12_219_000 as Weight)
			// Standard Error: 41_000
			.saturating_add((1_314_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(12_359_000 as Weight)
			// Standard Error: 53_000
			.saturating_add((1_377_000 as Weight).saturating_mul(r as Weight))
	}
}
