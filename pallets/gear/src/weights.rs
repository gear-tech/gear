// This file is part of Gear.

// Copyright (C) 2022-2024 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-04-03, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=alloc,alloc_per_page,claim_value,create_program,db_read_per_kb,db_write_per_kb,free,free_range,free_range_per_page,gr_block_height,gr_block_timestamp,gr_create_program,gr_create_program_per_kb,gr_create_program_wgas,gr_create_program_wgas_per_kb,gr_debug,gr_debug_per_kb,gr_env_vars,gr_gas_available,gr_message_id,gr_program_id,gr_random,gr_read,gr_read_per_kb,gr_reply_code,gr_reply_deposit,gr_reply_per_kb,gr_reply_push,gr_reply_push_input,gr_reply_push_input_per_kb,gr_reply_push_per_kb,gr_reply_to,gr_reply_wgas_per_kb,gr_reservation_reply_commit_per_kb,gr_reservation_reply_per_kb,gr_reservation_send,gr_reservation_send_commit,gr_reservation_send_per_kb,gr_reserve_gas,gr_send,gr_send_commit,gr_send_commit_wgas,gr_send_init,gr_send_input,gr_send_input_wgas,gr_send_per_kb,gr_send_push,gr_send_push_input,gr_send_push_input_per_kb,gr_send_push_per_kb,gr_send_wgas,gr_send_wgas_per_kb,gr_signal_code,gr_signal_from,gr_size,gr_source,gr_system_reserve_gas,gr_unreserve_gas,gr_value,gr_value_available,gr_wake,instantiate_module_per_kb,instr_br,instr_br_if,instr_br_table,instr_br_table_per_entry,instr_call,instr_call_const,instr_call_indirect,instr_call_indirect_per_param,instr_call_per_local,instr_global_get,instr_global_set,instr_i32add,instr_i32and,instr_i32clz,instr_i32ctz,instr_i32divs,instr_i32divu,instr_i32eq,instr_i32eqz,instr_i32extend16s,instr_i32extend8s,instr_i32ges,instr_i32geu,instr_i32gts,instr_i32gtu,instr_i32les,instr_i32leu,instr_i32load,instr_i32lts,instr_i32ltu,instr_i32mul,instr_i32ne,instr_i32or,instr_i32popcnt,instr_i32rems,instr_i32remu,instr_i32rotl,instr_i32rotr,instr_i32shl,instr_i32shrs,instr_i32shru,instr_i32store,instr_i32sub,instr_i32wrapi64,instr_i32xor,instr_i64add,instr_i64and,instr_i64clz,instr_i64ctz,instr_i64divs,instr_i64divu,instr_i64eq,instr_i64eqz,instr_i64extend16s,instr_i64extend32s,instr_i64extend8s,instr_i64extendsi32,instr_i64extendui32,instr_i64ges,instr_i64geu,instr_i64gts,instr_i64gtu,instr_i64les,instr_i64leu,instr_i64load,instr_i64lts,instr_i64ltu,instr_i64mul,instr_i64ne,instr_i64or,instr_i64popcnt,instr_i64rems,instr_i64remu,instr_i64rotl,instr_i64rotr,instr_i64shl,instr_i64shrs,instr_i64shru,instr_i64store,instr_i64sub,instr_i64xor,instr_if,instr_local_get,instr_local_set,instr_local_tee,instr_memory_current,instr_select,lazy_pages_host_func_read,lazy_pages_host_func_write,lazy_pages_host_func_write_after_read,lazy_pages_load_page_storage_data,lazy_pages_signal_read,lazy_pages_signal_write,lazy_pages_signal_write_after_read,mem_grow,reinstrument_per_kb,send_message,send_reply,tasks_remove_from_mailbox,tasks_remove_from_waitlist,tasks_remove_gas_reservation,tasks_send_dispatch,tasks_send_user_message,tasks_send_user_message_to_mailbox,tasks_wake_message,tasks_wake_message_no_wake,upload_code,upload_program --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn free_range(r: u32, ) -> Weight;
    fn free_range_per_page(p: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_env_vars(r: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn tasks_remove_gas_reservation() -> Weight;
    fn tasks_send_user_message_to_mailbox() -> Weight;
    fn tasks_send_user_message() -> Weight;
    fn tasks_send_dispatch() -> Weight;
    fn tasks_wake_message() -> Weight;
    fn tasks_wake_message_no_wake() -> Weight;
    fn tasks_remove_from_waitlist() -> Weight;
    fn tasks_remove_from_mailbox() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 64_154_000 picoseconds.
        Weight::from_parts(66_815_520, 2928)
            // Standard Error: 42_126
            .saturating_add(Weight::from_parts(34_918_734, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 64_839_000 picoseconds.
        Weight::from_parts(67_721_398, 2928)
            // Standard Error: 42_597
            .saturating_add(Weight::from_parts(34_972_126, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 63_392_000 picoseconds.
        Weight::from_parts(66_171_496, 2928)
            // Standard Error: 41_719
            .saturating_add(Weight::from_parts(33_489_262, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 63_494_000 picoseconds.
        Weight::from_parts(66_268_430, 2928)
            // Standard Error: 42_997
            .saturating_add(Weight::from_parts(31_646_128, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 530_537_000 picoseconds.
        Weight::from_parts(545_565_486, 2928)
            // Standard Error: 301_584
            .saturating_add(Weight::from_parts(51_191_750, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 526_819_000 picoseconds.
        Weight::from_parts(533_699_612, 2928)
            // Standard Error: 271_533
            .saturating_add(Weight::from_parts(53_968_252, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 79_420_000 picoseconds.
        Weight::from_parts(82_971_780, 2928)
            // Standard Error: 45_143
            .saturating_add(Weight::from_parts(18_670_382, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 74_824_000 picoseconds.
        Weight::from_parts(77_797_170, 2928)
            // Standard Error: 41_245
            .saturating_add(Weight::from_parts(24_797_420, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 61_610_000 picoseconds.
        Weight::from_parts(64_477_652, 2928)
            // Standard Error: 41_493
            .saturating_add(Weight::from_parts(28_349_924, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_833_000 picoseconds.
        Weight::from_parts(64_636_340, 0)
            // Standard Error: 40_280
            .saturating_add(Weight::from_parts(13_670_732, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_755_000 picoseconds.
        Weight::from_parts(66_629_408, 0)
            // Standard Error: 40_085
            .saturating_add(Weight::from_parts(10_707_758, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_481_000 picoseconds.
        Weight::from_parts(65_047_980, 0)
            // Standard Error: 40_147
            .saturating_add(Weight::from_parts(10_903_200, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_679_000 picoseconds.
        Weight::from_parts(64_347_232, 0)
            // Standard Error: 42_721
            .saturating_add(Weight::from_parts(14_040_232, 0).saturating_mul(r.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 911_000 picoseconds.
        Weight::from_parts(1_008_000, 0)
            // Standard Error: 903
            .saturating_add(Weight::from_parts(217_404, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_317_000 picoseconds.
        Weight::from_parts(3_431_000, 3610)
            // Standard Error: 1_128
            .saturating_add(Weight::from_parts(654_538, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 33_863_000 picoseconds.
        Weight::from_parts(29_623_855, 0)
            // Standard Error: 3_072
            .saturating_add(Weight::from_parts(262_272, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1321`
        //  Estimated: `8799`
        // Minimum execution time: 142_558_000 picoseconds.
        Weight::from_parts(145_795_000, 8799)
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `3578`
        // Minimum execution time: 100_615_000 picoseconds.
        Weight::from_parts(69_922_121, 3578)
            // Standard Error: 49_400
            .saturating_add(Weight::from_parts(62_753_036, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `991`
        //  Estimated: `4456`
        // Minimum execution time: 131_931_000 picoseconds.
        Weight::from_parts(173_949_450, 4456)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_263, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `379`
        //  Estimated: `3844`
        // Minimum execution time: 9_771_518_000 picoseconds.
        Weight::from_parts(298_334_574, 3844)
            // Standard Error: 110_901
            .saturating_add(Weight::from_parts(64_025_579, 0).saturating_mul(c.into()))
            // Standard Error: 6
            .saturating_add(Weight::from_parts(2_263, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `480`
        //  Estimated: `6196`
        // Minimum execution time: 110_322_000 picoseconds.
        Weight::from_parts(76_209_319, 6196)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(935, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1320`
        //  Estimated: `8799`
        // Minimum execution time: 176_157_000 picoseconds.
        Weight::from_parts(146_455_876, 8799)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(964, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3682 + c * (1075 ±0)`
        // Minimum execution time: 82_072_000 picoseconds.
        Weight::from_parts(82_460_000, 3682)
            // Standard Error: 18_067
            .saturating_add(Weight::from_parts(61_613_310, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1075).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 56_973_000 picoseconds.
        Weight::from_parts(59_052_000, 0)
            // Standard Error: 2_056_919
            .saturating_add(Weight::from_parts(488_175_088, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 382_171_000 picoseconds.
        Weight::from_parts(334_853_627, 0)
            // Standard Error: 6_932
            .saturating_add(Weight::from_parts(18_698_745, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 160_533_000 picoseconds.
        Weight::from_parts(157_387_894, 0)
            // Standard Error: 78_626
            .saturating_add(Weight::from_parts(49_615_896, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 162_459_000 picoseconds.
        Weight::from_parts(158_186_415, 0)
            // Standard Error: 79_361
            .saturating_add(Weight::from_parts(61_096_700, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 20]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 226_136_000 picoseconds.
        Weight::from_parts(216_097_299, 0)
            // Standard Error: 53_651
            .saturating_add(Weight::from_parts(5_010_803, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 61_644_000 picoseconds.
        Weight::from_parts(84_948_302, 3606)
            // Standard Error: 3_791
            .saturating_add(Weight::from_parts(2_196_938, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `6081`
        // Minimum execution time: 103_098_000 picoseconds.
        Weight::from_parts(136_114_907, 6081)
            // Standard Error: 4_571
            .saturating_add(Weight::from_parts(1_933_513, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 60_503_000 picoseconds.
        Weight::from_parts(92_179_640, 3606)
            // Standard Error: 91_230
            .saturating_add(Weight::from_parts(83_523_256, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 61_892_000 picoseconds.
        Weight::from_parts(90_534_725, 3606)
            // Standard Error: 77_483
            .saturating_add(Weight::from_parts(73_789_919, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 60_747_000 picoseconds.
        Weight::from_parts(92_043_633, 3606)
            // Standard Error: 78_076
            .saturating_add(Weight::from_parts(74_197_633, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 59_561_000 picoseconds.
        Weight::from_parts(87_021_682, 3606)
            // Standard Error: 73_687
            .saturating_add(Weight::from_parts(74_405_559, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 60_242_000 picoseconds.
        Weight::from_parts(88_165_206, 3606)
            // Standard Error: 74_593
            .saturating_add(Weight::from_parts(75_419_565, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 61_115_000 picoseconds.
        Weight::from_parts(87_854_061, 3606)
            // Standard Error: 71_032
            .saturating_add(Weight::from_parts(75_335_195, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 61_614_000 picoseconds.
        Weight::from_parts(92_276_628, 3606)
            // Standard Error: 75_224
            .saturating_add(Weight::from_parts(73_688_278, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 60_094_000 picoseconds.
        Weight::from_parts(91_018_805, 3606)
            // Standard Error: 79_234
            .saturating_add(Weight::from_parts(73_898_536, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 549_875_000 picoseconds.
        Weight::from_parts(638_089_992, 3606)
            // Standard Error: 322_684
            .saturating_add(Weight::from_parts(127_618_521, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 688_973_000 picoseconds.
        Weight::from_parts(694_496_000, 2529)
            // Standard Error: 60_729
            .saturating_add(Weight::from_parts(14_147_525, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 61_172_000 picoseconds.
        Weight::from_parts(91_312_934, 3606)
            // Standard Error: 81_177
            .saturating_add(Weight::from_parts(83_015_381, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 61_827_000 picoseconds.
        Weight::from_parts(91_876_246, 3606)
            // Standard Error: 81_275
            .saturating_add(Weight::from_parts(73_701_575, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 61_260_000 picoseconds.
        Weight::from_parts(92_084_763, 3606)
            // Standard Error: 80_823
            .saturating_add(Weight::from_parts(73_783_949, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 61_509_000 picoseconds.
        Weight::from_parts(91_502_617, 3606)
            // Standard Error: 93_225
            .saturating_add(Weight::from_parts(155_448_471, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 63_907_000 picoseconds.
        Weight::from_parts(65_341_000, 3606)
            // Standard Error: 3_875_330
            .saturating_add(Weight::from_parts(749_474_777, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 64_094_000 picoseconds.
        Weight::from_parts(92_186_867, 3606)
            // Standard Error: 170_110
            .saturating_add(Weight::from_parts(250_942_961, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 319_769_000 picoseconds.
        Weight::from_parts(322_972_000, 2529)
            // Standard Error: 42_246
            .saturating_add(Weight::from_parts(34_803_214, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 61_585_000 picoseconds.
        Weight::from_parts(87_993_167, 3606)
            // Standard Error: 162_552
            .saturating_add(Weight::from_parts(253_888_861, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 322_526_000 picoseconds.
        Weight::from_parts(324_233_000, 2529)
            // Standard Error: 55_143
            .saturating_add(Weight::from_parts(34_195_916, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 533_864_000 picoseconds.
        Weight::from_parts(563_677_647, 3606)
            // Standard Error: 207_545
            .saturating_add(Weight::from_parts(241_230_285, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 535_936_000 picoseconds.
        Weight::from_parts(557_348_734, 3606)
            // Standard Error: 171_731
            .saturating_add(Weight::from_parts(244_609_311, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 63_901_000 picoseconds.
        Weight::from_parts(87_817_514, 3606)
            // Standard Error: 67_167
            .saturating_add(Weight::from_parts(80_996_241, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 1_692_263_000 picoseconds.
        Weight::from_parts(1_706_950_634, 3606)
            // Standard Error: 133_977
            .saturating_add(Weight::from_parts(162_309_131, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 281_037_000 picoseconds.
        Weight::from_parts(282_525_000, 2529)
            // Standard Error: 56_305
            .saturating_add(Weight::from_parts(34_660_572, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 1_690_327_000 picoseconds.
        Weight::from_parts(1_713_120_495, 3606)
            // Standard Error: 180_088
            .saturating_add(Weight::from_parts(209_316_895, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 1_688_859_000 picoseconds.
        Weight::from_parts(1_721_611_813, 3606)
            // Standard Error: 222_987
            .saturating_add(Weight::from_parts(212_043_906, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5234 + r * (905 ±7)`
        // Minimum execution time: 150_182_000 picoseconds.
        Weight::from_parts(173_844_321, 5234)
            // Standard Error: 195_420
            .saturating_add(Weight::from_parts(271_858_048, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 905).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `6944 + n * (155 ±0)`
        // Minimum execution time: 424_320_000 picoseconds.
        Weight::from_parts(430_356_000, 6944)
            // Standard Error: 47_059
            .saturating_add(Weight::from_parts(34_787_593, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `7356 + r * (932 ±6)`
        // Minimum execution time: 1_776_025_000 picoseconds.
        Weight::from_parts(1_810_064_088, 7356)
            // Standard Error: 191_248
            .saturating_add(Weight::from_parts(227_672_683, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(Weight::from_parts(0, 932).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 99_350_000 picoseconds.
        Weight::from_parts(83_406_311, 2529)
            // Standard Error: 1_245
            .saturating_add(Weight::from_parts(707_031, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 100_647_000 picoseconds.
        Weight::from_parts(94_020_935, 2529)
            // Standard Error: 1_257
            .saturating_add(Weight::from_parts(695_298, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 62_522_000 picoseconds.
        Weight::from_parts(101_801_587, 3606)
            // Standard Error: 196_033
            .saturating_add(Weight::from_parts(133_866_192, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2439 + n * (155 ±0)`
        // Minimum execution time: 94_559_000 picoseconds.
        Weight::from_parts(96_257_000, 2439)
            // Standard Error: 2_488
            .saturating_add(Weight::from_parts(779_758, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 99_637_000 picoseconds.
        Weight::from_parts(94_310_543, 2529)
            // Standard Error: 1_290
            .saturating_add(Weight::from_parts(708_083, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 98_600_000 picoseconds.
        Weight::from_parts(90_705_335, 2529)
            // Standard Error: 1_011
            .saturating_add(Weight::from_parts(694_573, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 60_530_000 picoseconds.
        Weight::from_parts(91_470_051, 3606)
            // Standard Error: 89_311
            .saturating_add(Weight::from_parts(76_012_990, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 63_074_000 picoseconds.
        Weight::from_parts(93_580_484, 3606)
            // Standard Error: 76_318
            .saturating_add(Weight::from_parts(73_408_619, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 61_991_000 picoseconds.
        Weight::from_parts(97_317_936, 3606)
            // Standard Error: 84_186
            .saturating_add(Weight::from_parts(74_897_678, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 537_269_000 picoseconds.
        Weight::from_parts(590_324_306, 3606)
            // Standard Error: 120_086
            .saturating_add(Weight::from_parts(92_623_770, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 564_680_000 picoseconds.
        Weight::from_parts(585_062_114, 3606)
            // Standard Error: 1_271
            .saturating_add(Weight::from_parts(167_793, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 2_255_756_000 picoseconds.
        Weight::from_parts(2_277_987_652, 3606)
            // Standard Error: 278_406
            .saturating_add(Weight::from_parts(124_123_135, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 2_326_862_000 picoseconds.
        Weight::from_parts(2_184_787_501, 3606)
            // Standard Error: 10_473
            .saturating_add(Weight::from_parts(12_491_631, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 63_036_000 picoseconds.
        Weight::from_parts(82_793_907, 3606)
            // Standard Error: 207_592
            .saturating_add(Weight::from_parts(99_060_797, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2439 + n * (155 ±0)`
        // Minimum execution time: 116_521_000 picoseconds.
        Weight::from_parts(118_104_000, 2439)
            // Standard Error: 56_044
            .saturating_add(Weight::from_parts(30_725_621, 0).saturating_mul(n.into()))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 62_473_000 picoseconds.
        Weight::from_parts(95_579_126, 3606)
            // Standard Error: 81_475
            .saturating_add(Weight::from_parts(73_294_224, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5160 + r * (351 ±5)`
        // Minimum execution time: 105_780_000 picoseconds.
        Weight::from_parts(107_598_000, 5160)
            // Standard Error: 1_553_645
            .saturating_add(Weight::from_parts(279_306_310, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 351).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 79_575_000 picoseconds.
        Weight::from_parts(89_330_073, 3606)
            // Standard Error: 184_912
            .saturating_add(Weight::from_parts(322_762_190, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2709 + p * (155 ±0) + s * (155 ±0)`
        // Minimum execution time: 51_067_093_000 picoseconds.
        Weight::from_parts(51_152_052_000, 2709)
            // Standard Error: 300_275
            .saturating_add(Weight::from_parts(9_186_553, 0).saturating_mul(p.into()))
            // Standard Error: 300_260
            .saturating_add(Weight::from_parts(155_605_181, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(p.into()))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 82_680_000 picoseconds.
        Weight::from_parts(91_411_195, 3606)
            // Standard Error: 174_220
            .saturating_add(Weight::from_parts(328_619_769, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2709 + p * (155 ±0) + s * (155 ±0)`
        // Minimum execution time: 52_301_093_000 picoseconds.
        Weight::from_parts(52_383_715_000, 2709)
            // Standard Error: 296_192
            .saturating_add(Weight::from_parts(8_171_757, 0).saturating_mul(p.into()))
            // Standard Error: 296_178
            .saturating_add(Weight::from_parts(155_642_833, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(p.into()))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 62_723_000 picoseconds.
        Weight::from_parts(103_421_094, 1131)
            // Standard Error: 19_750
            .saturating_add(Weight::from_parts(14_621_850, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 61_270_000 picoseconds.
        Weight::from_parts(62_163_000, 1131)
            // Standard Error: 22_436
            .saturating_add(Weight::from_parts(41_323_144, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 7_488_254_000 picoseconds.
        Weight::from_parts(7_402_148_277, 5069931)
            // Standard Error: 59_957
            .saturating_add(Weight::from_parts(42_678_346, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1820 + p * (65580 ±0)`
        //  Estimated: `1946 + p * (75482 ±0)`
        // Minimum execution time: 63_660_000 picoseconds.
        Weight::from_parts(65_378_000, 1946)
            // Standard Error: 27_846
            .saturating_add(Weight::from_parts(55_541_004, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 68_503_000 picoseconds.
        Weight::from_parts(69_991_098, 1131)
            // Standard Error: 72_307
            .saturating_add(Weight::from_parts(44_316_231, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 579_536_000 picoseconds.
        Weight::from_parts(573_693_069, 1496)
            // Standard Error: 117_929
            .saturating_add(Weight::from_parts(50_341_200, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_043_789_000 picoseconds.
        Weight::from_parts(1_078_386_552, 317931)
            // Standard Error: 310_154
            .saturating_add(Weight::from_parts(55_644_059, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_718_000 picoseconds.
        Weight::from_parts(2_848_000, 0)
            // Standard Error: 256_248
            .saturating_add(Weight::from_parts(88_479_087, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_490_693_000 picoseconds.
        Weight::from_parts(4_565_933_370, 0)
            // Standard Error: 16_112
            .saturating_add(Weight::from_parts(3_261_369, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_519_351_000 picoseconds.
        Weight::from_parts(4_542_028_058, 0)
            // Standard Error: 12_672
            .saturating_add(Weight::from_parts(3_356_412, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_141_773_000 picoseconds.
        Weight::from_parts(10_612_889_641, 0)
            // Standard Error: 114_491
            .saturating_add(Weight::from_parts(7_856_426, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_243_931_000 picoseconds.
        Weight::from_parts(10_584_526_794, 0)
            // Standard Error: 168_804
            .saturating_add(Weight::from_parts(8_582_123, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_146_000 picoseconds.
        Weight::from_parts(1_196_000, 0)
            // Standard Error: 22_790
            .saturating_add(Weight::from_parts(2_702_409, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_212_000 picoseconds.
        Weight::from_parts(1_237_000, 0)
            // Standard Error: 19_091
            .saturating_add(Weight::from_parts(2_679_051, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_168_000 picoseconds.
        Weight::from_parts(406_257, 0)
            // Standard Error: 2_657
            .saturating_add(Weight::from_parts(1_572_345, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_222_000 picoseconds.
        Weight::from_parts(1_245_000, 0)
            // Standard Error: 2_011
            .saturating_add(Weight::from_parts(1_808_575, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_186_000 picoseconds.
        Weight::from_parts(1_271_000, 0)
            // Standard Error: 26_714
            .saturating_add(Weight::from_parts(4_277_100, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_255_000 picoseconds.
        Weight::from_parts(5_056_587, 0)
            // Standard Error: 703
            .saturating_add(Weight::from_parts(41_868, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_153_000 picoseconds.
        Weight::from_parts(2_955_412, 0)
            // Standard Error: 10_267
            .saturating_add(Weight::from_parts(2_416_384, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_416_384 -
            2_306_104, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_271_000 picoseconds.
        Weight::from_parts(778_736, 0)
            // Standard Error: 12_180
            .saturating_add(Weight::from_parts(2_306_104, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_231_000 picoseconds.
        Weight::from_parts(415_099, 0)
            // Standard Error: 39_639
            .saturating_add(Weight::from_parts(7_642_328, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_936_000 picoseconds.
        Weight::from_parts(557_914, 0)
            // Standard Error: 5_912
            .saturating_add(Weight::from_parts(603_873, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_606_000 picoseconds.
        Weight::from_parts(2_788_841, 0)
            // Standard Error: 11
            .saturating_add(Weight::from_parts(42, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_645_000 picoseconds.
        Weight::from_parts(6_764_281, 0)
            // Standard Error: 3_582
            .saturating_add(Weight::from_parts(371_816, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_650_000 picoseconds.
        Weight::from_parts(7_478_052, 0)
            // Standard Error: 3_657
            .saturating_add(Weight::from_parts(732_216, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_677_000 picoseconds.
        Weight::from_parts(6_398_009, 0)
            // Standard Error: 6_427
            .saturating_add(Weight::from_parts(888_335, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_243_000 picoseconds.
        Weight::from_parts(5_474_834, 0)
            // Standard Error: 1_576
            .saturating_add(Weight::from_parts(321_837, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_263_000 picoseconds.
        Weight::from_parts(5_829_564, 0)
            // Standard Error: 3_349
            .saturating_add(Weight::from_parts(512_194, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_697_000 picoseconds.
        Weight::from_parts(6_236_698, 0)
            // Standard Error: 2_064
            .saturating_add(Weight::from_parts(5_846_033, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_166_000 picoseconds.
        Weight::from_parts(19_850, 0)
            // Standard Error: 4_825
            .saturating_add(Weight::from_parts(2_072_547, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_188_000 picoseconds.
        Weight::from_parts(1_210_000, 0)
            // Standard Error: 5_693
            .saturating_add(Weight::from_parts(2_096_915, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_224_000 picoseconds.
        Weight::from_parts(1_273_000, 0)
            // Standard Error: 2_839
            .saturating_add(Weight::from_parts(1_955_735, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_184_000 picoseconds.
        Weight::from_parts(1_789_041, 0)
            // Standard Error: 13_722
            .saturating_add(Weight::from_parts(1_887_550, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_210_000 picoseconds.
        Weight::from_parts(1_334_466, 0)
            // Standard Error: 3_521
            .saturating_add(Weight::from_parts(375_602, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_208_000 picoseconds.
        Weight::from_parts(1_727_538, 0)
            // Standard Error: 1_685
            .saturating_add(Weight::from_parts(251_989, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_194_000 picoseconds.
        Weight::from_parts(1_447_940, 0)
            // Standard Error: 6_765
            .saturating_add(Weight::from_parts(699_757, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_193_000 picoseconds.
        Weight::from_parts(306_655, 0)
            // Standard Error: 4_065
            .saturating_add(Weight::from_parts(598_994, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_179_000 picoseconds.
        Weight::from_parts(1_322_373, 0)
            // Standard Error: 3_394
            .saturating_add(Weight::from_parts(287_385, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_237_000 picoseconds.
        Weight::from_parts(1_125_066, 0)
            // Standard Error: 2_983
            .saturating_add(Weight::from_parts(300_317, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_136_000 picoseconds.
        Weight::from_parts(1_364_426, 0)
            // Standard Error: 2_082
            .saturating_add(Weight::from_parts(345_833, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_182_000 picoseconds.
        Weight::from_parts(990_677, 0)
            // Standard Error: 3_336
            .saturating_add(Weight::from_parts(359_249, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_194_000 picoseconds.
        Weight::from_parts(1_462_677, 0)
            // Standard Error: 1_911
            .saturating_add(Weight::from_parts(303_386, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_159_000 picoseconds.
        Weight::from_parts(1_191_584, 0)
            // Standard Error: 1_516
            .saturating_add(Weight::from_parts(227_040, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_155_000 picoseconds.
        Weight::from_parts(1_224_000, 0)
            // Standard Error: 3_088
            .saturating_add(Weight::from_parts(221_956, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_158_000 picoseconds.
        Weight::from_parts(1_559_444, 0)
            // Standard Error: 1_045
            .saturating_add(Weight::from_parts(138_325, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_183_000 picoseconds.
        Weight::from_parts(899_729, 0)
            // Standard Error: 4_459
            .saturating_add(Weight::from_parts(723_134, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_193_000 picoseconds.
        Weight::from_parts(2_044_297, 0)
            // Standard Error: 3_451
            .saturating_add(Weight::from_parts(478_267, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_180_000 picoseconds.
        Weight::from_parts(1_429_780, 0)
            // Standard Error: 5_595
            .saturating_add(Weight::from_parts(709_100, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_184_000 picoseconds.
        Weight::from_parts(1_333_903, 0)
            // Standard Error: 1_826
            .saturating_add(Weight::from_parts(493_724, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_182_000 picoseconds.
        Weight::from_parts(1_624_576, 0)
            // Standard Error: 6_667
            .saturating_add(Weight::from_parts(705_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_180_000 picoseconds.
        Weight::from_parts(2_015_423, 0)
            // Standard Error: 3_422
            .saturating_add(Weight::from_parts(476_417, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_207_000 picoseconds.
        Weight::from_parts(1_143_090, 0)
            // Standard Error: 5_394
            .saturating_add(Weight::from_parts(711_839, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_193_000 picoseconds.
        Weight::from_parts(1_466_009, 0)
            // Standard Error: 1_625
            .saturating_add(Weight::from_parts(487_222, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_189_000 picoseconds.
        Weight::from_parts(1_389_426, 0)
            // Standard Error: 3_751
            .saturating_add(Weight::from_parts(697_636, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_194_000 picoseconds.
        Weight::from_parts(215_454, 0)
            // Standard Error: 5_828
            .saturating_add(Weight::from_parts(589_439, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_241_000 picoseconds.
        Weight::from_parts(1_297_297, 0)
            // Standard Error: 4_675
            .saturating_add(Weight::from_parts(705_873, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_186_000 picoseconds.
        Weight::from_parts(1_089_974, 0)
            // Standard Error: 3_805
            .saturating_add(Weight::from_parts(521_049, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_163_000 picoseconds.
        Weight::from_parts(925_894, 0)
            // Standard Error: 4_566
            .saturating_add(Weight::from_parts(724_808, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_251_000 picoseconds.
        Weight::from_parts(1_515_405, 0)
            // Standard Error: 3_531
            .saturating_add(Weight::from_parts(500_750, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_155_000 picoseconds.
        Weight::from_parts(904_662, 0)
            // Standard Error: 5_126
            .saturating_add(Weight::from_parts(731_067, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_186_000 picoseconds.
        Weight::from_parts(1_497_160, 0)
            // Standard Error: 3_652
            .saturating_add(Weight::from_parts(488_222, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_239_000 picoseconds.
        Weight::from_parts(1_285_000, 0)
            // Standard Error: 6_583
            .saturating_add(Weight::from_parts(796_634, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_160_000 picoseconds.
        Weight::from_parts(1_229_000, 0)
            // Standard Error: 8_514
            .saturating_add(Weight::from_parts(761_145, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_201_000 picoseconds.
        Weight::from_parts(9_486, 0)
            // Standard Error: 6_415
            .saturating_add(Weight::from_parts(812_084, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_213_000 picoseconds.
        Weight::from_parts(875_255, 0)
            // Standard Error: 4_126
            .saturating_add(Weight::from_parts(551_929, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_151_000 picoseconds.
        Weight::from_parts(1_192_000, 0)
            // Standard Error: 11_937
            .saturating_add(Weight::from_parts(795_337, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_231_000 picoseconds.
        Weight::from_parts(1_390_424, 0)
            // Standard Error: 3_016
            .saturating_add(Weight::from_parts(364_798, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_180_000 picoseconds.
        Weight::from_parts(614_415, 0)
            // Standard Error: 5_972
            .saturating_add(Weight::from_parts(618_849, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_220_000 picoseconds.
        Weight::from_parts(1_244_000, 0)
            // Standard Error: 5_016
            .saturating_add(Weight::from_parts(486_676, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_154_000 picoseconds.
        Weight::from_parts(1_216_000, 0)
            // Standard Error: 7_397
            .saturating_add(Weight::from_parts(785_131, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_194_000 picoseconds.
        Weight::from_parts(1_235_000, 0)
            // Standard Error: 9_047
            .saturating_add(Weight::from_parts(770_857, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_167_000 picoseconds.
        Weight::from_parts(1_225_000, 0)
            // Standard Error: 14_487
            .saturating_add(Weight::from_parts(1_898_650, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_180_000 picoseconds.
        Weight::from_parts(1_255_000, 0)
            // Standard Error: 11_472
            .saturating_add(Weight::from_parts(1_590_768, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_176_000 picoseconds.
        Weight::from_parts(1_282_000, 0)
            // Standard Error: 15_417
            .saturating_add(Weight::from_parts(1_983_090, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_185_000 picoseconds.
        Weight::from_parts(1_258_000, 0)
            // Standard Error: 16_759
            .saturating_add(Weight::from_parts(1_550_989, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_163_000 picoseconds.
        Weight::from_parts(1_238_000, 0)
            // Standard Error: 48_799
            .saturating_add(Weight::from_parts(5_644_646, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_168_000 picoseconds.
        Weight::from_parts(1_185_000, 0)
            // Standard Error: 52_077
            .saturating_add(Weight::from_parts(4_311_386, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_174_000 picoseconds.
        Weight::from_parts(1_896_410, 0)
            // Standard Error: 6_647
            .saturating_add(Weight::from_parts(1_632_362, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_178_000 picoseconds.
        Weight::from_parts(1_284_211, 0)
            // Standard Error: 5_439
            .saturating_add(Weight::from_parts(1_207_220, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_183_000 picoseconds.
        Weight::from_parts(678_660, 0)
            // Standard Error: 6_912
            .saturating_add(Weight::from_parts(647_852, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_213_000 picoseconds.
        Weight::from_parts(931_388, 0)
            // Standard Error: 3_222
            .saturating_add(Weight::from_parts(408_604, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_130_000 picoseconds.
        Weight::from_parts(1_232_000, 0)
            // Standard Error: 6_198
            .saturating_add(Weight::from_parts(690_025, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_179_000 picoseconds.
        Weight::from_parts(921_095, 0)
            // Standard Error: 3_898
            .saturating_add(Weight::from_parts(426_454, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_180_000 picoseconds.
        Weight::from_parts(564_978, 0)
            // Standard Error: 4_040
            .saturating_add(Weight::from_parts(665_952, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_202_000 picoseconds.
        Weight::from_parts(1_146_554, 0)
            // Standard Error: 1_932
            .saturating_add(Weight::from_parts(397_071, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_256_000 picoseconds.
        Weight::from_parts(764_176, 0)
            // Standard Error: 5_632
            .saturating_add(Weight::from_parts(626_989, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_173_000 picoseconds.
        Weight::from_parts(1_395_609, 0)
            // Standard Error: 2_612
            .saturating_add(Weight::from_parts(371_402, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_176_000 picoseconds.
        Weight::from_parts(1_217_000, 0)
            // Standard Error: 11_136
            .saturating_add(Weight::from_parts(892_579, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_148_000 picoseconds.
        Weight::from_parts(1_692_187, 0)
            // Standard Error: 3_272
            .saturating_add(Weight::from_parts(372_534, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_202_000 picoseconds.
        Weight::from_parts(993_632, 0)
            // Standard Error: 4_268
            .saturating_add(Weight::from_parts(597_404, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_191_000 picoseconds.
        Weight::from_parts(773_709, 0)
            // Standard Error: 3_460
            .saturating_add(Weight::from_parts(407_152, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_232_000 picoseconds.
        Weight::from_parts(382_541, 0)
            // Standard Error: 3_875
            .saturating_add(Weight::from_parts(604_907, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_161_000 picoseconds.
        Weight::from_parts(1_220_043, 0)
            // Standard Error: 4_344
            .saturating_add(Weight::from_parts(397_397, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_151_000 picoseconds.
        Weight::from_parts(92_809, 0)
            // Standard Error: 12_332
            .saturating_add(Weight::from_parts(661_668, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_122_000 picoseconds.
        Weight::from_parts(1_437_085, 0)
            // Standard Error: 1_534
            .saturating_add(Weight::from_parts(352_694, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1090`
        //  Estimated: `6196`
        // Minimum execution time: 79_273_000 picoseconds.
        Weight::from_parts(81_801_000, 6196)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `858`
        //  Estimated: `4323`
        // Minimum execution time: 46_551_000 picoseconds.
        Weight::from_parts(48_016_000, 4323)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1009`
        //  Estimated: `6196`
        // Minimum execution time: 89_931_000 picoseconds.
        Weight::from_parts(92_511_000, 6196)
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `694`
        //  Estimated: `4159`
        // Minimum execution time: 32_544_000 picoseconds.
        Weight::from_parts(33_694_000, 4159)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `937`
        //  Estimated: `4402`
        // Minimum execution time: 47_689_000 picoseconds.
        Weight::from_parts(49_820_000, 4402)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 4_741_000 picoseconds.
        Weight::from_parts(5_194_000, 3545)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1565`
        //  Estimated: `7505`
        // Minimum execution time: 125_123_000 picoseconds.
        Weight::from_parts(127_569_000, 7505)
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1294`
        //  Estimated: `7234`
        // Minimum execution time: 103_496_000 picoseconds.
        Weight::from_parts(106_349_000, 7234)
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 64_154_000 picoseconds.
        Weight::from_parts(66_815_520, 2928)
            // Standard Error: 42_126
            .saturating_add(Weight::from_parts(34_918_734, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 64_839_000 picoseconds.
        Weight::from_parts(67_721_398, 2928)
            // Standard Error: 42_597
            .saturating_add(Weight::from_parts(34_972_126, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 63_392_000 picoseconds.
        Weight::from_parts(66_171_496, 2928)
            // Standard Error: 41_719
            .saturating_add(Weight::from_parts(33_489_262, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 63_494_000 picoseconds.
        Weight::from_parts(66_268_430, 2928)
            // Standard Error: 42_997
            .saturating_add(Weight::from_parts(31_646_128, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 530_537_000 picoseconds.
        Weight::from_parts(545_565_486, 2928)
            // Standard Error: 301_584
            .saturating_add(Weight::from_parts(51_191_750, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 526_819_000 picoseconds.
        Weight::from_parts(533_699_612, 2928)
            // Standard Error: 271_533
            .saturating_add(Weight::from_parts(53_968_252, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 79_420_000 picoseconds.
        Weight::from_parts(82_971_780, 2928)
            // Standard Error: 45_143
            .saturating_add(Weight::from_parts(18_670_382, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 74_824_000 picoseconds.
        Weight::from_parts(77_797_170, 2928)
            // Standard Error: 41_245
            .saturating_add(Weight::from_parts(24_797_420, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 61_610_000 picoseconds.
        Weight::from_parts(64_477_652, 2928)
            // Standard Error: 41_493
            .saturating_add(Weight::from_parts(28_349_924, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_833_000 picoseconds.
        Weight::from_parts(64_636_340, 0)
            // Standard Error: 40_280
            .saturating_add(Weight::from_parts(13_670_732, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_755_000 picoseconds.
        Weight::from_parts(66_629_408, 0)
            // Standard Error: 40_085
            .saturating_add(Weight::from_parts(10_707_758, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_481_000 picoseconds.
        Weight::from_parts(65_047_980, 0)
            // Standard Error: 40_147
            .saturating_add(Weight::from_parts(10_903_200, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_679_000 picoseconds.
        Weight::from_parts(64_347_232, 0)
            // Standard Error: 42_721
            .saturating_add(Weight::from_parts(14_040_232, 0).saturating_mul(r.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 911_000 picoseconds.
        Weight::from_parts(1_008_000, 0)
            // Standard Error: 903
            .saturating_add(Weight::from_parts(217_404, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_317_000 picoseconds.
        Weight::from_parts(3_431_000, 3610)
            // Standard Error: 1_128
            .saturating_add(Weight::from_parts(654_538, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 33_863_000 picoseconds.
        Weight::from_parts(29_623_855, 0)
            // Standard Error: 3_072
            .saturating_add(Weight::from_parts(262_272, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1321`
        //  Estimated: `8799`
        // Minimum execution time: 142_558_000 picoseconds.
        Weight::from_parts(145_795_000, 8799)
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `3578`
        // Minimum execution time: 100_615_000 picoseconds.
        Weight::from_parts(69_922_121, 3578)
            // Standard Error: 49_400
            .saturating_add(Weight::from_parts(62_753_036, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `991`
        //  Estimated: `4456`
        // Minimum execution time: 131_931_000 picoseconds.
        Weight::from_parts(173_949_450, 4456)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_263, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `379`
        //  Estimated: `3844`
        // Minimum execution time: 9_771_518_000 picoseconds.
        Weight::from_parts(298_334_574, 3844)
            // Standard Error: 110_901
            .saturating_add(Weight::from_parts(64_025_579, 0).saturating_mul(c.into()))
            // Standard Error: 6
            .saturating_add(Weight::from_parts(2_263, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `480`
        //  Estimated: `6196`
        // Minimum execution time: 110_322_000 picoseconds.
        Weight::from_parts(76_209_319, 6196)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(935, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1320`
        //  Estimated: `8799`
        // Minimum execution time: 176_157_000 picoseconds.
        Weight::from_parts(146_455_876, 8799)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(964, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3682 + c * (1075 ±0)`
        // Minimum execution time: 82_072_000 picoseconds.
        Weight::from_parts(82_460_000, 3682)
            // Standard Error: 18_067
            .saturating_add(Weight::from_parts(61_613_310, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1075).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 56_973_000 picoseconds.
        Weight::from_parts(59_052_000, 0)
            // Standard Error: 2_056_919
            .saturating_add(Weight::from_parts(488_175_088, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 382_171_000 picoseconds.
        Weight::from_parts(334_853_627, 0)
            // Standard Error: 6_932
            .saturating_add(Weight::from_parts(18_698_745, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 160_533_000 picoseconds.
        Weight::from_parts(157_387_894, 0)
            // Standard Error: 78_626
            .saturating_add(Weight::from_parts(49_615_896, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 162_459_000 picoseconds.
        Weight::from_parts(158_186_415, 0)
            // Standard Error: 79_361
            .saturating_add(Weight::from_parts(61_096_700, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 20]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 226_136_000 picoseconds.
        Weight::from_parts(216_097_299, 0)
            // Standard Error: 53_651
            .saturating_add(Weight::from_parts(5_010_803, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 61_644_000 picoseconds.
        Weight::from_parts(84_948_302, 3606)
            // Standard Error: 3_791
            .saturating_add(Weight::from_parts(2_196_938, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `6081`
        // Minimum execution time: 103_098_000 picoseconds.
        Weight::from_parts(136_114_907, 6081)
            // Standard Error: 4_571
            .saturating_add(Weight::from_parts(1_933_513, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 60_503_000 picoseconds.
        Weight::from_parts(92_179_640, 3606)
            // Standard Error: 91_230
            .saturating_add(Weight::from_parts(83_523_256, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 61_892_000 picoseconds.
        Weight::from_parts(90_534_725, 3606)
            // Standard Error: 77_483
            .saturating_add(Weight::from_parts(73_789_919, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 60_747_000 picoseconds.
        Weight::from_parts(92_043_633, 3606)
            // Standard Error: 78_076
            .saturating_add(Weight::from_parts(74_197_633, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 59_561_000 picoseconds.
        Weight::from_parts(87_021_682, 3606)
            // Standard Error: 73_687
            .saturating_add(Weight::from_parts(74_405_559, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 60_242_000 picoseconds.
        Weight::from_parts(88_165_206, 3606)
            // Standard Error: 74_593
            .saturating_add(Weight::from_parts(75_419_565, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 61_115_000 picoseconds.
        Weight::from_parts(87_854_061, 3606)
            // Standard Error: 71_032
            .saturating_add(Weight::from_parts(75_335_195, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 61_614_000 picoseconds.
        Weight::from_parts(92_276_628, 3606)
            // Standard Error: 75_224
            .saturating_add(Weight::from_parts(73_688_278, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 60_094_000 picoseconds.
        Weight::from_parts(91_018_805, 3606)
            // Standard Error: 79_234
            .saturating_add(Weight::from_parts(73_898_536, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 549_875_000 picoseconds.
        Weight::from_parts(638_089_992, 3606)
            // Standard Error: 322_684
            .saturating_add(Weight::from_parts(127_618_521, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 688_973_000 picoseconds.
        Weight::from_parts(694_496_000, 2529)
            // Standard Error: 60_729
            .saturating_add(Weight::from_parts(14_147_525, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 61_172_000 picoseconds.
        Weight::from_parts(91_312_934, 3606)
            // Standard Error: 81_177
            .saturating_add(Weight::from_parts(83_015_381, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 61_827_000 picoseconds.
        Weight::from_parts(91_876_246, 3606)
            // Standard Error: 81_275
            .saturating_add(Weight::from_parts(73_701_575, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 61_260_000 picoseconds.
        Weight::from_parts(92_084_763, 3606)
            // Standard Error: 80_823
            .saturating_add(Weight::from_parts(73_783_949, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 61_509_000 picoseconds.
        Weight::from_parts(91_502_617, 3606)
            // Standard Error: 93_225
            .saturating_add(Weight::from_parts(155_448_471, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 63_907_000 picoseconds.
        Weight::from_parts(65_341_000, 3606)
            // Standard Error: 3_875_330
            .saturating_add(Weight::from_parts(749_474_777, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 64_094_000 picoseconds.
        Weight::from_parts(92_186_867, 3606)
            // Standard Error: 170_110
            .saturating_add(Weight::from_parts(250_942_961, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 319_769_000 picoseconds.
        Weight::from_parts(322_972_000, 2529)
            // Standard Error: 42_246
            .saturating_add(Weight::from_parts(34_803_214, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 61_585_000 picoseconds.
        Weight::from_parts(87_993_167, 3606)
            // Standard Error: 162_552
            .saturating_add(Weight::from_parts(253_888_861, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 322_526_000 picoseconds.
        Weight::from_parts(324_233_000, 2529)
            // Standard Error: 55_143
            .saturating_add(Weight::from_parts(34_195_916, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 533_864_000 picoseconds.
        Weight::from_parts(563_677_647, 3606)
            // Standard Error: 207_545
            .saturating_add(Weight::from_parts(241_230_285, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 535_936_000 picoseconds.
        Weight::from_parts(557_348_734, 3606)
            // Standard Error: 171_731
            .saturating_add(Weight::from_parts(244_609_311, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 63_901_000 picoseconds.
        Weight::from_parts(87_817_514, 3606)
            // Standard Error: 67_167
            .saturating_add(Weight::from_parts(80_996_241, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 1_692_263_000 picoseconds.
        Weight::from_parts(1_706_950_634, 3606)
            // Standard Error: 133_977
            .saturating_add(Weight::from_parts(162_309_131, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 281_037_000 picoseconds.
        Weight::from_parts(282_525_000, 2529)
            // Standard Error: 56_305
            .saturating_add(Weight::from_parts(34_660_572, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 1_690_327_000 picoseconds.
        Weight::from_parts(1_713_120_495, 3606)
            // Standard Error: 180_088
            .saturating_add(Weight::from_parts(209_316_895, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 1_688_859_000 picoseconds.
        Weight::from_parts(1_721_611_813, 3606)
            // Standard Error: 222_987
            .saturating_add(Weight::from_parts(212_043_906, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5234 + r * (905 ±7)`
        // Minimum execution time: 150_182_000 picoseconds.
        Weight::from_parts(173_844_321, 5234)
            // Standard Error: 195_420
            .saturating_add(Weight::from_parts(271_858_048, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 905).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `6944 + n * (155 ±0)`
        // Minimum execution time: 424_320_000 picoseconds.
        Weight::from_parts(430_356_000, 6944)
            // Standard Error: 47_059
            .saturating_add(Weight::from_parts(34_787_593, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `7356 + r * (932 ±6)`
        // Minimum execution time: 1_776_025_000 picoseconds.
        Weight::from_parts(1_810_064_088, 7356)
            // Standard Error: 191_248
            .saturating_add(Weight::from_parts(227_672_683, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(Weight::from_parts(0, 932).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 99_350_000 picoseconds.
        Weight::from_parts(83_406_311, 2529)
            // Standard Error: 1_245
            .saturating_add(Weight::from_parts(707_031, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 100_647_000 picoseconds.
        Weight::from_parts(94_020_935, 2529)
            // Standard Error: 1_257
            .saturating_add(Weight::from_parts(695_298, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 62_522_000 picoseconds.
        Weight::from_parts(101_801_587, 3606)
            // Standard Error: 196_033
            .saturating_add(Weight::from_parts(133_866_192, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2439 + n * (155 ±0)`
        // Minimum execution time: 94_559_000 picoseconds.
        Weight::from_parts(96_257_000, 2439)
            // Standard Error: 2_488
            .saturating_add(Weight::from_parts(779_758, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 99_637_000 picoseconds.
        Weight::from_parts(94_310_543, 2529)
            // Standard Error: 1_290
            .saturating_add(Weight::from_parts(708_083, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 98_600_000 picoseconds.
        Weight::from_parts(90_705_335, 2529)
            // Standard Error: 1_011
            .saturating_add(Weight::from_parts(694_573, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 60_530_000 picoseconds.
        Weight::from_parts(91_470_051, 3606)
            // Standard Error: 89_311
            .saturating_add(Weight::from_parts(76_012_990, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 63_074_000 picoseconds.
        Weight::from_parts(93_580_484, 3606)
            // Standard Error: 76_318
            .saturating_add(Weight::from_parts(73_408_619, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 61_991_000 picoseconds.
        Weight::from_parts(97_317_936, 3606)
            // Standard Error: 84_186
            .saturating_add(Weight::from_parts(74_897_678, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 537_269_000 picoseconds.
        Weight::from_parts(590_324_306, 3606)
            // Standard Error: 120_086
            .saturating_add(Weight::from_parts(92_623_770, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 564_680_000 picoseconds.
        Weight::from_parts(585_062_114, 3606)
            // Standard Error: 1_271
            .saturating_add(Weight::from_parts(167_793, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 2_255_756_000 picoseconds.
        Weight::from_parts(2_277_987_652, 3606)
            // Standard Error: 278_406
            .saturating_add(Weight::from_parts(124_123_135, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 2_326_862_000 picoseconds.
        Weight::from_parts(2_184_787_501, 3606)
            // Standard Error: 10_473
            .saturating_add(Weight::from_parts(12_491_631, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 63_036_000 picoseconds.
        Weight::from_parts(82_793_907, 3606)
            // Standard Error: 207_592
            .saturating_add(Weight::from_parts(99_060_797, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2439 + n * (155 ±0)`
        // Minimum execution time: 116_521_000 picoseconds.
        Weight::from_parts(118_104_000, 2439)
            // Standard Error: 56_044
            .saturating_add(Weight::from_parts(30_725_621, 0).saturating_mul(n.into()))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 62_473_000 picoseconds.
        Weight::from_parts(95_579_126, 3606)
            // Standard Error: 81_475
            .saturating_add(Weight::from_parts(73_294_224, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5160 + r * (351 ±5)`
        // Minimum execution time: 105_780_000 picoseconds.
        Weight::from_parts(107_598_000, 5160)
            // Standard Error: 1_553_645
            .saturating_add(Weight::from_parts(279_306_310, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 351).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 79_575_000 picoseconds.
        Weight::from_parts(89_330_073, 3606)
            // Standard Error: 184_912
            .saturating_add(Weight::from_parts(322_762_190, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2709 + p * (155 ±0) + s * (155 ±0)`
        // Minimum execution time: 51_067_093_000 picoseconds.
        Weight::from_parts(51_152_052_000, 2709)
            // Standard Error: 300_275
            .saturating_add(Weight::from_parts(9_186_553, 0).saturating_mul(p.into()))
            // Standard Error: 300_260
            .saturating_add(Weight::from_parts(155_605_181, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(p.into()))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 82_680_000 picoseconds.
        Weight::from_parts(91_411_195, 3606)
            // Standard Error: 174_220
            .saturating_add(Weight::from_parts(328_619_769, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2709 + p * (155 ±0) + s * (155 ±0)`
        // Minimum execution time: 52_301_093_000 picoseconds.
        Weight::from_parts(52_383_715_000, 2709)
            // Standard Error: 296_192
            .saturating_add(Weight::from_parts(8_171_757, 0).saturating_mul(p.into()))
            // Standard Error: 296_178
            .saturating_add(Weight::from_parts(155_642_833, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(p.into()))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 62_723_000 picoseconds.
        Weight::from_parts(103_421_094, 1131)
            // Standard Error: 19_750
            .saturating_add(Weight::from_parts(14_621_850, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 61_270_000 picoseconds.
        Weight::from_parts(62_163_000, 1131)
            // Standard Error: 22_436
            .saturating_add(Weight::from_parts(41_323_144, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 7_488_254_000 picoseconds.
        Weight::from_parts(7_402_148_277, 5069931)
            // Standard Error: 59_957
            .saturating_add(Weight::from_parts(42_678_346, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1820 + p * (65580 ±0)`
        //  Estimated: `1946 + p * (75482 ±0)`
        // Minimum execution time: 63_660_000 picoseconds.
        Weight::from_parts(65_378_000, 1946)
            // Standard Error: 27_846
            .saturating_add(Weight::from_parts(55_541_004, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 68_503_000 picoseconds.
        Weight::from_parts(69_991_098, 1131)
            // Standard Error: 72_307
            .saturating_add(Weight::from_parts(44_316_231, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 579_536_000 picoseconds.
        Weight::from_parts(573_693_069, 1496)
            // Standard Error: 117_929
            .saturating_add(Weight::from_parts(50_341_200, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_043_789_000 picoseconds.
        Weight::from_parts(1_078_386_552, 317931)
            // Standard Error: 310_154
            .saturating_add(Weight::from_parts(55_644_059, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_718_000 picoseconds.
        Weight::from_parts(2_848_000, 0)
            // Standard Error: 256_248
            .saturating_add(Weight::from_parts(88_479_087, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_490_693_000 picoseconds.
        Weight::from_parts(4_565_933_370, 0)
            // Standard Error: 16_112
            .saturating_add(Weight::from_parts(3_261_369, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_519_351_000 picoseconds.
        Weight::from_parts(4_542_028_058, 0)
            // Standard Error: 12_672
            .saturating_add(Weight::from_parts(3_356_412, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_141_773_000 picoseconds.
        Weight::from_parts(10_612_889_641, 0)
            // Standard Error: 114_491
            .saturating_add(Weight::from_parts(7_856_426, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_243_931_000 picoseconds.
        Weight::from_parts(10_584_526_794, 0)
            // Standard Error: 168_804
            .saturating_add(Weight::from_parts(8_582_123, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_146_000 picoseconds.
        Weight::from_parts(1_196_000, 0)
            // Standard Error: 22_790
            .saturating_add(Weight::from_parts(2_702_409, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_212_000 picoseconds.
        Weight::from_parts(1_237_000, 0)
            // Standard Error: 19_091
            .saturating_add(Weight::from_parts(2_679_051, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_168_000 picoseconds.
        Weight::from_parts(406_257, 0)
            // Standard Error: 2_657
            .saturating_add(Weight::from_parts(1_572_345, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_222_000 picoseconds.
        Weight::from_parts(1_245_000, 0)
            // Standard Error: 2_011
            .saturating_add(Weight::from_parts(1_808_575, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_186_000 picoseconds.
        Weight::from_parts(1_271_000, 0)
            // Standard Error: 26_714
            .saturating_add(Weight::from_parts(4_277_100, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_255_000 picoseconds.
        Weight::from_parts(5_056_587, 0)
            // Standard Error: 703
            .saturating_add(Weight::from_parts(41_868, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_153_000 picoseconds.
        Weight::from_parts(2_955_412, 0)
            // Standard Error: 10_267
            .saturating_add(Weight::from_parts(2_416_384, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_416_384 -
            2_306_104, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_271_000 picoseconds.
        Weight::from_parts(778_736, 0)
            // Standard Error: 12_180
            .saturating_add(Weight::from_parts(2_306_104, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_231_000 picoseconds.
        Weight::from_parts(415_099, 0)
            // Standard Error: 39_639
            .saturating_add(Weight::from_parts(7_642_328, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_936_000 picoseconds.
        Weight::from_parts(557_914, 0)
            // Standard Error: 5_912
            .saturating_add(Weight::from_parts(603_873, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_606_000 picoseconds.
        Weight::from_parts(2_788_841, 0)
            // Standard Error: 11
            .saturating_add(Weight::from_parts(42, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_645_000 picoseconds.
        Weight::from_parts(6_764_281, 0)
            // Standard Error: 3_582
            .saturating_add(Weight::from_parts(371_816, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_650_000 picoseconds.
        Weight::from_parts(7_478_052, 0)
            // Standard Error: 3_657
            .saturating_add(Weight::from_parts(732_216, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_677_000 picoseconds.
        Weight::from_parts(6_398_009, 0)
            // Standard Error: 6_427
            .saturating_add(Weight::from_parts(888_335, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_243_000 picoseconds.
        Weight::from_parts(5_474_834, 0)
            // Standard Error: 1_576
            .saturating_add(Weight::from_parts(321_837, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_263_000 picoseconds.
        Weight::from_parts(5_829_564, 0)
            // Standard Error: 3_349
            .saturating_add(Weight::from_parts(512_194, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_697_000 picoseconds.
        Weight::from_parts(6_236_698, 0)
            // Standard Error: 2_064
            .saturating_add(Weight::from_parts(5_846_033, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_166_000 picoseconds.
        Weight::from_parts(19_850, 0)
            // Standard Error: 4_825
            .saturating_add(Weight::from_parts(2_072_547, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_188_000 picoseconds.
        Weight::from_parts(1_210_000, 0)
            // Standard Error: 5_693
            .saturating_add(Weight::from_parts(2_096_915, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_224_000 picoseconds.
        Weight::from_parts(1_273_000, 0)
            // Standard Error: 2_839
            .saturating_add(Weight::from_parts(1_955_735, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_184_000 picoseconds.
        Weight::from_parts(1_789_041, 0)
            // Standard Error: 13_722
            .saturating_add(Weight::from_parts(1_887_550, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_210_000 picoseconds.
        Weight::from_parts(1_334_466, 0)
            // Standard Error: 3_521
            .saturating_add(Weight::from_parts(375_602, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_208_000 picoseconds.
        Weight::from_parts(1_727_538, 0)
            // Standard Error: 1_685
            .saturating_add(Weight::from_parts(251_989, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_194_000 picoseconds.
        Weight::from_parts(1_447_940, 0)
            // Standard Error: 6_765
            .saturating_add(Weight::from_parts(699_757, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_193_000 picoseconds.
        Weight::from_parts(306_655, 0)
            // Standard Error: 4_065
            .saturating_add(Weight::from_parts(598_994, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_179_000 picoseconds.
        Weight::from_parts(1_322_373, 0)
            // Standard Error: 3_394
            .saturating_add(Weight::from_parts(287_385, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_237_000 picoseconds.
        Weight::from_parts(1_125_066, 0)
            // Standard Error: 2_983
            .saturating_add(Weight::from_parts(300_317, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_136_000 picoseconds.
        Weight::from_parts(1_364_426, 0)
            // Standard Error: 2_082
            .saturating_add(Weight::from_parts(345_833, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_182_000 picoseconds.
        Weight::from_parts(990_677, 0)
            // Standard Error: 3_336
            .saturating_add(Weight::from_parts(359_249, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_194_000 picoseconds.
        Weight::from_parts(1_462_677, 0)
            // Standard Error: 1_911
            .saturating_add(Weight::from_parts(303_386, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_159_000 picoseconds.
        Weight::from_parts(1_191_584, 0)
            // Standard Error: 1_516
            .saturating_add(Weight::from_parts(227_040, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_155_000 picoseconds.
        Weight::from_parts(1_224_000, 0)
            // Standard Error: 3_088
            .saturating_add(Weight::from_parts(221_956, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_158_000 picoseconds.
        Weight::from_parts(1_559_444, 0)
            // Standard Error: 1_045
            .saturating_add(Weight::from_parts(138_325, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_183_000 picoseconds.
        Weight::from_parts(899_729, 0)
            // Standard Error: 4_459
            .saturating_add(Weight::from_parts(723_134, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_193_000 picoseconds.
        Weight::from_parts(2_044_297, 0)
            // Standard Error: 3_451
            .saturating_add(Weight::from_parts(478_267, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_180_000 picoseconds.
        Weight::from_parts(1_429_780, 0)
            // Standard Error: 5_595
            .saturating_add(Weight::from_parts(709_100, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_184_000 picoseconds.
        Weight::from_parts(1_333_903, 0)
            // Standard Error: 1_826
            .saturating_add(Weight::from_parts(493_724, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_182_000 picoseconds.
        Weight::from_parts(1_624_576, 0)
            // Standard Error: 6_667
            .saturating_add(Weight::from_parts(705_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_180_000 picoseconds.
        Weight::from_parts(2_015_423, 0)
            // Standard Error: 3_422
            .saturating_add(Weight::from_parts(476_417, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_207_000 picoseconds.
        Weight::from_parts(1_143_090, 0)
            // Standard Error: 5_394
            .saturating_add(Weight::from_parts(711_839, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_193_000 picoseconds.
        Weight::from_parts(1_466_009, 0)
            // Standard Error: 1_625
            .saturating_add(Weight::from_parts(487_222, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_189_000 picoseconds.
        Weight::from_parts(1_389_426, 0)
            // Standard Error: 3_751
            .saturating_add(Weight::from_parts(697_636, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_194_000 picoseconds.
        Weight::from_parts(215_454, 0)
            // Standard Error: 5_828
            .saturating_add(Weight::from_parts(589_439, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_241_000 picoseconds.
        Weight::from_parts(1_297_297, 0)
            // Standard Error: 4_675
            .saturating_add(Weight::from_parts(705_873, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_186_000 picoseconds.
        Weight::from_parts(1_089_974, 0)
            // Standard Error: 3_805
            .saturating_add(Weight::from_parts(521_049, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_163_000 picoseconds.
        Weight::from_parts(925_894, 0)
            // Standard Error: 4_566
            .saturating_add(Weight::from_parts(724_808, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_251_000 picoseconds.
        Weight::from_parts(1_515_405, 0)
            // Standard Error: 3_531
            .saturating_add(Weight::from_parts(500_750, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_155_000 picoseconds.
        Weight::from_parts(904_662, 0)
            // Standard Error: 5_126
            .saturating_add(Weight::from_parts(731_067, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_186_000 picoseconds.
        Weight::from_parts(1_497_160, 0)
            // Standard Error: 3_652
            .saturating_add(Weight::from_parts(488_222, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_239_000 picoseconds.
        Weight::from_parts(1_285_000, 0)
            // Standard Error: 6_583
            .saturating_add(Weight::from_parts(796_634, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_160_000 picoseconds.
        Weight::from_parts(1_229_000, 0)
            // Standard Error: 8_514
            .saturating_add(Weight::from_parts(761_145, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_201_000 picoseconds.
        Weight::from_parts(9_486, 0)
            // Standard Error: 6_415
            .saturating_add(Weight::from_parts(812_084, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_213_000 picoseconds.
        Weight::from_parts(875_255, 0)
            // Standard Error: 4_126
            .saturating_add(Weight::from_parts(551_929, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_151_000 picoseconds.
        Weight::from_parts(1_192_000, 0)
            // Standard Error: 11_937
            .saturating_add(Weight::from_parts(795_337, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_231_000 picoseconds.
        Weight::from_parts(1_390_424, 0)
            // Standard Error: 3_016
            .saturating_add(Weight::from_parts(364_798, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_180_000 picoseconds.
        Weight::from_parts(614_415, 0)
            // Standard Error: 5_972
            .saturating_add(Weight::from_parts(618_849, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_220_000 picoseconds.
        Weight::from_parts(1_244_000, 0)
            // Standard Error: 5_016
            .saturating_add(Weight::from_parts(486_676, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_154_000 picoseconds.
        Weight::from_parts(1_216_000, 0)
            // Standard Error: 7_397
            .saturating_add(Weight::from_parts(785_131, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_194_000 picoseconds.
        Weight::from_parts(1_235_000, 0)
            // Standard Error: 9_047
            .saturating_add(Weight::from_parts(770_857, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_167_000 picoseconds.
        Weight::from_parts(1_225_000, 0)
            // Standard Error: 14_487
            .saturating_add(Weight::from_parts(1_898_650, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_180_000 picoseconds.
        Weight::from_parts(1_255_000, 0)
            // Standard Error: 11_472
            .saturating_add(Weight::from_parts(1_590_768, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_176_000 picoseconds.
        Weight::from_parts(1_282_000, 0)
            // Standard Error: 15_417
            .saturating_add(Weight::from_parts(1_983_090, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_185_000 picoseconds.
        Weight::from_parts(1_258_000, 0)
            // Standard Error: 16_759
            .saturating_add(Weight::from_parts(1_550_989, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_163_000 picoseconds.
        Weight::from_parts(1_238_000, 0)
            // Standard Error: 48_799
            .saturating_add(Weight::from_parts(5_644_646, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_168_000 picoseconds.
        Weight::from_parts(1_185_000, 0)
            // Standard Error: 52_077
            .saturating_add(Weight::from_parts(4_311_386, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_174_000 picoseconds.
        Weight::from_parts(1_896_410, 0)
            // Standard Error: 6_647
            .saturating_add(Weight::from_parts(1_632_362, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_178_000 picoseconds.
        Weight::from_parts(1_284_211, 0)
            // Standard Error: 5_439
            .saturating_add(Weight::from_parts(1_207_220, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_183_000 picoseconds.
        Weight::from_parts(678_660, 0)
            // Standard Error: 6_912
            .saturating_add(Weight::from_parts(647_852, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_213_000 picoseconds.
        Weight::from_parts(931_388, 0)
            // Standard Error: 3_222
            .saturating_add(Weight::from_parts(408_604, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_130_000 picoseconds.
        Weight::from_parts(1_232_000, 0)
            // Standard Error: 6_198
            .saturating_add(Weight::from_parts(690_025, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_179_000 picoseconds.
        Weight::from_parts(921_095, 0)
            // Standard Error: 3_898
            .saturating_add(Weight::from_parts(426_454, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_180_000 picoseconds.
        Weight::from_parts(564_978, 0)
            // Standard Error: 4_040
            .saturating_add(Weight::from_parts(665_952, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_202_000 picoseconds.
        Weight::from_parts(1_146_554, 0)
            // Standard Error: 1_932
            .saturating_add(Weight::from_parts(397_071, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_256_000 picoseconds.
        Weight::from_parts(764_176, 0)
            // Standard Error: 5_632
            .saturating_add(Weight::from_parts(626_989, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_173_000 picoseconds.
        Weight::from_parts(1_395_609, 0)
            // Standard Error: 2_612
            .saturating_add(Weight::from_parts(371_402, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_176_000 picoseconds.
        Weight::from_parts(1_217_000, 0)
            // Standard Error: 11_136
            .saturating_add(Weight::from_parts(892_579, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_148_000 picoseconds.
        Weight::from_parts(1_692_187, 0)
            // Standard Error: 3_272
            .saturating_add(Weight::from_parts(372_534, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_202_000 picoseconds.
        Weight::from_parts(993_632, 0)
            // Standard Error: 4_268
            .saturating_add(Weight::from_parts(597_404, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_191_000 picoseconds.
        Weight::from_parts(773_709, 0)
            // Standard Error: 3_460
            .saturating_add(Weight::from_parts(407_152, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_232_000 picoseconds.
        Weight::from_parts(382_541, 0)
            // Standard Error: 3_875
            .saturating_add(Weight::from_parts(604_907, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_161_000 picoseconds.
        Weight::from_parts(1_220_043, 0)
            // Standard Error: 4_344
            .saturating_add(Weight::from_parts(397_397, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_151_000 picoseconds.
        Weight::from_parts(92_809, 0)
            // Standard Error: 12_332
            .saturating_add(Weight::from_parts(661_668, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_122_000 picoseconds.
        Weight::from_parts(1_437_085, 0)
            // Standard Error: 1_534
            .saturating_add(Weight::from_parts(352_694, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1090`
        //  Estimated: `6196`
        // Minimum execution time: 79_273_000 picoseconds.
        Weight::from_parts(81_801_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `858`
        //  Estimated: `4323`
        // Minimum execution time: 46_551_000 picoseconds.
        Weight::from_parts(48_016_000, 4323)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1009`
        //  Estimated: `6196`
        // Minimum execution time: 89_931_000 picoseconds.
        Weight::from_parts(92_511_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `694`
        //  Estimated: `4159`
        // Minimum execution time: 32_544_000 picoseconds.
        Weight::from_parts(33_694_000, 4159)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `937`
        //  Estimated: `4402`
        // Minimum execution time: 47_689_000 picoseconds.
        Weight::from_parts(49_820_000, 4402)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 4_741_000 picoseconds.
        Weight::from_parts(5_194_000, 3545)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1565`
        //  Estimated: `7505`
        // Minimum execution time: 125_123_000 picoseconds.
        Weight::from_parts(127_569_000, 7505)
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1294`
        //  Estimated: `7234`
        // Minimum execution time: 103_496_000 picoseconds.
        Weight::from_parts(106_349_000, 7234)
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
}
