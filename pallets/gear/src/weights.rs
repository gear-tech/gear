// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-05, STEPS: `51`, REPEAT: 200, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --steps=51 --repeat=200 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=out.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_exit_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(1_162_000 as u64)
            // Standard Error: 144
            .saturating_add(Weight::from_ref_time(201_011 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(3_901_000 as u64)
            // Standard Error: 288
            .saturating_add(Weight::from_ref_time(722_973 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(44_407_000 as u64)
            // Standard Error: 1_272
            .saturating_add(Weight::from_ref_time(2_281_891 as u64).saturating_mul(c as u64))
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(69_383_000 as u64)
            .saturating_add(T::DbWeight::get().reads(7 as u64))
            .saturating_add(T::DbWeight::get().writes(5 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(65_435_000 as u64)
            // Standard Error: 21
            .saturating_add(Weight::from_ref_time(51_648 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(62_136_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_388 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(10_186_059_000 as u64)
            // Standard Error: 159
            .saturating_add(Weight::from_ref_time(28_248 as u64).saturating_mul(c as u64))
            // Standard Error: 9
            .saturating_add(Weight::from_ref_time(823 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(11 as u64))
            .saturating_add(T::DbWeight::get().writes(11 as u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(68_672_000 as u64)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(1_252 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(89_905_000 as u64)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(1_271 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(13 as u64))
            .saturating_add(T::DbWeight::get().writes(10 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        Weight::from_ref_time(199_448_000 as u64)
            // Standard Error: 176
            .saturating_add(Weight::from_ref_time(12_332 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(25 as u64))
            .saturating_add(T::DbWeight::get().writes(24 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(209_374_000 as u64)
            // Standard Error: 185
            .saturating_add(Weight::from_ref_time(29_385 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(25 as u64))
            .saturating_add(T::DbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument(c: u32, ) -> Weight {
        Weight::from_ref_time(48_773_000 as u64)
            // Standard Error: 43
            .saturating_add(Weight::from_ref_time(53_524 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(83_231_000 as u64)
            // Standard Error: 50_006
            .saturating_add(Weight::from_ref_time(196_841_560 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        Weight::from_ref_time(286_884_000 as u64)
            // Standard Error: 45_182
            .saturating_add(Weight::from_ref_time(182_772_236 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(100_782_000 as u64)
            // Standard Error: 141_204
            .saturating_add(Weight::from_ref_time(284_808_946 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(101_368_000 as u64)
            // Standard Error: 38_042
            .saturating_add(Weight::from_ref_time(213_494_835 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        Weight::from_ref_time(85_994_000 as u64)
            // Standard Error: 51_035
            .saturating_add(Weight::from_ref_time(186_671_986 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(81_455_000 as u64)
            // Standard Error: 53_340
            .saturating_add(Weight::from_ref_time(190_360_097 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(86_298_000 as u64)
            // Standard Error: 54_975
            .saturating_add(Weight::from_ref_time(188_889_906 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(80_943_000 as u64)
            // Standard Error: 52_433
            .saturating_add(Weight::from_ref_time(188_226_250 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(86_715_000 as u64)
            // Standard Error: 51_374
            .saturating_add(Weight::from_ref_time(186_682_377 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(85_699_000 as u64)
            // Standard Error: 58_512
            .saturating_add(Weight::from_ref_time(190_107_295 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(82_546_000 as u64)
            // Standard Error: 29_536
            .saturating_add(Weight::from_ref_time(168_623_086 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(83_451_000 as u64)
            // Standard Error: 28_745
            .saturating_add(Weight::from_ref_time(161_289_670 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(84_677_000 as u64)
            // Standard Error: 34_883
            .saturating_add(Weight::from_ref_time(184_621_782 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(267_460_000 as u64)
            // Standard Error: 198
            .saturating_add(Weight::from_ref_time(15_160 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(86_510_000 as u64)
            // Standard Error: 26_706
            .saturating_add(Weight::from_ref_time(161_463_791 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(86_532_000 as u64)
            // Standard Error: 31_451
            .saturating_add(Weight::from_ref_time(168_758_276 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_random(r: u32, ) -> Weight {
        Weight::from_ref_time(85_913_000 as u64)
            // Standard Error: 59_131
            .saturating_add(Weight::from_ref_time(282_830_831 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(86_932_000 as u64)
            // Standard Error: 58_467
            .saturating_add(Weight::from_ref_time(200_843_342 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(84_697_000 as u64)
            // Standard Error: 86_846
            .saturating_add(Weight::from_ref_time(428_450_467 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(525_005_000 as u64)
            // Standard Error: 26_213
            .saturating_add(Weight::from_ref_time(28_176_046 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(87_091_000 as u64)
            // Standard Error: 65_126
            .saturating_add(Weight::from_ref_time(305_108_460 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(405_091_000 as u64)
            // Standard Error: 25_487
            .saturating_add(Weight::from_ref_time(24_308_008 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(87_091_000 as u64)
            // Standard Error: 65_126
            .saturating_add(Weight::from_ref_time(305_108_460 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(405_091_000 as u64)
            // Standard Error: 25_487
            .saturating_add(Weight::from_ref_time(24_308_008 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(86_062_000 as u64)
            // Standard Error: 47_102
            .saturating_add(Weight::from_ref_time(222_385_672 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(86_062_000 as u64)
            // Standard Error: 47_102
            .saturating_add(Weight::from_ref_time(222_385_672 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(82_699_000 as u64)
            // Standard Error: 47_891
            .saturating_add(Weight::from_ref_time(221_290_558 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(287_807_000 as u64)
            // Standard Error: 25_858
            .saturating_add(Weight::from_ref_time(28_042_490 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(82_575_000 as u64)
            // Standard Error: 50_946
            .saturating_add(Weight::from_ref_time(196_132_069 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(81_911_000 as u64)
            // Standard Error: 42_895
            .saturating_add(Weight::from_ref_time(216_435_491 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(291_105_000 as u64)
            // Standard Error: 25_989
            .saturating_add(Weight::from_ref_time(35_175_065 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_exit_code(r: u32, ) -> Weight {
        Weight::from_ref_time(86_121_000 as u64)
            // Standard Error: 42_620
            .saturating_add(Weight::from_ref_time(193_218_340 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(85_131_000 as u64)
            // Standard Error: 252_866
            .saturating_add(Weight::from_ref_time(59_562_419 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(84_446_000 as u64)
            // Standard Error: 246_148
            .saturating_add(Weight::from_ref_time(41_432_669 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(84_259_000 as u64)
            // Standard Error: 239_307
            .saturating_add(Weight::from_ref_time(41_759_050 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(85_234_000 as u64)
            // Standard Error: 264_983
            .saturating_add(Weight::from_ref_time(42_166_230 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        Weight::from_ref_time(84_745_000 as u64)
            // Standard Error: 255_512
            .saturating_add(Weight::from_ref_time(41_153_869 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(86_166_000 as u64)
            // Standard Error: 38_086
            .saturating_add(Weight::from_ref_time(227_377_126 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(101_277_000 as u64)
            // Standard Error: 45_768
            .saturating_add(Weight::from_ref_time(382_703_408 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 1024]`.
    /// The range of component `s` is `[0, 1024]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(41_867_706_000 as u64)
            // Standard Error: 202_670
            .saturating_add(Weight::from_ref_time(7_369_598 as u64).saturating_mul(p as u64))
            // Standard Error: 202_670
            .saturating_add(Weight::from_ref_time(183_740_947 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(257 as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(4_466_000 as u64)
            // Standard Error: 6_072
            .saturating_add(Weight::from_ref_time(4_453_430 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(4_465_000 as u64)
            // Standard Error: 11_423
            .saturating_add(Weight::from_ref_time(6_404_772 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(2_493_000 as u64)
            // Standard Error: 4_066
            .saturating_add(Weight::from_ref_time(7_624_255 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(2_510_000 as u64)
            // Standard Error: 1_714
            .saturating_add(Weight::from_ref_time(5_898_618 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(2_505_000 as u64)
            // Standard Error: 380
            .saturating_add(Weight::from_ref_time(3_159_203 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(2_501_000 as u64)
            // Standard Error: 5_133
            .saturating_add(Weight::from_ref_time(6_159_652 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(2_555_000 as u64)
            // Standard Error: 2_235
            .saturating_add(Weight::from_ref_time(9_873_906 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(11_549_000 as u64)
            // Standard Error: 398
            .saturating_add(Weight::from_ref_time(375_155 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(2_583_000 as u64)
            // Standard Error: 4_100
            .saturating_add(Weight::from_ref_time(4_759_098 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        Weight::from_ref_time(2_651_000 as u64)
            // Standard Error: 2_314
            .saturating_add(Weight::from_ref_time(5_060_068 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(3_081_000 as u64)
            // Standard Error: 4_901
            .saturating_add(Weight::from_ref_time(19_381_029 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(21_606_000 as u64)
            // Standard Error: 993
            .saturating_add(Weight::from_ref_time(1_997_333 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(2_629_000 as u64)
            // Standard Error: 975
            .saturating_add(Weight::from_ref_time(543_473 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(2_624_000 as u64)
            // Standard Error: 3_231
            .saturating_add(Weight::from_ref_time(1_780_231 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(2_626_000 as u64)
            // Standard Error: 3_375
            .saturating_add(Weight::from_ref_time(1_797_009 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(12_534_000 as u64)
            // Standard Error: 2_556
            .saturating_add(Weight::from_ref_time(1_698_249 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(12_552_000 as u64)
            // Standard Error: 2_469
            .saturating_add(Weight::from_ref_time(2_938_365 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(4_530_000 as u64)
            // Standard Error: 2_489
            .saturating_add(Weight::from_ref_time(14_101_782 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(2_516_000 as u64)
            // Standard Error: 2_029
            .saturating_add(Weight::from_ref_time(6_314_050 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(2_496_000 as u64)
            // Standard Error: 1_724
            .saturating_add(Weight::from_ref_time(5_982_793 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(2_516_000 as u64)
            // Standard Error: 2_447
            .saturating_add(Weight::from_ref_time(1_386_760 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(2_500_000 as u64)
            // Standard Error: 3_321
            .saturating_add(Weight::from_ref_time(3_666_661 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(2_487_000 as u64)
            // Standard Error: 1_595
            .saturating_add(Weight::from_ref_time(757_074 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(2_498_000 as u64)
            // Standard Error: 469
            .saturating_add(Weight::from_ref_time(337_371 as u64).saturating_mul(r as u64))
    }
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(2_709_000 as u64)
            // Standard Error: 3_235
            .saturating_add(Weight::from_ref_time(562_398 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(2_499_000 as u64)
            // Standard Error: 3_241
            .saturating_add(Weight::from_ref_time(3_630_065 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(2_489_000 as u64)
            // Standard Error: 3_071
            .saturating_add(Weight::from_ref_time(3_621_884 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(2_535_000 as u64)
            // Standard Error: 3_203
            .saturating_add(Weight::from_ref_time(3_604_241 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_485_000 as u64)
            // Standard Error: 5_214
            .saturating_add(Weight::from_ref_time(3_401_336 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(2_494_000 as u64)
            // Standard Error: 3_037
            .saturating_add(Weight::from_ref_time(3_696_859 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_473_000 as u64)
            // Standard Error: 3_111
            .saturating_add(Weight::from_ref_time(3_581_622 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(2_464_000 as u64)
            // Standard Error: 3_099
            .saturating_add(Weight::from_ref_time(3_584_978 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_485_000 as u64)
            // Standard Error: 3_147
            .saturating_add(Weight::from_ref_time(3_576_341 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(2_474_000 as u64)
            // Standard Error: 3_391
            .saturating_add(Weight::from_ref_time(3_586_956 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_444_000 as u64)
            // Standard Error: 3_186
            .saturating_add(Weight::from_ref_time(3_533_072 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(2_504_000 as u64)
            // Standard Error: 3_165
            .saturating_add(Weight::from_ref_time(2_811_672 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(2_476_000 as u64)
            // Standard Error: 3_397
            .saturating_add(Weight::from_ref_time(2_640_647 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(2_473_000 as u64)
            // Standard Error: 3_653
            .saturating_add(Weight::from_ref_time(3_480_458 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(2_502_000 as u64)
            // Standard Error: 2_708
            .saturating_add(Weight::from_ref_time(4_734_114 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_528_000 as u64)
            // Standard Error: 2_859
            .saturating_add(Weight::from_ref_time(5_104_885 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(2_469_000 as u64)
            // Standard Error: 6_666
            .saturating_add(Weight::from_ref_time(18_877_181 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_451_000 as u64)
            // Standard Error: 2_405
            .saturating_add(Weight::from_ref_time(5_299_696 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(2_549_000 as u64)
            // Standard Error: 3_142
            .saturating_add(Weight::from_ref_time(2_787_564 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(2_460_000 as u64)
            // Standard Error: 3_118
            .saturating_add(Weight::from_ref_time(2_779_037 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(2_474_000 as u64)
            // Standard Error: 3_329
            .saturating_add(Weight::from_ref_time(2_777_042 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(2_467_000 as u64)
            // Standard Error: 3_370
            .saturating_add(Weight::from_ref_time(2_439_017 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(2_505_000 as u64)
            // Standard Error: 3_401
            .saturating_add(Weight::from_ref_time(2_433_606 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(2_484_000 as u64)
            // Standard Error: 3_409
            .saturating_add(Weight::from_ref_time(2_434_751 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(2_495_000 as u64)
            // Standard Error: 3_299
            .saturating_add(Weight::from_ref_time(2_434_270 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(2_489_000 as u64)
            // Standard Error: 3_305
            .saturating_add(Weight::from_ref_time(2_431_099 as u64).saturating_mul(r as u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(1_162_000 as u64)
            // Standard Error: 144
            .saturating_add(Weight::from_ref_time(201_011 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(3_901_000 as u64)
            // Standard Error: 288
            .saturating_add(Weight::from_ref_time(722_973 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(44_407_000 as u64)
            // Standard Error: 1_272
            .saturating_add(Weight::from_ref_time(2_281_891 as u64).saturating_mul(c as u64))
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(69_383_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(7 as u64))
            .saturating_add(RocksDbWeight::get().writes(5 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(65_435_000 as u64)
            // Standard Error: 21
            .saturating_add(Weight::from_ref_time(51_648 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().writes(3 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(62_136_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_388 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(10_186_059_000 as u64)
            // Standard Error: 159
            .saturating_add(Weight::from_ref_time(28_248 as u64).saturating_mul(c as u64))
            // Standard Error: 9
            .saturating_add(Weight::from_ref_time(823 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(11 as u64))
            .saturating_add(RocksDbWeight::get().writes(11 as u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(68_672_000 as u64)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(1_252 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(89_905_000 as u64)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(1_271 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(13 as u64))
            .saturating_add(RocksDbWeight::get().writes(10 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        Weight::from_ref_time(199_448_000 as u64)
            // Standard Error: 176
            .saturating_add(Weight::from_ref_time(12_332 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(25 as u64))
            .saturating_add(RocksDbWeight::get().writes(24 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(209_374_000 as u64)
            // Standard Error: 185
            .saturating_add(Weight::from_ref_time(29_385 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(25 as u64))
            .saturating_add(RocksDbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument(c: u32, ) -> Weight {
        Weight::from_ref_time(48_773_000 as u64)
            // Standard Error: 43
            .saturating_add(Weight::from_ref_time(53_524 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(83_231_000 as u64)
            // Standard Error: 50_006
            .saturating_add(Weight::from_ref_time(196_841_560 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        Weight::from_ref_time(286_884_000 as u64)
            // Standard Error: 45_182
            .saturating_add(Weight::from_ref_time(182_772_236 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(100_782_000 as u64)
            // Standard Error: 141_204
            .saturating_add(Weight::from_ref_time(284_808_946 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(101_368_000 as u64)
            // Standard Error: 38_042
            .saturating_add(Weight::from_ref_time(213_494_835 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        Weight::from_ref_time(85_994_000 as u64)
            // Standard Error: 51_035
            .saturating_add(Weight::from_ref_time(186_671_986 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(81_455_000 as u64)
            // Standard Error: 53_340
            .saturating_add(Weight::from_ref_time(190_360_097 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(86_298_000 as u64)
            // Standard Error: 54_975
            .saturating_add(Weight::from_ref_time(188_889_906 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(80_943_000 as u64)
            // Standard Error: 52_433
            .saturating_add(Weight::from_ref_time(188_226_250 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(86_715_000 as u64)
            // Standard Error: 51_374
            .saturating_add(Weight::from_ref_time(186_682_377 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(85_699_000 as u64)
            // Standard Error: 58_512
            .saturating_add(Weight::from_ref_time(190_107_295 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(82_546_000 as u64)
            // Standard Error: 29_536
            .saturating_add(Weight::from_ref_time(168_623_086 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(83_451_000 as u64)
            // Standard Error: 28_745
            .saturating_add(Weight::from_ref_time(161_289_670 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(84_677_000 as u64)
            // Standard Error: 34_883
            .saturating_add(Weight::from_ref_time(184_621_782 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(267_460_000 as u64)
            // Standard Error: 198
            .saturating_add(Weight::from_ref_time(15_160 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(86_510_000 as u64)
            // Standard Error: 26_706
            .saturating_add(Weight::from_ref_time(161_463_791 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(86_532_000 as u64)
            // Standard Error: 31_451
            .saturating_add(Weight::from_ref_time(168_758_276 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_random(r: u32, ) -> Weight {
        Weight::from_ref_time(85_913_000 as u64)
            // Standard Error: 59_131
            .saturating_add(Weight::from_ref_time(282_830_831 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(86_932_000 as u64)
            // Standard Error: 58_467
            .saturating_add(Weight::from_ref_time(200_843_342 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(84_697_000 as u64)
            // Standard Error: 86_846
            .saturating_add(Weight::from_ref_time(428_450_467 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(525_005_000 as u64)
            // Standard Error: 26_213
            .saturating_add(Weight::from_ref_time(28_176_046 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(87_091_000 as u64)
            // Standard Error: 65_126
            .saturating_add(Weight::from_ref_time(305_108_460 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(405_091_000 as u64)
            // Standard Error: 25_487
            .saturating_add(Weight::from_ref_time(24_308_008 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(87_091_000 as u64)
            // Standard Error: 65_126
            .saturating_add(Weight::from_ref_time(305_108_460 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(405_091_000 as u64)
            // Standard Error: 25_487
            .saturating_add(Weight::from_ref_time(24_308_008 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(86_062_000 as u64)
            // Standard Error: 47_102
            .saturating_add(Weight::from_ref_time(222_385_672 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(86_062_000 as u64)
            // Standard Error: 47_102
            .saturating_add(Weight::from_ref_time(222_385_672 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(82_699_000 as u64)
            // Standard Error: 47_891
            .saturating_add(Weight::from_ref_time(221_290_558 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(287_807_000 as u64)
            // Standard Error: 25_858
            .saturating_add(Weight::from_ref_time(28_042_490 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(82_575_000 as u64)
            // Standard Error: 50_946
            .saturating_add(Weight::from_ref_time(196_132_069 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(81_911_000 as u64)
            // Standard Error: 42_895
            .saturating_add(Weight::from_ref_time(216_435_491 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(291_105_000 as u64)
            // Standard Error: 25_989
            .saturating_add(Weight::from_ref_time(35_175_065 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_exit_code(r: u32, ) -> Weight {
        Weight::from_ref_time(86_121_000 as u64)
            // Standard Error: 42_620
            .saturating_add(Weight::from_ref_time(193_218_340 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(85_131_000 as u64)
            // Standard Error: 252_866
            .saturating_add(Weight::from_ref_time(59_562_419 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(84_446_000 as u64)
            // Standard Error: 246_148
            .saturating_add(Weight::from_ref_time(41_432_669 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(84_259_000 as u64)
            // Standard Error: 239_307
            .saturating_add(Weight::from_ref_time(41_759_050 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(85_234_000 as u64)
            // Standard Error: 264_983
            .saturating_add(Weight::from_ref_time(42_166_230 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        Weight::from_ref_time(84_745_000 as u64)
            // Standard Error: 255_512
            .saturating_add(Weight::from_ref_time(41_153_869 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(86_166_000 as u64)
            // Standard Error: 38_086
            .saturating_add(Weight::from_ref_time(227_377_126 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(101_277_000 as u64)
            // Standard Error: 45_768
            .saturating_add(Weight::from_ref_time(382_703_408 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 1024]`.
    /// The range of component `s` is `[0, 1024]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(41_867_706_000 as u64)
            // Standard Error: 202_670
            .saturating_add(Weight::from_ref_time(7_369_598 as u64).saturating_mul(p as u64))
            // Standard Error: 202_670
            .saturating_add(Weight::from_ref_time(183_740_947 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(257 as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(4_466_000 as u64)
            // Standard Error: 6_072
            .saturating_add(Weight::from_ref_time(4_453_430 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(4_465_000 as u64)
            // Standard Error: 11_423
            .saturating_add(Weight::from_ref_time(6_404_772 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(2_493_000 as u64)
            // Standard Error: 4_066
            .saturating_add(Weight::from_ref_time(7_624_255 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(2_510_000 as u64)
            // Standard Error: 1_714
            .saturating_add(Weight::from_ref_time(5_898_618 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(2_505_000 as u64)
            // Standard Error: 380
            .saturating_add(Weight::from_ref_time(3_159_203 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(2_501_000 as u64)
            // Standard Error: 5_133
            .saturating_add(Weight::from_ref_time(6_159_652 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(2_555_000 as u64)
            // Standard Error: 2_235
            .saturating_add(Weight::from_ref_time(9_873_906 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(11_549_000 as u64)
            // Standard Error: 398
            .saturating_add(Weight::from_ref_time(375_155 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(2_583_000 as u64)
            // Standard Error: 4_100
            .saturating_add(Weight::from_ref_time(4_759_098 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        Weight::from_ref_time(2_651_000 as u64)
            // Standard Error: 2_314
            .saturating_add(Weight::from_ref_time(5_060_068 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(3_081_000 as u64)
            // Standard Error: 4_901
            .saturating_add(Weight::from_ref_time(19_381_029 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(21_606_000 as u64)
            // Standard Error: 993
            .saturating_add(Weight::from_ref_time(1_997_333 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(2_629_000 as u64)
            // Standard Error: 975
            .saturating_add(Weight::from_ref_time(543_473 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(2_624_000 as u64)
            // Standard Error: 3_231
            .saturating_add(Weight::from_ref_time(1_780_231 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(2_626_000 as u64)
            // Standard Error: 3_375
            .saturating_add(Weight::from_ref_time(1_797_009 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(12_534_000 as u64)
            // Standard Error: 2_556
            .saturating_add(Weight::from_ref_time(1_698_249 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(12_552_000 as u64)
            // Standard Error: 2_469
            .saturating_add(Weight::from_ref_time(2_938_365 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(4_530_000 as u64)
            // Standard Error: 2_489
            .saturating_add(Weight::from_ref_time(14_101_782 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(2_516_000 as u64)
            // Standard Error: 2_029
            .saturating_add(Weight::from_ref_time(6_314_050 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(2_496_000 as u64)
            // Standard Error: 1_724
            .saturating_add(Weight::from_ref_time(5_982_793 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(2_516_000 as u64)
            // Standard Error: 2_447
            .saturating_add(Weight::from_ref_time(1_386_760 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(2_500_000 as u64)
            // Standard Error: 3_321
            .saturating_add(Weight::from_ref_time(3_666_661 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(2_487_000 as u64)
            // Standard Error: 1_595
            .saturating_add(Weight::from_ref_time(757_074 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(2_498_000 as u64)
            // Standard Error: 469
            .saturating_add(Weight::from_ref_time(337_371 as u64).saturating_mul(r as u64))
    }
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(2_709_000 as u64)
            // Standard Error: 3_235
            .saturating_add(Weight::from_ref_time(562_398 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(2_499_000 as u64)
            // Standard Error: 3_241
            .saturating_add(Weight::from_ref_time(3_630_065 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(2_489_000 as u64)
            // Standard Error: 3_071
            .saturating_add(Weight::from_ref_time(3_621_884 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(2_535_000 as u64)
            // Standard Error: 3_203
            .saturating_add(Weight::from_ref_time(3_604_241 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_485_000 as u64)
            // Standard Error: 5_214
            .saturating_add(Weight::from_ref_time(3_401_336 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(2_494_000 as u64)
            // Standard Error: 3_037
            .saturating_add(Weight::from_ref_time(3_696_859 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_473_000 as u64)
            // Standard Error: 3_111
            .saturating_add(Weight::from_ref_time(3_581_622 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(2_464_000 as u64)
            // Standard Error: 3_099
            .saturating_add(Weight::from_ref_time(3_584_978 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_485_000 as u64)
            // Standard Error: 3_147
            .saturating_add(Weight::from_ref_time(3_576_341 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(2_474_000 as u64)
            // Standard Error: 3_391
            .saturating_add(Weight::from_ref_time(3_586_956 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_444_000 as u64)
            // Standard Error: 3_186
            .saturating_add(Weight::from_ref_time(3_533_072 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(2_504_000 as u64)
            // Standard Error: 3_165
            .saturating_add(Weight::from_ref_time(2_811_672 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(2_476_000 as u64)
            // Standard Error: 3_397
            .saturating_add(Weight::from_ref_time(2_640_647 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(2_473_000 as u64)
            // Standard Error: 3_653
            .saturating_add(Weight::from_ref_time(3_480_458 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(2_502_000 as u64)
            // Standard Error: 2_708
            .saturating_add(Weight::from_ref_time(4_734_114 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_528_000 as u64)
            // Standard Error: 2_859
            .saturating_add(Weight::from_ref_time(5_104_885 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(2_469_000 as u64)
            // Standard Error: 6_666
            .saturating_add(Weight::from_ref_time(18_877_181 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_451_000 as u64)
            // Standard Error: 2_405
            .saturating_add(Weight::from_ref_time(5_299_696 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(2_549_000 as u64)
            // Standard Error: 3_142
            .saturating_add(Weight::from_ref_time(2_787_564 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(2_460_000 as u64)
            // Standard Error: 3_118
            .saturating_add(Weight::from_ref_time(2_779_037 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(2_474_000 as u64)
            // Standard Error: 3_329
            .saturating_add(Weight::from_ref_time(2_777_042 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(2_467_000 as u64)
            // Standard Error: 3_370
            .saturating_add(Weight::from_ref_time(2_439_017 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(2_505_000 as u64)
            // Standard Error: 3_401
            .saturating_add(Weight::from_ref_time(2_433_606 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(2_484_000 as u64)
            // Standard Error: 3_409
            .saturating_add(Weight::from_ref_time(2_434_751 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(2_495_000 as u64)
            // Standard Error: 3_299
            .saturating_add(Weight::from_ref_time(2_434_270 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(2_489_000 as u64)
            // Standard Error: 3_305
            .saturating_add(Weight::from_ref_time(2_431_099 as u64).saturating_mul(r as u64))
    }
}
