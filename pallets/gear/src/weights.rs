// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-04-14, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("local"), DB CACHE: 1024

// Executed Command:
// ./target/release/gear-node benchmark --chain=local --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./pallets/gear/src/weights.rs --template=./.maintain/gear-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
	fn submit_code(c: u32, ) -> Weight;
	fn submit_program(c: u32, p: u32, ) -> Weight;
	fn send_message(p: u32, ) -> Weight;
	fn send_reply(p: u32, ) -> Weight;
	fn initial_allocation(q: u32, ) -> Weight;
	fn alloc_in_handle(q: u32, ) -> Weight;
	fn gas(r: u32, ) -> Weight;
	fn gr_gas_available(r: u32, ) -> Weight;
	fn gr_msg_id(r: u32, ) -> Weight;
	fn gr_origin(r: u32, ) -> Weight;
	fn gr_program_id(r: u32, ) -> Weight;
	fn gr_source(r: u32, ) -> Weight;
	fn gr_value(r: u32, ) -> Weight;
	fn gr_value_available(r: u32, ) -> Weight;
	fn gr_size(r: u32, ) -> Weight;
	fn gr_read(r: u32, ) -> Weight;
	fn gr_read_per_kb(n: u32, ) -> Weight;
	fn gr_block_height(r: u32, ) -> Weight;
	fn gr_block_timestamp(r: u32, ) -> Weight;
	fn gr_send_init(r: u32, ) -> Weight;
	fn gr_send_push(r: u32, ) -> Weight;
	fn gr_send_push_per_kb(n: u32, ) -> Weight;
	fn gr_send_commit(r: u32, ) -> Weight;
	fn gr_send_commit_per_kb(n: u32, ) -> Weight;
	fn gr_reply(r: u32, ) -> Weight;
	fn gr_reply_per_kb(n: u32, ) -> Weight;
	fn gr_reply_to(r: u32, ) -> Weight;
	fn gr_exit_code(r: u32, ) -> Weight;
	fn gr_exit(r: u32, ) -> Weight;
	fn gr_leave(r: u32, ) -> Weight;
	fn gr_wait(r: u32, ) -> Weight;
	fn gr_wake(r: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct GearWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for GearWeight<T> {
	fn submit_code(c: u32, ) -> Weight {
		(38_387_000 as Weight)
			// Standard Error: 0
			.saturating_add((3_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn submit_program(c: u32, p: u32, ) -> Weight {
		(60_086_000 as Weight)
			// Standard Error: 0
			.saturating_add((3_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn send_message(_p: u32, ) -> Weight {
		(42_966_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn send_reply(_p: u32, ) -> Weight {
		(40_675_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn initial_allocation(q: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 135_000
			.saturating_add((41_709_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(18 as Weight))
			.saturating_add(T::DbWeight::get().writes(15 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(q as Weight)))
	}
	fn alloc_in_handle(_q: u32, ) -> Weight {
		(265_457_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(18 as Weight))
			.saturating_add(T::DbWeight::get().writes(16 as Weight))
	}
	fn gas(r: u32, ) -> Weight {
		(303_238_000 as Weight)
			// Standard Error: 322_000
			.saturating_add((61_873_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn gr_gas_available(r: u32, ) -> Weight {
		(255_595_000 as Weight)
			// Standard Error: 143_000
			.saturating_add((62_405_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn gr_msg_id(r: u32, ) -> Weight {
		(337_112_000 as Weight)
			// Standard Error: 223_000
			.saturating_add((72_164_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn gr_origin(r: u32, ) -> Weight {
		(345_522_000 as Weight)
			// Standard Error: 295_000
			.saturating_add((71_898_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn gr_program_id(r: u32, ) -> Weight {
		(363_263_000 as Weight)
			// Standard Error: 432_000
			.saturating_add((71_922_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn gr_source(r: u32, ) -> Weight {
		(331_558_000 as Weight)
			// Standard Error: 267_000
			.saturating_add((73_699_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn gr_value(r: u32, ) -> Weight {
		(334_504_000 as Weight)
			// Standard Error: 232_000
			.saturating_add((71_931_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn gr_value_available(r: u32, ) -> Weight {
		(342_669_000 as Weight)
			// Standard Error: 344_000
			.saturating_add((71_384_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn gr_size(r: u32, ) -> Weight {
		(273_173_000 as Weight)
			// Standard Error: 606_000
			.saturating_add((58_469_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn gr_read(r: u32, ) -> Weight {
		(286_237_000 as Weight)
			// Standard Error: 541_000
			.saturating_add((86_256_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn gr_read_per_kb(n: u32, ) -> Weight {
		(275_990_000 as Weight)
			// Standard Error: 273_000
			.saturating_add((30_338_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	fn gr_block_height(r: u32, ) -> Weight {
		(272_857_000 as Weight)
			// Standard Error: 330_000
			.saturating_add((56_231_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn gr_block_timestamp(r: u32, ) -> Weight {
		(249_803_000 as Weight)
			// Standard Error: 90_000
			.saturating_add((62_405_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn gr_send_init(r: u32, ) -> Weight {
		(331_389_000 as Weight)
			// Standard Error: 434_000
			.saturating_add((95_742_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn gr_send_push(r: u32, ) -> Weight {
		(332_431_000 as Weight)
			// Standard Error: 298_000
			.saturating_add((187_194_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn gr_send_push_per_kb(n: u32, ) -> Weight {
		(441_282_000 as Weight)
			// Standard Error: 213_000
			.saturating_add((40_011_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn gr_send_commit(r: u32, ) -> Weight {
		(495_846_000 as Weight)
			// Standard Error: 2_079_000
			.saturating_add((879_545_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(16 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
			.saturating_add(T::DbWeight::get().writes((200 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_send_commit_per_kb(n: u32, ) -> Weight {
		(605_604_000 as Weight)
			// Standard Error: 855_000
			.saturating_add((199_020_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(15 as Weight))
			.saturating_add(T::DbWeight::get().writes(211 as Weight))
	}
	fn gr_reply(r: u32, ) -> Weight {
		(363_257_000 as Weight)
			// Standard Error: 378_000
			.saturating_add((99_505_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(16 as Weight))
			.saturating_add(T::DbWeight::get().writes(12 as Weight))
	}
	fn gr_reply_per_kb(n: u32, ) -> Weight {
		(473_406_000 as Weight)
			// Standard Error: 53_000
			.saturating_add((1_329_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(18 as Weight))
			.saturating_add(T::DbWeight::get().writes(13 as Weight))
	}
	fn gr_reply_to(r: u32, ) -> Weight {
		(263_404_000 as Weight)
			// Standard Error: 260_000
			.saturating_add((7_263_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(12 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	fn gr_exit_code(r: u32, ) -> Weight {
		(246_890_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((7_502_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(12 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	fn gr_exit(r: u32, ) -> Weight {
		(261_300_000 as Weight)
			// Standard Error: 651_000
			.saturating_add((229_000_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
			.saturating_add(T::DbWeight::get().writes((257 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_leave(r: u32, ) -> Weight {
		(274_500_000 as Weight)
			// Standard Error: 11_861_000
			.saturating_add((21_100_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn gr_wait(_r: u32, ) -> Weight {
		(251_400_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn gr_wake(r: u32, ) -> Weight {
		(151_337_000 as Weight)
			// Standard Error: 1_693_000
			.saturating_add((1_704_222_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().reads((101 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
			.saturating_add(T::DbWeight::get().writes((200 as Weight).saturating_mul(r as Weight)))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(8_196_000 as Weight)
			// Standard Error: 52_000
			.saturating_add((1_320_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(91_489_000 as Weight)
			// Standard Error: 73_000
			.saturating_add((1_779_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(62_789_000 as Weight)
			// Standard Error: 70_000
			.saturating_add((1_885_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(14_332_000 as Weight)
			// Standard Error: 75_000
			.saturating_add((1_795_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(6_829_000 as Weight)
			// Standard Error: 61_000
			.saturating_add((2_111_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(24_512_000 as Weight)
			// Standard Error: 70_000
			.saturating_add((586_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(35_612_000 as Weight)
			// Standard Error: 72_000
			.saturating_add((588_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(27_562_000 as Weight)
			// Standard Error: 54_000
			.saturating_add((980_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(14_642_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((78_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(32_086_000 as Weight)
			// Standard Error: 64_000
			.saturating_add((6_246_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(20_122_000 as Weight)
			// Standard Error: 65_000
			.saturating_add((11_636_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(37_849_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((631_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(11_310_000 as Weight)
			// Standard Error: 57_000
			.saturating_add((608_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(13_181_000 as Weight)
			// Standard Error: 77_000
			.saturating_add((933_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(8_023_000 as Weight)
			// Standard Error: 75_000
			.saturating_add((1_132_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(8_554_000 as Weight)
			// Standard Error: 59_000
			.saturating_add((1_169_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(14_573_000 as Weight)
			// Standard Error: 78_000
			.saturating_add((1_161_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(15_357_000 as Weight)
			// Standard Error: 62_000
			.saturating_add((816_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(15_184_000 as Weight)
			// Standard Error: 77_000
			.saturating_add((1_119_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(11_432_000 as Weight)
			// Standard Error: 78_000
			.saturating_add((1_238_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(17_580_000 as Weight)
			// Standard Error: 74_000
			.saturating_add((971_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(8_678_000 as Weight)
			// Standard Error: 59_000
			.saturating_add((1_039_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(9_120_000 as Weight)
			// Standard Error: 71_000
			.saturating_add((1_314_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(16_075_000 as Weight)
			// Standard Error: 74_000
			.saturating_add((1_054_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(17_102_000 as Weight)
			// Standard Error: 66_000
			.saturating_add((796_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(15_134_000 as Weight)
			// Standard Error: 83_000
			.saturating_add((1_597_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(18_219_000 as Weight)
			// Standard Error: 71_000
			.saturating_add((1_431_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(18_767_000 as Weight)
			// Standard Error: 71_000
			.saturating_add((1_272_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(27_064_000 as Weight)
			// Standard Error: 90_000
			.saturating_add((1_348_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(23_278_000 as Weight)
			// Standard Error: 89_000
			.saturating_add((1_448_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(16_594_000 as Weight)
			// Standard Error: 72_000
			.saturating_add((1_323_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(15_583_000 as Weight)
			// Standard Error: 76_000
			.saturating_add((1_428_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(22_531_000 as Weight)
			// Standard Error: 73_000
			.saturating_add((1_304_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(22_688_000 as Weight)
			// Standard Error: 79_000
			.saturating_add((1_232_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(21_799_000 as Weight)
			// Standard Error: 68_000
			.saturating_add((1_117_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(16_067_000 as Weight)
			// Standard Error: 68_000
			.saturating_add((1_381_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(11_630_000 as Weight)
			// Standard Error: 67_000
			.saturating_add((1_574_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(16_698_000 as Weight)
			// Standard Error: 64_000
			.saturating_add((1_325_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(16_505_000 as Weight)
			// Standard Error: 75_000
			.saturating_add((1_542_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(24_179_000 as Weight)
			// Standard Error: 83_000
			.saturating_add((1_328_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(14_204_000 as Weight)
			// Standard Error: 63_000
			.saturating_add((1_344_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(24_651_000 as Weight)
			// Standard Error: 80_000
			.saturating_add((1_319_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(20_481_000 as Weight)
			// Standard Error: 86_000
			.saturating_add((1_489_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(22_222_000 as Weight)
			// Standard Error: 84_000
			.saturating_add((1_390_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(10_285_000 as Weight)
			// Standard Error: 67_000
			.saturating_add((1_556_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(19_784_000 as Weight)
			// Standard Error: 74_000
			.saturating_add((1_257_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(19_052_000 as Weight)
			// Standard Error: 71_000
			.saturating_add((1_286_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(17_603_000 as Weight)
			// Standard Error: 68_000
			.saturating_add((1_312_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(30_270_000 as Weight)
			// Standard Error: 87_000
			.saturating_add((1_155_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(9_376_000 as Weight)
			// Standard Error: 60_000
			.saturating_add((1_467_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn submit_code(c: u32, ) -> Weight {
		(38_387_000 as Weight)
			// Standard Error: 0
			.saturating_add((3_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn submit_program(c: u32, p: u32, ) -> Weight {
		(60_086_000 as Weight)
			// Standard Error: 0
			.saturating_add((3_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn send_message(_p: u32, ) -> Weight {
		(42_966_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn send_reply(_p: u32, ) -> Weight {
		(40_675_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn initial_allocation(q: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 135_000
			.saturating_add((41_709_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(18 as Weight))
			.saturating_add(RocksDbWeight::get().writes(15 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(q as Weight)))
	}
	fn alloc_in_handle(_q: u32, ) -> Weight {
		(265_457_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(18 as Weight))
			.saturating_add(RocksDbWeight::get().writes(16 as Weight))
	}
	fn gas(r: u32, ) -> Weight {
		(303_238_000 as Weight)
			// Standard Error: 322_000
			.saturating_add((61_873_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn gr_gas_available(r: u32, ) -> Weight {
		(255_595_000 as Weight)
			// Standard Error: 143_000
			.saturating_add((62_405_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn gr_msg_id(r: u32, ) -> Weight {
		(337_112_000 as Weight)
			// Standard Error: 223_000
			.saturating_add((72_164_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn gr_origin(r: u32, ) -> Weight {
		(345_522_000 as Weight)
			// Standard Error: 295_000
			.saturating_add((71_898_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn gr_program_id(r: u32, ) -> Weight {
		(363_263_000 as Weight)
			// Standard Error: 432_000
			.saturating_add((71_922_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn gr_source(r: u32, ) -> Weight {
		(331_558_000 as Weight)
			// Standard Error: 267_000
			.saturating_add((73_699_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn gr_value(r: u32, ) -> Weight {
		(334_504_000 as Weight)
			// Standard Error: 232_000
			.saturating_add((71_931_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn gr_value_available(r: u32, ) -> Weight {
		(342_669_000 as Weight)
			// Standard Error: 344_000
			.saturating_add((71_384_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn gr_size(r: u32, ) -> Weight {
		(273_173_000 as Weight)
			// Standard Error: 606_000
			.saturating_add((58_469_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn gr_read(r: u32, ) -> Weight {
		(286_237_000 as Weight)
			// Standard Error: 541_000
			.saturating_add((86_256_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn gr_read_per_kb(n: u32, ) -> Weight {
		(275_990_000 as Weight)
			// Standard Error: 273_000
			.saturating_add((30_338_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(13 as Weight))
			.saturating_add(RocksDbWeight::get().writes(10 as Weight))
	}
	fn gr_block_height(r: u32, ) -> Weight {
		(272_857_000 as Weight)
			// Standard Error: 330_000
			.saturating_add((56_231_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn gr_block_timestamp(r: u32, ) -> Weight {
		(249_803_000 as Weight)
			// Standard Error: 90_000
			.saturating_add((62_405_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn gr_send_init(r: u32, ) -> Weight {
		(331_389_000 as Weight)
			// Standard Error: 434_000
			.saturating_add((95_742_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn gr_send_push(r: u32, ) -> Weight {
		(332_431_000 as Weight)
			// Standard Error: 298_000
			.saturating_add((187_194_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn gr_send_push_per_kb(n: u32, ) -> Weight {
		(441_282_000 as Weight)
			// Standard Error: 213_000
			.saturating_add((40_011_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(13 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn gr_send_commit(r: u32, ) -> Weight {
		(495_846_000 as Weight)
			// Standard Error: 2_079_000
			.saturating_add((879_545_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(16 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes((200 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_send_commit_per_kb(n: u32, ) -> Weight {
		(605_604_000 as Weight)
			// Standard Error: 855_000
			.saturating_add((199_020_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(15 as Weight))
			.saturating_add(RocksDbWeight::get().writes(211 as Weight))
	}
	fn gr_reply(r: u32, ) -> Weight {
		(363_257_000 as Weight)
			// Standard Error: 378_000
			.saturating_add((99_505_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(16 as Weight))
			.saturating_add(RocksDbWeight::get().writes(12 as Weight))
	}
	fn gr_reply_per_kb(n: u32, ) -> Weight {
		(473_406_000 as Weight)
			// Standard Error: 53_000
			.saturating_add((1_329_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(18 as Weight))
			.saturating_add(RocksDbWeight::get().writes(13 as Weight))
	}
	fn gr_reply_to(r: u32, ) -> Weight {
		(263_404_000 as Weight)
			// Standard Error: 260_000
			.saturating_add((7_263_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(12 as Weight))
			.saturating_add(RocksDbWeight::get().writes(10 as Weight))
	}
	fn gr_exit_code(r: u32, ) -> Weight {
		(246_890_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((7_502_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(12 as Weight))
			.saturating_add(RocksDbWeight::get().writes(10 as Weight))
	}
	fn gr_exit(r: u32, ) -> Weight {
		(261_300_000 as Weight)
			// Standard Error: 651_000
			.saturating_add((229_000_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes((257 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_leave(r: u32, ) -> Weight {
		(274_500_000 as Weight)
			// Standard Error: 11_861_000
			.saturating_add((21_100_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn gr_wait(_r: u32, ) -> Weight {
		(251_400_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn gr_wake(r: u32, ) -> Weight {
		(151_337_000 as Weight)
			// Standard Error: 1_693_000
			.saturating_add((1_704_222_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(13 as Weight))
			.saturating_add(RocksDbWeight::get().reads((101 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes((200 as Weight).saturating_mul(r as Weight)))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(8_196_000 as Weight)
			// Standard Error: 52_000
			.saturating_add((1_320_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(91_489_000 as Weight)
			// Standard Error: 73_000
			.saturating_add((1_779_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(62_789_000 as Weight)
			// Standard Error: 70_000
			.saturating_add((1_885_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(14_332_000 as Weight)
			// Standard Error: 75_000
			.saturating_add((1_795_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(6_829_000 as Weight)
			// Standard Error: 61_000
			.saturating_add((2_111_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(24_512_000 as Weight)
			// Standard Error: 70_000
			.saturating_add((586_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(35_612_000 as Weight)
			// Standard Error: 72_000
			.saturating_add((588_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(27_562_000 as Weight)
			// Standard Error: 54_000
			.saturating_add((980_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(14_642_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((78_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(32_086_000 as Weight)
			// Standard Error: 64_000
			.saturating_add((6_246_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(20_122_000 as Weight)
			// Standard Error: 65_000
			.saturating_add((11_636_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(37_849_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((631_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(11_310_000 as Weight)
			// Standard Error: 57_000
			.saturating_add((608_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(13_181_000 as Weight)
			// Standard Error: 77_000
			.saturating_add((933_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(8_023_000 as Weight)
			// Standard Error: 75_000
			.saturating_add((1_132_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(8_554_000 as Weight)
			// Standard Error: 59_000
			.saturating_add((1_169_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(14_573_000 as Weight)
			// Standard Error: 78_000
			.saturating_add((1_161_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(15_357_000 as Weight)
			// Standard Error: 62_000
			.saturating_add((816_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(15_184_000 as Weight)
			// Standard Error: 77_000
			.saturating_add((1_119_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(11_432_000 as Weight)
			// Standard Error: 78_000
			.saturating_add((1_238_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(17_580_000 as Weight)
			// Standard Error: 74_000
			.saturating_add((971_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(8_678_000 as Weight)
			// Standard Error: 59_000
			.saturating_add((1_039_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(9_120_000 as Weight)
			// Standard Error: 71_000
			.saturating_add((1_314_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(16_075_000 as Weight)
			// Standard Error: 74_000
			.saturating_add((1_054_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(17_102_000 as Weight)
			// Standard Error: 66_000
			.saturating_add((796_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(15_134_000 as Weight)
			// Standard Error: 83_000
			.saturating_add((1_597_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(18_219_000 as Weight)
			// Standard Error: 71_000
			.saturating_add((1_431_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(18_767_000 as Weight)
			// Standard Error: 71_000
			.saturating_add((1_272_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(27_064_000 as Weight)
			// Standard Error: 90_000
			.saturating_add((1_348_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(23_278_000 as Weight)
			// Standard Error: 89_000
			.saturating_add((1_448_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(16_594_000 as Weight)
			// Standard Error: 72_000
			.saturating_add((1_323_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(15_583_000 as Weight)
			// Standard Error: 76_000
			.saturating_add((1_428_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(22_531_000 as Weight)
			// Standard Error: 73_000
			.saturating_add((1_304_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(22_688_000 as Weight)
			// Standard Error: 79_000
			.saturating_add((1_232_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(21_799_000 as Weight)
			// Standard Error: 68_000
			.saturating_add((1_117_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(16_067_000 as Weight)
			// Standard Error: 68_000
			.saturating_add((1_381_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(11_630_000 as Weight)
			// Standard Error: 67_000
			.saturating_add((1_574_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(16_698_000 as Weight)
			// Standard Error: 64_000
			.saturating_add((1_325_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(16_505_000 as Weight)
			// Standard Error: 75_000
			.saturating_add((1_542_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(24_179_000 as Weight)
			// Standard Error: 83_000
			.saturating_add((1_328_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(14_204_000 as Weight)
			// Standard Error: 63_000
			.saturating_add((1_344_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(24_651_000 as Weight)
			// Standard Error: 80_000
			.saturating_add((1_319_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(20_481_000 as Weight)
			// Standard Error: 86_000
			.saturating_add((1_489_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(22_222_000 as Weight)
			// Standard Error: 84_000
			.saturating_add((1_390_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(10_285_000 as Weight)
			// Standard Error: 67_000
			.saturating_add((1_556_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(19_784_000 as Weight)
			// Standard Error: 74_000
			.saturating_add((1_257_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(19_052_000 as Weight)
			// Standard Error: 71_000
			.saturating_add((1_286_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(17_603_000 as Weight)
			// Standard Error: 68_000
			.saturating_add((1_312_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(30_270_000 as Weight)
			// Standard Error: 87_000
			.saturating_add((1_155_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(9_376_000 as Weight)
			// Standard Error: 60_000
			.saturating_add((1_467_000 as Weight).saturating_mul(r as Weight))
	}
}
