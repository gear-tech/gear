// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-07-18, STEPS: `1`, REPEAT: 1, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/gear-node benchmark pallet --chain=dev --steps=1 --repeat=1 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./pallets/gear/src/weights.rs --template=./.maintain/gear-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
	fn allocation_cost() -> Weight;
	fn grow_cost() -> Weight;
	fn initial_cost() -> Weight;
	fn load_cost() -> Weight;
	fn claim_value_from_mailbox() -> Weight;
	fn submit_code(c: u32, ) -> Weight;
	fn submit_program(c: u32, s: u32, ) -> Weight;
	fn send_message(p: u32, ) -> Weight;
	fn send_reply(p: u32, ) -> Weight;
	fn initial_allocation(q: u32, ) -> Weight;
	fn alloc_in_handle(q: u32, ) -> Weight;
	fn reinstrument(c: u32, ) -> Weight;
	fn alloc(r: u32, ) -> Weight;
	fn gas(r: u32, ) -> Weight;
	fn gr_gas_available(r: u32, ) -> Weight;
	fn gr_msg_id(r: u32, ) -> Weight;
	fn gr_origin(r: u32, ) -> Weight;
	fn gr_program_id(r: u32, ) -> Weight;
	fn gr_source(r: u32, ) -> Weight;
	fn gr_value(r: u32, ) -> Weight;
	fn gr_value_available(r: u32, ) -> Weight;
	fn gr_size(r: u32, ) -> Weight;
	fn gr_read(r: u32, ) -> Weight;
	fn gr_read_per_kb(n: u32, ) -> Weight;
	fn gr_block_height(r: u32, ) -> Weight;
	fn gr_block_timestamp(r: u32, ) -> Weight;
	fn gr_send_init(r: u32, ) -> Weight;
	fn gr_send_push(r: u32, ) -> Weight;
	fn gr_send_push_per_kb(n: u32, ) -> Weight;
	fn gr_send_commit(r: u32, ) -> Weight;
	fn gr_send_commit_per_kb(n: u32, ) -> Weight;
	fn gr_reply_commit(r: u32, ) -> Weight;
	fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
	fn gr_reply_push(r: u32, ) -> Weight;
	fn gr_reply_push_per_kb(n: u32, ) -> Weight;
	fn gr_reply_to(r: u32, ) -> Weight;
	fn gr_debug(r: u32, ) -> Weight;
	fn gr_exit_code(r: u32, ) -> Weight;
	fn gr_exit(r: u32, ) -> Weight;
	fn gr_leave(r: u32, ) -> Weight;
	fn gr_wait(r: u32, ) -> Weight;
	fn gr_wake(r: u32, ) -> Weight;
	fn gr_create_program_wgas(r: u32, ) -> Weight;
	fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct GearWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for GearWeight<T> {
	fn allocation_cost() -> Weight {
		// To be changed with the proper value.
		T::DbWeight::get().writes(1 as Weight)
	}
	fn grow_cost() -> Weight {
		// To be changed with the proper value.
		T::DbWeight::get().writes(1 as Weight)
	}
	fn initial_cost() -> Weight {
		T::DbWeight::get().writes(1 as Weight)
	}
	fn load_cost() -> Weight {
		T::DbWeight::get().reads(1 as Weight)
	}
	fn claim_value_from_mailbox() -> Weight {
		(63_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn submit_code(_c: u32, ) -> Weight {
		(8_041_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn submit_program(c: u32, s: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_000
			.saturating_add((32_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn send_message(_p: u32, ) -> Weight {
		(109_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn send_reply(_p: u32, ) -> Weight {
		(129_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(12 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	fn initial_allocation(_q: u32, ) -> Weight {
		(244_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(25 as Weight))
			.saturating_add(T::DbWeight::get().writes(17 as Weight))
	}
	fn alloc_in_handle(_q: u32, ) -> Weight {
		(283_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(23 as Weight))
			.saturating_add(T::DbWeight::get().writes(15 as Weight))
	}
	fn reinstrument(_c: u32, ) -> Weight {
		(16_410_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn alloc(_r: u32, ) -> Weight {
		(4_772_000_000 as Weight)
	}
	fn gas(_r: u32, ) -> Weight {
		(1_127_000_000 as Weight)
	}
	fn gr_gas_available(_r: u32, ) -> Weight {
		(1_114_000_000 as Weight)
	}
	fn gr_msg_id(_r: u32, ) -> Weight {
		(1_535_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
	}
	fn gr_origin(_r: u32, ) -> Weight {
		(1_480_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
	}
	fn gr_program_id(_r: u32, ) -> Weight {
		(1_486_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
	}
	fn gr_source(_r: u32, ) -> Weight {
		(1_494_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
	}
	fn gr_value(_r: u32, ) -> Weight {
		(1_444_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
	}
	fn gr_value_available(_r: u32, ) -> Weight {
		(1_443_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
	}
	fn gr_size(_r: u32, ) -> Weight {
		(958_000_000 as Weight)
	}
	fn gr_read(_r: u32, ) -> Weight {
		(1_388_000_000 as Weight)
	}
	fn gr_read_per_kb(_n: u32, ) -> Weight {
		(1_531_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(16 as Weight))
	}
	fn gr_block_height(_r: u32, ) -> Weight {
		(980_000_000 as Weight)
	}
	fn gr_block_timestamp(_r: u32, ) -> Weight {
		(1_107_000_000 as Weight)
	}
	fn gr_send_init(_r: u32, ) -> Weight {
		(1_866_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_send_push(_r: u32, ) -> Weight {
		(3_618_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_send_push_per_kb(_n: u32, ) -> Weight {
		(4_033_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(25 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_send_commit(_r: u32, ) -> Weight {
		(8_448_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(819 as Weight))
			.saturating_add(T::DbWeight::get().writes(810 as Weight))
	}
	fn gr_send_commit_per_kb(_n: u32, ) -> Weight {
		(486_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(33 as Weight))
			.saturating_add(T::DbWeight::get().writes(12 as Weight))
	}
	fn gr_reply_commit(_r: u32, ) -> Weight {
		(2_068_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(16 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn gr_reply_commit_per_kb(_n: u32, ) -> Weight {
		(425_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(20 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn gr_reply_push(_r: u32, ) -> Weight {
		(1_660_000_000 as Weight)
	}
	fn gr_reply_push_per_kb(_n: u32, ) -> Weight {
		(3_727_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(16 as Weight))
	}
	fn gr_reply_to(_r: u32, ) -> Weight {
		(153_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn gr_debug(_r: u32, ) -> Weight {
		(1_418_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn gr_exit_code(_r: u32, ) -> Weight {
		(163_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn gr_exit(_r: u32, ) -> Weight {
		(277_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(17 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn gr_leave(_r: u32, ) -> Weight {
		(127_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn gr_wait(_r: u32, ) -> Weight {
		(131_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn gr_wake(_r: u32, ) -> Weight {
		(51_797_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6026 as Weight))
			.saturating_add(T::DbWeight::get().writes(4007 as Weight))
	}
	fn gr_create_program_wgas(_r: u32, ) -> Weight {
		(244_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_create_program_wgas_per_kb(_n: u32, ) -> Weight {
		(438_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(26 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn instr_i64const(_r: u32, ) -> Weight {
		(11_000_000 as Weight)
	}
	fn instr_i64load(_r: u32, ) -> Weight {
		(66_000_000 as Weight)
	}
	fn instr_i64store(_r: u32, ) -> Weight {
		(112_000_000 as Weight)
	}
	fn instr_select(_r: u32, ) -> Weight {
		(94_000_000 as Weight)
	}
	fn instr_if(_r: u32, ) -> Weight {
		(101_000_000 as Weight)
	}
	fn instr_br(_r: u32, ) -> Weight {
		(17_000_000 as Weight)
	}
	fn instr_br_if(_r: u32, ) -> Weight {
		(42_000_000 as Weight)
	}
	fn instr_br_table(_r: u32, ) -> Weight {
		(113_000_000 as Weight)
	}
	fn instr_br_table_per_entry(_e: u32, ) -> Weight {
		(38_000_000 as Weight)
	}
	fn instr_call(_r: u32, ) -> Weight {
		(32_000_000 as Weight)
	}
	fn instr_call_indirect(_r: u32, ) -> Weight {
		(184_000_000 as Weight)
	}
	fn instr_call_indirect_per_param(_p: u32, ) -> Weight {
		(93_000_000 as Weight)
	}
	fn instr_local_get(_r: u32, ) -> Weight {
		(43_000_000 as Weight)
	}
	fn instr_local_set(_r: u32, ) -> Weight {
		(53_000_000 as Weight)
	}
	fn instr_local_tee(_r: u32, ) -> Weight {
		(53_000_000 as Weight)
	}
	fn instr_global_get(_r: u32, ) -> Weight {
		(60_000_000 as Weight)
	}
	fn instr_global_set(_r: u32, ) -> Weight {
		(80_000_000 as Weight)
	}
	fn instr_memory_current(_r: u32, ) -> Weight {
		(86_000_000 as Weight)
	}
	fn instr_i64clz(_r: u32, ) -> Weight {
		(41_000_000 as Weight)
	}
	fn instr_i64ctz(_r: u32, ) -> Weight {
		(43_000_000 as Weight)
	}
	fn instr_i64popcnt(_r: u32, ) -> Weight {
		(238_000_000 as Weight)
	}
	fn instr_i64eqz(_r: u32, ) -> Weight {
		(46_000_000 as Weight)
	}
	fn instr_i64extendsi32(_r: u32, ) -> Weight {
		(24_000_000 as Weight)
	}
	fn instr_i64extendui32(_r: u32, ) -> Weight {
		(24_000_000 as Weight)
	}
	fn instr_i32wrapi64(_r: u32, ) -> Weight {
		(37_000_000 as Weight)
	}
	fn instr_i64eq(_r: u32, ) -> Weight {
		(67_000_000 as Weight)
	}
	fn instr_i64ne(_r: u32, ) -> Weight {
		(69_000_000 as Weight)
	}
	fn instr_i64lts(_r: u32, ) -> Weight {
		(70_000_000 as Weight)
	}
	fn instr_i64ltu(_r: u32, ) -> Weight {
		(68_000_000 as Weight)
	}
	fn instr_i64gts(_r: u32, ) -> Weight {
		(74_000_000 as Weight)
	}
	fn instr_i64gtu(_r: u32, ) -> Weight {
		(66_000_000 as Weight)
	}
	fn instr_i64les(_r: u32, ) -> Weight {
		(72_000_000 as Weight)
	}
	fn instr_i64leu(_r: u32, ) -> Weight {
		(68_000_000 as Weight)
	}
	fn instr_i64ges(_r: u32, ) -> Weight {
		(67_000_000 as Weight)
	}
	fn instr_i64geu(_r: u32, ) -> Weight {
		(69_000_000 as Weight)
	}
	fn instr_i64add(_r: u32, ) -> Weight {
		(61_000_000 as Weight)
	}
	fn instr_i64sub(_r: u32, ) -> Weight {
		(61_000_000 as Weight)
	}
	fn instr_i64mul(_r: u32, ) -> Weight {
		(64_000_000 as Weight)
	}
	fn instr_i64divs(_r: u32, ) -> Weight {
		(105_000_000 as Weight)
	}
	fn instr_i64divu(_r: u32, ) -> Weight {
		(75_000_000 as Weight)
	}
	fn instr_i64rems(_r: u32, ) -> Weight {
		(75_000_000 as Weight)
	}
	fn instr_i64remu(_r: u32, ) -> Weight {
		(76_000_000 as Weight)
	}
	fn instr_i64and(_r: u32, ) -> Weight {
		(62_000_000 as Weight)
	}
	fn instr_i64or(_r: u32, ) -> Weight {
		(62_000_000 as Weight)
	}
	fn instr_i64xor(_r: u32, ) -> Weight {
		(64_000_000 as Weight)
	}
	fn instr_i64shl(_r: u32, ) -> Weight {
		(67_000_000 as Weight)
	}
	fn instr_i64shrs(_r: u32, ) -> Weight {
		(67_000_000 as Weight)
	}
	fn instr_i64shru(_r: u32, ) -> Weight {
		(65_000_000 as Weight)
	}
	fn instr_i64rotl(_r: u32, ) -> Weight {
		(38_000_000 as Weight)
	}
	fn instr_i64rotr(_r: u32, ) -> Weight {
		(63_000_000 as Weight)
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn allocation_cost() -> Weight {
		// To be changed with the proper value.
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn grow_cost() -> Weight {
		// To be changed with the proper value.
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn initial_cost() -> Weight {
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn load_cost() -> Weight {
		RocksDbWeight::get().reads(1 as Weight)
	}
	fn claim_value_from_mailbox() -> Weight {
		(63_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	fn submit_code(_c: u32, ) -> Weight {
		(8_041_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn submit_program(c: u32, s: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_000
			.saturating_add((32_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn send_message(_p: u32, ) -> Weight {
		(109_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn send_reply(_p: u32, ) -> Weight {
		(129_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(12 as Weight))
			.saturating_add(RocksDbWeight::get().writes(10 as Weight))
	}
	fn initial_allocation(_q: u32, ) -> Weight {
		(244_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(25 as Weight))
			.saturating_add(RocksDbWeight::get().writes(17 as Weight))
	}
	fn alloc_in_handle(_q: u32, ) -> Weight {
		(283_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(23 as Weight))
			.saturating_add(RocksDbWeight::get().writes(15 as Weight))
	}
	fn reinstrument(_c: u32, ) -> Weight {
		(16_410_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn alloc(_r: u32, ) -> Weight {
		(4_772_000_000 as Weight)
	}
	fn gas(_r: u32, ) -> Weight {
		(1_127_000_000 as Weight)
	}
	fn gr_gas_available(_r: u32, ) -> Weight {
		(1_114_000_000 as Weight)
	}
	fn gr_msg_id(_r: u32, ) -> Weight {
		(1_535_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
	}
	fn gr_origin(_r: u32, ) -> Weight {
		(1_480_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
	}
	fn gr_program_id(_r: u32, ) -> Weight {
		(1_486_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
	}
	fn gr_source(_r: u32, ) -> Weight {
		(1_494_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
	}
	fn gr_value(_r: u32, ) -> Weight {
		(1_444_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
	}
	fn gr_value_available(_r: u32, ) -> Weight {
		(1_443_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
	}
	fn gr_size(_r: u32, ) -> Weight {
		(958_000_000 as Weight)
	}
	fn gr_read(_r: u32, ) -> Weight {
		(1_388_000_000 as Weight)
	}
	fn gr_read_per_kb(_n: u32, ) -> Weight {
		(1_531_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(16 as Weight))
	}
	fn gr_block_height(_r: u32, ) -> Weight {
		(980_000_000 as Weight)
	}
	fn gr_block_timestamp(_r: u32, ) -> Weight {
		(1_107_000_000 as Weight)
	}
	fn gr_send_init(_r: u32, ) -> Weight {
		(1_866_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(13 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_send_push(_r: u32, ) -> Weight {
		(3_618_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(13 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_send_push_per_kb(_n: u32, ) -> Weight {
		(4_033_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(25 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_send_commit(_r: u32, ) -> Weight {
		(8_448_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(819 as Weight))
			.saturating_add(RocksDbWeight::get().writes(810 as Weight))
	}
	fn gr_send_commit_per_kb(_n: u32, ) -> Weight {
		(486_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(33 as Weight))
			.saturating_add(RocksDbWeight::get().writes(12 as Weight))
	}
	fn gr_reply_commit(_r: u32, ) -> Weight {
		(2_068_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(16 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn gr_reply_commit_per_kb(_n: u32, ) -> Weight {
		(425_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(20 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn gr_reply_push(_r: u32, ) -> Weight {
		(1_660_000_000 as Weight)
	}
	fn gr_reply_push_per_kb(_n: u32, ) -> Weight {
		(3_727_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(16 as Weight))
	}
	fn gr_reply_to(_r: u32, ) -> Weight {
		(153_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn gr_debug(_r: u32, ) -> Weight {
		(1_418_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn gr_exit_code(_r: u32, ) -> Weight {
		(163_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn gr_exit(_r: u32, ) -> Weight {
		(277_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(17 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn gr_leave(_r: u32, ) -> Weight {
		(127_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn gr_wait(_r: u32, ) -> Weight {
		(131_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	fn gr_wake(_r: u32, ) -> Weight {
		(51_797_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6026 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4007 as Weight))
	}
	fn gr_create_program_wgas(_r: u32, ) -> Weight {
		(244_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_create_program_wgas_per_kb(_n: u32, ) -> Weight {
		(438_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(26 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn instr_i64const(_r: u32, ) -> Weight {
		(11_000_000 as Weight)
	}
	fn instr_i64load(_r: u32, ) -> Weight {
		(66_000_000 as Weight)
	}
	fn instr_i64store(_r: u32, ) -> Weight {
		(112_000_000 as Weight)
	}
	fn instr_select(_r: u32, ) -> Weight {
		(94_000_000 as Weight)
	}
	fn instr_if(_r: u32, ) -> Weight {
		(101_000_000 as Weight)
	}
	fn instr_br(_r: u32, ) -> Weight {
		(17_000_000 as Weight)
	}
	fn instr_br_if(_r: u32, ) -> Weight {
		(42_000_000 as Weight)
	}
	fn instr_br_table(_r: u32, ) -> Weight {
		(113_000_000 as Weight)
	}
	fn instr_br_table_per_entry(_e: u32, ) -> Weight {
		(38_000_000 as Weight)
	}
	fn instr_call(_r: u32, ) -> Weight {
		(32_000_000 as Weight)
	}
	fn instr_call_indirect(_r: u32, ) -> Weight {
		(184_000_000 as Weight)
	}
	fn instr_call_indirect_per_param(_p: u32, ) -> Weight {
		(93_000_000 as Weight)
	}
	fn instr_local_get(_r: u32, ) -> Weight {
		(43_000_000 as Weight)
	}
	fn instr_local_set(_r: u32, ) -> Weight {
		(53_000_000 as Weight)
	}
	fn instr_local_tee(_r: u32, ) -> Weight {
		(53_000_000 as Weight)
	}
	fn instr_global_get(_r: u32, ) -> Weight {
		(60_000_000 as Weight)
	}
	fn instr_global_set(_r: u32, ) -> Weight {
		(80_000_000 as Weight)
	}
	fn instr_memory_current(_r: u32, ) -> Weight {
		(86_000_000 as Weight)
	}
	fn instr_i64clz(_r: u32, ) -> Weight {
		(41_000_000 as Weight)
	}
	fn instr_i64ctz(_r: u32, ) -> Weight {
		(43_000_000 as Weight)
	}
	fn instr_i64popcnt(_r: u32, ) -> Weight {
		(238_000_000 as Weight)
	}
	fn instr_i64eqz(_r: u32, ) -> Weight {
		(46_000_000 as Weight)
	}
	fn instr_i64extendsi32(_r: u32, ) -> Weight {
		(24_000_000 as Weight)
	}
	fn instr_i64extendui32(_r: u32, ) -> Weight {
		(24_000_000 as Weight)
	}
	fn instr_i32wrapi64(_r: u32, ) -> Weight {
		(37_000_000 as Weight)
	}
	fn instr_i64eq(_r: u32, ) -> Weight {
		(67_000_000 as Weight)
	}
	fn instr_i64ne(_r: u32, ) -> Weight {
		(69_000_000 as Weight)
	}
	fn instr_i64lts(_r: u32, ) -> Weight {
		(70_000_000 as Weight)
	}
	fn instr_i64ltu(_r: u32, ) -> Weight {
		(68_000_000 as Weight)
	}
	fn instr_i64gts(_r: u32, ) -> Weight {
		(74_000_000 as Weight)
	}
	fn instr_i64gtu(_r: u32, ) -> Weight {
		(66_000_000 as Weight)
	}
	fn instr_i64les(_r: u32, ) -> Weight {
		(72_000_000 as Weight)
	}
	fn instr_i64leu(_r: u32, ) -> Weight {
		(68_000_000 as Weight)
	}
	fn instr_i64ges(_r: u32, ) -> Weight {
		(67_000_000 as Weight)
	}
	fn instr_i64geu(_r: u32, ) -> Weight {
		(69_000_000 as Weight)
	}
	fn instr_i64add(_r: u32, ) -> Weight {
		(61_000_000 as Weight)
	}
	fn instr_i64sub(_r: u32, ) -> Weight {
		(61_000_000 as Weight)
	}
	fn instr_i64mul(_r: u32, ) -> Weight {
		(64_000_000 as Weight)
	}
	fn instr_i64divs(_r: u32, ) -> Weight {
		(105_000_000 as Weight)
	}
	fn instr_i64divu(_r: u32, ) -> Weight {
		(75_000_000 as Weight)
	}
	fn instr_i64rems(_r: u32, ) -> Weight {
		(75_000_000 as Weight)
	}
	fn instr_i64remu(_r: u32, ) -> Weight {
		(76_000_000 as Weight)
	}
	fn instr_i64and(_r: u32, ) -> Weight {
		(62_000_000 as Weight)
	}
	fn instr_i64or(_r: u32, ) -> Weight {
		(62_000_000 as Weight)
	}
	fn instr_i64xor(_r: u32, ) -> Weight {
		(64_000_000 as Weight)
	}
	fn instr_i64shl(_r: u32, ) -> Weight {
		(67_000_000 as Weight)
	}
	fn instr_i64shrs(_r: u32, ) -> Weight {
		(67_000_000 as Weight)
	}
	fn instr_i64shru(_r: u32, ) -> Weight {
		(65_000_000 as Weight)
	}
	fn instr_i64rotl(_r: u32, ) -> Weight {
		(38_000_000 as Weight)
	}
	fn instr_i64rotr(_r: u32, ) -> Weight {
		(63_000_000 as Weight)
	}
}
