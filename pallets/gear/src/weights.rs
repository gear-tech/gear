// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-06-22, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/gear-node benchmark pallet --chain=dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./pallets/gear/src/weights.rs --template=./.maintain/gear-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
	fn submit_code(c: u32, ) -> Weight;
	fn submit_program(c: u32, s: u32, ) -> Weight;
	fn send_message(p: u32, ) -> Weight;
	fn send_reply(p: u32, ) -> Weight;
	fn initial_allocation(q: u32, ) -> Weight;
	fn alloc_in_handle(q: u32, ) -> Weight;
	fn reinstrument(c: u32, ) -> Weight;
	fn alloc(r: u32, ) -> Weight;
	fn gas(r: u32, ) -> Weight;
	fn gr_gas_available(r: u32, ) -> Weight;
	fn gr_msg_id(r: u32, ) -> Weight;
	fn gr_origin(r: u32, ) -> Weight;
	fn gr_program_id(r: u32, ) -> Weight;
	fn gr_source(r: u32, ) -> Weight;
	fn gr_value(r: u32, ) -> Weight;
	fn gr_value_available(r: u32, ) -> Weight;
	fn gr_size(r: u32, ) -> Weight;
	fn gr_read(r: u32, ) -> Weight;
	fn gr_read_per_kb(n: u32, ) -> Weight;
	fn gr_block_height(r: u32, ) -> Weight;
	fn gr_block_timestamp(r: u32, ) -> Weight;
	fn gr_send_init(r: u32, ) -> Weight;
	fn gr_send_push(r: u32, ) -> Weight;
	fn gr_send_push_per_kb(n: u32, ) -> Weight;
	fn gr_send_commit(r: u32, ) -> Weight;
	fn gr_send_commit_per_kb(n: u32, ) -> Weight;
	fn gr_reply_commit(r: u32, ) -> Weight;
	fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
	fn gr_reply_push(r: u32, ) -> Weight;
	fn gr_reply_push_per_kb(n: u32, ) -> Weight;
	fn gr_reply_to(r: u32, ) -> Weight;
	fn gr_debug(r: u32, ) -> Weight;
	fn gr_exit_code(r: u32, ) -> Weight;
	fn gr_exit(r: u32, ) -> Weight;
	fn gr_leave(r: u32, ) -> Weight;
	fn gr_wait(r: u32, ) -> Weight;
	fn gr_wake(r: u32, ) -> Weight;
	fn gr_create_program_wgas(r: u32, ) -> Weight;
	fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight;
	fn initial_cost() -> Weight;
	fn allocation_cost() -> Weight;
	fn grow_cost() -> Weight;
	fn load_cost() -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct GearWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for GearWeight<T> {
	fn submit_code(c: u32, ) -> Weight {
		(91_925_000 as Weight)
			// Standard Error: 0
			.saturating_add((67_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn submit_program(c: u32, s: u32, ) -> Weight {
		(381_898_000 as Weight)
			// Standard Error: 0
			.saturating_add((65_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((4_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn send_message(p: u32, ) -> Weight {
		(123_830_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn send_reply(p: u32, ) -> Weight {
		(132_192_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn initial_allocation(_q: u32, ) -> Weight {
		(297_230_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(24 as Weight))
			.saturating_add(T::DbWeight::get().writes(16 as Weight))
	}
	fn alloc_in_handle(_q: u32, ) -> Weight {
		(450_244_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(23 as Weight))
			.saturating_add(T::DbWeight::get().writes(15 as Weight))
	}
	fn reinstrument(c: u32, ) -> Weight {
		(95_477_000 as Weight)
			// Standard Error: 0
			.saturating_add((68_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn alloc(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 57_913_000
			.saturating_add((15_020_426_000 as Weight).saturating_mul(r as Weight))
	}
	fn gas(r: u32, ) -> Weight {
		(2_558_419_000 as Weight)
			// Standard Error: 201_000
			.saturating_add((107_923_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_gas_available(r: u32, ) -> Weight {
		(2_662_051_000 as Weight)
			// Standard Error: 340_000
			.saturating_add((103_951_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_msg_id(r: u32, ) -> Weight {
		(2_773_490_000 as Weight)
			// Standard Error: 225_000
			.saturating_add((137_310_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_origin(r: u32, ) -> Weight {
		(2_828_744_000 as Weight)
			// Standard Error: 264_000
			.saturating_add((137_956_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_program_id(r: u32, ) -> Weight {
		(2_870_095_000 as Weight)
			// Standard Error: 271_000
			.saturating_add((140_333_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_source(r: u32, ) -> Weight {
		(2_960_528_000 as Weight)
			// Standard Error: 648_000
			.saturating_add((137_056_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_value(r: u32, ) -> Weight {
		(2_992_013_000 as Weight)
			// Standard Error: 311_000
			.saturating_add((135_444_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_value_available(r: u32, ) -> Weight {
		(3_007_161_000 as Weight)
			// Standard Error: 219_000
			.saturating_add((133_994_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn gr_size(r: u32, ) -> Weight {
		(2_954_866_000 as Weight)
			// Standard Error: 197_000
			.saturating_add((83_700_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_read(r: u32, ) -> Weight {
		(2_992_718_000 as Weight)
			// Standard Error: 406_000
			.saturating_add((136_166_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_read_per_kb(n: u32, ) -> Weight {
		(3_138_331_000 as Weight)
			// Standard Error: 80_000
			.saturating_add((32_849_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_block_height(r: u32, ) -> Weight {
		(3_009_373_000 as Weight)
			// Standard Error: 226_000
			.saturating_add((86_580_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_block_timestamp(r: u32, ) -> Weight {
		(3_024_801_000 as Weight)
			// Standard Error: 387_000
			.saturating_add((103_401_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_send_init(r: u32, ) -> Weight {
		(3_221_937_000 as Weight)
			// Standard Error: 533_000
			.saturating_add((162_867_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_send_push(r: u32, ) -> Weight {
		(3_258_801_000 as Weight)
			// Standard Error: 394_000
			.saturating_add((314_889_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_send_push_per_kb(n: u32, ) -> Weight {
		(3_640_885_000 as Weight)
			// Standard Error: 254_000
			.saturating_add((62_225_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn gr_send_commit(r: u32, ) -> Weight {
		(3_432_548_000 as Weight)
			// Standard Error: 527_000
			.saturating_add((710_492_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(15 as Weight))
			.saturating_add(T::DbWeight::get().reads((40 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
			.saturating_add(T::DbWeight::get().writes((40 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_send_commit_per_kb(n: u32, ) -> Weight {
		(3_465_452_000 as Weight)
			// Standard Error: 66_000
			.saturating_add((6_061_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(17 as Weight))
			.saturating_add(T::DbWeight::get().writes(12 as Weight))
	}
	fn gr_reply_commit(r: u32, ) -> Weight {
		(3_466_903_000 as Weight)
			// Standard Error: 1_025_000
			.saturating_add((164_940_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
		(3_732_669_000 as Weight)
			// Standard Error: 94_000
			.saturating_add((983_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn gr_reply_push(r: u32, ) -> Weight {
		(3_359_224_000 as Weight)
			// Standard Error: 308_000
			.saturating_add((141_008_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_reply_push_per_kb(n: u32, ) -> Weight {
		(3_607_470_000 as Weight)
			// Standard Error: 312_000
			.saturating_add((58_504_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_reply_to(r: u32, ) -> Weight {
		(3_499_809_000 as Weight)
			// Standard Error: 504_000
			.saturating_add((2_511_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn gr_debug(r: u32, ) -> Weight {
		(3_472_075_000 as Weight)
			// Standard Error: 705_000
			.saturating_add((137_708_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn gr_exit_code(r: u32, ) -> Weight {
		(3_487_798_000 as Weight)
			// Standard Error: 376_000
			.saturating_add((2_587_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn gr_exit(r: u32, ) -> Weight {
		(3_495_394_000 as Weight)
			// Standard Error: 10_352_000
			.saturating_add((190_800_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().reads((6 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
			.saturating_add(T::DbWeight::get().writes((4 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_leave(r: u32, ) -> Weight {
		(3_463_672_000 as Weight)
			// Standard Error: 7_891_000
			.saturating_add((68_508_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn gr_wait(_r: u32, ) -> Weight {
		(3_487_116_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn gr_wake(r: u32, ) -> Weight {
		(3_189_935_000 as Weight)
			// Standard Error: 5_823_000
			.saturating_add((5_148_667_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().reads((201 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
			.saturating_add(T::DbWeight::get().writes((200 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_create_program_wgas(r: u32, ) -> Weight {
		(3_607_601_000 as Weight)
			// Standard Error: 2_996_000
			.saturating_add((83_412_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
		(3_678_139_000 as Weight)
			// Standard Error: 124_000
			.saturating_add((4_551_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn initial_cost() -> Weight {
		100_000_000 as Weight
	}
	fn allocation_cost() -> Weight {
		200_000_000 as Weight
	}
	fn grow_cost() -> Weight {
		200_000_000 as Weight
	}
	fn load_cost() -> Weight {
		20_000_000 as Weight
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(8_821_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(45_964_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((373_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(65_878_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((632_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(8_879_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((663_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(8_949_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((680_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(8_856_000 as Weight)
			// Standard Error: 0
			.saturating_add((397_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(9_850_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((528_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(9_694_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_616_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(10_417_000 as Weight)
			// Standard Error: 0
			.saturating_add((20_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(9_344_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((612_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(14_290_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_739_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(12_085_000 as Weight)
			// Standard Error: 0
			.saturating_add((162_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(9_016_000 as Weight)
			// Standard Error: 0
			.saturating_add((66_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(9_137_000 as Weight)
			// Standard Error: 0
			.saturating_add((142_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(9_103_000 as Weight)
			// Standard Error: 0
			.saturating_add((143_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(29_074_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((243_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(31_656_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((290_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(14_031_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_845_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(9_487_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((625_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(9_354_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((610_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(8_846_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((132_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(9_126_000 as Weight)
			// Standard Error: 0
			.saturating_add((254_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(8_968_000 as Weight)
			// Standard Error: 0
			.saturating_add((84_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(8_941_000 as Weight)
			// Standard Error: 0
			.saturating_add((52_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(8_890_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((58_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(9_145_000 as Weight)
			// Standard Error: 0
			.saturating_add((253_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(9_228_000 as Weight)
			// Standard Error: 0
			.saturating_add((251_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(9_110_000 as Weight)
			// Standard Error: 0
			.saturating_add((254_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(9_172_000 as Weight)
			// Standard Error: 0
			.saturating_add((251_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(9_100_000 as Weight)
			// Standard Error: 0
			.saturating_add((254_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(9_152_000 as Weight)
			// Standard Error: 0
			.saturating_add((253_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(9_179_000 as Weight)
			// Standard Error: 0
			.saturating_add((253_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(9_094_000 as Weight)
			// Standard Error: 0
			.saturating_add((254_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(9_060_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((255_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(9_120_000 as Weight)
			// Standard Error: 0
			.saturating_add((254_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(9_044_000 as Weight)
			// Standard Error: 0
			.saturating_add((200_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(8_940_000 as Weight)
			// Standard Error: 0
			.saturating_add((205_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(9_303_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((245_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(10_435_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((933_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(10_064_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((859_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(7_703_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_892_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(10_988_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((855_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(9_010_000 as Weight)
			// Standard Error: 0
			.saturating_add((200_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(9_085_000 as Weight)
			// Standard Error: 0
			.saturating_add((198_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(9_086_000 as Weight)
			// Standard Error: 0
			.saturating_add((199_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(9_052_000 as Weight)
			// Standard Error: 0
			.saturating_add((181_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(9_139_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((178_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(8_950_000 as Weight)
			// Standard Error: 0
			.saturating_add((180_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(9_009_000 as Weight)
			// Standard Error: 0
			.saturating_add((179_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(8_909_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((187_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn submit_code(c: u32, ) -> Weight {
		(91_925_000 as Weight)
			// Standard Error: 0
			.saturating_add((67_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn submit_program(c: u32, s: u32, ) -> Weight {
		(381_898_000 as Weight)
			// Standard Error: 0
			.saturating_add((65_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((4_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn send_message(p: u32, ) -> Weight {
		(123_830_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn send_reply(p: u32, ) -> Weight {
		(132_192_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn initial_allocation(_q: u32, ) -> Weight {
		(297_230_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(24 as Weight))
			.saturating_add(RocksDbWeight::get().writes(16 as Weight))
	}
	fn alloc_in_handle(_q: u32, ) -> Weight {
		(450_244_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(23 as Weight))
			.saturating_add(RocksDbWeight::get().writes(15 as Weight))
	}
	fn reinstrument(c: u32, ) -> Weight {
		(95_477_000 as Weight)
			// Standard Error: 0
			.saturating_add((68_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn alloc(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 57_913_000
			.saturating_add((15_020_426_000 as Weight).saturating_mul(r as Weight))
	}
	fn gas(r: u32, ) -> Weight {
		(2_558_419_000 as Weight)
			// Standard Error: 201_000
			.saturating_add((107_923_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_gas_available(r: u32, ) -> Weight {
		(2_662_051_000 as Weight)
			// Standard Error: 340_000
			.saturating_add((103_951_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_msg_id(r: u32, ) -> Weight {
		(2_773_490_000 as Weight)
			// Standard Error: 225_000
			.saturating_add((137_310_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_origin(r: u32, ) -> Weight {
		(2_828_744_000 as Weight)
			// Standard Error: 264_000
			.saturating_add((137_956_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_program_id(r: u32, ) -> Weight {
		(2_870_095_000 as Weight)
			// Standard Error: 271_000
			.saturating_add((140_333_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_source(r: u32, ) -> Weight {
		(2_960_528_000 as Weight)
			// Standard Error: 648_000
			.saturating_add((137_056_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_value(r: u32, ) -> Weight {
		(2_992_013_000 as Weight)
			// Standard Error: 311_000
			.saturating_add((135_444_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_value_available(r: u32, ) -> Weight {
		(3_007_161_000 as Weight)
			// Standard Error: 219_000
			.saturating_add((133_994_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn gr_size(r: u32, ) -> Weight {
		(2_954_866_000 as Weight)
			// Standard Error: 197_000
			.saturating_add((83_700_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_read(r: u32, ) -> Weight {
		(2_992_718_000 as Weight)
			// Standard Error: 406_000
			.saturating_add((136_166_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_read_per_kb(n: u32, ) -> Weight {
		(3_138_331_000 as Weight)
			// Standard Error: 80_000
			.saturating_add((32_849_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_block_height(r: u32, ) -> Weight {
		(3_009_373_000 as Weight)
			// Standard Error: 226_000
			.saturating_add((86_580_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_block_timestamp(r: u32, ) -> Weight {
		(3_024_801_000 as Weight)
			// Standard Error: 387_000
			.saturating_add((103_401_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_send_init(r: u32, ) -> Weight {
		(3_221_937_000 as Weight)
			// Standard Error: 533_000
			.saturating_add((162_867_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_send_push(r: u32, ) -> Weight {
		(3_258_801_000 as Weight)
			// Standard Error: 394_000
			.saturating_add((314_889_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_send_push_per_kb(n: u32, ) -> Weight {
		(3_640_885_000 as Weight)
			// Standard Error: 254_000
			.saturating_add((62_225_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn gr_send_commit(r: u32, ) -> Weight {
		(3_432_548_000 as Weight)
			// Standard Error: 527_000
			.saturating_add((710_492_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(15 as Weight))
			.saturating_add(RocksDbWeight::get().reads((40 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes((40 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_send_commit_per_kb(n: u32, ) -> Weight {
		(3_465_452_000 as Weight)
			// Standard Error: 66_000
			.saturating_add((6_061_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(17 as Weight))
			.saturating_add(RocksDbWeight::get().writes(12 as Weight))
	}
	fn gr_reply_commit(r: u32, ) -> Weight {
		(3_466_903_000 as Weight)
			// Standard Error: 1_025_000
			.saturating_add((164_940_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
		(3_732_669_000 as Weight)
			// Standard Error: 94_000
			.saturating_add((983_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(13 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn gr_reply_push(r: u32, ) -> Weight {
		(3_359_224_000 as Weight)
			// Standard Error: 308_000
			.saturating_add((141_008_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_reply_push_per_kb(n: u32, ) -> Weight {
		(3_607_470_000 as Weight)
			// Standard Error: 312_000
			.saturating_add((58_504_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_reply_to(r: u32, ) -> Weight {
		(3_499_809_000 as Weight)
			// Standard Error: 504_000
			.saturating_add((2_511_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn gr_debug(r: u32, ) -> Weight {
		(3_472_075_000 as Weight)
			// Standard Error: 705_000
			.saturating_add((137_708_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn gr_exit_code(r: u32, ) -> Weight {
		(3_487_798_000 as Weight)
			// Standard Error: 376_000
			.saturating_add((2_587_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn gr_exit(r: u32, ) -> Weight {
		(3_495_394_000 as Weight)
			// Standard Error: 10_352_000
			.saturating_add((190_800_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().reads((6 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes((4 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_leave(r: u32, ) -> Weight {
		(3_463_672_000 as Weight)
			// Standard Error: 7_891_000
			.saturating_add((68_508_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn gr_wait(_r: u32, ) -> Weight {
		(3_487_116_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn gr_wake(r: u32, ) -> Weight {
		(3_189_935_000 as Weight)
			// Standard Error: 5_823_000
			.saturating_add((5_148_667_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().reads((201 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes((200 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_create_program_wgas(r: u32, ) -> Weight {
		(3_607_601_000 as Weight)
			// Standard Error: 2_996_000
			.saturating_add((83_412_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(r as Weight)))
	}
	fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
		(3_678_139_000 as Weight)
			// Standard Error: 124_000
			.saturating_add((4_551_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	fn initial_cost() -> Weight {
		100_000_000 as Weight
	}
	fn allocation_cost() -> Weight {
		200_000_000 as Weight
	}
	fn grow_cost() -> Weight {
		200_000_000 as Weight
	}
	fn load_cost() -> Weight {
		20_000_000 as Weight
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(8_821_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(45_964_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((373_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(65_878_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((632_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(8_879_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((663_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(8_949_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((680_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(8_856_000 as Weight)
			// Standard Error: 0
			.saturating_add((397_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(9_850_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((528_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(9_694_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_616_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(10_417_000 as Weight)
			// Standard Error: 0
			.saturating_add((20_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(9_344_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((612_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(14_290_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_739_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(12_085_000 as Weight)
			// Standard Error: 0
			.saturating_add((162_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(9_016_000 as Weight)
			// Standard Error: 0
			.saturating_add((66_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(9_137_000 as Weight)
			// Standard Error: 0
			.saturating_add((142_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(9_103_000 as Weight)
			// Standard Error: 0
			.saturating_add((143_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(29_074_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((243_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(31_656_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((290_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(14_031_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_845_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(9_487_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((625_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(9_354_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((610_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(8_846_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((132_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(9_126_000 as Weight)
			// Standard Error: 0
			.saturating_add((254_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(8_968_000 as Weight)
			// Standard Error: 0
			.saturating_add((84_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(8_941_000 as Weight)
			// Standard Error: 0
			.saturating_add((52_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(8_890_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((58_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(9_145_000 as Weight)
			// Standard Error: 0
			.saturating_add((253_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(9_228_000 as Weight)
			// Standard Error: 0
			.saturating_add((251_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(9_110_000 as Weight)
			// Standard Error: 0
			.saturating_add((254_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(9_172_000 as Weight)
			// Standard Error: 0
			.saturating_add((251_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(9_100_000 as Weight)
			// Standard Error: 0
			.saturating_add((254_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(9_152_000 as Weight)
			// Standard Error: 0
			.saturating_add((253_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(9_179_000 as Weight)
			// Standard Error: 0
			.saturating_add((253_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(9_094_000 as Weight)
			// Standard Error: 0
			.saturating_add((254_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(9_060_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((255_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(9_120_000 as Weight)
			// Standard Error: 0
			.saturating_add((254_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(9_044_000 as Weight)
			// Standard Error: 0
			.saturating_add((200_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(8_940_000 as Weight)
			// Standard Error: 0
			.saturating_add((205_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(9_303_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((245_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(10_435_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((933_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(10_064_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((859_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(7_703_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_892_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(10_988_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((855_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(9_010_000 as Weight)
			// Standard Error: 0
			.saturating_add((200_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(9_085_000 as Weight)
			// Standard Error: 0
			.saturating_add((198_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(9_086_000 as Weight)
			// Standard Error: 0
			.saturating_add((199_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(9_052_000 as Weight)
			// Standard Error: 0
			.saturating_add((181_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(9_139_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((178_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(8_950_000 as Weight)
			// Standard Error: 0
			.saturating_add((180_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(9_009_000 as Weight)
			// Standard Error: 0
			.saturating_add((179_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(8_909_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((187_000 as Weight).saturating_mul(r as Weight))
	}
}
