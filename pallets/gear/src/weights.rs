// This file is part of Gear.

// Copyright (C) 2021 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-08-25, STEPS: `[50, ]`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("local"), DB CACHE: 128

// Executed Command:
// ./target/release/gear-node
// benchmark
// --chain=local
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_gear
// --extrinsic=*
// --steps
// 50
// --repeat
// 20
// --output
// .

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions for pallet_gear.
pub trait WeightInfo {
    fn submit_program(c: u32, p: u32) -> Weight;
    fn send_message(p: u32) -> Weight;
    fn send_reply(p: u32) -> Weight;
}

pub struct GearWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for GearWeight<T> {
    fn submit_program(c: u32, p: u32) -> Weight {
        (200_000_000 as Weight)
            .saturating_add((5_000 as Weight).saturating_mul(c as Weight))
            .saturating_add((5_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(4 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }

    fn send_message(p: u32) -> Weight {
        (160_000_000 as Weight)
            .saturating_add((6_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(5 as Weight))
            .saturating_add(T::DbWeight::get().writes(4 as Weight))
    }

    fn send_reply(p: u32) -> Weight {
        (170_000_000 as Weight)
            .saturating_add((6_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(5 as Weight))
            .saturating_add(T::DbWeight::get().writes(5 as Weight))
    }
}

// For backwards compatibility and tests
const SUBMIT_WEIGHT_PER_BYTE: u64 = 1_000_000;
const MESSAGE_PER_BYTE: u64 = 100_000;
impl WeightInfo for () {
    fn submit_program(c: u32, p: u32) -> Weight {
        (0 as Weight)
            .saturating_add(RocksDbWeight::get().writes(4 as Weight))
            .saturating_add(SUBMIT_WEIGHT_PER_BYTE.saturating_mul(c as Weight))
            .saturating_add(MESSAGE_PER_BYTE.saturating_mul(p as Weight))
    }

    fn send_message(p: u32) -> Weight {
        (0 as Weight)
            .saturating_add(RocksDbWeight::get().writes(4 as Weight))
            .saturating_add(MESSAGE_PER_BYTE.saturating_mul(p as Weight))
    }

    fn send_reply(p: u32) -> Weight {
        (0 as Weight)
            .saturating_add(RocksDbWeight::get().writes(4 as Weight))
            .saturating_add(MESSAGE_PER_BYTE.saturating_mul(p as Weight))
    }
}
