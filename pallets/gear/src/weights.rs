// This file is part of Gear.

// Copyright (C) 2022-2024 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-08-09, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=alloc,claim_value,claim_value_to_inheritor,create_program,db_read_per_kb,db_write_per_kb,free,free_range,free_range_per_page,gr_block_height,gr_block_timestamp,gr_create_program,gr_create_program_per_kb,gr_create_program_wgas,gr_create_program_wgas_per_kb,gr_debug,gr_debug_per_kb,gr_env_vars,gr_gas_available,gr_message_id,gr_program_id,gr_random,gr_read,gr_read_per_kb,gr_reply_code,gr_reply_deposit,gr_reply_per_kb,gr_reply_push,gr_reply_push_input,gr_reply_push_input_per_kb,gr_reply_push_per_kb,gr_reply_to,gr_reply_wgas_per_kb,gr_reservation_reply_commit_per_kb,gr_reservation_reply_per_kb,gr_reservation_send,gr_reservation_send_commit,gr_reservation_send_per_kb,gr_reserve_gas,gr_send,gr_send_commit,gr_send_commit_wgas,gr_send_init,gr_send_input,gr_send_input_wgas,gr_send_per_kb,gr_send_push,gr_send_push_input,gr_send_push_input_per_kb,gr_send_push_per_kb,gr_send_wgas,gr_send_wgas_per_kb,gr_signal_code,gr_signal_from,gr_size,gr_source,gr_system_reserve_gas,gr_unreserve_gas,gr_value,gr_value_available,gr_wake,instantiate_module_code_section_per_kb,instantiate_module_data_section_per_kb,instantiate_module_element_section_per_kb,instantiate_module_global_section_per_kb,instantiate_module_table_section_per_kb,instantiate_module_type_section_per_kb,instr_br,instr_br_if,instr_br_table,instr_br_table_per_entry,instr_call,instr_call_const,instr_call_indirect,instr_call_indirect_per_param,instr_call_per_local,instr_global_get,instr_global_set,instr_i32add,instr_i32and,instr_i32clz,instr_i32ctz,instr_i32divs,instr_i32divu,instr_i32eq,instr_i32eqz,instr_i32extend16s,instr_i32extend8s,instr_i32ges,instr_i32geu,instr_i32gts,instr_i32gtu,instr_i32les,instr_i32leu,instr_i32load,instr_i32lts,instr_i32ltu,instr_i32mul,instr_i32ne,instr_i32or,instr_i32popcnt,instr_i32rems,instr_i32remu,instr_i32rotl,instr_i32rotr,instr_i32shl,instr_i32shrs,instr_i32shru,instr_i32store,instr_i32sub,instr_i32wrapi64,instr_i32xor,instr_i64add,instr_i64and,instr_i64clz,instr_i64ctz,instr_i64divs,instr_i64divu,instr_i64eq,instr_i64eqz,instr_i64extend16s,instr_i64extend32s,instr_i64extend8s,instr_i64extendsi32,instr_i64extendui32,instr_i64ges,instr_i64geu,instr_i64gts,instr_i64gtu,instr_i64les,instr_i64leu,instr_i64load,instr_i64lts,instr_i64ltu,instr_i64mul,instr_i64ne,instr_i64or,instr_i64popcnt,instr_i64rems,instr_i64remu,instr_i64rotl,instr_i64rotr,instr_i64shl,instr_i64shrs,instr_i64shru,instr_i64store,instr_i64sub,instr_i64xor,instr_if,instr_local_get,instr_local_set,instr_local_tee,instr_memory_current,instr_select,lazy_pages_host_func_read,lazy_pages_host_func_write,lazy_pages_host_func_write_after_read,lazy_pages_load_page_storage_data,lazy_pages_signal_read,lazy_pages_signal_write,lazy_pages_signal_write_after_read,load_allocations_per_interval,mem_grow,mem_grow_per_page,reinstrument_per_kb,send_message,send_reply,tasks_remove_from_mailbox,tasks_remove_from_waitlist,tasks_remove_gas_reservation,tasks_send_dispatch,tasks_send_user_message,tasks_send_user_message_to_mailbox,tasks_wake_message,tasks_wake_message_no_wake,upload_code,upload_program --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_code_section_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_data_section_per_kb(d: u32, ) -> Weight;
    fn instantiate_module_global_section_per_kb(g: u32, ) -> Weight;
    fn instantiate_module_table_section_per_kb(t: u32, ) -> Weight;
    fn instantiate_module_element_section_per_kb(e: u32, ) -> Weight;
    fn instantiate_module_type_section_per_kb(t: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn claim_value_to_inheritor(d: u32, ) -> Weight;
    fn reinstrument_per_kb(e: u32, ) -> Weight;
    fn load_allocations_per_interval(a: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn mem_grow_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn free_range(r: u32, ) -> Weight;
    fn free_range_per_page(p: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_env_vars(r: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn tasks_remove_gas_reservation() -> Weight;
    fn tasks_send_user_message_to_mailbox() -> Weight;
    fn tasks_send_user_message() -> Weight;
    fn tasks_send_dispatch() -> Weight;
    fn tasks_wake_message() -> Weight;
    fn tasks_wake_message_no_wake() -> Weight;
    fn tasks_remove_from_waitlist() -> Weight;
    fn tasks_remove_from_mailbox() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 72_468_000 picoseconds.
        Weight::from_parts(78_340_598, 0)
            // Standard Error: 66_021
            .saturating_add(Weight::from_parts(13_603_312, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 72_836_000 picoseconds.
        Weight::from_parts(78_568_154, 0)
            // Standard Error: 57_541
            .saturating_add(Weight::from_parts(11_943_522, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 70_826_000 picoseconds.
        Weight::from_parts(76_361_756, 0)
            // Standard Error: 58_313
            .saturating_add(Weight::from_parts(12_018_944, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 71_437_000 picoseconds.
        Weight::from_parts(76_910_212, 0)
            // Standard Error: 57_889
            .saturating_add(Weight::from_parts(12_137_604, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 686_795_000 picoseconds.
        Weight::from_parts(693_880_106, 0)
            // Standard Error: 84_577
            .saturating_add(Weight::from_parts(13_351_726, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 690_552_000 picoseconds.
        Weight::from_parts(696_770_436, 0)
            // Standard Error: 81_154
            .saturating_add(Weight::from_parts(10_595_976, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 75_006_000 picoseconds.
        Weight::from_parts(81_745_692, 0)
            // Standard Error: 60_857
            .saturating_add(Weight::from_parts(8_379_472, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 74_614_000 picoseconds.
        Weight::from_parts(80_847_976, 0)
            // Standard Error: 59_799
            .saturating_add(Weight::from_parts(7_809_250, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 70_956_000 picoseconds.
        Weight::from_parts(76_883_436, 0)
            // Standard Error: 1_052_647
            .saturating_add(Weight::from_parts(96_563_242, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 70_324_000 picoseconds.
        Weight::from_parts(76_094_758, 0)
            // Standard Error: 1_523_647
            .saturating_add(Weight::from_parts(130_303_114, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 71_253_000 picoseconds.
        Weight::from_parts(76_988_662, 0)
            // Standard Error: 1_321_349
            .saturating_add(Weight::from_parts(112_591_140, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 71_457_000 picoseconds.
        Weight::from_parts(76_401_868, 0)
            // Standard Error: 1_044_536
            .saturating_add(Weight::from_parts(92_188_166, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 71_393_000 picoseconds.
        Weight::from_parts(77_342_970, 0)
            // Standard Error: 1_531_666
            .saturating_add(Weight::from_parts(127_918_232, 0).saturating_mul(r.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_010_000 picoseconds.
        Weight::from_parts(1_042_000, 0)
            // Standard Error: 443
            .saturating_add(Weight::from_parts(239_667, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_268_000 picoseconds.
        Weight::from_parts(3_371_000, 3610)
            // Standard Error: 1_081
            .saturating_add(Weight::from_parts(583_390, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_code_section_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 42_213_000 picoseconds.
        Weight::from_parts(43_931_000, 0)
            // Standard Error: 9_338
            .saturating_add(Weight::from_parts(2_038_653, 0).saturating_mul(c.into()))
    }
    /// The range of component `d` is `[0, 512]`.
    fn instantiate_module_data_section_per_kb(d: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 54_382_000 picoseconds.
        Weight::from_parts(59_367_747, 0)
            // Standard Error: 2_227
            .saturating_add(Weight::from_parts(468_300, 0).saturating_mul(d.into()))
    }
    /// The range of component `g` is `[0, 512]`.
    fn instantiate_module_global_section_per_kb(g: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 41_630_000 picoseconds.
        Weight::from_parts(44_328_000, 0)
            // Standard Error: 21_640
            .saturating_add(Weight::from_parts(1_798_911, 0).saturating_mul(g.into()))
    }
    /// The range of component `t` is `[0, 9765]`.
    fn instantiate_module_table_section_per_kb(t: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 42_537_000 picoseconds.
        Weight::from_parts(43_174_777, 0)
            // Standard Error: 223
            .saturating_add(Weight::from_parts(644_866, 0).saturating_mul(t.into()))
    }
    /// The range of component `e` is `[0, 512]`.
    fn instantiate_module_element_section_per_kb(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 258_586_000 picoseconds.
        Weight::from_parts(448_596_483, 0)
            // Standard Error: 80_189
            .saturating_add(Weight::from_parts(2_245_891, 0).saturating_mul(e.into()))
    }
    /// The range of component `t` is `[0, 512]`.
    fn instantiate_module_type_section_per_kb(t: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 42_219_000 picoseconds.
        Weight::from_parts(44_257_000, 0)
            // Standard Error: 101_981
            .saturating_add(Weight::from_parts(15_590_711, 0).saturating_mul(t.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1357`
        //  Estimated: `8799`
        // Minimum execution time: 135_545_000 picoseconds.
        Weight::from_parts(137_798_000, 8799)
            .saturating_add(T::DbWeight::get().reads(17_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `3578`
        // Minimum execution time: 91_838_000 picoseconds.
        Weight::from_parts(87_499_000, 3578)
            // Standard Error: 37_656
            .saturating_add(Weight::from_parts(57_062_879, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1113`
        //  Estimated: `6196`
        // Minimum execution time: 165_191_000 picoseconds.
        Weight::from_parts(195_228_532, 6196)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(1_678, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `475`
        //  Estimated: `6196`
        // Minimum execution time: 7_008_485_000 picoseconds.
        Weight::from_parts(7_016_678_000, 6196)
            // Standard Error: 319_814
            .saturating_add(Weight::from_parts(38_334_392, 0).saturating_mul(c.into()))
            // Standard Error: 19
            .saturating_add(Weight::from_parts(563, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `516`
        //  Estimated: `6196`
        // Minimum execution time: 97_151_000 picoseconds.
        Weight::from_parts(9_468_475, 6196)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(975, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1356`
        //  Estimated: `8799`
        // Minimum execution time: 163_939_000 picoseconds.
        Weight::from_parts(82_754_731, 8799)
            // Standard Error: 4
            .saturating_add(Weight::from_parts(991, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(18_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `d` is `[1, 1024]`.
    fn claim_value_to_inheritor(d: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + d * (207 ±0)`
        //  Estimated: `3593 + d * (2683 ±0)`
        // Minimum execution time: 52_008_000 picoseconds.
        Weight::from_parts(52_280_000, 3593)
            // Standard Error: 33_470
            .saturating_add(Weight::from_parts(42_601_006, 0).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
            .saturating_add(Weight::from_parts(0, 2683).saturating_mul(d.into()))
    }
    /// The range of component `e` is `[0, 512]`.
    fn reinstrument_per_kb(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `329 + e * (1024 ±0)`
        //  Estimated: `3793 + e * (1024 ±0)`
        // Minimum execution time: 81_614_000 picoseconds.
        Weight::from_parts(81_821_000, 3793)
            // Standard Error: 240_361
            .saturating_add(Weight::from_parts(642_844_212, 0).saturating_mul(e.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(e.into()))
    }
    /// The range of component `a` is `[0, 32767]`.
    fn load_allocations_per_interval(a: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101 + a * (8 ±0)`
        //  Estimated: `3566 + a * (8 ±0)`
        // Minimum execution time: 3_722_000 picoseconds.
        Weight::from_parts(7_040_745, 3566)
            // Standard Error: 21
            .saturating_add(Weight::from_parts(20_729, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 8).saturating_mul(a.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 772_153_000 picoseconds.
        Weight::from_parts(691_085_192, 0)
            // Standard Error: 248_133
            .saturating_add(Weight::from_parts(125_211_418, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 285_000 picoseconds.
        Weight::from_parts(315_000, 0)
            // Standard Error: 196_322
            .saturating_add(Weight::from_parts(68_714_212, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 819]`.
    fn mem_grow_per_page(_p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 66_346_000 picoseconds.
        Weight::from_parts(69_649_440, 0)
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 806_255_000 picoseconds.
        Weight::from_parts(786_722_553, 0)
            // Standard Error: 240_484
            .saturating_add(Weight::from_parts(69_478_089, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 748_334_000 picoseconds.
        Weight::from_parts(717_314_931, 0)
            // Standard Error: 243_876
            .saturating_add(Weight::from_parts(73_586_110, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 700]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 776_782_000 picoseconds.
        Weight::from_parts(867_934_346, 0)
            // Standard Error: 6_879
            .saturating_add(Weight::from_parts(3_033_220, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 75_702_000 picoseconds.
        Weight::from_parts(72_549_062, 0)
            // Standard Error: 3_640
            .saturating_add(Weight::from_parts(2_195_328, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_482_000 picoseconds.
        Weight::from_parts(115_404_854, 0)
            // Standard Error: 3_224
            .saturating_add(Weight::from_parts(2_244_307, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_440_000 picoseconds.
        Weight::from_parts(86_480_576, 0)
            // Standard Error: 86_500
            .saturating_add(Weight::from_parts(83_244_247, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_666_000 picoseconds.
        Weight::from_parts(84_830_850, 0)
            // Standard Error: 76_741
            .saturating_add(Weight::from_parts(72_215_909, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 72_688_000 picoseconds.
        Weight::from_parts(86_978_134, 0)
            // Standard Error: 68_291
            .saturating_add(Weight::from_parts(72_030_483, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_471_000 picoseconds.
        Weight::from_parts(83_518_257, 0)
            // Standard Error: 77_888
            .saturating_add(Weight::from_parts(72_647_555, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 72_711_000 picoseconds.
        Weight::from_parts(84_559_032, 0)
            // Standard Error: 77_218
            .saturating_add(Weight::from_parts(72_333_901, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 72_706_000 picoseconds.
        Weight::from_parts(85_031_891, 0)
            // Standard Error: 64_827
            .saturating_add(Weight::from_parts(72_199_037, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 72_704_000 picoseconds.
        Weight::from_parts(85_342_680, 0)
            // Standard Error: 55_380
            .saturating_add(Weight::from_parts(72_188_287, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 74_003_000 picoseconds.
        Weight::from_parts(86_465_636, 0)
            // Standard Error: 63_958
            .saturating_add(Weight::from_parts(71_807_995, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 683_441_000 picoseconds.
        Weight::from_parts(712_191_502, 0)
            // Standard Error: 139_652
            .saturating_add(Weight::from_parts(133_753_826, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 817_943_000 picoseconds.
        Weight::from_parts(826_465_000, 0)
            // Standard Error: 119_104
            .saturating_add(Weight::from_parts(16_159_400, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_249_000 picoseconds.
        Weight::from_parts(85_387_353, 0)
            // Standard Error: 94_629
            .saturating_add(Weight::from_parts(82_622_132, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_351_000 picoseconds.
        Weight::from_parts(86_797_062, 0)
            // Standard Error: 93_741
            .saturating_add(Weight::from_parts(78_374_247, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_743_000 picoseconds.
        Weight::from_parts(86_659_181, 0)
            // Standard Error: 68_268
            .saturating_add(Weight::from_parts(71_500_893, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_830_000 picoseconds.
        Weight::from_parts(90_187_397, 0)
            // Standard Error: 186_196
            .saturating_add(Weight::from_parts(148_010_685, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 75_646_000 picoseconds.
        Weight::from_parts(78_273_000, 0)
            // Standard Error: 2_806_746
            .saturating_add(Weight::from_parts(629_704_408, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_233_000 picoseconds.
        Weight::from_parts(83_921_758, 0)
            // Standard Error: 185_635
            .saturating_add(Weight::from_parts(237_129_865, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 296_969_000 picoseconds.
        Weight::from_parts(298_985_000, 0)
            // Standard Error: 253_454
            .saturating_add(Weight::from_parts(40_386_347, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_288_000 picoseconds.
        Weight::from_parts(89_204_827, 0)
            // Standard Error: 200_278
            .saturating_add(Weight::from_parts(239_818_561, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 300_106_000 picoseconds.
        Weight::from_parts(303_875_000, 0)
            // Standard Error: 249_930
            .saturating_add(Weight::from_parts(40_333_892, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 688_959_000 picoseconds.
        Weight::from_parts(703_207_986, 0)
            // Standard Error: 157_844
            .saturating_add(Weight::from_parts(226_913_525, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 685_090_000 picoseconds.
        Weight::from_parts(704_454_554, 0)
            // Standard Error: 180_430
            .saturating_add(Weight::from_parts(231_236_920, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_111_000 picoseconds.
        Weight::from_parts(81_082_532, 0)
            // Standard Error: 93_145
            .saturating_add(Weight::from_parts(86_954_903, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_760_965_000 picoseconds.
        Weight::from_parts(1_845_535_850, 0)
            // Standard Error: 314_641
            .saturating_add(Weight::from_parts(155_554_869, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 281_442_000 picoseconds.
        Weight::from_parts(288_125_000, 0)
            // Standard Error: 246_660
            .saturating_add(Weight::from_parts(40_350_642, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_742_726_000 picoseconds.
        Weight::from_parts(1_841_004_875, 0)
            // Standard Error: 235_718
            .saturating_add(Weight::from_parts(196_802_226, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_731_055_000 picoseconds.
        Weight::from_parts(1_826_121_868, 0)
            // Standard Error: 203_003
            .saturating_add(Weight::from_parts(199_985_216, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 139_482_000 picoseconds.
        Weight::from_parts(136_169_897, 0)
            // Standard Error: 194_378
            .saturating_add(Weight::from_parts(273_651_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 386_363_000 picoseconds.
        Weight::from_parts(391_786_000, 0)
            // Standard Error: 258_457
            .saturating_add(Weight::from_parts(40_427_721, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_786_972_000 picoseconds.
        Weight::from_parts(1_870_349_345, 0)
            // Standard Error: 252_629
            .saturating_add(Weight::from_parts(233_348_493, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_425_000 picoseconds.
        Weight::from_parts(6_237_930, 0)
            // Standard Error: 3_877
            .saturating_add(Weight::from_parts(728_798, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_204_000 picoseconds.
        Weight::from_parts(6_382_287, 0)
            // Standard Error: 3_876
            .saturating_add(Weight::from_parts(728_188, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_392_000 picoseconds.
        Weight::from_parts(98_913_061, 0)
            // Standard Error: 149_394
            .saturating_add(Weight::from_parts(136_129_726, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_698_000 picoseconds.
        Weight::from_parts(87_372_499, 0)
            // Standard Error: 686
            .saturating_add(Weight::from_parts(668_338, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_432_000 picoseconds.
        Weight::from_parts(5_271_088, 0)
            // Standard Error: 3_912
            .saturating_add(Weight::from_parts(720_353, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_977_000 picoseconds.
        Weight::from_parts(6_445_153, 0)
            // Standard Error: 3_907
            .saturating_add(Weight::from_parts(726_961, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 72_430_000 picoseconds.
        Weight::from_parts(84_793_838, 0)
            // Standard Error: 73_990
            .saturating_add(Weight::from_parts(75_811_938, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 74_453_000 picoseconds.
        Weight::from_parts(81_824_002, 0)
            // Standard Error: 98_573
            .saturating_add(Weight::from_parts(79_443_293, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 74_281_000 picoseconds.
        Weight::from_parts(85_954_515, 0)
            // Standard Error: 83_865
            .saturating_add(Weight::from_parts(76_081_410, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 685_858_000 picoseconds.
        Weight::from_parts(704_529_778, 0)
            // Standard Error: 92_814
            .saturating_add(Weight::from_parts(91_766_393, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 702_381_000 picoseconds.
        Weight::from_parts(705_004_038, 0)
            // Standard Error: 243
            .saturating_add(Weight::from_parts(147_513, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_316_341_000 picoseconds.
        Weight::from_parts(2_460_147_863, 0)
            // Standard Error: 244_611
            .saturating_add(Weight::from_parts(115_133_940, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_421_148_000 picoseconds.
        Weight::from_parts(2_357_811_309, 0)
            // Standard Error: 6_197
            .saturating_add(Weight::from_parts(13_258_237, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 74_244_000 picoseconds.
        Weight::from_parts(86_739_673, 0)
            // Standard Error: 51_192
            .saturating_add(Weight::from_parts(102_043_421, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 139_693_000 picoseconds.
        Weight::from_parts(142_957_000, 0)
            // Standard Error: 260_388
            .saturating_add(Weight::from_parts(35_962_486, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 72_360_000 picoseconds.
        Weight::from_parts(85_921_193, 0)
            // Standard Error: 61_329
            .saturating_add(Weight::from_parts(72_076_077, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_988_000 picoseconds.
        Weight::from_parts(106_011_000, 0)
            // Standard Error: 1_138_394
            .saturating_add(Weight::from_parts(240_918_489, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 77_083_000 picoseconds.
        Weight::from_parts(82_392_641, 0)
            // Standard Error: 241_345
            .saturating_add(Weight::from_parts(295_215_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 60_912_497_000 picoseconds.
        Weight::from_parts(61_001_736_000, 0)
            // Standard Error: 434_085
            .saturating_add(Weight::from_parts(9_577_304, 0).saturating_mul(p.into()))
            // Standard Error: 434_063
            .saturating_add(Weight::from_parts(114_958_531, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 77_894_000 picoseconds.
        Weight::from_parts(77_856_403, 0)
            // Standard Error: 227_166
            .saturating_add(Weight::from_parts(300_654_636, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_021_139_000 picoseconds.
        Weight::from_parts(61_043_109_000, 0)
            // Standard Error: 430_182
            .saturating_add(Weight::from_parts(9_408_879, 0).saturating_mul(p.into()))
            // Standard Error: 430_161
            .saturating_add(Weight::from_parts(114_644_381, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 75_577_000 picoseconds.
        Weight::from_parts(101_890_284, 1131)
            // Standard Error: 7_029
            .saturating_add(Weight::from_parts(13_466_439, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 74_841_000 picoseconds.
        Weight::from_parts(75_691_000, 1131)
            // Standard Error: 13_487
            .saturating_add(Weight::from_parts(36_441_083, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_947_594_000 picoseconds.
        Weight::from_parts(7_016_485_652, 5069931)
            // Standard Error: 60_333
            .saturating_add(Weight::from_parts(36_561_754, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1820 + p * (65580 ±0)`
        //  Estimated: `1946 + p * (75482 ±0)`
        // Minimum execution time: 76_536_000 picoseconds.
        Weight::from_parts(14_595_619, 1946)
            // Standard Error: 157_578
            .saturating_add(Weight::from_parts(50_153_031, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 78_193_000 picoseconds.
        Weight::from_parts(7_236_713, 1131)
            // Standard Error: 269_644
            .saturating_add(Weight::from_parts(48_480_231, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 713_187_000 picoseconds.
        Weight::from_parts(590_866_829, 1496)
            // Standard Error: 369_244
            .saturating_add(Weight::from_parts(59_523_369, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_154_253_000 picoseconds.
        Weight::from_parts(1_039_979_380, 317931)
            // Standard Error: 368_468
            .saturating_add(Weight::from_parts(59_946_120, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_408_476_000 picoseconds.
        Weight::from_parts(4_345_850_428, 0)
            // Standard Error: 21_058
            .saturating_add(Weight::from_parts(2_656_511 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_405_085_000 picoseconds.
        Weight::from_parts(4_338_401_176, 0)
            // Standard Error: 21_960
            .saturating_add(Weight::from_parts(2_641_092 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_431_492_000 picoseconds.
        Weight::from_parts(9_673_680_509, 0)
            // Standard Error: 30_676
            .saturating_add(Weight::from_parts(4_680_213 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_360_480_000 picoseconds.
        Weight::from_parts(9_537_261_740, 0)
            // Standard Error: 27_533
            .saturating_add(Weight::from_parts(4_979_672 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_331_000 picoseconds.
        Weight::from_parts(1_379_000, 0)
            // Standard Error: 9_565
            .saturating_add(Weight::from_parts(2_945_850 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_383_000 picoseconds.
        Weight::from_parts(1_429_000, 0)
            // Standard Error: 4_951
            .saturating_add(Weight::from_parts(2_209_232 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_320_000 picoseconds.
        Weight::from_parts(2_272_981, 0)
            // Standard Error: 953
            .saturating_add(Weight::from_parts(1_508_484 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_288_000 picoseconds.
        Weight::from_parts(144_996, 0)
            // Standard Error: 11_883
            .saturating_add(Weight::from_parts(2_531_434 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_351_000 picoseconds.
        Weight::from_parts(1_389_000, 0)
            // Standard Error: 27_866
            .saturating_add(Weight::from_parts(4_686_267 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_967_000 picoseconds.
        Weight::from_parts(5_468_496, 0)
            // Standard Error: 844
            .saturating_add(Weight::from_parts(73_871 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_350_000 picoseconds.
        Weight::from_parts(1_401_024, 0)
            // Standard Error: 6_380
            .saturating_add(Weight::from_parts(2_471_195 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts((2_471_195 -
            2_301_712) * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_309_000 picoseconds.
        Weight::from_parts(1_843_444, 0)
            // Standard Error: 12_136
            .saturating_add(Weight::from_parts(2_301_712 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_411_000 picoseconds.
        Weight::from_parts(1_445_000, 0)
            // Standard Error: 15_605
            .saturating_add(Weight::from_parts(9_830_913 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_270_000 picoseconds.
        Weight::from_parts(10_345_000, 0)
            // Standard Error: 9_614
            .saturating_add(Weight::from_parts(657_200 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_756_000 picoseconds.
        Weight::from_parts(3_964_298, 0)
            // Standard Error: 7
            .saturating_add(Weight::from_parts(12 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_016_000 picoseconds.
        Weight::from_parts(8_681_396, 0)
            // Standard Error: 3_586
            .saturating_add(Weight::from_parts(310_101 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_906_000 picoseconds.
        Weight::from_parts(9_137_545, 0)
            // Standard Error: 3_316
            .saturating_add(Weight::from_parts(685_474 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_975_000 picoseconds.
        Weight::from_parts(9_760_427, 0)
            // Standard Error: 3_573
            .saturating_add(Weight::from_parts(671_443 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_374_000 picoseconds.
        Weight::from_parts(1_000_357, 0)
            // Standard Error: 3_626
            .saturating_add(Weight::from_parts(291_977 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_358_000 picoseconds.
        Weight::from_parts(1_418_000, 0)
            // Standard Error: 9_282
            .saturating_add(Weight::from_parts(649_994 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_536_000 picoseconds.
        Weight::from_parts(1_044_793, 0)
            // Standard Error: 5_498
            .saturating_add(Weight::from_parts(5_731_900 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_233_000 picoseconds.
        Weight::from_parts(1_215_148, 0)
            // Standard Error: 2_819
            .saturating_add(Weight::from_parts(260_155 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_328_000 picoseconds.
        Weight::from_parts(1_437_168, 0)
            // Standard Error: 3_610
            .saturating_add(Weight::from_parts(202_028 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_357_000 picoseconds.
        Weight::from_parts(1_136_794, 0)
            // Standard Error: 2_205
            .saturating_add(Weight::from_parts(268_251 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_324_000 picoseconds.
        Weight::from_parts(1_786_406, 0)
            // Standard Error: 547
            .saturating_add(Weight::from_parts(180_114 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_317_000 picoseconds.
        Weight::from_parts(1_117_534, 0)
            // Standard Error: 2_364
            .saturating_add(Weight::from_parts(269_422 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_324_000 picoseconds.
        Weight::from_parts(1_805_624, 0)
            // Standard Error: 1_838
            .saturating_add(Weight::from_parts(195_483 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_320_000 picoseconds.
        Weight::from_parts(1_392_000, 0)
            // Standard Error: 9_162
            .saturating_add(Weight::from_parts(912_172 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_301_000 picoseconds.
        Weight::from_parts(1_338_000, 0)
            // Standard Error: 3_325
            .saturating_add(Weight::from_parts(496_929 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_337_000 picoseconds.
        Weight::from_parts(1_611_666, 0)
            // Standard Error: 625
            .saturating_add(Weight::from_parts(171_506 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_317_000 picoseconds.
        Weight::from_parts(1_700_147, 0)
            // Standard Error: 877
            .saturating_add(Weight::from_parts(170_172 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_316_000 picoseconds.
        Weight::from_parts(1_329_895, 0)
            // Standard Error: 1_945
            .saturating_add(Weight::from_parts(244_746 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_277_000 picoseconds.
        Weight::from_parts(1_095_174, 0)
            // Standard Error: 4_447
            .saturating_add(Weight::from_parts(256_010 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_331_000 picoseconds.
        Weight::from_parts(948_185, 0)
            // Standard Error: 5_240
            .saturating_add(Weight::from_parts(252_152 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_364_000 picoseconds.
        Weight::from_parts(1_691_742, 0)
            // Standard Error: 1_108
            .saturating_add(Weight::from_parts(154_813 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_363_000 picoseconds.
        Weight::from_parts(1_847_986, 0)
            // Standard Error: 1_147
            .saturating_add(Weight::from_parts(93_233 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_281_000 picoseconds.
        Weight::from_parts(1_961_077, 0)
            // Standard Error: 696
            .saturating_add(Weight::from_parts(87_341 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_333_000 picoseconds.
        Weight::from_parts(1_372_000, 0)
            // Standard Error: 11_911
            .saturating_add(Weight::from_parts(1_008_734 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_307_000 picoseconds.
        Weight::from_parts(1_376_000, 0)
            // Standard Error: 4_838
            .saturating_add(Weight::from_parts(540_102 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_298_000 picoseconds.
        Weight::from_parts(1_343_000, 0)
            // Standard Error: 16_519
            .saturating_add(Weight::from_parts(1_191_585 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_303_000 picoseconds.
        Weight::from_parts(1_399_000, 0)
            // Standard Error: 6_288
            .saturating_add(Weight::from_parts(573_438 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_328_000 picoseconds.
        Weight::from_parts(1_397_000, 0)
            // Standard Error: 9_065
            .saturating_add(Weight::from_parts(917_725 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_326_000 picoseconds.
        Weight::from_parts(1_387_000, 0)
            // Standard Error: 3_994
            .saturating_add(Weight::from_parts(512_663 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_275_000 picoseconds.
        Weight::from_parts(1_370_000, 0)
            // Standard Error: 8_166
            .saturating_add(Weight::from_parts(896_742 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_322_000 picoseconds.
        Weight::from_parts(1_352_000, 0)
            // Standard Error: 4_428
            .saturating_add(Weight::from_parts(521_146 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_316_000 picoseconds.
        Weight::from_parts(1_362_000, 0)
            // Standard Error: 10_964
            .saturating_add(Weight::from_parts(950_113 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_314_000 picoseconds.
        Weight::from_parts(1_430_000, 0)
            // Standard Error: 6_233
            .saturating_add(Weight::from_parts(527_757 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_290_000 picoseconds.
        Weight::from_parts(1_345_000, 0)
            // Standard Error: 8_041
            .saturating_add(Weight::from_parts(888_646 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_332_000 picoseconds.
        Weight::from_parts(1_402_000, 0)
            // Standard Error: 3_295
            .saturating_add(Weight::from_parts(501_011 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_337_000 picoseconds.
        Weight::from_parts(1_377_000, 0)
            // Standard Error: 8_442
            .saturating_add(Weight::from_parts(910_933 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_333_000 picoseconds.
        Weight::from_parts(1_401_000, 0)
            // Standard Error: 5_606
            .saturating_add(Weight::from_parts(521_195 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_340_000 picoseconds.
        Weight::from_parts(1_376_000, 0)
            // Standard Error: 12_294
            .saturating_add(Weight::from_parts(950_492 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_336_000 picoseconds.
        Weight::from_parts(1_403_000, 0)
            // Standard Error: 4_497
            .saturating_add(Weight::from_parts(487_845 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_371_000 picoseconds.
        Weight::from_parts(1_407_000, 0)
            // Standard Error: 14_384
            .saturating_add(Weight::from_parts(1_038_473 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_318_000 picoseconds.
        Weight::from_parts(1_366_000, 0)
            // Standard Error: 3_536
            .saturating_add(Weight::from_parts(501_421 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_349_000 picoseconds.
        Weight::from_parts(1_390_000, 0)
            // Standard Error: 12_990
            .saturating_add(Weight::from_parts(1_006_416 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_326_000 picoseconds.
        Weight::from_parts(1_373_000, 0)
            // Standard Error: 3_004
            .saturating_add(Weight::from_parts(499_955 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_357_000 picoseconds.
        Weight::from_parts(1_394_000, 0)
            // Standard Error: 5_225
            .saturating_add(Weight::from_parts(589_236 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_327_000 picoseconds.
        Weight::from_parts(616_374, 0)
            // Standard Error: 6_078
            .saturating_add(Weight::from_parts(323_741 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_340_000 picoseconds.
        Weight::from_parts(1_377_000, 0)
            // Standard Error: 4_261
            .saturating_add(Weight::from_parts(580_272 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_395_000 picoseconds.
        Weight::from_parts(1_248_581, 0)
            // Standard Error: 1_837
            .saturating_add(Weight::from_parts(273_735 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_322_000 picoseconds.
        Weight::from_parts(1_368_000, 0)
            // Standard Error: 12_113
            .saturating_add(Weight::from_parts(934_388 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_344_000 picoseconds.
        Weight::from_parts(1_411_000, 0)
            // Standard Error: 6_047
            .saturating_add(Weight::from_parts(550_572 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_290_000 picoseconds.
        Weight::from_parts(1_385_000, 0)
            // Standard Error: 7_866
            .saturating_add(Weight::from_parts(1_964_453 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_349_000 picoseconds.
        Weight::from_parts(1_411_000, 0)
            // Standard Error: 11_840
            .saturating_add(Weight::from_parts(1_463_772 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_324_000 picoseconds.
        Weight::from_parts(1_369_000, 0)
            // Standard Error: 8_470
            .saturating_add(Weight::from_parts(1_776_938 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_348_000 picoseconds.
        Weight::from_parts(1_387_000, 0)
            // Standard Error: 9_310
            .saturating_add(Weight::from_parts(1_348_132 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_369_000 picoseconds.
        Weight::from_parts(1_434_000, 0)
            // Standard Error: 32_697
            .saturating_add(Weight::from_parts(8_745_987 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_343_000 picoseconds.
        Weight::from_parts(1_378_000, 0)
            // Standard Error: 43_147
            .saturating_add(Weight::from_parts(7_112_006 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_367_000 picoseconds.
        Weight::from_parts(1_417_000, 0)
            // Standard Error: 6_535
            .saturating_add(Weight::from_parts(1_778_734 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_363_000 picoseconds.
        Weight::from_parts(1_418_000, 0)
            // Standard Error: 8_351
            .saturating_add(Weight::from_parts(1_317_333 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_299_000 picoseconds.
        Weight::from_parts(1_384_000, 0)
            // Standard Error: 7_392
            .saturating_add(Weight::from_parts(623_815 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_287_000 picoseconds.
        Weight::from_parts(935_149, 0)
            // Standard Error: 2_071
            .saturating_add(Weight::from_parts(304_270 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_299_000 picoseconds.
        Weight::from_parts(1_355_000, 0)
            // Standard Error: 4_359
            .saturating_add(Weight::from_parts(589_293 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_294_000 picoseconds.
        Weight::from_parts(1_027_247, 0)
            // Standard Error: 2_047
            .saturating_add(Weight::from_parts(303_177 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_340_000 picoseconds.
        Weight::from_parts(1_405_000, 0)
            // Standard Error: 5_133
            .saturating_add(Weight::from_parts(609_550 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_337_000 picoseconds.
        Weight::from_parts(603_111, 0)
            // Standard Error: 6_223
            .saturating_add(Weight::from_parts(326_084 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_303_000 picoseconds.
        Weight::from_parts(1_397_000, 0)
            // Standard Error: 5_895
            .saturating_add(Weight::from_parts(506_341 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_340_000 picoseconds.
        Weight::from_parts(1_247_692, 0)
            // Standard Error: 1_511
            .saturating_add(Weight::from_parts(274_134 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_311_000 picoseconds.
        Weight::from_parts(1_354_000, 0)
            // Standard Error: 2_897
            .saturating_add(Weight::from_parts(483_641 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_331_000 picoseconds.
        Weight::from_parts(1_329_094, 0)
            // Standard Error: 2_115
            .saturating_add(Weight::from_parts(275_076 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_276_000 picoseconds.
        Weight::from_parts(1_347_000, 0)
            // Standard Error: 5_598
            .saturating_add(Weight::from_parts(517_531 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_288_000 picoseconds.
        Weight::from_parts(777_418, 0)
            // Standard Error: 6_424
            .saturating_add(Weight::from_parts(311_033 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_297_000 picoseconds.
        Weight::from_parts(1_378_000, 0)
            // Standard Error: 4_789
            .saturating_add(Weight::from_parts(509_554 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_311_000 picoseconds.
        Weight::from_parts(617_995, 0)
            // Standard Error: 7_052
            .saturating_add(Weight::from_parts(322_976 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_318_000 picoseconds.
        Weight::from_parts(1_391_000, 0)
            // Standard Error: 3_787
            .saturating_add(Weight::from_parts(498_275 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_393_000 picoseconds.
        Weight::from_parts(879_010, 0)
            // Standard Error: 5_769
            .saturating_add(Weight::from_parts(308_463 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1192`
        //  Estimated: `6196`
        // Minimum execution time: 77_564_000 picoseconds.
        Weight::from_parts(79_369_000, 6196)
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `858`
        //  Estimated: `4323`
        // Minimum execution time: 43_250_000 picoseconds.
        Weight::from_parts(44_016_000, 4323)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1113`
        //  Estimated: `6196`
        // Minimum execution time: 88_938_000 picoseconds.
        Weight::from_parts(89_815_000, 6196)
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `694`
        //  Estimated: `4159`
        // Minimum execution time: 30_606_000 picoseconds.
        Weight::from_parts(31_277_000, 4159)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `937`
        //  Estimated: `4402`
        // Minimum execution time: 43_204_000 picoseconds.
        Weight::from_parts(43_879_000, 4402)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 4_683_000 picoseconds.
        Weight::from_parts(5_115_000, 3545)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1669`
        //  Estimated: `7609`
        // Minimum execution time: 119_848_000 picoseconds.
        Weight::from_parts(121_716_000, 7609)
            .saturating_add(T::DbWeight::get().reads(17_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1398`
        //  Estimated: `7338`
        // Minimum execution time: 105_087_000 picoseconds.
        Weight::from_parts(106_798_000, 7338)
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 72_468_000 picoseconds.
        Weight::from_parts(78_340_598, 0)
            // Standard Error: 66_021
            .saturating_add(Weight::from_parts(13_603_312, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 72_836_000 picoseconds.
        Weight::from_parts(78_568_154, 0)
            // Standard Error: 57_541
            .saturating_add(Weight::from_parts(11_943_522, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 70_826_000 picoseconds.
        Weight::from_parts(76_361_756, 0)
            // Standard Error: 58_313
            .saturating_add(Weight::from_parts(12_018_944, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 71_437_000 picoseconds.
        Weight::from_parts(76_910_212, 0)
            // Standard Error: 57_889
            .saturating_add(Weight::from_parts(12_137_604, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 686_795_000 picoseconds.
        Weight::from_parts(693_880_106, 0)
            // Standard Error: 84_577
            .saturating_add(Weight::from_parts(13_351_726, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 690_552_000 picoseconds.
        Weight::from_parts(696_770_436, 0)
            // Standard Error: 81_154
            .saturating_add(Weight::from_parts(10_595_976, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 75_006_000 picoseconds.
        Weight::from_parts(81_745_692, 0)
            // Standard Error: 60_857
            .saturating_add(Weight::from_parts(8_379_472, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 74_614_000 picoseconds.
        Weight::from_parts(80_847_976, 0)
            // Standard Error: 59_799
            .saturating_add(Weight::from_parts(7_809_250, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 70_956_000 picoseconds.
        Weight::from_parts(76_883_436, 0)
            // Standard Error: 1_052_647
            .saturating_add(Weight::from_parts(96_563_242, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 70_324_000 picoseconds.
        Weight::from_parts(76_094_758, 0)
            // Standard Error: 1_523_647
            .saturating_add(Weight::from_parts(130_303_114, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 71_253_000 picoseconds.
        Weight::from_parts(76_988_662, 0)
            // Standard Error: 1_321_349
            .saturating_add(Weight::from_parts(112_591_140, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 71_457_000 picoseconds.
        Weight::from_parts(76_401_868, 0)
            // Standard Error: 1_044_536
            .saturating_add(Weight::from_parts(92_188_166, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 71_393_000 picoseconds.
        Weight::from_parts(77_342_970, 0)
            // Standard Error: 1_531_666
            .saturating_add(Weight::from_parts(127_918_232, 0).saturating_mul(r.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_010_000 picoseconds.
        Weight::from_parts(1_042_000, 0)
            // Standard Error: 443
            .saturating_add(Weight::from_parts(239_667, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_268_000 picoseconds.
        Weight::from_parts(3_371_000, 3610)
            // Standard Error: 1_081
            .saturating_add(Weight::from_parts(583_390, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_code_section_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 42_213_000 picoseconds.
        Weight::from_parts(43_931_000, 0)
            // Standard Error: 9_338
            .saturating_add(Weight::from_parts(2_038_653, 0).saturating_mul(c.into()))
    }
    /// The range of component `d` is `[0, 512]`.
    fn instantiate_module_data_section_per_kb(d: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 54_382_000 picoseconds.
        Weight::from_parts(59_367_747, 0)
            // Standard Error: 2_227
            .saturating_add(Weight::from_parts(468_300, 0).saturating_mul(d.into()))
    }
    /// The range of component `g` is `[0, 512]`.
    fn instantiate_module_global_section_per_kb(g: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 41_630_000 picoseconds.
        Weight::from_parts(44_328_000, 0)
            // Standard Error: 21_640
            .saturating_add(Weight::from_parts(1_798_911, 0).saturating_mul(g.into()))
    }
    /// The range of component `t` is `[0, 9765]`.
    fn instantiate_module_table_section_per_kb(t: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 42_537_000 picoseconds.
        Weight::from_parts(43_174_777, 0)
            // Standard Error: 223
            .saturating_add(Weight::from_parts(644_866, 0).saturating_mul(t.into()))
    }
    /// The range of component `e` is `[0, 512]`.
    fn instantiate_module_element_section_per_kb(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 258_586_000 picoseconds.
        Weight::from_parts(448_596_483, 0)
            // Standard Error: 80_189
            .saturating_add(Weight::from_parts(2_245_891, 0).saturating_mul(e.into()))
    }
    /// The range of component `t` is `[0, 512]`.
    fn instantiate_module_type_section_per_kb(t: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 42_219_000 picoseconds.
        Weight::from_parts(44_257_000, 0)
            // Standard Error: 101_981
            .saturating_add(Weight::from_parts(15_590_711, 0).saturating_mul(t.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1357`
        //  Estimated: `8799`
        // Minimum execution time: 135_545_000 picoseconds.
        Weight::from_parts(137_798_000, 8799)
            .saturating_add(RocksDbWeight::get().reads(17_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `3578`
        // Minimum execution time: 91_838_000 picoseconds.
        Weight::from_parts(87_499_000, 3578)
            // Standard Error: 37_656
            .saturating_add(Weight::from_parts(57_062_879, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1113`
        //  Estimated: `6196`
        // Minimum execution time: 165_191_000 picoseconds.
        Weight::from_parts(195_228_532, 6196)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(1_678, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `475`
        //  Estimated: `6196`
        // Minimum execution time: 7_008_485_000 picoseconds.
        Weight::from_parts(7_016_678_000, 6196)
            // Standard Error: 319_814
            .saturating_add(Weight::from_parts(38_334_392, 0).saturating_mul(c.into()))
            // Standard Error: 19
            .saturating_add(Weight::from_parts(563, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `516`
        //  Estimated: `6196`
        // Minimum execution time: 97_151_000 picoseconds.
        Weight::from_parts(9_468_475, 6196)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(975, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1356`
        //  Estimated: `8799`
        // Minimum execution time: 163_939_000 picoseconds.
        Weight::from_parts(82_754_731, 8799)
            // Standard Error: 4
            .saturating_add(Weight::from_parts(991, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(18_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `d` is `[1, 1024]`.
    fn claim_value_to_inheritor(d: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + d * (207 ±0)`
        //  Estimated: `3593 + d * (2683 ±0)`
        // Minimum execution time: 52_008_000 picoseconds.
        Weight::from_parts(52_280_000, 3593)
            // Standard Error: 33_470
            .saturating_add(Weight::from_parts(42_601_006, 0).saturating_mul(d.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(d.into())))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(d.into())))
            .saturating_add(Weight::from_parts(0, 2683).saturating_mul(d.into()))
    }
    /// The range of component `e` is `[0, 512]`.
    fn reinstrument_per_kb(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `329 + e * (1024 ±0)`
        //  Estimated: `3793 + e * (1024 ±0)`
        // Minimum execution time: 81_614_000 picoseconds.
        Weight::from_parts(81_821_000, 3793)
            // Standard Error: 240_361
            .saturating_add(Weight::from_parts(642_844_212, 0).saturating_mul(e.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(e.into()))
    }
    /// The range of component `a` is `[0, 32767]`.
    fn load_allocations_per_interval(a: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101 + a * (8 ±0)`
        //  Estimated: `3566 + a * (8 ±0)`
        // Minimum execution time: 3_722_000 picoseconds.
        Weight::from_parts(7_040_745, 3566)
            // Standard Error: 21
            .saturating_add(Weight::from_parts(20_729, 0).saturating_mul(a.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 8).saturating_mul(a.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 772_153_000 picoseconds.
        Weight::from_parts(691_085_192, 0)
            // Standard Error: 248_133
            .saturating_add(Weight::from_parts(125_211_418, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 285_000 picoseconds.
        Weight::from_parts(315_000, 0)
            // Standard Error: 196_322
            .saturating_add(Weight::from_parts(68_714_212, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 819]`.
    fn mem_grow_per_page(_p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 66_346_000 picoseconds.
        Weight::from_parts(69_649_440, 0)
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 806_255_000 picoseconds.
        Weight::from_parts(786_722_553, 0)
            // Standard Error: 240_484
            .saturating_add(Weight::from_parts(69_478_089, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 748_334_000 picoseconds.
        Weight::from_parts(717_314_931, 0)
            // Standard Error: 243_876
            .saturating_add(Weight::from_parts(73_586_110, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 700]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 776_782_000 picoseconds.
        Weight::from_parts(867_934_346, 0)
            // Standard Error: 6_879
            .saturating_add(Weight::from_parts(3_033_220, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 75_702_000 picoseconds.
        Weight::from_parts(72_549_062, 0)
            // Standard Error: 3_640
            .saturating_add(Weight::from_parts(2_195_328, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_482_000 picoseconds.
        Weight::from_parts(115_404_854, 0)
            // Standard Error: 3_224
            .saturating_add(Weight::from_parts(2_244_307, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_440_000 picoseconds.
        Weight::from_parts(86_480_576, 0)
            // Standard Error: 86_500
            .saturating_add(Weight::from_parts(83_244_247, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_666_000 picoseconds.
        Weight::from_parts(84_830_850, 0)
            // Standard Error: 76_741
            .saturating_add(Weight::from_parts(72_215_909, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 72_688_000 picoseconds.
        Weight::from_parts(86_978_134, 0)
            // Standard Error: 68_291
            .saturating_add(Weight::from_parts(72_030_483, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_471_000 picoseconds.
        Weight::from_parts(83_518_257, 0)
            // Standard Error: 77_888
            .saturating_add(Weight::from_parts(72_647_555, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 72_711_000 picoseconds.
        Weight::from_parts(84_559_032, 0)
            // Standard Error: 77_218
            .saturating_add(Weight::from_parts(72_333_901, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 72_706_000 picoseconds.
        Weight::from_parts(85_031_891, 0)
            // Standard Error: 64_827
            .saturating_add(Weight::from_parts(72_199_037, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 72_704_000 picoseconds.
        Weight::from_parts(85_342_680, 0)
            // Standard Error: 55_380
            .saturating_add(Weight::from_parts(72_188_287, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 74_003_000 picoseconds.
        Weight::from_parts(86_465_636, 0)
            // Standard Error: 63_958
            .saturating_add(Weight::from_parts(71_807_995, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 683_441_000 picoseconds.
        Weight::from_parts(712_191_502, 0)
            // Standard Error: 139_652
            .saturating_add(Weight::from_parts(133_753_826, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 817_943_000 picoseconds.
        Weight::from_parts(826_465_000, 0)
            // Standard Error: 119_104
            .saturating_add(Weight::from_parts(16_159_400, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_249_000 picoseconds.
        Weight::from_parts(85_387_353, 0)
            // Standard Error: 94_629
            .saturating_add(Weight::from_parts(82_622_132, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_351_000 picoseconds.
        Weight::from_parts(86_797_062, 0)
            // Standard Error: 93_741
            .saturating_add(Weight::from_parts(78_374_247, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_743_000 picoseconds.
        Weight::from_parts(86_659_181, 0)
            // Standard Error: 68_268
            .saturating_add(Weight::from_parts(71_500_893, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_830_000 picoseconds.
        Weight::from_parts(90_187_397, 0)
            // Standard Error: 186_196
            .saturating_add(Weight::from_parts(148_010_685, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 75_646_000 picoseconds.
        Weight::from_parts(78_273_000, 0)
            // Standard Error: 2_806_746
            .saturating_add(Weight::from_parts(629_704_408, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_233_000 picoseconds.
        Weight::from_parts(83_921_758, 0)
            // Standard Error: 185_635
            .saturating_add(Weight::from_parts(237_129_865, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 296_969_000 picoseconds.
        Weight::from_parts(298_985_000, 0)
            // Standard Error: 253_454
            .saturating_add(Weight::from_parts(40_386_347, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_288_000 picoseconds.
        Weight::from_parts(89_204_827, 0)
            // Standard Error: 200_278
            .saturating_add(Weight::from_parts(239_818_561, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 300_106_000 picoseconds.
        Weight::from_parts(303_875_000, 0)
            // Standard Error: 249_930
            .saturating_add(Weight::from_parts(40_333_892, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 688_959_000 picoseconds.
        Weight::from_parts(703_207_986, 0)
            // Standard Error: 157_844
            .saturating_add(Weight::from_parts(226_913_525, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 685_090_000 picoseconds.
        Weight::from_parts(704_454_554, 0)
            // Standard Error: 180_430
            .saturating_add(Weight::from_parts(231_236_920, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_111_000 picoseconds.
        Weight::from_parts(81_082_532, 0)
            // Standard Error: 93_145
            .saturating_add(Weight::from_parts(86_954_903, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_760_965_000 picoseconds.
        Weight::from_parts(1_845_535_850, 0)
            // Standard Error: 314_641
            .saturating_add(Weight::from_parts(155_554_869, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 281_442_000 picoseconds.
        Weight::from_parts(288_125_000, 0)
            // Standard Error: 246_660
            .saturating_add(Weight::from_parts(40_350_642, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_742_726_000 picoseconds.
        Weight::from_parts(1_841_004_875, 0)
            // Standard Error: 235_718
            .saturating_add(Weight::from_parts(196_802_226, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_731_055_000 picoseconds.
        Weight::from_parts(1_826_121_868, 0)
            // Standard Error: 203_003
            .saturating_add(Weight::from_parts(199_985_216, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 139_482_000 picoseconds.
        Weight::from_parts(136_169_897, 0)
            // Standard Error: 194_378
            .saturating_add(Weight::from_parts(273_651_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 386_363_000 picoseconds.
        Weight::from_parts(391_786_000, 0)
            // Standard Error: 258_457
            .saturating_add(Weight::from_parts(40_427_721, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_786_972_000 picoseconds.
        Weight::from_parts(1_870_349_345, 0)
            // Standard Error: 252_629
            .saturating_add(Weight::from_parts(233_348_493, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_425_000 picoseconds.
        Weight::from_parts(6_237_930, 0)
            // Standard Error: 3_877
            .saturating_add(Weight::from_parts(728_798, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_204_000 picoseconds.
        Weight::from_parts(6_382_287, 0)
            // Standard Error: 3_876
            .saturating_add(Weight::from_parts(728_188, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_392_000 picoseconds.
        Weight::from_parts(98_913_061, 0)
            // Standard Error: 149_394
            .saturating_add(Weight::from_parts(136_129_726, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_698_000 picoseconds.
        Weight::from_parts(87_372_499, 0)
            // Standard Error: 686
            .saturating_add(Weight::from_parts(668_338, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_432_000 picoseconds.
        Weight::from_parts(5_271_088, 0)
            // Standard Error: 3_912
            .saturating_add(Weight::from_parts(720_353, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_977_000 picoseconds.
        Weight::from_parts(6_445_153, 0)
            // Standard Error: 3_907
            .saturating_add(Weight::from_parts(726_961, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 72_430_000 picoseconds.
        Weight::from_parts(84_793_838, 0)
            // Standard Error: 73_990
            .saturating_add(Weight::from_parts(75_811_938, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 74_453_000 picoseconds.
        Weight::from_parts(81_824_002, 0)
            // Standard Error: 98_573
            .saturating_add(Weight::from_parts(79_443_293, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 74_281_000 picoseconds.
        Weight::from_parts(85_954_515, 0)
            // Standard Error: 83_865
            .saturating_add(Weight::from_parts(76_081_410, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 685_858_000 picoseconds.
        Weight::from_parts(704_529_778, 0)
            // Standard Error: 92_814
            .saturating_add(Weight::from_parts(91_766_393, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 702_381_000 picoseconds.
        Weight::from_parts(705_004_038, 0)
            // Standard Error: 243
            .saturating_add(Weight::from_parts(147_513, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_316_341_000 picoseconds.
        Weight::from_parts(2_460_147_863, 0)
            // Standard Error: 244_611
            .saturating_add(Weight::from_parts(115_133_940, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_421_148_000 picoseconds.
        Weight::from_parts(2_357_811_309, 0)
            // Standard Error: 6_197
            .saturating_add(Weight::from_parts(13_258_237, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 74_244_000 picoseconds.
        Weight::from_parts(86_739_673, 0)
            // Standard Error: 51_192
            .saturating_add(Weight::from_parts(102_043_421, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 139_693_000 picoseconds.
        Weight::from_parts(142_957_000, 0)
            // Standard Error: 260_388
            .saturating_add(Weight::from_parts(35_962_486, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 72_360_000 picoseconds.
        Weight::from_parts(85_921_193, 0)
            // Standard Error: 61_329
            .saturating_add(Weight::from_parts(72_076_077, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_988_000 picoseconds.
        Weight::from_parts(106_011_000, 0)
            // Standard Error: 1_138_394
            .saturating_add(Weight::from_parts(240_918_489, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 77_083_000 picoseconds.
        Weight::from_parts(82_392_641, 0)
            // Standard Error: 241_345
            .saturating_add(Weight::from_parts(295_215_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 60_912_497_000 picoseconds.
        Weight::from_parts(61_001_736_000, 0)
            // Standard Error: 434_085
            .saturating_add(Weight::from_parts(9_577_304, 0).saturating_mul(p.into()))
            // Standard Error: 434_063
            .saturating_add(Weight::from_parts(114_958_531, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 77_894_000 picoseconds.
        Weight::from_parts(77_856_403, 0)
            // Standard Error: 227_166
            .saturating_add(Weight::from_parts(300_654_636, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_021_139_000 picoseconds.
        Weight::from_parts(61_043_109_000, 0)
            // Standard Error: 430_182
            .saturating_add(Weight::from_parts(9_408_879, 0).saturating_mul(p.into()))
            // Standard Error: 430_161
            .saturating_add(Weight::from_parts(114_644_381, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 75_577_000 picoseconds.
        Weight::from_parts(101_890_284, 1131)
            // Standard Error: 7_029
            .saturating_add(Weight::from_parts(13_466_439, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 74_841_000 picoseconds.
        Weight::from_parts(75_691_000, 1131)
            // Standard Error: 13_487
            .saturating_add(Weight::from_parts(36_441_083, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_947_594_000 picoseconds.
        Weight::from_parts(7_016_485_652, 5069931)
            // Standard Error: 60_333
            .saturating_add(Weight::from_parts(36_561_754, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1820 + p * (65580 ±0)`
        //  Estimated: `1946 + p * (75482 ±0)`
        // Minimum execution time: 76_536_000 picoseconds.
        Weight::from_parts(14_595_619, 1946)
            // Standard Error: 157_578
            .saturating_add(Weight::from_parts(50_153_031, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 78_193_000 picoseconds.
        Weight::from_parts(7_236_713, 1131)
            // Standard Error: 269_644
            .saturating_add(Weight::from_parts(48_480_231, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 713_187_000 picoseconds.
        Weight::from_parts(590_866_829, 1496)
            // Standard Error: 369_244
            .saturating_add(Weight::from_parts(59_523_369, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_154_253_000 picoseconds.
        Weight::from_parts(1_039_979_380, 317931)
            // Standard Error: 368_468
            .saturating_add(Weight::from_parts(59_946_120, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_408_476_000 picoseconds.
        Weight::from_parts(4_345_850_428, 0)
            // Standard Error: 21_058
            .saturating_add(Weight::from_parts(2_656_511 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_405_085_000 picoseconds.
        Weight::from_parts(4_338_401_176, 0)
            // Standard Error: 21_960
            .saturating_add(Weight::from_parts(2_641_092 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_431_492_000 picoseconds.
        Weight::from_parts(9_673_680_509, 0)
            // Standard Error: 30_676
            .saturating_add(Weight::from_parts(4_680_213 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_360_480_000 picoseconds.
        Weight::from_parts(9_537_261_740, 0)
            // Standard Error: 27_533
            .saturating_add(Weight::from_parts(4_979_672 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_331_000 picoseconds.
        Weight::from_parts(1_379_000, 0)
            // Standard Error: 9_565
            .saturating_add(Weight::from_parts(2_945_850 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_383_000 picoseconds.
        Weight::from_parts(1_429_000, 0)
            // Standard Error: 4_951
            .saturating_add(Weight::from_parts(2_209_232 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_320_000 picoseconds.
        Weight::from_parts(2_272_981, 0)
            // Standard Error: 953
            .saturating_add(Weight::from_parts(1_508_484 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_288_000 picoseconds.
        Weight::from_parts(144_996, 0)
            // Standard Error: 11_883
            .saturating_add(Weight::from_parts(2_531_434 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_351_000 picoseconds.
        Weight::from_parts(1_389_000, 0)
            // Standard Error: 27_866
            .saturating_add(Weight::from_parts(4_686_267 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_967_000 picoseconds.
        Weight::from_parts(5_468_496, 0)
            // Standard Error: 844
            .saturating_add(Weight::from_parts(73_871 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_350_000 picoseconds.
        Weight::from_parts(1_401_024, 0)
            // Standard Error: 6_380
            .saturating_add(Weight::from_parts(2_471_195 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts((2_471_195 -
            2_301_712) * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_309_000 picoseconds.
        Weight::from_parts(1_843_444, 0)
            // Standard Error: 12_136
            .saturating_add(Weight::from_parts(2_301_712 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_411_000 picoseconds.
        Weight::from_parts(1_445_000, 0)
            // Standard Error: 15_605
            .saturating_add(Weight::from_parts(9_830_913 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_270_000 picoseconds.
        Weight::from_parts(10_345_000, 0)
            // Standard Error: 9_614
            .saturating_add(Weight::from_parts(657_200 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_756_000 picoseconds.
        Weight::from_parts(3_964_298, 0)
            // Standard Error: 7
            .saturating_add(Weight::from_parts(12 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_016_000 picoseconds.
        Weight::from_parts(8_681_396, 0)
            // Standard Error: 3_586
            .saturating_add(Weight::from_parts(310_101 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_906_000 picoseconds.
        Weight::from_parts(9_137_545, 0)
            // Standard Error: 3_316
            .saturating_add(Weight::from_parts(685_474 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_975_000 picoseconds.
        Weight::from_parts(9_760_427, 0)
            // Standard Error: 3_573
            .saturating_add(Weight::from_parts(671_443 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_374_000 picoseconds.
        Weight::from_parts(1_000_357, 0)
            // Standard Error: 3_626
            .saturating_add(Weight::from_parts(291_977 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_358_000 picoseconds.
        Weight::from_parts(1_418_000, 0)
            // Standard Error: 9_282
            .saturating_add(Weight::from_parts(649_994 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_536_000 picoseconds.
        Weight::from_parts(1_044_793, 0)
            // Standard Error: 5_498
            .saturating_add(Weight::from_parts(5_731_900 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_233_000 picoseconds.
        Weight::from_parts(1_215_148, 0)
            // Standard Error: 2_819
            .saturating_add(Weight::from_parts(260_155 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_328_000 picoseconds.
        Weight::from_parts(1_437_168, 0)
            // Standard Error: 3_610
            .saturating_add(Weight::from_parts(202_028 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_357_000 picoseconds.
        Weight::from_parts(1_136_794, 0)
            // Standard Error: 2_205
            .saturating_add(Weight::from_parts(268_251 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_324_000 picoseconds.
        Weight::from_parts(1_786_406, 0)
            // Standard Error: 547
            .saturating_add(Weight::from_parts(180_114 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_317_000 picoseconds.
        Weight::from_parts(1_117_534, 0)
            // Standard Error: 2_364
            .saturating_add(Weight::from_parts(269_422 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_324_000 picoseconds.
        Weight::from_parts(1_805_624, 0)
            // Standard Error: 1_838
            .saturating_add(Weight::from_parts(195_483 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_320_000 picoseconds.
        Weight::from_parts(1_392_000, 0)
            // Standard Error: 9_162
            .saturating_add(Weight::from_parts(912_172 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_301_000 picoseconds.
        Weight::from_parts(1_338_000, 0)
            // Standard Error: 3_325
            .saturating_add(Weight::from_parts(496_929 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_337_000 picoseconds.
        Weight::from_parts(1_611_666, 0)
            // Standard Error: 625
            .saturating_add(Weight::from_parts(171_506 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_317_000 picoseconds.
        Weight::from_parts(1_700_147, 0)
            // Standard Error: 877
            .saturating_add(Weight::from_parts(170_172 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_316_000 picoseconds.
        Weight::from_parts(1_329_895, 0)
            // Standard Error: 1_945
            .saturating_add(Weight::from_parts(244_746 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_277_000 picoseconds.
        Weight::from_parts(1_095_174, 0)
            // Standard Error: 4_447
            .saturating_add(Weight::from_parts(256_010 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_331_000 picoseconds.
        Weight::from_parts(948_185, 0)
            // Standard Error: 5_240
            .saturating_add(Weight::from_parts(252_152 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_364_000 picoseconds.
        Weight::from_parts(1_691_742, 0)
            // Standard Error: 1_108
            .saturating_add(Weight::from_parts(154_813 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_363_000 picoseconds.
        Weight::from_parts(1_847_986, 0)
            // Standard Error: 1_147
            .saturating_add(Weight::from_parts(93_233 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_281_000 picoseconds.
        Weight::from_parts(1_961_077, 0)
            // Standard Error: 696
            .saturating_add(Weight::from_parts(87_341 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_333_000 picoseconds.
        Weight::from_parts(1_372_000, 0)
            // Standard Error: 11_911
            .saturating_add(Weight::from_parts(1_008_734 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_307_000 picoseconds.
        Weight::from_parts(1_376_000, 0)
            // Standard Error: 4_838
            .saturating_add(Weight::from_parts(540_102 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_298_000 picoseconds.
        Weight::from_parts(1_343_000, 0)
            // Standard Error: 16_519
            .saturating_add(Weight::from_parts(1_191_585 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_303_000 picoseconds.
        Weight::from_parts(1_399_000, 0)
            // Standard Error: 6_288
            .saturating_add(Weight::from_parts(573_438 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_328_000 picoseconds.
        Weight::from_parts(1_397_000, 0)
            // Standard Error: 9_065
            .saturating_add(Weight::from_parts(917_725 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_326_000 picoseconds.
        Weight::from_parts(1_387_000, 0)
            // Standard Error: 3_994
            .saturating_add(Weight::from_parts(512_663 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_275_000 picoseconds.
        Weight::from_parts(1_370_000, 0)
            // Standard Error: 8_166
            .saturating_add(Weight::from_parts(896_742 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_322_000 picoseconds.
        Weight::from_parts(1_352_000, 0)
            // Standard Error: 4_428
            .saturating_add(Weight::from_parts(521_146 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_316_000 picoseconds.
        Weight::from_parts(1_362_000, 0)
            // Standard Error: 10_964
            .saturating_add(Weight::from_parts(950_113 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_314_000 picoseconds.
        Weight::from_parts(1_430_000, 0)
            // Standard Error: 6_233
            .saturating_add(Weight::from_parts(527_757 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_290_000 picoseconds.
        Weight::from_parts(1_345_000, 0)
            // Standard Error: 8_041
            .saturating_add(Weight::from_parts(888_646 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_332_000 picoseconds.
        Weight::from_parts(1_402_000, 0)
            // Standard Error: 3_295
            .saturating_add(Weight::from_parts(501_011 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_337_000 picoseconds.
        Weight::from_parts(1_377_000, 0)
            // Standard Error: 8_442
            .saturating_add(Weight::from_parts(910_933 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_333_000 picoseconds.
        Weight::from_parts(1_401_000, 0)
            // Standard Error: 5_606
            .saturating_add(Weight::from_parts(521_195 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_340_000 picoseconds.
        Weight::from_parts(1_376_000, 0)
            // Standard Error: 12_294
            .saturating_add(Weight::from_parts(950_492 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_336_000 picoseconds.
        Weight::from_parts(1_403_000, 0)
            // Standard Error: 4_497
            .saturating_add(Weight::from_parts(487_845 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_371_000 picoseconds.
        Weight::from_parts(1_407_000, 0)
            // Standard Error: 14_384
            .saturating_add(Weight::from_parts(1_038_473 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_318_000 picoseconds.
        Weight::from_parts(1_366_000, 0)
            // Standard Error: 3_536
            .saturating_add(Weight::from_parts(501_421 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_349_000 picoseconds.
        Weight::from_parts(1_390_000, 0)
            // Standard Error: 12_990
            .saturating_add(Weight::from_parts(1_006_416 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_326_000 picoseconds.
        Weight::from_parts(1_373_000, 0)
            // Standard Error: 3_004
            .saturating_add(Weight::from_parts(499_955 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_357_000 picoseconds.
        Weight::from_parts(1_394_000, 0)
            // Standard Error: 5_225
            .saturating_add(Weight::from_parts(589_236 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_327_000 picoseconds.
        Weight::from_parts(616_374, 0)
            // Standard Error: 6_078
            .saturating_add(Weight::from_parts(323_741 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_340_000 picoseconds.
        Weight::from_parts(1_377_000, 0)
            // Standard Error: 4_261
            .saturating_add(Weight::from_parts(580_272 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_395_000 picoseconds.
        Weight::from_parts(1_248_581, 0)
            // Standard Error: 1_837
            .saturating_add(Weight::from_parts(273_735 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_322_000 picoseconds.
        Weight::from_parts(1_368_000, 0)
            // Standard Error: 12_113
            .saturating_add(Weight::from_parts(934_388 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_344_000 picoseconds.
        Weight::from_parts(1_411_000, 0)
            // Standard Error: 6_047
            .saturating_add(Weight::from_parts(550_572 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_290_000 picoseconds.
        Weight::from_parts(1_385_000, 0)
            // Standard Error: 7_866
            .saturating_add(Weight::from_parts(1_964_453 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_349_000 picoseconds.
        Weight::from_parts(1_411_000, 0)
            // Standard Error: 11_840
            .saturating_add(Weight::from_parts(1_463_772 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_324_000 picoseconds.
        Weight::from_parts(1_369_000, 0)
            // Standard Error: 8_470
            .saturating_add(Weight::from_parts(1_776_938 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_348_000 picoseconds.
        Weight::from_parts(1_387_000, 0)
            // Standard Error: 9_310
            .saturating_add(Weight::from_parts(1_348_132 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_369_000 picoseconds.
        Weight::from_parts(1_434_000, 0)
            // Standard Error: 32_697
            .saturating_add(Weight::from_parts(8_745_987 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_343_000 picoseconds.
        Weight::from_parts(1_378_000, 0)
            // Standard Error: 43_147
            .saturating_add(Weight::from_parts(7_112_006 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_367_000 picoseconds.
        Weight::from_parts(1_417_000, 0)
            // Standard Error: 6_535
            .saturating_add(Weight::from_parts(1_778_734 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_363_000 picoseconds.
        Weight::from_parts(1_418_000, 0)
            // Standard Error: 8_351
            .saturating_add(Weight::from_parts(1_317_333 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_299_000 picoseconds.
        Weight::from_parts(1_384_000, 0)
            // Standard Error: 7_392
            .saturating_add(Weight::from_parts(623_815 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_287_000 picoseconds.
        Weight::from_parts(935_149, 0)
            // Standard Error: 2_071
            .saturating_add(Weight::from_parts(304_270 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_299_000 picoseconds.
        Weight::from_parts(1_355_000, 0)
            // Standard Error: 4_359
            .saturating_add(Weight::from_parts(589_293 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_294_000 picoseconds.
        Weight::from_parts(1_027_247, 0)
            // Standard Error: 2_047
            .saturating_add(Weight::from_parts(303_177 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_340_000 picoseconds.
        Weight::from_parts(1_405_000, 0)
            // Standard Error: 5_133
            .saturating_add(Weight::from_parts(609_550 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_337_000 picoseconds.
        Weight::from_parts(603_111, 0)
            // Standard Error: 6_223
            .saturating_add(Weight::from_parts(326_084 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_303_000 picoseconds.
        Weight::from_parts(1_397_000, 0)
            // Standard Error: 5_895
            .saturating_add(Weight::from_parts(506_341 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_340_000 picoseconds.
        Weight::from_parts(1_247_692, 0)
            // Standard Error: 1_511
            .saturating_add(Weight::from_parts(274_134 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_311_000 picoseconds.
        Weight::from_parts(1_354_000, 0)
            // Standard Error: 2_897
            .saturating_add(Weight::from_parts(483_641 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_331_000 picoseconds.
        Weight::from_parts(1_329_094, 0)
            // Standard Error: 2_115
            .saturating_add(Weight::from_parts(275_076 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_276_000 picoseconds.
        Weight::from_parts(1_347_000, 0)
            // Standard Error: 5_598
            .saturating_add(Weight::from_parts(517_531 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_288_000 picoseconds.
        Weight::from_parts(777_418, 0)
            // Standard Error: 6_424
            .saturating_add(Weight::from_parts(311_033 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_297_000 picoseconds.
        Weight::from_parts(1_378_000, 0)
            // Standard Error: 4_789
            .saturating_add(Weight::from_parts(509_554 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_311_000 picoseconds.
        Weight::from_parts(617_995, 0)
            // Standard Error: 7_052
            .saturating_add(Weight::from_parts(322_976 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_318_000 picoseconds.
        Weight::from_parts(1_391_000, 0)
            // Standard Error: 3_787
            .saturating_add(Weight::from_parts(498_275 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_393_000 picoseconds.
        Weight::from_parts(879_010, 0)
            // Standard Error: 5_769
            .saturating_add(Weight::from_parts(308_463 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1192`
        //  Estimated: `6196`
        // Minimum execution time: 77_564_000 picoseconds.
        Weight::from_parts(79_369_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `858`
        //  Estimated: `4323`
        // Minimum execution time: 43_250_000 picoseconds.
        Weight::from_parts(44_016_000, 4323)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1113`
        //  Estimated: `6196`
        // Minimum execution time: 88_938_000 picoseconds.
        Weight::from_parts(89_815_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `694`
        //  Estimated: `4159`
        // Minimum execution time: 30_606_000 picoseconds.
        Weight::from_parts(31_277_000, 4159)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `937`
        //  Estimated: `4402`
        // Minimum execution time: 43_204_000 picoseconds.
        Weight::from_parts(43_879_000, 4402)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 4_683_000 picoseconds.
        Weight::from_parts(5_115_000, 3545)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1669`
        //  Estimated: `7609`
        // Minimum execution time: 119_848_000 picoseconds.
        Weight::from_parts(121_716_000, 7609)
            .saturating_add(RocksDbWeight::get().reads(17_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1398`
        //  Estimated: `7338`
        // Minimum execution time: 105_087_000 picoseconds.
        Weight::from_parts(106_798_000, 7338)
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
}
