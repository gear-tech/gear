// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-31, STEPS: `20`, REPEAT: `40`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --steps=20 --repeat=40 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_error(r: u32, ) -> Weight;
    fn gr_status_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_074 nanoseconds.
        Weight::from_ref_time(1_125_000)
            // Standard Error: 585
            .saturating_add(Weight::from_ref_time(241_309).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `74 + c * (1024 ±0)`
        //  Estimated: `2542 + c * (1024 ±0)`
        // Minimum execution time: 2_900 nanoseconds.
        Weight::from_parts(3_010_000, 2542)
            // Standard Error: 1_205
            .saturating_add(Weight::from_ref_time(671_201).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 54_829 nanoseconds.
        Weight::from_ref_time(104_531_805)
            // Standard Error: 8_386
            .saturating_add(Weight::from_ref_time(2_132_094).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `847`
        //  Estimated: `17017`
        // Minimum execution time: 54_915 nanoseconds.
        Weight::from_parts(56_741_000, 17017)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `3010`
        // Minimum execution time: 56_334 nanoseconds.
        Weight::from_parts(14_619_985, 3010)
            // Standard Error: 55_576
            .saturating_add(Weight::from_ref_time(52_505_090).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `604`
        //  Estimated: `17714`
        // Minimum execution time: 51_759 nanoseconds.
        Weight::from_parts(65_588_042, 17714)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_344).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `55`
        //  Estimated: `13432`
        // Minimum execution time: 9_641_020 nanoseconds.
        Weight::from_parts(9_680_003_000, 13432)
            // Standard Error: 517_784
            .saturating_add(Weight::from_ref_time(29_395_981).saturating_mul(c.into()))
            // Standard Error: 30
            .saturating_add(Weight::from_ref_time(824).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `374`
        //  Estimated: `14759`
        // Minimum execution time: 54_783 nanoseconds.
        Weight::from_parts(34_829_167, 14759)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_168).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1042`
        //  Estimated: `30879`
        // Minimum execution time: 77_020 nanoseconds.
        Weight::from_parts(63_318_382, 30879)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_170).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `676`
        //  Estimated: `41136`
        // Minimum execution time: 295_072 nanoseconds.
        Weight::from_parts(305_049_544, 41136)
            .saturating_add(T::DbWeight::get().reads(24_u64))
            .saturating_add(T::DbWeight::get().writes(21_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `676`
        //  Estimated: `40641`
        // Minimum execution time: 309_393 nanoseconds.
        Weight::from_parts(320_616_447, 40641)
            // Standard Error: 1_023
            .saturating_add(Weight::from_ref_time(1_149).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(24_u64))
            .saturating_add(T::DbWeight::get().writes(21_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `243 + c * (1075 ±0)`
        //  Estimated: `2997 + c * (2150 ±0)`
        // Minimum execution time: 42_068 nanoseconds.
        Weight::from_parts(42_661_000, 2997)
            // Standard Error: 34_585
            .saturating_add(Weight::from_ref_time(53_451_759).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_proof_size(2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_763 nanoseconds.
        Weight::from_ref_time(106_917_874)
            // Standard Error: 340_822
            .saturating_add(Weight::from_ref_time(137_796_423).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 228_508 nanoseconds.
        Weight::from_ref_time(239_282_524)
            // Standard Error: 156_577
            .saturating_add(Weight::from_ref_time(138_059_906).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_460 nanoseconds.
        Weight::from_ref_time(91_805_000)
            // Standard Error: 1_175_587
            .saturating_add(Weight::from_ref_time(381_347_011).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 148_084 nanoseconds.
        Weight::from_ref_time(197_280_839)
            // Standard Error: 149_073
            .saturating_add(Weight::from_ref_time(305_627_957).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_501 nanoseconds.
        Weight::from_ref_time(116_561_926)
            // Standard Error: 141_599
            .saturating_add(Weight::from_ref_time(207_781_886).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_760 nanoseconds.
        Weight::from_ref_time(103_609_418)
            // Standard Error: 107_873
            .saturating_add(Weight::from_ref_time(205_944_625).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_552 nanoseconds.
        Weight::from_ref_time(100_773_812)
            // Standard Error: 104_472
            .saturating_add(Weight::from_ref_time(205_507_293).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_549 nanoseconds.
        Weight::from_ref_time(92_269_084)
            // Standard Error: 113_815
            .saturating_add(Weight::from_ref_time(207_874_811).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_423 nanoseconds.
        Weight::from_ref_time(97_908_368)
            // Standard Error: 115_142
            .saturating_add(Weight::from_ref_time(207_525_300).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_528 nanoseconds.
        Weight::from_ref_time(101_672_493)
            // Standard Error: 93_792
            .saturating_add(Weight::from_ref_time(204_730_998).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_852 nanoseconds.
        Weight::from_ref_time(94_476_798)
            // Standard Error: 101_545
            .saturating_add(Weight::from_ref_time(207_381_427).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_768 nanoseconds.
        Weight::from_ref_time(97_309_861)
            // Standard Error: 96_287
            .saturating_add(Weight::from_ref_time(205_848_980).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_652 nanoseconds.
        Weight::from_ref_time(98_868_587)
            // Standard Error: 99_618
            .saturating_add(Weight::from_ref_time(205_115_464).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 740_967 nanoseconds.
        Weight::from_ref_time(814_362_895)
            // Standard Error: 305_346
            .saturating_add(Weight::from_ref_time(274_418_796).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_014_106 nanoseconds.
        Weight::from_ref_time(1_028_265_000)
            // Standard Error: 60_688
            .saturating_add(Weight::from_ref_time(12_716_029).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_061 nanoseconds.
        Weight::from_ref_time(101_006_561)
            // Standard Error: 94_401
            .saturating_add(Weight::from_ref_time(205_586_603).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_945 nanoseconds.
        Weight::from_ref_time(95_753_572)
            // Standard Error: 99_503
            .saturating_add(Weight::from_ref_time(206_323_545).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_149 nanoseconds.
        Weight::from_ref_time(111_550_500)
            // Standard Error: 122_862
            .saturating_add(Weight::from_ref_time(262_647_691).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_646 nanoseconds.
        Weight::from_ref_time(99_149_838)
            // Standard Error: 96_939
            .saturating_add(Weight::from_ref_time(213_013_826).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_318_907 nanoseconds.
        Weight::from_ref_time(4_366_110_962)
            // Standard Error: 154_296
            .saturating_add(Weight::from_ref_time(294_079_977).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 595_094 nanoseconds.
        Weight::from_ref_time(601_714_000)
            // Standard Error: 61_801
            .saturating_add(Weight::from_ref_time(30_227_012).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_441 nanoseconds.
        Weight::from_ref_time(125_416_586)
            // Standard Error: 280_047
            .saturating_add(Weight::from_ref_time(393_800_147).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 487_885 nanoseconds.
        Weight::from_ref_time(494_434_000)
            // Standard Error: 74_324
            .saturating_add(Weight::from_ref_time(20_266_579).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 257_793 nanoseconds.
        Weight::from_ref_time(299_156_241)
            // Standard Error: 232_825
            .saturating_add(Weight::from_ref_time(406_083_722).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 524_975 nanoseconds.
        Weight::from_ref_time(534_868_000)
            // Standard Error: 73_097
            .saturating_add(Weight::from_ref_time(20_227_408).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_121 nanoseconds.
        Weight::from_ref_time(93_567_476)
            // Standard Error: 219_993
            .saturating_add(Weight::from_ref_time(19_569_623).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_192 nanoseconds.
        Weight::from_ref_time(98_749_499)
            // Standard Error: 651
            .saturating_add(Weight::from_ref_time(401_432).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_909 nanoseconds.
        Weight::from_ref_time(121_898_955)
            // Standard Error: 135_264
            .saturating_add(Weight::from_ref_time(283_436_730).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_221 nanoseconds.
        Weight::from_ref_time(87_772_611)
            // Standard Error: 543
            .saturating_add(Weight::from_ref_time(553_498).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_777 nanoseconds.
        Weight::from_ref_time(101_868_215)
            // Standard Error: 238_218
            .saturating_add(Weight::from_ref_time(12_294_784).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_325 nanoseconds.
        Weight::from_ref_time(99_515_364)
            // Standard Error: 615
            .saturating_add(Weight::from_ref_time(401_161).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_967 nanoseconds.
        Weight::from_ref_time(100_025_749)
            // Standard Error: 121_003
            .saturating_add(Weight::from_ref_time(207_994_161).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_224 nanoseconds.
        Weight::from_ref_time(102_239_028)
            // Standard Error: 113_478
            .saturating_add(Weight::from_ref_time(207_511_708).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 735_990 nanoseconds.
        Weight::from_ref_time(797_345_117)
            // Standard Error: 186_162
            .saturating_add(Weight::from_ref_time(216_052_641).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 760_358 nanoseconds.
        Weight::from_ref_time(785_314_448)
            // Standard Error: 1_022
            .saturating_add(Weight::from_ref_time(137_426).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_989_331 nanoseconds.
        Weight::from_ref_time(5_059_113_367)
            // Standard Error: 308_000
            .saturating_add(Weight::from_ref_time(229_052_314).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_171_137 nanoseconds.
        Weight::from_ref_time(1_143_209_622)
            // Standard Error: 6_904
            .saturating_add(Weight::from_ref_time(13_424_414).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_233 nanoseconds.
        Weight::from_ref_time(110_458_348)
            // Standard Error: 128_152
            .saturating_add(Weight::from_ref_time(216_627_860).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 299_946 nanoseconds.
        Weight::from_ref_time(303_333_000)
            // Standard Error: 64_779
            .saturating_add(Weight::from_ref_time(26_069_075).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_836 nanoseconds.
        Weight::from_ref_time(112_658_719)
            // Standard Error: 153_093
            .saturating_add(Weight::from_ref_time(273_441_420).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_249 nanoseconds.
        Weight::from_ref_time(109_179_979)
            // Standard Error: 150_712
            .saturating_add(Weight::from_ref_time(206_363_380).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_857 nanoseconds.
        Weight::from_ref_time(92_949_392)
            // Standard Error: 245_289
            .saturating_add(Weight::from_ref_time(32_555_107).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_414 nanoseconds.
        Weight::from_ref_time(92_163_576)
            // Standard Error: 239_409
            .saturating_add(Weight::from_ref_time(22_332_423).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_599 nanoseconds.
        Weight::from_ref_time(92_188_244)
            // Standard Error: 235_460
            .saturating_add(Weight::from_ref_time(21_017_005).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_155 nanoseconds.
        Weight::from_ref_time(92_534_384)
            // Standard Error: 245_053
            .saturating_add(Weight::from_ref_time(22_687_615).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_449 nanoseconds.
        Weight::from_ref_time(92_944_615)
            // Standard Error: 236_710
            .saturating_add(Weight::from_ref_time(22_748_434).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 143_366 nanoseconds.
        Weight::from_ref_time(185_719_352)
            // Standard Error: 148_907
            .saturating_add(Weight::from_ref_time(298_170_146).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_931 nanoseconds.
        Weight::from_ref_time(125_872_032)
            // Standard Error: 284_993
            .saturating_add(Weight::from_ref_time(472_533_219).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_757_003 nanoseconds.
        Weight::from_ref_time(43_980_333_000)
            // Standard Error: 289_183
            .saturating_add(Weight::from_ref_time(7_068_288).saturating_mul(p.into()))
            // Standard Error: 289_166
            .saturating_add(Weight::from_ref_time(157_176_528).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 87_405 nanoseconds.
        Weight::from_parts(117_002_453, 141)
            // Standard Error: 4_951
            .saturating_add(Weight::from_ref_time(11_259_513).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 86_601 nanoseconds.
        Weight::from_parts(89_602_000, 141)
            // Standard Error: 47_866
            .saturating_add(Weight::from_ref_time(34_748_329).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5068941`
        // Minimum execution time: 5_854_381 nanoseconds.
        Weight::from_parts(5_659_644_791, 5068941)
            // Standard Error: 50_498
            .saturating_add(Weight::from_ref_time(36_339_546).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65704 ±0)`
        //  Estimated: `1012 + p * (75606 ±0)`
        // Minimum execution time: 88_364 nanoseconds.
        Weight::from_parts(186_846_085, 1012)
            // Standard Error: 45_734
            .saturating_add(Weight::from_ref_time(41_765_012).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(75606).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `584 + p * (9879 ±2)`
        // Minimum execution time: 103_281 nanoseconds.
        Weight::from_parts(99_740_379, 584)
            // Standard Error: 41_748
            .saturating_add(Weight::from_ref_time(35_978_673).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `584 + p * (9879 ±2)`
        // Minimum execution time: 788_448 nanoseconds.
        Weight::from_parts(803_506_996, 584)
            // Standard Error: 180_692
            .saturating_add(Weight::from_ref_time(39_688_822).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `316941`
        // Minimum execution time: 1_141_347 nanoseconds.
        Weight::from_parts(1_156_927_567, 316941)
            // Standard Error: 131_123
            .saturating_add(Weight::from_ref_time(42_092_626).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_028_945 nanoseconds.
        Weight::from_ref_time(3_307_429_509)
            // Standard Error: 84_917
            .saturating_add(Weight::from_ref_time(8_852_535).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_049_698 nanoseconds.
        Weight::from_ref_time(4_033_752_884)
            // Standard Error: 13_816
            .saturating_add(Weight::from_ref_time(3_384_598).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_115_579 nanoseconds.
        Weight::from_ref_time(9_335_969_443)
            // Standard Error: 250_933
            .saturating_add(Weight::from_ref_time(13_955_648).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_733_845 nanoseconds.
        Weight::from_ref_time(9_968_508_879)
            // Standard Error: 254_284
            .saturating_add(Weight::from_ref_time(7_995_878).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_857 nanoseconds.
        Weight::from_ref_time(2_974_000)
            // Standard Error: 8_806
            .saturating_add(Weight::from_ref_time(3_783_533).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_848 nanoseconds.
        Weight::from_ref_time(584_352)
            // Standard Error: 6_867
            .saturating_add(Weight::from_ref_time(3_123_114).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_895 nanoseconds.
        Weight::from_ref_time(3_897_032)
            // Standard Error: 1_128
            .saturating_add(Weight::from_ref_time(1_578_611).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_900 nanoseconds.
        Weight::from_ref_time(3_008_000)
            // Standard Error: 5_917
            .saturating_add(Weight::from_ref_time(3_027_107).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_890 nanoseconds.
        Weight::from_ref_time(1_363_763)
            // Standard Error: 8_087
            .saturating_add(Weight::from_ref_time(5_218_881).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_159 nanoseconds.
        Weight::from_ref_time(5_860_782)
            // Standard Error: 1_623
            .saturating_add(Weight::from_ref_time(166_200).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_079 nanoseconds.
        Weight::from_ref_time(5_924_341)
            // Standard Error: 8_397
            .saturating_add(Weight::from_ref_time(2_563_326).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(2_563_326 -
            2_485_655).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_044 nanoseconds.
        Weight::from_ref_time(4_417_863)
            // Standard Error: 12_641
            .saturating_add(Weight::from_ref_time(2_485_655).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_307 nanoseconds.
        Weight::from_ref_time(17_705_863)
            // Standard Error: 29_147
            .saturating_add(Weight::from_ref_time(9_962_407).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_911 nanoseconds.
        Weight::from_ref_time(4_270_882)
            // Standard Error: 4_829
            .saturating_add(Weight::from_ref_time(1_179_672).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_586 nanoseconds.
        Weight::from_ref_time(5_838_858)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_919 nanoseconds.
        Weight::from_ref_time(2_747_501)
            // Standard Error: 2_612
            .saturating_add(Weight::from_ref_time(260_851).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_937 nanoseconds.
        Weight::from_ref_time(3_016_000)
            // Standard Error: 5_491
            .saturating_add(Weight::from_ref_time(752_684).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_897 nanoseconds.
        Weight::from_ref_time(3_002_000)
            // Standard Error: 6_458
            .saturating_add(Weight::from_ref_time(774_313).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_536 nanoseconds.
        Weight::from_ref_time(8_565_024)
            // Standard Error: 7_432
            .saturating_add(Weight::from_ref_time(800_080).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_544 nanoseconds.
        Weight::from_ref_time(5_684_253)
            // Standard Error: 11_299
            .saturating_add(Weight::from_ref_time(1_569_340).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_268 nanoseconds.
        Weight::from_ref_time(853_536)
            // Standard Error: 14_091
            .saturating_add(Weight::from_ref_time(7_571_042).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_871 nanoseconds.
        Weight::from_ref_time(2_945_000)
            // Standard Error: 6_617
            .saturating_add(Weight::from_ref_time(3_330_495).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_833 nanoseconds.
        Weight::from_ref_time(3_005_000)
            // Standard Error: 7_110
            .saturating_add(Weight::from_ref_time(3_157_904).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_888 nanoseconds.
        Weight::from_ref_time(2_985_000)
            // Standard Error: 6_109
            .saturating_add(Weight::from_ref_time(3_141_906).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_922 nanoseconds.
        Weight::from_ref_time(3_036_000)
            // Standard Error: 5_506
            .saturating_add(Weight::from_ref_time(2_680_138).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_919 nanoseconds.
        Weight::from_ref_time(506_455)
            // Standard Error: 7_237
            .saturating_add(Weight::from_ref_time(646_019).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_824 nanoseconds.
        Weight::from_ref_time(2_419_702)
            // Standard Error: 3_003
            .saturating_add(Weight::from_ref_time(392_310).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_936 nanoseconds.
        Weight::from_ref_time(2_991_000)
            // Standard Error: 9_691
            .saturating_add(Weight::from_ref_time(1_795_924).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_906 nanoseconds.
        Weight::from_ref_time(2_994_000)
            // Standard Error: 9_497
            .saturating_add(Weight::from_ref_time(1_206_186).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_919 nanoseconds.
        Weight::from_ref_time(2_840_539)
            // Standard Error: 2_403
            .saturating_add(Weight::from_ref_time(330_824).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_897 nanoseconds.
        Weight::from_ref_time(3_353_443)
            // Standard Error: 1_563
            .saturating_add(Weight::from_ref_time(183_530).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_923 nanoseconds.
        Weight::from_ref_time(3_507_515)
            // Standard Error: 2_086
            .saturating_add(Weight::from_ref_time(188_992).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_910 nanoseconds.
        Weight::from_ref_time(3_023_000)
            // Standard Error: 10_440
            .saturating_add(Weight::from_ref_time(1_860_526).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_856 nanoseconds.
        Weight::from_ref_time(2_965_000)
            // Standard Error: 7_859
            .saturating_add(Weight::from_ref_time(1_160_892).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_939 nanoseconds.
        Weight::from_ref_time(3_042_000)
            // Standard Error: 9_999
            .saturating_add(Weight::from_ref_time(1_861_335).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_869 nanoseconds.
        Weight::from_ref_time(2_943_000)
            // Standard Error: 7_865
            .saturating_add(Weight::from_ref_time(1_160_211).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_932 nanoseconds.
        Weight::from_ref_time(2_988_000)
            // Standard Error: 10_439
            .saturating_add(Weight::from_ref_time(1_836_083).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_876 nanoseconds.
        Weight::from_ref_time(2_986_000)
            // Standard Error: 8_302
            .saturating_add(Weight::from_ref_time(1_171_922).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_880 nanoseconds.
        Weight::from_ref_time(3_009_000)
            // Standard Error: 10_426
            .saturating_add(Weight::from_ref_time(1_866_209).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_909 nanoseconds.
        Weight::from_ref_time(2_980_000)
            // Standard Error: 8_610
            .saturating_add(Weight::from_ref_time(1_162_755).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_919 nanoseconds.
        Weight::from_ref_time(2_965_000)
            // Standard Error: 10_615
            .saturating_add(Weight::from_ref_time(1_811_638).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_843 nanoseconds.
        Weight::from_ref_time(2_922_000)
            // Standard Error: 8_836
            .saturating_add(Weight::from_ref_time(1_182_152).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_906 nanoseconds.
        Weight::from_ref_time(2_994_000)
            // Standard Error: 10_515
            .saturating_add(Weight::from_ref_time(1_846_488).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_891 nanoseconds.
        Weight::from_ref_time(2_947_000)
            // Standard Error: 7_847
            .saturating_add(Weight::from_ref_time(1_171_988).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_847 nanoseconds.
        Weight::from_ref_time(2_973_000)
            // Standard Error: 10_791
            .saturating_add(Weight::from_ref_time(1_852_156).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_909 nanoseconds.
        Weight::from_ref_time(2_995_000)
            // Standard Error: 8_085
            .saturating_add(Weight::from_ref_time(1_157_951).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_966 nanoseconds.
        Weight::from_ref_time(3_042_000)
            // Standard Error: 11_215
            .saturating_add(Weight::from_ref_time(1_837_742).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_838 nanoseconds.
        Weight::from_ref_time(2_988_000)
            // Standard Error: 7_852
            .saturating_add(Weight::from_ref_time(1_159_477).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_833 nanoseconds.
        Weight::from_ref_time(2_953_000)
            // Standard Error: 10_549
            .saturating_add(Weight::from_ref_time(1_832_700).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_883 nanoseconds.
        Weight::from_ref_time(2_996_000)
            // Standard Error: 7_695
            .saturating_add(Weight::from_ref_time(1_126_107).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_859 nanoseconds.
        Weight::from_ref_time(2_993_000)
            // Standard Error: 11_576
            .saturating_add(Weight::from_ref_time(1_813_747).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_938 nanoseconds.
        Weight::from_ref_time(2_986_000)
            // Standard Error: 8_277
            .saturating_add(Weight::from_ref_time(1_136_575).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_902 nanoseconds.
        Weight::from_ref_time(2_942_000)
            // Standard Error: 8_435
            .saturating_add(Weight::from_ref_time(1_274_731).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_894 nanoseconds.
        Weight::from_ref_time(112_767)
            // Standard Error: 8_029
            .saturating_add(Weight::from_ref_time(716_513).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_879 nanoseconds.
        Weight::from_ref_time(2_981_000)
            // Standard Error: 8_509
            .saturating_add(Weight::from_ref_time(1_314_693).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_873 nanoseconds.
        Weight::from_ref_time(512_860)
            // Standard Error: 6_957
            .saturating_add(Weight::from_ref_time(700_677).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_882 nanoseconds.
        Weight::from_ref_time(2_985_000)
            // Standard Error: 9_828
            .saturating_add(Weight::from_ref_time(1_769_313).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_900 nanoseconds.
        Weight::from_ref_time(2_982_000)
            // Standard Error: 9_153
            .saturating_add(Weight::from_ref_time(1_234_240).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_902 nanoseconds.
        Weight::from_ref_time(4_567_809)
            // Standard Error: 12_115
            .saturating_add(Weight::from_ref_time(2_636_360).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_851 nanoseconds.
        Weight::from_ref_time(3_207_526)
            // Standard Error: 11_537
            .saturating_add(Weight::from_ref_time(2_419_621).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_907 nanoseconds.
        Weight::from_ref_time(2_902_253)
            // Standard Error: 12_572
            .saturating_add(Weight::from_ref_time(2_881_170).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_863 nanoseconds.
        Weight::from_ref_time(2_316_645)
            // Standard Error: 9_125
            .saturating_add(Weight::from_ref_time(2_469_619).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_891 nanoseconds.
        Weight::from_ref_time(2_944_000)
            // Standard Error: 10_508
            .saturating_add(Weight::from_ref_time(9_533_885).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_907 nanoseconds.
        Weight::from_ref_time(1_864_757)
            // Standard Error: 44_719
            .saturating_add(Weight::from_ref_time(7_816_095).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_863 nanoseconds.
        Weight::from_ref_time(4_701_234)
            // Standard Error: 13_532
            .saturating_add(Weight::from_ref_time(2_885_235).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_907 nanoseconds.
        Weight::from_ref_time(2_393_565)
            // Standard Error: 12_199
            .saturating_add(Weight::from_ref_time(2_488_443).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_935 nanoseconds.
        Weight::from_ref_time(3_031_000)
            // Standard Error: 9_069
            .saturating_add(Weight::from_ref_time(1_264_905).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_929 nanoseconds.
        Weight::from_ref_time(396_442)
            // Standard Error: 7_332
            .saturating_add(Weight::from_ref_time(678_834).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_875 nanoseconds.
        Weight::from_ref_time(2_965_000)
            // Standard Error: 9_274
            .saturating_add(Weight::from_ref_time(1_242_806).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_935 nanoseconds.
        Weight::from_ref_time(396_561)
            // Standard Error: 7_820
            .saturating_add(Weight::from_ref_time(683_786).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_803 nanoseconds.
        Weight::from_ref_time(2_907_000)
            // Standard Error: 8_398
            .saturating_add(Weight::from_ref_time(1_230_312).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_965 nanoseconds.
        Weight::from_ref_time(127_369)
            // Standard Error: 8_046
            .saturating_add(Weight::from_ref_time(703_627).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_894 nanoseconds.
        Weight::from_ref_time(3_063_000)
            // Standard Error: 8_553
            .saturating_add(Weight::from_ref_time(1_052_626).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_897 nanoseconds.
        Weight::from_ref_time(916_209)
            // Standard Error: 6_624
            .saturating_add(Weight::from_ref_time(601_569).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_944 nanoseconds.
        Weight::from_ref_time(3_034_000)
            // Standard Error: 7_549
            .saturating_add(Weight::from_ref_time(1_092_533).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_926 nanoseconds.
        Weight::from_ref_time(1_054_285)
            // Standard Error: 6_449
            .saturating_add(Weight::from_ref_time(613_466).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_935 nanoseconds.
        Weight::from_ref_time(3_000_000)
            // Standard Error: 7_831
            .saturating_add(Weight::from_ref_time(1_084_387).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_861 nanoseconds.
        Weight::from_ref_time(956_935)
            // Standard Error: 6_108
            .saturating_add(Weight::from_ref_time(606_912).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_885 nanoseconds.
        Weight::from_ref_time(2_978_000)
            // Standard Error: 8_271
            .saturating_add(Weight::from_ref_time(1_066_631).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_885 nanoseconds.
        Weight::from_ref_time(1_004_505)
            // Standard Error: 6_242
            .saturating_add(Weight::from_ref_time(608_678).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_927 nanoseconds.
        Weight::from_ref_time(3_032_000)
            // Standard Error: 8_654
            .saturating_add(Weight::from_ref_time(1_062_282).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_866 nanoseconds.
        Weight::from_ref_time(170_666)
            // Standard Error: 10_203
            .saturating_add(Weight::from_ref_time(666_893).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_074 nanoseconds.
        Weight::from_ref_time(1_125_000)
            // Standard Error: 585
            .saturating_add(Weight::from_ref_time(241_309).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `74 + c * (1024 ±0)`
        //  Estimated: `2542 + c * (1024 ±0)`
        // Minimum execution time: 2_900 nanoseconds.
        Weight::from_parts(3_010_000, 2542)
            // Standard Error: 1_205
            .saturating_add(Weight::from_ref_time(671_201).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 54_829 nanoseconds.
        Weight::from_ref_time(104_531_805)
            // Standard Error: 8_386
            .saturating_add(Weight::from_ref_time(2_132_094).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `847`
        //  Estimated: `17017`
        // Minimum execution time: 54_915 nanoseconds.
        Weight::from_parts(56_741_000, 17017)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `3010`
        // Minimum execution time: 56_334 nanoseconds.
        Weight::from_parts(14_619_985, 3010)
            // Standard Error: 55_576
            .saturating_add(Weight::from_ref_time(52_505_090).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `604`
        //  Estimated: `17714`
        // Minimum execution time: 51_759 nanoseconds.
        Weight::from_parts(65_588_042, 17714)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_344).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `55`
        //  Estimated: `13432`
        // Minimum execution time: 9_641_020 nanoseconds.
        Weight::from_parts(9_680_003_000, 13432)
            // Standard Error: 517_784
            .saturating_add(Weight::from_ref_time(29_395_981).saturating_mul(c.into()))
            // Standard Error: 30
            .saturating_add(Weight::from_ref_time(824).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `374`
        //  Estimated: `14759`
        // Minimum execution time: 54_783 nanoseconds.
        Weight::from_parts(34_829_167, 14759)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_168).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1042`
        //  Estimated: `30879`
        // Minimum execution time: 77_020 nanoseconds.
        Weight::from_parts(63_318_382, 30879)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_170).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `676`
        //  Estimated: `41136`
        // Minimum execution time: 295_072 nanoseconds.
        Weight::from_parts(305_049_544, 41136)
            .saturating_add(RocksDbWeight::get().reads(24_u64))
            .saturating_add(RocksDbWeight::get().writes(21_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `676`
        //  Estimated: `40641`
        // Minimum execution time: 309_393 nanoseconds.
        Weight::from_parts(320_616_447, 40641)
            // Standard Error: 1_023
            .saturating_add(Weight::from_ref_time(1_149).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(24_u64))
            .saturating_add(RocksDbWeight::get().writes(21_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `243 + c * (1075 ±0)`
        //  Estimated: `2997 + c * (2150 ±0)`
        // Minimum execution time: 42_068 nanoseconds.
        Weight::from_parts(42_661_000, 2997)
            // Standard Error: 34_585
            .saturating_add(Weight::from_ref_time(53_451_759).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_proof_size(2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_763 nanoseconds.
        Weight::from_ref_time(106_917_874)
            // Standard Error: 340_822
            .saturating_add(Weight::from_ref_time(137_796_423).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 228_508 nanoseconds.
        Weight::from_ref_time(239_282_524)
            // Standard Error: 156_577
            .saturating_add(Weight::from_ref_time(138_059_906).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_460 nanoseconds.
        Weight::from_ref_time(91_805_000)
            // Standard Error: 1_175_587
            .saturating_add(Weight::from_ref_time(381_347_011).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 148_084 nanoseconds.
        Weight::from_ref_time(197_280_839)
            // Standard Error: 149_073
            .saturating_add(Weight::from_ref_time(305_627_957).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_501 nanoseconds.
        Weight::from_ref_time(116_561_926)
            // Standard Error: 141_599
            .saturating_add(Weight::from_ref_time(207_781_886).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_760 nanoseconds.
        Weight::from_ref_time(103_609_418)
            // Standard Error: 107_873
            .saturating_add(Weight::from_ref_time(205_944_625).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_552 nanoseconds.
        Weight::from_ref_time(100_773_812)
            // Standard Error: 104_472
            .saturating_add(Weight::from_ref_time(205_507_293).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_549 nanoseconds.
        Weight::from_ref_time(92_269_084)
            // Standard Error: 113_815
            .saturating_add(Weight::from_ref_time(207_874_811).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_423 nanoseconds.
        Weight::from_ref_time(97_908_368)
            // Standard Error: 115_142
            .saturating_add(Weight::from_ref_time(207_525_300).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_528 nanoseconds.
        Weight::from_ref_time(101_672_493)
            // Standard Error: 93_792
            .saturating_add(Weight::from_ref_time(204_730_998).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_852 nanoseconds.
        Weight::from_ref_time(94_476_798)
            // Standard Error: 101_545
            .saturating_add(Weight::from_ref_time(207_381_427).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_768 nanoseconds.
        Weight::from_ref_time(97_309_861)
            // Standard Error: 96_287
            .saturating_add(Weight::from_ref_time(205_848_980).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_652 nanoseconds.
        Weight::from_ref_time(98_868_587)
            // Standard Error: 99_618
            .saturating_add(Weight::from_ref_time(205_115_464).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 740_967 nanoseconds.
        Weight::from_ref_time(814_362_895)
            // Standard Error: 305_346
            .saturating_add(Weight::from_ref_time(274_418_796).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_014_106 nanoseconds.
        Weight::from_ref_time(1_028_265_000)
            // Standard Error: 60_688
            .saturating_add(Weight::from_ref_time(12_716_029).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_061 nanoseconds.
        Weight::from_ref_time(101_006_561)
            // Standard Error: 94_401
            .saturating_add(Weight::from_ref_time(205_586_603).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_945 nanoseconds.
        Weight::from_ref_time(95_753_572)
            // Standard Error: 99_503
            .saturating_add(Weight::from_ref_time(206_323_545).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_149 nanoseconds.
        Weight::from_ref_time(111_550_500)
            // Standard Error: 122_862
            .saturating_add(Weight::from_ref_time(262_647_691).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_646 nanoseconds.
        Weight::from_ref_time(99_149_838)
            // Standard Error: 96_939
            .saturating_add(Weight::from_ref_time(213_013_826).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_318_907 nanoseconds.
        Weight::from_ref_time(4_366_110_962)
            // Standard Error: 154_296
            .saturating_add(Weight::from_ref_time(294_079_977).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 595_094 nanoseconds.
        Weight::from_ref_time(601_714_000)
            // Standard Error: 61_801
            .saturating_add(Weight::from_ref_time(30_227_012).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_441 nanoseconds.
        Weight::from_ref_time(125_416_586)
            // Standard Error: 280_047
            .saturating_add(Weight::from_ref_time(393_800_147).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 487_885 nanoseconds.
        Weight::from_ref_time(494_434_000)
            // Standard Error: 74_324
            .saturating_add(Weight::from_ref_time(20_266_579).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 257_793 nanoseconds.
        Weight::from_ref_time(299_156_241)
            // Standard Error: 232_825
            .saturating_add(Weight::from_ref_time(406_083_722).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 524_975 nanoseconds.
        Weight::from_ref_time(534_868_000)
            // Standard Error: 73_097
            .saturating_add(Weight::from_ref_time(20_227_408).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_121 nanoseconds.
        Weight::from_ref_time(93_567_476)
            // Standard Error: 219_993
            .saturating_add(Weight::from_ref_time(19_569_623).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_192 nanoseconds.
        Weight::from_ref_time(98_749_499)
            // Standard Error: 651
            .saturating_add(Weight::from_ref_time(401_432).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_909 nanoseconds.
        Weight::from_ref_time(121_898_955)
            // Standard Error: 135_264
            .saturating_add(Weight::from_ref_time(283_436_730).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_221 nanoseconds.
        Weight::from_ref_time(87_772_611)
            // Standard Error: 543
            .saturating_add(Weight::from_ref_time(553_498).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_777 nanoseconds.
        Weight::from_ref_time(101_868_215)
            // Standard Error: 238_218
            .saturating_add(Weight::from_ref_time(12_294_784).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_325 nanoseconds.
        Weight::from_ref_time(99_515_364)
            // Standard Error: 615
            .saturating_add(Weight::from_ref_time(401_161).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_967 nanoseconds.
        Weight::from_ref_time(100_025_749)
            // Standard Error: 121_003
            .saturating_add(Weight::from_ref_time(207_994_161).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_224 nanoseconds.
        Weight::from_ref_time(102_239_028)
            // Standard Error: 113_478
            .saturating_add(Weight::from_ref_time(207_511_708).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 735_990 nanoseconds.
        Weight::from_ref_time(797_345_117)
            // Standard Error: 186_162
            .saturating_add(Weight::from_ref_time(216_052_641).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 760_358 nanoseconds.
        Weight::from_ref_time(785_314_448)
            // Standard Error: 1_022
            .saturating_add(Weight::from_ref_time(137_426).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_989_331 nanoseconds.
        Weight::from_ref_time(5_059_113_367)
            // Standard Error: 308_000
            .saturating_add(Weight::from_ref_time(229_052_314).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_171_137 nanoseconds.
        Weight::from_ref_time(1_143_209_622)
            // Standard Error: 6_904
            .saturating_add(Weight::from_ref_time(13_424_414).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_233 nanoseconds.
        Weight::from_ref_time(110_458_348)
            // Standard Error: 128_152
            .saturating_add(Weight::from_ref_time(216_627_860).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 299_946 nanoseconds.
        Weight::from_ref_time(303_333_000)
            // Standard Error: 64_779
            .saturating_add(Weight::from_ref_time(26_069_075).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_836 nanoseconds.
        Weight::from_ref_time(112_658_719)
            // Standard Error: 153_093
            .saturating_add(Weight::from_ref_time(273_441_420).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_249 nanoseconds.
        Weight::from_ref_time(109_179_979)
            // Standard Error: 150_712
            .saturating_add(Weight::from_ref_time(206_363_380).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_857 nanoseconds.
        Weight::from_ref_time(92_949_392)
            // Standard Error: 245_289
            .saturating_add(Weight::from_ref_time(32_555_107).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_414 nanoseconds.
        Weight::from_ref_time(92_163_576)
            // Standard Error: 239_409
            .saturating_add(Weight::from_ref_time(22_332_423).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_599 nanoseconds.
        Weight::from_ref_time(92_188_244)
            // Standard Error: 235_460
            .saturating_add(Weight::from_ref_time(21_017_005).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_155 nanoseconds.
        Weight::from_ref_time(92_534_384)
            // Standard Error: 245_053
            .saturating_add(Weight::from_ref_time(22_687_615).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_449 nanoseconds.
        Weight::from_ref_time(92_944_615)
            // Standard Error: 236_710
            .saturating_add(Weight::from_ref_time(22_748_434).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 143_366 nanoseconds.
        Weight::from_ref_time(185_719_352)
            // Standard Error: 148_907
            .saturating_add(Weight::from_ref_time(298_170_146).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_931 nanoseconds.
        Weight::from_ref_time(125_872_032)
            // Standard Error: 284_993
            .saturating_add(Weight::from_ref_time(472_533_219).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_757_003 nanoseconds.
        Weight::from_ref_time(43_980_333_000)
            // Standard Error: 289_183
            .saturating_add(Weight::from_ref_time(7_068_288).saturating_mul(p.into()))
            // Standard Error: 289_166
            .saturating_add(Weight::from_ref_time(157_176_528).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 87_405 nanoseconds.
        Weight::from_parts(117_002_453, 141)
            // Standard Error: 4_951
            .saturating_add(Weight::from_ref_time(11_259_513).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 86_601 nanoseconds.
        Weight::from_parts(89_602_000, 141)
            // Standard Error: 47_866
            .saturating_add(Weight::from_ref_time(34_748_329).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5068941`
        // Minimum execution time: 5_854_381 nanoseconds.
        Weight::from_parts(5_659_644_791, 5068941)
            // Standard Error: 50_498
            .saturating_add(Weight::from_ref_time(36_339_546).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65704 ±0)`
        //  Estimated: `1012 + p * (75606 ±0)`
        // Minimum execution time: 88_364 nanoseconds.
        Weight::from_parts(186_846_085, 1012)
            // Standard Error: 45_734
            .saturating_add(Weight::from_ref_time(41_765_012).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(75606).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `584 + p * (9879 ±2)`
        // Minimum execution time: 103_281 nanoseconds.
        Weight::from_parts(99_740_379, 584)
            // Standard Error: 41_748
            .saturating_add(Weight::from_ref_time(35_978_673).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `584 + p * (9879 ±2)`
        // Minimum execution time: 788_448 nanoseconds.
        Weight::from_parts(803_506_996, 584)
            // Standard Error: 180_692
            .saturating_add(Weight::from_ref_time(39_688_822).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `316941`
        // Minimum execution time: 1_141_347 nanoseconds.
        Weight::from_parts(1_156_927_567, 316941)
            // Standard Error: 131_123
            .saturating_add(Weight::from_ref_time(42_092_626).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_028_945 nanoseconds.
        Weight::from_ref_time(3_307_429_509)
            // Standard Error: 84_917
            .saturating_add(Weight::from_ref_time(8_852_535).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_049_698 nanoseconds.
        Weight::from_ref_time(4_033_752_884)
            // Standard Error: 13_816
            .saturating_add(Weight::from_ref_time(3_384_598).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_115_579 nanoseconds.
        Weight::from_ref_time(9_335_969_443)
            // Standard Error: 250_933
            .saturating_add(Weight::from_ref_time(13_955_648).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_733_845 nanoseconds.
        Weight::from_ref_time(9_968_508_879)
            // Standard Error: 254_284
            .saturating_add(Weight::from_ref_time(7_995_878).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_857 nanoseconds.
        Weight::from_ref_time(2_974_000)
            // Standard Error: 8_806
            .saturating_add(Weight::from_ref_time(3_783_533).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_848 nanoseconds.
        Weight::from_ref_time(584_352)
            // Standard Error: 6_867
            .saturating_add(Weight::from_ref_time(3_123_114).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_895 nanoseconds.
        Weight::from_ref_time(3_897_032)
            // Standard Error: 1_128
            .saturating_add(Weight::from_ref_time(1_578_611).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_900 nanoseconds.
        Weight::from_ref_time(3_008_000)
            // Standard Error: 5_917
            .saturating_add(Weight::from_ref_time(3_027_107).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_890 nanoseconds.
        Weight::from_ref_time(1_363_763)
            // Standard Error: 8_087
            .saturating_add(Weight::from_ref_time(5_218_881).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_159 nanoseconds.
        Weight::from_ref_time(5_860_782)
            // Standard Error: 1_623
            .saturating_add(Weight::from_ref_time(166_200).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_079 nanoseconds.
        Weight::from_ref_time(5_924_341)
            // Standard Error: 8_397
            .saturating_add(Weight::from_ref_time(2_563_326).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(2_563_326 -
            2_485_655).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_044 nanoseconds.
        Weight::from_ref_time(4_417_863)
            // Standard Error: 12_641
            .saturating_add(Weight::from_ref_time(2_485_655).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_307 nanoseconds.
        Weight::from_ref_time(17_705_863)
            // Standard Error: 29_147
            .saturating_add(Weight::from_ref_time(9_962_407).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_911 nanoseconds.
        Weight::from_ref_time(4_270_882)
            // Standard Error: 4_829
            .saturating_add(Weight::from_ref_time(1_179_672).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_586 nanoseconds.
        Weight::from_ref_time(5_838_858)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_919 nanoseconds.
        Weight::from_ref_time(2_747_501)
            // Standard Error: 2_612
            .saturating_add(Weight::from_ref_time(260_851).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_937 nanoseconds.
        Weight::from_ref_time(3_016_000)
            // Standard Error: 5_491
            .saturating_add(Weight::from_ref_time(752_684).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_897 nanoseconds.
        Weight::from_ref_time(3_002_000)
            // Standard Error: 6_458
            .saturating_add(Weight::from_ref_time(774_313).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_536 nanoseconds.
        Weight::from_ref_time(8_565_024)
            // Standard Error: 7_432
            .saturating_add(Weight::from_ref_time(800_080).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_544 nanoseconds.
        Weight::from_ref_time(5_684_253)
            // Standard Error: 11_299
            .saturating_add(Weight::from_ref_time(1_569_340).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_268 nanoseconds.
        Weight::from_ref_time(853_536)
            // Standard Error: 14_091
            .saturating_add(Weight::from_ref_time(7_571_042).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_871 nanoseconds.
        Weight::from_ref_time(2_945_000)
            // Standard Error: 6_617
            .saturating_add(Weight::from_ref_time(3_330_495).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_833 nanoseconds.
        Weight::from_ref_time(3_005_000)
            // Standard Error: 7_110
            .saturating_add(Weight::from_ref_time(3_157_904).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_888 nanoseconds.
        Weight::from_ref_time(2_985_000)
            // Standard Error: 6_109
            .saturating_add(Weight::from_ref_time(3_141_906).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_922 nanoseconds.
        Weight::from_ref_time(3_036_000)
            // Standard Error: 5_506
            .saturating_add(Weight::from_ref_time(2_680_138).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_919 nanoseconds.
        Weight::from_ref_time(506_455)
            // Standard Error: 7_237
            .saturating_add(Weight::from_ref_time(646_019).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_824 nanoseconds.
        Weight::from_ref_time(2_419_702)
            // Standard Error: 3_003
            .saturating_add(Weight::from_ref_time(392_310).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_936 nanoseconds.
        Weight::from_ref_time(2_991_000)
            // Standard Error: 9_691
            .saturating_add(Weight::from_ref_time(1_795_924).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_906 nanoseconds.
        Weight::from_ref_time(2_994_000)
            // Standard Error: 9_497
            .saturating_add(Weight::from_ref_time(1_206_186).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_919 nanoseconds.
        Weight::from_ref_time(2_840_539)
            // Standard Error: 2_403
            .saturating_add(Weight::from_ref_time(330_824).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_897 nanoseconds.
        Weight::from_ref_time(3_353_443)
            // Standard Error: 1_563
            .saturating_add(Weight::from_ref_time(183_530).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_923 nanoseconds.
        Weight::from_ref_time(3_507_515)
            // Standard Error: 2_086
            .saturating_add(Weight::from_ref_time(188_992).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_910 nanoseconds.
        Weight::from_ref_time(3_023_000)
            // Standard Error: 10_440
            .saturating_add(Weight::from_ref_time(1_860_526).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_856 nanoseconds.
        Weight::from_ref_time(2_965_000)
            // Standard Error: 7_859
            .saturating_add(Weight::from_ref_time(1_160_892).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_939 nanoseconds.
        Weight::from_ref_time(3_042_000)
            // Standard Error: 9_999
            .saturating_add(Weight::from_ref_time(1_861_335).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_869 nanoseconds.
        Weight::from_ref_time(2_943_000)
            // Standard Error: 7_865
            .saturating_add(Weight::from_ref_time(1_160_211).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_932 nanoseconds.
        Weight::from_ref_time(2_988_000)
            // Standard Error: 10_439
            .saturating_add(Weight::from_ref_time(1_836_083).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_876 nanoseconds.
        Weight::from_ref_time(2_986_000)
            // Standard Error: 8_302
            .saturating_add(Weight::from_ref_time(1_171_922).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_880 nanoseconds.
        Weight::from_ref_time(3_009_000)
            // Standard Error: 10_426
            .saturating_add(Weight::from_ref_time(1_866_209).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_909 nanoseconds.
        Weight::from_ref_time(2_980_000)
            // Standard Error: 8_610
            .saturating_add(Weight::from_ref_time(1_162_755).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_919 nanoseconds.
        Weight::from_ref_time(2_965_000)
            // Standard Error: 10_615
            .saturating_add(Weight::from_ref_time(1_811_638).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_843 nanoseconds.
        Weight::from_ref_time(2_922_000)
            // Standard Error: 8_836
            .saturating_add(Weight::from_ref_time(1_182_152).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_906 nanoseconds.
        Weight::from_ref_time(2_994_000)
            // Standard Error: 10_515
            .saturating_add(Weight::from_ref_time(1_846_488).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_891 nanoseconds.
        Weight::from_ref_time(2_947_000)
            // Standard Error: 7_847
            .saturating_add(Weight::from_ref_time(1_171_988).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_847 nanoseconds.
        Weight::from_ref_time(2_973_000)
            // Standard Error: 10_791
            .saturating_add(Weight::from_ref_time(1_852_156).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_909 nanoseconds.
        Weight::from_ref_time(2_995_000)
            // Standard Error: 8_085
            .saturating_add(Weight::from_ref_time(1_157_951).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_966 nanoseconds.
        Weight::from_ref_time(3_042_000)
            // Standard Error: 11_215
            .saturating_add(Weight::from_ref_time(1_837_742).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_838 nanoseconds.
        Weight::from_ref_time(2_988_000)
            // Standard Error: 7_852
            .saturating_add(Weight::from_ref_time(1_159_477).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_833 nanoseconds.
        Weight::from_ref_time(2_953_000)
            // Standard Error: 10_549
            .saturating_add(Weight::from_ref_time(1_832_700).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_883 nanoseconds.
        Weight::from_ref_time(2_996_000)
            // Standard Error: 7_695
            .saturating_add(Weight::from_ref_time(1_126_107).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_859 nanoseconds.
        Weight::from_ref_time(2_993_000)
            // Standard Error: 11_576
            .saturating_add(Weight::from_ref_time(1_813_747).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_938 nanoseconds.
        Weight::from_ref_time(2_986_000)
            // Standard Error: 8_277
            .saturating_add(Weight::from_ref_time(1_136_575).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_902 nanoseconds.
        Weight::from_ref_time(2_942_000)
            // Standard Error: 8_435
            .saturating_add(Weight::from_ref_time(1_274_731).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_894 nanoseconds.
        Weight::from_ref_time(112_767)
            // Standard Error: 8_029
            .saturating_add(Weight::from_ref_time(716_513).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_879 nanoseconds.
        Weight::from_ref_time(2_981_000)
            // Standard Error: 8_509
            .saturating_add(Weight::from_ref_time(1_314_693).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_873 nanoseconds.
        Weight::from_ref_time(512_860)
            // Standard Error: 6_957
            .saturating_add(Weight::from_ref_time(700_677).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_882 nanoseconds.
        Weight::from_ref_time(2_985_000)
            // Standard Error: 9_828
            .saturating_add(Weight::from_ref_time(1_769_313).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_900 nanoseconds.
        Weight::from_ref_time(2_982_000)
            // Standard Error: 9_153
            .saturating_add(Weight::from_ref_time(1_234_240).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_902 nanoseconds.
        Weight::from_ref_time(4_567_809)
            // Standard Error: 12_115
            .saturating_add(Weight::from_ref_time(2_636_360).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_851 nanoseconds.
        Weight::from_ref_time(3_207_526)
            // Standard Error: 11_537
            .saturating_add(Weight::from_ref_time(2_419_621).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_907 nanoseconds.
        Weight::from_ref_time(2_902_253)
            // Standard Error: 12_572
            .saturating_add(Weight::from_ref_time(2_881_170).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_863 nanoseconds.
        Weight::from_ref_time(2_316_645)
            // Standard Error: 9_125
            .saturating_add(Weight::from_ref_time(2_469_619).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_891 nanoseconds.
        Weight::from_ref_time(2_944_000)
            // Standard Error: 10_508
            .saturating_add(Weight::from_ref_time(9_533_885).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_907 nanoseconds.
        Weight::from_ref_time(1_864_757)
            // Standard Error: 44_719
            .saturating_add(Weight::from_ref_time(7_816_095).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_863 nanoseconds.
        Weight::from_ref_time(4_701_234)
            // Standard Error: 13_532
            .saturating_add(Weight::from_ref_time(2_885_235).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_907 nanoseconds.
        Weight::from_ref_time(2_393_565)
            // Standard Error: 12_199
            .saturating_add(Weight::from_ref_time(2_488_443).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_935 nanoseconds.
        Weight::from_ref_time(3_031_000)
            // Standard Error: 9_069
            .saturating_add(Weight::from_ref_time(1_264_905).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_929 nanoseconds.
        Weight::from_ref_time(396_442)
            // Standard Error: 7_332
            .saturating_add(Weight::from_ref_time(678_834).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_875 nanoseconds.
        Weight::from_ref_time(2_965_000)
            // Standard Error: 9_274
            .saturating_add(Weight::from_ref_time(1_242_806).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_935 nanoseconds.
        Weight::from_ref_time(396_561)
            // Standard Error: 7_820
            .saturating_add(Weight::from_ref_time(683_786).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_803 nanoseconds.
        Weight::from_ref_time(2_907_000)
            // Standard Error: 8_398
            .saturating_add(Weight::from_ref_time(1_230_312).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_965 nanoseconds.
        Weight::from_ref_time(127_369)
            // Standard Error: 8_046
            .saturating_add(Weight::from_ref_time(703_627).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_894 nanoseconds.
        Weight::from_ref_time(3_063_000)
            // Standard Error: 8_553
            .saturating_add(Weight::from_ref_time(1_052_626).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_897 nanoseconds.
        Weight::from_ref_time(916_209)
            // Standard Error: 6_624
            .saturating_add(Weight::from_ref_time(601_569).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_944 nanoseconds.
        Weight::from_ref_time(3_034_000)
            // Standard Error: 7_549
            .saturating_add(Weight::from_ref_time(1_092_533).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_926 nanoseconds.
        Weight::from_ref_time(1_054_285)
            // Standard Error: 6_449
            .saturating_add(Weight::from_ref_time(613_466).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_935 nanoseconds.
        Weight::from_ref_time(3_000_000)
            // Standard Error: 7_831
            .saturating_add(Weight::from_ref_time(1_084_387).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_861 nanoseconds.
        Weight::from_ref_time(956_935)
            // Standard Error: 6_108
            .saturating_add(Weight::from_ref_time(606_912).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_885 nanoseconds.
        Weight::from_ref_time(2_978_000)
            // Standard Error: 8_271
            .saturating_add(Weight::from_ref_time(1_066_631).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_885 nanoseconds.
        Weight::from_ref_time(1_004_505)
            // Standard Error: 6_242
            .saturating_add(Weight::from_ref_time(608_678).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_927 nanoseconds.
        Weight::from_ref_time(3_032_000)
            // Standard Error: 8_654
            .saturating_add(Weight::from_ref_time(1_062_282).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_866 nanoseconds.
        Weight::from_ref_time(170_666)
            // Standard Error: 10_203
            .saturating_add(Weight::from_ref_time(666_893).saturating_mul(r.into()))
    }
}
