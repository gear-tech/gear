// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_gear_bridges`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `mertwole`, CPU: `AMD EPYC 9454P 48-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("vara-dev")`, DB CACHE: 1024

// Executed Command:
// target/release/gear
// benchmark
// pallet
// --chain=vara-dev
// --steps=50
// --repeat=20
// --wasm-execution=compiled
// --pallet=pallet_gear_bridges
// --extrinsic=handle
// --output
// .

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

pub trait WeightInfo {
	fn handle(l: u32, ) -> Weight;
}

/// Weight functions for `pallet_gear_bridges`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `GearBridges::Queue` (r:1 w:1)
	/// Proof: `GearBridges::Queue` (`max_values`: Some(1), `max_size`: Some(513), added: 1008, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 1024]`.
	fn handle(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `1998`
		// Minimum execution time: 4_580_000 picoseconds.
		Weight::from_parts(4_862_860, 0)
			.saturating_add(Weight::from_parts(0, 1998))
			// Standard Error: 16
			.saturating_add(Weight::from_parts(2_393, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

impl WeightInfo for () {
	fn handle(l: u32, ) -> Weight {
		Weight::from_parts(4_862_860, 0)
			.saturating_add(Weight::from_parts(0, 1998))
			.saturating_add(Weight::from_parts(2_393, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
