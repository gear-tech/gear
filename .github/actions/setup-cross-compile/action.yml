name: setup-cross-compile

inputs:
  target:
    description: "Rust build target"
    required: true

runs:
  using: composite
  steps:
    - name: "Install: Rust target"
      run: |
        rustup target add ${{ matrix.target }}
        echo "CARGO_BUILD_TARGET=${{ matrix.target }}" >> $GITHUB_ENV
      shell: bash

    - name: "Install: macOS aarch64 packages"
      if: ${{ inputs.target == 'aarch64-apple-darwin' }}
      run: |
        if ! [[ "${{ runner.os }}" == "macOS" && "${{ runner.arch }}" == "ARM64" ]]; then
          echo "macOS-ARM64 runner expected for 'aarch64-apple-darwin' target"
          exit 1
        fi
        
        brew install protobuf binaryen openssl rocksdb zstd jemalloc
        
        # Do not override include directory because system RocksDB is too new
        #echo "ROCKSDB_INCLUDE_DIR=/opt/homebrew/opt/rocksdb/include" >> $GITHUB_ENV
        echo "ROCKSDB_LIB_DIR=/opt/homebrew/opt/rocksdb/lib" >> $GITHUB_ENV
        
        echo "ZSTD_SYS_USE_PKG_CONFIG=1" >> $GITHUB_ENV
        
        echo "JEMALLOC_OVERRIDE=/opt/homebrew/opt/jemalloc/lib/libjemalloc.a" >> $GITHUB_ENV
        
        echo "OPENSSL_NO_VENDOR=1" >> $GITHUB_ENV
        echo "OPENSSL_DIR=/opt/homebrew/opt/openssl" >> $GITHUB_ENV
      shell: bash

    - name: "Install: macOS x86_64 packages"
      if: ${{ inputs.target == 'x86_64-apple-darwin' }}
      run: |
        if ! [[ "${{ runner.os }}" == "macOS" && "${{ runner.arch }}" == "ARM64" ]]; then
          echo "macOS-ARM64 runner expected for 'x86_64-apple-darwin' target"
          exit 1
        fi
        
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
        /usr/local/bin/brew install protobuf binaryen openssl rocksdb zstd jemalloc pkgconf
        
        # Do not override include directory because system RocksDB is too new
        #echo "ROCKSDB_INCLUDE_DIR=/usr/local/opt/rocksdb/include" >> $GITHUB_ENV
        echo "ROCKSDB_LIB_DIR=/usr/local/opt/rocksdb/lib" >> $GITHUB_ENV
        
        echo "ZSTD_SYS_USE_PKG_CONFIG=1" >> $GITHUB_ENV
        echo "PKG_CONFIG=/usr/local/bin/pkg-config" >> $GITHUB_ENV
        echo "HOST_PKG_CONFIG_PATH=/opt/homebrew/lib/pkgconfig" >> $GITHUB_ENV
        echo "TARGET_PKG_CONFIG_PATH=/usr/local/lib/pkgconfig" >> $GITHUB_ENV
        
        echo "JEMALLOC_OVERRIDE=/usr/local/opt/jemalloc/lib/libjemalloc.a" >> $GITHUB_ENV
        
        echo "OPENSSL_NO_VENDOR=1" >> $GITHUB_ENV
        echo "OPENSSL_DIR=/usr/local/opt/openssl" >> $GITHUB_ENV
      shell: arch -x86_64 bash {0}

    - name: "Install: Linux cross compilers"
      if: ${{ runner.arch == 'ARM64' && runner.os == 'Linux' }}
      run: |
        sudo sed -i '/Types: deb/a Architectures: arm64' /etc/apt/sources.list.d/ubuntu.sources
        sudo dpkg --add-architecture amd64
        sudo tee /etc/apt/sources.list.d/amd64.list >/dev/null <<EOF
        deb [arch=amd64] https://archive.ubuntu.com/ubuntu/ noble main restricted universe multiverse
        deb [arch=amd64] https://archive.ubuntu.com/ubuntu/ noble-updates main restricted universe multiverse
        deb [arch=amd64] https://archive.ubuntu.com/ubuntu/ noble-security main restricted universe multiverse
        deb [arch=amd64] https://archive.ubuntu.com/ubuntu/ noble-backports main restricted universe multiverse
        EOF
        
        sudo apt update
        sudo apt install gcc-x86-64-linux-gnu g++-x86-64-linux-gnu pkg-config
        
        echo "CC_x86_64-unknown-linux-gnu=x86_64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "CXX_x86_64-unknown-linux-gnu=x86_64-linux-gnu-g++" >> $GITHUB_ENV
        
        echo "PKG_CONFIG=/usr/bin/pkgconf" >> $GITHUB_ENV
        echo "HOST_PKG_CONFIG_PATH=/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
      shell: bash

    - name: "Install: Linux packages"
      if: ${{ inputs.target == 'x86_64-unknown-linux-gnu' }}
      run: |
        if ! [[ "${{ runner.os }}" == "Linux" ]]; then
          echo "Linux runner expected for 'x86_64-unknown-linux-gnu' target"
          exit 1
        fi
        
        sudo apt update
        sudo apt install protobuf-compiler binaryen pkg-config \
          libssl-dev:amd64 librocksdb-dev:amd64 libzstd-dev:amd64 libjemalloc-dev:amd64
        
        # Do not override include directory because system RocksDB is too new
        #echo "ROCKSDB_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
        echo "ROCKSDB_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
        
        echo "ZSTD_SYS_USE_PKG_CONFIG=1" >> $GITHUB_ENV
        echo "TARGET_PKG_CONFIG_PATH=/lib/x86_64-linux-gnu/pkgconfig" >> $GITHUB_ENV
        
        echo "JEMALLOC_OVERRIDE=/usr/lib/x86_64-linux-gnu/libjemalloc.a" >> $GITHUB_ENV
        
        echo "OPENSSL_NO_VENDOR=1" >> $GITHUB_ENV
        echo "OPENSSL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
        echo "OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
      shell: bash

    - name: "Install: Windows packages"
      if: ${{ inputs.target == 'x86_64-pc-windows-msvc' }}
      run: |
        if ! [[ "${{ runner.os }}" == "Linux" ]]; then
          echo "Linux runner expected for 'x86_64-pc-windows-msvc' target"
          exit 1
        fi
        
        sudo apt update
        sudo apt install protobuf-compiler binaryen innoextract
        
        # Package is not available in choco or scoop
        #echo "ROCKSDB_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
        #echo "ROCKSDB_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
        
        # Custom ".pc" is required to be written
        #Add-Content -Path $Env:GITHUB_ENV -Value "ZSTD_SYS_USE_PKG_CONFIG=1"
        
        # Not used on Windows
        #echo "JEMALLOC_OVERRIDE=/usr/lib/x86_64-linux-gnu/libjemalloc.a" >> $GITHUB_ENV
        
        wget -qO - https://raw.githubusercontent.com/ScoopInstaller/Main/refs/heads/master/bucket/openssl.json | jq -r '.architecture."64bit".url' | xargs wget -qO openssl_installer.exe
        innoextract -d ${{ runner.temp }}/openssl_extracted -I app/include -I app/lib/VC/x64/MT openssl_installer.exe
        
        echo "OPENSSL_NO_VENDOR=1" >> $GITHUB_ENV
        echo "OPENSSL_INCLUDE_DIR=${{ runner.temp }}/openssl_extracted/app/include" >> $GITHUB_ENV
        echo "OPENSSL_LIB_DIR=${{ runner.temp }}/openssl_extracted/app/lib/VC/x64/MT" >> $GITHUB_ENV
      shell: bash
