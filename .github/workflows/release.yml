name: Release

on:
  push:
    tags: ["*"]

env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  TERM: xterm-256color
  NIGHTLY_TOOLCHAIN_VERSION: ${{ secrets.NIGHTLY_TOOLCHAIN_VERSION }}
  SCCACHE_VERSION: v0.4.1

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - id: version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

      - name: Show version
        run: echo ${{ steps.version.outputs.VERSION }}

    outputs:
      version: ${{ steps.version.outputs.VERSION }}

  build:
    needs: prepare
    runs-on: [self-hosted, sccache, epyc-4, k8s-runner]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set cargo path
        run: echo "/tmp/cargo/bin" >> $GITHUB_PATH

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown
          profile: minimal

      - name: "Install: Show specific nightly version"
        if: ${{ env.NIGHTLY_TOOLCHAIN_VERSION != '' }}
        run: echo $NIGHTLY_TOOLCHAIN_VERSION | sed 's/-/ - /g'

      - name: "Install: Specific nightly toolchain"
        if: ${{ env.NIGHTLY_TOOLCHAIN_VERSION != '' }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-${{ env.NIGHTLY_TOOLCHAIN_VERSION }}
          target: wasm32-unknown-unknown
          components: llvm-tools-preview
          profile: minimal

      - name: "Install: Pin to specific nightly toolchain"
        if: ${{ env.NIGHTLY_TOOLCHAIN_VERSION != '' }}
        run: |
          rm -rf /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu
          ln -s /home/runner/.rustup/toolchains/nightly-$NIGHTLY_TOOLCHAIN_VERSION-x86_64-unknown-linux-gnu /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu

      - name: Install build deps
        run: |
          sudo apt update -y
          sudo apt install -y git clang curl libssl-dev llvm libudev-dev cmake protobuf-compiler wget bzip2
          sudo wget -c https://github.com/mozilla/sccache/releases/download/$SCCACHE_VERSION/sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl.tar.gz -O - | sudo tar -xz -C .
          sudo cp sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl/sccache /usr/bin/
          sudo chmod +x /usr/bin/sccache
          mkdir -p ~/.config/sccache/ && cp /root/sccache/client.toml ~/.config/sccache/config

      - name: Build wasm-proc
        run: |
          cargo build -p wasm-proc --release
          cp -vf target/release/wasm-proc ./

      - name: Build binaries
        run: >
          cargo build -p gear-cli --profile production

      - name: Test runtimes
        run: |
          ./wasm-proc --check-runtime-imports target/production/wbuild/gear-runtime/gear_runtime.wasm
          ./wasm-proc --check-runtime-imports target/production/wbuild/vara-runtime/vara_runtime.wasm

      - name: Prepare artifacts
        run: |
          mkdir -p artifact
          cp target/production/wbuild/gear-runtime/gear_runtime.compact.compressed.wasm artifact/
          cp target/production/wbuild/gear-runtime/gear_runtime.compact.wasm artifact/
          cp target/production/wbuild/gear-runtime/gear_runtime.wasm artifact/
          cp target/production/wbuild/vara-runtime/vara_runtime.compact.compressed.wasm artifact/
          cp target/production/wbuild/vara-runtime/vara_runtime.compact.wasm artifact/
          cp target/production/wbuild/vara-runtime/vara_runtime.wasm artifact/
          cp target/production/gear artifact/
          strip artifact/gear || true

      - name: Publish
        uses: softprops/action-gh-release@v1
        with:
          files: artifact/*
          tag_name: ${{ steps.version.outputs.VERSION }}
          draft: true
