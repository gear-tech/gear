name: Build Linux

on:
  workflow_call:
    inputs:
      profiles:
        type: string
        required: true
      production:
        type: boolean
        default: false
  workflow_dispatch:
    inputs:
      profiles:
        type: string
        default: '[{ "name": "debug", "flags": "" }]'
      production:
        type: boolean
        default: false

env:
  TERM: xterm-256color
  RUST_BACKTRACE: short
  RUST_LIB_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CARGO_PROFILE_DEV_DEBUG: 0
  CARGO_PROFILE_TEST_DEBUG: 0
  NEXTEST_PROFILE: ci
  __GEAR_WASM_BUILDER_NO_FEATURES_TRACKING: 1

jobs:
  docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-linker

      - uses: ./.github/actions/install-rust

      - uses: ./.github/actions/setup-compilation-env
        with:
          target: x86_64-unknown-linux-gnu
          token: ${{ secrets.GITHUB_TOKEN }}
          no-vendored: 'true'

      - name: Cache
        uses: Swatinem/rust-cache@v2

      - name: Test docs
        run: ./scripts/gear.sh test docs

      - name: Build docs
        run: make doc
        shell: bash

      - name: Deploy
        if: github.event_name == 'push'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          cname: docs.gear.rs
          force_orphan: true
          user_name: "github-actions[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"

      - name: Deploy PR
        if: github.event_name == 'pull_request'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/x86_64-unknown-linux-gnu/doc
          destination_dir: pr-${{ github.event.number }}

  workspace:
    runs-on: [ kuberunner, github-runner-02 ]
    strategy:
      matrix:
        profiles: ${{ fromJson(inputs.profiles) }}
      fail-fast: false
    name: workspace (${{ matrix.profiles.name }})
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4

      - name: "Install: Setup linker"
        uses: ./.github/actions/setup-linker

      - name: "Install: Rust toolchain"
        uses: ./.github/actions/install-rust

      - name: "Install: Foundry"
        uses: foundry-rs/foundry-toolchain@v1

      - name: "Show: Versioning"
        run: |
          ./scripts/gear.sh show
          forge --version

      - name: "Build: Init"
        run: ./scripts/gear.sh init cargo

      - name: "Build: Workspace"
        run: cargo build --workspace --all-targets --all-features ${{ matrix.profiles.flags }}

      - name: "ACTIONS: Download node"
        uses: actions/download-artifact@v4
        with:
          name: node-and-runtime-release-x86_64-unknown-linux-gnu
          path: node-and-runtime

      - name: "Test: Pack everything"
        run: |
          mv node-and-runtime target/release   
          cargo nextest archive \
            --archive-file=workspace.tar.zst --zstd-level=6 \
            --workspace --all-targets --all-features ${{ matrix.profiles.flags }}

      - name: "Test: Workspace"
        run: >-
          cargo nextest run --archive-file=workspace.tar.zst --fail-fast 
          -E '
          not package(/fuzz/) and
          not package(gsdk) and
          not package(gcli) and
          not package(gclient) and
          not test(/bench/)
          '

      - name: "ACTIONS: Upload nextest archive"
        uses: actions/upload-artifact@v4
        with:
          name: nextest-workspace-${{ matrix.profiles.name }}
          path: workspace.tar.zst
          retention-days: 1
          overwrite: true
          compression-level: 0

  sdk:
    runs-on: ubuntu-latest
    needs: workspace
    strategy:
      matrix:
        profiles: ${{ fromJson(inputs.profiles) }}
      fail-fast: false
    name: sdk (${{ matrix.profiles.name }})
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4

      - name: "Install: Setup linker"
        uses: ./.github/actions/setup-linker

      - name: "Install: Rust toolchain"
        uses: ./.github/actions/install-rust

      - name: "Install: cargo-nextest"
        run: curl -LsSf https://get.nexte.st/latest/linux | tar zxf - -C ${CARGO_HOME:-~/.cargo}/bin

      - name: "ACTIONS: Download nextest archive"
        uses: actions/download-artifact@v4
        with:
          name: nextest-workspace-${{ matrix.profiles.name }}

      - name: "Test: gsdk tests"
        run: >-
          cargo nextest run --archive-file=workspace.tar.zst -E 'package(gsdk)' --no-fail-fast
          --extract-to=${{ github.workspace }}
          --workspace-remap=${{ github.workspace }}

      - name: "Test: `gcli`"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >-
          cargo nextest run --archive-file=workspace.tar.zst -E 'package(gcli)' --no-fail-fast --retries 3
          --extract-to=${{ github.workspace }}
          --workspace-remap=${{ github.workspace }}

      - name: "Test: Client tests"
        run: >-
          cargo nextest run --archive-file=workspace.tar.zst -E 'package(gclient)' --no-fail-fast
          --extract-to=${{ github.workspace }}
          --workspace-remap=${{ github.workspace }}

  benchmarks:
    runs-on: [ kuberunner, github-runner-02 ]
    needs: workspace
    strategy:
      matrix:
        profiles: ${{ fromJson(inputs.profiles) }}
      fail-fast: false
    name: benchmarks (${{ matrix.profiles.name }})
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4

      - name: "Install: Setup linker"
        uses: ./.github/actions/setup-linker

      - name: "Install: Rust toolchain"
        uses: ./.github/actions/install-rust

      - name: "ACTIONS: Download nextest archive"
        uses: actions/download-artifact@v4
        with:
          name: nextest-workspace-${{ matrix.profiles.name }}

      - name: "Test: Benchmarks in native"
        # fast benchmark tests before long run
        run: cargo nextest --archive-file=workspace.tar.zst bench

      - name: "Test: Benchmarks in WASM"
        # unoptimized benchmarks take a few hours to run
        if: ${{ matrix.profiles.name == 'release' }}
        run: |
          tar xvf workspace.tar.zst target/x86_64-unknown-linux-gnu/release/gear
          cp target/x86_64-unknown-linux-gnu/release/gear ./gear
          
          # check that perf benchmarks works. `--steps=5` need to test, that benchmarks works for different input number.
          ./gear benchmark pallet --chain=dev --pallet="*" --steps=5 --repeat=0 --extrinsic="*" --heap-pages=4096
          # check that read_big_state benchmarks works
          ./gear benchmark pallet --chain=dev --pallet=pallet_gear --repeat=0 --extrinsic="read_big_state" --heap-pages=4096 --extra
          # check that signal_stack_limit_exceeded_works benchmarks works
          ./gear benchmark pallet --chain=dev --pallet=pallet_gear --repeat=0 --extrinsic="signal_stack_limit_exceeded_works" --heap-pages=4096 --extra
          # check that check/test benchmarks works
          ./gear benchmark pallet --chain=dev --pallet=pallet_gear --repeat=0 --extrinsic="check_all" --heap-pages=4096 --extra

      - name: "Test: Syscalls Wasmi integrity"
        run: >-
          cargo nextest --archive-file=workspace.tar.zst 
          -E 'package(pallet-gear)' check_syscalls_integrity --no-fail-fast

  try-runtime:
    runs-on: ubuntu-latest
    needs: workspace
    strategy:
      matrix:
        profiles: ${{ fromJson(inputs.profiles) }}
      fail-fast: false
    name: try-runtime (${{ matrix.profiles.name }})
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4

      - name: "Install: Setup linker"
        uses: ./.github/actions/setup-linker

      - name: "Install: Rust toolchain"
        uses: ./.github/actions/install-rust

      - name: "Test: Try runtime migrations"
        run: |
          echo "---------- Downloading try-runtime CLI ----------"
          
          curl -sL https://github.com/paritytech/try-runtime-cli/releases/download/v0.8.0/try-runtime-x86_64-unknown-linux-musl -o try-runtime
          chmod +x ./try-runtime
          
          
          echo "---------- Creating Vara Mainnet db snapshot [vara_ci.snap] ----------"
          
          time ./try-runtime \
            create-snapshot \
            --uri wss://rpc-private.vara-network.io \
            vara_ci.snap
          
          
          echo "---------- Building Vara Mainnet runtime ----------"
          
          time cargo build -p vara-runtime -F std,try-runtime --locked ${{ matrix.profiles.flags }}
          
          
          echo "---------- Executing on-runtime-upgrade for snapshot ----------"
          
          time ./try-runtime \
            --runtime ./target/${{ matrix.profiles.name }}/wbuild/vara-runtime/vara_runtime.wasm \
            on-runtime-upgrade \
            --blocktime 3000 \
            --checks all \
            --disable-spec-version-check \
            --no-weight-warnings \
            snap -p vara_ci.snap

  fuzzer:
    runs-on: [ kuberunner, github-runner-01 ]
    needs: workspace
    env:
      RUSTFLAGS: "--cfg fuzz"
    steps:
      - name: Cancel Previous Runs
        if: ${{ github.event_name == 'pull_request' }}
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4

      - name: "Install: Setup linker"
        uses: ./.github/actions/setup-linker

      - name: "Install deps"
        run: |
          sudo apt update
          sudo apt install -y xxd

      - name: "MOUNT: Logs path"
        run: |
          FUZZER_LOGS_PATH=/mnt/fuzzer_logs
          sudo mkdir -p $FUZZER_LOGS_PATH
          sudo ln -s $FUZZER_LOGS_PATH/artifacts $PWD/utils/runtime-fuzzer/fuzz/artifacts
          sudo ln -s $FUZZER_LOGS_PATH/proptest-regressions $PWD/utils/runtime-fuzzer/proptest-regressions

      - name: "Install: Rust toolchain"
        uses: ./.github/actions/install-rust

      - name: "Install: cargo-nextest"
        run: curl -LsSf https://get.nexte.st/latest/linux | tar zxf - -C ${CARGO_HOME:-~/.cargo}/bin

      - name: "Install: cargo-fuzz"
        run: cargo install cargo-fuzz

      - name: "Build fuzzer"
        run: ./scripts/gear.sh build fuzz --locked ${{ matrix.profiles.flags }}

      - name: "Run: runtime-fuzzer crate tests"
        run: ./scripts/gear.sh test fuzzer-tests

      - name: "Check: fuzzer competence with mutation test"
        run: ./scripts/check-fuzzer.sh

      - name: "Check: lazy pages fuzzer with smoke test"
        run: ./scripts/check-lazy-pages-fuzzer.sh

      - name: "Log: fuzzer run output"
        if: "!cancelled()"
        run: cat fuzz_run

      - name: "Log: lazy pages fuzzer run output"
        if: "!cancelled()"
        run: cat lazy_pages_fuzz_run

  production:
    runs-on: [ kuberunner, github-runner-02 ]
    needs: workspace
    if: ${{ inputs.production }}
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4

      - name: "Install: Setup linker"
        uses: ./.github/actions/setup-linker

      - name: "Install: Rust toolchain"
        uses: ./.github/actions/install-rust

      - name: "ACTIONS: Download target"
        uses: actions/download-artifact@v4
        with:
          name: target-linux-release
          path: target

      - name: "Build: Production binaries"
        run: cargo build -p wasm-proc -p gear-cli -F cli --profile production

      - name: Prepare artifacts
        run: |
          mkdir -p artifact
          tar czvf artifact/examples.tar.gz target/wasm32-gear/release/*.wasm
          cp target/production/wbuild/vara-runtime/vara_runtime.compact.compressed.wasm artifact/
          cp target/production/wbuild/vara-runtime/vara_runtime.compact.wasm artifact/
          cp target/production/wbuild/vara-runtime/vara_runtime.wasm artifact/
          cp target/production/gear artifact/
          cp target/production/wasm-proc artifact/
          strip artifact/gear || true
          strip artifact/wasm-proc || true

      - name: Upload artifacts
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@v4
        with:
          path: artifact
