name: Win

on: workflow_dispatch

env:
  CARGO_TERM_COLOR: always
  TERM: xterm-256color
  NIGHTLY_TOOLCHAIN_VERSION: ${{ secrets.NIGHTLY_TOOLCHAIN_VERSION }}

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: "Install: Nightly toolchain"
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          targets: wasm32-unknown-unknown

      - name: "Install: Show specific nightly version"
        if: ${{ env.NIGHTLY_TOOLCHAIN_VERSION != '' }}
        run: echo $NIGHTLY_TOOLCHAIN_VERSION | sed 's/-/ - /g'

      - name: "Install: Specific nightly toolchain"
        if: ${{ env.NIGHTLY_TOOLCHAIN_VERSION != '' }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-${{ env.NIGHTLY_TOOLCHAIN_VERSION }}
          targets: wasm32-unknown-unknown
          components: llvm-tools-preview

      - name: "Install: Pin to specific nightly toolchain"
        if: ${{ env.NIGHTLY_TOOLCHAIN_VERSION != '' }}
        run: |
          rm -r $env:USERPROFILE\.rustup\toolchains\nightly-x86_64-pc-windows-msvc
          mv $env:USERPROFILE\.rustup\toolchains\nightly-$env:NIGHTLY_TOOLCHAIN_VERSION-x86_64-pc-windows-msvc $env:USERPROFILE\.rustup\toolchains\nightly-x86_64-pc-windows-msvc

      - name: Setup Rust for Win
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: x86_64-pc-windows-msvc

      - name: Workaround with libclang.dll
        run: Remove-Item -LiteralPath "C:\msys64\" -Force -Recurse

      - name: Install LLVM
        run: choco install llvm -y

      - name: Build
        run: |
          cargo build
          -p gear-cli --release --target x86_64-pc-windows-msvc
