name: Check

on:
  workflow_call:

env:
  TERM: xterm-256color
  RUST_BACKTRACE: short
  RUST_LIB_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CARGO_PROFILE_DEV_DEBUG: 0
  CARGO_PROFILE_TEST_DEBUG: 0
  CARGO_INCREMENTAL: 0
  NEXTEST_PROFILE: ci

jobs:
  unused-deps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: cargo-bins/cargo-binstall@main
      - run: cargo binstall --no-confirm cargo-shear
      - run: cargo shear

  fmt:
    runs-on: ubuntu-latest
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4

      - name: "Install: Rust toolchain"
        uses: ./.github/actions/install-rust

      - name: "Check formatting: Gear"
        run: ./scripts/gear.sh format gear --check

  ethexe-contracts:
    runs-on: ubuntu-latest
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: "Install: Rust toolchain"
        uses: ./.github/actions/install-rust

      - name: "Install: rustup stable"
        run: |
          rustup show
          rustup install 1.88.0

      - name: "Install rust-script"
        run: cargo install rust-script

      - name: "Install: Foundry"
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: v1.3.6

      - name: "Install: Node.js"
        uses: actions/setup-node@v6
        with:
          node-version: 24.x

      - name: "Show: Versioning"
        run: forge --version

      - name: "Check: ethexe contracts"
        run: |
          npm cache clean --force

          # version from ethexe/contracts/lib/openzeppelin-foundry-upgrades/src/internal/Versions.sol
          npx @openzeppelin/upgrades-core@^1.37.0

          forge fmt --check
          forge build --sizes
          forge test -vvv
        working-directory: ethexe/contracts

      - name: "Check: ABI files are updated"
        run: |
          cp ./ethexe/contracts/out/Middleware.sol/Middleware.json ./ethexe/ethereum
          cp ./ethexe/contracts/out/Mirror.sol/Mirror.json ./ethexe/ethereum
          cp ./ethexe/contracts/out/Router.sol/Router.json ./ethexe/ethereum
          cp ./ethexe/contracts/out/TransparentUpgradeableProxy.sol/TransparentUpgradeableProxy.json ./ethexe/ethereum
          cp ./ethexe/contracts/out/WrappedVara.sol/WrappedVara.json ./ethexe/ethereum

          git diff --exit-code ./ethexe/ethereum/*.json || (echo "Some abi files have been modified. Please commit the changes." && exit 1)

      - name: "Check: Clones.sol is updated"
        run: |
          ../scripts/update-clones-sol.rs \
          --mirror-proxy out/MirrorProxy.sol/MirrorProxy.json \
          --clones src/libraries/Clones.sol
          forge fmt
          git diff --exit-code src/libraries/Clones.sol || (echo "Clones.sol has been modified. Please commit the changes." && exit 1)
        working-directory: ethexe/contracts

  clippy:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: macos-aarch64
            target: aarch64-apple-darwin
            runs-on: macos-latest
          - name: macos-x86_64
            target: x86_64-apple-darwin
            runs-on: macos-latest
          - name: linux-x86_64
            target: x86_64-unknown-linux-gnu
            runs-on: ubuntu-24.04-arm
          - name: linux-aarch64
            target: aarch64-unknown-linux-gnu
            runs-on: ubuntu-24.04-arm
          - name: windows-x86_64
            target: x86_64-pc-windows-msvc
            runs-on: ubuntu-24.04-arm
    runs-on: ${{ matrix.runs-on }}
    name: clippy (${{ matrix.name }})
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: "Install: Setup linker"
        uses: ./.github/actions/setup-linker

      - name: "Install: Rust toolchain"
        uses: ./.github/actions/install-rust

      - name: "Install: Compilation environment"
        uses: ./.github/actions/setup-compilation-env
        with:
          target: "${{ matrix.target }}"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "ACTIONS: Setup caching"
        uses: ./.github/actions/rust-cache
        with:
          us-access-key-id: "${{ secrets.GEAR_CI_S3_US_ACCESS_KEY_ID }}"
          us-secret-access-key: "${{ secrets.GEAR_CI_S3_US_SECRET_ACCESS_KEY }}"
          eu-access-key-id: "${{ secrets.GEAR_CI_S3_EU_ACCESS_KEY_ID }}"
          eu-secret-access-key: "${{ secrets.GEAR_CI_S3_EU_SECRET_ACCESS_KEY }}"
          key: "${{ matrix.name }}"

      - name: "Check clippy"
        run: ./scripts/gear.sh clippy gear --all-targets --all-features --locked

  wasm:
    runs-on: ubuntu-latest
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4

      - name: "Install: Setup linker"
        uses: ./.github/actions/setup-linker

      - name: "Install: Rust toolchain"
        uses: ./.github/actions/install-rust

      - name: "Install: Rust stable toolchain"
        uses: dtolnay/rust-toolchain@1.88.0
        with:
          targets: wasm32v1-none

      - name: "ACTIONS: Setup caching"
        uses: ./.github/actions/rust-cache
        with:
          us-access-key-id: "${{ secrets.GEAR_CI_S3_US_ACCESS_KEY_ID }}"
          us-secret-access-key: "${{ secrets.GEAR_CI_S3_US_SECRET_ACCESS_KEY }}"
          eu-access-key-id: "${{ secrets.GEAR_CI_S3_EU_ACCESS_KEY_ID }}"
          eu-secret-access-key: "${{ secrets.GEAR_CI_S3_EU_SECRET_ACCESS_KEY }}"

      - name: "Check: Wasm-builder recommended toolchain matches rust-toolchain.toml"
        run: |
          TOOLCHAIN=$(grep 'channel' rust-toolchain.toml | cut -d '"' -f 2)
          CARGO_TOOLCHAIN="utils/wasm-optimizer/src/cargo_toolchain.rs"
          if ! grep -q "$TOOLCHAIN" $CARGO_TOOLCHAIN; then
            echo "Please update PINNED_NIGHTLY_TOOLCHAIN constant in $CARGO_TOOLCHAIN to match rust-toolchain.toml."
            exit 1
          fi

      - name: "Check clippy: Examples"
        run: ./scripts/gear.sh clippy examples --all-targets --locked

      - name: "Check clippy: no_std crates"
        run: ./scripts/gear.sh clippy no_std --locked

      - run: cargo +1.88.0 check -p gstd --target wasm32v1-none
      - run: cargo +1.88.0 check --manifest-path utils/wasm-builder/test-program/Cargo.toml
      - run: cargo +1.88.0 check --manifest-path utils/cargo-gbuild/test-program/Cargo.toml --workspace --target wasm32v1-none

  vara-runtime-imports:
    runs-on: ubuntu-latest
    needs: [clippy, wasm]
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4

      - name: "Install: Setup linker"
        uses: ./.github/actions/setup-linker

      - name: "Install: Rust toolchain"
        uses: ./.github/actions/install-rust

      - name: "Install: Compilation environment"
        uses: ./.github/actions/setup-compilation-env
        with:
          target: x86_64-unknown-linux-gnu
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "ACTIONS: Setup caching"
        uses: ./.github/actions/rust-cache
        with:
          us-access-key-id: "${{ secrets.GEAR_CI_S3_US_ACCESS_KEY_ID }}"
          us-secret-access-key: "${{ secrets.GEAR_CI_S3_US_SECRET_ACCESS_KEY }}"
          eu-access-key-id: "${{ secrets.GEAR_CI_S3_EU_ACCESS_KEY_ID }}"
          eu-secret-access-key: "${{ secrets.GEAR_CI_S3_EU_SECRET_ACCESS_KEY }}"
          key: "${{ matrix.name }}"

      - name: "Build: Vara runtime and wasm-proc"
        run: cargo build -p vara-runtime -p wasm-proc --release

      - name: "Check: Vara runtime imports"
        run: >-
          ./target/x86_64-unknown-linux-gnu/release/wasm-proc
          --check-runtime-imports
          target/x86_64-unknown-linux-gnu/release/wbuild/vara-runtime/vara_runtime.compact.wasm

  stack-height:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: macos-aarch64
            target: aarch64-apple-darwin
            runs-on: macos-latest
          - name: macos-x86_64
            target: x86_64-apple-darwin
            runs-on: macos-13
          - name: linux-x86_64
            target: x86_64-unknown-linux-gnu
            runs-on: ubuntu-latest
          - name: linux-aarch64
            target: aarch64-unknown-linux-gnu
            runs-on: ubuntu-24.04-arm
          - name: windows-x86_64
            target: x86_64-pc-windows-msvc
            runs-on: windows-latest
    runs-on: ${{ matrix.runs-on }}
    needs: [clippy, wasm]
    name: stack-height (${{ matrix.name }})
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4

      - name: "Install: Setup linker"
        uses: ./.github/actions/setup-linker

      - name: "Install: Rust toolchain"
        uses: ./.github/actions/install-rust

      - name: "ACTIONS: Setup caching"
        uses: ./.github/actions/rust-cache
        with:
          us-access-key-id: "${{ secrets.GEAR_CI_S3_US_ACCESS_KEY_ID }}"
          us-secret-access-key: "${{ secrets.GEAR_CI_S3_US_SECRET_ACCESS_KEY }}"
          eu-access-key-id: "${{ secrets.GEAR_CI_S3_EU_ACCESS_KEY_ID }}"
          eu-secret-access-key: "${{ secrets.GEAR_CI_S3_EU_SECRET_ACCESS_KEY }}"
          key: "${{ matrix.name }}"

      - run: cargo run -p calc-stack-height --release --locked

  gsdk-metadata:
    runs-on: ubuntu-latest
    needs: [clippy, wasm]
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4

      - name: "Install: Setup linker"
        uses: ./.github/actions/setup-linker

      - name: "Install: Rust toolchain"
        uses: ./.github/actions/install-rust

      - name: "Install: Compilation environment"
        uses: ./.github/actions/setup-compilation-env
        with:
          target: x86_64-unknown-linux-gnu
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "ACTIONS: Setup caching"
        uses: ./.github/actions/rust-cache
        with:
          us-access-key-id: "${{ secrets.GEAR_CI_S3_US_ACCESS_KEY_ID }}"
          us-secret-access-key: "${{ secrets.GEAR_CI_S3_US_SECRET_ACCESS_KEY }}"
          eu-access-key-id: "${{ secrets.GEAR_CI_S3_EU_ACCESS_KEY_ID }}"
          eu-secret-access-key: "${{ secrets.GEAR_CI_S3_EU_SECRET_ACCESS_KEY }}"

      - name: "Check: Changes in gsdk generated code"
        run: |
          GENERATED_CODE="gsdk/src/metadata/generated.rs"
          ./scripts/update-gsdk-metadata.sh
          if [[ $(git diff --stat $GENERATED_CODE) != '' ]]; then
            echo "Changes found in the gsdk generated code ($GENERATED_CODE). Please update it following the instructions in \`gsdk/HOW-TO-UPDATE.md\`."
            git --no-pager diff $GENERATED_CODE
            exit 1
          fi
