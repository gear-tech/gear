name: Check

on:
  workflow_call:

env:
  TERM: xterm-256color
  RUST_BACKTRACE: short
  RUST_LIB_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CARGO_PROFILE_DEV_DEBUG: 0
  CARGO_PROFILE_TEST_DEBUG: 0

jobs:
  unused-deps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: bnjbvr/cargo-machete@main

  clippy:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: macos-aarch64
            target: aarch64-apple-darwin
            runs-on: macos-latest
          - name: macos-x86_64
            target: x86_64-apple-darwin
            runs-on: macos-latest
          - name: linux-x86_64
            target: x86_64-unknown-linux-gnu
            runs-on: ubuntu-24.04-arm
          - name: windows-x86_64
            target: x86_64-pc-windows-msvc
            runs-on: ubuntu-24.04-arm
    runs-on: ${{ matrix.runs-on }}
    name: clippy (${{ matrix.name }})
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4

      - name: "Install: Setup linker"
        uses: ./.github/actions/setup-linker

      - name: "Install: Rust toolchain"
        uses: ./.github/actions/install-rust

      - name: "Install: cross-compile environment"
        uses: ./.github/actions/setup-cross-compile
        with:
          target: "${{ matrix.target }}"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "ACTIONS: Setup caching"
        uses: Swatinem/rust-cache@v2
        with:
          key: "${{ matrix.name }}"
          #save-if: ${{ github.ref == 'refs/heads/master' }}
          cache-provider: buildjet

      - name: "Check clippy: Gear"
        run: ./scripts/gear.sh clippy gear --all-targets --all-features --locked

  wasm:
    runs-on: ubuntu-latest
    env:
      CARGO_PROFILE_DEV_DEBUG: 0
      CARGO_PROFILE_TEST_DEBUG: 0
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4

      - name: "Install: Setup linker"
        uses: ./.github/actions/setup-linker

      - name: "Install: Rust toolchain"
        uses: ./.github/actions/install-rust

      - name: "Install: Rust stable toolchain"
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32v1-none

      - name: "ACTIONS: Setup caching"
        uses: Swatinem/rust-cache@v2
        with:
          #save-if: ${{ github.ref == 'refs/heads/master' }}
          cache-provider: buildjet
          workspaces: |
            . -> target
            utils/wasm-builder/test-program -> target
            utils/cargo-gbuild/test-program -> target

      - name: "Check: Wasm-builder recommended toolchain matches rust-toolchain.toml"
        run: |
          TOOLCHAIN=$(grep 'channel' rust-toolchain.toml | cut -d '"' -f 2)
          CARGO_TOOLCHAIN="utils/wasm-optimizer/src/cargo_toolchain.rs"
          if ! grep -q "$TOOLCHAIN" $CARGO_TOOLCHAIN; then
            echo "Please update PINNED_NIGHTLY_TOOLCHAIN constant in $CARGO_TOOLCHAIN to match rust-toolchain.toml."
            exit 1
          fi

      - name: "Check clippy: Examples"
        run: ./scripts/gear.sh clippy examples --all-targets --locked

      - name: "Check clippy: no_std crates"
        run: ./scripts/gear.sh clippy no_std --locked

      - run: cargo +stable check -p gstd --target wasm32v1-none
      - run: cargo +stable check --manifest-path utils/wasm-builder/test-program/Cargo.toml
      - run: cargo +stable check --manifest-path utils/cargo-gbuild/test-program/Cargo.toml --workspace --target wasm32v1-none

  stack-height:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: macos-aarch64
            target: aarch64-apple-darwin
            runs-on: macos-latest
          - name: macos-x86_64
            target: x86_64-apple-darwin
            runs-on: macos-latest
          - name: linux-x86_64
            target: x86_64-unknown-linux-gnu
            runs-on: ubuntu-24.04-arm
          - name: windows-x86_64
            target: x86_64-pc-windows-msvc
            runs-on: ubuntu-24.04-arm
    runs-on: ${{ matrix.runs-on }}
    name: stack-height (${{ matrix.name }})
    env:
      CARGO_PROFILE_DEV_DEBUG: 0
      CARGO_PROFILE_TEST_DEBUG: 0
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4

      - name: "Install: Setup linker"
        uses: ./.github/actions/setup-linker

      - name: "Install: Rust toolchain"
        uses: ./.github/actions/install-rust

      - run: cargo run -p calc-stack-height --target=${{ matrix.target }} --release --locked

  fmt:
    runs-on: ubuntu-latest
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4

      - name: "Install: Rust toolchain"
        uses: ./.github/actions/install-rust

      - name: "Check formatting: Gear"
        run: ./scripts/gear.sh format gear --check

      - name: "Check formatting: Doc"
        run: ./scripts/gear.sh format doc --check

  ethexe-contracts:
    runs-on: ubuntu-latest
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: "Install: Foundry"
        uses: foundry-rs/foundry-toolchain@v1

      - name: "Install: Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: "Show: Versioning"
        run: forge --version

      - name: "Check: ethexe contracts"
        run: |
          npm cache clean --force
          # version from ethexe/contracts/lib/openzeppelin-foundry-upgrades/src/internal/Versions.sol
          npx @openzeppelin/upgrades-core@^1.37.0

          cd ethexe/contracts
          forge fmt --check
          forge build --sizes
          forge test -vvv

  crates-io:
    runs-on: [ kuberunner, github-runner-02 ]
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4

      - name: "Install: Setup linker"
        uses: ./.github/actions/setup-linker

      - name: "Install: Rust stable toolchain"
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32v1-none

      - name: "Check: crates-io packages publishing"
        run: cargo +stable run --release -p crates-io publish --simulate --registry-path /tmp/cargo-http-registry

  gsdk-metadata:
    runs-on: ubuntu-latest
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4

      - name: "Install: Setup linker"
        uses: ./.github/actions/setup-linker

      - name: "Install: Rust toolchain"
        uses: ./.github/actions/install-rust

      - name: "Test: Changes in gsdk generated code"
        run: |
          GENERATED_CODE="gsdk/src/metadata/generated.rs"
          ./scripts/update-gsdk-metadata.sh
          if [[ $(git diff --stat $GENERATED_CODE) != '' ]]; then
            echo "Changes found in the gsdk generated code ($GENERATED_CODE). Please update it following the instructions in \`gsdk/HOW-TO-UPDATE.md\`."
            git --no-pager diff $GENERATED_CODE
            exit 1
          fi

  fuzzer:
    runs-on: [ kuberunner, github-runner-01 ]
    env:
      RUSTFLAGS: "--cfg fuzz"
    steps:
      - name: Cancel Previous Runs
        if: ${{ github.event_name == 'pull_request' }}
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4

      - name: "Install: Setup linker"
        uses: ./.github/actions/setup-linker

      - name: "Install deps"
        run: |
          sudo apt update
          sudo apt install -y xxd

      - name: "MOUNT: Logs path"
        run: |
          FUZZER_LOGS_PATH=/mnt/fuzzer_logs
          sudo mkdir -p $FUZZER_LOGS_PATH
          sudo ln -s $FUZZER_LOGS_PATH/artifacts $PWD/utils/runtime-fuzzer/fuzz/artifacts
          sudo ln -s $FUZZER_LOGS_PATH/proptest-regressions $PWD/utils/runtime-fuzzer/proptest-regressions

      - name: "Install: Rust toolchain"
        uses: ./.github/actions/install-rust

      - name: "Install: cargo-nextest"
        run: curl -LsSf https://get.nexte.st/latest/linux | tar zxf - -C ${CARGO_HOME:-~/.cargo}/bin

      - name: "Install: cargo-fuzz"
        run: cargo install cargo-fuzz

      - name: "Run: runtime-fuzzer crate tests"
        run: ./scripts/gear.sh test fuzzer-tests

      - name: "Check: fuzzer competence with mutation test"
        run: ./scripts/check-fuzzer.sh

      - name: "Check: lazy pages fuzzer with smoke test"
        run: ./scripts/check-lazy-pages-fuzzer.sh

      - name: "Log: fuzzer run output"
        if: "!cancelled()"
        run: cat fuzz_run

      - name: "Log: lazy pages fuzzer run output"
        if: "!cancelled()"
        run: cat lazy_pages_fuzz_run
