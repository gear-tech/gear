name: Check

on:
  workflow_call:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: short
  RUST_LIB_BACKTRACE: 1
  TERM: xterm-256color

jobs:
  unused-deps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: bnjbvr/cargo-machete@main

  clippy:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: macos-aarch64
            target: aarch64-apple-darwin
            runs-on: macos-latest
          - name: macos-x86_64
            target: x86_64-apple-darwin
            runs-on: macos-latest
          - name: linux-x86_64
            target: x86_64-unknown-linux-gnu
            runs-on: ubuntu-latest
          - name: windows-x86_64
            target: x86_64-pc-windows-msvc
            runs-on: windows-latest
    runs-on: ${{ matrix.runs-on }}
    name: clippy (${{ matrix.name }})
    env:
      RUSTUP_HOME: /tmp/rustup_home
      __GEAR_WASM_BUILDER_NO_FEATURES_TRACKING: 1
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4

      - name: "ACTIONS: Setup caching"
        uses: Swatinem/rust-cache@v2
        with:
          key: "${{ matrix.name }}"
          # packages installation for Windows and macOS x86_64 takes too long
          cache-directories: |
            /usr/local/opt
            C:/Users/runneradmin/scoop/apps

      - name: "Install: Set cargo path"
        run: echo "/tmp/cargo/bin" >> $GITHUB_PATH

      - name: "Install: Rust toolchain"
        uses: dsherret/rust-toolchain-file@v1

      - name: "Install: macOS aarch64 packages"
        if: ${{ matrix.name == 'macos-aarch64' }}
        run: |
          brew install protobuf binaryen openssl rocksdb zstd jemalloc
          
          # Do not override include directory: https://github.com/rust-rocksdb/rust-rocksdb/issues/925
          #echo "ROCKSDB_INCLUDE_DIR=/opt/homebrew/opt/rocksdb/include" >> $GITHUB_ENV
          echo "ROCKSDB_LIB_DIR=/opt/homebrew/opt/rocksdb/lib" >> $GITHUB_ENV

          echo "ZSTD_SYS_USE_PKG_CONFIG=1" >> $GITHUB_ENV
          
          echo "JEMALLOC_OVERRIDE=/opt/homebrew/opt/jemalloc/lib/libjemalloc.a" >> $GITHUB_ENV
          
          echo "OPENSSL_NO_VENDOR=1" >> $GITHUB_ENV
          echo "OPENSSL_DIR=/opt/homebrew/opt/openssl" >> $GITHUB_ENV

      - name: "Install: macOS x86_64 packages"
        if: ${{ matrix.name == 'macos-x86_64' }}
        run: |
          rustup target add ${{ matrix.target }}
          echo "CARGO_BUILD_TARGET=${{ matrix.target }}" >> $GITHUB_ENV
          
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
          /usr/local/bin/brew install protobuf binaryen openssl rocksdb zstd jemalloc pkgconf
          
          # Do not override include directory: https://github.com/rust-rocksdb/rust-rocksdb/issues/925
          #echo "ROCKSDB_INCLUDE_DIR=/usr/local/opt/rocksdb/include" >> $GITHUB_ENV
          echo "ROCKSDB_LIB_DIR=/usr/local/opt/rocksdb/lib" >> $GITHUB_ENV

          echo "ZSTD_SYS_USE_PKG_CONFIG=1" >> $GITHUB_ENV
          echo "PKG_CONFIG=/usr/local/bin/pkg-config" >> $GITHUB_ENV
          echo "HOST_PKG_CONFIG_PATH=/opt/homebrew/lib/pkgconfig" >> $GITHUB_ENV
          echo "TARGET_PKG_CONFIG_PATH=/usr/local/lib/pkgconfig" >> $GITHUB_ENV
          
          echo "JEMALLOC_OVERRIDE=/usr/local/opt/jemalloc/lib/libjemalloc.a" >> $GITHUB_ENV
          
          echo "OPENSSL_NO_VENDOR=1" >> $GITHUB_ENV
          echo "OPENSSL_DIR=/usr/local/opt/openssl" >> $GITHUB_ENV
        shell: arch -x86_64 zsh {0}

      - name: "Install: Linux packages"
        if: ${{ matrix.runs-on == 'ubuntu-latest' }}
        run: |
          sudo apt update
          sudo apt install protobuf-compiler binaryen libssl-dev librocksdb-dev libzstd-dev libjemalloc-dev
          
          # Do not override include directory: https://github.com/rust-rocksdb/rust-rocksdb/issues/925
          #echo "ROCKSDB_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "ROCKSDB_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV

          echo "ZSTD_SYS_USE_PKG_CONFIG=1" >> $GITHUB_ENV
          
          echo "JEMALLOC_OVERRIDE=/usr/lib/x86_64-linux-gnu/libjemalloc.a" >> $GITHUB_ENV
          
          echo "OPENSSL_NO_VENDOR=1" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV

      - name: "Install: Windows packages"
        if: ${{ matrix.runs-on == 'windows-latest' }}
        uses: MinoruSekine/setup-scoop@v4.0.1
        with:
          apps: >-
            binaryen
            protobuf
            openssl
            pkg-config
          buckets: extras

      - name: "Install: Windows packages environment"
        if: ${{ matrix.runs-on == 'windows-latest' }}
        run: |
          # Package is not available in choco or scoop
          #echo "ROCKSDB_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          #echo "ROCKSDB_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
          
          # Custom ".pc" is required to be written
          #Add-Content -Path $Env:GITHUB_ENV -Value "ZSTD_SYS_USE_PKG_CONFIG=1"
          
          # Not used on Windows
          #echo "JEMALLOC_OVERRIDE=/usr/lib/x86_64-linux-gnu/libjemalloc.a" >> $GITHUB_ENV
          
          Add-Content -Path $Env:GITHUB_ENV -Value "OPENSSL_NO_VENDOR=1"
          Add-Content -Path $Env:GITHUB_ENV -Value "OPENSSL_DIR=C:\Users\runneradmin\scoop\apps\openssl\current"

      - name: "Install: Linux linker"
        if: ${{ matrix.runs-on == 'ubuntu-latest' }}
        run: |
          sudo apt install mold
          echo "CFLAGS_${{ matrix.target }}=-fuse-ld=mold" >> $GITHUB_ENV
          echo "CXXFLAGS_${{ matrix.target }}=-fuse-ld=mold" >> $GITHUB_ENV
          echo "RUSTFLAGS=-Clink-arg=-fuse-ld=mold" >> $GITHUB_ENV

      - name: "Install: Windows linker"
        if: ${{ matrix.runs-on == 'windows-latest' }}
        run: |
          Add-Content -Path $Env:GITHUB_ENV -Value "CC_${{ matrix.target }}=C:\Program Files\LLVM\bin\clang-cl.exe"
          Add-Content -Path $Env:GITHUB_ENV -Value "CXX_${{ matrix.target }}=C:\Program Files\LLVM\bin\clang-cl.exe"
          Add-Content -Path $Env:GITHUB_ENV -Value "CFLAGS_${{ matrix.target }}=-fuse-ld=lld"
          Add-Content -Path $Env:GITHUB_ENV -Value "CXXFLAGS_${{ matrix.target }}=-fuse-ld=lld /EHsc"
          Add-Content -Path $Env:GITHUB_ENV -Value "RUSTC_LINKER=rust-lld"

      - name: "Check clippy: Gear"
        run: ./scripts/gear.sh clippy gear --all-targets --all-features --locked
        shell: bash

  clippy-wasm:
    runs-on: ubuntu-latest
    env:
      RUSTUP_HOME: /tmp/rustup_home
      __GEAR_WASM_BUILDER_NO_FEATURES_TRACKING: 1
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4

      - name: "ACTIONS: Setup caching"
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            . -> target
            utils/wasm-builder/test-program -> target
            utils/cargo-gbuild/test-program -> target

      - name: "Install: Set cargo path"
        run: echo "/tmp/cargo/bin" >> $GITHUB_PATH

      - name: "Install: Rust toolchain"
        uses: dsherret/rust-toolchain-file@v1

      - name: "Install: Rust stable toolchain"
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32v1-none

      - name: "Check clippy: Examples"
        run: ./scripts/gear.sh clippy examples --all-targets --locked

      - run: cargo +stable check -p gstd --target wasm32v1-none
      - run: cargo +stable check --manifest-path utils/wasm-builder/test-program/Cargo.toml
      - run: cargo +stable check --manifest-path utils/cargo-gbuild/test-program/Cargo.toml --workspace --target wasm32v1-none

  linux:
    runs-on: [kuberunner, github-runner-01]
    env:
      RUSTUP_HOME: /tmp/rustup_home
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: "Install: Set cargo path"
        run: echo "/tmp/cargo/bin" >> $GITHUB_PATH

      - name: "Install: Rust toolchain"
        uses: dsherret/rust-toolchain-file@v1

      - name: "Install: Foundry"
        uses: foundry-rs/foundry-toolchain@v1

      - name: "Install: Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: "Show: Versioning"
        run: |
          ./scripts/gear.sh show
          forge --version

      - name: "Check: ethexe contracts"
        run: |
          npm cache clean --force
          # version from ethexe/contracts/lib/openzeppelin-foundry-upgrades/src/internal/Versions.sol
          npx @openzeppelin/upgrades-core@^1.37.0

          cd ethexe/contracts
          forge fmt --check
          forge build --sizes
          forge test -vvv

      - name: "Check formatting: Gear"
        run: ./scripts/gear.sh format gear --check

      - name: "Check formatting: Doc"
        run: ./scripts/gear.sh format doc --check

      - name: "Test: Doc tests"
        run: ./scripts/gear.sh test docs

      - name: "Test: Changes in gsdk generated code"
        run: |
          GENERATED_CODE="gsdk/src/metadata/generated.rs"
          ./scripts/update-gsdk-metadata.sh
          if [[ $(git diff --stat $GENERATED_CODE) != '' ]]; then
            echo "Changes found in the gsdk generated code ($GENERATED_CODE). Please update it following the instructions in \`gsdk/HOW-TO-UPDATE.md\`."
            git --no-pager diff $GENERATED_CODE
            exit 1
          fi

      - name: "Test: Wasm-builder recommended toolchain matches rust-toolchain.toml"
        run: |
          TOOLCHAIN=$(grep 'channel' rust-toolchain.toml | cut -d '"' -f 2)
          CARGO_TOOLCHAIN="utils/wasm-optimizer/src/cargo_toolchain.rs"
          if ! grep -q "$TOOLCHAIN" $CARGO_TOOLCHAIN; then
            echo "Please update PINNED_NIGHTLY_TOOLCHAIN constant in $CARGO_TOOLCHAIN to match rust-toolchain.toml."
            exit 1
          fi

      - name: "Install: Rust stable toolchain"
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32v1-none

      - name: "Check: crates-io packages publishing"
        run: cargo +stable run --release -p crates-io publish --simulate --registry-path /tmp/cargo-http-registry

  fuzzer:
    runs-on: [kuberunner, github-runner-01]
    env:
      RUSTUP_HOME: /tmp/rustup_home
      RUSTFLAGS: "--cfg fuzz"
    steps:
      - name: Cancel Previous Runs
        if: ${{ github.event_name == 'pull_request' }}
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4

      - name: "Install deps"
        run: |
          sudo apt update
          sudo apt install -y xxd

      - name: "MOUNT: Logs path"
        run: |
          FUZZER_LOGS_PATH=/mnt/fuzzer_logs
          sudo mkdir -p $FUZZER_LOGS_PATH
          sudo ln -s $FUZZER_LOGS_PATH/artifacts $PWD/utils/runtime-fuzzer/fuzz/artifacts
          sudo ln -s $FUZZER_LOGS_PATH/proptest-regressions $PWD/utils/runtime-fuzzer/proptest-regressions

      - name: "Install: Set cargo path"
        run: echo "/tmp/cargo/bin" >> $GITHUB_PATH

      - name: "Install: Rust toolchain"
        uses: dsherret/rust-toolchain-file@v1

      - name: "Install: cargo-nextest"
        run: curl -LsSf https://get.nexte.st/latest/linux | tar zxf - -C ${CARGO_HOME:-~/.cargo}/bin

      - name: "Install: cargo-fuzz"
        run: cargo install cargo-fuzz

      - name: "Run: runtime-fuzzer crate tests"
        run: ./scripts/gear.sh test fuzzer-tests

      - name: "Check: fuzzer competence with mutation test"
        run: ./scripts/check-fuzzer.sh

      - name: "Check: lazy pages fuzzer with smoke test"
        run: ./scripts/check-lazy-pages-fuzzer.sh

      - name: "Log: fuzzer run output"
        if: "!cancelled()"
        run: cat fuzz_run

      - name: "Log: lazy pages fuzzer run output"
        if: "!cancelled()"
        run: cat lazy_pages_fuzz_run
