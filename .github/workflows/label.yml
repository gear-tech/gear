name: Label

on:
  pull_request:
    branches: [master, vara-stage-1, vara-stage-2, vara-stage-3]
    types: [labeled]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  status:
    runs-on: ubuntu-latest
    if: github.event.label.name == 'A0-pleasereview' || github.event.label.name == 'E2-forcemacos'
    outputs:
      build: ${{ steps.label-checks.outputs.build }}
      linux: ${{ steps.label-checks.outputs.linux }}
      win: ${{ steps.label-checks.outputs.win }}
      macos: ${{ steps.label-checks.outputs.macos }}
    steps:
      - uses: actions/github-script@v6
        id: label-checks
        with:
          script: |
            const [owner, repo] = ["gear-tech", "gear"];
            const { ref, payload: { number: issue_number } } = context;

            // List all labels of the current pull request.
            const { data: labelsArr } = await github.rest.issues.listLabelsOnIssue({
              owner,
              repo,
              issue_number,
            });
            const labels = labelsArr.map((label) => label.name);

            let [linux, macos] = [
              labels.includes("A0-pleasereview"),
              labels.includes("E2-forcemacos")
            ];

            if (!(linux || macos)) return;

            // List the latest check runs
            const {
              data: { check_runs }
            } = await github.rest.checks.listForRef({
              owner,
              repo,
              ref,
            });

            for (run of check_runs) {
              if (run.name === "build / linux") {
                 linux = false;
              } else if (run.name === "build / macos-86") {
                 macos = false;
              }
            }

            core.setOutput("build", linux || macos);
            core.setOutput("linux", linux);
            core.setOutput("win", linux);
            core.setOutput("macos", macos)

  build:
    needs: status
    uses: ./.github/workflows/build.yml
    if: ${{ needs.status.outputs.build }}
    with:
      cache: true
      linux: ${{ fromJSON(needs.status.outputs.linux) }}
      win: ${{ fromJSON(needs.status.outputs.win) }}
      macos: ${{ fromJSON(needs.status.outputs.macos) }}
