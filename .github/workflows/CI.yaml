name: CI

on:
  schedule:
    - cron: "0 3 * * *"
  push:
    branches: [master, vara-stage-1, vara-stage-2, vara-stage-3]
  pull_request:
    branches: [master, vara-stage-1, vara-stage-2, vara-stage-3]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  TERM: xterm-256color
  NIGHTLY_TOOLCHAIN_VERSION: ${{ secrets.NIGHTLY_TOOLCHAIN_VERSION }}

jobs:
  spec_version:
    runs-on: [self-hosted, cachepot, epyc]
    steps:
      - name: Cancel Previous Runs
        if: ${{ github.event_name == 'pull_request' }}
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v3

      - name: "Fetch origin"
        run: git fetch origin

      - name: "Check spec version"
        if: ${{ ! contains(github.event.pull_request.labels.*.name, 'A4-insubstantial') }}
        run: ./scripts/check-spec.sh

  check:
    needs: spec_version
    runs-on: [self-hosted, cachepot, epyc]
    env:
      RUSTUP_HOME: /tmp/rustup_home
    steps:
      - name: Cancel Previous Runs
        if: ${{ github.event_name == 'pull_request' }}
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v3

      - name: "Install: Set cargo path"
        run: echo "/tmp/cargo/bin" >> $GITHUB_PATH

      - name: "Install: Nightly toolchain"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: clippy, rustfmt
          target: wasm32-unknown-unknown

      - name: "Install: Show specific nightly version"
        if: ${{ env.NIGHTLY_TOOLCHAIN_VERSION != '' }}
        run: echo $NIGHTLY_TOOLCHAIN_VERSION | sed 's/-/ - /g'

      - name: "Install: Specific nightly toolchain"
        if: ${{ env.NIGHTLY_TOOLCHAIN_VERSION != '' }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-${{ env.NIGHTLY_TOOLCHAIN_VERSION }}
          target: wasm32-unknown-unknown
          components: llvm-tools-preview

      - name: "Install: Pin to specific nightly toolchain"
        if: ${{ env.NIGHTLY_TOOLCHAIN_VERSION != '' }}
        run: |
          rm -rf $RUSTUP_HOME/toolchains/nightly-x86_64-unknown-linux-gnu
          ln -s $RUSTUP_HOME/toolchains/nightly-$NIGHTLY_TOOLCHAIN_VERSION-x86_64-unknown-linux-gnu $RUSTUP_HOME/toolchains/nightly-x86_64-unknown-linux-gnu

      - name: "Install: Build deps"
        run: |
          sudo apt update
          sudo apt install -y git clang curl libssl-dev llvm libudev-dev cmake
          sudo wget -c https://github.com/WebAssembly/binaryen/releases/download/version_105/binaryen-version_105-x86_64-linux.tar.gz -O - | sudo tar -xz -C .
          cp binaryen-version_105/bin/wasm-opt /usr/bin/

      - name: "Cache: Unpack"
        if: ${{ github.event_name == 'pull_request' }}
        continue-on-error: true
        run: |
          tar -xf /root/cache/check_cache_${{ github.base_ref }}.tar -C /
          tar -xf /root/cache/check_cargo_registry_${{ github.base_ref }}.tar -C /
          tar -xf /root/cache/check_target_${{ github.base_ref }}.tar

      - name: "Check formatting: Gear"
        run: ./scripts/gear.sh format gear --check

      - name: "Check formatting: Examples"
        run: ./scripts/gear.sh format examples --check

      - name: "Check formatting: Doc"
        run: ./scripts/gear.sh format doc --check

      - name: "Check clippy: Gear"
        run: ./scripts/gear.sh clippy gear --all-targets --all-features

      - name: "Check clippy: Examples"
        run: ./scripts/gear.sh clippy examples

      - name: "Cache: Pack"
        if: ${{ github.event_name == 'push' }}
        continue-on-error: true
        run: |
          tar -cf /tmp/check_target_${{ github.ref_name }}.tar ./target
          tar -cf /tmp/check_cache_${{ github.ref_name }}.tar /tmp/cachepot
          tar -cf /tmp/check_cargo_registry_${{ github.ref_name }}.tar /tmp/cargo/bin /tmp/cargo/registry/cache /tmp/cargo/registry/index /tmp/cargo/git
          mv /tmp/*.tar /root/cache/

  build:
    needs: spec_version
    runs-on: [self-hosted, cachepot, epyc]
    env:
      LLVM_PROFILE_FILE: "gear-%p-%m.profraw"
      RUSTUP_HOME: /tmp/rustup_home
    steps:
      - name: Cancel Previous Runs
        if: ${{ github.event_name == 'pull_request' }}
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v3

      - name: "Install: Set cargo path"
        run: echo "/tmp/cargo/bin" >> $GITHUB_PATH

      - name: "Install: Nightly toolchain"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown
          components: llvm-tools-preview

      - name: "Install: Show specific nightly version"
        if: ${{ env.NIGHTLY_TOOLCHAIN_VERSION != '' }}
        run: echo $NIGHTLY_TOOLCHAIN_VERSION | sed 's/-/ - /g'

      - name: "Install: Specific nightly toolchain"
        if: ${{ env.NIGHTLY_TOOLCHAIN_VERSION != '' }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-${{ env.NIGHTLY_TOOLCHAIN_VERSION }}
          target: wasm32-unknown-unknown
          components: llvm-tools-preview

      - name: "Install: Pin to specific nightly toolchain"
        if: ${{ env.NIGHTLY_TOOLCHAIN_VERSION != '' }}
        run: |
          rm -rf $RUSTUP_HOME/toolchains/nightly-x86_64-unknown-linux-gnu
          ln -s $RUSTUP_HOME/toolchains/nightly-$NIGHTLY_TOOLCHAIN_VERSION-x86_64-unknown-linux-gnu $RUSTUP_HOME/toolchains/nightly-x86_64-unknown-linux-gnu

      - name: "Install: Node.js"
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: "Show: Versioning"
        run: ./scripts/gear.sh show

      - name: "Install: Node.js packages"
        run: ./scripts/gear.sh init js

      - name: "Install: Build deps"
        run: |
          sudo apt update
          sudo apt install -y git clang curl libssl-dev llvm libudev-dev cmake wabt
          sudo wget -c https://github.com/WebAssembly/binaryen/releases/download/version_105/binaryen-version_105-x86_64-linux.tar.gz -O - | sudo tar -xz -C .
          cp binaryen-version_105/bin/wasm-opt /usr/bin/

      - name: "Install: grcov"
        run: |
          curl https://api.github.com/repos/mozilla/grcov/releases/latest |
          grep -wo "https.*x86_64.*linux-gnu.*tar\.bz2" |
          xargs curl -L |
          tar xj

      - name: "Install: rust-covfix"
        run: |
          curl -L https://github.com/Kogia-sima/rust-covfix/releases/download/v0.2.2/rust-covfix-linux-x86_64.tar.xz | tar Jxf -
          mv rust-covfix-linux-x86_64/rust-covfix ./

      - name: "Cache: Unpack"
        if: ${{ github.event_name == 'pull_request' }}
        continue-on-error: true
        run: |
          [ -d /root/cache/${{ github.event.pull_request.number }} ] && { tar -xf /root/cache/${{ github.event.pull_request.number }}/build_cache.tar -C /; tar -xf /root/cache/${{ github.event.pull_request.number }}/build_cargo_registry.tar -C /; tar -xf /root/cache/${{ github.event.pull_request.number }}/build_target.tar; }
          [ ! -d /root/cache/${{ github.event.pull_request.number }} ] && { tar -xf /root/cache/build_cache_${{ github.base_ref }}.tar -C /; tar -xf /root/cache/build_cargo_registry_${{ github.base_ref }}.tar -C /; tar -xf /root/cache/build_target_${{ github.base_ref }}.tar; }

      - name: "Build: Gear"
        run: ./scripts/gear.sh build gear --locked --release
        env:
          RUSTFLAGS: -Cinstrument-coverage

      - name: "Build: WAT examples"
        run: ./scripts/gear.sh build wat-examples

      - name: Check runtime imports
        run: ./target/release/wasm-proc --check-runtime-imports --path target/release/wbuild/gear-runtime/gear_runtime.wasm

      - name: "Build: Examples (WASM)"
        run: ./scripts/gear.sh build examples --locked

      - name: "Build: Split examples by .opt and .meta"
        run: ./scripts/gear.sh build examples-proc

      - name: "Test: Gear pallet tests with lazy pages"
        run: |
          cargo test -p pallet-gear --features=lazy-pages --release --locked
          cargo test -p pallet-gear-debug --features=lazy-pages --release --locked
          cargo test -p pallet-gear-payment --features=lazy-pages --release --locked

      - name: "Test: Gear workspace"
        run: ./scripts/gear.sh test gear --release --locked
        env:
          RUSTFLAGS: -Cinstrument-coverage

      - name: "Test (performance): pallets"
        if: ${{ github.ref != 'refs/heads/master' }}
        id: test-performance-pallets
        run: |
          cp /root/cache/pallet-tests.json /tmp/
          ./target/release/regression-analysis compare --data-path /tmp/pallet-tests.json --current-junit-path ./target/nextest/ci/junit.xml > ./target/pallet-tests-diff.md
          body="$(cat ./target/pallet-tests-diff.md)"
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          body="${body//$'\r'/'%0D'}"
          echo "::set-output name=body::$body"

      - name: "Test: JS metadata"
        run: ./scripts/gear.sh test js
        env:
          RUSTFLAGS: -Cinstrument-coverage

      - name: "Test: Process gear-test"
        run: ./scripts/gear.sh test gtest

      - name: "Test: Process node runtime testsuite"
        run: ./scripts/gear.sh test rtest

      - name: "Test: runtime spec tests no lazy pages"
        run: |
          cargo build -p gear-node --release --no-default-features --features=gear-native --out-dir target-no-lazy -Z unstable-options
          ./target-no-lazy/gear-node runtime-spec-tests ./gear-test/spec/*

      - name: "Test (performance): node runtime testsuite"
        if: ${{ github.ref != 'refs/heads/master' }}
        id: test-performance-runtime
        run: |
          cp /root/cache/runtime-tests.json /tmp/
          ./target/release/regression-analysis compare --disable-filter --data-path /tmp/runtime-tests.json --current-junit-path ./target/runtime-test-junit.xml > ./target/runtime-tests-diff.md
          body="$(cat ./target/runtime-tests-diff.md)"
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          body="${body//$'\r'/'%0D'}"
          echo "::set-output name=body::$body"

      - name: "Test: Runtime upgrade and queue processing"
        run: ./scripts/gear.sh test runtime-upgrade

      - name: "Test: Weight on client for loop"
        run: ./scripts/gear.sh test client-weights

      - name: "Test: Runtime benchmarks work"
        run: |
          cargo build -p gear-node --release --features runtime-benchmarks
          ./target/release/gear-node benchmark pallet --chain=dev --steps=1 --repeat=1 --pallet=pallet_gear --extrinsic="*" --execution=wasm --wasm-execution=compiled --heap-pages=4096

      - name: Find comment (performance)
        uses: peter-evans/find-comment@v2
        if: ${{ github.ref != 'refs/heads/master' }}
        id: find_comment_id
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          direction: last

      - name: "Create comment (performance)"
        uses: peter-evans/create-or-update-comment@v2
        if: github.ref != 'refs/heads/master' && steps.find_comment_id.outputs.comment-id == ''
        continue-on-error: true
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            <details><summary>${{ github.event.pull_request.head.sha }}</summary>
            <details><summary>Pallet tests (values are in nanoseconds)</summary>

            ${{ steps.test-performance-pallets.outputs.body }}
            </details>

            <details><summary>Runtime tests (values are in nanoseconds)</summary>

            ${{ steps.test-performance-runtime.outputs.body }}
            </details>
            </details>

      - name: "Update comment (performance)"
        uses: peter-evans/create-or-update-comment@v2
        if: steps.find_comment_id.outputs.comment-id != ''
        continue-on-error: true
        with:
          comment-id: ${{ steps.find_comment_id.outputs.comment-id }}
          body: |
            <details><summary>${{ github.event.pull_request.head.sha }}</summary>
            <details><summary>Pallet tests (values are in nanoseconds)</summary>

            ${{ steps.test-performance-pallets.outputs.body }}
            </details>

            <details><summary>Runtime tests (values are in nanoseconds)</summary>

            ${{ steps.test-performance-runtime.outputs.body }}
            </details>
            </details>

      - name: "Coverage: Aggregate"
        run: >-
          ./grcov . --binary-path ./target/release/ -s . -t lcov --branch --ignore-not-existing
          --ignore "/*"
          --ignore "examples/*"
          --ignore "utils/*"
          --ignore "target/*"
          --ignore "gear-test/*"
          --ignore "node/*"
          --ignore "pallets/gear/src/migration.rs"
          --ignore "pallets/gear/src/weights.rs"
          --ignore "pallets/gear-debug/src/weights.rs"
          --ignore "pallets/gear-messenger/src/migration.rs"
          --ignore "pallets/gear-program/src/migration.rs"
          --ignore "pallets/gear-program/src/weights/*"
          --ignore "pallets/usage/src/weights.rs"
          --ignore "pallets/usage/src/migration.rs"
          --ignore "runtime/*"
          --ignore "gcore/*"
          --ignore "gstd/*"
          --ignore "galloc/*"
          --ignore "common/codegen/*"
          -o ./lcov.info

      - name: "Coverage: Fix report"
        run: ./rust-covfix -o lcov.info lcov.info

      - name: "Coverage: Publish"
        uses: codecov/codecov-action@v1
        with:
          file: ./lcov.info

      - name: "Build: Production binaries"
        if: github.event_name == 'push'
        run: cargo build -p gear-node --profile production

      - name: "Cache: Pack"
        if: ${{ github.event_name == 'push' }}
        continue-on-error: true
        run: |
          tar -cf /tmp/build_target_${{ github.ref_name }}.tar ./target
          tar -cf /tmp/build_cache_${{ github.ref_name }}.tar /tmp/cachepot
          tar -cf /tmp/build_cargo_registry_${{ github.ref_name }}.tar /tmp/cargo/bin /tmp/cargo/registry/cache /tmp/cargo/registry/index /tmp/cargo/git
          mv /tmp/*.tar /root/cache/

      - name: "Cache: Pack to temp"
        if: ${{ github.event_name == 'pull_request' }}
        continue-on-error: true
        run: |
          tar -cf /tmp/build_target.tar ./target
          tar -cf /tmp/build_cache.tar /tmp/cachepot
          tar -cf /tmp/build_cargo_registry.tar /tmp/cargo/bin /tmp/cargo/registry/cache /tmp/cargo/registry/index /tmp/cargo/git
          mkdir -p /root/cache/${{ github.event.pull_request.number }} && mv /tmp/*.tar /root/cache/${{ github.event.pull_request.number }}/

      - name: Prepare artifacts
        if: github.event_name == 'push'
        run: |
          mkdir -p artifact
          cd target/wasm32-unknown-unknown/release
          tar czvf ../../../artifact/examples.tar.gz *.wasm
          cd ../../..
          cp target/production/wbuild/gear-runtime/gear_runtime.compact.compressed.wasm artifact/
          cp target/production/wbuild/gear-runtime/gear_runtime.compact.wasm artifact/
          cp target/production/wbuild/gear-runtime/gear_runtime.wasm artifact/
          cp target/production/gear-node artifact/
          cp target/release/gear-test artifact/
          cp target/release/wasm-proc artifact/
          strip artifact/gear-node || true
          strip artifact/gear-test || true
          strip artifact/wasm-proc || true

      - name: Upload artifacts
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v2
        with:
          path: artifact

  build-win:
    if: github.ref == 'refs/heads/master'
    needs: spec_version
    runs-on: ci-win
    env:
      RUSTC_WRAPPER: "cachepot"
      CARGO_INCREMENTAL: 0
    steps:
      - name: Cancel Previous Runs
        if: ${{ github.event_name == 'pull_request' }}
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v2

      - name: "Install: rustup 1.24.3"
        run: |
          Invoke-WebRequest "https://static.rust-lang.org/rustup/archive/1.24.3/x86_64-pc-windows-msvc/rustup-init.exe" -OutFile "rustup-init.exe"
          .\rustup-init.exe -y
          rustup --version

      - name: "Install: Disable rustup auto-update"
        run: rustup set auto-self-update disable

      - name: "Install: Nightly toolchain"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown

      - name: "Install: cargo-nextest"
        run: |
          $tmp = New-TemporaryFile | Rename-Item -NewName { $_ -replace 'tmp$', 'zip' } -PassThru
          Invoke-WebRequest -OutFile $tmp https://get.nexte.st/latest/windows
          $outputDir = if ($Env:CARGO_HOME) { Join-Path $Env:CARGO_HOME "bin" } else { "~/.cargo/bin" }
          $tmp | Expand-Archive -DestinationPath $outputDir -Force
          $tmp | Remove-Item

      - name: "Build: Node"
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p gear-node --features=lazy-pages

      - name: "Test: Lazy pages"
        uses: actions-rs/cargo@v1
        with:
          command: nextest
          args: >-
            run
            -p pallet-gear
            -p pallet-gear-debug
            -p pallet-gear-payment
            -p gear-lazy-pages
            -p gear-runtime-interface
            --features=lazy-pages

  upload:
    if: github.event_name == 'push' && github.ref_name == 'master'
    runs-on: self-hosted
    needs: build
    steps:
      - name: Cancel Previous Runs
        if: ${{ github.event_name == 'pull_request' }}
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Delete previous release
        uses: dev-drprasad/delete-tag-and-release@v0.1.3
        with:
          delete_release: true
          tag_name: build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Sleep
        run: sleep 10

      - name: Upload
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: true
          tag_name: build
          draft: false
          fail_on_unmatched_files: true
          files: artifact/*
