name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  CARGO_TERM_COLOR: always
  TERM: xterm-256color

jobs:
  spec_version:
    runs-on: [self-hosted, cachepot]
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v1

      - name: "Check spec version"
        if: ${{ ! contains(github.event.pull_request.labels.*.name, 'A4-insubstantial') }}
        run: ./scripts/check-spec.sh

  check:
    needs: spec_version
    runs-on: [self-hosted, cachepot]
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v2

      - name: "Install: Set cargo path"
        run: echo "/tmp/cargo/bin" >> $GITHUB_PATH

      - name: "Install: Nightly toolchain"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: clippy, rustfmt
          target: wasm32-unknown-unknown

      - name: "Install: Build deps"
        run: |
          sudo apt update
          sudo apt install -y git clang curl libssl-dev llvm libudev-dev cmake
          sudo wget -c https://github.com/WebAssembly/binaryen/releases/download/version_105/binaryen-version_105-x86_64-linux.tar.gz -O - | sudo tar -xz -C .
          cp binaryen-version_105/bin/wasm-opt /usr/bin/

      - name: "Cache: Unpack"
        if: ${{ github.ref != 'refs/heads/master' }}
        continue-on-error: true
        run: |
          cp /root/cache/check* /tmp/
          tar -xf /tmp/check_cache.tar -C /
          tar -xf /tmp/check_cargo_registry.tar -C /
          tar -xf /tmp/check_target.tar

      - name: "Check formatting: Gear"
        run: ./scripts/gear.sh format gear --check

      - name: "Check formatting: Examples"
        run: ./scripts/gear.sh format examples --check

      - name: "Check formatting: Doc"
        run: ./scripts/gear.sh format doc --check

      - name: "Check clippy: Gear"
        run: ./scripts/gear.sh clippy gear --all-targets --all-features

      - name: "Check clippy: Examples"
        run: ./scripts/gear.sh clippy examples

      - name: "Cache: Pack"
        if: ${{ github.ref == 'refs/heads/master' }}
        continue-on-error: true
        run: |
          tar -cf /tmp/check_target.tar ./target
          tar -cf /tmp/check_cache.tar /tmp/cachepot
          tar -cf /tmp/check_cargo_registry.tar /tmp/cargo/registry/cache /tmp/cargo/registry/index /tmp/cargo/git
          mv /tmp/*.tar /root/cache/

  build:
    needs: spec_version
    runs-on: [self-hosted, cachepot]
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v2

      - name: "Install: Set cargo path"
        run: echo "/tmp/cargo/bin" >> $GITHUB_PATH

      - name: "Install: Nightly toolchain"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown

      - name: "Install: Node.js"
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: "Show: Versioning"
        run: ./scripts/gear.sh show

      - name: "Install: Node.js packages"
        run: ./scripts/gear.sh init js

      - name: "Install: Build deps"
        run: |
          sudo apt update
          sudo apt install -y git clang curl libssl-dev llvm libudev-dev cmake
          sudo wget -c https://github.com/WebAssembly/binaryen/releases/download/version_105/binaryen-version_105-x86_64-linux.tar.gz -O - | sudo tar -xz -C .
          cp binaryen-version_105/bin/wasm-opt /usr/bin/

      - name: "Cache: Unpack"
        if: ${{ github.ref != 'refs/heads/master' }}
        continue-on-error: true
        run: |
          cp /root/cache/build* /tmp/
          tar -xf /tmp/build_cache.tar -C /
          tar -xf /tmp/build_cargo_registry.tar -C /
          tar -xf /tmp/build_target.tar

      - name: "Build: Gear"
        run: ./scripts/gear.sh build gear --release --locked

      - name: "Build: Examples (WASM)"
        run: ./scripts/gear.sh build examples --locked

      - name: "Build: Split examples by .opt and .meta"
        run: ./scripts/gear.sh build examples-proc

      - name: "Test: Gear workspace"
        run: ./scripts/gear.sh test gear --release

      - name: "Test: JS metadata"
        run: ./scripts/gear.sh test js

      - name: "Test: Process node runtime testsuite"
        run: ./scripts/gear.sh test rtest

      - name: "Test: Runtime upgrade and queue processing"
        run: ./scripts/gear.sh test runtime-upgrade

      - name: "Cache: Pack"
        if: ${{ github.ref == 'refs/heads/master' }}
        continue-on-error: true
        run: |
          tar -cf /tmp/build_target.tar ./target
          tar -cf /tmp/build_cache.tar /tmp/cachepot
          tar -cf /tmp/build_cargo_registry.tar /tmp/cargo/registry/cache /tmp/cargo/registry/index /tmp/cargo/git
          mv /tmp/*.tar /root/cache/

      - name: Prepare artifacts
        if: github.event_name == 'push'
        run: |
          mkdir -p artifact
          cd target/wasm32-unknown-unknown/release
          tar czvf ../../../artifact/examples.tar.gz *.wasm
          cd ../../..
          cp target/release/wbuild/gear-runtime/gear_runtime.compact.compressed.wasm artifact/
          cp target/release/wbuild/gear-runtime/gear_runtime.compact.wasm artifact/
          cp target/release/wbuild/gear-runtime/gear_runtime.wasm artifact/
          cp target/release/gear-node artifact/
          cp target/release/gear-test artifact/
          cp target/release/wasm-proc artifact/
          strip artifact/gear-node || true
          strip artifact/gear-test || true
          strip artifact/wasm-proc || true

      - name: Upload artifacts
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v2
        with:
          path: artifact

  upload:
    if: github.event_name == 'push'
    runs-on: self-hosted
    needs: build
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Delete previous release
        uses: dev-drprasad/delete-tag-and-release@v0.1.3
        with:
          delete_release: true
          tag_name: build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Sleep
        run: sleep 10

      - name: Upload
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: true
          tag_name: build
          draft: false
          fail_on_unmatched_files: true
          files: artifact/*

  gtest:
    needs: spec_version
    runs-on: [self-hosted, cachepot]
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v2

      - name: "Install: Set cargo path"
        run: echo "/tmp/cargo/bin" >> $GITHUB_PATH

      - name: "Install: Nightly toolchain"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown

      - name: "Install: Node.js"
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: "Show: Versioning"
        run: ./scripts/gear.sh show

      - name: "Install: Build deps"
        run: |
          sudo apt update
          sudo apt install -y git clang curl libssl-dev llvm libudev-dev cmake
          sudo wget -c https://github.com/WebAssembly/binaryen/releases/download/version_105/binaryen-version_105-x86_64-linux.tar.gz -O - | sudo tar -xz -C .
          cp binaryen-version_105/bin/wasm-opt /usr/bin/

      - name: "Cache: Unpack"
        if: ${{ github.ref != 'refs/heads/master' }}
        continue-on-error: true
        run: |
          cp /root/cache/gear-test* /tmp/
          tar -xf /tmp/gear-test_cache.tar -C /
          tar -xf /tmp/gear-test_cargo_registry.tar -C /
          tar -xf /tmp/gear-test_target.tar

      - name: "Install: Node.js packages"
        run: ./scripts/gear.sh init js

      - name: "Build: Split examples by .opt and .meta"
        run: ./scripts/gear.sh build wasm-proc

      - name: "Build: Examples (WASM)"
        run: ./scripts/gear.sh build examples --locked

      - name: "Build: Split examples by .opt and .meta"
        run: ./scripts/gear.sh build examples-proc

      - name: "Test: Process gear-test"
        run: ./scripts/gear.sh test gtest

      - name: "Cache: Pack"
        if: ${{ github.ref == 'refs/heads/master' }}
        continue-on-error: true
        run: |
          tar -cf /tmp/gear-test_target.tar ./target
          tar -cf /tmp/gear-test_cache.tar /tmp/cachepot
          tar -cf /tmp/gear-test_cargo_registry.tar /tmp/cargo/registry/cache /tmp/cargo/registry/index /tmp/cargo/git
          mv /tmp/*.tar /root/cache/
          
  coverage:
    needs: spec_version
    runs-on: [self-hosted, cachepot]
    env:
      LLVM_PROFILE_FILE: "gear-%p-%m.profraw"
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v2
        
      - name: "Install: Set cargo path"
        run: echo "/tmp/cargo/bin" >> $GITHUB_PATH

      - name: "Install: Nightly toolchain"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown
          components: llvm-tools-preview

      - name: "Install: Node.js"
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: "Install: Node.js packages"
        run: ./scripts/gear.sh init js

      - name: "Install: Build deps"
        run: |
          sudo apt update
          sudo apt install -y git clang curl libssl-dev llvm libudev-dev cmake
          sudo wget -c https://github.com/WebAssembly/binaryen/releases/download/version_105/binaryen-version_105-x86_64-linux.tar.gz -O - | sudo tar -xz -C .
          cp binaryen-version_105/bin/wasm-opt /usr/bin/

      - name: "Install: grcov"
        run: |
          curl https://api.github.com/repos/mozilla/grcov/releases/latest | 
          grep -wo "https.*x86_64.*linux-gnu.*tar\.bz2" | 
          xargs curl -L | 
          tar xj
          
      - name: "Install: rust-covfix"
        run: |
          curl -L https://github.com/Kogia-sima/rust-covfix/releases/download/v0.2.2/rust-covfix-linux-x86_64.tar.xz | tar Jxf -
          mv rust-covfix-linux-x86_64/rust-covfix ./

      - name: "Cache: Unpack"
        if: ${{ github.ref != 'refs/heads/master' }}
        continue-on-error: true
        run: |
          cp /root/cache/gear-test* /tmp/
          tar -xf /tmp/gear-test_cache.tar -C /
          tar -xf /tmp/gear-test_cargo_registry.tar -C /
          tar -xf /tmp/gear-test_target.tar
          cp /root/cache/build* /tmp/
          tar -xf /tmp/build_cache.tar -C /
          tar -xf /tmp/build_cargo_registry.tar -C /
          tar -xf /tmp/build_target.tar

      - name: "Build: Split examples by .opt and .meta"
        run: ./scripts/gear.sh build wasm-proc

      - name: "Build: Examples (WASM)"
        run: ./scripts/gear.sh build examples --locked

      - name: "Build: Split examples by .opt and .meta"
        run: ./scripts/gear.sh build examples-proc

      - name: "Test: Gear workspace"
        run: ./scripts/gear.sh test gear
        env:
          RUSTFLAGS: -Cinstrument-coverage
        
      - name: "Test: Process node runtime testsuite"
        run: ./scripts/gear.sh coverage rtest
        env:
          RUSTFLAGS: -Cinstrument-coverage
          
      - name: "Test: Process gear-test"
        run: ./scripts/gear.sh coverage gtest
        env:
          RUSTFLAGS: -Cinstrument-coverage
            
      - name: "Coverage: Aggregate"
        run: >-
          ./grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing
          --ignore "/*"
          --ignore "examples/*"
          --ignore "utils/*"
          --ignore "target/*"
          --ignore "gear-test/*"
          --ignore "node/*"
          --ignore "runtime/*"
          --ignore "gcore/*"
          --ignore "gstd/*"
          --ignore "galloc/*"
          -o ./lcov.info
        
      - name: "Coverage: Fix report"
        run: ./rust-covfix -o lcov.info lcov.info
        
      - name: "Coverage: Publish"
        uses: codecov/codecov-action@v1
        with:
          file: ./lcov.info
