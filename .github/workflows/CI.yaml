name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  CARGO_TERM_COLOR: always
  TERM: xterm-256color

jobs:
  check:
    runs-on: self-hosted
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v2

      - name: "Install: Nightly toolchain"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: clippy, rustfmt
          target: wasm32-unknown-unknown

      - name: "Install: Build deps"
        run: sudo apt install -y git clang curl libssl-dev llvm libudev-dev cmake

      - name: "Check formatting: Gear"
        run: ./scripts/gear.sh format gear --check

      - name: "Check formatting: Examples"
        run: ./scripts/gear.sh format examples --check

      - name: "Check formatting: Doc"
        run: ./scripts/gear.sh format doc --check

      - name: "Check clippy: Gear"
        run: ./scripts/gear.sh clippy gear

      - name: "Check clippy: Examples"
        run: ./scripts/gear.sh clippy examples

      - name: "Check compile: Node benchmark"
        run: ./scripts/gear.sh check benchmark

  build:
    runs-on: self-hosted
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v2

      - name: "Install: Nightly toolchain"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown

      - name: "Install: Node.js"
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: "Show: Versioning"
        run: ./scripts/gear.sh show

      - name: "Install: Node.js packages"
        run: ./scripts/gear.sh init js

      - name: "Install: Build deps"
        run: sudo apt install -y git clang curl libssl-dev llvm libudev-dev cmake

      - name: "ACTIONS: Artifact cache"
        uses: Swatinem/rust-cache@v1

      - name: "Build: Gear"
        run: ./scripts/gear.sh build gear --release --locked

      - name: "Build: Examples (WASM)"
        run: ./scripts/gear.sh build examples --locked

      - name: "Build: Split examples by .opt and .meta"
        run: ./scripts/gear.sh build examples-proc

      - name: "Test: Gear workspace"
        run: ./scripts/gear.sh test gear --release

      - name: "Test: Gear pallet" # Temporary feature to test sandbox backend
        run: ./scripts/gear.sh test pallet --release

      - name: "Test: JS metadata"
        run: ./scripts/gear.sh test js

      - name: "Test: Process node testsuite"
        run: ./scripts/gear.sh test ntest

      - name: "Test: Run RPC tests"
        run: |
          cargo build -p gear-node --release --features debug-mode
          cd rpc-tests
          npm run build
          cd ..
          RUST_LOG=gwasm=debug,gear_core_runner=debug ./target/release/gear-node --dev --ws-max-out-buffer-capacity 500 --rpc-max-payload 500 -l 0 & sleep 10
          node rpc-tests/dist/index.js ./gtest/spec/*.yaml

      - name: Prepare artifacts
        if: github.event_name == 'push'
        run: |
          mkdir -p artifact
          cd target/wasm32-unknown-unknown/release
          tar czvf ../../../artifact/examples.tar.gz *.wasm
          cd ../../..
          cp target/release/wbuild/gear-runtime/gear_runtime.wasm artifact/
          cp target/release/gear-node artifact/
          cp target/release/gtest artifact/
          cp target/release/wasm-proc artifact/
          strip artifact/gear-node || true
          strip artifact/gtest || true
          strip artifact/wasm-proc || true

      - name: Upload artifacts
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v2
        with:
          path: artifact

  upload:
    if: github.event_name == 'push'
    runs-on: self-hosted
    needs: build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Delete previous release
        uses: dev-drprasad/delete-tag-and-release@v0.1.3
        with:
          delete_release: true
          tag_name: build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Sleep
        run: sleep 10

      - name: Upload
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: true
          tag_name: build
          draft: false
          fail_on_unmatched_files: true
          files: artifact/*

  gtest:
    runs-on: self-hosted
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v2

      - name: "Install: Nightly toolchain"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown

      - name: "Install: Node.js"
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: "Show: Versioning"
        run: ./scripts/gear.sh show

      - name: "Install: Build deps"
        run: sudo apt install -y git clang curl libssl-dev llvm libudev-dev cmake

      - name: "Install: Node.js packages"
        run: ./scripts/gear.sh init js

      - name: "ACTIONS: Artifact cache"
        uses: Swatinem/rust-cache@v1

      - name: "Build: Split examples by .opt and .meta"
        run: ./scripts/gear.sh build wasm-proc

      - name: "Build: Examples (WASM)"
        run: ./scripts/gear.sh build examples --locked

      - name: "Build: Split examples by .opt and .meta"
        run: ./scripts/gear.sh build examples-proc

      - name: "Test: Process gear-test"
        run: ./scripts/gear.sh test gtest
