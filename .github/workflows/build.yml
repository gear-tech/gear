name: Build

on:
  workflow_call:
    inputs:
      macos:
        type: boolean
        default: false
      windows:
        type: boolean
        default: false
      release:
        type: boolean
        default: false
      production:
        type: boolean
        default: false
  workflow_dispatch:
    inputs:
      title:
        type: string
        description: "Pull request title that triggers this workflow."
      number:
        type: string
        description: "Pull request number that triggers this workflow"
      release:
        type: boolean
        default: false
      production:
        type: boolean
        default: false

run-name: ${{ inputs.title }} ( ${{ format('#{0}', inputs.number) }} )

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: short
  RUST_LIB_BACKTRACE: 1
  TERM: xterm-256color
  NEXTEST_PROFILE: ci

jobs:
  dynamic-matrix:
    runs-on: ubuntu-latest
    outputs:
      profiles: ${{ steps.profiles.outputs.value }}
      targets: ${{ steps.targets.outputs.value }}
    steps:
      - id: profiles
        run: |
          profiles=$(jq -c -n '[{name: "debug", flags: ""}]')
          if [ ${{ inputs.release }} ]; then
            profiles=$(echo "$profiles" | jq -c '. += [{name: "release", flags: "--release"}]')
          fi
          echo "Profiles: ${profiles}"
          echo "value=${profiles}" >> $GITHUB_OUTPUT
      - id: targets
        run: |
          targets=$(jq -c -n '[
            {
              name: "linux-x86_64",
              target: "x86_64-unknown-linux-gnu",
              "runs-on": ["kuberunner", "github-runner-02"]
            }
          ]')
          
          if [ ${{ inputs.macos }} ]; then
            targets=$(echo "$targets" | jq -c '. += [
              {
                name: "macos-aarch64",
                target: "aarch64-apple-darwin",
                "runs-on": "macos-latest"
              },
              {
                name: "macos-x86_64",
                target: "x86_64-apple-darwin",
                "runs-on": "macos-latest"
              }
            ]')
          fi
          
          if [ ${{ inputs.windows }} ]; then
            targets=$(echo "$targets" | jq -c '. += [
              {
                name: "windows-x86_64",
                target: "x86_64-pc-windows-msvc",
                "runs-on": ["kuberunner", "github-runner-02"]
              }
            ]')
          fi
          
          echo "Targets: ${targets}"
          echo "value=${targets}" >> $GITHUB_OUTPUT

  docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/install-rust

      - name: Cache
        uses: Swatinem/rust-cache@v2

      - name: Build docs
        run: make doc
        shell: bash
        env:
          CARGO_PROFILE_DEV_DEBUG: 0

      - name: Copy logo image
        run: cp ./images/logo.svg ./target/doc/
        shell: bash

      - name: Deploy
        if: github.event_name == 'push'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          cname: docs.gear.rs
          force_orphan: true
          user_name: "github-actions[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"

      - name: Deploy PR
        if: github.event_name == 'pull_request'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          destination_dir: pr-${{ github.event.number }}

  node:
    needs: dynamic-matrix
    strategy:
      fail-fast: false
      matrix:
        targets: ${{ fromJson(needs.dynamic-matrix.outputs.targets) }}
    runs-on: ${{ matrix.targets.runs-on }}
    name: node (${{ matrix.targets.name }})
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v4

      - name: "Install: Setup linker"
        uses: ./.github/actions/setup-linker

      - name: "Install: Rust toolchain"
        uses: ./.github/actions/install-rust

      - name: "Install: Rust target"
        run: |
          rustup target add ${{ matrix.targets.target }}
          echo "CARGO_BUILD_TARGET=${{ matrix.targets.target }}" >> $GITHUB_ENV
        shell: bash

      - name: "Install: cross-compile environment"
        # the only platforms where host == target
        if: ${{ matrix.targets.target != 'x86_64-unknown-linux-gnu' && matrix.targets.target != 'aarch64-apple-darwin' }}
        uses: ./.github/actions/setup-cross-compile
        with:
          target: ${{ matrix.targets.target }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "ACTIONS: Setup caching"
        uses: Swatinem/rust-cache@v2
        with:
          cache-provider: buildjet

      - name: "Build: Node"
        run: ./scripts/gear.sh build node --release --locked

      - name: "ACTIONS: Upload node"
        uses: actions/upload-artifact@v4
        with:
          name: node-release-${{ matrix.targets.target }}
          path: target/${{ matrix.targets.target }}/release/gear
          retention-days: 1
          overwrite: true

  linux:
    needs: [dynamic-matrix, node]
    uses: ./.github/workflows/build-linux.yml
    with:
      profiles: ${{ needs.dynamic-matrix.outputs.profiles }}
      production: ${{ inputs.production }}

  windows:
    needs: [dynamic-matrix, node]
    if: ${{ !cancelled() && (github.ref == 'refs/heads/master' || inputs.windows) }}
    uses: ./.github/workflows/build-windows.yml
    with:
      profiles: ${{ needs.dynamic-matrix.outputs.profiles }}

  macos:
    needs: [dynamic-matrix, node, linux]
    if: ${{ !cancelled() && inputs.macos }}
    uses: ./.github/workflows/build-macos.yml
    with:
      profiles: ${{ needs.dynamic-matrix.outputs.profiles }}
