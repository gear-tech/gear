name: Test measurements

on:
  schedule:
    - cron: '10 21 * * *'
  workflow_dispatch:

env:
  RUSTUP_HOME: /tmp/rustup_home
  CARGO_TERM_COLOR: always
  TERM: xterm-256color
  COUNT: 100
  NIGHTLY_TOOLCHAIN_VERSION: ${{ secrets.NIGHTLY_TOOLCHAIN_VERSION }}

jobs:
  build:
    runs-on: [ k8s-runner ]
    steps:
      - name: "ACTIONS: Checkout"
        uses: actions/checkout@v3

      - name: "Install: Set cargo path"
        run: echo "/tmp/cargo/bin" >> $GITHUB_PATH

      - name: "Install: Nightly toolchain"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown

      - name: "Install: Show specific nightly version"
        if: ${{ env.NIGHTLY_TOOLCHAIN_VERSION != '' }}
        run: echo $NIGHTLY_TOOLCHAIN_VERSION | sed 's/-/ - /g'

      - name: "Install: Specific nightly toolchain"
        if: ${{ env.NIGHTLY_TOOLCHAIN_VERSION != '' }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-${{ env.NIGHTLY_TOOLCHAIN_VERSION }}
          target: wasm32-unknown-unknown

      - name: "Install: Pin to specific nightly toolchain"
        if: ${{ env.NIGHTLY_TOOLCHAIN_VERSION != '' }}
        run: |
          rm -rf $RUSTUP_HOME/toolchains/nightly-x86_64-unknown-linux-gnu
          ln -s $RUSTUP_HOME/toolchains/nightly-$NIGHTLY_TOOLCHAIN_VERSION-x86_64-unknown-linux-gnu $RUSTUP_HOME/toolchains/nightly-x86_64-unknown-linux-gnu

      - name: "Install: Node.js"
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: "Show: Versioning"
        run: ./scripts/gear.sh show

      - name: "Install: Node.js packages"
        run: ./scripts/gear.sh init js

      - name: "Install: Build deps"
        run: |
          sudo apt update
          sudo apt install -y git clang curl libssl-dev llvm libudev-dev cmake protobuf-compiler wget bzip2
          sudo wget -c https://github.com/WebAssembly/binaryen/releases/download/version_105/binaryen-version_105-x86_64-linux.tar.gz -O - | sudo tar -xz -C .
          sudo cp binaryen-version_105/bin/wasm-opt /usr/bin/
          sudo wget -c https://github.com/paritytech/cachepot/releases/download/0.1.0-rc.2/cachepot-0.1.0-rc.2-x86_64-unknown-linux-musl.tar.gz -O - | sudo tar -xz -C .
          sudo cp cachepot-0.1.0-rc.2-x86_64-unknown-linux-musl/cachepot /usr/bin/
          sudo chmod +x /usr/bin/cachepot

      - name: "Cache: Unpack"
        continue-on-error: true
        run: |
          cp /root/cache/build* /tmp/
          tar -xf /tmp/build_cache.tar -C /
          tar -xf /tmp/build_cargo_registry.tar -C /
          tar -xf /tmp/build_target.tar

      - name: "Build: Gear"
        run: ./scripts/gear.sh build gear --release --locked --features=runtime-test,runtime-benchmarks,lazy-pages

      - name: "Build: Examples (WASM)"
        run: ./scripts/gear.sh build examples --locked

      - name: "Build: Split examples by .opt and .meta"
        run: ./scripts/gear.sh build examples-proc

      - name: "Collect: Gear workspace tests"
        run: |
          mkdir -p ./target/analysis/tests/
          mkdir -p ./target/analysis/output/
          for i in `seq 1 $COUNT`; do echo $i; ./scripts/gear.sh test gear --exclude gclient --features pallet-gear-debug/lazy-pages --release -j1 > ./target/analysis/output/$i 2>&1 ; mv ./target/nextest/ci/junit.xml ./target/analysis/tests/$i; done
          ./target/release/regression-analysis collect-data --data-folder-path ./target/analysis/tests/ --output-path ./target/pallet-tests.json

      - name: "Generate report: Gear workspace tests"
        run: >-
          ./target/release/regression-analysis convert
          --data-folder-path ./target/analysis/tests/
          --output-file ./target/action-pallet-output.json

      - name: "Collect: Node runtime tests"
        run: |
          rm -rf ./target/analysis/
          mkdir -p ./target/analysis/tests/
          mkdir -p ./target/analysis/output/
          for i in `seq 1 $COUNT`; do echo $i; ./scripts/gear.sh test rtest gear > ./target/analysis/output/$i 2>&1 ; mv ./target/runtime-test-junit.xml ./target/analysis/tests/$i; done
          ./target/release/regression-analysis collect-data --disable-filter --data-folder-path ./target/analysis/tests/ --output-path ./target/runtime-tests.json

      - name: "Generate report: Node runtime tests"
        run: >-
          ./target/release/regression-analysis convert
          --disable-filter
          --data-folder-path ./target/analysis/tests/
          --output-file ./target/action-runtime-output.json

      - name: "Collect: pallet-gear benches"
        run: >-
          ./target/release/gear benchmark pallet --pallet=pallet_gear
          --steps=50
          --repeat=20
          --chain=dev
          --extrinsic=*
          --execution=wasm
          --wasm-execution=compiled
          --heap-pages=4096
          --output ./target/weights.json
          --template ./.maintain/regression-analysis-weight-template.hbs

      - name: "Generate report: pallet-gear benches"
        run: |
          ./target/release/regression-analysis weights --input-file ./target/weights.json --output-file ./target/action-hostfn-weights.json host-fn
          ./target/release/regression-analysis weights --input-file ./target/weights.json --output-file ./target/action-instruction-weights.json instruction
          ./target/release/regression-analysis weights --input-file ./target/weights.json --output-file ./target/action-extrinsic-weights.json extrinsic

      - name: "Deploy: Gear workspace tests"
        uses: ./.github/actions/deploy-benchmark
        with:
          name: Gear workspace tests
          file: ./target/action-pallet-output.json
          ssh-deploy-key: ${{ secrets.PERFORMANCE_CHARTS_DEPLOY_KEY }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Deploy: Node runtime tests"
        uses: ./.github/actions/deploy-benchmark
        with:
          name: Node runtime tests
          file: ./target/action-runtime-output.json
          ssh-deploy-key: ${{ secrets.PERFORMANCE_CHARTS_DEPLOY_KEY }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Deploy: pallet-gear host function weights"
        uses: ./.github/actions/deploy-benchmark
        with:
          name: pallet-gear host function weights
          file: ./target/action-hostfn-weights.json
          ssh-deploy-key: ${{ secrets.PERFORMANCE_CHARTS_DEPLOY_KEY }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Deploy: pallet-gear instruction weights"
        uses: ./.github/actions/deploy-benchmark
        with:
          name: pallet-gear instruction weights
          file: ./target/action-instruction-weights.json
          ssh-deploy-key: ${{ secrets.PERFORMANCE_CHARTS_DEPLOY_KEY }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Deploy: pallet-gear instruction weights"
        uses: ./.github/actions/deploy-benchmark
        with:
          name: pallet-gear extrinsic weights
          file: ./target/action-extrinsic-weights.json
          ssh-deploy-key: ${{ secrets.PERFORMANCE_CHARTS_DEPLOY_KEY }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Cache: collected data"
        run: |
          mv ./target/pallet-tests.json /root/cache/
          mv ./target/runtime-tests.json /root/cache/
