use alloy::{
    contract::CallBuilder,
    network::Network,
    primitives::Uint,
    providers::{Provider, ProviderBuilder, WalletProvider, fillers::SimpleNonceManager},
    sol,
};
use alloy_contract::CallDecoder;
use anyhow::Result;
use ethexe_common::Address;
use gprimitives::U256;
use std::collections::BTreeMap;

// # Symbiotic contracts for testing
sol!(
    #[sol(rpc)]
    DefaultOperatorRewards,
    "../contracts/out/DefaultOperatorRewards.sol/DefaultOperatorRewards.json"
);

sol!(
    // bytecode generated with the next command from ethexe/contracts/lib/symbiotic-core/
    // `solc src/contracts/service/NetworkMiddlewareService.sol --via-ir --optimize --bin`
    #[sol(
        rpc,
        bytecode = "60a034606c57601f6102fc38819003918201601f19168301916001600160401b03831184841017607057808492602094604052833981010312606c57516001600160a01b0381168103606c5760805260405161027790816100858239608051818181605201526101070152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f3560e01c908163b7d8e1a9146100c857508063bb5ed032146100855763c0cd7c3e1461003d575f80fd5b34610081575f366003190112610081576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5f80fd5b34610081576020366003190112610081576004356001600160a01b03811690819003610081575f525f602052602060018060a01b0360405f205416604051908152f35b34610081576020366003190112610081576004356001600160a01b0381169190829003610081576302910f8b60e31b81523360048201526020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610236575f916101d1575b50156101c257335f908152602081905260409020546001600160a01b031681146101b357335f525f60205260405f20816bffffffffffffffffffffffff60a01b8254161790556040519081527ff64e2a8734392e221de13f5e56deb22d308e292cad394052affa97dbaf41ec9860203392a2005b63a741a04560e01b5f5260045ffd5b6323d53b9760e21b5f5260045ffd5b905060203d60201161022f575b601f8101601f1916820167ffffffffffffffff81118382101761021b5760209183916040528101031261008157518015158103610081578261013f565b634e487b7160e01b5f52604160045260245ffd5b503d6101de565b6040513d5f823e3d90fdfea264697066735822122081a409c1a500abb34c0814df12747e1c1f5723dd9a7d2378ff9b5591f0c86e0064736f6c634300081e0033"
    )]
    contract NetworkMiddlewareService {
        error AlreadySet();
        error NotNetwork();
        event SetMiddleware(address indexed network, address middleware);
        constructor(address networkRegistry);
        function NETWORK_REGISTRY() external view returns (address);
        function middleware(address network) external view returns (address);
        function setMiddleware(address middleware) external;
    }
);

sol!(
    #[sol(rpc)]
    NetworkRegistry,
    "../contracts/out/NetworkRegistry.sol/NetworkRegistry.json"
);

sol!(
    // bytecode generated with the next command from ethexe/contracts/lib/openzeppelin-contracts/
    // `solc contracts/mocks/token/ERC20Mock.sol --via-ir --optimize --bin`
    #[sol(rpc, bytecode = "60806040523461031357604080519081016001600160401b03811182821017610226576040908152600982526845524332304d6f636b60b81b602083015280519081016001600160401b038111828210176102265760405260048152634532304d60e01b602082015281516001600160401b03811161022657600354600181811c91168015610309575b602082101461020857601f81116102a6575b50602092601f821160011461024557928192935f9261023a575b50508160011b915f199060031b1c1916176003555b80516001600160401b03811161022657600454600181811c9116801561021c575b602082101461020857601f81116101a5575b50602091601f8211600114610145579181925f9261013a575b50508160011b915f199060031b1c1916176004555b60405161074890816103188239f35b015190505f80610116565b601f1982169260045f52805f20915f5b85811061018d57508360019510610175575b505050811b0160045561012b565b01515f1960f88460031b161c191690555f8080610167565b91926020600181928685015181550194019201610155565b60045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f830160051c810191602084106101fe575b601f0160051c01905b8181106101f357506100fd565b5f81556001016101e6565b90915081906101dd565b634e487b7160e01b5f52602260045260245ffd5b90607f16906100eb565b634e487b7160e01b5f52604160045260245ffd5b015190505f806100b5565b601f1982169360035f52805f20915f5b86811061028e5750836001959610610276575b505050811b016003556100ca565b01515f1960f88460031b161c191690555f8080610268565b91926020600181928685015181550194019201610255565b60035f527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c810191602084106102ff575b601f0160051c01905b8181106102f4575061009b565b5f81556001016102e7565b90915081906102de565b90607f1690610089565b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c90816306fdde031461055657508063095ea7b3146104d457806318160ddd146104b757806323b872dd146103d8578063313ce567146103bd57806340c10f191461031b57806370a08231146102e457806395d89b41146101c95780639dc29fac1461011a578063a9059cbb146100e95763dd62ed3e14610095575f80fd5b346100e55760403660031901126100e5576100ae61064f565b6100b6610665565b6001600160a01b039182165f908152600160209081526040808320949093168252928352819020549051908152f35b5f80fd5b346100e55760403660031901126100e55761010f61010561064f565b602435903361067b565b602060405160018152f35b346100e55760403660031901126100e55761013361064f565b602435906001600160a01b031680156101b657805f525f60205260405f205482811061019d576020835f947fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef938587528684520360408620558060025403600255604051908152a3005b9063391434e360e21b5f5260045260245260445260645ffd5b634b637e8f60e11b5f525f60045260245ffd5b346100e5575f3660031901126100e5576040515f6004548060011c906001811680156102da575b6020831081146102c6578285529081156102aa5750600114610255575b50819003601f01601f191681019067ffffffffffffffff8211818310176102415761023d82918260405282610625565b0390f35b634e487b7160e01b5f52604160045260245ffd5b905060045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5f905b8282106102945750602091508201018261020d565b600181602092548385880101520191019061027f565b90506020925060ff191682840152151560051b8201018261020d565b634e487b7160e01b5f52602260045260245ffd5b91607f16916101f0565b346100e55760203660031901126100e5576001600160a01b0361030561064f565b165f525f602052602060405f2054604051908152f35b346100e55760403660031901126100e55761033461064f565b6001600160a01b031660243581156103aa57600254908082018092116103965760207fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef915f9360025584845283825260408420818154019055604051908152a3005b634e487b7160e01b5f52601160045260245ffd5b63ec442f0560e01b5f525f60045260245ffd5b346100e5575f3660031901126100e557602060405160128152f35b346100e55760603660031901126100e5576103f161064f565b6103f9610665565b6001600160a01b0382165f818152600160209081526040808320338452909152902054909260443592915f198110610437575b5061010f935061067b565b83811061049c5784156104895733156104765761010f945f52600160205260405f2060018060a01b0333165f526020528360405f20910390558461042c565b634a1406b160e11b5f525f60045260245ffd5b63e602df0560e01b5f525f60045260245ffd5b8390637dc7a0d960e11b5f523360045260245260445260645ffd5b346100e5575f3660031901126100e5576020600254604051908152f35b346100e55760403660031901126100e5576104ed61064f565b602435903315610489576001600160a01b031690811561047657335f52600160205260405f20825f526020528060405f20556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b346100e5575f3660031901126100e5575f6003548060011c9060018116801561061b575b6020831081146102c6578285529081156102aa57506001146105c65750819003601f01601f191681019067ffffffffffffffff8211818310176102415761023d82918260405282610625565b905060035f527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5f905b8282106106055750602091508201018261020d565b60018160209254838588010152019101906105f0565b91607f169161057a565b602060409281835280519182918282860152018484015e5f828201840152601f01601f1916010190565b600435906001600160a01b03821682036100e557565b602435906001600160a01b03821682036100e557565b6001600160a01b03169081156101b6576001600160a01b03169182156103aa57815f525f60205260405f20548181106106f957817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92602092855f525f84520360405f2055845f525f825260405f20818154019055604051908152a3565b8263391434e360e21b5f5260045260245260445260645ffdfea2646970667358221220d05d8554aa461117e32ada33e649b40d39fffcf56cc41eb109ececf2b08555c264736f6c634300081e0033")]
    contract ERC20Mock {
        event Transfer(address indexed from, address indexed to, uint256 value);
        event Approval(address indexed owner, address indexed spender, uint256 value);
        constructor(string memory name_, string memory symbol_);
        function totalSupply() external view returns (uint256);
        function balanceOf(address account) external view returns (uint256);
        function transfer(address to, uint256 value) external returns (bool);
        function allowance(address owner, address spender) external view returns (uint256);
        function approve(address spender, uint256 value) external returns (bool);
        function transferFrom(address from, address to, uint256 value) external returns (bool);
        function mint(address account, uint256 amount) external;
    }
);

// # Anvil settings for testing
// const BLOCK_TIME: f64 = 0.5; // 0.5 sec
// const GENESIS_TIMESTAMP: u64 = 0;
// const ERA_DURATION: u64 = 1; // 2 blocks

async fn send<P, D, N>(builder: CallBuilder<P, D, N>) -> Result<N::ReceiptResponse>
where
    P: Provider<N>,
    D: CallDecoder,
    N: Network,
{
    builder
        .send()
        .await?
        .get_receipt()
        .await
        .map_err(Into::into)
}

#[tokio::test]
async fn test_claim_rewards_from_merkle_tree() -> Result<()> {
    let provider = ProviderBuilder::new()
        .with_nonce_management(SimpleNonceManager::default())
        .connect_anvil_with_wallet();
    let deployer_address = provider.wallet().default_signer().address();

    // Deploy contracts
    let network_registry = NetworkRegistry::deploy(provider.clone()).await.unwrap();
    let network_middleware_service =
        NetworkMiddlewareService::deploy(provider.clone(), *network_registry.address()).await?;
    let default_operator_rewards =
        DefaultOperatorRewards::deploy(provider.clone(), *network_middleware_service.address())
            .await?;
    let wvara = ERC20Mock::deploy(
        provider.clone(),
        "Wrapped VARA".to_string(),
        "wVARA".to_string(),
    )
    .await?;

    // Setup registries
    // Here we register the network with address `deployer_address` (msg.sender)
    // Network middleware also will be set to the `deployer_address`
    let _tx_receipt = send(network_registry.registerNetwork()).await?;
    let _tx_receipt = send(network_middleware_service.setMiddleware(deployer_address)).await?;
    let _tx_receipt = send(wvara.mint(deployer_address, Uint::from(10000))).await?;
    let _tx_receipt =
        send(wvara.approve(*default_operator_rewards.address(), Uint::from(10000))).await?;

    //
    let rewards = BTreeMap::from([(Address(deployer_address.0.0), U256::from(1000))]);
    let tree = crate::rewards::utils::operators_merkle_tree(rewards);
    let root = tree.root().unwrap();

    let _tx_receipt = send(default_operator_rewards.distributeRewards(
        deployer_address,
        *wvara.address(),
        Uint::from(1000),
        root.into(),
    ))
    .await?;

    let balance_before = wvara.balanceOf(deployer_address).call().await?;
    assert_eq!(
        balance_before,
        Uint::from(9000),
        "Init balance 10000, distribute 1000 from network balance, so 9000 left"
    );

    let proof_hashes = tree.proof(&[0]).proof_hashes().to_vec();
    let _tx_receipt = send(default_operator_rewards.claimRewards(
        deployer_address,
        deployer_address,
        *wvara.address(),
        Uint::from(1000),
        proof_hashes.iter().map(|hash| hash.into()).collect(),
    ))
    .await?;

    let balance_after = wvara.balanceOf(deployer_address).call().await?;
    assert_eq!(
        balance_after,
        Uint::from(10000),
        "Claimed 1000, so balance should be 10000"
    );

    Ok(())
}
