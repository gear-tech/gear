// This file is part of Gear.
//
// Copyright (C) 2025 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

use alloy::{
    contract::CallBuilder,
    network::{EthereumWallet, Network, TxSigner},
    node_bindings::Anvil,
    primitives::{Address as AlloyAddress, Uint},
    providers::{
        Provider, ProviderBuilder, WalletProvider,
        fillers::{SimpleNonceManager, WalletFiller},
    },
    sol,
};
use alloy_contract::CallDecoder;
use anyhow::Result;
use ethexe_common::Address;
use gprimitives::U256;
use std::collections::BTreeMap;

// # Symbiotic contracts for testing
// These contracts definitions contains only necessary methods for testing.
sol!(
    #[sol(rpc, bytecode = "0x60a034610106576001600160401b0390601f610bf238819003918201601f19168301918483118484101761010a578084926020946040528339810103126101065751906001600160a01b0382168203610106577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081549060ff8260401c166100f45780808316036100af575b83608052604051610ad3908161011f823960805181818161029101526107cd0152f35b6001600160401b031990911681179091556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a15f808061008c565b60405163f92ee8a960e01b8152600490fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080604090808252600480361015610015575f80fd5b5f3560e01c9182631a5289a9146107fc575081632c9d45b3146107b9578163315447db1461050557816348a78da71461022f5781638129fc1c1461010157508063aadf2afe146100b95763b203bb991461006d575f80fd5b346100b557806003193601126100b557602090610088610858565b61009061086e565b9060018060a01b038091165f5260018452825f2091165f528252805f20549051908152f35b5f80fd5b50346100b557806003193601126100b5576020906100d5610858565b6100dd61086e565b9060018060a01b038091165f525f8452825f2091165f528252805f20549051908152f35b9050346100b5575f3660031901126100b5577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090815460ff81851c16159167ffffffffffffffff821680159081610227575b600114908161021d575b159081610214575b50610206575067ffffffffffffffff1981166001178355816101e7575b5061018b6109d9565b6101936109d9565b60015f80516020610a7e833981519152556101aa57005b805468ff00000000000000001916905551600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1005b68ffffffffffffffffff1916680100000000000000011782555f610182565b845163f92ee8a960e01b8152fd5b9050155f610165565b303b15915061015d565b849150610153565b82346100b55760803660031901126100b557610249610858565b9161025261086e565b91604435916064356102626108f1565b8251635daf681960e11b81526001600160a01b0396871681840181905260249790959360209285919084818c817f000000000000000000000000000000000000000000000000000000000000000088165afa90811561046c575f916104cf575b5083339116036104c1578161032b575b5050857f127e3b1db6c7a82e6a23205f7391ec1ebdef05836c0bbb2bdef8f60ba7920227969798505f525f8252845f20971696875f52815281845f20558351928352820152a360015f80516020610a7e83398151915255005b86516370a0823160e01b80825230828401528a85169750919285828d818b5afa9182156104b7575f92610488575b508851906323b872dd60e01b87830152338d83015230604483015260648201526064815260a0810181811067ffffffffffffffff8211176104765789526103a09088610920565b8751918252308383015284828c818a5afa801561046c575f9061043d575b6103c892506108d0565b94851561042e57875f5260018452865f20905f528352855f2080549186830180931161041c57505595965086957f127e3b1db6c7a82e6a23205f7391ec1ebdef05836c0bbb2bdef8f60ba7920227896102d2565b60118b91634e487b7160e01b5f52525ffd5b50855163fa942acb60e01b8152fd5b508482813d8311610465575b610453818361089a565b810103126100b5576103c891516103be565b503d610449565b88513d5f823e3d90fd5b8c604186634e487b7160e01b5f52525ffd5b9091508581813d83116104b0575b6104a0818361089a565b810103126100b55751908c610359565b503d610496565b89513d5f823e3d90fd5b865163227bf64d60e01b8152fd5b90508481813d83116104fe575b6104e6818361089a565b810103126100b5575183811681036100b5578b6102c2565b503d6104dc565b9050346100b55760a03660031901126100b557610520610858565b9161052961086e565b92610532610884565b60843567ffffffffffffffff6064358183116100b557366023840112156100b55782870135928284116100b5576024936005903660248260051b850101116100b55761057c6108f1565b60018060a01b03809b1695865f5260209b5f8d528a5f20981697885f528c52895f20549384156107a9578a51338e8201908152602081018890529097908e90896040820103996105d4601f199b8c810183528261089a565b5190208d5182810191825291825291818e0190811182821017610796578d52519020935f939291908e5b84861061075b575050505050500361074b57825f5260028852855f20845f528852855f20335f528852855f20548082111561073b5761063d90826108d0565b96835f5260018952865f20855f528952865f20549081891161072d575090610669886106d794936108d0565b5f85815260018b528881208782528b528881209190915584815260028a528781208682528a528781203382528a5287902055855163a9059cbb60e01b818a01526001600160a01b03861660248201526044810188905260649182018152906106d1908261089a565b83610920565b83516001600160a01b039390931683526020830185905233927f28047ce71e7b959f6fc3946a1bdc43b003cd0b685630fe93725eb9eafee2582690604090a460015f80516020610a7e8339815191525551908152f35b8751631e9acf1760e31b8152fd5b8651631d2d8d9760e31b81528890fd5b85516309bde33960e01b81528790fd5b8386839495969798931b85010135918281105f14610788575f525260018c5f205b9501939291908e6105fe565b915f525260018c5f2061077c565b60418f634e487b7160e01b5f525260245ffd5b8a51631c8b625960e01b81528c90fd5b82346100b5575f3660031901126100b557517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b8390346100b55760603660031901126100b55760209161081a610858565b61082261086e565b9061082b610884565b6001600160a01b039182165f90815260028752848120938316815292865283832091168252845220548152f35b600435906001600160a01b03821682036100b557565b602435906001600160a01b03821682036100b557565b604435906001600160a01b03821682036100b557565b90601f8019910116810190811067ffffffffffffffff8211176108bc57604052565b634e487b7160e01b5f52604160045260245ffd5b919082039182116108dd57565b634e487b7160e01b5f52601160045260245ffd5b5f80516020610a7e833981519152600281541461090e5760029055565b604051633ee5aeb560e01b8152600490fd5b81516001600160a01b03909116915f91829160200182855af13d156109cd573d67ffffffffffffffff81116108bc5761097b916040519161096b6020601f19601f840116018461089a565b82523d5f602084013e5b83610a1a565b80519081151591826109a9575b50506109915750565b60249060405190635274afe760e01b82526004820152fd5b81925090602091810103126100b557602001518015908115036100b5575f80610988565b61097b90606090610975565b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c1615610a0857565b604051631afcd79f60e31b8152600490fd5b90610a415750805115610a2f57805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580610a74575b610a52575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15610a4a56fe9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a26469706673582212207b85f8f5ef0b761c1698593b1ac3fe622502ac852942554b44141965a3ad675c64736f6c63430008190033")]
    contract DefaultOperatorRewards{
        error InvalidProof(address);
        constructor(address networkMiddlewareService);
        function distributeRewards(address network, address token, uint256 amount, bytes32 root_) external;
        // function claimRewards(bytes32 expected_root, address operator, address recipient, address network, address token, uint256 totalClaimable, bytes32[] calldata proof) returns (uint256);
        function claimRewards(address recipient, address network, address token, uint256 totalClaimable, bytes32[] calldata proof) returns (uint256);
    }
);

sol!(
    // bytecode generated with the next command from ethexe/contracts/lib/symbiotic-core/
    // `solc src/contracts/service/NetworkMiddlewareService.sol --via-ir --optimize --bin`
    #[sol(rpc, bytecode = "60a034606c57601f6102fc38819003918201601f19168301916001600160401b03831184841017607057808492602094604052833981010312606c57516001600160a01b0381168103606c5760805260405161027790816100858239608051818181605201526101070152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f3560e01c908163b7d8e1a9146100c857508063bb5ed032146100855763c0cd7c3e1461003d575f80fd5b34610081575f366003190112610081576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5f80fd5b34610081576020366003190112610081576004356001600160a01b03811690819003610081575f525f602052602060018060a01b0360405f205416604051908152f35b34610081576020366003190112610081576004356001600160a01b0381169190829003610081576302910f8b60e31b81523360048201526020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610236575f916101d1575b50156101c257335f908152602081905260409020546001600160a01b031681146101b357335f525f60205260405f20816bffffffffffffffffffffffff60a01b8254161790556040519081527ff64e2a8734392e221de13f5e56deb22d308e292cad394052affa97dbaf41ec9860203392a2005b63a741a04560e01b5f5260045ffd5b6323d53b9760e21b5f5260045ffd5b905060203d60201161022f575b601f8101601f1916820167ffffffffffffffff81118382101761021b5760209183916040528101031261008157518015158103610081578261013f565b634e487b7160e01b5f52604160045260245ffd5b503d6101de565b6040513d5f823e3d90fdfea264697066735822122081a409c1a500abb34c0814df12747e1c1f5723dd9a7d2378ff9b5591f0c86e0064736f6c634300081e0033")]
    contract NetworkMiddlewareService {
        constructor(address networkRegistry);
        function setMiddleware(address middleware) external;
    }
);

sol!(
    // bytecode generated with the next command from ethexe/contracts/lib/symbiotic-core/
    // `forge build src/contracts/NetworkRegistry.sol && forge inspect src/contracts/NetworkRegistry.sol:NetworkRegistry bytecode`
    #[sol(rpc, bytecode = "0x60808060405234601557610241908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c806314887c581461013d5780635cd8b15e1461012157806387140b5b146100b55763b42ba2a214610045575f80fd5b346100b15760203660031901126100b1576004355f5481101561009d575f80527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301546040516001600160a01b039091168152602090f35b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b346100b1575f3660031901126100b1576100da335f52600160205260405f2054151590565b61010f576100e733610184565b50337fb919910dcefbf753bfd926ab3b1d3f85d877190c3d01ba1bd585047b99b99f0b5f80a2005b60405163ad5fcda560e01b8152600490fd5b346100b1575f3660031901126100b15760205f54604051908152f35b346100b15760203660031901126100b1576004356001600160a01b038116908190036100b15761017a6020915f52600160205260405f2054151590565b6040519015158152f35b805f52600160205260405f2054155f14610206575f54680100000000000000008110156101f25760018101805f5581101561009d5781907f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301555f54905f52600160205260405f2055600190565b634e487b7160e01b5f52604160045260245ffd5b505f9056fea264697066735822122095f8e1e0d405c777c5f51ad11a306baeb637b619594615bd681ebd38c7c4add164736f6c63430008190033")]
    contract NetworkRegistry {
        function registerNetwork() external;
    }
);

sol!(
    // bytecode generated with the next command from ethexe/contracts/lib/openzeppelin-contracts/
    // `solc contracts/mocks/token/ERC20Mock.sol --via-ir --optimize --bin`
    #[sol(rpc, bytecode = "60806040523461031357604080519081016001600160401b03811182821017610226576040908152600982526845524332304d6f636b60b81b602083015280519081016001600160401b038111828210176102265760405260048152634532304d60e01b602082015281516001600160401b03811161022657600354600181811c91168015610309575b602082101461020857601f81116102a6575b50602092601f821160011461024557928192935f9261023a575b50508160011b915f199060031b1c1916176003555b80516001600160401b03811161022657600454600181811c9116801561021c575b602082101461020857601f81116101a5575b50602091601f8211600114610145579181925f9261013a575b50508160011b915f199060031b1c1916176004555b60405161074890816103188239f35b015190505f80610116565b601f1982169260045f52805f20915f5b85811061018d57508360019510610175575b505050811b0160045561012b565b01515f1960f88460031b161c191690555f8080610167565b91926020600181928685015181550194019201610155565b60045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f830160051c810191602084106101fe575b601f0160051c01905b8181106101f357506100fd565b5f81556001016101e6565b90915081906101dd565b634e487b7160e01b5f52602260045260245ffd5b90607f16906100eb565b634e487b7160e01b5f52604160045260245ffd5b015190505f806100b5565b601f1982169360035f52805f20915f5b86811061028e5750836001959610610276575b505050811b016003556100ca565b01515f1960f88460031b161c191690555f8080610268565b91926020600181928685015181550194019201610255565b60035f527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c810191602084106102ff575b601f0160051c01905b8181106102f4575061009b565b5f81556001016102e7565b90915081906102de565b90607f1690610089565b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c90816306fdde031461055657508063095ea7b3146104d457806318160ddd146104b757806323b872dd146103d8578063313ce567146103bd57806340c10f191461031b57806370a08231146102e457806395d89b41146101c95780639dc29fac1461011a578063a9059cbb146100e95763dd62ed3e14610095575f80fd5b346100e55760403660031901126100e5576100ae61064f565b6100b6610665565b6001600160a01b039182165f908152600160209081526040808320949093168252928352819020549051908152f35b5f80fd5b346100e55760403660031901126100e55761010f61010561064f565b602435903361067b565b602060405160018152f35b346100e55760403660031901126100e55761013361064f565b602435906001600160a01b031680156101b657805f525f60205260405f205482811061019d576020835f947fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef938587528684520360408620558060025403600255604051908152a3005b9063391434e360e21b5f5260045260245260445260645ffd5b634b637e8f60e11b5f525f60045260245ffd5b346100e5575f3660031901126100e5576040515f6004548060011c906001811680156102da575b6020831081146102c6578285529081156102aa5750600114610255575b50819003601f01601f191681019067ffffffffffffffff8211818310176102415761023d82918260405282610625565b0390f35b634e487b7160e01b5f52604160045260245ffd5b905060045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5f905b8282106102945750602091508201018261020d565b600181602092548385880101520191019061027f565b90506020925060ff191682840152151560051b8201018261020d565b634e487b7160e01b5f52602260045260245ffd5b91607f16916101f0565b346100e55760203660031901126100e5576001600160a01b0361030561064f565b165f525f602052602060405f2054604051908152f35b346100e55760403660031901126100e55761033461064f565b6001600160a01b031660243581156103aa57600254908082018092116103965760207fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef915f9360025584845283825260408420818154019055604051908152a3005b634e487b7160e01b5f52601160045260245ffd5b63ec442f0560e01b5f525f60045260245ffd5b346100e5575f3660031901126100e557602060405160128152f35b346100e55760603660031901126100e5576103f161064f565b6103f9610665565b6001600160a01b0382165f818152600160209081526040808320338452909152902054909260443592915f198110610437575b5061010f935061067b565b83811061049c5784156104895733156104765761010f945f52600160205260405f2060018060a01b0333165f526020528360405f20910390558461042c565b634a1406b160e11b5f525f60045260245ffd5b63e602df0560e01b5f525f60045260245ffd5b8390637dc7a0d960e11b5f523360045260245260445260645ffd5b346100e5575f3660031901126100e5576020600254604051908152f35b346100e55760403660031901126100e5576104ed61064f565b602435903315610489576001600160a01b031690811561047657335f52600160205260405f20825f526020528060405f20556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b346100e5575f3660031901126100e5575f6003548060011c9060018116801561061b575b6020831081146102c6578285529081156102aa57506001146105c65750819003601f01601f191681019067ffffffffffffffff8211818310176102415761023d82918260405282610625565b905060035f527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5f905b8282106106055750602091508201018261020d565b60018160209254838588010152019101906105f0565b91607f169161057a565b602060409281835280519182918282860152018484015e5f828201840152601f01601f1916010190565b600435906001600160a01b03821682036100e557565b602435906001600160a01b03821682036100e557565b6001600160a01b03169081156101b6576001600160a01b03169182156103aa57815f525f60205260405f20548181106106f957817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92602092855f525f84520360405f2055845f525f825260405f20818154019055604051908152a3565b8263391434e360e21b5f5260045260245260445260645ffdfea2646970667358221220d05d8554aa461117e32ada33e649b40d39fffcf56cc41eb109ececf2b08555c264736f6c634300081e0033")]
    contract ERC20Mock {
        function balanceOf(address account) external view returns (uint256);
        function approve(address spender, uint256 value) external returns (bool);
        function mint(address account, uint256 amount) external;
    }
);

// This function is used to send a transaction call builder and wait for the receipt.
// It useful for testing purposes, because of reduced boilerplate code in tests.
async fn send<P, D, N>(builder: CallBuilder<P, D, N>) -> Result<()>
where
    P: Provider<N>,
    D: CallDecoder,
    N: Network,
{
    builder.send().await?.get_receipt().await?;
    Ok(())
}

fn new_rewards_instance<P, N>(
    signer: AlloyAddress,
    rewards_contract: AlloyAddress,
    mut provider: P,
) -> Result<DefaultOperatorRewards::DefaultOperatorRewardsInstance<P, N>>
where
    P: WalletProvider<N, Wallet = EthereumWallet> + Provider<N> + Clone,
    N: Network,
{
    provider.wallet_mut().set_default_signer(signer)?;
    Ok(DefaultOperatorRewards::new(
        rewards_contract,
        provider.clone(),
    ))
}

#[tokio::test]
async fn test_claim_rewards() -> Result<()> {
    let anvil = Anvil::new().keep_stdout().spawn();
    let provider = ProviderBuilder::new()
        .with_nonce_management(SimpleNonceManager::default())
        .filler(WalletFiller::new(anvil.wallet().unwrap()))
        .connect_anvil();

    let signers = provider.signer_addresses().collect::<Vec<_>>();
    assert!(
        !signers.is_empty(),
        "Expect at least one signer in anvil wallet"
    );

    let deployer_address = provider.wallet().default_signer().address();

    // Deploy contracts
    let wvara = ERC20Mock::deploy(provider.clone()).await?;
    let network_registry = NetworkRegistry::deploy(provider.clone()).await.unwrap();
    let network_middleware_service =
        NetworkMiddlewareService::deploy(provider.clone(), *network_registry.address()).await?;
    let default_operator_rewards =
        DefaultOperatorRewards::deploy(provider.clone(), *network_middleware_service.address())
            .await?;

    // Setup registries
    // Here we register the network with address `deployer_address` (msg.sender)
    // Network middleware also will be set to the `deployer_address`
    send(network_registry.registerNetwork()).await?;
    send(network_middleware_service.setMiddleware(deployer_address)).await?;
    send(wvara.mint(deployer_address, Uint::<256, 4>::MAX)).await?;
    send(wvara.approve(*default_operator_rewards.address(), Uint::<256, 4>::MAX)).await?;

    // Create merkle rewards merkle tree
    let rewards = signers
        .iter()
        .enumerate()
        .map(|(i, key)| (Address(key.0.0), U256::from((i + 1) * 1000)))
        .collect::<BTreeMap<_, _>>();
    let tree = crate::rewards::utils::build_merkle_tree(rewards.clone());

    send(default_operator_rewards.distributeRewards(
        deployer_address,
        *wvara.address(),
        Uint::<256, 4>::MAX,
        tree.get_root().unwrap().0.into(),
    ))
    .await?;

    for (address, to_claim) in rewards.iter() {
        let balance_before = wvara.balanceOf(address.0.into()).call().await?;
        assert!(balance_before.is_zero(), "Operator balance should be 0");

        let new_instance = new_rewards_instance(
            address.0.into(),
            *default_operator_rewards.address(),
            provider.clone(),
        )?;

        let node = oz_merkle_rs::MerkleTree::hash_node((address.0.into(), *to_claim));
        let proof_hashes = tree.get_proof(node).unwrap();
        send(new_instance.claimRewards(
            // tree.root().unwrap().into(),
            // address.0.into(),
            address.0.into(),
            deployer_address,
            *wvara.address(),
            Uint::from_limbs(to_claim.0),
            proof_hashes.iter().map(|hash| hash.0.into()).collect(),
        ))
        .await?;

        // TODO: add to ERC20 impl for `safeTransfer` method and uncomment the next lines

        // let balance_after = wvara.balanceOf(deployer_address).call().await?;
        // assert_eq!(
        //     balance_after,
        //     Uint::from_limbs(to_claim.0),
        //     "Operator balance should match claimed amount"
        // );
    }

    Ok(())
}
