// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for {{pallet}}
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION {{version}}
//! DATE: {{date}}, STEPS: `{{cmd.steps}}`, REPEAT: `{{cmd.repeat}}`, LOW RANGE: `{{cmd.lowest_range_values}}`, HIGH RANGE: `{{cmd.highest_range_values}}`
//! WORST CASE MAP SIZE: `{{cmd.worst_case_map_values}}`
//! CPU: `{{cpuname}}`
//! EXECUTION: {{cmd.execution}}, WASM-EXECUTION: {{cmd.wasm_execution}}, CHAIN: {{cmd.chain}}, DB CACHE: {{cmd.db_cache}}

// Executed Command:
//{{#each args as |arg|}} {{arg}}{{/each}}

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for {{pallet}}.
pub trait WeightInfo {
    {{#each benchmarks as |benchmark|}}
    fn {{benchmark.name~}}
    (
        {{~#each benchmark.components as |c| ~}}
        {{c.name}}: u32, {{/each~}}
    ) -> Weight;
    {{/each}}
    {{#if (eq pallet "pallet_gear")}}
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
    {{/if}}
}

/// Weights for {{pallet}} using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
{{#if (eq pallet "frame_system")}}
impl<T: frame_system::Config> frame_system::WeightInfo for SubstrateWeight<T> {
{{else}}
impl<T: frame_system::Config> {{pallet}}::WeightInfo for SubstrateWeight<T> {
{{/if}}
{{#if (eq pallet "pallet_gear")}}
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
{{/if}}
    {{#each benchmarks as |benchmark|}}
    {{#if (eq benchmark.name "instr_call")}}
            {{#each benchmark.component_weight as |cw|}}
            {{underscore cw.slope}}, 0).saturating_mul(r.into()))
            {{/each}}
    }
    {{/if}}
    {{#each benchmark.component_ranges as |range|}}
    /// The range of component `{{range.name}}` is `[{{range.min}}, {{range.max}}]`.
    {{/each}}
    fn {{benchmark.name~}}
    (
        {{~#each benchmark.components as |c| ~}}
        {{~#if (not c.is_used)}}_{{/if}}{{c.name}}: u32, {{/each~}}
    ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `{{benchmark.base_recorded_proof_size}}{{#each benchmark.component_recorded_proof_size as |cp|}} + {{cp.name}} * ({{cp.slope}} ±{{underscore cp.error}}){{/each}}`
        //  Estimated: `{{benchmark.base_calculated_proof_size}}{{#each benchmark.component_calculated_proof_size as |cp|}} + {{cp.name}} * ({{cp.slope}} ±{{underscore cp.error}}){{/each}}`
        // Minimum execution time: {{underscore benchmark.min_execution_time}}_000 picoseconds.
        Weight::from_parts({{underscore benchmark.base_weight}}, {{benchmark.base_calculated_proof_size}})
            {{#each benchmark.component_weight as |cw|}}
            // Standard Error: {{underscore cw.error}}
            .saturating_add(Weight::from_parts({{underscore cw.slope}}, 0).saturating_mul({{cw.name}}.into()))
            {{/each}}
            {{#if (ne benchmark.base_reads "0")}}
            .saturating_add(T::DbWeight::get().reads({{benchmark.base_reads}}_u64))
            {{/if}}
            {{#each benchmark.component_reads as |cr|}}
            .saturating_add(T::DbWeight::get().reads(({{cr.slope}}_u64).saturating_mul({{cr.name}}.into())))
            {{/each}}
            {{#if (ne benchmark.base_writes "0")}}
            .saturating_add(T::DbWeight::get().writes({{benchmark.base_writes}}_u64))
            {{/if}}
            {{#each benchmark.component_writes as |cw|}}
            .saturating_add(T::DbWeight::get().writes(({{cw.slope}}_u64).saturating_mul({{cw.name}}.into())))
            {{/each}}
            {{#each benchmark.component_calculated_proof_size as |cp|}}
            .saturating_add(Weight::from_parts(0, {{cp.slope}}).saturating_mul({{cp.name}}.into()))
            {{/each}}
    }
    {{#if (eq benchmark.name "instr_call_const")}}
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            {{#each benchmark.component_weight as |cw|}}
            .saturating_add(Weight::from_parts({{underscore cw.slope}} -
            {{/each}}
    {{/if}}
    {{/each}}
}

// For backwards compatibility and tests
impl WeightInfo for () {
    {{#if (eq pallet "pallet_gear")}}
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    {{/if}}
    {{#each benchmarks as |benchmark|}}
    {{#if (eq benchmark.name "instr_call")}}
            {{#each benchmark.component_weight as |cw|}}
            {{underscore cw.slope}}, 0).saturating_mul(r.into()))
            {{/each}}
    }
    {{/if}}
    {{#each benchmark.component_ranges as |range|}}
    /// The range of component `{{range.name}}` is `[{{range.min}}, {{range.max}}]`.
    {{/each}}
    fn {{benchmark.name~}}
    (
        {{~#each benchmark.components as |c| ~}}
        {{~#if (not c.is_used)}}_{{/if}}{{c.name}}: u32, {{/each~}}
    ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `{{benchmark.base_recorded_proof_size}}{{#each benchmark.component_recorded_proof_size as |cp|}} + {{cp.name}} * ({{cp.slope}} ±{{underscore cp.error}}){{/each}}`
        //  Estimated: `{{benchmark.base_calculated_proof_size}}{{#each benchmark.component_calculated_proof_size as |cp|}} + {{cp.name}} * ({{cp.slope}} ±{{underscore cp.error}}){{/each}}`
        // Minimum execution time: {{underscore benchmark.min_execution_time}}_000 picoseconds.
        Weight::from_parts({{underscore benchmark.base_weight}}, {{benchmark.base_calculated_proof_size}})
            {{#each benchmark.component_weight as |cw|}}
            // Standard Error: {{underscore cw.error}}
            .saturating_add(Weight::from_parts({{underscore cw.slope}}, 0).saturating_mul({{cw.name}}.into()))
            {{/each}}
            {{#if (ne benchmark.base_reads "0")}}
            .saturating_add(RocksDbWeight::get().reads({{benchmark.base_reads}}_u64))
            {{/if}}
            {{#each benchmark.component_reads as |cr|}}
            .saturating_add(RocksDbWeight::get().reads(({{cr.slope}}_u64).saturating_mul({{cr.name}}.into())))
            {{/each}}
            {{#if (ne benchmark.base_writes "0")}}
            .saturating_add(RocksDbWeight::get().writes({{benchmark.base_writes}}_u64))
            {{/if}}
            {{#each benchmark.component_writes as |cw|}}
            .saturating_add(RocksDbWeight::get().writes(({{cw.slope}}_u64).saturating_mul({{cw.name}}.into())))
            {{/each}}
            {{#each benchmark.component_calculated_proof_size as |cp|}}
            .saturating_add(Weight::from_parts(0, {{cp.slope}}).saturating_mul({{cp.name}}.into()))
            {{/each}}
    }
    {{#if (eq benchmark.name "instr_call_const")}}
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            {{#each benchmark.component_weight as |cw|}}
            .saturating_add(Weight::from_parts({{underscore cw.slope}} -
            {{/each}}
    {{/if}}
    {{/each}}
}
