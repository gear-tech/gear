searchState.loadedDescShard("gclient", 2, "Reverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nSaturating absolute value, see <code>i16::saturating_abs</code>.\nSaturating absolute value, see <code>isize::saturating_abs</code>.\nSaturating absolute value, see <code>i64::saturating_abs</code>.\nSaturating absolute value, see <code>i32::saturating_abs</code>.\nSaturating absolute value, see <code>i128::saturating_abs</code>.\nSaturating absolute value, see <code>i8::saturating_abs</code>.\nAdds an unsigned integer to a non-zero value. Return …\nAdds an unsigned integer to a non-zero value. Return …\nAdds an unsigned integer to a non-zero value. Return …\nAdds an unsigned integer to a non-zero value. Return …\nAdds an unsigned integer to a non-zero value. Return …\nAdds an unsigned integer to a non-zero value. Return …\nMultiplies two non-zero integers together. Return …\nMultiplies two non-zero integers together. Return …\nMultiplies two non-zero integers together. Return …\nMultiplies two non-zero integers together. Return …\nMultiplies two non-zero integers together. Return …\nMultiplies two non-zero integers together. Return …\nMultiplies two non-zero integers together. Return …\nMultiplies two non-zero integers together. Return …\nMultiplies two non-zero integers together. Return …\nMultiplies two non-zero integers together. Return …\nMultiplies two non-zero integers together. Return …\nMultiplies two non-zero integers together. Return …\nSaturating negation. Computes <code>-self</code>, returning …\nSaturating negation. Computes <code>-self</code>, returning …\nSaturating negation. Computes <code>-self</code>, returning …\nSaturating negation. Computes <code>-self</code>, returning …\nSaturating negation. Computes <code>-self</code>, returning …\nSaturating negation. Computes <code>-self</code>, returning …\nRaise non-zero value to an integer power. Return …\nRaise non-zero value to an integer power. Return …\nRaise non-zero value to an integer power. Return …\nRaise non-zero value to an integer power. Return …\nRaise non-zero value to an integer power. Return …\nRaise non-zero value to an integer power. Return …\nRaise non-zero value to an integer power. Return …\nRaise non-zero value to an integer power. Return …\nRaise non-zero value to an integer power. Return …\nRaise non-zero value to an integer power. Return …\nRaise non-zero value to an integer power. Return …\nRaise non-zero value to an integer power. Return …\nReturns a number representing sign of <code>self</code>.\nReturns a number representing sign of <code>self</code>.\nReturns a number representing sign of <code>self</code>.\nReturns a number representing sign of <code>self</code>.\nReturns a number representing sign of <code>self</code>.\nReturns a number representing sign of <code>self</code>.\nReturns a number representing sign of <code>self</code>.\nReturns a number representing sign of <code>self</code>.\nReturns a number representing sign of <code>self</code>.\nReturns a number representing sign of <code>self</code>.\nReturns a number representing sign of <code>self</code>.\nReturns a number representing sign of <code>self</code>.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;i8&gt;.\nAttempts to convert <code>i64</code> to NonZero&lt;i64&gt;.\nAttempts to convert <code>i128</code> to NonZero&lt;i128&gt;.\nAttempts to convert <code>isize</code> to NonZero&lt;isize&gt;.\nAttempts to convert NonZero&lt;u16&gt; to NonZero&lt;u8&gt;.\nAttempts to convert NonZero&lt;u32&gt; to NonZero&lt;u8&gt;.\nAttempts to convert NonZero&lt;u32&gt; to NonZero&lt;u16&gt;.\nAttempts to convert NonZero&lt;u32&gt; to NonZero&lt;usize&gt;.\nAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;u8&gt;.\nAttempts to convert <code>u8</code> to NonZero&lt;u8&gt;.\nAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;u32&gt;.\nAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;usize&gt;.\nAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;u8&gt;.\nAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;u16&gt;.\nAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;u32&gt;.\nAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;u64&gt;.\nAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;usize&gt;.\nAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;u8&gt;.\nAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;u16&gt;.\nAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;u32&gt;.\nAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;u64&gt;.\nAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;u128&gt;.\nAttempts to convert NonZero&lt;i16&gt; to NonZero&lt;i8&gt;.\nAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;i8&gt;.\nAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;i16&gt;.\nAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;isize&gt;.\nAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;i8&gt;.\nAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;i16&gt;.\nAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;i32&gt;.\nAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;isize&gt;.\nAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;i8&gt;.\nAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;i16&gt;.\nAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;i32&gt;.\nAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;i64&gt;.\nAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;isize&gt;.\nAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;i8&gt;.\nAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;i16&gt;.\nAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;i32&gt;.\nAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;i64&gt;.\nAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;i128&gt;.\nAttempts to convert NonZero&lt;u8&gt; to NonZero&lt;i8&gt;.\nAttempts to convert NonZero&lt;u16&gt; to NonZero&lt;i8&gt;.\nAttempts to convert NonZero&lt;u16&gt; to NonZero&lt;i16&gt;.\nAttempts to convert NonZero&lt;u16&gt; to NonZero&lt;isize&gt;.\nAttempts to convert NonZero&lt;u32&gt; to NonZero&lt;i8&gt;.\nAttempts to convert NonZero&lt;u32&gt; to NonZero&lt;i16&gt;.\nAttempts to convert NonZero&lt;u32&gt; to NonZero&lt;i32&gt;.\nAttempts to convert NonZero&lt;u32&gt; to NonZero&lt;isize&gt;.\nAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;i8&gt;.\nAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;i16&gt;.\nAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;i32&gt;.\nAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;i64&gt;.\nAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;isize&gt;.\nAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;i8&gt;.\nAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;i16&gt;.\nAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;i32&gt;.\nAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;i64&gt;.\nAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;i128&gt;.\nAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;isize&gt;.\nAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;i16&gt;.\nAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;i32&gt;.\nAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;i64&gt;.\nAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;i128&gt;.\nAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;isize&gt;.\nAttempts to convert NonZero&lt;i8&gt; to NonZero&lt;u8&gt;.\nAttempts to convert NonZero&lt;i8&gt; to NonZero&lt;u16&gt;.\nAttempts to convert NonZero&lt;i8&gt; to NonZero&lt;u32&gt;.\nAttempts to convert NonZero&lt;i8&gt; to NonZero&lt;u64&gt;.\nAttempts to convert NonZero&lt;i8&gt; to NonZero&lt;u128&gt;.\nAttempts to convert NonZero&lt;i8&gt; to NonZero&lt;usize&gt;.\nAttempts to convert NonZero&lt;i16&gt; to NonZero&lt;u8&gt;.\nAttempts to convert NonZero&lt;i16&gt; to NonZero&lt;u16&gt;.\nAttempts to convert NonZero&lt;i16&gt; to NonZero&lt;u32&gt;.\nAttempts to convert NonZero&lt;i16&gt; to NonZero&lt;u64&gt;.\nAttempts to convert NonZero&lt;i16&gt; to NonZero&lt;u128&gt;.\nAttempts to convert NonZero&lt;i16&gt; to NonZero&lt;usize&gt;.\nAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;u8&gt;.\nAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;u16&gt;.\nAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;u32&gt;.\nAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;u64&gt;.\nAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;u128&gt;.\nAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;usize&gt;.\nAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;u8&gt;.\nAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;u16&gt;.\nAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;u32&gt;.\nAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;u64&gt;.\nAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;u128&gt;.\nAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;usize&gt;.\nAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;u8&gt;.\nAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;u16&gt;.\nAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;u32&gt;.\nAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;u64&gt;.\nAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;u128&gt;.\nAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;usize&gt;.\nAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;u8&gt;.\nAttempts to convert <code>u16</code> to NonZero&lt;u16&gt;.\nAttempts to convert <code>u32</code> to NonZero&lt;u32&gt;.\nAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;u16&gt;.\nAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;u32&gt;.\nAttempts to convert <code>u64</code> to NonZero&lt;u64&gt;.\nAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;u64&gt;.\nAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;u128&gt;.\nAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;usize&gt;.\nAttempts to convert <code>u128</code> to NonZero&lt;u128&gt;.\nAttempts to convert <code>usize</code> to NonZero&lt;usize&gt;.\nAttempts to convert <code>i8</code> to NonZero&lt;i8&gt;.\nAttempts to convert <code>i16</code> to NonZero&lt;i16&gt;.\nAttempts to convert <code>i32</code> to NonZero&lt;i32&gt;.\nAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;u16&gt;.\nAdds an unsigned integer to a non-zero value, assuming …\nAdds an unsigned integer to a non-zero value, assuming …\nAdds an unsigned integer to a non-zero value, assuming …\nAdds an unsigned integer to a non-zero value, assuming …\nAdds an unsigned integer to a non-zero value, assuming …\nAdds an unsigned integer to a non-zero value, assuming …\nMultiplies two non-zero integers together, assuming …\nMultiplies two non-zero integers together, assuming …\nMultiplies two non-zero integers together, assuming …\nMultiplies two non-zero integers together, assuming …\nMultiplies two non-zero integers together, assuming …\nMultiplies two non-zero integers together, assuming …\nMultiplies two non-zero integers together, assuming …\nMultiplies two non-zero integers together, assuming …\nMultiplies two non-zero integers together, assuming …\nMultiplies two non-zero integers together, assuming …\nMultiplies two non-zero integers together, assuming …\nMultiplies two non-zero integers together, assuming …\nComputes the absolute value of self without any wrapping …\nComputes the absolute value of self without any wrapping …\nComputes the absolute value of self without any wrapping …\nComputes the absolute value of self without any wrapping …\nComputes the absolute value of self without any wrapping …\nComputes the absolute value of self without any wrapping …\nWrapping absolute value, see <code>i32::wrapping_abs</code>.\nWrapping absolute value, see <code>i128::wrapping_abs</code>.\nWrapping absolute value, see <code>i16::wrapping_abs</code>.\nWrapping absolute value, see <code>i8::wrapping_abs</code>.\nWrapping absolute value, see <code>i64::wrapping_abs</code>.\nWrapping absolute value, see <code>isize::wrapping_abs</code>.\nWrapping (modular) negation. Computes <code>-self</code>, wrapping …\nWrapping (modular) negation. Computes <code>-self</code>, wrapping …\nWrapping (modular) negation. Computes <code>-self</code>, wrapping …\nWrapping (modular) negation. Computes <code>-self</code>, wrapping …\nWrapping (modular) negation. Computes <code>-self</code>, wrapping …\nWrapping (modular) negation. Computes <code>-self</code>, wrapping …\nThe addition operator <code>+</code>.\nThe addition assignment operator <code>+=</code>.\nAn async-aware version of the <code>Fn</code> trait.\nAn async-aware version of the <code>FnMut</code> trait.\nAn async-aware version of the <code>FnOnce</code> trait.\nThe bitwise AND operator <code>&amp;</code>.\nThe bitwise AND assignment operator <code>&amp;=</code>.\nThe bitwise OR operator <code>|</code>.\nThe bitwise OR assignment operator <code>|=</code>.\nThe bitwise XOR operator <code>^</code>.\nThe bitwise XOR assignment operator <code>^=</code>.\nAn endpoint of a range of keys.\nExit the operation without running subsequent phases.\nFuture returned by <code>AsyncFnOnce::async_call_once</code>.\nFuture returned by <code>AsyncFnMut::async_call_mut</code> and …\nTrait that indicates that this is a pointer or a wrapper …\nThe coroutine completed with a return value.\nMove on to the next phase of the operation as normal.\nUsed to tell an operation whether it should exit early or …\nThe trait implemented by builtin coroutine types.\nThe result of a coroutine resumption.\nUsed for immutable dereferencing operations, like <code>*v</code>.\nUsed for mutable dereferencing operations, like in <code>*v = 1;</code>.\nPerma-unstable marker trait. Indicates that the type has a …\n<code>DispatchFromDyn</code> is used in the implementation of …\nThe division operator <code>/</code>.\nThe division assignment operator <code>/=</code>.\nCustom code within the destructor.\nThe range is bounded exclusively from above and is …\nThe range is bounded inclusively from above and is …\nAn exclusive bound.\nThe version of the call operator that takes an immutable …\nThe version of the call operator that takes a mutable …\nThe version of the call operator that takes a by-value …\nUsed to specify which residuals can be converted into …\nAn inclusive bound.\nUsed for indexing operations (<code>container[index]</code>) in …\nUsed for indexing operations (<code>container[index]</code>) in mutable …\nUsed to convert a range into start and end bounds, …\nThe multiplication operator <code>*</code>.\nThe multiplication assignment operator <code>*=</code>.\nThe unary negation operator <code>-</code>.\nThe unary logical negation operator <code>!</code>.\n<code>OneSidedRange</code> is implemented for built-in range types that …\nAn internal helper for <code>split_off</code> functions indicating …\nThe resulting type after applying the <code>+</code> operator.\nThe resulting type after applying the <code>-</code> operator.\nThe resulting type after applying the <code>-</code> operator.\nOutput type of the called closure’s future.\nThe resulting type after applying the <code>!</code> operator.\nThe returned type after the call operator is used.\nThe type of the value produced by <code>?</code> when <em>not</em> …\nThe resulting type after applying the <code>*</code> operator.\nThe resulting type after applying the <code>/</code> operator.\nThe resulting type after applying the <code>%</code> operator.\nThe resulting type after applying the <code>&amp;</code> operator.\nThe resulting type after applying the <code>|</code> operator.\nThe resulting type after applying the <code>^</code> operator.\nThe resulting type after applying the <code>&lt;&lt;</code> operator.\nThe resulting type after applying the <code>&gt;&gt;</code> operator.\nThe returned type after indexing.\nA (half-open) range bounded inclusively below and …\n<code>RangeBounds</code> is implemented by Rust’s built-in range …\nA range only bounded inclusively below (<code>start..</code>).\nAn unbounded range (<code>..</code>).\nA range bounded inclusively below and above (<code>start..=end</code>).\nA range only bounded exclusively above (<code>..end</code>).\nA range only bounded inclusively above (<code>..=end</code>).\nIndicates that a struct can be used as a method receiver. …\nThe remainder operator <code>%</code>.\nThe remainder assignment operator <code>%=</code>.\nAllows retrieving the canonical type implementing <code>Try</code> that …\nThe type of the value passed to <code>FromResidual::from_residual</code>\nThe type of value this coroutine returns.\nThe left shift operator <code>&lt;&lt;</code>. Note that because this trait …\nThe left shift assignment operator <code>&lt;&lt;=</code>.\nThe right shift operator <code>&gt;&gt;</code>. Note that because this trait …\nThe right shift assignment operator <code>&gt;&gt;=</code>.\nThe range is bounded inclusively from below and is …\nThe subtraction operator <code>-</code>.\nThe subtraction assignment operator <code>-=</code>.\nThe resulting type after dereferencing.\nThe target type on which the method may be called.\nThe <code>?</code> operator and <code>try {}</code> blocks.\nThe “return” type of this meta-function.\nAn infinite endpoint. Indicates that there is no bound in …\nImplement <code>FromResidual&lt;Yeet&lt;T&gt;&gt;</code> on your type to enable …\nThe type of value this coroutine yields.\nThe coroutine suspended with a value.\nPerforms the <code>+</code> operation.\nPerforms the <code>+=</code> operation.\nConverts from <code>&amp;mut Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;mut T&gt;</code>.\nConverts from <code>&amp;Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;T&gt;</code>.\nCall the <code>AsyncFn</code>, returning a future which may borrow from …\nCall the <code>AsyncFnMut</code>, returning a future which may borrow …\nCall the <code>AsyncFnOnce</code>, returning a future which may move …\nPerforms the <code>&amp;</code> operation.\nPerforms the <code>&amp;=</code> operation.\nPerforms the <code>|</code> operation.\nPerforms the <code>|=</code> operation.\nPerforms the <code>^</code> operation.\nPerforms the <code>^=</code> operation.\nAn internal-only helper function for <code>split_off</code> and …\nUsed in <code>?</code> to decide whether the operator should produce a …\nConverts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …\nPerforms the call operation.\nPerforms the call operation.\nPerforms the call operation.\nMap a <code>Bound&lt;&amp;T&gt;</code> to a <code>Bound&lt;T&gt;</code> by cloning the contents of …\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nConverts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …\nDereferences the value.\nMutably dereferences the value.\nPerforms the <code>/</code> operation.\nPerforms the <code>/=</code> operation.\nExecutes the destructor for this type.\nSCALE encode this type to bytes, possibly with the help of …\nSCALE encode this type to bytes, possibly with the help of …\nReturns the upper bound of the range (inclusive).\nThe upper bound of the range (exclusive).\nThe upper bound of the range (exclusive).\nThe upper bound of the range (inclusive)\nEnd index bound.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nConstructs the type from its <code>Output</code> type.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nConstructs the type from a compatible <code>Residual</code> type.\nPerforms the indexing (<code>container[index]</code>) operation.\nPerforms the mutable indexing (<code>container[index]</code>) operation.\nCompute the intersection of  <code>self</code> and <code>other</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this range into the start and end bounds. Returns …\nDestructures the <code>RangeInclusive</code> into (lower bound, upper …\nExtracts the value <code>T</code> that is wrapped by <code>ControlFlow&lt;T, T&gt;</code>.\nReturns <code>true</code> if this is a <code>Break</code> variant.\nReturns <code>true</code> if this is a <code>Continue</code> variant.\nReturns <code>true</code> if the range contains no items. One-sided …\nReturns <code>true</code> if the range contains no items.\nReturns <code>true</code> if the range contains no items.\nMaps a <code>Bound&lt;T&gt;</code> to a <code>Bound&lt;U&gt;</code> by applying a function to …\nMaps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;T, C&gt;</code> by applying a …\nMaps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;B, T&gt;</code> by applying a …\nPerforms the <code>*</code> operation.\nPerforms the <code>*=</code> operation.\nPerforms the unary <code>-</code> operation.\nCreates a new inclusive range. Equivalent to writing …\nPerforms the unary <code>!</code> operation.\nPerforms the <code>%</code> operation.\nPerforms the <code>%=</code> operation.\nResumes the execution of this coroutine.\nPerforms the <code>&lt;&lt;</code> operation.\nPerforms the <code>&lt;&lt;=</code> operation.\nPerforms the <code>&gt;&gt;</code> operation.\nPerforms the <code>&gt;&gt;=</code> operation.\nReturns the lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nStart index bound.\nPerforms the <code>-</code> operation.\nPerforms the <code>-=</code> operation.\nA pointer type that uniquely owns a heap allocation of …\nA common trait that allows explicit creation of a …\nDerive macro generating an impl of the trait <code>Clone</code>.\nTrait for comparisons corresponding to equivalence …\nDerive macro generating an impl of the trait <code>Eq</code>.\nWhich kind of iterator are we turning this into?\nConversion into an <code>Iterator</code>.\nThe type of the elements being iterated over.\nThe resulting type after obtaining ownership.\nTrait for comparisons using the equality operator.\nDerive macro generating an impl of the trait <code>PartialEq</code>. …\nA helper struct for reverse ordering.\nA generalization of <code>Clone</code> to borrowed data.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nReturns a reference to the underlying allocator.\nReturns a raw mutable pointer to the <code>Box</code>’s contents.\nReturns a raw pointer to the <code>Box</code>’s contents.\nConverts to <code>Box&lt;[T], A&gt;</code>.\nConverts to <code>Box&lt;T, A&gt;</code>.\nReturns a duplicate of the value.\nReturns a new box with a <code>clone()</code> of this box’s contents.\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nUses borrowed data to replace owned data, usually by …\nCreates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nSCALE encode this type to bytes, possibly with the help of …\nTests for <code>self</code> and <code>other</code> values to be equal, and is used …\nConverts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>\nConverts a <code>&amp;mut str</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>Cow&lt;&#39;_, [T]&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn …\nReturns the argument unchanged.\nConverts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>\nConverts a type of <code>Error</code> into a box of dyn <code>Error</code>.\nConverts a <code>String</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>T</code> into a <code>Box&lt;T&gt;</code>\nConverts a <code>String</code> into a box of dyn <code>Error</code>.\nConverts a <code>str</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>str</code> into a box of dyn <code>Error</code>.\nConverts a <code>Cow</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts an <code>OsString</code> into a Box&lt;OsStr&gt; without copying or …\nConverts a <code>Cow</code> into a box of dyn <code>Error</code>.\nConverts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>Cow&lt;&#39;a, OsStr&gt;</code> into a Box&lt;OsStr&gt;, by copying …\nConverts a <code>&amp;mut CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nConverts a <code>CString</code> into a Box&lt;CStr&gt; without copying or …\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nConverts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>Cow&lt;&#39;_, str&gt;</code> into a <code>Box&lt;str&gt;</code>\nCreates a boxed <code>Path</code> from a reference.\nCreates a boxed <code>Path</code> from a reference.\nCreates a boxed <code>Path</code> from a clone-on-write pointer.\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nConverts a <code>PathBuf</code> into a Box&lt;Path&gt;.\nConverts the given <code>String</code> to a boxed <code>str</code> slice that is …\nConverts a vector into a boxed slice.\nConverts a <code>&amp;mut [T]</code> into a <code>Box&lt;[T]&gt;</code>\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nConstructs a box from a <code>NonNull</code> pointer.\nConstructs a box from a <code>NonNull</code> pointer in the given …\nConstructs a box from a raw pointer.\nConstructs a box from a raw pointer in the given allocator.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the boxed slice into a boxed array.\nConverts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConsumes the <code>Box</code>, returning the wrapped value.\nCreates an iterator from a value.\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer.\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer and …\nConverts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …\nConsumes the <code>Box</code>, returning a wrapped raw pointer.\nConsumes the <code>Box</code>, returning a wrapped raw pointer and the …\nConsumes and leaks the <code>Box</code>, returning a mutable reference, …\nTests for <code>!=</code>. The default implementation is almost always …\nTests for <code>!=</code>. The default implementation is almost always …\nAllocates memory on the heap and then places <code>x</code> into it.\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents.\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents.\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement …\nCreates owned data from borrowed data, usually by cloning.\nAttempts to convert a <code>Vec&lt;T&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nAttempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nAllocates memory on the heap then places <code>x</code> into it, …\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents on the …\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents. …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nWrites the value and converts to <code>Box&lt;T, A&gt;</code>.\nUnlike <code>Vec</code>, <code>Box&lt;[Z]&gt;</code> cannot reallocate, so we can be sure …\nContains the error value\nAn iterator over the value in a <code>Ok</code> variant of a <code>Result</code>.\nAn iterator over a reference to the <code>Ok</code> variant of a <code>Result</code>.\nAn iterator over a mutable reference to the <code>Ok</code> variant of …\nContains the success value\n<code>Result</code> is a type that represents either success (<code>Ok</code>) or …\nReturns <code>res</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …\nCalls <code>op</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …\nConverts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;Result&lt;T, E&gt;</code>) to …\nConverts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;mut Result&lt;T, E&gt;</code>) to …\nConverts from <code>&amp;mut Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;mut T, &amp;mut E&gt;</code>.\nConverts from <code>&amp;Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;T, &amp;E&gt;</code>.\nMaps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …\nMaps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …\nMaps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …\nMaps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …\nSCALE encode this type to bytes, possibly with the help of …\nConverts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;E&gt;</code>.\nReturns the contained <code>Ok</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Err</code> value, consuming the <code>self</code> value.\nConverts from <code>Result&lt;Result&lt;T, E&gt;, E&gt;</code> to <code>Result&lt;T, E&gt;</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls a function with a reference to the contained value …\nCalls a function with a reference to the contained value …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the contained <code>Err</code> value, but never panics.\nReturns a consuming iterator over the possibly contained …\nReturns the contained <code>Ok</code> value, but never panics.\nReturns <code>true</code> if the result is <code>Err</code>.\nReturns <code>true</code> if the result is <code>Err</code> and the value inside of …\nReturns <code>true</code> if the result is <code>Ok</code>.\nReturns <code>true</code> if the result is <code>Ok</code> and the value inside of …\nReturns an iterator over the possibly contained value.\nReturns a mutable iterator over the possibly contained …\nMaps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;U, E&gt;</code> by applying a function …\nMaps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;T, F&gt;</code> by applying a function …\nReturns the provided default (if <code>Err</code>), or applies a …\nMaps a <code>Result&lt;T, E&gt;</code> to a <code>U</code> by applying function <code>f</code> to the …\nMaps a <code>Result&lt;T, E&gt;</code> to <code>U</code> by applying fallback function …\nConverts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;T&gt;</code>.\nReturns <code>res</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …\nCalls <code>op</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …\nTakes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …\nTakes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …\nTransposes a <code>Result</code> of an <code>Option</code> into an <code>Option</code> of a <code>Result</code>…\nReturns the contained <code>Ok</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Err</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Err</code> value, consuming the <code>self</code> value, …\nReturns the contained <code>Ok</code> value or a provided default.\nReturns the contained <code>Ok</code> value or a default\nReturns the contained <code>Ok</code> value or computes it from a …\nReturns the contained <code>Ok</code> value, consuming the <code>self</code> value, …\nA thread-safe reference-counting pointer. ‘Arc’ stands …\nA barrier enables multiple threads to synchronize the …\nA <code>BarrierWaitResult</code> is returned by <code>Barrier::wait()</code> when …\nA Condition Variable\nContains the error value\nContains the error value\n<code>Exclusive</code> provides only <em>mutable</em> access, also referred to …\nA value which is initialized on the first access.\nA type alias for the result of a lock method which can be …\nAn RAII mutex guard returned by <code>MutexGuard::map</code>, which can …\nRAII structure used to release the shared read access of a …\nRAII structure used to release the exclusive write access …\nA mutual exclusion primitive useful for protecting shared …\nAn RAII implementation of a “scoped lock” of a mutex. …\nInitialization value for static <code>Once</code> values.\nContains the success value\nContains the success value\nA low-level synchronization primitive for one-time global …\nA synchronization primitive which can nominally be written …\nState yielded to <code>Once::call_once_force()</code>’s closure …\nA type of error which can be returned whenever a lock is …\nThe lock could not be acquired because another thread …\nA re-entrant mutual exclusion lock\nAn RAII implementation of a “scoped lock” of a …\nA reader-writer lock\nRAII structure used to release the shared read access of a …\nRAII structure used to release the exclusive write access …\nAn enumeration of possible errors associated with a …\nA type alias for the result of a nonblocking locking …\nA uniquely owned <code>Arc</code>.\nA type indicating whether a timed wait on a condition …\n<code>Weak</code> is a version of <code>Arc</code> that holds a non-owning reference …\nThe lock could not be acquired at this time because the …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nProvides a raw pointer to the data.\nReturns a raw pointer to the object <code>T</code> pointed to by this …\nConverts to <code>Arc&lt;[T]&gt;</code>.\nConverts to <code>Arc&lt;T&gt;</code>.\nAtomic types\nPerforms an initialization routine once and only once. The …\nPerforms the same function as <code>call_once()</code> except ignores …\nClear the poisoned state from a mutex.\nClear the poisoned state from a lock.\nMakes a clone of the <code>Arc</code> pointer.\nMakes a clone of the <code>Weak</code> pointer that points to the same …\nComparison for two <code>Arc</code>s.\nComparison for two <code>UniqueArc</code>s.\nReturns a raw pointer to the underlying data.\nReturns a raw pointer to the underlying data.\nReturns a raw pointer to the underlying data.\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nCreates an empty <code>[T]</code> inside an Arc\nCreates a new <code>Arc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.\nCreates an empty str inside an Arc\nCreates an empty CStr inside an Arc\nConstructs a new <code>Weak&lt;T&gt;</code>, without allocating memory. …\nCreates a <code>Condvar</code> which is ready to be waited on and …\nCreates a <code>Mutex&lt;T&gt;</code>, with the <code>Default</code> value for T.\nCreates a new <code>RwLock&lt;T&gt;</code>, with the <code>Default</code> value for T.\nCreates a new lazy value using <code>Default</code> as the initializing …\nCreates a new uninitialized cell.\nDereferences the value.\nAttempts to downcast the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a …\nDowncasts the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a concrete …\nCreates a new <code>Weak</code> pointer to this allocation.\nCreates a new weak reference to the <code>UniqueArc</code>.\nDowngrades a write-locked <code>RwLockWriteGuard</code> into a …\nDrops the <code>Arc</code>.\nDrops the <code>Weak</code> pointer.\nSCALE encode this type to bytes, possibly with the help of …\nEquality for two <code>Arc</code>s.\nEquality for two <code>UniqueArc</code>s.\nEquality for two <code>OnceLock</code>s.\nMakes a <code>MappedMutexGuard</code> for a component of the borrowed …\nMakes a <code>MappedMutexGuard</code> for a component of the borrowed …\nMakes a <code>MappedRwLockReadGuard</code> for a component of the …\nMakes a <code>MappedRwLockWriteGuard</code> for a component of the …\nMakes a <code>MappedRwLockReadGuard</code> for a component of the …\nMakes a <code>MappedRwLockWriteGuard</code> for a component of the …\nForces the evaluation of this lazy value and returns a …\nForces the evaluation of this lazy value and returns a …\nConverts an atomically reference-counted string slice into …\nConverts a <code>[T; N]</code> into an <code>Arc&lt;[T]&gt;</code>.\nConverts a <code>&amp;CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the contents …\nCopies the string into a newly allocated Arc&lt;OsStr&gt;.\nConverts a <code>PathBuf</code> into an Arc&lt;Path&gt; by moving the <code>PathBuf</code> …\nConverts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …\nAllocates a reference-counted slice and moves <code>v</code>’s items …\nMove a boxed object to a new, reference-counted allocation.\nAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.\nAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.\nConverts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …\nReturns the argument unchanged.\nCopies the string into a newly allocated Arc&lt;OsStr&gt;.\nCreates an atomically reference-counted pointer from a …\nConverts an <code>OsString</code> into an Arc&lt;OsStr&gt; by moving the …\nConverts a <code>CString</code> into an Arc&lt;CStr&gt; by moving the <code>CString</code> …\nAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.\nAllocates a reference-counted slice and fills it by …\nConverts a <code>&amp;mut CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the …\nConverts a <code>T</code> into an <code>Arc&lt;T&gt;</code>\nAllocates a reference-counted slice and fills it by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new mutex in an unlocked state ready for use. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new cell with its contents set to <code>value</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes each element in the <code>Iterator</code> and collects it into an …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nBuild a <em>mutable</em> reference to an <code>Exclusive&lt;T&gt;</code> from a <em>mutable</em>…\nBuild a <em>pinned mutable</em> reference to an <code>Exclusive&lt;T&gt;</code> from a …\nConstructs an <code>Arc&lt;T&gt;</code> from a raw pointer.\nConverts a raw pointer previously created by <code>into_raw</code> back …\nConstructs an <code>Arc&lt;T, A&gt;</code> from a raw pointer.\nConverts a raw pointer previously created by <code>into_raw</code> back …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\n‘Greater than or equal to’ comparison for two <code>Arc</code>s.\n‘Greater than or equal to’ comparison for two <code>UniqueArc</code>…\nReturns a reference to the value if initialized, or <code>None</code> …\nGets the reference to the underlying value.\nReturns the contained value by cloning it.\nReturns the contained value by cloning it.\nReturns a mutable reference into the given <code>Arc</code>, if there …\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the underlying data.\nReaches into this error indicating that a lock is …\nReturns a mutable reference to the value if initialized, …\nGets the mutable reference to the underlying value.\nReturns a mutable reference to the underlying data.\nGets exclusive access to the underlying value.\nGets the mutable reference of the contents of the cell, …\nGets the mutable reference of the contents of the cell, …\nReturns a mutable reference into the given <code>Arc</code>, without …\nGets the contents of the cell, initializing it to <code>f()</code> if …\nGets the contents of the cell, initializing it to <code>f()</code> if …\nGets pinned exclusive access to the underlying value.\nReaches into this error indicating that a lock is …\nGreater-than comparison for two <code>Arc</code>s.\nGreater-than comparison for two <code>UniqueArc</code>s.\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the <code>UniqueArc</code> into a regular <code>Arc</code>.\nConverts the reference-counted slice into a …\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nConsumes this mutex, returning the underlying data.\nConsumes this <code>RwLock</code>, returning the underlying data.\nConsumes this error indicating that a lock is poisoned, …\nConsumes this <code>LazyLock</code> returning the stored value.\nConsumes the <code>OnceLock</code>, returning the wrapped value. Returns\nConsumes this lock, returning the underlying data.\nUnwrap the value contained in the <code>Exclusive</code>\nConsumes the <code>Arc</code>, returning the wrapped pointer.\nConsumes the <code>Weak&lt;T&gt;</code> and turns it into a raw pointer.\nConsumes the <code>Arc</code>, returning the wrapped pointer and …\nConsumes the <code>Weak&lt;T&gt;</code>, returning the wrapped pointer and …\nReturns <code>true</code> if some <code>call_once()</code> call has completed …\nReturns <code>true</code> if this thread is the “leader thread” for …\nDetermines whether the mutex is poisoned.\nReturns <code>true</code> if the associated <code>Once</code> was poisoned prior to …\nDetermines whether the lock is poisoned.\nDetermine whether this is the unique reference to the …\n‘Less than or equal to’ comparison for two <code>Arc</code>s.\n‘Less than or equal to’ comparison for two <code>UniqueArc</code>s.\nAcquires a mutex, blocking the current thread until it is …\nAcquires the lock, blocking the current thread until it is …\nLess-than comparison for two <code>Arc</code>s.\nLess-than comparison for two <code>UniqueArc</code>s.\nMakes a mutable reference into the given <code>Arc</code>.\nMakes a <code>MappedMutexGuard</code> for a component of the borrowed …\nMakes a <code>MappedMutexGuard</code> for a component of the borrowed …\nMakes a <code>MappedRwLockReadGuard</code> for a component of the …\nMakes a <code>MappedRwLockWriteGuard</code> for a component of the …\nMakes a <code>MappedRwLockReadGuard</code> for a component of the …\nMakes a <code>MappedRwLockWriteGuard</code> for a component of the …\nMulti-producer, multi-consumer FIFO queue communication …\nMulti-producer, single-consumer FIFO queue communication …\nInequality for two <code>Arc</code>s.\nConstructs a new <code>Arc&lt;T&gt;</code>.\nConstructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. …\nCreates a new condition variable which is ready to be …\nCreates a new mutex in an unlocked state ready for use.\nCreates a new <code>Once</code> value.\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.\nCreates a new <code>UniqueArc</code>.\nCreates a <code>PoisonError</code>.\nCreates a new barrier that can block a given number of …\nCreates a new lazy value with the given initializing …\nCreates a new uninitialized cell.\nCreates a new re-entrant lock in an unlocked state ready …\nWrap a value in an <code>Exclusive</code>\nConstructs a new <code>Arc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …\nConstructs a new <code>Arc&lt;T, A&gt;</code> in the given allocator while …\nConstructs a new <code>Arc&lt;T&gt;</code> in the provided allocator.\nConstructs a new <code>Weak&lt;T, A&gt;</code>, without allocating any …\nCreates a new <code>UniqueArc</code> in the provided allocator.\nConstructs a new <code>Arc</code> with uninitialized contents.\nConstructs a new <code>Arc</code> with uninitialized contents in the …\nConstructs a new atomically reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new atomically reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nWakes up all blocked threads on this condvar.\nWakes up one blocked thread on this condvar.\nPartial comparison for two <code>Arc</code>s.\nPartial comparison for two <code>UniqueArc</code>s.\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator. …\nSynchronization objects that employ poisoning.\nReturns <code>true</code> if the two <code>Arc</code>s point to the same allocation …\nReturns <code>true</code> if the two <code>Weak</code>s point to the same allocation …\nLocks this <code>RwLock</code> with shared read access, blocking the …\nReplaces the contained value with <code>value</code>, and returns the …\nReplaces the contained value with <code>value</code>, and returns the …\nSets the contained value.\nSets the contained value.\nInitializes the contents of the cell to <code>value</code>.\nGets the number of strong (<code>Arc</code>) pointers to this …\nGets the number of strong (<code>Arc</code>) pointers pointing to this …\nTakes the value out of this <code>OnceLock</code>, moving it back to an …\nReturns <code>true</code> if the wait was known to have timed out.\nInitializes the contents of the cell to <code>value</code> if the cell …\nAttempts to acquire this lock.\nConstructs a new <code>Arc&lt;T&gt;</code>, returning an error if allocation …\nConstructs a new <code>Arc&lt;T, A&gt;</code> in the provided allocator, …\nConstructs a new <code>Arc</code> with uninitialized contents, …\nConstructs a new <code>Arc</code> with uninitialized contents, in the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>, return an error if …\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator, …\nAttempts to acquire this <code>RwLock</code> with shared read access.\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nAttempts to lock this <code>RwLock</code> with exclusive write access.\nIf we have the only reference to <code>T</code> then unwrap it. …\nAttempts to upgrade the <code>Weak</code> pointer to an <code>Arc</code>, delaying …\nBlocks the current thread until this condition variable …\nBlocks the current thread until initialization has …\nBlocks the current thread until all threads have …\nBlocks the current thread until the cell is initialized.\nBlocks the current thread until initialization has …\nWaits on this condition variable for a notification, …\nWaits on this condition variable for a notification, …\nWaits on this condition variable for a notification, …\nBlocks the current thread until the provided condition …\nGets the number of <code>Weak</code> pointers to this allocation.\nGets an approximation of the number of <code>Weak</code> pointers …\nLocks this <code>RwLock</code> with exclusive write access, blocking …\nAn <code>AtomicBool</code> initialized to <code>false</code>.\nAn <code>AtomicIsize</code> initialized to <code>0</code>.\nAn <code>AtomicUsize</code> initialized to <code>0</code>.\nHas the effects of both <code>Acquire</code> and <code>Release</code> together: For …\nWhen coupled with a load, if the loaded value was written …\nA memory location which can be safely modified from …\nA boolean type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nTemporary implementation detail.\nAn integer type which can be safely shared between threads.\nA marker trait for primitive types which can be modified …\nA raw pointer type which can be safely shared between …\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAtomic memory orderings\nNo ordering constraints, only atomic operations.\nWhen coupled with a store, all previous operations become …\nLike <code>Acquire</code>/<code>Release</code>/<code>AcqRel</code> (for load, store, and …\nReturns a mutable pointer to the underlying <code>bool</code>.\nReturns a mutable pointer to the underlying pointer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nStores a value into the <code>bool</code> if the current value is the …\nStores a value into the pointer if the current value is …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the <code>bool</code> if the current value is the …\nStores a value into the pointer if the current value is …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the <code>bool</code> if the current value is the …\nStores a value into the pointer if the current value is …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nA “compiler-only” atomic fence.\nCreates an <code>AtomicBool</code> initialized to <code>false</code>.\nCreates a null <code>AtomicPtr&lt;T&gt;</code>.\nAn atomic fence.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nLogical “and” with a boolean value.\nPerforms a bitwise “and” operation on the address of …\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nOffsets the pointer’s address by adding <code>val</code> <em>bytes</em>, …\nOffsets the pointer’s address by subtracting <code>val</code> <em>bytes</em>, …\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nLogical “nand” with a boolean value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nLogical “not” with a boolean value.\nLogical “or” with a boolean value.\nPerforms a bitwise “or” operation on the address of …\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nOffsets the pointer’s address by adding <code>val</code> (in units of …\nOffsets the pointer’s address by subtracting <code>val</code> (in …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nLogical “xor” with a boolean value.\nPerforms a bitwise “xor” operation on the address of …\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nConverts a <code>bool</code> into an <code>AtomicBool</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>*mut T</code> into an <code>AtomicPtr&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i8</code> into an <code>AtomicI8</code>.\nReturns the argument unchanged.\nConverts an <code>u8</code> into an <code>AtomicU8</code>.\nReturns the argument unchanged.\nConverts an <code>i16</code> into an <code>AtomicI16</code>.\nReturns the argument unchanged.\nConverts an <code>u16</code> into an <code>AtomicU16</code>.\nReturns the argument unchanged.\nConverts an <code>i32</code> into an <code>AtomicI32</code>.\nReturns the argument unchanged.\nConverts an <code>u32</code> into an <code>AtomicU32</code>.\nConverts an <code>i64</code> into an <code>AtomicI64</code>.\nReturns the argument unchanged.\nConverts an <code>u64</code> into an <code>AtomicU64</code>.\nReturns the argument unchanged.\nConverts an <code>isize</code> into an <code>AtomicIsize</code>.\nReturns the argument unchanged.\nConverts an <code>usize</code> into an <code>AtomicUsize</code>.\nReturns the argument unchanged.\nGets atomic access to a <code>&amp;mut bool</code>.\nGet a mutable reference to the inner from the outer.\nGets atomic access to a pointer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet atomic access to a <code>&amp;mut i8</code>.\nGet a mutable reference to the inner from the outer.\nGet atomic access to a <code>&amp;mut u8</code>.\nGet a mutable reference to the inner from the outer.\nGet atomic access to a <code>&amp;mut i16</code>.\nGet a mutable reference to the inner from the outer.\nGet atomic access to a <code>&amp;mut u16</code>.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet atomic access to a <code>&amp;mut i32</code>.\nGet atomic access to a <code>&amp;mut u32</code>.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet atomic access to a <code>&amp;mut i64</code>.\nGet atomic access to a <code>&amp;mut u64</code>.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet atomic access to a <code>&amp;mut isize</code>.\nGet atomic access to a <code>&amp;mut usize</code>.\nGet a mutable reference to the inner from the outer.\nGets atomic access to a <code>&amp;mut [bool]</code> slice.\nGets atomic access to a slice of pointers.\nGet atomic access to a <code>&amp;mut [i8]</code> slice.\nGet atomic access to a <code>&amp;mut [u8]</code> slice.\nGet atomic access to a <code>&amp;mut [i16]</code> slice.\nGet atomic access to a <code>&amp;mut [u16]</code> slice.\nGet atomic access to a <code>&amp;mut [i32]</code> slice.\nGet atomic access to a <code>&amp;mut [u32]</code> slice.\nGet atomic access to a <code>&amp;mut [i64]</code> slice.\nGet atomic access to a <code>&amp;mut [u64]</code> slice.\nGet atomic access to a <code>&amp;mut [isize]</code> slice.\nGet atomic access to a <code>&amp;mut [usize]</code> slice.\nCreates a new <code>AtomicBool</code> from a pointer.\nCreates a new <code>AtomicPtr</code> from a pointer.\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns a mutable reference to the underlying <code>bool</code>.\nReturns a mutable reference to the underlying pointer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nGets non-atomic access to a <code>&amp;mut [AtomicBool]</code> slice.\nGets non-atomic access to a <code>&amp;mut [AtomicPtr]</code> slice.\nGet non-atomic access to a <code>&amp;mut [AtomicI8]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU8]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicI16]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU16]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicI32]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU32]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicI64]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU64]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicIsize]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicUsize]</code> slice\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nLoads a value from the bool.\nLoads a value from the pointer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nCreates a new <code>AtomicBool</code>.\nCreates a new <code>AtomicPtr</code>.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nSignals the processor that it is inside a busy-wait …\nStores a value into the bool.\nStores a value into the pointer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the bool, returning the previous value.\nStores a value into the pointer, returning the previous …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nThe message could not be sent because the channel is …\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nThis <code>sync_channel</code>’s receiving half has disconnected, so …\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nThe data could not be sent on the <code>sync_channel</code> because it …\nAn owning iterator over messages on a <code>Receiver</code>, created by …\nAn iterator over messages on a <code>Receiver</code>, created by <code>iter</code>.\nThe receiving half of Rust’s <code>channel</code> (or <code>sync_channel</code>) …\nAn error returned from the <code>recv</code> function on a <code>Receiver</code>.\nThis enumeration is the list of possible errors that made …\nAn error returned from the <code>Sender::send</code> or <code>SyncSender::send</code>\nAn error returned from the <code>send_timeout</code> method.\nThe sending-half of Rust’s synchronous <code>channel</code> type.\nThe message could not be sent because the channel is full …\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nAn iterator that attempts to yield all pending values for …\nThis enumeration is the list of the possible reasons that …\nThis enumeration is the list of the possible error …\nIf the channel is bounded, returns its capacity.\nIf the channel is bounded, returns its capacity.\nCreates a new asynchronous channel, returning the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>RecvError</code> into a <code>TryRecvError</code>.\nReturns the argument unchanged.\nConverts a <code>RecvError</code> into a <code>RecvTimeoutError</code>.\nReturns the argument unchanged.\nConverts a <code>SendError&lt;T&gt;</code> into a <code>TrySendError&lt;T&gt;</code>.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is full.\nReturns <code>true</code> if the channel is full.\nReturns an iterator that will block waiting for messages, …\nReturns the number of messages in the channel.\nReturns the number of messages in the channel.\nAttempts to wait for a value on this receiver, returning …\nAttempts to wait for a value on this receiver, returning …\nAttempts to wait for a value on this receiver, returning …\nReturns <code>true</code> if senders belong to the same channel.\nReturns <code>true</code> if receivers belong to the same channel.\nAttempts to send a value on this channel, returning it …\nWaits for a message to be sent into the channel, but only …\nWaits for a message to be sent into the channel, but only …\nCreates a new synchronous, bounded channel.\nReturns an iterator that will attempt to yield all pending …\nAttempts to receive a message from the channel without …\nAttempts to send a message into the channel without …\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nThis <code>sync_channel</code>’s receiving half has disconnected, so …\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nThe data could not be sent on the <code>sync_channel</code> because it …\nAn owning iterator over messages on a <code>Receiver</code>, created by …\nAn iterator over messages on a <code>Receiver</code>, created by <code>iter</code>.\nThe receiving half of Rust’s <code>channel</code> (or <code>sync_channel</code>) …\nAn error returned from the <code>recv</code> function on a <code>Receiver</code>.\nThis enumeration is the list of possible errors that made …\nAn error returned from the <code>Sender::send</code> or <code>SyncSender::send</code>\nThe sending-half of Rust’s asynchronous <code>channel</code> type.\nThe sending-half of Rust’s synchronous <code>sync_channel</code> type.\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nAn iterator that attempts to yield all pending values for …\nThis enumeration is the list of the possible reasons that …\nThis enumeration is the list of the possible error …\nCreates a new asynchronous channel, returning the …\nClone a sender to send to other threads.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator that will block waiting for messages, …\nAttempts to wait for a value on this receiver, returning …\nAttempts to wait for a value on this receiver, returning …\nAttempts to wait for a value on this receiver, returning …\nAttempts to send a value on this channel, returning it …\nSends a value on this synchronous channel.\nCreates a new synchronous, bounded channel.\nReturns an iterator that will attempt to yield all pending …\nAttempts to return a pending value on this receiver …\nAttempts to send a value on this channel without blocking.\nA Condition Variable\nContains the error value\nContains the error value\nA type alias for the result of a lock method which can be …\nAn RAII mutex guard returned by <code>MutexGuard::map</code>, which can …\nRAII structure used to release the shared read access of a …\nRAII structure used to release the exclusive write access …\nA mutual exclusion primitive useful for protecting shared …\nAn RAII implementation of a “scoped lock” of a mutex. …\nInitialization value for static <code>Once</code> values.\nContains the success value\nContains the success value\nA low-level synchronization primitive for one-time global …\nState yielded to <code>Once::call_once_force()</code>’s closure …\nA type of error which can be returned whenever a lock is …\nThe lock could not be acquired because another thread …\nA reader-writer lock\nRAII structure used to release the shared read access of a …\nRAII structure used to release the exclusive write access …\nAn enumeration of possible errors associated with a …\nA type alias for the result of a nonblocking locking …\nA type indicating whether a timed wait on a condition …\nThe lock could not be acquired at this time because the …\nDetermines whether the current thread is unwinding because …\nA <code>Duration</code> type to represent a span of time, typically …\nThe maximum duration.\nThe duration of one microsecond.\nThe duration of one millisecond.\nThe duration of one nanosecond.\nThe duration of one second.\nAn error which can be returned when converting a …\nA duration of zero time.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nPanics\nReturns the total number of whole microseconds contained …\nReturns the total number of whole milliseconds contained …\nReturns the number of milliseconds contained by this …\nReturns the number of milliseconds contained by this …\nReturns the total number of nanoseconds contained by this …\nReturns the number of <em>whole</em> seconds contained by this …\nReturns the number of seconds contained by this <code>Duration</code> …\nReturns the number of seconds contained by this <code>Duration</code> …\nChecked <code>Duration</code> addition. Computes <code>self + other</code>, …\nChecked <code>Duration</code> division. Computes <code>self / other</code>, …\nChecked <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nChecked <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nDivides <code>Duration</code> by <code>Duration</code> and returns <code>f32</code>.\nDivides <code>Duration</code> by <code>Duration</code> and returns <code>f64</code>.\nDivides <code>Duration</code> by <code>f32</code>.\nDivides <code>Duration</code> by <code>f64</code>.\nSCALE encode this type to bytes, possibly with the help of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Duration</code> from the specified number of days.\nCreates a new <code>Duration</code> from the specified number of hours.\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nCreates a new <code>Duration</code> from the specified number of …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreates a new <code>Duration</code> from the specified number of whole …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of weeks.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this <code>Duration</code> spans no time.\nMultiplies <code>Duration</code> by <code>f32</code>.\nMultiplies <code>Duration</code> by <code>f64</code>.\nCreates a new <code>Duration</code> from the specified number of whole …\nSaturating <code>Duration</code> addition. Computes <code>self + other</code>, …\nSaturating <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nSaturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nPanics\nPanics\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in …\nThe checked version of <code>from_secs_f32</code>.\nThe checked version of <code>from_secs_f64</code>.\nAn identifier used to match public keys against sr25519 …\nThe byte length of public key\nAn Schnorrkel/Ristretto x25519 (“sr25519”) key pair.\nAn Schnorrkel/Ristretto x25519 (“sr25519”) public key.\nThe byte length of signature\nAn Schnorrkel/Ristretto x25519 (“sr25519”) signature.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMake a new key pair from raw secret seed material.\nCalls <code>U::from(self)</code>.\nGenerate output bytes from the given VRF configuration.\nGet the public key.\nVerify a signature on a message. Returns <code>true</code> if the …\nSchnorrkel VRF related types and operations.\nVRF input.\nVRF pre-output type suitable for schnorrkel operations.\nVRF proof type suitable for schnorrkel operations.\nVRF input ready to be used for VRF sign and verify …\nVRF signature data\nTranscript ready to be used for VRF related operations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap transcript to <code>VrfSignData</code>.\nGenerate output bytes from the given VRF configuration.\nBuild a new transcript instance.\nBuild a new instance ready to be used for VRF signer and …\nVRF pre-output.\nVRF proof.\nAdd some extra data to be signed.\nInformation related to a child state.\nA child trie of default type.\nType of child. It does not strictly define different child …\nThis is the one used by default.\nIf runtime module ensures that the child key is a unique …\nStorage key of a child trie, it contains the prefix to the …\nDifferent possible state version.\nStruct containing data needed for a storage.\nStorage change set\nChild trie storage data.\nStorage data associated to a <code>StorageKey</code>.\nStorage key.\nMap of data to use in a storage, it is a collection of …\nThreshold size to start using trie value nodes in state.\nStorage key with read/write tracking information.\nOld state version, no value nodes.\nNew state version can use value nodes.\nAdd a storage read to this key.\nAdd a storage write to this key.\nBlock hash\nA list of changes\nAssociated child info for a child trie.\nReturns the type for this child info.\nChildren trie storage data. Key does not include prefix, …\nChild data for storage.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nTransform a prefixed key into a tuple of the child type …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCheck if this key has been “read”, i.e. it exists in …\nCheck if this key has been “written”, i.e. a new value …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet inner key, this should only be needed when writing …\nReturns the full location in the direct parent of this …\nReturns byte sequence (keyspace) that can be use by …\nCreate a default <code>TrackedStorageKey</code>\nCreate a prefixed storage key from its byte array …\nTry to get a child type from its <code>u32</code> representation.\nInstantiates child information for a default child trie of …\nSame as <code>new_default</code> but with <code>Vec&lt;u8&gt;</code> as input.\nCreate a prefixed storage key reference.\nReturns the location reserved for this child trie in their …\nReturn the full location in the direct parent of this trie.\nReturns a reference to the location in the direct parent of\nTop trie storage data.\nTry to update with another instance, return false if both …\nList of all well known keys and prefixes in storage.\nWhitelist this key.\nPrefix of child storage keys.\nWasm code of the runtime.\nPrefix of the default child storage keys in the top trie.\nCurrent extrinsic index (u32) is stored under this key.\nNumber of wasm linear memory pages required for execution …\nCurrent intra-block entropy (a universally unique <code>[u8; 32]</code> …\nWhether a key is a child storage key.\nWhether a key is a default child storage key.\nReturns if the given <code>key</code> starts with …\nKey type for generic Bandersnatch key.\nKey type for generic BLS12-377 key.\nKey type for generic BLS12-381 key.\nKey type for generic ECDSA key.\nKey type for (ECDSA,BLS12-377) key pair\nKey type for (ECDSA,BLS12-381) key pair\nKey type for generic Ed25519 key.\nKey type for generic Sr25519 key.\nA task executor that can be used in tests.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>Self</code>.\nThe context in which a call is done.\nCode execution engine.\nCould not find the <code>:code</code> in the externalities while …\nExternalities error type.\nThe Substrate externalities.\nExtension for the <code>Externalities</code> trait.\nSomething that can fetch the runtime <code>:code</code>.\nType that implements <code>FetchRuntimeCode</code> and always returns …\nThe call is happening in some offchain context.\nThe call is happening in some on-chain context like …\nA trait that allows reading version information from the …\nAn extension that provides functionality to read version …\nThe Wasm code of a Substrate runtime.\nSomething that can spawn essential tasks (blocking and …\nSomething that can spawn tasks (blocking and non-blocking) …\nWrapper to use a <code>u8</code> slice or <code>Vec</code> as <code>FetchRuntimeCode</code>.\nCall a given method in the runtime.\nRead child runtime storage.\nGet child storage value hash.\nGet the trie root of a child storage map.\nClear child storage entries which keys are start with the …\nClear a child storage entry (<code>key</code>) of current contract …\nClear storage entries which keys are start with the given …\nClear a storage entry (<code>key</code>) of current contract being …\nThe code fetcher that can be used to lazily fetch the code.\n…\nDeregister and drop extension of <code>T</code> type.\nCreate an empty instance.\nWhether a child storage entry exists.\nWhether a storage entry exists.\nTries to find a registered extension and returns a mutable …\nFetch the runtime <code>:code</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\n…\n…\nThe hash of <code>code</code>.\nThe optional heap pages this <code>code</code> should be executed with.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClear an entire child storage.\nCreates a new instance of the extension given a version …\nReturns the key immediately following the given key, if it …\nReturns the key immediately following the given key, if it …\nSet or clear a child storage entry.\nSet or clear a storage entry (<code>key</code>) of current contract …\n…\nReads the runtime version information from the given wasm …\n…\nRegister extension <code>ext</code>.\n…\nSet child storage entry <code>key</code> of current contract being …\nWrite a key value pair to the offchain storage database.\nSet storage entry <code>key</code> of current contract being called …\n…\nSpawn the given non-blocking future.\nSpawn the given blocking future.\nSpawn the given non-blocking future.\nSpawn the given blocking future.\nRead runtime storage.\nAppend storage item.\nCommit the last transaction started by …\nGet storage value hash.\nIndex specified transaction slice and store it.\nRenew existing piece of transaction storage.\nRollback the last transaction started by …\nGet the trie root of the current storage map.\nStart a new nested transaction.\n…\nLittle-endian large integer type 256-bit unsigned integer.\nLittle-endian large integer type 512-bits unsigned integer.\nThe accuracy of this type.\nAn opaque 32-byte cryptographic identifier.\nIt’s a 20 byte representation.\nIt’s a 32 byte representation.\nAll extrinsics are allowed to be included in this block.\nSignature verify that can work with any known signature …\nThe result of applying of an extrinsic.\nSame as <code>ApplyExtrinsicResult</code> but augmented with …\nAn arithmetic error.\nAn arithmetic error.\nArithmetic errors.\nA bad origin.\nA bad origin.\nAccount cannot exist with the funds that would be given.\nAccount cannot receive the assets.\nThe borrowed mode that wraps a <code>&amp;&#39;static str</code>.\nSomething that is bound to a fixed <code>RuntimeAppPublic</code>.\nA bounded map based on a B-Tree.\nA bounded set based on a B-Tree.\nA bounded slice.\nA bounded vector.\nSomething that can build the genesis storage of a module.\nComplex storage builder stuff.\nAccount cannot be created.\nAccount cannot be created for a held balance.\nFailed to lookup some data.\nFailed to lookup some data.\nCommit the transaction.\nA message from the runtime to the consensus engine. This …\nConsensus engine unique ID.\nAt least one consumer is remaining so the account cannot …\nAt least one consumer is remaining so the account cannot …\nThe state is corrupt; this is generally not going to fix …\nThe state is corrupt; this is generally not going to fix …\nType which has a particular kind of crypto associated with …\nAn identifier for a specific cryptographic algorithm used …\nPrecision of this fixed point implementation. It should be …\nA <strong>data structure</strong> that can be deserialized from any data …\nA data structure that can be deserialized without …\nGeneric header digest.\nDigest item that is able to encode/decode ‘system’ …\nReason why a dispatch call failed.\nResult of a <code>Dispatchable</code> which contains the <code>DispatchResult</code> …\nThis type specifies the outcome of dispatching a call to a …\nThis is the legacy return type of <code>Dispatchable</code>. It is …\nReturn type of a <code>Dispatchable</code> which contains the …\nDivision by zero.\nAn ECDSA/SECP256k1 signature.\nAn SECP256k1/ECDSA identity (actually, the Blake2 hash of …\nAn Ed25519 signature.\nAn Ed25519 identity.\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nThe encoded justification specific to a consensus engine.\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nResources exhausted, e.g. attempt to read/write data which …\nResources exhausted, e.g. attempt to read/write data which …\nConfines the kind of extrinsics that can be included in a …\nA fixed point number representation in the range. <em>Fixed </em>…\nA fixed point number representation in the range. <em>Fixed </em>…\nSomething that implements a decimal fixed point number.\nInteger types that can be used to interact with …\nA fixed point number representation in the range. <em>Fixed </em>…\nA fixed point number representation in the range. <em>Fixed </em>…\nFunds exist but are frozen.\nFunds are unavailable.\nAn identifier for this application-specific key type.\nIt’s an account ID (pubkey).\nIt’s an account index.\nThe underlying data type used for this fixed point number.\nThe data type used to build this per-thingy.\nGet the inner type of a <code>PerThing</code>.\nAn abstraction over justification for a block’s validity …\nCollection of justifications for a given block, multiple …\nAn identifier for a type of cryptographic key.\nA value of type <code>L</code>.\nToo many transactional layers have been spawned.\nThe number of bytes of the module-specific <code>error</code> field …\nA custom error in a module.\nA custom error in a module.\nReason why a pallet call failed.\nA multi-format address wrapper for on-chain accounts.\nSignature verify that can work with any known signature …\nPublic key for any known crypto algorithm.\nA transactional layer was expected, but does not exist.\nThere are no providers so the account cannot be created.\nThere are no providers so the account cannot be created.\nWithdrawal would cause unwanted loss of account.\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nInherents are allowed to be included.\nSome part of the balance gives the only provider reference …\nSimple blob to hold an extrinsic without committing to its …\nSimple blob that hold a value in an encoded form without …\nSome error occurred.\nSome other thing. Unsupported and experimental.\nSome error occurred.\nOverflow.\nThe owned mode that wraps a <code>String</code>.\nThe pair key type of this crypto.\nSomething that implements a fixed point ration with an …\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA pre-runtime digest.\nThe <code>RuntimeAppPublic</code> this type is bound to.\nA wrapper for any rational number with a 128 bit numerator …\nIt’s some arbitrary raw bytes.\nA value of type <code>R</code>.\nRollback the transaction.\nRoot origin is not allowed.\nRoot origin is not allowed.\nThe rounding method to use for unsigned quantities.\nRuntime interface for an application’s public key.\nAn indication for the light clients that the runtime …\nA string that wraps a <code>&amp;&#39;static str</code> in the runtime and …\nIndicates if this fixed point implementation is signed or …\nConvenience type to work around the highly unergonomic …\nSaturating arithmetic operations, returning maximum or …\nPut a Seal on it. This is only used by native code, and is …\nA <strong>data structure</strong> that can be serialized into any data …\nThe signature that will be generated when signing with the …\nAn Sr25519 signature.\nAn Sr25519 identity.\nDifferent possible state version.\nStruct containing data needed for a storage.\nChild trie storage data.\nSimple 4 byte identifier.\nAn error to do with tokens.\nAn error to do with tokens.\nDescription of what went wrong when trying to complete an …\nThere are too many consumers so the account cannot be …\nThere are too many consumers so the account cannot be …\nDescribes on what should happen with a storage transaction.\nThe number of transactional layers has been reached, or we …\nThe number of transactional layers has been reached, or we …\nErrors related to transactional storage layers.\nThe error type used as return type in try runtime hooks.\nProvide a simple 4 byte identifier for a type.\nSome resource (e.g. a preimage) is unavailable right now. …\nSome resource (e.g. a preimage) is unavailable right now. …\nUnderflow.\nThe asset in question is unknown.\nOperation is not supported by the asset.\nA data type larger than <code>Self::Inner</code>, used to avoid …\nGet the upper type of a <code>PerThing</code>.\nOld state version, no value nodes.\nNew state version can use value nodes.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nA weakly bounded vector.\nPrecision of this fixed point implementation.\nAdd a value and return the result.\nAdd a value and return the result.\nAdd a value and return the result.\nAdd a value and return the result.\nReturns all public keys for this application in the …\nReturns a reference to the underlying allocator.\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nAppend a justification. Returns false if a justification …\nReturn a <code>BoundedSlice</code> with the content and bound of <code>Self</code>.\nReturns <code>Some</code> if this entry is the <code>Consensus</code> entry.\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nReturns a raw mutable pointer to the vector’s buffer, or …\nExtracts a mutable slice of the entire vector.\nReturns a <code>NonNull</code> pointer to the vector’s buffer, or a …\nReturns Some if <code>self</code> is a <code>DigestItem::Other</code>.\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nReturns <code>Some</code> if this entry is the <code>PreRuntime</code> entry.\nReturns a raw pointer to the vector’s buffer, or a …\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\nReturns <code>Some</code> if this entry is the <code>Seal</code> entry.\nExtracts a slice containing the entire vector.\nChecks that <code>$x</code> is equal to <code>$y</code> with an error rate of <code>$error</code>.\nSame as <code>assert_eq_error_rate</code>, but intended to be used with …\nAssimilate the storage for this module into pre-existing …\nInfinite precision unsigned integer for substrate runtime.\nGet the bound of the type in <code>usize</code>.\nGet the bound of the type in <code>usize</code>.\nGet the bound of the type in <code>usize</code>.\nGet the bound of the type in <code>usize</code>.\nBuild a bounded btree-map from the given literals.\nSame as <code>Vec::resize</code>, but if <code>size</code> is more than <code>Self::bound</code>, …\nBuild a bounded vec from the given literals.\nCreate the module genesis storage into the given <code>storage</code> …\nBuild the storage out of this builder.\nReturns the total number of elements the vector can hold …\nReturns the smallest integer greater than or equal to a …\nAddition. Simply tries to unify the denominators and add …\nChecked division for integer type <code>N</code>. Equal to <code>self / d</code>.\nCreates <code>self</code> from an integer number <code>int</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nChecked multiplication for integer type <code>N</code>. Equal to …\nDivide by another value with custom rounding, returning …\nDivide by another value with custom rounding, returning …\nDivide by another value with custom rounding, returning …\nDivide by another value with custom rounding, returning …\nSubtraction. Simply tries to unify the denominators and …\nAssociated child info for a child trie.\nChildren trie storage data. Key does not include prefix, …\nClears the map, removing all elements.\nClears the set, removing all elements.\nExactly the same semantics as <code>Vec::clear</code>.\nClears the vector, removing all values.\nOverwrites the contents of <code>self</code> with a clone of the …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by cloning the …\nTry to match this to a <code>Self::Consensus</code>, check <code>id</code> matches …\nDivide by another value, returning <code>None</code> in the case of an …\nDivide by another value, returning <code>None</code> in the case of an …\nDivide by another value, returning <code>None</code> in the case of an …\nDivide by another value, returning <code>None</code> in the case of an …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value with custom rounding, returning …\nMultiply by another value with custom rounding, returning …\nMultiply by another value with custom rounding, returning …\nMultiply by another value with custom rounding, returning …\nGet a conversion of the first digest item that …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by copying the …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nCalls a given macro a number of times with a set of fixed …\nCreate a const <code>RuntimeString</code>.\nProvides some utilities to define a piecewise linear …\nReturn the denominator.\nChild data for storage.\nTry to decode this <code>OpaqueValue</code> into the given concrete …\nConsume self and return the number of parts per thing.\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nSee <code>PerThing::deconstruct</code>.\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nConsume self and return the number of parts per thing.\nRemoves consecutive repeated elements in the vector …\nRemoves all but the first of consecutive elements in the …\nRemoves all but the first of consecutive elements in the …\nCreates an empty <code>Vec&lt;T&gt;</code>.\nDeserialize this value from the given Serde deserializer.\nDivide by a value and return the result.\nDivide by a value and return the result.\nDivide by a value and return the result.\nDivide by a value and return the result.\nExact same semantics as <code>Vec::drain</code>.\nRemoves the subslice indicated by the given range from the …\nReturns a ‘referencing view’ for this digest item.\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nSCALE encode this type to bytes, possibly with the help of …\nModule specific error value.\nThe actual <code>DispatchResult</code> indicating whether the dispatch …\nReturns the left value\nReturns the right value\nClones and appends all elements in a slice to the <code>Vec</code>.\nGiven a range <code>src</code>, clones a slice of elements in that …\nCreates an iterator which uses a closure to determine if …\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…\nBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s\nMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nReturns the largest integer less than or equal to a number.\nCreate <code>Self</code> from <code>t</code> without any checks. Logs warnings if …\nForces the insertion of <code>element</code> into <code>self</code> retaining all …\nForces the insertion of <code>element</code> into <code>self</code> retaining all …\nForces the insertion of <code>s</code> into <code>self</code> truncating first if …\nCreates a <code>String</code> using interpolation of runtime …\nConvenience macro to use the format! interface to get a …\nReturns the fractional part.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild from a raw <code>n/d</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAllocates a <code>Vec&lt;u8&gt;</code> and fills it with a UTF-8 string.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and moves <code>s</code>’s items into it.\nConverts a clone-on-write slice into a vector.\nConverts a boxed slice into a vector by transferring …\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nReturns the argument unchanged.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nConverts a <code>CString</code> into a Vec&lt;u8&gt;.\nTurns a non-empty list into a Vec.\nTurn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nConverts the given <code>String</code> to a vector <code>Vec</code> that holds …\nConverts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an encoded extrinsic to an <code>OpaqueExtrinsic</code>.\nConverts a fraction into <code>Self</code>.\nConvert from a <code>float</code> value.\nConvert from a <code>float</code> value.\nConvert from a <code>float</code> value.\nConvert from a <code>float</code> value.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nSee <code>PerThing::from_float</code>.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nSee <code>PerThing::from_float</code>.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nSee <code>PerThing::from_float</code>.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nSee <code>PerThing::from_float</code>.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nSee <code>PerThing::from_float</code>.\nSame as <code>Self::from_float</code>.\nBuilds this type from an integer number.\nCreate a new instance from the given <code>inner</code> value.\nCreate a new instance from the given <code>inner</code> value.\nCreate a new instance from the given <code>inner</code> value.\nCreate a new instance from the given <code>inner</code> value.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.")