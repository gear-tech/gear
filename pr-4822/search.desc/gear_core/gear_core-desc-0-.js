searchState.loadedDescShard("gear_core", 0, "Gear core.\nVector with limited len realization.\nModule for checked code.\nCosts module.\nEnvironment for running a module.\nExecution settings\nGas module.\nThis module is used to instrument a Wasm module with gas …\nBase identifiers for messaging primitives.\nModule for memory and allocations context.\nMessage processing module.\nModule for memory pages.\nBasic struct for working with integer percentages.\nModule for programs.\nGas reservation structures.\nThis module contains types commonly used as output in RPC …\nString with limited length implementation\nThe module provides primitives for all available regular …\nUtility functions.\nLimited len vector. <code>T</code> is data type. <code>E</code> is overflow error …\nMaximum length of the vector.\nMax payload size which one message can have (8 MiB).\nPanic buffer which size cannot be bigger then max allowed …\nPayload type for message.\nPayload size exceed error\nWrapper for payload slice.\nBuffer which size cannot be bigger then max allowed …\nRuntime buffer size exceed error\nExtends the array to its limit and fills with the …\nCreates limited vector filled with the specified <code>value</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns ref to the internal data.\nReturns ref to the internal data.\nReturns mut ref to the internal data slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDestruct limited vector and returns inner vector.\nGet payload length as u32.\nGet payload length as u32.\nReturns max len which this type of limited vector can have.\nConstructs a new, empty <code>LimitedVec&lt;T&gt;</code>.\nCreates new limited vector with default initialized …\nGet slice of the payload.\nClones self into vector.\nAppend <code>values</code> to the end of vector.\nTry to create a new PayloadSlice.\nTries to create new limited vector of length <code>len</code> with …\nAppend <code>values</code> to the begin of vector.\nAppend <code>value</code> to the end of vector.\nName of exports allowed on chain.\nA binary reader for WebAssembly modules.\nContains original and instrumented binary code of a …\nThe newtype contains the Code instance and the …\nDescribes why the code is not valid Gear program.\nMetadata for the code.\nError occurred during calculating the cost of the …\nData section.\nThe provided code contains data section error.\nData section error in WASM module.\nData segment amount exceeds the limit.\nThe imported function is declared multiple times.\nElement section.\nData segment end address is out of static memory.\nData segment end address is out of possible 32 bits …\nMemory entry not found in import section.\nThe provided code contains excess function export.\nExport section.\nThe provided code contains export error.\nExport error in WASM module.\nExport references to an import function, which is not …\nExport references to an import global, which is not …\nFunction (Code) section.\nError occurred during injecting <code>gear_gas</code> global.\nError occurred during injecting gas metering instructions.\nData section overlaps gear stack.\nGlobal section.\nImport section.\nThe provided code contains import error.\nImport error in WASM module.\nIncorrect global export index. Can occur when export …\nUnsupported initialization of gear stack end global …\nUnsupported initialization of data segment.\nInstantiated section sizes for charging during module …\nError occurred while trying to get the instruction cost.\nError occurred during instrumentation WASM module.\nWASM module instrumentation error.\nFailed to instrument code on weights version.\nStatus of the instrumentation.\nCode is instrumented on weights version.\nThe newtype contains the instrumented code and the …\nThe newtype contains the InstrumentedCode instance and the …\nThe signature of an exported function is invalid.\nThe signature of an imported function is invalid.\nThe WASM module has invalid count of static memory pages.\nDefines maximal permitted count of memory pages.\nThe provided code contains memory error.\nMemory error in WASM module.\nModule encode/decode error.\nExporting mutable globals is restricted by the Gear …\nGear stack end offset is not aligned to wasm page size.\nSection not found.\nCode is not instrumented yet.\nSection not supported.\nGear stack end is out of static memory.\nName of exports required on chain (only 1 of these is …\nThe provided code doesn’t contain the required <code>init</code> or …\nThe provided code contains section error.\nSection error in WASM module.\nSection name in WASM module.\nThe provided code contains stack end error.\nStack end error in WASM module.\nError occurred during stack height instrumentation.\nStart section.\nError occurred during injecting <code>gr_system_break</code> import.\nTable section.\nConfiguration for <code>Code::try_new_mock_</code>. By default all …\nType section.\nUnexpected import kind.\nThe imported function is not supported by the Gear …\nValidation by wasmparser failed.\nReturns reference to the instrumented binary code.\nCheck and canonize stack end\nCheck data section\nCheck exports (wasm contains init or handle exports)\nCheck imports (check that all imports are valid syscalls …\nCheck mutable global exports\nCheck start section (not allowed for programs)\nCheck table section\nReturns reference to Code.\nReturns corresponding id (hash) for the code.\nReturns the code section size in bytes.\nReturns the data section size in bytes.\nLimit of data section amount\nReturns the element section size in bytes.\nExport <code>STACK_HEIGHT_EXPORT_NAME</code> global\nReturns the code exports.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates the instance from the hash and incompatible with …\nCreates the instance from the precalculated hash without …\nReturns the global section size in bytes.\nReturns instantiated section sizes used for charging …\nReturns the version of the instructions.\nReturns the instrumentation status.\nReturns the instrumented code.\nInstrumented code.\nReturns the instrumented code length.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the instance and returns the instrumented code.\nConverts the metadata into the failed instrumentation …\nConsumes this instance and returns the instrumented code …\nConsumes this instance and returns the instrumented and …\nDecomposes this instance.\nDecomposes this instance into parts.\nMake wasmparser validation\nGet this error’s message.\nReturns the code metadata.\nCode metadata.\nCreates a new instance of the section sizes.\nCreates a new instance of the instrumented code.\nCreates a new instance of the code metadata.\nCalculates the id (hash) of the raw binary code and …\nNew default config without exports checks.\nGet the offset within the Wasm binary where the error …\nReturns the original code.\nReturns the original code length.\nReturns the stack end page.\nStack height limit\nReturns the static pages count from memory import.\nLimit on the number of tables.\nReturns the table section size in bytes.\nCreate the code by checking and instrumenting <code>original_code</code>…\nCreate new code for mock goals with const or no …\nCreate new code for mock goals with custom instrumentation …\nReturns the type section size in bytes.\nInstrumentation version\nActual amount of data segments.\nLimit of data segments.\nIndex of the import.\nKind of the import.\nInstrumented code length.\nVersion of the instruction weights used for …\nVersion of the instruction weights used for …\nCost of calling <code>gr_program_id</code>.\nCost of calling <code>alloc</code>.\nCost of calling <code>gr_block_height</code>.\nCost of calling <code>gr_block_timestamp</code>.\nChain blocks amount.\nBytes amount.\nSome actions or calls amount.\nGas cost per some type of action or data size.\nEnumerates syscalls that can be charged by gas meter.\nCost of calling <code>gr_create_program</code>, taking in account …\nCost of calling <code>gr_create_program_wgas</code>, taking in account …\nDatabase costs.\nCost of calling <code>gr_debug</code>, taking in account payload size.\nCost of calling <code>gr_env_vars</code>.\nCost of calling <code>gr_exit</code>.\nExecution externalities costs.\nCost of calling <code>free</code>.\nCost of calling <code>free_range</code>\nCost of calling <code>gr_gas_available</code>.\nModule instantiation costs.\nCode instrumentation costs.\nIO costs.\nMemory pages lazy access costs.\nCost of calling <code>gr_leave</code>.\nCost of calling <code>gr_message_id</code>.\nZero cost.\nMemory pages costs.\nCosts for message processing\nCost of calling <code>gr_random</code>.\nCost of calling <code>gr_read</code>.\nHolding in storages rent costs.\nCost of calling <code>gr_reply</code>, taking in account payload size.\nCost of calling <code>gr_reply_code</code>.\nCost of calling <code>gr_reply_commit</code>.\nCost of calling <code>gr_reply_commit_wgas</code>.\nCost of calling <code>gr_reply_deposit</code>.\nCost of calling <code>gr_reply_input</code>.\nCost of calling <code>gr_reply_input_wgas</code>.\nCost of calling <code>gr_reply_push</code>, taking in account payload …\nCost of calling <code>gr_reply_push_input</code>.\nCost of calling <code>gr_reply_to</code>.\nCost of calling <code>gr_reply_wgas</code>, taking in account payload …\nCost of calling <code>gr_reservation_reply</code>, taking in account …\nCost of calling <code>gr_reservation_reply_commit</code>.\nCost of calling <code>gr_reservation_send</code>, taking in account …\nCost of calling <code>gr_reservation_send_commit</code>.\nCost of calling <code>gr_reserve_gas</code>.\nCost of calling <code>gr_send</code>, taking in account payload size.\nCost of calling <code>gr_send_commit</code>.\nCost of calling <code>gr_send_commit_wgas</code>.\nCost of calling <code>gr_send_init</code>.\nCost of calling <code>gr_send_input</code>.\nCost of calling <code>gr_send_input_wgas</code>.\nCost of calling <code>gr_send_push</code>, taking in account payload …\nCost of calling <code>gr_send_push_input</code>.\nCost of calling <code>gr_send_wgas</code>, taking in account payload …\nCost of calling <code>gr_signal_code</code>.\nCost of calling <code>gr_signal_from</code>.\nCost of calling <code>gr_size</code>.\nCost of calling <code>gr_source</code>.\nProgram imported function call (syscall) costs.\nCost of calling <code>gr_system_reserve_gas</code>.\nCost of calling <code>gr_unreserve_gas</code>.\nCost of calling <code>gr_value</code>.\nCost of calling <code>gr_value_available</code>.\nCost of calling <code>gr_wait</code>.\nCost of calling <code>gr_wait_for</code>.\nCost of calling <code>gr_wait_up_to</code>.\nCost of calling <code>gr_wake</code>.\nCost of calling <code>alloc</code>.\nCode instrumentation cost.\nWASM module code section instantiation per byte cost.\nConsts for common pages.\nCalculate (saturating mult) cost for <code>num</code> amount of <code>T</code>.\nCost for one.\nGet cost for a token.\nWASM module data section instantiation per byte cost.\nDB costs.\nHolding message in dispatch stash cost per block.\nWASM module element section instantiation per byte cost.\nExecution externalities costs.\nCost of calling <code>free</code>.\nCost of calling <code>free_range</code>\nCost of calling <code>free_range</code> per page\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWASM module global section instantiation per byte cost.\nCost of calling <code>gr_block_height</code>.\nCost of calling <code>gr_block_timestamp</code>.\nCost of calling <code>gr_create_program_wgas</code>.\nCost per payload byte by <code>gr_create_program_wgas</code>.\nCost per salt byte by <code>gr_create_program_wgas</code>.\nCost of calling <code>gr_create_program_wgas</code>.\nCost per payload byte by <code>gr_create_program_wgas</code>.\nCost per salt byte by <code>gr_create_program_wgas</code>.\nCost of calling <code>gr_debug</code>.\nCost per payload byte by <code>gr_debug</code>.\nCost of calling <code>gr_env_vars</code>.\nCost of calling <code>gr_exit</code>.\nCost of calling <code>gr_gas_available</code>.\nCost of calling <code>gr_leave</code>.\nCost of calling <code>gr_message_id</code>.\nCost of calling <code>gr_program_id</code>.\nCost of calling <code>gr_random</code>.\nCost of calling <code>gr_read</code>.\nCost per payload byte for <code>gr_read</code>.\nCost of calling <code>gr_reply</code>.\nCost of calling <code>gr_reply_code</code>.\nCost of calling <code>gr_reply_commit</code>.\nCost of calling <code>gr_reply_commit_wgas</code>.\nCost of calling <code>gr_reply_deposit</code>.\nCost of calling <code>gr_reply_input</code>.\nCost of calling <code>gr_reply_input_wgas</code>.\nCost of calling <code>gr_reply</code> per one payload byte.\nCost of calling <code>gr_reply_push</code>.\nCost of calling <code>gr_reply_push_input</code>.\nCost per payload byte by <code>gr_reply_push_input</code>.\nCost per payload byte by <code>gr_reply_push</code>.\nCost of calling <code>gr_reply_to</code>.\nCost of calling <code>gr_reply_wgas</code>.\nCost of calling <code>gr_reply_wgas</code> per one payload byte.\nCost of calling <code>gr_reservation_reply</code>.\nCost of calling <code>gr_reservation_reply_commit</code>.\nCost of calling <code>gr_reservation_reply</code> per one payload byte.\nCost of calling <code>gr_reservation_send</code>.\nCost of calling <code>gr_reservation_send_commit</code>.\nCost of calling <code>gr_reservation_send</code> per one payload byte.\nCost of calling <code>gr_reserve_gas</code>.\nCost of calling <code>gr_send</code>\nCost of calling <code>gr_send_commit</code>.\nCost of calling <code>gr_send_commit_wgas</code>.\nCost of calling <code>gr_send_init</code>.\nCost of calling <code>gr_send_init</code>.\nCost of calling <code>gr_send_init_wgas</code>.\nCost per bytes for <code>gr_send</code>.\nCost of calling <code>gr_send_push</code>.\nCost of calling <code>gr_send_push_input</code>.\nCost per payload byte by <code>gr_send_push_input</code>.\nCost per payload byte by <code>gr_send_push</code>.\nCost of calling <code>gr_send_wgas</code>.\nCost of calling <code>gr_send_wgas</code> per one payload byte.\nCost of calling <code>gr_signal_code</code>.\nCost of calling <code>gr_signal_from</code>.\nCost of calling <code>gr_size</code>.\nCost of calling <code>gr_source</code>.\nCost of calling <code>gr_system_reserve_gas</code>\nCost of calling <code>gr_unreserve_gas</code>\nCost of calling <code>gr_value</code>.\nCost of calling <code>gr_value_available</code>.\nCost of calling <code>gr_wait</code>.\nCost of calling <code>gr_wait_for</code>.\nCost of calling <code>gr_wait_up_to</code>.\nCost of calling <code>gr_wake</code>.\nFirst read page access cost from host function call.\nFirst write page access cost from host function call.\nFirst write page access cost from host function call.\nModule instantiation costs.\nInstrumentation costs.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsts for lazy pages.\nLazy pages costs.\nLoad program allocations cost per interval.\nLoading from storage and moving it in program memory cost.\nLoading page data from storage cost.\nMemory grow cost.\nMemory grow cost.\nMemory grow per page cost.\nMemory grow per page cost.\nConst constructor\nParachain read heuristic cost.\nCode instrumentation per byte cost.\nStorage read cost.\nStorage read per byte cost.\nRent costs.\nHolding reservation cost per block.\nFirst read page access cost.\nFirst write page access cost.\nFirst write access cost for page, which has been already …\nSyscalls costs.\nWASM module table section instantiation per byte cost.\nWASM module type section instantiation per byte cost.\nUploading page data to storage cost.\nHolding message in waitlist cost per block.\nCalculate (saturating add) cost for <code>per_byte</code> amount of …\nStorage write cost.\nStorage write per byte cost.\nAn error issued during allocation.\nExternal api and data for managing memory and messages, …\nAn error issued in fallible syscall.\nComposite wait type for messages waiting.\nAn error issued in infallible syscall.\nProgram called <code>gr_wait</code> while executing message.\nProgram called <code>gr_wait_for</code> while executing message.\nProgram called <code>gr_wait_up_to</code> with insufficient gas for full\nProgram called <code>gr_wait_up_to</code> with enough gas for full …\nTrait defining type could be used as entry point for a …\nAllocate number of pages.\nConverting self into entry point name.\nGet the current block height.\nGet the current block timestamp.\nSend init message to create a new program.\nSend debug message.\nGet environment variables currently set in the system and …\nReturn the set of functions that are forbidden to be …\nFree specific page.\nFree specific memory range.\nReturns the argument unchanged.\nTell how much gas is left in running context.\nCalls <code>U::from(self)</code>.\nGet the id of the message currently being handled.\nReturn the current message context.\nGet the currently handled message payload slice.\nGet the id of program itself\nReturns a random seed for the current block with message …\nProduce reply to the current message.\nGet the reply code if the message being processed.\nComplete reply message and send it to source program.\nCreate deposit to handle reply on given message.\nPush an extra buffer into reply message.\nPush the incoming message buffer into reply message.\nGet the message id of the initial message.\nProduce reply to the current message from reservation.\nComplete reply message and send it to source program from …\nSend message to another program using gas from reservation.\nComplete message and send it to another program using gas …\nReserve some gas for a few blocks.\nSend message to another program.\nComplete message and send it to another program.\nInitialize a new incomplete message for another program …\nPush an extra buffer into message payload by handle.\nPush the incoming message buffer into message payload by …\nGet the signal code if the message being processed.\nGet the message id which signal issues from.\nSize of currently handled message payload.\nGet the source of the message currently being handled.\nDo system reservation.\nConverting entry point name into self object, if possible.\nTries to convert self into <code>DispatchKind</code>.\nUnreserve gas using reservation ID.\nValue associated with message.\nTell how much value is left in running context.\nInterrupt the program and reschedule execution for maximum.\nInterrupt the program and reschedule execution in duration.\nInterrupt the program and reschedule execution for maximum,\nWake the waiting message and move it to the processing …\nAll supported versions of execution settings\nCurrent version of execution settings.\nValues of execution settings V1\nCurrent value of existential deposit.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCurrent gas multiplier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCurrent value of mailbox threshold.\nCurrent performance multiplier.\nReturns byte representation of execution settings\nCharging error\nThe result of charging gas.\nEnum representing current type of gas counter.\nCounters owner can change gas limit and allowance counters.\nThe gas lock is provided by dispatch stash.\nThere was enough gas and it has been charged.\nGas allowance counter.\nGas allowance counter with some predefined maximum value.\nGas allowance exceeded\nRead-only representation of consumed <code>GasCounter</code>.\nGas counter with some predefined maximum gas.\nGas limit and gas allowance left.\nGas limit counter.\nAn error occurs in attempt to charge more gas than …\nThe id of the gas lock.\nThe gas lock is provided by the mailbox.\nThere was not enough gas and it hasn’t been charged.\nThe gas lock is provided by reservation.\nValue counter with some predefined maximum value.\nThe gas lock is provided by the waitlist.\nLeft gas from allowance counter.\nReport how much gas is burned.\nReport how much gas were burned.\nAccount for used gas.\nAccount for used gas allowance.\nCharge for runtime api call.\nCharge gas if enough, else just returns error.\nAccount for used gas.\nAccount for used gas allowance.\nClone the counter\nClone the counter\nClone the counter\nCurrently set gas counter type.\nReturns value of gas counter currently set.\nDecreases gas left by fetched single numeric of actual …\nReturns minimal amount of gas counters and set the type of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLeft gas from gas counter.\nReturns gas limit and gas allowance left.\nIncrease left gas by <code>amount</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReport how much gas is left.\nReport how much gas were left.\nReport how much value is left.\nReport how much gas allowance is left.\nNew limited gas counter with initial gas to spend.\nNew limited value counter with initial value to spend.\nNew limited gas allowance counter with initial value to …\nReduce gas by <code>amount</code>.\nReduce value by <code>amount</code>.\nGet gas amount.\nA type that implements <code>Rules</code> so that every instruction …\nThis type provides the functionality of <code>ConstantCostRules</code>.\nDescribes DB access weights.\nSkip per page charge.\nDescribes the weight for instantiation of the module.\nDescribes the weight for all categories of supported wasm …\nDescribes WASM code instrumentation weights.\nDescribes the upper limits on various metrics.\nCharge the specified amount for each page that the memory …\nDynamic costs for memory growth.\nDescribes the weight for memory interaction.\nDescribes the weight for renting.\nAn interface that describes instruction costs.\nDefinition of the cost schedule and other parameterization …\nThis type provides real gas cost of instructions on …\nDescribes the weight for each imported function that a …\nDescribes weights for running tasks.\nRepresents the computational time and storage space …\nWeight of calling <code>alloc</code>.\nWASM code instrumentation base cost.\nMaximum number of elements that can appear as immediate …\nThe maximum nesting level of the call stack.\nA surcharge cost to calling a function that is added per …\nThe maximum length of a program code in bytes. This limit …\nWASM module code section instantiation per byte cost.\nWASM module data section instantiation per byte cost.\nThe maximum number of wasm data segments allowed for a …\nThe weights for database access.\nUses instruction cost of <code>1</code> and disables memory growth …\nUses instruction cost of <code>1</code> and disables memory growth …\nHolding message in dispatch stash weight.\nWASM module element section instantiation per byte cost.\nWeight of calling <code>free</code>.\nWeight of calling <code>free_range</code>.\nWeight of calling <code>free_range</code> per page.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWASM module global section instantiation per byte cost.\nMaximum number of globals a module is allowed to declare.\nWeight of calling <code>gr_block_height</code>.\nWeight of calling <code>gr_block_timestamp</code>.\nWeight of calling <code>gr_create_program</code>.\nWeight per payload byte in <code>gr_create_program</code>.\nWeight per salt byte in <code>gr_create_program</code>\nWeight of calling <code>create_program_wgas</code>.\nWeight per payload byte by <code>create_program_wgas</code>.\nWeight per salt byte by <code>create_program_wgas</code>.\nWeight of calling <code>gr_debug</code>.\nWeight per payload byte by <code>gr_debug_per_byte</code>.\nWeight of calling <code>gr_env_vars</code>.\nWeight of calling <code>gr_exit</code>.\nWeight of calling <code>gr_gas_available</code>.\nWeight of calling <code>gr_leave</code>.\nWeight of calling <code>gr_message_id</code>.\nWeight of calling <code>gr_program_id</code>.\nWeight of calling <code>gr_random</code>.\nWeight of calling <code>gr_read</code>.\nWeight per payload byte by <code>gr_read</code>.\nWeight of calling <code>gr_reply</code>.\nWeight of calling <code>gr_reply_code</code>.\nWeight of calling <code>gr_reply_commit</code>.\nWeight of calling <code>gr_reply_commit_wgas</code>.\nWeight of calling <code>gr_reply_deposit</code>.\nWeight of calling <code>gr_reply_input</code>.\nWeight of calling <code>gr_reply_input_wgas</code>.\nWeight of calling <code>gr_reply</code> per one payload byte.\nWeight of calling <code>gr_reply_push</code>.\nWeight of calling <code>gr_reply_push_input</code>.\nWeight per payload byte by <code>gr_reply_push_input</code>.\nWeight per payload byte by <code>gr_reply_push</code>.\nWeight of calling <code>gr_reply_to</code>.\nWeight of calling <code>gr_reply_wgas</code>.\nWeight of calling <code>gr_reply_wgas</code> per one payload byte.\nWeight of calling <code>gr_reservation_reply</code>.\nWeight of calling <code>gr_reservation_reply_commit</code>.\nWeight of calling <code>gr_reservation_reply</code> per one payload …\nWeight of calling <code>gr_reservation_send</code>.\nWeight of calling <code>gr_reservation_send_commit</code>.\nWeight per payload byte in <code>gr_reservation_send</code>.\nWeight of calling <code>gr_reserve_gas</code>.\nWeight of calling <code>gr_send</code>.\nWeight of calling <code>gr_send_commit</code>.\nWeight of calling <code>gr_send_commit_wgas</code>.\nWeight of calling <code>gr_value_available</code>.\nWeight of calling <code>gr_send_input</code>.\nWeight of calling <code>gr_send_input_wgas</code>.\nWeight per payload byte in <code>gr_send</code>.\nWeight of calling <code>gr_send_push</code>.\nWeight of calling <code>gr_send_push_input</code>.\nWeight per payload byte by <code>gr_send_push_input</code>.\nWeight per payload byte by <code>gr_send_push</code>.\nWeight of calling <code>gr_send_wgas</code>.\nWeight per payload byte in <code>gr_send_wgas</code>.\nWeight of calling <code>gr_signal_code</code>.\nWeight of calling <code>gr_signal_from</code>.\nWeight of calling <code>gr_size</code>.\nWeight of calling <code>gr_source</code>.\nWeight of calling <code>gr_system_reserve_gas</code>\nWeight of calling <code>gr_unreserve_gas</code>\nWeight of calling <code>gr_value</code>.\nWeight of calling <code>gr_value_available</code>.\nWeight of calling <code>gr_wait</code>.\nWeight of calling <code>gr_wait_for</code>.\nWeight of calling <code>gr_wait_up_to</code>.\nWeight of calling <code>gr_wake</code>.\nTransforms a given module into one that charges gas for …\nThe weights for instantiation of the module.\nReturns the cost for the passed <code>instruction</code>.\nThe weights for individual wasm instructions.\nThe weights for WASM code instrumentation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCost per one [GearPage] host func <code>read</code> access processing …\nCost per one [GearPage] host func <code>write</code> access processing …\nCost per one [GearPage] host func <code>write after read</code> access …\nCost per one [GearPage] signal <code>read</code> processing in …\nCost per one [GearPage] signal <code>write</code> processing in …\nCost per one [GearPage] signal <code>write after read</code> processing …\nDescribes the upper limits on various metrics.\nLoad allocations weight.\nCost per one [GearPage] data loading from storage and …\nMaximum number of locals a function can have.\nHolding message in mailbox weight.\nThe minimal gas amount for message to be inserted in …\nCost per one [WasmPage] for memory growing.\nCost per one [WasmPage] for memory growing.\nReturns the costs for growing the memory using the …\nMaximum number of memory pages allowed for a program.\nThe weights for memory interaction.\nCreate a new <code>ConstantCostRules</code>.\nCreate a new <code>CustomConstantCostRules</code>.\nCost per one [GearPage]. When we read page data from …\nMaximum numbers of parameters a function can have.\nThe maximum size of a message payload in bytes.\nWASM code instrumentation per-byte cost.\nHelper procedure that makes adjustments after gas metering …\nThe weight of storage space used by proof of validity.\nThe weight of computational time used based on some …\nThe weights for renting.\nHolding reservation weight.\nReturns real gas rules that are used by pallet gear.\nMaximum allowed stack height in number of elements.\nThe maximum length of a subject in bytes used for PRNG …\nThe weights for each imported function a program is …\nWASM module table section instantiation per byte cost.\nMaximum number of elements allowed in a table.\nThe weights for executing tasks.\nWASM module type section instantiation per byte cost.\nCost per one [GearPage] uploading data to storage. Does …\nVersion of the instruction weights.\nHolding message in waitlist weight.\nProgram (actor) identifier.\nCode identifier.\nMessage identifier.\nReservation identifier.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a unique identifier by passing given argument to …\nCreates a unique identifier by passing given argument to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>ActorId</code>as bytes array.\nReturns <code>MessageId</code>as bytes array.\nReturns <code>CodeId</code>as bytes array.\nReturns <code>ReservationId</code>as bytes array.\nChecks whether <code>ActorId</code> is zero.\nChecks whether <code>MessageId</code> is zero.\nChecks whether <code>CodeId</code> is zero.\nChecks whether <code>ReservationId</code> is zero.\nCreates a new <code>ActorId</code> from a 32-byte array.\nCreates a new <code>MessageId</code> from a 32-byte array.\nCreates a new <code>CodeId</code> from a 32-byte array.\nCreates a new <code>ReservationId</code> from a 32-byte array.\nThe purpose of this module is to make it easier to import …\nReturns <code>H160</code> with possible loss of the first 12 bytes.\nReturns the ss58-check address with default ss58 version.\nReturns the ss58-check address with given ss58 version.\nCreates a new zero <code>ActorId</code>.\nCreates a new zero <code>MessageId</code>.\nCreates a new zero <code>CodeId</code>.\nCreates a new zero <code>ReservationId</code>.\nProgram (actor) identifier extension.\nCode identifier extension.\nMessage identifier extension.\nReservation identifier extension.\nSystem program identifier.\nGenerates <code>CodeId</code> from given code.\nGenerates <code>ReservationId</code> from given message and nonce.\nGenerates <code>ActorId</code> from given <code>MessageId</code>, <code>CodeId</code> and <code>salt</code>.\nGenerates <code>ActorId</code> from given <code>CodeId</code> and <code>salt</code>.\nGenerates <code>MessageId</code> for non-program outgoing message.\nGenerates <code>MessageId</code> for program outgoing message.\nGenerates <code>MessageId</code> for reply message depend on status …\nGenerates <code>MessageId</code> for signal message depend on status …\nThe error occurs in attempt to access memory outside wasm …\nAllocation error\nAllocated page is out of allowed memory interval\nPages allocations context for the running program.\nGas charge error\nMemory grow error.\nBefore and after memory grow actions.\nHost pointer type. Host pointer can be 64bit or less, to …\nInsufficient memory size\nError in attempt to make wrong size page buffer.\nThe error occurs in attempt to free-up a memory page from …\nInvalid range for free_range\nBackend wasm memory interface.\nCore memory error.\nInterval in wasm program memory.\nInconsistency in memory parameters provided for wasm …\nMemory size exceeds max pages\nGrow handler do nothing implementation\nBuffer for gear page data.\nAlias for inner type of page buffer.\nThe error occurs when a program tries to allocate more …\nStack end is out of static memory\nAfter grow action\nAllocates specified number of continuously going pages and …\nBefore grow action\nFree specific memory page.\nTry to free pages in range. Will only return error if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates PageBuf from inner buffer. If the buffer has the …\nReturns native addr of wasm memory buffer in wasm executor\nGet buffer addr unsafe.\nGrow memory by number of pages.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecomposes this instance and returns <code>static_pages</code>, …\nReturns new page buffer with zeroed data.\nInterval offset in bytes.\nReads memory contents at the given offset into a buffer.\nReturn current size of the memory.\nInterval size in bytes.\nConvert <code>MemoryInterval</code> to <code>[u8; 8]</code> bytes. <code>0..4</code> - <code>offset</code> <code>4..8</code>…\nConvert <code>[u8; 8]</code> bytes to <code>MemoryInterval</code>. <code>0..4</code> - <code>offset</code> <code>4..8</code>…\nNew allocations context.\nSet memory region at specific pointer.\nMax allowed memory size\nMemory size\nMemory size\nMemory size\nAllocated page\nStack end\nStatic memory size\nStatic memory size\nStatic memory size\nSuccess reply was created by system automatically.\nContext outcome.\nContext outcome dispatches and awakening ids.\nContext settings.\nStore of previous message execution context.\nMessage with entry point.\nEntry point for dispatch processing.\nError reply.\nReason of error reply creation.\nError reply was created due to underlying execution error.\nGas limit type for message.\nCommon handle.\nMessage for Handle entry point. Represents a standard …\nHandle message packet.\nIncoming message with entry point and previous execution …\nIncoming message.\nInitialization.\nMessage for Init entry point. Used to initiate a newly …\nInit message packet.\nSuccess reply was created by actor manually.\nAn entity that is used for interaction between actors. Can …\nContext of currently processing incoming message.\nMessage details data.\nMessage packet.\nMessage has died in Waitlist as out of rent one.\nReply details.\nHandle reply.\nEnum representing reply code with reason of its creation.\nReply details data.\nMessage for Reply entry point. <code>ReplyMessage</code> is unique …\nReply message packet.\nSalt type for init message.\nMessage details.\nSystem signal.\nSignal details data.\nMessage for signal entry point.\nStored message with entry point.\nStored message with entry point and previous execution …\nStored message.\nSuccess reply.\nReason of success reply creation.\nDestination actor is unavailable, so it can’t process …\nUnsupported code. Variant exists for backward …\nUnsupported reason of success reply. Variant exists for …\nUnsupported reason of error reply. Variant exists for …\nMessage sent to user and deposited as event.\nMessage sent to user and added to mailbox.\nValue type for message.\nSet system reservation.\nCreate new auto-generated ReplyMessage.\nAuto-generated reply after success execution.\nMessages to be waken.\nCheck if provided <code>offset</code>/<code>len</code> are correct for the current …\nReply code of the message.\nPacket status code.\nStatus code of the reply message.\nCode id.\nPrevious execution context reference, if exists.\nPrevious execution context reference, if exists.\nPrevious execution context mutable reference, if exists.\nCurrent processing incoming message.\nMessage destination.\nMessage destination.\nPacket destination.\nMessage destination.\nPacket destination (newly created program id).\nMessage destination.\nMessage destination.\nMessage destination.\nMessage details.\nMessage details.\nMessage reply details.\nDestructs outcome after execution and returns provided …\nDestructs context after execution and returns provided …\nConstructs <code>ReplyCode::Error(_)</code> variant from underlying …\nReturns is syscall forbidden for the dispatch kind.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses 4 bytes array to <code>ReplyCode</code>.\nCreate HandleMessage from HandlePacket.\nCreate InitMessage from InitPacket.\nCreate ReplyMessage from ReplyPacket.\nPacket optional gas limit.\nMessage optional gas limit.\nMessage optional gas limit.\nMessage gas limit.\nMessage optional gas limit.\nMessage optional gas limit.\nMessage id.\nMessage id.\nMessage id.\nMessage id.\nMessage id.\nMessage id.\nMessage id.\nMessage id.\nMessage id.\nSend a new program initialization message.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert HandleMessage into Dispatch.\nConvert InitMessage into Dispatch.\nConvert ReplyMessage into Dispatch.\nConvert <code>SignalMessage</code> into <code>Dispatch</code>.\nConvert StoredMessage into IncomingMessage for program …\nConvert StoredDispatch into IncomingDispatch for program …\nConvert HandleMessage into Message.\nConvert InitMessage into Message.\nConvert ReplyMessage into Message.\nConvert <code>SignalMessage</code> into <code>Message</code>.\nInto parts.\nDestructs details into parts.\nDestructs details into parts.\nDecompose Dispatch for it’s components: DispatchKind and …\nDecompose IncomingDispatch for it’s components: …\nInto parts.\nDecompose StoredDispatch for it’s components: …\nDecompose StoredDelayedDispatch for it’s components: …\nConvert Message into gasless StoredMessage.\nConvert Dispatch into gasless StoredDispatch with empty …\nConvert HandleMessage into StoredMessage.\nConvert IncomingMessage into gasless StoredMessage.\nConvert IncomingDispatch into gasless StoredDispatch with …\nConvert InitMessage into StoredMessage.\nConvert ReplyMessage into StoredMessage.\nConvert Dispatch into gasless StoredDelayedDispatch.\nConvert HandleMessage into StoredDispatch.\nConvert InitMessage into StoredDispatch.\nConvert ReplyMessage into StoredDispatch.\nReturns bool, defining if <code>ReplyCode</code> represents error reply.\nReturns bool defining if message is error reply.\nReturns bool defining if message is error reply.\nReturns bool defining if message is error reply.\nReturns bool defining if message is error reply.\nReturns bool indicating if self is …\nCheck if kind is handle.\nCheck if kind is init.\nReturns bool defining if message is reply.\nReturns bool defining if message is reply.\nReturns bool defining if message is reply.\nCheck if kind is reply.\nCheck if kind is reply.\nCheck if kind is signal.\nCheck if kind is signal.\nReturns bool, defining if <code>ReplyCode</code> represents success …\nReturns bool, defining if <code>ReplyCode</code> represents unsupported …\nReturns bool indicating if self is …\nA dispatch kind the will be generated from the packet.\nEntry point for the message.\nGetter for inner dispatch kind\nEntry point for the message.\nEntry point for the message.\nEntry point for the message.\nCreate new packet with optional gas.\nCreate new manual ReplyPacket with optional gas.\nDispatch message reference.\nDispatch message reference.\nDispatch message reference.\nDispatch message reference.\nCreate new message.\nConstructor for details.\nConstructor for details.\nCreate new Dispatch.\nCreate a new context store with the provided parameters.\nCreate new message context. Returns <code>None</code> if outgoing …\nCreate new packet without gas.\nCreate new IncomingMessage.\nCreate new IncomingDispatch.\nCreate new manual ReplyPacket without gas.\nCreates a new <code>SignalMessage</code>.\nCreate new StoredMessage.\nCreate new StoredDispatch.\nCreate new StoredDelayedDispatch.\nCreate new UserMessage.\nCreate new UserStoredMessage.\nCreate new InitPacket via program.\nCreate new InitPacket via user.\nCreate new packet with gas.\nCreate new manual ReplyPacket with gas.\nLimit of bytes in outgoing messages during current …\nOutgoing dispatches to be sent.\nLimit of outgoing messages, that program can send in …\nMessage payload.\nPacket payload bytes.\nMessage payload bytes.\nMessage payload bytes.\nMessage payload bytes.\nMessage payload bytes.\nMessage payload bytes.\nMessage payload bytes.\nMessage payload bytes.\nPayload len\nCurrent program’s id.\nReturns <code>ReplyCode</code> of message if reply.\nReturns <code>ReplyCode</code> of message if reply.\nSend reply message.\nCreate deposit to handle future reply on message id was …\nReply deposits to be provided.\nReturn reply destination.\nMessage reply.\nMessage reply.\nPushes payload into stored reply payload.\nPushes the incoming message buffer into stored reply …\nReturn bool defining was reply sent within the execution.\nWhether this execution sent out a reply.\nFee for creating reservation.\nSalt.\nFee for sending scheduled message.\nSend a new program initialization message.\nProvide space for storing payload for future message …\nPushes payload into stored payload by handle.\nPushes the incoming buffer/payload into stored payload by …\nFee for sending message.\nSet reservation nonce from gas reserver.\nGetter for inner settings.\nMessage signal.\nMessage source.\nMessage source.\nMessage source.\nMessage source.\nMessage source.\nCreate new system generated ReplyMessage.\nCreate new system generated ReplyPacket.\nGet system reservation.\nConverts <code>ReplyCode</code> to 4 bytes array.\nReturns message id replied to.\nReturns message id signal sent from.\nReturns reply code of reply details.\nReturns reply details.\nReturns signal code of signal details.\nReply signal details.\nPacket value.\nMessage value.\nMessage value.\nMessage value.\nMessage value.\nMessage value.\nMessage value.\nMessage value.\nMessage value.\nFee for calling wait.\nWake message by it’s message id.\nFee for waking messages.\nReturns default settings with specified outgoing messages …\nPage of gear page size - 16 kiB.\nPages amount for gear page size - 16 kiB.\nStruct represents memory page number with some constant …\nTry from u32 error for Page.\nStruct represents memory pages amount with some constant …\nTry from u32 error for PagesAmount.\nPage size. May be any number power of two in interval [2, …\nPage size. May be any number power of two in interval [1, …\nNumber of max pages amount. Equal to max page number + 1.\nMax possible page number in 4GB memory.\nPage of wasm page size - 64 kiB.\nPages amount for wasm page size - 64 kiB.\nReturns page last byte offset.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs new page from byte offset: returns page which …\nIncrement page number. Returns <code>PagesAmount&lt;SIZE&gt;</code>, because …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns amount in bytes. Can be also considered as offset …\nReturns page zero byte offset.\nReturns an iterator that iterates over the range of pages …\nReturns new page, which contains <code>self</code> zero byte.\nGet page number, which bounds this pages amount. If pages …\nReturns corresponding amount of pages with another size <code>S</code>.\nBasic struct for working with integer percentages.\nApplies the percentage to the given value.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Percent</code> from a <code>u32</code> value. The value can be …\nReturns the inner <code>u32</code> value.\nProgram in active state.\nActive program in storage.\nProgram has been exited (gr_exit was called)\nProgram is not an active one.\nProgram has been successfully initialized and can process …\nStruct defines infix of memory pages storage.\nProgram in different states in storage.\nEnumeration contains variants for program state.\nProgram has been terminated (<code>init</code> was failed)\n<code>init</code> method of a program has not yet finished its …\nContinuous intervals amount in program allocations.\nCode id of the program.\nBlock number when the program will be expired.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGas reservation map.\nReturn inner u32 value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the program is active.\nReturns whether the program is exited.\nReturns whether the program is active and initialized.\nReturns whether the program is terminated.\nInfix of memory pages storage (is used for memory wake …\nConstructing function from u32 number.\nInitialization state of the program.\nidentifier of the initialization message.\nReservation will be created.\nReservation exists.\nGas reservations map.\nGas reservation slot.\nGas reservation state.\nGas reservations states.\nGas reserver.\nReservation will be removed.\nAn unchangeable wrapper over u64 value, which is required …\nSafety token returned when unreserved gas can be returned …\nAmount of reserved gas.\nCheck if reservation is not used.\nReturns duration for the newly created unreserved …\nBlock number when reservation will expire.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts current gas reserver into gas reservation map.\nReturns bool defining if gas reserver is empty.\nReturns amount of gas in reservation, if exists.\nMarks reservation as used.\nCreates a new gas reserver.\nReturns gas reservations current nonce.\nReserves gas.\nBlock number when reservation is created.\nGets gas reservations states.\nUnreserves gas reserved within <code>id</code> reservation.\nAmount of reserved gas.\nAmount of reserved gas.\nHow many blocks reservation will live.\nBlock number when reservation will expire.\nBlock number when reservation will expire.\nBlock number when reservation is created.\nFlag signalizing whether reservation is used.\nFlag signalizing whether reservation is used.\nPre-calculated gas consumption estimate for a message.\nPre-calculated reply information.\nThe amount of gas that would be burned.\nReply code of the reply.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe amount of gas that may be returned.\nThe minimum amount of gas required for successful …\nPayload of the reply.\nThe amount of gas that would be reserved.\nValue attached to the reply.\nIndicates whether the message was placed into the waitlist.\nWrapped string to fit <code>TRIMMED_MAX_LEN</code> amount of bytes.\nThe error type returned when a conversion from <code>&amp;str</code> to …\nMax amount of bytes allowed to be thrown as string …\nReturn string slice.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from <code>&amp;str</code> in compile-time.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn inner value.\nPause program as out of rent one.\nPause program as out of rent one.\nRemove code from code storage as out of rent one.\nRemove code from code storage as out of rent one.\nRemove message from mailbox as out of rent one.\nRemove message from mailbox as out of rent one.\nRemove message from waitlist as out of rent one.\nRemove message from waitlist as out of rent one.\nRemove gas reservation.\nRemove gas reservation.\nRemove paused program as dead one (issue #1014).\nRemove paused program as dead one (issue #1014).\nRemove resume program session.\nRemove resume program session.\nScheduled task sense and required data for processing …\nDelayed message to program sending.\nDelayed message to program sending.\nDelayed message to user sending.\nDelayed message to user sending.\nTask handler trait for dealing with required tasks.\nAlias for ScheduledTask used in vara-runtime, generic …\nDelayed wake of the message at concrete block.\nDelayed wake of the message at concrete block.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPause program action.\nProcessing function of current task with given handler.\nRemove code action.\nRemove from mailbox action.\nRemove from waitlist action.\nRemove gas reservation action.\nRemove paused program action.\nRemove data created by resume program session.\nSend delayed message to program action.\nSend delayed message to user action.\nWake message action.\nWhat message to send.\nShould it be inserted into users mailbox.\nWhat message to send.\nShould it be inserted into users mailbox.\nCreates a unique identifier by passing given argument to …\nCreates a unique identifier by passing given argument to …")