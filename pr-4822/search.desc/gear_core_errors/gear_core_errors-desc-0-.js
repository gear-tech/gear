searchState.loadedDescShard("gear_core_errors", 0, "Gear core errors.\nThe error occurs in attempt to access memory outside wasm …\nSuccess reply was created by system automatically.\nExecution failed with backend error that couldn’t been …\nThe error occurs in attempt to initialize the same program …\nThe error occurs in case of attempt to send more than one …\nThe error occurs when program tries to create reply …\nThe error occurs in attempt to get the same message from …\nError reply.\nReason of error reply creation.\nError reply was created due to underlying execution error.\nSignal was sent due to some execution errors.\nExecution error.\nExecution error.\nAn error occurred in API.\nAn error occurs in attempt to send or push reply while …\nThe error occurs when program tries to create reply …\nProgram was terminated due to failed initialization.\nAn error occurs in attempt to charge gas for dispatch …\nEverything less than mailbox threshold but greater than 0 …\nEverything less than existential deposit but greater than …\nAn error occurs in attempt to unreserve gas with …\nAn attempt to commit or push a payload into an already …\nSuccess reply was created by actor manually.\nMessage has bigger then allowed one message size\nMemory error.\nMemory error.\nProgram has reached memory limit while executing.\nMessage error.\nError using messages.\nThe error occurs when functions related to reply context, …\nThe error occurs when functions related to signal context, …\nThe error occurs when functions related to status code, …\nAn error occurs in attempt to charge more gas than …\nThe error occurs when balance is less than required by …\nThe error occurs in case of not valid identifier specified.\nThe error occurs when a too big length value to form a …\nThe error occurs when a wrong offset of the input buffer …\nThe error “Message limit exceeded” occurs when a …\nThe error occurs when program tries to send messages with …\nProgram called <code>gr_exit</code> syscall.\nProgram was not created.\nMessage ran out of gas while executing.\nCannot take data in payload range\nProgram re-instrumentation failed.\nMessage has died in Waitlist as out of rent one.\nSignal was sent due to removal from waitlist as out of …\nEnum representing reply code with reason of its creation.\nReservation error.\nAn error occurs in attempt to reserve gas less than …\nReservation error.\nAn error occurs in attempt to reserve more times than …\nThe error occurs, when program tries to allocate in …\nEnum representing signal code and reason of its creation.\nSimplified error occurred during execution.\nSimplified error occurred because of actor unavailability.\nProgram has reached stack limit while executing.\nSuccess reply.\nReason of success reply creation.\nOverflow in ‘gr_read’\nDestination actor is unavailable, so it can’t process …\nProgram is not initialized yet.\nExecution failed with <code>unreachable</code> instruction call.\nUnsupported code. Variant exists for backward …\nUnsupported reason of success reply. Variant exists for …\nUnsupported reason of error reply. Variant exists for …\nUnsupported reason of execution error. Variant exists for …\nUnsupported reason of inactive actor error. Variant exists …\nThere is a new error variant old program don’t support.\nExecution failed with userspace panic.\nAn error occurs in attempt to reserve zero gas.\nAn error occurs in attempt to create reservation for 0 …\nConstructs <code>ReplyCode::Error(_)</code> variant from underlying …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses 4 bytes array to <code>ReplyCode</code>.\nParses <code>SignalCode</code> from <code>u32</code> if possible.\nConvert code into error.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns bool, defining if <code>ReplyCode</code> represents error reply.\nReturns bool indicating if self is …\nReturns bool, defining if <code>ReplyCode</code> represents success …\nReturns bool, defining if <code>ReplyCode</code> represents unsupported …\nReturns bool indicating if self is …\nConverts <code>ReplyCode</code> to 4 bytes array.\nConverts <code>SignalCode</code> into <code>u32</code>.\nConvert error into code.")