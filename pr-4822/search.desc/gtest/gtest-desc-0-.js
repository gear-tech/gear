searchState.loadedDescShard("gtest", 0, "Testing with <code>gtest</code>\nActor is not executable.\nInterface to a particular user mailbox.\nActor not found.\nResult of running the block.\nA log that emitted by a program, for user defined logs, …\nContains the error value\nWrapper for <code>ExtError</code>.\nFunction not found in executor.\nSearching gbuild artifact failed.\nInstrumentation of binary code failed.\nInsufficient memory.\nInvalid import module.\nInvalid return type after execution.\nA log that can be emitted by a program.\nWrapper for <code>wasmi::Error</code>.\nMeta WASM binary hasn’t been provided.\nContains the success value\nGear program instance.\nBuilder for <code>Program</code>.\nWrapper for program id.\nReading of program state failed.\nType alias for the testing functions running result.\nWrapper for <code>parity_scale_codec::Error</code>.\nThe testing environment which simulates the chain state …\nList of general errors.\nFailed to call unsupported function.\nTrait for mocking gear programs.\nAsserts that the message panicked and that the panic …\nSet up a log builder with success reason.\nReturns the balance of the account.\nReturns balance of user with given <code>id</code>.\nReturn the current block height of the testing environment.\nExecuted block info.\nReturn the current block timestamp of the testing …\nBuild program with set parameters.\nSet up a builder for a <code>Log</code>.\nCalculate program id from code id and salt.\nCalculate reply that would be received when sending …\nClaims value from a message in mailbox.\nClone the program and return it’s boxed version.\nModule containing constants of Gear protocol.\nChecks whether message with some traits (defined in <code>log</code>) is\nCheck, if the result contains a specific log.\nGet the program of the root crate with provided <code>system</code>.\nGet program of the root crate with provided <code>system</code>.\nGet optimized program of the root crate with provided …\nGet optimized program of the root crate with provided …\nGet the program of the root crate with provided <code>system</code> and …\nEmit debug message in program with given <code>data</code>.\nEmit debug message in program with given <code>data</code>.\nReturns decoded logs.\nSet the destination of the log.\nGet the destination of the message that emitted this log.\nEnsure the current project has been built by <code>cargo-gbuild</code>.\nSet up a builder with error reason.\nSet of failed messages during the current block execution.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate program from WASM binary.\nCreate a program instance from wasm file with given ID.\nCreate a program instance from wasm file.\nCreate a program instance from wasm file.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGas allowance spent during the execution.\nMapping gas burned for each message during the current …\nExtract mailbox of user with given <code>id</code>.\nReturns a <code>Program</code> by <code>id</code>.\nMessage handler with given <code>payload</code>.\nGet program id.\nGet the id of the message that emitted this log.\nReturns <code>Some(ActorId)</code> if a program is exited with …\nInitialize wasm program with given <code>payload</code>.\nInit logger with “gwasm” target set to <code>debug</code> level.\nInit logger with <code>default_filter</code> as default filter.\nInit logger with “gwasm” and “gtest” targets set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetect if a program is active with given <code>id</code>.\nReturns last added program.\nLoad the program’s memory from path.\nGet the logs.\nUser message logs (events) created during the current …\nMint balance to user with given <code>id</code> and <code>value</code>.\nMock a program with provided <code>system</code> and <code>mock</code>.\nCreate a mock program with provided <code>system</code> and <code>mock</code>, and …\nCreate a new testing environment.\nSet of not executed messages during the current block …\nGet the payload of the message that emitted this log.\nSet the payload of the log.\nSet the payload of the log with bytes.\nReturns a list of programs.\nReturns amount of dispatches in the queue.\nReads and decodes the program’s state .\nReads the program’s state as a byte vector.\nSends user reply message.\nSends user reply message to a mailboxed message finding it …\nGet the reply code of the message that emitted this log.\nSet the reply code for this log.\nGet the reply destination that the reply code was sent to.\nSet the reply destination for this log.\nRun next block.\nRuns blocks same as <code>Self::run_next_block</code>, but with limited …\nRuns <code>amount</code> of blocks only with processing task pool, …\nRuns blocks same as <code>Self::run_next_block</code>, but executes …\nSave the program’s memory to path.\nSend message to the program.\nSend message to the program with bytes payload.\nSend the message to the program with bytes payload, gas …\nSend the message to the program with bytes payload and …\nSend message to the program with gas limit and value.\nSend message to the program with value.\nGet the source of the message that emitted this log.\nSet the source of the log.\nCalculate the total spent value for the gas consumption.\nState of wasm program.\nSaves code to the storage and returns its code hash\nSaves code from file to the storage and returns its code …\nSaves code to the storage and returns its code hash\nReturns previously submitted original code by its code …\nSet of successfully executed messages during the current …\nTotal messages processed during the current execution.\nTransfer balance from user with given <code>from</code> id to user with …\nSet ID for future program.\nSet metadata for future program.\nSet metadata for future program from file.\nDuration of one block in msecs.\nNumeric type representing blocks in Gear protocol.\nDefault initial balance for users.\nDefault user id for Alice.\nDefault user id for Bob.\nDefault user id for Charlie.\nDefault user id for Eve.\nDuration of one epoch.\nMinimal amount of value able to be sent. Defines accounts …\nGas allowance for executing user dispatch and set of …\nGas multiplier used to calculate equivalence of gas in …\nNumeric type representing gas in Gear protocol.\nInitial random seed for testing environment.\nMaximal amount of reservations program may have.\nMax allowed user gas to apply for external message.\nExtra amount of blocks must be reserved for storing in …\nValue per token.\nValue per gas.\nNumeric type representing value in Gear protocol.\nDefault list of users.")