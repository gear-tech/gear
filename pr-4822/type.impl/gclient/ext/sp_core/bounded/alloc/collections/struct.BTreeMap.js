(function() {
    var type_impls = Object.fromEntries([["gclient",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AggregatePublicKey-for-BTreeMap%3CK,+V%3E\" class=\"impl\"><a href=\"#impl-AggregatePublicKey-for-BTreeMap%3CK,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V&gt; AggregatePublicKey for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/bounded/alloc/borrow/trait.Borrow.html\" title=\"trait gclient::ext::sp_core::bounded::alloc::borrow::Borrow\">Borrow</a>&lt;PublicKey&gt; + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.weighting\" class=\"method trait-impl\"><a href=\"#method.weighting\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a class=\"fn\">weighting</a>(&amp;self, choice: &amp;PublicKey) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Scalar&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">ðŸ‘Ž</span><span>Deprecated since 0.11.0: This module will be replaced in the future</span></div></span><div class='docblock'>Return delinearization weighting for one of many public keys being aggregated.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.public_key\" class=\"method trait-impl\"><a href=\"#method.public_key\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a class=\"fn\">public_key</a>(&amp;self) -&gt; PublicKey</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">ðŸ‘Ž</span><span>Deprecated since 0.11.0: This module will be replaced in the future</span></div></span><div class='docblock'>Returns aggregated public key.</div></details></div></details>","AggregatePublicKey","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BTreeMap%3CK,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#609\">Source</a><a href=\"#impl-BTreeMap%3CK,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.66.0\">1.0.0 (const: 1.66.0)</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#628\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a new, empty <code>BTreeMap</code>.</p>\n<p>Does not allocate anything on its own.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = BTreeMap::new();\n\n<span class=\"comment\">// entries can now be inserted into the empty map\n</span>map.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);</code></pre></div>\n</div></details></div></details>",0,"gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BTreeMap%3CK,+V,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2468\">Source</a><a href=\"#impl-BTreeMap%3CK,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V, A&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/alloc/trait.Allocator.html\" title=\"trait gclient::ext::sp_core::sp_std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2489\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/btree_map/struct.Iter.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::btree_map::Iter\">Iter</a>&lt;'_, K, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter&lt;&#39;_, K, V&gt;\">â“˜</a></h4></section></summary><div class=\"docblock\"><p>Gets an iterator over the entries of the map, sorted by key.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = BTreeMap::new();\nmap.insert(<span class=\"number\">3</span>, <span class=\"string\">\"c\"</span>);\nmap.insert(<span class=\"number\">2</span>, <span class=\"string\">\"b\"</span>);\nmap.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\n\n<span class=\"kw\">for </span>(key, value) <span class=\"kw\">in </span>map.iter() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{key}: {value}\"</span>);\n}\n\n<span class=\"kw\">let </span>(first_key, first_value) = map.iter().next().unwrap();\n<span class=\"macro\">assert_eq!</span>((<span class=\"kw-2\">*</span>first_key, <span class=\"kw-2\">*</span>first_value), (<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2520\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/btree_map/struct.IterMut.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::btree_map::IterMut\">IterMut</a>&lt;'_, K, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IterMut&lt;&#39;_, K, V&gt;\">â“˜</a></h4></section></summary><div class=\"docblock\"><p>Gets a mutable iterator over the entries of the map, sorted by key.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = BTreeMap::from([\n   (<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>),\n   (<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>),\n   (<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>),\n]);\n\n<span class=\"comment\">// add 10 to the value if the key isn't \"a\"\n</span><span class=\"kw\">for </span>(key, value) <span class=\"kw\">in </span>map.iter_mut() {\n    <span class=\"kw\">if </span>key != <span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\" </span>{\n        <span class=\"kw-2\">*</span>value += <span class=\"number\">10</span>;\n    }\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.keys\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2545\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.keys\" class=\"fn\">keys</a>(&amp;self) -&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/btree_map/struct.Keys.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::btree_map::Keys\">Keys</a>&lt;'_, K, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Keys&lt;&#39;_, K, V&gt;\">â“˜</a></h4></section></summary><div class=\"docblock\"><p>Gets an iterator over the keys of the map, in sorted order.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = BTreeMap::new();\na.insert(<span class=\"number\">2</span>, <span class=\"string\">\"b\"</span>);\na.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\n\n<span class=\"kw\">let </span>keys: Vec&lt;<span class=\"kw\">_</span>&gt; = a.keys().cloned().collect();\n<span class=\"macro\">assert_eq!</span>(keys, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.values\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2564\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.values\" class=\"fn\">values</a>(&amp;self) -&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/btree_map/struct.Values.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::btree_map::Values\">Values</a>&lt;'_, K, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Values&lt;&#39;_, K, V&gt;\">â“˜</a></h4></section></summary><div class=\"docblock\"><p>Gets an iterator over the values of the map, in order by key.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = BTreeMap::new();\na.insert(<span class=\"number\">1</span>, <span class=\"string\">\"hello\"</span>);\na.insert(<span class=\"number\">2</span>, <span class=\"string\">\"goodbye\"</span>);\n\n<span class=\"kw\">let </span>values: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = a.values().cloned().collect();\n<span class=\"macro\">assert_eq!</span>(values, [<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"goodbye\"</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.values_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2588\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.values_mut\" class=\"fn\">values_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/btree_map/struct.ValuesMut.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::btree_map::ValuesMut\">ValuesMut</a>&lt;'_, K, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ValuesMut&lt;&#39;_, K, V&gt;\">â“˜</a></h4></section></summary><div class=\"docblock\"><p>Gets a mutable iterator over the values of the map, in order by key.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = BTreeMap::new();\na.insert(<span class=\"number\">1</span>, String::from(<span class=\"string\">\"hello\"</span>));\na.insert(<span class=\"number\">2</span>, String::from(<span class=\"string\">\"goodbye\"</span>));\n\n<span class=\"kw\">for </span>value <span class=\"kw\">in </span>a.values_mut() {\n    value.push_str(<span class=\"string\">\"!\"</span>);\n}\n\n<span class=\"kw\">let </span>values: Vec&lt;String&gt; = a.values().cloned().collect();\n<span class=\"macro\">assert_eq!</span>(values, [String::from(<span class=\"string\">\"hello!\"</span>),\n                    String::from(<span class=\"string\">\"goodbye!\"</span>)]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/71835\" title=\"Tracking issue for const_btree_len\">unstable</a>)</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2612\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in the map.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = BTreeMap::new();\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">0</span>);\na.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/71835\" title=\"Tracking issue for const_btree_len\">unstable</a>)</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2635\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the map contains no elements.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = BTreeMap::new();\n<span class=\"macro\">assert!</span>(a.is_empty());\na.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert!</span>(!a.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lower_bound\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2679-2682\">Source</a><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.lower_bound\" class=\"fn\">lower_bound</a>&lt;Q&gt;(&amp;self, bound: <a class=\"enum\" href=\"gclient/ext/sp_core/sp_std/ops/enum.Bound.html\" title=\"enum gclient::ext::sp_core::sp_std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>&gt;) -&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/btree_map/struct.Cursor.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::btree_map::Cursor\">Cursor</a>&lt;'_, K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/bounded/alloc/borrow/trait.Borrow.html\" title=\"trait gclient::ext::sp_core::bounded::alloc::borrow::Borrow\">Borrow</a>&lt;Q&gt; + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,\n    Q: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/marker/trait.Sized.html\" title=\"trait gclient::ext::sp_core::sp_std::marker::Sized\">Sized</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>btree_cursors</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a <a href=\"gclient/ext/sp_core/bounded/alloc/collections/btree_map/struct.Cursor.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::btree_map::Cursor\"><code>Cursor</code></a> pointing at the gap before the smallest key\ngreater than the given bound.</p>\n<p>Passing <code>Bound::Included(x)</code> will return a cursor pointing to the\ngap before the smallest key greater than or equal to <code>x</code>.</p>\n<p>Passing <code>Bound::Excluded(x)</code> will return a cursor pointing to the\ngap before the smallest key greater than <code>x</code>.</p>\n<p>Passing <code>Bound::Unbounded</code> will return a cursor pointing to the\ngap before the smallest key in the map.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(btree_cursors)]\n\n</span><span class=\"kw\">use </span>std::collections::BTreeMap;\n<span class=\"kw\">use </span>std::ops::Bound;\n\n<span class=\"kw\">let </span>map = BTreeMap::from([\n    (<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>),\n    (<span class=\"number\">2</span>, <span class=\"string\">\"b\"</span>),\n    (<span class=\"number\">3</span>, <span class=\"string\">\"c\"</span>),\n    (<span class=\"number\">4</span>, <span class=\"string\">\"d\"</span>),\n]);\n\n<span class=\"kw\">let </span>cursor = map.lower_bound(Bound::Included(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(cursor.peek_prev(), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>)));\n<span class=\"macro\">assert_eq!</span>(cursor.peek_next(), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"b\"</span>)));\n\n<span class=\"kw\">let </span>cursor = map.lower_bound(Bound::Excluded(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(cursor.peek_prev(), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"b\"</span>)));\n<span class=\"macro\">assert_eq!</span>(cursor.peek_next(), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"c\"</span>)));\n\n<span class=\"kw\">let </span>cursor = map.lower_bound(Bound::Unbounded);\n<span class=\"macro\">assert_eq!</span>(cursor.peek_prev(), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(cursor.peek_next(), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lower_bound_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2732-2735\">Source</a><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.lower_bound_mut\" class=\"fn\">lower_bound_mut</a>&lt;Q&gt;(&amp;mut self, bound: <a class=\"enum\" href=\"gclient/ext/sp_core/sp_std/ops/enum.Bound.html\" title=\"enum gclient::ext::sp_core::sp_std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>&gt;) -&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/btree_map/struct.CursorMut.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::btree_map::CursorMut\">CursorMut</a>&lt;'_, K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/bounded/alloc/borrow/trait.Borrow.html\" title=\"trait gclient::ext::sp_core::bounded::alloc::borrow::Borrow\">Borrow</a>&lt;Q&gt; + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,\n    Q: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/marker/trait.Sized.html\" title=\"trait gclient::ext::sp_core::sp_std::marker::Sized\">Sized</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>btree_cursors</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a <a href=\"gclient/ext/sp_core/bounded/alloc/collections/btree_map/struct.CursorMut.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::btree_map::CursorMut\"><code>CursorMut</code></a> pointing at the gap before the smallest key\ngreater than the given bound.</p>\n<p>Passing <code>Bound::Included(x)</code> will return a cursor pointing to the\ngap before the smallest key greater than or equal to <code>x</code>.</p>\n<p>Passing <code>Bound::Excluded(x)</code> will return a cursor pointing to the\ngap before the smallest key greater than <code>x</code>.</p>\n<p>Passing <code>Bound::Unbounded</code> will return a cursor pointing to the\ngap before the smallest key in the map.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(btree_cursors)]\n\n</span><span class=\"kw\">use </span>std::collections::BTreeMap;\n<span class=\"kw\">use </span>std::ops::Bound;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = BTreeMap::from([\n    (<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>),\n    (<span class=\"number\">2</span>, <span class=\"string\">\"b\"</span>),\n    (<span class=\"number\">3</span>, <span class=\"string\">\"c\"</span>),\n    (<span class=\"number\">4</span>, <span class=\"string\">\"d\"</span>),\n]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cursor = map.lower_bound_mut(Bound::Included(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(cursor.peek_prev(), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>, <span class=\"kw-2\">&amp;mut </span><span class=\"string\">\"a\"</span>)));\n<span class=\"macro\">assert_eq!</span>(cursor.peek_next(), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>, <span class=\"kw-2\">&amp;mut </span><span class=\"string\">\"b\"</span>)));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cursor = map.lower_bound_mut(Bound::Excluded(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(cursor.peek_prev(), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>, <span class=\"kw-2\">&amp;mut </span><span class=\"string\">\"b\"</span>)));\n<span class=\"macro\">assert_eq!</span>(cursor.peek_next(), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>, <span class=\"kw-2\">&amp;mut </span><span class=\"string\">\"c\"</span>)));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cursor = map.lower_bound_mut(Bound::Unbounded);\n<span class=\"macro\">assert_eq!</span>(cursor.peek_prev(), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(cursor.peek_next(), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>, <span class=\"kw-2\">&amp;mut </span><span class=\"string\">\"a\"</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.upper_bound\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2802-2805\">Source</a><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.upper_bound\" class=\"fn\">upper_bound</a>&lt;Q&gt;(&amp;self, bound: <a class=\"enum\" href=\"gclient/ext/sp_core/sp_std/ops/enum.Bound.html\" title=\"enum gclient::ext::sp_core::sp_std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>&gt;) -&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/btree_map/struct.Cursor.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::btree_map::Cursor\">Cursor</a>&lt;'_, K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/bounded/alloc/borrow/trait.Borrow.html\" title=\"trait gclient::ext::sp_core::bounded::alloc::borrow::Borrow\">Borrow</a>&lt;Q&gt; + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,\n    Q: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/marker/trait.Sized.html\" title=\"trait gclient::ext::sp_core::sp_std::marker::Sized\">Sized</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>btree_cursors</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a <a href=\"gclient/ext/sp_core/bounded/alloc/collections/btree_map/struct.Cursor.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::btree_map::Cursor\"><code>Cursor</code></a> pointing at the gap after the greatest key\nsmaller than the given bound.</p>\n<p>Passing <code>Bound::Included(x)</code> will return a cursor pointing to the\ngap after the greatest key smaller than or equal to <code>x</code>.</p>\n<p>Passing <code>Bound::Excluded(x)</code> will return a cursor pointing to the\ngap after the greatest key smaller than <code>x</code>.</p>\n<p>Passing <code>Bound::Unbounded</code> will return a cursor pointing to the\ngap after the greatest key in the map.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(btree_cursors)]\n\n</span><span class=\"kw\">use </span>std::collections::BTreeMap;\n<span class=\"kw\">use </span>std::ops::Bound;\n\n<span class=\"kw\">let </span>map = BTreeMap::from([\n    (<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>),\n    (<span class=\"number\">2</span>, <span class=\"string\">\"b\"</span>),\n    (<span class=\"number\">3</span>, <span class=\"string\">\"c\"</span>),\n    (<span class=\"number\">4</span>, <span class=\"string\">\"d\"</span>),\n]);\n\n<span class=\"kw\">let </span>cursor = map.upper_bound(Bound::Included(<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(cursor.peek_prev(), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"c\"</span>)));\n<span class=\"macro\">assert_eq!</span>(cursor.peek_next(), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"d\"</span>)));\n\n<span class=\"kw\">let </span>cursor = map.upper_bound(Bound::Excluded(<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(cursor.peek_prev(), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"b\"</span>)));\n<span class=\"macro\">assert_eq!</span>(cursor.peek_next(), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"c\"</span>)));\n\n<span class=\"kw\">let </span>cursor = map.upper_bound(Bound::Unbounded);\n<span class=\"macro\">assert_eq!</span>(cursor.peek_prev(), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"d\"</span>)));\n<span class=\"macro\">assert_eq!</span>(cursor.peek_next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.upper_bound_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2855-2858\">Source</a><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.upper_bound_mut\" class=\"fn\">upper_bound_mut</a>&lt;Q&gt;(&amp;mut self, bound: <a class=\"enum\" href=\"gclient/ext/sp_core/sp_std/ops/enum.Bound.html\" title=\"enum gclient::ext::sp_core::sp_std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>&gt;) -&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/btree_map/struct.CursorMut.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::btree_map::CursorMut\">CursorMut</a>&lt;'_, K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/bounded/alloc/borrow/trait.Borrow.html\" title=\"trait gclient::ext::sp_core::bounded::alloc::borrow::Borrow\">Borrow</a>&lt;Q&gt; + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,\n    Q: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/marker/trait.Sized.html\" title=\"trait gclient::ext::sp_core::sp_std::marker::Sized\">Sized</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>btree_cursors</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a <a href=\"gclient/ext/sp_core/bounded/alloc/collections/btree_map/struct.CursorMut.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::btree_map::CursorMut\"><code>CursorMut</code></a> pointing at the gap after the greatest key\nsmaller than the given bound.</p>\n<p>Passing <code>Bound::Included(x)</code> will return a cursor pointing to the\ngap after the greatest key smaller than or equal to <code>x</code>.</p>\n<p>Passing <code>Bound::Excluded(x)</code> will return a cursor pointing to the\ngap after the greatest key smaller than <code>x</code>.</p>\n<p>Passing <code>Bound::Unbounded</code> will return a cursor pointing to the\ngap after the greatest key in the map.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(btree_cursors)]\n\n</span><span class=\"kw\">use </span>std::collections::BTreeMap;\n<span class=\"kw\">use </span>std::ops::Bound;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = BTreeMap::from([\n    (<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>),\n    (<span class=\"number\">2</span>, <span class=\"string\">\"b\"</span>),\n    (<span class=\"number\">3</span>, <span class=\"string\">\"c\"</span>),\n    (<span class=\"number\">4</span>, <span class=\"string\">\"d\"</span>),\n]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cursor = map.upper_bound_mut(Bound::Included(<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(cursor.peek_prev(), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>, <span class=\"kw-2\">&amp;mut </span><span class=\"string\">\"c\"</span>)));\n<span class=\"macro\">assert_eq!</span>(cursor.peek_next(), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>, <span class=\"kw-2\">&amp;mut </span><span class=\"string\">\"d\"</span>)));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cursor = map.upper_bound_mut(Bound::Excluded(<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(cursor.peek_prev(), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>, <span class=\"kw-2\">&amp;mut </span><span class=\"string\">\"b\"</span>)));\n<span class=\"macro\">assert_eq!</span>(cursor.peek_next(), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>, <span class=\"kw-2\">&amp;mut </span><span class=\"string\">\"c\"</span>)));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cursor = map.upper_bound_mut(Bound::Unbounded);\n<span class=\"macro\">assert_eq!</span>(cursor.peek_prev(), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>, <span class=\"kw-2\">&amp;mut </span><span class=\"string\">\"d\"</span>)));\n<span class=\"macro\">assert_eq!</span>(cursor.peek_next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BTreeMap%3CK,+V,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#633\">Source</a><a href=\"#impl-BTreeMap%3CK,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V, A&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/alloc/trait.Allocator.html\" title=\"trait gclient::ext::sp_core::sp_std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#647\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the map, removing all elements.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = BTreeMap::new();\na.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\na.clear();\n<span class=\"macro\">assert!</span>(a.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#673\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.new_in\" class=\"fn\">new_in</a>(alloc: A) -&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>btreemap_alloc</code>)</span></div></span></summary><div class=\"docblock\"><p>Makes a new empty BTreeMap with a reasonable choice for B.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n<span class=\"kw\">use </span>std::alloc::Global;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = BTreeMap::new_in(Global);\n\n<span class=\"comment\">// entries can now be inserted into the empty map\n</span>map.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);</code></pre></div>\n</div></details></div></details>",0,"gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BTreeMap%3CK,+V,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#678\">Source</a><a href=\"#impl-BTreeMap%3CK,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V, A&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/alloc/trait.Allocator.html\" title=\"trait gclient::ext::sp_core::sp_std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#695-698\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.get\" class=\"fn\">get</a>&lt;Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a>&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/bounded/alloc/borrow/trait.Borrow.html\" title=\"trait gclient::ext::sp_core::bounded::alloc::borrow::Borrow\">Borrow</a>&lt;Q&gt; + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,\n    Q: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/marker/trait.Sized.html\" title=\"trait gclient::ext::sp_core::sp_std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the value corresponding to the key.</p>\n<p>The key may be any borrowed form of the mapâ€™s key type, but the ordering\non the borrowed form <em>must</em> match the ordering on the key type.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = BTreeMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert_eq!</span>(map.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>));\n<span class=\"macro\">assert_eq!</span>(map.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_key_value\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#761-764\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.get_key_value\" class=\"fn\">get_key_value</a>&lt;Q&gt;(&amp;self, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a>)&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/bounded/alloc/borrow/trait.Borrow.html\" title=\"trait gclient::ext::sp_core::bounded::alloc::borrow::Borrow\">Borrow</a>&lt;Q&gt; + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,\n    Q: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/marker/trait.Sized.html\" title=\"trait gclient::ext::sp_core::sp_std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the key-value pair corresponding to the supplied key. This is\npotentially useful:</p>\n<ul>\n<li>for key types where non-identical keys can be considered equal;</li>\n<li>for getting the <code>&amp;K</code> stored key value from a borrowed <code>&amp;Q</code> lookup key; or</li>\n<li>for getting a reference to a key with the same lifetime as the collection.</li>\n</ul>\n<p>The supplied key may be any borrowed form of the mapâ€™s key type, but the ordering\non the borrowed form <em>must</em> match the ordering on the key type.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cmp::Ordering;\n<span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"attr\">#[derive(Clone, Copy, Debug)]\n</span><span class=\"kw\">struct </span>S {\n    id: u32,\n    name: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str, <span class=\"comment\">// ignored by equality and ordering operations\n</span>}\n\n<span class=\"kw\">impl </span>PartialEq <span class=\"kw\">for </span>S {\n    <span class=\"kw\">fn </span>eq(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, other: <span class=\"kw-2\">&amp;</span>S) -&gt; bool {\n        <span class=\"self\">self</span>.id == other.id\n    }\n}\n\n<span class=\"kw\">impl </span>Eq <span class=\"kw\">for </span>S {}\n\n<span class=\"kw\">impl </span>PartialOrd <span class=\"kw\">for </span>S {\n    <span class=\"kw\">fn </span>partial_cmp(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, other: <span class=\"kw-2\">&amp;</span>S) -&gt; <span class=\"prelude-ty\">Option</span>&lt;Ordering&gt; {\n        <span class=\"self\">self</span>.id.partial_cmp(<span class=\"kw-2\">&amp;</span>other.id)\n    }\n}\n\n<span class=\"kw\">impl </span>Ord <span class=\"kw\">for </span>S {\n    <span class=\"kw\">fn </span>cmp(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, other: <span class=\"kw-2\">&amp;</span>S) -&gt; Ordering {\n        <span class=\"self\">self</span>.id.cmp(<span class=\"kw-2\">&amp;</span>other.id)\n    }\n}\n\n<span class=\"kw\">let </span>j_a = S { id: <span class=\"number\">1</span>, name: <span class=\"string\">\"Jessica\" </span>};\n<span class=\"kw\">let </span>j_b = S { id: <span class=\"number\">1</span>, name: <span class=\"string\">\"Jess\" </span>};\n<span class=\"kw\">let </span>p = S { id: <span class=\"number\">2</span>, name: <span class=\"string\">\"Paul\" </span>};\n<span class=\"macro\">assert_eq!</span>(j_a, j_b);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = BTreeMap::new();\nmap.insert(j_a, <span class=\"string\">\"Paris\"</span>);\n<span class=\"macro\">assert_eq!</span>(map.get_key_value(<span class=\"kw-2\">&amp;</span>j_a), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span>j_a, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"Paris\"</span>)));\n<span class=\"macro\">assert_eq!</span>(map.get_key_value(<span class=\"kw-2\">&amp;</span>j_b), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span>j_a, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"Paris\"</span>))); <span class=\"comment\">// the notable case\n</span><span class=\"macro\">assert_eq!</span>(map.get_key_value(<span class=\"kw-2\">&amp;</span>p), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.first_key_value\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0\">1.66.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#788-790\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.first_key_value\" class=\"fn\">first_key_value</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a>)&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the first key-value pair in the map.\nThe key in this pair is the minimum key in the map.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = BTreeMap::new();\n<span class=\"macro\">assert_eq!</span>(map.first_key_value(), <span class=\"prelude-val\">None</span>);\nmap.insert(<span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>);\nmap.insert(<span class=\"number\">2</span>, <span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert_eq!</span>(map.first_key_value(), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"b\"</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.first_entry\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0\">1.66.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#816-818\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.first_entry\" class=\"fn\">first_entry</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/btree_map/struct.OccupiedEntry.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::btree_map::OccupiedEntry\">OccupiedEntry</a>&lt;'_, K, V, A&gt;&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the first entry in the map for in-place manipulation.\nThe key of this entry is the minimum key in the map.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = BTreeMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\nmap.insert(<span class=\"number\">2</span>, <span class=\"string\">\"b\"</span>);\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span>entry) = map.first_entry() {\n    <span class=\"kw\">if </span><span class=\"kw-2\">*</span>entry.key() &gt; <span class=\"number\">0 </span>{\n        entry.insert(<span class=\"string\">\"first\"</span>);\n    }\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>map.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>).unwrap(), <span class=\"string\">\"first\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>map.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>).unwrap(), <span class=\"string\">\"b\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop_first\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0\">1.66.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#850-852\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.pop_first\" class=\"fn\">pop_first</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes and returns the first element in the map.\nThe key of this element is the minimum key that was in the map.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">Â§</a>Examples</h5>\n<p>Draining elements in ascending order, while keeping a usable map each iteration.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = BTreeMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\nmap.insert(<span class=\"number\">2</span>, <span class=\"string\">\"b\"</span>);\n<span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>((key, _val)) = map.pop_first() {\n    <span class=\"macro\">assert!</span>(map.iter().all(|(k, _v)| <span class=\"kw-2\">*</span>k &gt; key));\n}\n<span class=\"macro\">assert!</span>(map.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.last_key_value\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0\">1.66.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#871-873\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.last_key_value\" class=\"fn\">last_key_value</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a>)&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the last key-value pair in the map.\nThe key in this pair is the maximum key in the map.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = BTreeMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>);\nmap.insert(<span class=\"number\">2</span>, <span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert_eq!</span>(map.last_key_value(), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.last_entry\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0\">1.66.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#899-901\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.last_entry\" class=\"fn\">last_entry</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/btree_map/struct.OccupiedEntry.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::btree_map::OccupiedEntry\">OccupiedEntry</a>&lt;'_, K, V, A&gt;&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the last entry in the map for in-place manipulation.\nThe key of this entry is the maximum key in the map.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = BTreeMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\nmap.insert(<span class=\"number\">2</span>, <span class=\"string\">\"b\"</span>);\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span>entry) = map.last_entry() {\n    <span class=\"kw\">if </span><span class=\"kw-2\">*</span>entry.key() &gt; <span class=\"number\">0 </span>{\n        entry.insert(<span class=\"string\">\"last\"</span>);\n    }\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>map.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>).unwrap(), <span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>map.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>).unwrap(), <span class=\"string\">\"last\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop_last\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0\">1.66.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#933-935\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.pop_last\" class=\"fn\">pop_last</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes and returns the last element in the map.\nThe key of this element is the maximum key that was in the map.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">Â§</a>Examples</h5>\n<p>Draining elements in descending order, while keeping a usable map each iteration.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = BTreeMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\nmap.insert(<span class=\"number\">2</span>, <span class=\"string\">\"b\"</span>);\n<span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>((key, _val)) = map.pop_last() {\n    <span class=\"macro\">assert!</span>(map.iter().all(|(k, _v)| <span class=\"kw-2\">*</span>k &lt; key));\n}\n<span class=\"macro\">assert!</span>(map.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains_key\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#957-960\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.contains_key\" class=\"fn\">contains_key</a>&lt;Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/bounded/alloc/borrow/trait.Borrow.html\" title=\"trait gclient::ext::sp_core::bounded::alloc::borrow::Borrow\">Borrow</a>&lt;Q&gt; + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,\n    Q: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/marker/trait.Sized.html\" title=\"trait gclient::ext::sp_core::sp_std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the map contains a value for the specified key.</p>\n<p>The key may be any borrowed form of the mapâ€™s key type, but the ordering\non the borrowed form <em>must</em> match the ordering on the key type.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = BTreeMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert_eq!</span>(map.contains_key(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(map.contains_key(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#984-987\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.get_mut\" class=\"fn\">get_mut</a>&lt;Q&gt;(&amp;mut self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut V</a>&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/bounded/alloc/borrow/trait.Borrow.html\" title=\"trait gclient::ext::sp_core::bounded::alloc::borrow::Borrow\">Borrow</a>&lt;Q&gt; + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,\n    Q: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/marker/trait.Sized.html\" title=\"trait gclient::ext::sp_core::sp_std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the value corresponding to the key.</p>\n<p>The key may be any borrowed form of the mapâ€™s key type, but the ordering\non the borrowed form <em>must</em> match the ordering on the key type.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = BTreeMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(x) = map.get_mut(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>) {\n    <span class=\"kw-2\">*</span>x = <span class=\"string\">\"b\"</span>;\n}\n<span class=\"macro\">assert_eq!</span>(map[<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>], <span class=\"string\">\"b\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#1023-1025\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, key: K, value: V) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a key-value pair into the map.</p>\n<p>If the map did not have this key present, <code>None</code> is returned.</p>\n<p>If the map did have this key present, the value is updated, and the old\nvalue is returned. The key is not updated, though; this matters for\ntypes that can be <code>==</code> without being identical. See the <a href=\"index.html#insert-and-complex-keys\">module-level\ndocumentation</a> for more.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = BTreeMap::new();\n<span class=\"macro\">assert_eq!</span>(map.insert(<span class=\"number\">37</span>, <span class=\"string\">\"a\"</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(map.is_empty(), <span class=\"bool-val\">false</span>);\n\nmap.insert(<span class=\"number\">37</span>, <span class=\"string\">\"b\"</span>);\n<span class=\"macro\">assert_eq!</span>(map.insert(<span class=\"number\">37</span>, <span class=\"string\">\"c\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"b\"</span>));\n<span class=\"macro\">assert_eq!</span>(map[<span class=\"kw-2\">&amp;</span><span class=\"number\">37</span>], <span class=\"string\">\"c\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_insert\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#1058-1060\">Source</a><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.try_insert\" class=\"fn\">try_insert</a>(\n    &amp;mut self,\n    key: K,\n    value: V,\n) -&gt; <a class=\"enum\" href=\"gclient/ext/sp_core/sp_std/result/enum.Result.html\" title=\"enum gclient::ext::sp_core::sp_std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut V</a>, <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/btree_map/struct.OccupiedError.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::btree_map::OccupiedError\">OccupiedError</a>&lt;'_, K, V, A&gt;&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>map_try_insert</code>)</span></div></span></summary><div class=\"docblock\"><p>Tries to insert a key-value pair into the map, and returns\na mutable reference to the value in the entry.</p>\n<p>If the map already had this key present, nothing is updated, and\nan error containing the occupied entry and the value is returned.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(map_try_insert)]\n\n</span><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = BTreeMap::new();\n<span class=\"macro\">assert_eq!</span>(map.try_insert(<span class=\"number\">37</span>, <span class=\"string\">\"a\"</span>).unwrap(), <span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>);\n\n<span class=\"kw\">let </span>err = map.try_insert(<span class=\"number\">37</span>, <span class=\"string\">\"b\"</span>).unwrap_err();\n<span class=\"macro\">assert_eq!</span>(err.entry.key(), <span class=\"kw-2\">&amp;</span><span class=\"number\">37</span>);\n<span class=\"macro\">assert_eq!</span>(err.entry.get(), <span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert_eq!</span>(err.value, <span class=\"string\">\"b\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#1086-1089\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.remove\" class=\"fn\">remove</a>&lt;Q&gt;(&amp;mut self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/bounded/alloc/borrow/trait.Borrow.html\" title=\"trait gclient::ext::sp_core::bounded::alloc::borrow::Borrow\">Borrow</a>&lt;Q&gt; + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,\n    Q: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/marker/trait.Sized.html\" title=\"trait gclient::ext::sp_core::sp_std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes a key from the map, returning the value at the key if the key\nwas previously in the map.</p>\n<p>The key may be any borrowed form of the mapâ€™s key type, but the ordering\non the borrowed form <em>must</em> match the ordering on the key type.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = BTreeMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert_eq!</span>(map.remove(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"a\"</span>));\n<span class=\"macro\">assert_eq!</span>(map.remove(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_entry\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#1111-1114\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.remove_entry\" class=\"fn\">remove_entry</a>&lt;Q&gt;(&amp;mut self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/bounded/alloc/borrow/trait.Borrow.html\" title=\"trait gclient::ext::sp_core::bounded::alloc::borrow::Borrow\">Borrow</a>&lt;Q&gt; + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,\n    Q: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/marker/trait.Sized.html\" title=\"trait gclient::ext::sp_core::sp_std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes a key from the map, returning the stored key and value if the key\nwas previously in the map.</p>\n<p>The key may be any borrowed form of the mapâ€™s key type, but the ordering\non the borrowed form <em>must</em> match the ordering on the key type.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = BTreeMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert_eq!</span>(map.remove_entry(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>)));\n<span class=\"macro\">assert_eq!</span>(map.remove_entry(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#1149-1152\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,\n    F: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/ops/trait.FnMut.html\" title=\"trait gclient::ext::sp_core::sp_std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut V</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all pairs <code>(k, v)</code> for which <code>f(&amp;k, &amp;mut v)</code> returns <code>false</code>.\nThe elements are visited in ascending key order.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: BTreeMap&lt;i32, i32&gt; = (<span class=\"number\">0</span>..<span class=\"number\">8</span>).map(|x| (x, x<span class=\"kw-2\">*</span><span class=\"number\">10</span>)).collect();\n<span class=\"comment\">// Keep only the elements with even-numbered keys.\n</span>map.retain(|<span class=\"kw-2\">&amp;</span>k, <span class=\"kw\">_</span>| k % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(map.into_iter().eq(<span class=\"macro\">vec!</span>[(<span class=\"number\">0</span>, <span class=\"number\">0</span>), (<span class=\"number\">2</span>, <span class=\"number\">20</span>), (<span class=\"number\">4</span>, <span class=\"number\">40</span>), (<span class=\"number\">6</span>, <span class=\"number\">60</span>)]));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.11.0\">1.11.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#1189-1192\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.append\" class=\"fn\">append</a>(&amp;mut self, other: &amp;mut <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;)<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Moves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> empty.</p>\n<p>If a key from <code>other</code> is already present in <code>self</code>, the respective\nvalue from <code>self</code> will be overwritten with the respective value from <code>other</code>.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = BTreeMap::new();\na.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\na.insert(<span class=\"number\">2</span>, <span class=\"string\">\"b\"</span>);\na.insert(<span class=\"number\">3</span>, <span class=\"string\">\"c\"</span>); <span class=\"comment\">// Note: Key (3) also present in b.\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = BTreeMap::new();\nb.insert(<span class=\"number\">3</span>, <span class=\"string\">\"d\"</span>); <span class=\"comment\">// Note: Key (3) also present in a.\n</span>b.insert(<span class=\"number\">4</span>, <span class=\"string\">\"e\"</span>);\nb.insert(<span class=\"number\">5</span>, <span class=\"string\">\"f\"</span>);\n\na.append(<span class=\"kw-2\">&amp;mut </span>b);\n\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(b.len(), <span class=\"number\">0</span>);\n\n<span class=\"macro\">assert_eq!</span>(a[<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>], <span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert_eq!</span>(a[<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>], <span class=\"string\">\"b\"</span>);\n<span class=\"macro\">assert_eq!</span>(a[<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>], <span class=\"string\">\"d\"</span>); <span class=\"comment\">// Note: \"c\" has been overwritten.\n</span><span class=\"macro\">assert_eq!</span>(a[<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>], <span class=\"string\">\"e\"</span>);\n<span class=\"macro\">assert_eq!</span>(a[<span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>], <span class=\"string\">\"f\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.range\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#1244-1248\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.range\" class=\"fn\">range</a>&lt;T, R&gt;(&amp;self, range: R) -&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/btree_map/struct.Range.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::btree_map::Range\">Range</a>&lt;'_, K, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Range&lt;&#39;_, K, V&gt;\">â“˜</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/marker/trait.Sized.html\" title=\"trait gclient::ext::sp_core::sp_std::marker::Sized\">Sized</a>,\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/bounded/alloc/borrow/trait.Borrow.html\" title=\"trait gclient::ext::sp_core::bounded::alloc::borrow::Borrow\">Borrow</a>&lt;T&gt; + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,\n    R: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/ops/trait.RangeBounds.html\" title=\"trait gclient::ext::sp_core::sp_std::ops::RangeBounds\">RangeBounds</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Constructs a double-ended iterator over a sub-range of elements in the map.\nThe simplest way is to use the range syntax <code>min..max</code>, thus <code>range(min..max)</code> will\nyield elements from min (inclusive) to max (exclusive).\nThe range may also be entered as <code>(Bound&lt;T&gt;, Bound&lt;T&gt;)</code>, so for example\n<code>range((Excluded(4), Included(10)))</code> will yield a left-exclusive, right-inclusive\nrange from 4 to 10.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">Â§</a>Panics</h5>\n<p>Panics if range <code>start &gt; end</code>.\nPanics if range <code>start == end</code> and both bounds are <code>Excluded</code>.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n<span class=\"kw\">use </span>std::ops::Bound::Included;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = BTreeMap::new();\nmap.insert(<span class=\"number\">3</span>, <span class=\"string\">\"a\"</span>);\nmap.insert(<span class=\"number\">5</span>, <span class=\"string\">\"b\"</span>);\nmap.insert(<span class=\"number\">8</span>, <span class=\"string\">\"c\"</span>);\n<span class=\"kw\">for </span>(<span class=\"kw-2\">&amp;</span>key, <span class=\"kw-2\">&amp;</span>value) <span class=\"kw\">in </span>map.range((Included(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>), Included(<span class=\"kw-2\">&amp;</span><span class=\"number\">8</span>))) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{key}: {value}\"</span>);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"b\"</span>)), map.range(<span class=\"number\">4</span>..).next());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.range_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#1284-1288\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.range_mut\" class=\"fn\">range_mut</a>&lt;T, R&gt;(&amp;mut self, range: R) -&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/btree_map/struct.RangeMut.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::btree_map::RangeMut\">RangeMut</a>&lt;'_, K, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RangeMut&lt;&#39;_, K, V&gt;\">â“˜</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/marker/trait.Sized.html\" title=\"trait gclient::ext::sp_core::sp_std::marker::Sized\">Sized</a>,\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/bounded/alloc/borrow/trait.Borrow.html\" title=\"trait gclient::ext::sp_core::bounded::alloc::borrow::Borrow\">Borrow</a>&lt;T&gt; + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,\n    R: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/ops/trait.RangeBounds.html\" title=\"trait gclient::ext::sp_core::sp_std::ops::RangeBounds\">RangeBounds</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Constructs a mutable double-ended iterator over a sub-range of elements in the map.\nThe simplest way is to use the range syntax <code>min..max</code>, thus <code>range(min..max)</code> will\nyield elements from min (inclusive) to max (exclusive).\nThe range may also be entered as <code>(Bound&lt;T&gt;, Bound&lt;T&gt;)</code>, so for example\n<code>range((Excluded(4), Included(10)))</code> will yield a left-exclusive, right-inclusive\nrange from 4 to 10.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">Â§</a>Panics</h5>\n<p>Panics if range <code>start &gt; end</code>.\nPanics if range <code>start == end</code> and both bounds are <code>Excluded</code>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: BTreeMap&lt;<span class=\"kw-2\">&amp;</span>str, i32&gt; =\n    [(<span class=\"string\">\"Alice\"</span>, <span class=\"number\">0</span>), (<span class=\"string\">\"Bob\"</span>, <span class=\"number\">0</span>), (<span class=\"string\">\"Carol\"</span>, <span class=\"number\">0</span>), (<span class=\"string\">\"Cheryl\"</span>, <span class=\"number\">0</span>)].into();\n<span class=\"kw\">for </span>(<span class=\"kw\">_</span>, balance) <span class=\"kw\">in </span>map.range_mut(<span class=\"string\">\"B\"</span>..<span class=\"string\">\"Cheryl\"</span>) {\n    <span class=\"kw-2\">*</span>balance += <span class=\"number\">100</span>;\n}\n<span class=\"kw\">for </span>(name, balance) <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>map {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{name} =&gt; {balance}\"</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.entry\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#1316-1318\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.entry\" class=\"fn\">entry</a>(&amp;mut self, key: K) -&gt; <a class=\"enum\" href=\"gclient/ext/sp_core/bounded/alloc/collections/btree_map/enum.Entry.html\" title=\"enum gclient::ext::sp_core::bounded::alloc::collections::btree_map::Entry\">Entry</a>&lt;'_, K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Gets the given keyâ€™s corresponding entry in the map for in-place manipulation.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>count: BTreeMap&lt;<span class=\"kw-2\">&amp;</span>str, usize&gt; = BTreeMap::new();\n\n<span class=\"comment\">// count the number of occurrences of letters in the vec\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span>[<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>] {\n    count.entry(x).and_modify(|curr| <span class=\"kw-2\">*</span>curr += <span class=\"number\">1</span>).or_insert(<span class=\"number\">1</span>);\n}\n\n<span class=\"macro\">assert_eq!</span>(count[<span class=\"string\">\"a\"</span>], <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(count[<span class=\"string\">\"b\"</span>], <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(count[<span class=\"string\">\"c\"</span>], <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_off\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.11.0\">1.11.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#1375-1378\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.split_off\" class=\"fn\">split_off</a>&lt;Q&gt;(&amp;mut self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/marker/trait.Sized.html\" title=\"trait gclient::ext::sp_core::sp_std::marker::Sized\">Sized</a>,\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/bounded/alloc/borrow/trait.Borrow.html\" title=\"trait gclient::ext::sp_core::bounded::alloc::borrow::Borrow\">Borrow</a>&lt;Q&gt; + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Splits the collection into two at the given key. Returns everything after the given key,\nincluding the key.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = BTreeMap::new();\na.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\na.insert(<span class=\"number\">2</span>, <span class=\"string\">\"b\"</span>);\na.insert(<span class=\"number\">3</span>, <span class=\"string\">\"c\"</span>);\na.insert(<span class=\"number\">17</span>, <span class=\"string\">\"d\"</span>);\na.insert(<span class=\"number\">41</span>, <span class=\"string\">\"e\"</span>);\n\n<span class=\"kw\">let </span>b = a.split_off(<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>);\n\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(b.len(), <span class=\"number\">3</span>);\n\n<span class=\"macro\">assert_eq!</span>(a[<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>], <span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert_eq!</span>(a[<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>], <span class=\"string\">\"b\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(b[<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>], <span class=\"string\">\"c\"</span>);\n<span class=\"macro\">assert_eq!</span>(b[<span class=\"kw-2\">&amp;</span><span class=\"number\">17</span>], <span class=\"string\">\"d\"</span>);\n<span class=\"macro\">assert_eq!</span>(b[<span class=\"kw-2\">&amp;</span><span class=\"number\">41</span>], <span class=\"string\">\"e\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#1438-1442\">Source</a><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.extract_if\" class=\"fn\">extract_if</a>&lt;F, R&gt;(\n    &amp;mut self,\n    range: R,\n    pred: F,\n) -&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/btree_map/struct.ExtractIf.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::btree_map::ExtractIf\">ExtractIf</a>&lt;'_, K, V, R, F, A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ExtractIf&lt;&#39;_, K, V, R, F, A&gt;\">â“˜</a><div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,\n    R: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/ops/trait.RangeBounds.html\" title=\"trait gclient::ext::sp_core::sp_std::ops::RangeBounds\">RangeBounds</a>&lt;K&gt;,\n    F: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/ops/trait.FnMut.html\" title=\"trait gclient::ext::sp_core::sp_std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut V</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>btree_extract_if</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates an iterator that visits elements (key-value pairs) in the specified range in\nascending key order and uses a closure to determine if an element\nshould be removed.</p>\n<p>If the closure returns <code>true</code>, the element is removed from the map and\nyielded. If the closure returns <code>false</code>, or panics, the element remains\nin the map and will not be yielded.</p>\n<p>The iterator also lets you mutate the value of each element in the\nclosure, regardless of whether you choose to keep or remove it.</p>\n<p>If the returned <code>ExtractIf</code> is not exhausted, e.g. because it is dropped without iterating\nor the iteration short-circuits, then the remaining elements will be retained.\nUse <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#method.retain\" title=\"method gclient::ext::sp_core::bounded::alloc::collections::BTreeMap::retain\"><code>retain</code></a> with a negated predicate if you do not need the returned iterator.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(btree_extract_if)]\n</span><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"comment\">// Splitting a map into even and odd keys, reusing the original map:\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: BTreeMap&lt;i32, i32&gt; = (<span class=\"number\">0</span>..<span class=\"number\">8</span>).map(|x| (x, x)).collect();\n<span class=\"kw\">let </span>evens: BTreeMap&lt;<span class=\"kw\">_</span>, <span class=\"kw\">_</span>&gt; = map.extract_if(.., |k, _v| k % <span class=\"number\">2 </span>== <span class=\"number\">0</span>).collect();\n<span class=\"kw\">let </span>odds = map;\n<span class=\"macro\">assert_eq!</span>(evens.keys().copied().collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;(), [<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]);\n<span class=\"macro\">assert_eq!</span>(odds.keys().copied().collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;(), [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]);\n\n<span class=\"comment\">// Splitting a map into low and high halves, reusing the original map:\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: BTreeMap&lt;i32, i32&gt; = (<span class=\"number\">0</span>..<span class=\"number\">8</span>).map(|x| (x, x)).collect();\n<span class=\"kw\">let </span>low: BTreeMap&lt;<span class=\"kw\">_</span>, <span class=\"kw\">_</span>&gt; = map.extract_if(<span class=\"number\">0</span>..<span class=\"number\">4</span>, |_k, _v| <span class=\"bool-val\">true</span>).collect();\n<span class=\"kw\">let </span>high = map;\n<span class=\"macro\">assert_eq!</span>(low.keys().copied().collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;(), [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(high.keys().copied().collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;(), [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_keys\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.54.0\">1.54.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#1496\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.into_keys\" class=\"fn\">into_keys</a>(self) -&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/btree_map/struct.IntoKeys.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::btree_map::IntoKeys\">IntoKeys</a>&lt;K, V, A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IntoKeys&lt;K, V, A&gt;\">â“˜</a></h4></section></summary><div class=\"docblock\"><p>Creates a consuming iterator visiting all the keys, in sorted order.\nThe map cannot be used after calling this.\nThe iterator element type is <code>K</code>.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = BTreeMap::new();\na.insert(<span class=\"number\">2</span>, <span class=\"string\">\"b\"</span>);\na.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\n\n<span class=\"kw\">let </span>keys: Vec&lt;i32&gt; = a.into_keys().collect();\n<span class=\"macro\">assert_eq!</span>(keys, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_values\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.54.0\">1.54.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#1518\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html#tymethod.into_values\" class=\"fn\">into_values</a>(self) -&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/btree_map/struct.IntoValues.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::btree_map::IntoValues\">IntoValues</a>&lt;K, V, A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IntoValues&lt;K, V, A&gt;\">â“˜</a></h4></section></summary><div class=\"docblock\"><p>Creates a consuming iterator visiting all the values, in order by key.\nThe map cannot be used after calling this.\nThe iterator element type is <code>V</code>.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = BTreeMap::new();\na.insert(<span class=\"number\">1</span>, <span class=\"string\">\"hello\"</span>);\na.insert(<span class=\"number\">2</span>, <span class=\"string\">\"goodbye\"</span>);\n\n<span class=\"kw\">let </span>values: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = a.into_values().collect();\n<span class=\"macro\">assert_eq!</span>(values, [<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"goodbye\"</span>]);</code></pre></div>\n</div></details></div></details>",0,"gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-BTreeMap%3CK,+V,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#207\">Source</a></span><a href=\"#impl-Clone-for-BTreeMap%3CK,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V, A&gt; <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Clone\">Clone</a> for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/alloc/trait.Allocator.html\" title=\"trait gclient::ext::sp_core::sp_std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#208\">Source</a><a href=\"#method.clone\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#209\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-BTreeMap%3CK,+V,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2418\">Source</a></span><a href=\"#impl-Debug-for-BTreeMap%3CK,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V, A&gt; <a class=\"trait\" href=\"gclient/ext/sp_runtime/traits/trait.Debug.html\" title=\"trait gclient::ext::sp_runtime::traits::Debug\">Debug</a> for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_runtime/traits/trait.Debug.html\" title=\"trait gclient::ext::sp_runtime::traits::Debug\">Debug</a>,\n    V: <a class=\"trait\" href=\"gclient/ext/sp_runtime/traits/trait.Debug.html\" title=\"trait gclient::ext::sp_runtime::traits::Debug\">Debug</a>,\n    A: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/alloc/trait.Allocator.html\" title=\"trait gclient::ext::sp_core::sp_std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2419\">Source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_runtime/traits/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"gclient/ext/sp_core/sp_std/result/enum.Result.html\" title=\"enum gclient::ext::sp_core::sp_std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"gclient/ext/sp_runtime/traits/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decode-for-BTreeMap%3CK,+V%3E\" class=\"impl\"><a href=\"#impl-Decode-for-BTreeMap%3CK,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"trait\" href=\"gclient/ext/sp_core/trait.Decode.html\" title=\"trait gclient::ext::sp_core::Decode\">Decode</a> for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/trait.Decode.html\" title=\"trait gclient::ext::sp_core::Decode\">Decode</a> + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,\n    V: <a class=\"trait\" href=\"gclient/ext/sp_core/trait.Decode.html\" title=\"trait gclient::ext::sp_core::Decode\">Decode</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a href=\"#method.decode\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/trait.Decode.html#tymethod.decode\" class=\"fn\">decode</a>&lt;I&gt;(input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut I</a>) -&gt; <a class=\"enum\" href=\"gclient/ext/sp_core/sp_std/result/enum.Result.html\" title=\"enum gclient::ext::sp_core::sp_std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;, <a class=\"struct\" href=\"gclient/ext/sp_runtime/codec/struct.Error.html\" title=\"struct gclient::ext::sp_runtime::codec::Error\">Error</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"gclient/ext/sp_runtime/codec/trait.Input.html\" title=\"trait gclient::ext::sp_runtime::codec::Input\">Input</a>,</div></h4></section></summary><div class='docblock'>Attempt to deserialise the value from input.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode_into\" class=\"method trait-impl\"><a href=\"#method.decode_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/trait.Decode.html#method.decode_into\" class=\"fn\">decode_into</a>&lt;I&gt;(\n    input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut I</a>,\n    dst: &amp;mut <a class=\"union\" href=\"gclient/ext/sp_core/sp_std/mem/union.MaybeUninit.html\" title=\"union gclient::ext::sp_core::sp_std::mem::MaybeUninit\">MaybeUninit</a>&lt;Self&gt;,\n) -&gt; <a class=\"enum\" href=\"gclient/ext/sp_core/sp_std/result/enum.Result.html\" title=\"enum gclient::ext::sp_core::sp_std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"gclient/ext/sp_runtime/codec/struct.DecodeFinished.html\" title=\"struct gclient::ext::sp_runtime::codec::DecodeFinished\">DecodeFinished</a>, <a class=\"struct\" href=\"gclient/ext/sp_runtime/codec/struct.Error.html\" title=\"struct gclient::ext::sp_runtime::codec::Error\">Error</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"gclient/ext/sp_runtime/codec/trait.Input.html\" title=\"trait gclient::ext::sp_runtime::codec::Input\">Input</a>,</div></h4></section></summary><div class='docblock'>Attempt to deserialize the value from input into a pre-allocated piece of memory. <a href=\"gclient/ext/sp_core/trait.Decode.html#method.decode_into\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.skip\" class=\"method trait-impl\"><a href=\"#method.skip\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/trait.Decode.html#method.skip\" class=\"fn\">skip</a>&lt;I&gt;(input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut I</a>) -&gt; <a class=\"enum\" href=\"gclient/ext/sp_core/sp_std/result/enum.Result.html\" title=\"enum gclient::ext::sp_core::sp_std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"gclient/ext/sp_runtime/codec/struct.Error.html\" title=\"struct gclient::ext::sp_runtime::codec::Error\">Error</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"gclient/ext/sp_runtime/codec/trait.Input.html\" title=\"trait gclient::ext::sp_runtime::codec::Input\">Input</a>,</div></h4></section></summary><div class='docblock'>Attempt to skip the encoded value from input. <a href=\"gclient/ext/sp_core/trait.Decode.html#method.skip\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_fixed_size\" class=\"method trait-impl\"><a href=\"#method.encoded_fixed_size\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/trait.Decode.html#method.encoded_fixed_size\" class=\"fn\">encoded_fixed_size</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the fixed encoded size of the type. <a href=\"gclient/ext/sp_core/trait.Decode.html#method.encoded_fixed_size\">Read more</a></div></details></div></details>","Decode","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DecodeLength-for-BTreeMap%3CK,+V%3E\" class=\"impl\"><a href=\"#impl-DecodeLength-for-BTreeMap%3CK,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"trait\" href=\"gclient/ext/sp_runtime/codec/trait.DecodeLength.html\" title=\"trait gclient::ext::sp_runtime::codec::DecodeLength\">DecodeLength</a> for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method trait-impl\"><a href=\"#method.len\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_runtime/codec/trait.DecodeLength.html#tymethod.len\" class=\"fn\">len</a>(self_encoded: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"gclient/ext/sp_core/sp_std/result/enum.Result.html\" title=\"enum gclient::ext::sp_core::sp_std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"gclient/ext/sp_runtime/codec/struct.Error.html\" title=\"struct gclient::ext::sp_runtime::codec::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Return the number of elements in <code>self_encoded</code>.</div></details></div></details>","DecodeLength","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-BTreeMap%3CK,+V%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2384\">Source</a></span><a href=\"#impl-Default-for-BTreeMap%3CK,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/default/trait.Default.html\" title=\"trait gclient::ext::sp_core::sp_std::default::Default\">Default</a> for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2386\">Source</a><a href=\"#method.default\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>BTreeMap</code>.</p>\n</div></details></div></details>","Default","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-BTreeMap%3CK,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/impls.rs.html#1568-1574\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-BTreeMap%3CK,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'de, K, V&gt; <a class=\"trait\" href=\"gclient/ext/sp_runtime/trait.Deserialize.html\" title=\"trait gclient::ext::sp_runtime::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_runtime/trait.Deserialize.html\" title=\"trait gclient::ext::sp_runtime::Deserialize\">Deserialize</a>&lt;'de&gt; + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,\n    V: <a class=\"trait\" href=\"gclient/ext/sp_runtime/trait.Deserialize.html\" title=\"trait gclient::ext::sp_runtime::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/impls.rs.html#1568-1574\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_runtime/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"gclient/ext/sp_core/sp_std/result/enum.Result.html\" title=\"enum gclient::ext::sp_core::sp_std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;, &lt;D as <a class=\"trait\" href=\"gclient/ext/sp_core/serde/trait.Deserializer.html\" title=\"trait gclient::ext::sp_core::serde::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"gclient/ext/sp_core/serde/trait.Deserializer.html#associatedtype.Error\" title=\"type gclient::ext::sp_core::serde::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"gclient/ext/sp_core/serde/trait.Deserializer.html\" title=\"trait gclient::ext::sp_core::serde::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"gclient/ext/sp_runtime/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-BTreeMap%3CK,+V,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#187\">Source</a></span><a href=\"#impl-Drop-for-BTreeMap%3CK,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V, A&gt; <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/ops/trait.Drop.html\" title=\"trait gclient::ext::sp_core::sp_std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/alloc/trait.Allocator.html\" title=\"trait gclient::ext::sp_core::sp_std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#188\">Source</a><a href=\"#method.drop\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/ops/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"gclient/ext/sp_core/sp_std/ops/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encode-for-BTreeMap%3CK,+V%3E\" class=\"impl\"><a href=\"#impl-Encode-for-BTreeMap%3CK,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"trait\" href=\"gclient/ext/sp_core/trait.Encode.html\" title=\"trait gclient::ext::sp_core::Encode\">Encode</a> for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/trait.Encode.html\" title=\"trait gclient::ext::sp_core::Encode\">Encode</a>,\n    V: <a class=\"trait\" href=\"gclient/ext/sp_core/trait.Encode.html\" title=\"trait gclient::ext::sp_core::Encode\">Encode</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_hint\" class=\"method trait-impl\"><a href=\"#method.size_hint\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/trait.Encode.html#method.size_hint\" class=\"fn\">size_hint</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>If possible give a hint of expected size of the encoding. <a href=\"gclient/ext/sp_core/trait.Encode.html#method.size_hint\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_to\" class=\"method trait-impl\"><a href=\"#method.encode_to\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/trait.Encode.html#method.encode_to\" class=\"fn\">encode_to</a>&lt;W&gt;(&amp;self, dest: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut W</a>)<div class=\"where\">where\n    W: <a class=\"trait\" href=\"gclient/ext/sp_runtime/codec/trait.Output.html\" title=\"trait gclient::ext::sp_runtime::codec::Output\">Output</a> + ?<a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/marker/trait.Sized.html\" title=\"trait gclient::ext::sp_core::sp_std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Convert self to a slice and append it to the destination.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a href=\"#method.encode\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/trait.Encode.html#method.encode\" class=\"fn\">encode</a>(&amp;self) -&gt; <a class=\"struct\" href=\"gclient/ext/sp_runtime/struct.Vec.html\" title=\"struct gclient::ext::sp_runtime::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">â“˜</a></h4></section></summary><div class='docblock'>Convert self to an owned vector.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.using_encoded\" class=\"method trait-impl\"><a href=\"#method.using_encoded\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/trait.Encode.html#method.using_encoded\" class=\"fn\">using_encoded</a>&lt;R, F&gt;(&amp;self, f: F) -&gt; R<div class=\"where\">where\n    F: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/ops/trait.FnOnce.html\" title=\"trait gclient::ext::sp_core::sp_std::ops::FnOnce\">FnOnce</a>(&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; R,</div></h4></section></summary><div class='docblock'>Convert self to a slice and then invoke the given closure with it.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_size\" class=\"method trait-impl\"><a href=\"#method.encoded_size\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/trait.Encode.html#method.encoded_size\" class=\"fn\">encoded_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Calculates the encoded size. <a href=\"gclient/ext/sp_core/trait.Encode.html#method.encoded_size\">Read more</a></div></details></div></details>","Encode","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsFields-for-BTreeMap%3CK,+V%3E\" class=\"impl\"><a href=\"#impl-EncodeAsFields-for-BTreeMap%3CK,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V&gt; EncodeAsFields for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/convert/trait.AsRef.html\" title=\"trait gclient::ext::sp_core::sp_std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt;,\n    V: EncodeAsType,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_as_fields_to\" class=\"method trait-impl\"><a href=\"#method.encode_as_fields_to\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_as_fields_to</a>&lt;R&gt;(\n    &amp;self,\n    fields: &amp;mut dyn FieldIter&lt;'_, &lt;R as TypeResolver&gt;::TypeId, Item = Field&lt;'_, &lt;R as TypeResolver&gt;::TypeId&gt;&gt;,\n    types: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;R</a>,\n    out: &amp;mut <a class=\"struct\" href=\"gclient/ext/sp_runtime/struct.Vec.html\" title=\"struct gclient::ext::sp_runtime::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"gclient/ext/sp_core/sp_std/result/enum.Result.html\" title=\"enum gclient::ext::sp_core::sp_std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;<div class=\"where\">where\n    R: TypeResolver,</div></h4></section></summary><div class='docblock'>Given some fields describing the shape of a type, attempt to encode to that shape.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_as_fields\" class=\"method trait-impl\"><a href=\"#method.encode_as_fields\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_as_fields</a>&lt;R&gt;(\n    &amp;self,\n    fields: &amp;mut dyn FieldIter&lt;'_, &lt;R as TypeResolver&gt;::TypeId, Item = Field&lt;'_, &lt;R as TypeResolver&gt;::TypeId&gt;&gt;,\n    types: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;R</a>,\n) -&gt; <a class=\"enum\" href=\"gclient/ext/sp_core/sp_std/result/enum.Result.html\" title=\"enum gclient::ext::sp_core::sp_std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"gclient/ext/sp_runtime/struct.Vec.html\" title=\"struct gclient::ext::sp_runtime::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, Error&gt;<div class=\"where\">where\n    R: TypeResolver,</div></h4></section></summary><div class='docblock'>This is a helper function which internally calls [<code>EncodeAsFields::encode_as_fields_to</code>]. Prefer to\nimplement that instead.</div></details></div></details>","EncodeAsFields","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsType-for-BTreeMap%3CK,+V%3E\" class=\"impl\"><a href=\"#impl-EncodeAsType-for-BTreeMap%3CK,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V&gt; EncodeAsType for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/convert/trait.AsRef.html\" title=\"trait gclient::ext::sp_core::sp_std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt;,\n    V: EncodeAsType,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_as_type_to\" class=\"method trait-impl\"><a href=\"#method.encode_as_type_to\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_as_type_to</a>&lt;R&gt;(\n    &amp;self,\n    type_id: &lt;R as TypeResolver&gt;::TypeId,\n    types: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;R</a>,\n    out: &amp;mut <a class=\"struct\" href=\"gclient/ext/sp_runtime/struct.Vec.html\" title=\"struct gclient::ext::sp_runtime::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"gclient/ext/sp_core/sp_std/result/enum.Result.html\" title=\"enum gclient::ext::sp_core::sp_std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;<div class=\"where\">where\n    R: TypeResolver,</div></h4></section></summary><div class='docblock'>Given some <code>type_id</code>, <code>types</code>, a <code>context</code> and some output target for the SCALE encoded bytes,\nattempt to SCALE encode the current value into the type given by <code>type_id</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_as_type\" class=\"method trait-impl\"><a href=\"#method.encode_as_type\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_as_type</a>&lt;R&gt;(\n    &amp;self,\n    type_id: &lt;R as TypeResolver&gt;::TypeId,\n    types: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;R</a>,\n) -&gt; <a class=\"enum\" href=\"gclient/ext/sp_core/sp_std/result/enum.Result.html\" title=\"enum gclient::ext::sp_core::sp_std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"gclient/ext/sp_runtime/struct.Vec.html\" title=\"struct gclient::ext::sp_runtime::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, Error&gt;<div class=\"where\">where\n    R: TypeResolver,</div></h4></section></summary><div class='docblock'>This is a helper function which internally calls [<code>EncodeAsType::encode_as_type_to</code>]. Prefer to\nimplement that instead.</div></details></div></details>","EncodeAsType","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C(%26K,+%26V)%3E-for-BTreeMap%3CK,+V,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2360-2361\">Source</a></span><a href=\"#impl-Extend%3C(%26K,+%26V)%3E-for-BTreeMap%3CK,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, K, V, A&gt; <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/iter/trait.Extend.html\" title=\"trait gclient::ext::sp_core::sp_std::iter::Extend\">Extend</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a V</a>)&gt; for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/marker/trait.Copy.html\" title=\"trait gclient::ext::sp_core::sp_std::marker::Copy\">Copy</a>,\n    V: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/marker/trait.Copy.html\" title=\"trait gclient::ext::sp_core::sp_std::marker::Copy\">Copy</a>,\n    A: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/alloc/trait.Allocator.html\" title=\"trait gclient::ext::sp_core::sp_std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2363\">Source</a><a href=\"#method.extend\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.IntoIterator.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::IntoIterator\">IntoIterator</a>&lt;Item = (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a V</a>)&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"gclient/ext/sp_core/sp_std/iter/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2368\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, _: (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a V</a>))</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"gclient/ext/sp_core/sp_std/iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<(&'a K, &'a V)>","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C(K,+V)%3E-for-BTreeMap%3CK,+V,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2345\">Source</a></span><a href=\"#impl-Extend%3C(K,+V)%3E-for-BTreeMap%3CK,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V, A&gt; <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/iter/trait.Extend.html\" title=\"trait gclient::ext::sp_core::sp_std::iter::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt; for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/alloc/trait.Allocator.html\" title=\"trait gclient::ext::sp_core::sp_std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2347\">Source</a><a href=\"#method.extend\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T&gt;(&amp;mut self, iter: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.IntoIterator.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"gclient/ext/sp_core/sp_std/iter/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2354\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"gclient/ext/sp_core/sp_std/iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<(K, V)>","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5B(K,+V);+N%5D%3E-for-BTreeMap%3CK,+V%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2444\">Source</a></span><a href=\"#impl-From%3C%5B(K,+V);+N%5D%3E-for-BTreeMap%3CK,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/convert/trait.From.html\" title=\"trait gclient::ext::sp_core::sp_std::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">N</a>]&gt; for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2457\">Source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(arr: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">N</a>]) -&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>[(K, V); N]</code> into a <code>BTreeMap&lt;K, V&gt;</code>.</p>\n<p>If any entries in the array have equal keys,\nall but one of the corresponding values will be dropped.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n\n<span class=\"kw\">let </span>map1 = BTreeMap::from([(<span class=\"number\">1</span>, <span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"number\">4</span>)]);\n<span class=\"kw\">let </span>map2: BTreeMap&lt;<span class=\"kw\">_</span>, <span class=\"kw\">_</span>&gt; = [(<span class=\"number\">1</span>, <span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"number\">4</span>)].into();\n<span class=\"macro\">assert_eq!</span>(map1, map2);</code></pre></div>\n</div></details></div></details>","From<[(K, V); N]>","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBoundedBTreeMap%3CK,+V,+S%3E%3E-for-BTreeMap%3CK,+V%3E\" class=\"impl\"><a href=\"#impl-From%3CBoundedBTreeMap%3CK,+V,+S%3E%3E-for-BTreeMap%3CK,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/convert/trait.From.html\" title=\"trait gclient::ext::sp_core::sp_std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"gclient/ext/sp_runtime/struct.BoundedBTreeMap.html\" title=\"struct gclient::ext::sp_runtime::BoundedBTreeMap\">BoundedBTreeMap</a>&lt;K, V, S&gt;&gt; for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(map: <a class=\"struct\" href=\"gclient/ext/sp_runtime/struct.BoundedBTreeMap.html\" title=\"struct gclient::ext::sp_runtime::BoundedBTreeMap\">BoundedBTreeMap</a>&lt;K, V, S&gt;) -&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<BoundedBTreeMap<K, V, S>>","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromFallibleIterator%3C(K,+V)%3E-for-BTreeMap%3CK,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/fallible-iterator/0.2/src/fallible_iterator/lib.rs.html#1142-1144\">Source</a><a href=\"#impl-FromFallibleIterator%3C(K,+V)%3E-for-BTreeMap%3CK,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"trait\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.FromFallibleIterator.html\" title=\"trait fallible_iterator::FromFallibleIterator\">FromFallibleIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt; for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_fallible_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/fallible-iterator/0.2/src/fallible_iterator/lib.rs.html#1147-1149\">Source</a><a href=\"#method.from_fallible_iter\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.FromFallibleIterator.html#tymethod.from_fallible_iter\" class=\"fn\">from_fallible_iter</a>&lt;I&gt;(\n    it: I,\n) -&gt; <a class=\"enum\" href=\"gclient/ext/sp_core/sp_std/result/enum.Result.html\" title=\"enum gclient::ext::sp_core::sp_std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;, &lt;I as <a class=\"trait\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.IntoFallibleIterator.html\" title=\"trait fallible_iterator::IntoFallibleIterator\">IntoFallibleIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.IntoFallibleIterator.html#associatedtype.Error\" title=\"type fallible_iterator::IntoFallibleIterator::Error\">Error</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.IntoFallibleIterator.html\" title=\"trait fallible_iterator::IntoFallibleIterator\">IntoFallibleIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from a fallible iterator.</div></details></div></details>","FromFallibleIterator<(K, V)>","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C(K,+V)%3E-for-BTreeMap%3CK,+V%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2326\">Source</a></span><a href=\"#impl-FromIterator%3C(K,+V)%3E-for-BTreeMap%3CK,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/iter/trait.FromIterator.html\" title=\"trait gclient::ext::sp_core::sp_std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt; for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2331\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iter: T) -&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.IntoIterator.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Constructs a <code>BTreeMap&lt;K, V&gt;</code> from an iterator of key-value pairs.</p>\n<p>If the iterator produces any pairs with equal keys,\nall but one of the corresponding values will be dropped.</p>\n</div></details></div></details>","FromIterator<(K, V)>","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-BTreeMap%3CK,+V,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2374\">Source</a></span><a href=\"#impl-Hash-for-BTreeMap%3CK,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V, A&gt; <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/hash/trait.Hash.html\" title=\"trait gclient::ext::sp_core::sp_std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/hash/trait.Hash.html\" title=\"trait gclient::ext::sp_core::sp_std::hash::Hash\">Hash</a>,\n    V: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/hash/trait.Hash.html\" title=\"trait gclient::ext::sp_core::sp_std::hash::Hash\">Hash</a>,\n    A: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/alloc/trait.Allocator.html\" title=\"trait gclient::ext::sp_core::sp_std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2375\">Source</a><a href=\"#method.hash\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/hash/trait.Hasher.html\" title=\"trait gclient::ext::sp_core::sp_std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"gclient/ext/sp_core/sp_std/hash/trait.Hasher.html\" title=\"trait gclient::ext::sp_core::sp_std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"gclient/ext/sp_core/sp_std/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/hash/trait.Hasher.html\" title=\"trait gclient::ext::sp_core::sp_std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/marker/trait.Sized.html\" title=\"trait gclient::ext::sp_core::sp_std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"gclient/ext/sp_core/sp_std/hash/trait.Hasher.html\" title=\"trait gclient::ext::sp_core::sp_std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"gclient/ext/sp_core/sp_std/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3C%26Q%3E-for-BTreeMap%3CK,+V,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2425-2428\">Source</a></span><a href=\"#impl-Index%3C%26Q%3E-for-BTreeMap%3CK,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, Q, V, A&gt; <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/ops/trait.Index.html\" title=\"trait gclient::ext::sp_core::sp_std::ops::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>&gt; for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/alloc/trait.Allocator.html\" title=\"trait gclient::ext::sp_core::sp_std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Clone\">Clone</a>,\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/bounded/alloc/borrow/trait.Borrow.html\" title=\"trait gclient::ext::sp_core::bounded::alloc::borrow::Borrow\">Borrow</a>&lt;Q&gt; + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,\n    Q: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/marker/trait.Sized.html\" title=\"trait gclient::ext::sp_core::sp_std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2438\">Source</a><a href=\"#method.index\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/ops/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the value corresponding to the supplied key.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">Â§</a>Panics</h5>\n<p>Panics if the key is not present in the <code>BTreeMap</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2430\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"gclient/ext/sp_core/sp_std/ops/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = V</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details></div></details>","Index<&Q>","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoDeserializer%3C'de,+E%3E-for-BTreeMap%3CK,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/value.rs.html#1577-1581\">Source</a><a href=\"#impl-IntoDeserializer%3C'de,+E%3E-for-BTreeMap%3CK,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'de, K, V, E&gt; <a class=\"trait\" href=\"gclient/ext/sp_core/serde/de/trait.IntoDeserializer.html\" title=\"trait gclient::ext::sp_core::serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt; for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/serde/de/trait.IntoDeserializer.html\" title=\"trait gclient::ext::sp_core::serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt; + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Eq.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Eq\">Eq</a> + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,\n    V: <a class=\"trait\" href=\"gclient/ext/sp_core/serde/de/trait.IntoDeserializer.html\" title=\"trait gclient::ext::sp_core::serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt;,\n    E: <a class=\"trait\" href=\"gclient/ext/sp_core/serde/de/trait.Error.html\" title=\"trait gclient::ext::sp_core::serde::de::Error\">Error</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Deserializer\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/value.rs.html#1583\">Source</a><a href=\"#associatedtype.Deserializer\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"gclient/ext/sp_core/serde/de/trait.IntoDeserializer.html#associatedtype.Deserializer\" class=\"associatedtype\">Deserializer</a> = <a class=\"struct\" href=\"gclient/ext/sp_core/serde/de/value/struct.MapDeserializer.html\" title=\"struct gclient::ext::sp_core::serde::de::value::MapDeserializer\">MapDeserializer</a>&lt;'de, &lt;<a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt; as <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.IntoIterator.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type gclient::ext::sp_core::sp_std::prelude::IntoIterator::IntoIter\">IntoIter</a>, E&gt;</h4></section></summary><div class='docblock'>The type of the deserializer being converted into.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_deserializer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/value.rs.html#1585\">Source</a><a href=\"#method.into_deserializer\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/serde/de/trait.IntoDeserializer.html#tymethod.into_deserializer\" class=\"fn\">into_deserializer</a>(\n    self,\n) -&gt; &lt;<a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt; as <a class=\"trait\" href=\"gclient/ext/sp_core/serde/de/trait.IntoDeserializer.html\" title=\"trait gclient::ext::sp_core::serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt;&gt;::<a class=\"associatedtype\" href=\"gclient/ext/sp_core/serde/de/trait.IntoDeserializer.html#associatedtype.Deserializer\" title=\"type gclient::ext::sp_core::serde::de::IntoDeserializer::Deserializer\">Deserializer</a></h4></section></summary><div class='docblock'>Convert this value into a deserializer.</div></details></div></details>","IntoDeserializer<'de, E>","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-BTreeMap%3CK,+V,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#1687\">Source</a></span><a href=\"#impl-IntoIterator-for-BTreeMap%3CK,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V, A&gt; <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.IntoIterator.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/alloc/trait.Allocator.html\" title=\"trait gclient::ext::sp_core::sp_std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#1692\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/prelude/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/btree_map/struct.IntoIter.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::btree_map::IntoIter\">IntoIter</a>&lt;K, V, A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IntoIter&lt;K, V, A&gt;\">â“˜</a></h4></section></summary><div class=\"docblock\"><p>Gets an owning iterator over the entries of the map, sorted by key.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#1688\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"gclient/ext/sp_core/sp_std/prelude/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#1689\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"gclient/ext/sp_core/sp_std/prelude/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/btree_map/struct.IntoIter.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::btree_map::IntoIter\">IntoIter</a>&lt;K, V, A&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-BTreeMap%3CK,+V,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2410\">Source</a></span><a href=\"#impl-Ord-for-BTreeMap%3CK,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V, A&gt; <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,\n    V: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/alloc/trait.Allocator.html\" title=\"trait gclient::ext::sp_core::sp_std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2412\">Source</a><a href=\"#method.cmp\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;) -&gt; <a class=\"enum\" href=\"gclient/ext/sp_core/sp_std/cmp/enum.Ordering.html\" title=\"enum gclient::ext::sp_core::sp_std::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"gclient/ext/sp_core/sp_std/cmp/enum.Ordering.html\" title=\"enum gclient::ext::sp_core::sp_std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1009-1011\">Source</a></span><a href=\"#method.max\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/marker/trait.Sized.html\" title=\"trait gclient::ext::sp_core::sp_std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1048-1050\">Source</a></span><a href=\"#method.min\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/marker/trait.Sized.html\" title=\"trait gclient::ext::sp_core::sp_std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1074-1076\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/marker/trait.Sized.html\" title=\"trait gclient::ext::sp_core::sp_std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"gclient/ext/sp_core/sp_std/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-BTreeMap%3CK,+V,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2392\">Source</a></span><a href=\"#impl-PartialEq-for-BTreeMap%3CK,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V, A&gt; <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.PartialEq.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.PartialEq.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::PartialEq\">PartialEq</a>,\n    V: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.PartialEq.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::PartialEq\">PartialEq</a>,\n    A: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/alloc/trait.Allocator.html\" title=\"trait gclient::ext::sp_core::sp_std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2393\">Source</a><a href=\"#method.eq\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/prelude/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/prelude/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-BTreeMap%3CK,+V,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2402\">Source</a></span><a href=\"#impl-PartialOrd-for-BTreeMap%3CK,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V, A&gt; <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.PartialOrd.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.PartialOrd.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::PartialOrd\">PartialOrd</a>,\n    V: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/cmp/trait.PartialOrd.html\" title=\"trait gclient::ext::sp_core::sp_std::cmp::PartialOrd\">PartialOrd</a>,\n    A: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/alloc/trait.Allocator.html\" title=\"trait gclient::ext::sp_core::sp_std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2404\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"gclient/ext/sp_core/sp_std/cmp/enum.Ordering.html\" title=\"enum gclient::ext::sp_core::sp_std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"gclient/ext/sp_core/sp_std/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1382\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"gclient/ext/sp_core/sp_std/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1400\">Source</a></span><a href=\"#method.le\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"gclient/ext/sp_core/sp_std/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1418\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"gclient/ext/sp_core/sp_std/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1436\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_core/sp_std/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"gclient/ext/sp_core/sp_std/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-BTreeMap%3CK,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/ser/impls.rs.html#495-499\">Source</a><a href=\"#impl-Serialize-for-BTreeMap%3CK,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"trait\" href=\"gclient/ext/sp_runtime/trait.Serialize.html\" title=\"trait gclient::ext::sp_runtime::Serialize\">Serialize</a> for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_runtime/trait.Serialize.html\" title=\"trait gclient::ext::sp_runtime::Serialize\">Serialize</a>,\n    V: <a class=\"trait\" href=\"gclient/ext/sp_runtime/trait.Serialize.html\" title=\"trait gclient::ext::sp_runtime::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/ser/impls.rs.html#495-499\">Source</a><a href=\"#method.serialize\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_runtime/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"gclient/ext/sp_core/sp_std/result/enum.Result.html\" title=\"enum gclient::ext::sp_core::sp_std::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"gclient/ext/sp_core/serde/trait.Serializer.html\" title=\"trait gclient::ext::sp_core::serde::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"gclient/ext/sp_core/serde/trait.Serializer.html#associatedtype.Ok\" title=\"type gclient::ext::sp_core::serde::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"gclient/ext/sp_core/serde/trait.Serializer.html\" title=\"trait gclient::ext::sp_core::serde::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"gclient/ext/sp_core/serde/trait.Serializer.html#associatedtype.Error\" title=\"type gclient::ext::sp_core::serde::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"gclient/ext/sp_core/serde/trait.Serializer.html\" title=\"trait gclient::ext::sp_core::serde::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"gclient/ext/sp_runtime/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","gclient::ext::sp_core::storage::StorageMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypeInfo-for-BTreeMap%3CK,+V%3E\" class=\"impl\"><a href=\"#impl-TypeInfo-for-BTreeMap%3CK,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"trait\" href=\"gclient/ext/sp_runtime/scale_info/trait.TypeInfo.html\" title=\"trait gclient::ext::sp_runtime::scale_info::TypeInfo\">TypeInfo</a> for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_runtime/scale_info/trait.TypeInfo.html\" title=\"trait gclient::ext::sp_runtime::scale_info::TypeInfo\">TypeInfo</a> + 'static,\n    V: <a class=\"trait\" href=\"gclient/ext/sp_runtime/scale_info/trait.TypeInfo.html\" title=\"trait gclient::ext::sp_runtime::scale_info::TypeInfo\">TypeInfo</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Identity\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Identity\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"gclient/ext/sp_runtime/scale_info/trait.TypeInfo.html#associatedtype.Identity\" class=\"associatedtype\">Identity</a> = <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;</h4></section></summary><div class='docblock'>The type identifying for which type info is provided. <a href=\"gclient/ext/sp_runtime/scale_info/trait.TypeInfo.html#associatedtype.Identity\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_info\" class=\"method trait-impl\"><a href=\"#method.type_info\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"gclient/ext/sp_runtime/scale_info/trait.TypeInfo.html#tymethod.type_info\" class=\"fn\">type_info</a>() -&gt; <a class=\"struct\" href=\"gclient/ext/sp_runtime/scale_info/struct.Type.html\" title=\"struct gclient::ext::sp_runtime::scale_info::Type\">Type</a></h4></section></summary><div class='docblock'>Returns the static type identifier for <code>Self</code>.</div></details></div></details>","TypeInfo","gclient::ext::sp_core::storage::StorageMap"],["<section id=\"impl-DecodeWithMemTracking-for-BTreeMap%3CK,+V%3E\" class=\"impl\"><a href=\"#impl-DecodeWithMemTracking-for-BTreeMap%3CK,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"trait\" href=\"gclient/ext/sp_runtime/codec/trait.DecodeWithMemTracking.html\" title=\"trait gclient::ext::sp_runtime::codec::DecodeWithMemTracking\">DecodeWithMemTracking</a> for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_runtime/codec/trait.DecodeWithMemTracking.html\" title=\"trait gclient::ext::sp_runtime::codec::DecodeWithMemTracking\">DecodeWithMemTracking</a>,\n    V: <a class=\"trait\" href=\"gclient/ext/sp_runtime/codec/trait.DecodeWithMemTracking.html\" title=\"trait gclient::ext::sp_runtime::codec::DecodeWithMemTracking\">DecodeWithMemTracking</a>,\n    <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;: <a class=\"trait\" href=\"gclient/ext/sp_core/trait.Decode.html\" title=\"trait gclient::ext::sp_core::Decode\">Decode</a>,</div></h3></section>","DecodeWithMemTracking","gclient::ext::sp_core::storage::StorageMap"],["<section id=\"impl-EncodeLike%3C%26%5B(LikeK,+LikeV)%5D%3E-for-BTreeMap%3CK,+V%3E\" class=\"impl\"><a href=\"#impl-EncodeLike%3C%26%5B(LikeK,+LikeV)%5D%3E-for-BTreeMap%3CK,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, LikeK, V, LikeV&gt; <a class=\"trait\" href=\"gclient/ext/sp_runtime/codec/trait.EncodeLike.html\" title=\"trait gclient::ext::sp_runtime::codec::EncodeLike\">EncodeLike</a>&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(LikeK, LikeV)</a>]&gt; for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_runtime/codec/trait.EncodeLike.html\" title=\"trait gclient::ext::sp_runtime::codec::EncodeLike\">EncodeLike</a>&lt;LikeK&gt;,\n    LikeK: <a class=\"trait\" href=\"gclient/ext/sp_core/trait.Encode.html\" title=\"trait gclient::ext::sp_core::Encode\">Encode</a>,\n    V: <a class=\"trait\" href=\"gclient/ext/sp_runtime/codec/trait.EncodeLike.html\" title=\"trait gclient::ext::sp_runtime::codec::EncodeLike\">EncodeLike</a>&lt;LikeV&gt;,\n    LikeV: <a class=\"trait\" href=\"gclient/ext/sp_core/trait.Encode.html\" title=\"trait gclient::ext::sp_core::Encode\">Encode</a>,</div></h3></section>","EncodeLike<&[(LikeK, LikeV)]>","gclient::ext::sp_core::storage::StorageMap"],["<section id=\"impl-EncodeLike%3CBTreeMap%3CLikeK,+LikeV%3E%3E-for-BTreeMap%3CK,+V%3E\" class=\"impl\"><a href=\"#impl-EncodeLike%3CBTreeMap%3CLikeK,+LikeV%3E%3E-for-BTreeMap%3CK,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, LikeK, V, LikeV&gt; <a class=\"trait\" href=\"gclient/ext/sp_runtime/codec/trait.EncodeLike.html\" title=\"trait gclient::ext::sp_runtime::codec::EncodeLike\">EncodeLike</a>&lt;<a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;LikeK, LikeV&gt;&gt; for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_runtime/codec/trait.EncodeLike.html\" title=\"trait gclient::ext::sp_runtime::codec::EncodeLike\">EncodeLike</a>&lt;LikeK&gt;,\n    LikeK: <a class=\"trait\" href=\"gclient/ext/sp_core/trait.Encode.html\" title=\"trait gclient::ext::sp_core::Encode\">Encode</a>,\n    V: <a class=\"trait\" href=\"gclient/ext/sp_runtime/codec/trait.EncodeLike.html\" title=\"trait gclient::ext::sp_runtime::codec::EncodeLike\">EncodeLike</a>&lt;LikeV&gt;,\n    LikeV: <a class=\"trait\" href=\"gclient/ext/sp_core/trait.Encode.html\" title=\"trait gclient::ext::sp_core::Encode\">Encode</a>,</div></h3></section>","EncodeLike<BTreeMap<LikeK, LikeV>>","gclient::ext::sp_core::storage::StorageMap"],["<section id=\"impl-Eq-for-BTreeMap%3CK,+V,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#2399\">Source</a></span><a href=\"#impl-Eq-for-BTreeMap%3CK,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V, A&gt; <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Eq.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Eq\">Eq</a> for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Eq.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Eq\">Eq</a>,\n    V: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Eq.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Eq\">Eq</a>,\n    A: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/alloc/trait.Allocator.html\" title=\"trait gclient::ext::sp_core::sp_std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Clone\">Clone</a>,</div></h3></section>","Eq","gclient::ext::sp_core::storage::StorageMap"],["<section id=\"impl-UnwindSafe-for-BTreeMap%3CK,+V,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/btree/map.rs.html#198-202\">Source</a></span><a href=\"#impl-UnwindSafe-for-BTreeMap%3CK,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/panic/unwind_safe/trait.UnwindSafe.html\" title=\"trait core::panic::unwind_safe::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"gclient/ext/sp_core/bounded/alloc/collections/struct.BTreeMap.html\" title=\"struct gclient::ext::sp_core::bounded::alloc::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/alloc/trait.Allocator.html\" title=\"trait gclient::ext::sp_core::sp_std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"gclient/ext/sp_core/sp_std/prelude/trait.Clone.html\" title=\"trait gclient::ext::sp_core::sp_std::prelude::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/panic/unwind_safe/trait.UnwindSafe.html\" title=\"trait core::panic::unwind_safe::UnwindSafe\">UnwindSafe</a>,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/panic/unwind_safe/trait.RefUnwindSafe.html\" title=\"trait core::panic::unwind_safe::RefUnwindSafe\">RefUnwindSafe</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/panic/unwind_safe/trait.RefUnwindSafe.html\" title=\"trait core::panic::unwind_safe::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section>","UnwindSafe","gclient::ext::sp_core::storage::StorageMap"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[202580]}