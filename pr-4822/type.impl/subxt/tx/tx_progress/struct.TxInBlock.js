(function() {
    var type_impls = Object.fromEntries([["gsdk",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-TxInBlock%3CT,+C%3E\" class=\"impl\"><a href=\"#impl-Debug-for-TxInBlock%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for TxInBlock&lt;T, C&gt;<div class=\"where\">where\n    T: Config,\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, __f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","gsdk::TxInBlock"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TxInBlock%3CT,+C%3E\" class=\"impl\"><a href=\"#impl-TxInBlock%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; TxInBlock&lt;T, C&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.block_hash\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">block_hash</a>(&amp;self) -&gt; &lt;T as Config&gt;::Hash</h4></section></summary><div class=\"docblock\"><p>Return the hash of the block that the transaction has made it into.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extrinsic_hash\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">extrinsic_hash</a>(&amp;self) -&gt; &lt;T as Config&gt;::Hash</h4></section></summary><div class=\"docblock\"><p>Return the hash of the extrinsic that was submitted.</p>\n</div></details></div></details>",0,"gsdk::TxInBlock"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TxInBlock%3CT,+C%3E\" class=\"impl\"><a href=\"#impl-TxInBlock%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; TxInBlock&lt;T, C&gt;<div class=\"where\">where\n    T: Config,\n    C: OnlineClientT&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wait_for_success\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">wait_for_success</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;ExtrinsicEvents&lt;T&gt;, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Fetch the events associated with this transaction. If the transaction\nwas successful (ie no <code>ExtrinsicFailed</code>) events were found, then we return\nthe events associated with it. If the transaction was not successful, or\nsomething else went wrong, we return an error.</p>\n<p><strong>Note:</strong> If multiple <code>ExtrinsicFailed</code> errors are returned (for instance\nbecause a pallet chooses to emit one as an event, which is considered\nabnormal behaviour), it is not specified which of the errors is returned here.\nYou can use [<code>TxInBlock::fetch_events</code>] instead if you’d like to\nwork with multiple “error” events.</p>\n<p><strong>Note:</strong> This has to download block details from the node and decode events\nfrom them.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_events\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">fetch_events</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;ExtrinsicEvents&lt;T&gt;, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Fetch all of the events associated with this transaction. This succeeds whether\nthe transaction was a success or not; it’s up to you to handle the error and\nsuccess events however you prefer.</p>\n<p><strong>Note:</strong> This has to download block details from the node and decode events\nfrom them.</p>\n</div></details></div></details>",0,"gsdk::TxInBlock"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[5210]}