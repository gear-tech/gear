
#![feature(prelude_import)]
// This file is part of Gear.

// Copyright (C) 2021-2024 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

// `construct_runtime!` does a lot of recursion and requires us to increase the limit to 256.
#![recursion_limit = "256"]
#![allow(clippy::items_after_test_module)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;

// Make the WASM binary available.






// Weights used in the runtime.

// Voters weights



// By this we assert if runtime compiled with "dev" feature.

// By this we inject compile time version including commit hash
// (https://github.com/paritytech/substrate/blob/297b3948f4a0f7f6504d4b654e16cb5d9201e523/utils/build-script-utils/src/version.rs#L44)
// into the WASM runtime blob. This is used by the `runtime_wasmBlobVersion` RPC call.
// The format of the version is `x.y.z-commit_hash`, where the `x.y.z` is the version of this crate,
// and the `commit_hash` is the hash of the commit from which the WASM blob was built.

// The version of the runtime specification. A full node will not attempt to use its native
//   runtime in substitute for the on-chain Wasm runtime unless all of `spec_name`,
//   `spec_version`, and `authoring_version` are the same between Wasm and native.


// We'll verify that WEIGHT_REF_TIME_PER_SECOND does not overflow, allowing us to use
// simple multiply and divide operators instead of saturating or checked ones.




// Configure FRAME pallets to include in runtime.











// Retry a scheduled item every 30 blocks (1 minute) until the preimage exists.




// For weight estimation, we assume that the most locks on an individual account will be 50.
// This number may need to be adjusted in the future if this assumption no longer holds true.







// Filter that matches `pallet_staking::Pallet<T>::bond()` call

// Filter that matches accounts for which staking is disabled



// phase durations. 1/4 of the last session for each.

// signed config


// miner configs
// Solution can occupy 90% of normal block size


// 16; TODO: Kusama has 24 => which one is more appropriate?
// OnChain values are lower.
// The maximum winners that can be elected by the Election pallet which is equivalent to the
// maximum active validators the staking pallet can have.



// The unsigned submissions have to respect the weight of the submit_unsigned call, thus their
// weight estimate function is wired to this call's weight.


// Six sessions in an era (12 hours)
// 42 eras for unbonding (7 days)
// 41 eras during which slashes can be cancelled (slightly less than 7 days)
// 2 hour session, 30 min unsigned phase, 16 offchain executions.



// Burning the reward remainder for now.
// TODO: set remainder back to `RewardProxy<Self, Treasury>` to stop burning `Treasury` part.





// we use the same number of allowed unlocking chunks as with staking.











// 258 bytes on-chain
// 66 bytes on-chain
// 53 bytes on-chain




// One storage item; key size is 32; value is size 4+4+16+32 bytes = 56 bytes.
// Additional storage item size of 32 bytes.


// One storage item; key size 32, value size 8; .
// Additional storage item size of 33 bytes.








// 64 MB, must be less than max runtime heap memory.
// NOTE: currently runtime heap memory is 1 GB (see https://shorturl.at/DET45)















// Calls that affect message queue and are subject to extra fee


// TODO: simplify it (#3640).







// Create the runtime by composing the FRAME pallets that were previously configured.

// Governance





// NOTE (!): `pallet_airdrop` used to be idx(198).

// Only available with "dev" feature on


// Governance




// NOTE (!): `pallet_sudo` used to be idx(99).
// NOTE (!): `pallet_airdrop` used to be idx(198).

// Keep as long as it's needed





// Substrate pallets
// Gear pallets

// The choice of `c` parameter (where `1 - c` represents the
// probability of a slot being empty), is done in accordance to the
// slot duration and expected target block time, for safely
// resisting network delays of maximum two seconds.
// <https://research.web3.foundation/en/latest/polkadot/BABE/Babe/#6-practical-results>















// NOTE: intentional unwrap: we don't want to propagate the error backwards, and want to
// have a backtrace here. If any of the pre/post migration checks fail, we shall stop
// right here and right now.

// NOTE: intentional unwrap: we don't want to propagate the error backwards, and want to
// have a backtrace here.


use common::{storage::Messenger, DelegateFee};
use frame_election_provider_support::{
    bounds::ElectionBoundsBuilder, onchain, ElectionDataProvider,
    NposSolution, SequentialPhragmen, VoteWeight,
};
use frame_support::weights::ConstantMultiplier;
pub use frame_support::{
    construct_runtime, dispatch::{DispatchClass, WeighData},
    parameter_types,
    traits::{
        ConstU128, ConstU16, ConstU32, Contains, Currency, EitherOf,
        EitherOfDiverse, EqualPrivilegeOnly, Everything, FindAuthor,
        InstanceFilter, KeyOwnerProofSystem, LockIdentifier, Nothing,
        OnUnbalanced, Randomness, StorageInfo, WithdrawReasons,
    },
    weights::{
        constants::{
            BlockExecutionWeight, ExtrinsicBaseWeight, RocksDbWeight,
            WEIGHT_REF_TIME_PER_MILLIS, WEIGHT_REF_TIME_PER_SECOND,
        },
        Weight,
    },
    PalletId, StorageValue,
};
use frame_system::{
    limits::{BlockLength, BlockWeights},
    EnsureRoot,
};
use pallet_election_provider_multi_phase::SolutionAccuracyOf;
pub use pallet_gear::manager::{ExtManager, HandleKind};
pub use pallet_gear_payment::CustomChargeTransactionPayment;
pub use pallet_gear_staking_rewards::StakingBlackList;
use pallet_grandpa::{
    fg_primitives, AuthorityId as GrandpaId,
    AuthorityList as GrandpaAuthorityList,
};
use pallet_im_online::sr25519::AuthorityId as ImOnlineId;
use pallet_session::historical::self as pallet_session_historical;
pub use pallet_timestamp::Call as TimestampCall;
pub use pallet_transaction_payment::{
    CurrencyAdapter, FeeDetails, Multiplier, RuntimeDispatchInfo,
};
use runtime_common::constants::BANK_ADDRESS;
pub use runtime_common::{
    constants::{
        RENT_DISABLED_DELTA_WEEK_FACTOR, RENT_FREE_PERIOD_MONTH_FACTOR,
        RENT_RESUME_WEEK_FACTOR, RESUME_SESSION_DURATION_HOUR_FACTOR,
    },
    impl_runtime_apis_plus_common, BlockHashCount, DealWithFees,
    AVERAGE_ON_INITIALIZE_RATIO, GAS_LIMIT_MIN_PERCENTAGE_NUM,
    NORMAL_DISPATCH_RATIO, VALUE_PER_GAS,
};
pub use runtime_primitives::{AccountId, Signature, VARA_SS58_PREFIX};
use runtime_primitives::{Balance, BlockNumber, Hash, Moment, Nonce};
use sp_api::impl_runtime_apis;
#[cfg(any(feature = "std", test))]
use sp_api::{
    CallApiAt, CallContext, Extensions, OverlayedChanges, ProofRecorder,
};
use sp_core::{
    crypto::KeyTypeId, ConstBool, ConstU64, ConstU8, OpaqueMetadata, H256,
};
#[cfg(any(feature = "std", test))]
use sp_runtime::traits::HashingFor;
use sp_runtime::{
    codec::{Decode, Encode, MaxEncodedLen},
    create_runtime_str, generic, impl_opaque_keys,
    traits::{
        AccountIdLookup, BlakeTwo256, Block as BlockT, ConvertInto, NumberFor,
        OpaqueKeys,
    },
    transaction_validity::{
        TransactionPriority, TransactionSource, TransactionValidity,
    },
    ApplyExtrinsicResult, FixedU128, Perbill, Percent, Permill, Perquintill,
    RuntimeDebug,
};
use sp_std::{
    convert::{TryFrom, TryInto},
    prelude::*,
};
#[cfg(feature = "std")]
use sp_version::NativeVersion;
use sp_version::RuntimeVersion;
#[cfg(any(feature = "std", test))]
pub use frame_system::Call as SystemCall;
#[cfg(any(feature = "std", test))]
pub use pallet_balances::Call as BalancesCall;
#[cfg(any(feature = "std", test))]
pub use pallet_staking::StakerStatus;
#[cfg(any(feature = "std", test))]
pub use sp_runtime::BuildStorage;
pub use pallet_gear;
pub use pallet_gear_gas;
pub use pallet_gear_payment;
pub mod constants {
    /// Currency related constants
    pub mod currency {
        use runtime_primitives::Balance;
        pub const UNITS: Balance = 1_000_000_000_000;
        /// Base economic unit, 10 Vara.
        pub const ECONOMIC_UNITS: Balance = UNITS * 10;
        pub const ECONOMIC_CENTIUNITS: Balance = ECONOMIC_UNITS / 100;
        /// The existential deposit.
        pub const EXISTENTIAL_DEPOSIT: Balance = 10 * UNITS;
        /// The program rent cost per block.
        pub const RENT_COST_PER_BLOCK: Balance = 125_000_000;
        /// Helper function to calculate various deposits for using pallets' storage
        pub const fn deposit(items: u32, bytes: u32) -> Balance {
            items as Balance * 15 * ECONOMIC_CENTIUNITS +
                (bytes as Balance) * 6 * ECONOMIC_CENTIUNITS
        }
    }
    /// Time and block constants
    pub mod time {
        use runtime_primitives::{BlockNumber, Moment};
        /// Since BABE is probabilistic this is the average expected block time that
        /// we are targeting. Blocks will be produced at a minimum duration defined
        /// by `SLOT_DURATION`, but some slots will not be allocated to any
        /// authority and hence no block will be produced. We expect to have this
        /// block time on average following the defined slot duration and the value
        /// of `c` configured for BABE (where `1 - c` represents the probability of
        /// a slot being empty).
        /// This value is only used indirectly to define the unit constants below
        /// that are expressed in blocks. The rest of the code should use
        /// `SLOT_DURATION` instead (like the Timestamp pallet for calculating the
        /// minimum period).
        ///
        /// If using BABE with secondary slots (default) then all of the slots will
        /// always be assigned, in which case `MILLISECS_PER_BLOCK` and
        /// `SLOT_DURATION` should have the same value.
        ///
        /// <https://research.web3.foundation/en/latest/polkadot/BABE/Babe/#6-practical-results>
        pub const MILLISECS_PER_BLOCK: Moment = 3000;
        pub const MILLISECONDS_PER_YEAR: u64 = 1000 * 3600 * 24 * 36525 / 100;
        pub const SLOT_DURATION: Moment = MILLISECS_PER_BLOCK;
        pub const MINUTES: BlockNumber =
            60_000 / (MILLISECS_PER_BLOCK as BlockNumber);
        pub const HOURS: BlockNumber = MINUTES * 60;
        pub const DAYS: BlockNumber = HOURS * 24;
        pub const WEEKS: BlockNumber = DAYS * 7;
        pub const MONTHS: BlockNumber = WEEKS * 4;
        pub const EPOCH_DURATION_IN_BLOCKS: BlockNumber = 2 * HOURS;
        pub const EPOCH_DURATION_IN_SLOTS: u64 =
            {
                const SLOT_FILL_RATE: f64 =
                    MILLISECS_PER_BLOCK as f64 / SLOT_DURATION as f64;
                (EPOCH_DURATION_IN_BLOCKS as f64 * SLOT_FILL_RATE) as u64
            };
        pub const PRIMARY_PROBABILITY: (u64, u64) = (1, 4);
    }
}
pub use constants::{currency::*, time::*};
mod weights {
    //! A list of the different weight modules for our runtime.
    pub mod frame_system {
        //! Autogenerated weights for frame_system
        //!
        //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
        //! DATE: 2024-04-09, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
        //! WORST CASE MAP SIZE: `1000000`
        //! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
        //! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024
        #![allow(unused_parens)]
        #![allow(unused_imports)]
        #![allow(clippy::unnecessary_cast)]
        use frame_support::{
            traits::Get, weights::{Weight, constants::RocksDbWeight},
        };
        use sp_std::marker::PhantomData;
        /// Weight functions needed for frame_system.
        pub trait WeightInfo {
            fn remark(b: u32)
            -> Weight;
            fn remark_with_event(b: u32)
            -> Weight;
            fn set_heap_pages()
            -> Weight;
            fn set_code()
            -> Weight;
            fn set_storage(i: u32)
            -> Weight;
            fn kill_storage(i: u32)
            -> Weight;
            fn kill_prefix(p: u32)
            -> Weight;
        }
        /// Weights for frame_system using the Gear node and recommended hardware.
        pub struct SubstrateWeight<T>(PhantomData<T>);
        impl<T: frame_system::Config> frame_system::WeightInfo for
            SubstrateWeight<T> {
            /// The range of component `b` is `[0, 1310720]`.
            fn remark(b: u32) -> Weight {
                Weight::from_parts(1_843_802,
                        0).saturating_add(Weight::from_parts(374,
                            0).saturating_mul(b.into()))
            }
            /// The range of component `b` is `[0, 1310720]`.
            fn remark_with_event(b: u32) -> Weight {
                Weight::from_parts(6_168_000,
                        0).saturating_add(Weight::from_parts(1_340,
                            0).saturating_mul(b.into()))
            }
            fn set_heap_pages() -> Weight {
                Weight::from_parts(3_267_000,
                            1485).saturating_add(T::DbWeight::get().reads(1_u64)).saturating_add(T::DbWeight::get().writes(2_u64))
            }
            fn set_code() -> Weight {
                Weight::from_parts(103_916_111_000,
                            1485).saturating_add(T::DbWeight::get().reads(1_u64)).saturating_add(T::DbWeight::get().writes(2_u64))
            }
            /// The range of component `i` is `[0, 1000]`.
            fn set_storage(i: u32) -> Weight {
                Weight::from_parts(1_560_000,
                            0).saturating_add(Weight::from_parts(686_367,
                                0).saturating_mul(i.into())).saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
            }
            /// The range of component `i` is `[0, 1000]`.
            fn kill_storage(i: u32) -> Weight {
                Weight::from_parts(1_582_000,
                            0).saturating_add(Weight::from_parts(518_512,
                                0).saturating_mul(i.into())).saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
            }
            /// The range of component `p` is `[0, 1000]`.
            fn kill_prefix(p: u32) -> Weight {
                Weight::from_parts(3_461_000,
                                    89).saturating_add(Weight::from_parts(1_088_859,
                                        0).saturating_mul(p.into())).saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into()))).saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into()))).saturating_add(Weight::from_parts(0,
                            70).saturating_mul(p.into()))
            }
        }
        impl WeightInfo for () {
            /// The range of component `b` is `[0, 1310720]`.
            fn remark(b: u32) -> Weight {
                Weight::from_parts(1_843_802,
                        0).saturating_add(Weight::from_parts(374,
                            0).saturating_mul(b.into()))
            }
            /// The range of component `b` is `[0, 1310720]`.
            fn remark_with_event(b: u32) -> Weight {
                Weight::from_parts(6_168_000,
                        0).saturating_add(Weight::from_parts(1_340,
                            0).saturating_mul(b.into()))
            }
            fn set_heap_pages() -> Weight {
                Weight::from_parts(3_267_000,
                            1485).saturating_add(RocksDbWeight::get().reads(1_u64)).saturating_add(RocksDbWeight::get().writes(2_u64))
            }
            fn set_code() -> Weight {
                Weight::from_parts(103_916_111_000,
                            1485).saturating_add(RocksDbWeight::get().reads(1_u64)).saturating_add(RocksDbWeight::get().writes(2_u64))
            }
            /// The range of component `i` is `[0, 1000]`.
            fn set_storage(i: u32) -> Weight {
                Weight::from_parts(1_560_000,
                            0).saturating_add(Weight::from_parts(686_367,
                                0).saturating_mul(i.into())).saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(i.into())))
            }
            /// The range of component `i` is `[0, 1000]`.
            fn kill_storage(i: u32) -> Weight {
                Weight::from_parts(1_582_000,
                            0).saturating_add(Weight::from_parts(518_512,
                                0).saturating_mul(i.into())).saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(i.into())))
            }
            /// The range of component `p` is `[0, 1000]`.
            fn kill_prefix(p: u32) -> Weight {
                Weight::from_parts(3_461_000,
                                    89).saturating_add(Weight::from_parts(1_088_859,
                                        0).saturating_mul(p.into())).saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(p.into()))).saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(p.into()))).saturating_add(Weight::from_parts(0,
                            70).saturating_mul(p.into()))
            }
        }
    }
    pub mod pallet_balances {
        //! Autogenerated weights for pallet_balances
        //!
        //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
        //! DATE: 2024-04-09, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
        //! WORST CASE MAP SIZE: `1000000`
        //! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
        //! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024
        #![allow(unused_parens)]
        #![allow(unused_imports)]
        #![allow(clippy::unnecessary_cast)]
        use frame_support::{
            traits::Get, weights::{Weight, constants::RocksDbWeight},
        };
        use sp_std::marker::PhantomData;
        /// Weight functions needed for pallet_balances.
        pub trait WeightInfo {
            fn transfer_allow_death()
            -> Weight;
            fn transfer_keep_alive()
            -> Weight;
            fn force_set_balance_creating()
            -> Weight;
            fn force_set_balance_killing()
            -> Weight;
            fn force_transfer()
            -> Weight;
            fn transfer_all()
            -> Weight;
            fn force_unreserve()
            -> Weight;
            fn upgrade_accounts(u: u32)
            -> Weight;
        }
        /// Weights for pallet_balances using the Gear node and recommended hardware.
        pub struct SubstrateWeight<T>(PhantomData<T>);
        impl<T: frame_system::Config> pallet_balances::WeightInfo for
            SubstrateWeight<T> {
            fn transfer_allow_death() -> Weight {
                Weight::from_parts(70_074_000,
                            6196).saturating_add(T::DbWeight::get().reads(2_u64)).saturating_add(T::DbWeight::get().writes(2_u64))
            }
            fn transfer_keep_alive() -> Weight {
                Weight::from_parts(39_985_000,
                            3593).saturating_add(T::DbWeight::get().reads(1_u64)).saturating_add(T::DbWeight::get().writes(1_u64))
            }
            fn force_set_balance_creating() -> Weight {
                Weight::from_parts(13_760_000,
                            3593).saturating_add(T::DbWeight::get().reads(1_u64)).saturating_add(T::DbWeight::get().writes(1_u64))
            }
            fn force_set_balance_killing() -> Weight {
                Weight::from_parts(20_599_000,
                            3593).saturating_add(T::DbWeight::get().reads(1_u64)).saturating_add(T::DbWeight::get().writes(1_u64))
            }
            fn force_transfer() -> Weight {
                Weight::from_parts(71_685_000,
                            8799).saturating_add(T::DbWeight::get().reads(3_u64)).saturating_add(T::DbWeight::get().writes(3_u64))
            }
            fn transfer_all() -> Weight {
                Weight::from_parts(50_809_000,
                            3593).saturating_add(T::DbWeight::get().reads(1_u64)).saturating_add(T::DbWeight::get().writes(1_u64))
            }
            fn force_unreserve() -> Weight {
                Weight::from_parts(16_687_000,
                            3593).saturating_add(T::DbWeight::get().reads(1_u64)).saturating_add(T::DbWeight::get().writes(1_u64))
            }
            /// The range of component `u` is `[1, 1000]`.
            fn upgrade_accounts(u: u32) -> Weight {
                Weight::from_parts(16_293_000,
                                    990).saturating_add(Weight::from_parts(14_387_998,
                                        0).saturating_mul(u.into())).saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(u.into()))).saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(u.into()))).saturating_add(Weight::from_parts(0,
                            2603).saturating_mul(u.into()))
            }
        }
        impl WeightInfo for () {
            fn transfer_allow_death() -> Weight {
                Weight::from_parts(70_074_000,
                            6196).saturating_add(RocksDbWeight::get().reads(2_u64)).saturating_add(RocksDbWeight::get().writes(2_u64))
            }
            fn transfer_keep_alive() -> Weight {
                Weight::from_parts(39_985_000,
                            3593).saturating_add(RocksDbWeight::get().reads(1_u64)).saturating_add(RocksDbWeight::get().writes(1_u64))
            }
            fn force_set_balance_creating() -> Weight {
                Weight::from_parts(13_760_000,
                            3593).saturating_add(RocksDbWeight::get().reads(1_u64)).saturating_add(RocksDbWeight::get().writes(1_u64))
            }
            fn force_set_balance_killing() -> Weight {
                Weight::from_parts(20_599_000,
                            3593).saturating_add(RocksDbWeight::get().reads(1_u64)).saturating_add(RocksDbWeight::get().writes(1_u64))
            }
            fn force_transfer() -> Weight {
                Weight::from_parts(71_685_000,
                            8799).saturating_add(RocksDbWeight::get().reads(3_u64)).saturating_add(RocksDbWeight::get().writes(3_u64))
            }
            fn transfer_all() -> Weight {
                Weight::from_parts(50_809_000,
                            3593).saturating_add(RocksDbWeight::get().reads(1_u64)).saturating_add(RocksDbWeight::get().writes(1_u64))
            }
            fn force_unreserve() -> Weight {
                Weight::from_parts(16_687_000,
                            3593).saturating_add(RocksDbWeight::get().reads(1_u64)).saturating_add(RocksDbWeight::get().writes(1_u64))
            }
            /// The range of component `u` is `[1, 1000]`.
            fn upgrade_accounts(u: u32) -> Weight {
                Weight::from_parts(16_293_000,
                                    990).saturating_add(Weight::from_parts(14_387_998,
                                        0).saturating_mul(u.into())).saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(u.into()))).saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(u.into()))).saturating_add(Weight::from_parts(0,
                            2603).saturating_mul(u.into()))
            }
        }
    }
    pub mod pallet_gear {
        //! Autogenerated weights for pallet_gear
        //!
        //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
        //! DATE: 2024-04-09, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
        //! WORST CASE MAP SIZE: `1000000`
        //! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
        //! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024
        #![allow(unused_parens)]
        #![allow(unused_imports)]
        #![allow(clippy::unnecessary_cast)]
        use frame_support::{
            traits::Get, weights::{Weight, constants::RocksDbWeight},
        };
        use sp_std::marker::PhantomData;
        /// Weight functions needed for pallet_gear.
        pub trait WeightInfo {
            fn gr_reply(r: u32)
            -> Weight;
            fn gr_reply_wgas(r: u32)
            -> Weight;
            fn gr_reply_commit(r: u32)
            -> Weight;
            fn gr_reply_commit_wgas(r: u32)
            -> Weight;
            fn gr_reply_input(r: u32)
            -> Weight;
            fn gr_reply_input_wgas(r: u32)
            -> Weight;
            fn gr_reservation_reply(r: u32)
            -> Weight;
            fn gr_reservation_reply_commit(r: u32)
            -> Weight;
            fn gr_exit(r: u32)
            -> Weight;
            fn gr_leave(r: u32)
            -> Weight;
            fn gr_wait(r: u32)
            -> Weight;
            fn gr_wait_for(r: u32)
            -> Weight;
            fn gr_wait_up_to(r: u32)
            -> Weight;
            fn db_write_per_kb(c: u32)
            -> Weight;
            fn db_read_per_kb(c: u32)
            -> Weight;
            fn instantiate_module_per_kb(c: u32)
            -> Weight;
            fn claim_value()
            -> Weight;
            fn upload_code(c: u32)
            -> Weight;
            fn create_program(s: u32)
            -> Weight;
            fn upload_program(c: u32, s: u32)
            -> Weight;
            fn send_message(p: u32)
            -> Weight;
            fn send_reply(p: u32)
            -> Weight;
            fn reinstrument_per_kb(c: u32)
            -> Weight;
            fn alloc(r: u32)
            -> Weight;
            fn alloc_per_page(p: u32)
            -> Weight;
            fn free(r: u32)
            -> Weight;
            fn free_range(r: u32)
            -> Weight;
            fn free_range_per_page(p: u32)
            -> Weight;
            fn gr_reserve_gas(r: u32)
            -> Weight;
            fn gr_unreserve_gas(r: u32)
            -> Weight;
            fn gr_system_reserve_gas(r: u32)
            -> Weight;
            fn gr_message_id(r: u32)
            -> Weight;
            fn gr_program_id(r: u32)
            -> Weight;
            fn gr_source(r: u32)
            -> Weight;
            fn gr_value(r: u32)
            -> Weight;
            fn gr_value_available(r: u32)
            -> Weight;
            fn gr_gas_available(r: u32)
            -> Weight;
            fn gr_size(r: u32)
            -> Weight;
            fn gr_read(r: u32)
            -> Weight;
            fn gr_read_per_kb(n: u32)
            -> Weight;
            fn gr_env_vars(r: u32)
            -> Weight;
            fn gr_block_height(r: u32)
            -> Weight;
            fn gr_block_timestamp(r: u32)
            -> Weight;
            fn gr_random(n: u32)
            -> Weight;
            fn gr_reply_deposit(r: u32)
            -> Weight;
            fn gr_send(r: u32)
            -> Weight;
            fn gr_send_per_kb(n: u32)
            -> Weight;
            fn gr_send_wgas(r: u32)
            -> Weight;
            fn gr_send_wgas_per_kb(n: u32)
            -> Weight;
            fn gr_send_input(r: u32)
            -> Weight;
            fn gr_send_input_wgas(r: u32)
            -> Weight;
            fn gr_send_init(r: u32)
            -> Weight;
            fn gr_send_push(r: u32)
            -> Weight;
            fn gr_send_push_per_kb(n: u32)
            -> Weight;
            fn gr_send_commit(r: u32)
            -> Weight;
            fn gr_send_commit_wgas(r: u32)
            -> Weight;
            fn gr_reservation_send(r: u32)
            -> Weight;
            fn gr_reservation_send_per_kb(n: u32)
            -> Weight;
            fn gr_reservation_send_commit(r: u32)
            -> Weight;
            fn gr_reply_per_kb(n: u32)
            -> Weight;
            fn gr_reply_wgas_per_kb(n: u32)
            -> Weight;
            fn gr_reply_push(r: u32)
            -> Weight;
            fn gr_reply_push_per_kb(n: u32)
            -> Weight;
            fn gr_reservation_reply_per_kb(n: u32)
            -> Weight;
            fn gr_reservation_reply_commit_per_kb(n: u32)
            -> Weight;
            fn gr_reply_to(r: u32)
            -> Weight;
            fn gr_signal_code(r: u32)
            -> Weight;
            fn gr_signal_from(r: u32)
            -> Weight;
            fn gr_reply_push_input(r: u32)
            -> Weight;
            fn gr_reply_push_input_per_kb(n: u32)
            -> Weight;
            fn gr_send_push_input(r: u32)
            -> Weight;
            fn gr_send_push_input_per_kb(n: u32)
            -> Weight;
            fn gr_debug(r: u32)
            -> Weight;
            fn gr_debug_per_kb(n: u32)
            -> Weight;
            fn gr_reply_code(r: u32)
            -> Weight;
            fn gr_wake(r: u32)
            -> Weight;
            fn gr_create_program(r: u32)
            -> Weight;
            fn gr_create_program_per_kb(p: u32, s: u32)
            -> Weight;
            fn gr_create_program_wgas(r: u32)
            -> Weight;
            fn gr_create_program_wgas_per_kb(p: u32, s: u32)
            -> Weight;
            fn lazy_pages_signal_read(p: u32)
            -> Weight;
            fn lazy_pages_signal_write(p: u32)
            -> Weight;
            fn lazy_pages_signal_write_after_read(p: u32)
            -> Weight;
            fn lazy_pages_load_page_storage_data(p: u32)
            -> Weight;
            fn lazy_pages_host_func_read(p: u32)
            -> Weight;
            fn lazy_pages_host_func_write(p: u32)
            -> Weight;
            fn lazy_pages_host_func_write_after_read(p: u32)
            -> Weight;
            fn mem_grow(r: u32)
            -> Weight;
            fn instr_i64load(r: u32)
            -> Weight;
            fn instr_i32load(r: u32)
            -> Weight;
            fn instr_i64store(r: u32)
            -> Weight;
            fn instr_i32store(r: u32)
            -> Weight;
            fn instr_select(r: u32)
            -> Weight;
            fn instr_if(r: u32)
            -> Weight;
            fn instr_br(r: u32)
            -> Weight;
            fn instr_br_if(r: u32)
            -> Weight;
            fn instr_br_table(r: u32)
            -> Weight;
            fn instr_br_table_per_entry(e: u32)
            -> Weight;
            fn instr_call_const(r: u32)
            -> Weight;
            fn instr_call(r: u32)
            -> Weight;
            fn instr_call_indirect(r: u32)
            -> Weight;
            fn instr_call_indirect_per_param(p: u32)
            -> Weight;
            fn instr_call_per_local(l: u32)
            -> Weight;
            fn instr_local_get(r: u32)
            -> Weight;
            fn instr_local_set(r: u32)
            -> Weight;
            fn instr_local_tee(r: u32)
            -> Weight;
            fn instr_global_get(r: u32)
            -> Weight;
            fn instr_global_set(r: u32)
            -> Weight;
            fn instr_memory_current(r: u32)
            -> Weight;
            fn instr_i64clz(r: u32)
            -> Weight;
            fn instr_i32clz(r: u32)
            -> Weight;
            fn instr_i64ctz(r: u32)
            -> Weight;
            fn instr_i32ctz(r: u32)
            -> Weight;
            fn instr_i64popcnt(r: u32)
            -> Weight;
            fn instr_i32popcnt(r: u32)
            -> Weight;
            fn instr_i64eqz(r: u32)
            -> Weight;
            fn instr_i32eqz(r: u32)
            -> Weight;
            fn instr_i32extend8s(r: u32)
            -> Weight;
            fn instr_i32extend16s(r: u32)
            -> Weight;
            fn instr_i64extend8s(r: u32)
            -> Weight;
            fn instr_i64extend16s(r: u32)
            -> Weight;
            fn instr_i64extend32s(r: u32)
            -> Weight;
            fn instr_i64extendsi32(r: u32)
            -> Weight;
            fn instr_i64extendui32(r: u32)
            -> Weight;
            fn instr_i32wrapi64(r: u32)
            -> Weight;
            fn instr_i64eq(r: u32)
            -> Weight;
            fn instr_i32eq(r: u32)
            -> Weight;
            fn instr_i64ne(r: u32)
            -> Weight;
            fn instr_i32ne(r: u32)
            -> Weight;
            fn instr_i64lts(r: u32)
            -> Weight;
            fn instr_i32lts(r: u32)
            -> Weight;
            fn instr_i64ltu(r: u32)
            -> Weight;
            fn instr_i32ltu(r: u32)
            -> Weight;
            fn instr_i64gts(r: u32)
            -> Weight;
            fn instr_i32gts(r: u32)
            -> Weight;
            fn instr_i64gtu(r: u32)
            -> Weight;
            fn instr_i32gtu(r: u32)
            -> Weight;
            fn instr_i64les(r: u32)
            -> Weight;
            fn instr_i32les(r: u32)
            -> Weight;
            fn instr_i64leu(r: u32)
            -> Weight;
            fn instr_i32leu(r: u32)
            -> Weight;
            fn instr_i64ges(r: u32)
            -> Weight;
            fn instr_i32ges(r: u32)
            -> Weight;
            fn instr_i64geu(r: u32)
            -> Weight;
            fn instr_i32geu(r: u32)
            -> Weight;
            fn instr_i64add(r: u32)
            -> Weight;
            fn instr_i32add(r: u32)
            -> Weight;
            fn instr_i64sub(r: u32)
            -> Weight;
            fn instr_i32sub(r: u32)
            -> Weight;
            fn instr_i64mul(r: u32)
            -> Weight;
            fn instr_i32mul(r: u32)
            -> Weight;
            fn instr_i64divs(r: u32)
            -> Weight;
            fn instr_i32divs(r: u32)
            -> Weight;
            fn instr_i64divu(r: u32)
            -> Weight;
            fn instr_i32divu(r: u32)
            -> Weight;
            fn instr_i64rems(r: u32)
            -> Weight;
            fn instr_i32rems(r: u32)
            -> Weight;
            fn instr_i64remu(r: u32)
            -> Weight;
            fn instr_i32remu(r: u32)
            -> Weight;
            fn instr_i64and(r: u32)
            -> Weight;
            fn instr_i32and(r: u32)
            -> Weight;
            fn instr_i64or(r: u32)
            -> Weight;
            fn instr_i32or(r: u32)
            -> Weight;
            fn instr_i64xor(r: u32)
            -> Weight;
            fn instr_i32xor(r: u32)
            -> Weight;
            fn instr_i64shl(r: u32)
            -> Weight;
            fn instr_i32shl(r: u32)
            -> Weight;
            fn instr_i64shrs(r: u32)
            -> Weight;
            fn instr_i32shrs(r: u32)
            -> Weight;
            fn instr_i64shru(r: u32)
            -> Weight;
            fn instr_i32shru(r: u32)
            -> Weight;
            fn instr_i64rotl(r: u32)
            -> Weight;
            fn instr_i32rotl(r: u32)
            -> Weight;
            fn instr_i64rotr(r: u32)
            -> Weight;
            fn instr_i32rotr(r: u32)
            -> Weight;
            fn tasks_remove_gas_reservation()
            -> Weight;
            fn tasks_send_user_message_to_mailbox()
            -> Weight;
            fn tasks_send_user_message()
            -> Weight;
            fn tasks_send_dispatch()
            -> Weight;
            fn tasks_wake_message()
            -> Weight;
            fn tasks_wake_message_no_wake()
            -> Weight;
            fn tasks_remove_from_waitlist()
            -> Weight;
            fn tasks_remove_from_mailbox()
            -> Weight;
            fn instr_i64const(r: u32)
            -> Weight;
        }
        /// Weights for pallet_gear using the Gear node and recommended hardware.
        pub struct SubstrateWeight<T>(PhantomData<T>);
        impl<T: frame_system::Config> pallet_gear::WeightInfo for
            SubstrateWeight<T> {
            /// The range of component `r` is `[0, 1]`.
            fn gr_reply(r: u32) -> Weight {
                Weight::from_parts(64_412_476,
                        0).saturating_add(Weight::from_parts(22_480_174,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 1]`.
            fn gr_reply_wgas(r: u32) -> Weight {
                Weight::from_parts(65_017_310,
                        0).saturating_add(Weight::from_parts(21_374_240,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 1]`.
            fn gr_reply_commit(r: u32) -> Weight {
                Weight::from_parts(66_213_602,
                        0).saturating_add(Weight::from_parts(21_336_676,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 1]`.
            fn gr_reply_commit_wgas(r: u32) -> Weight {
                Weight::from_parts(66_174_486,
                        0).saturating_add(Weight::from_parts(19_220_242,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 1]`.
            fn gr_reply_input(r: u32) -> Weight {
                Weight::from_parts(686_647_364,
                        0).saturating_add(Weight::from_parts(25_865_578,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 1]`.
            fn gr_reply_input_wgas(r: u32) -> Weight {
                Weight::from_parts(683_858_892,
                        0).saturating_add(Weight::from_parts(24_582_802,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 1]`.
            fn gr_reservation_reply(r: u32) -> Weight {
                Weight::from_parts(78_778_146,
                        0).saturating_add(Weight::from_parts(8_253_250,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 1]`.
            fn gr_reservation_reply_commit(r: u32) -> Weight {
                Weight::from_parts(78_692_670,
                        0).saturating_add(Weight::from_parts(10_434_360,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 1]`.
            fn gr_exit(r: u32) -> Weight {
                Weight::from_parts(65_958_624,
                        0).saturating_add(Weight::from_parts(24_122_888,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 1]`.
            fn gr_leave(r: u32) -> Weight {
                Weight::from_parts(66_138_874,
                        0).saturating_add(Weight::from_parts(12_535_280,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 1]`.
            fn gr_wait(r: u32) -> Weight {
                Weight::from_parts(66_354_572,
                        0).saturating_add(Weight::from_parts(11_429_924,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 1]`.
            fn gr_wait_for(r: u32) -> Weight {
                Weight::from_parts(66_230_906,
                        0).saturating_add(Weight::from_parts(9_854_244,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 1]`.
            fn gr_wait_up_to(r: u32) -> Weight {
                Weight::from_parts(64_358_910,
                        0).saturating_add(Weight::from_parts(11_603_952,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `c` is `[0, 512]`.
            fn db_write_per_kb(c: u32) -> Weight {
                Weight::from_parts(1_097_000,
                            0).saturating_add(Weight::from_parts(244_708,
                                0).saturating_mul(c.into())).saturating_add(T::DbWeight::get().writes(1_u64))
            }
            /// The range of component `c` is `[0, 512]`.
            fn db_read_per_kb(c: u32) -> Weight {
                Weight::from_parts(3_348_000,
                                3610).saturating_add(Weight::from_parts(598_332,
                                    0).saturating_mul(c.into())).saturating_add(T::DbWeight::get().reads(1_u64)).saturating_add(Weight::from_parts(0,
                            1024).saturating_mul(c.into()))
            }
            /// The range of component `c` is `[0, 512]`.
            fn instantiate_module_per_kb(c: u32) -> Weight {
                Weight::from_parts(33_527_526,
                        0).saturating_add(Weight::from_parts(262_101,
                            0).saturating_mul(c.into()))
            }
            fn claim_value() -> Weight {
                Weight::from_parts(150_944_000,
                            8799).saturating_add(T::DbWeight::get().reads(15_u64)).saturating_add(T::DbWeight::get().writes(12_u64))
            }
            /// The range of component `c` is `[0, 250]`.
            fn upload_code(c: u32) -> Weight {
                Weight::from_parts(55_129_095,
                                3578).saturating_add(Weight::from_parts(62_834_666,
                                    0).saturating_mul(c.into())).saturating_add(T::DbWeight::get().reads(2_u64)).saturating_add(T::DbWeight::get().writes(4_u64))
            }
            /// The range of component `s` is `[0, 4194304]`.
            fn create_program(s: u32) -> Weight {
                Weight::from_parts(166_171_405,
                                4456).saturating_add(Weight::from_parts(2_211,
                                    0).saturating_mul(s.into())).saturating_add(T::DbWeight::get().reads(13_u64)).saturating_add(T::DbWeight::get().writes(10_u64))
            }
            /// The range of component `c` is `[0, 250]`.
            /// The range of component `s` is `[0, 4194304]`.
            fn upload_program(c: u32, s: u32) -> Weight {
                Weight::from_parts(189_144_225,
                                    3844).saturating_add(Weight::from_parts(63_922_649,
                                        0).saturating_mul(c.into())).saturating_add(Weight::from_parts(2_196,
                                    0).saturating_mul(s.into())).saturating_add(T::DbWeight::get().reads(13_u64)).saturating_add(T::DbWeight::get().writes(14_u64))
            }
            /// The range of component `p` is `[0, 2097152]`.
            fn send_message(p: u32) -> Weight {
                Weight::from_parts(86_244_456,
                                6196).saturating_add(Weight::from_parts(872,
                                    0).saturating_mul(p.into())).saturating_add(T::DbWeight::get().reads(11_u64)).saturating_add(T::DbWeight::get().writes(10_u64))
            }
            /// The range of component `p` is `[0, 2097152]`.
            fn send_reply(p: u32) -> Weight {
                Weight::from_parts(158_432_734,
                                8799).saturating_add(Weight::from_parts(894,
                                    0).saturating_mul(p.into())).saturating_add(T::DbWeight::get().reads(16_u64)).saturating_add(T::DbWeight::get().writes(13_u64))
            }
            /// The range of component `c` is `[0, 512]`.
            fn reinstrument_per_kb(c: u32) -> Weight {
                Weight::from_parts(74_592_000,
                                    3682).saturating_add(Weight::from_parts(61_681_098,
                                        0).saturating_mul(c.into())).saturating_add(T::DbWeight::get().reads(1_u64)).saturating_add(T::DbWeight::get().writes(2_u64)).saturating_add(Weight::from_parts(0,
                            1075).saturating_mul(c.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn alloc(r: u32) -> Weight {
                Weight::from_parts(62_010_000,
                        0).saturating_add(Weight::from_parts(766_730_622,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `p` is `[1, 512]`.
            fn alloc_per_page(p: u32) -> Weight {
                Weight::from_parts(624_121_964,
                        0).saturating_add(Weight::from_parts(19_786_855,
                            0).saturating_mul(p.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn free(r: u32) -> Weight {
                Weight::from_parts(181_217_129,
                        0).saturating_add(Weight::from_parts(50_247_135,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn free_range(r: u32) -> Weight {
                Weight::from_parts(174_244_892,
                        0).saturating_add(Weight::from_parts(61_796_579,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `p` is `[1, 20]`.
            fn free_range_per_page(p: u32) -> Weight {
                Weight::from_parts(235_677_178,
                        0).saturating_add(Weight::from_parts(5_068_497,
                            0).saturating_mul(p.into()))
            }
            /// The range of component `r` is `[0, 256]`.
            fn gr_reserve_gas(r: u32) -> Weight {
                Weight::from_parts(74_749_928,
                        0).saturating_add(Weight::from_parts(2_264_169,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 256]`.
            fn gr_unreserve_gas(r: u32) -> Weight {
                Weight::from_parts(111_587_457,
                        0).saturating_add(Weight::from_parts(1_946_607,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_system_reserve_gas(r: u32) -> Weight {
                Weight::from_parts(75_527_495,
                        0).saturating_add(Weight::from_parts(83_687_900,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_message_id(r: u32) -> Weight {
                Weight::from_parts(79_535_915,
                        0).saturating_add(Weight::from_parts(74_120_288,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_program_id(r: u32) -> Weight {
                Weight::from_parts(83_760_803,
                        0).saturating_add(Weight::from_parts(74_407_841,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_source(r: u32) -> Weight {
                Weight::from_parts(79_341_090,
                        0).saturating_add(Weight::from_parts(74_459_591,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_value(r: u32) -> Weight {
                Weight::from_parts(79_257_665,
                        0).saturating_add(Weight::from_parts(75_653_249,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_value_available(r: u32) -> Weight {
                Weight::from_parts(83_513_741,
                        0).saturating_add(Weight::from_parts(77_429_525,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_gas_available(r: u32) -> Weight {
                Weight::from_parts(78_060_963,
                        0).saturating_add(Weight::from_parts(74_584_936,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_size(r: u32) -> Weight {
                Weight::from_parts(77_311_416,
                        0).saturating_add(Weight::from_parts(74_154_750,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_read(r: u32) -> Weight {
                Weight::from_parts(697_272_696,
                        0).saturating_add(Weight::from_parts(133_787_427,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `n` is `[0, 2048]`.
            fn gr_read_per_kb(n: u32) -> Weight {
                Weight::from_parts(811_176_000,
                        0).saturating_add(Weight::from_parts(12_863_384,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_env_vars(r: u32) -> Weight {
                Weight::from_parts(81_753_952,
                        0).saturating_add(Weight::from_parts(83_059_545,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_block_height(r: u32) -> Weight {
                Weight::from_parts(78_697_921,
                        0).saturating_add(Weight::from_parts(74_073_235,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_block_timestamp(r: u32) -> Weight {
                Weight::from_parts(81_425_143,
                        0).saturating_add(Weight::from_parts(74_639_626,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `n` is `[0, 20]`.
            fn gr_random(n: u32) -> Weight {
                Weight::from_parts(81_010_935,
                        0).saturating_add(Weight::from_parts(150_937_218,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_reply_deposit(r: u32) -> Weight {
                Weight::from_parts(70_969_000,
                        0).saturating_add(Weight::from_parts(778_365_730,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_send(r: u32) -> Weight {
                Weight::from_parts(71_936_420,
                        0).saturating_add(Weight::from_parts(255_400_805,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `n` is `[0, 2048]`.
            fn gr_send_per_kb(n: u32) -> Weight {
                Weight::from_parts(307_414_000,
                        0).saturating_add(Weight::from_parts(30_564_400,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_send_wgas(r: u32) -> Weight {
                Weight::from_parts(57_375_960,
                        0).saturating_add(Weight::from_parts(260_137_877,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `n` is `[0, 2048]`.
            fn gr_send_wgas_per_kb(n: u32) -> Weight {
                Weight::from_parts(310_902_000,
                        0).saturating_add(Weight::from_parts(31_313_033,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_send_input(r: u32) -> Weight {
                Weight::from_parts(672_780_370,
                        0).saturating_add(Weight::from_parts(248_804_244,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_send_input_wgas(r: u32) -> Weight {
                Weight::from_parts(722_683_356,
                        0).saturating_add(Weight::from_parts(246_050_484,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_send_init(r: u32) -> Weight {
                Weight::from_parts(73_974_737,
                        0).saturating_add(Weight::from_parts(82_760_592,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_send_push(r: u32) -> Weight {
                Weight::from_parts(1_742_299_177,
                        0).saturating_add(Weight::from_parts(159_504_390,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `n` is `[0, 2048]`.
            fn gr_send_push_per_kb(n: u32) -> Weight {
                Weight::from_parts(269_048_000,
                        0).saturating_add(Weight::from_parts(31_080_042,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_send_commit(r: u32) -> Weight {
                Weight::from_parts(1_748_773_212,
                        0).saturating_add(Weight::from_parts(214_216_200,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_send_commit_wgas(r: u32) -> Weight {
                Weight::from_parts(1_756_578_453,
                        0).saturating_add(Weight::from_parts(213_728_846,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_reservation_send(r: u32) -> Weight {
                Weight::from_parts(149_107_120,
                        0).saturating_add(Weight::from_parts(270_903_407,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `n` is `[0, 2048]`.
            fn gr_reservation_send_per_kb(n: u32) -> Weight {
                Weight::from_parts(394_392_000,
                        0).saturating_add(Weight::from_parts(30_864_290,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_reservation_send_commit(r: u32) -> Weight {
                Weight::from_parts(1_807_378_722,
                        0).saturating_add(Weight::from_parts(229_432_403,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `n` is `[0, 2048]`.
            fn gr_reply_per_kb(n: u32) -> Weight {
                Weight::from_parts(74_249_170,
                        0).saturating_add(Weight::from_parts(577_961,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `n` is `[0, 2048]`.
            fn gr_reply_wgas_per_kb(n: u32) -> Weight {
                Weight::from_parts(68_206_217,
                        0).saturating_add(Weight::from_parts(589_359,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_reply_push(r: u32) -> Weight {
                Weight::from_parts(91_930_574,
                        0).saturating_add(Weight::from_parts(135_673_513,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `n` is `[0, 8192]`.
            fn gr_reply_push_per_kb(n: u32) -> Weight {
                Weight::from_parts(82_843_000,
                        0).saturating_add(Weight::from_parts(655_950,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `n` is `[0, 2048]`.
            fn gr_reservation_reply_per_kb(n: u32) -> Weight {
                Weight::from_parts(76_214_329,
                        0).saturating_add(Weight::from_parts(584_512,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `n` is `[0, 2048]`.
            fn gr_reservation_reply_commit_per_kb(n: u32) -> Weight {
                Weight::from_parts(74_148_301,
                        0).saturating_add(Weight::from_parts(585_592,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_reply_to(r: u32) -> Weight {
                Weight::from_parts(81_997_972,
                        0).saturating_add(Weight::from_parts(76_020_043,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_signal_code(r: u32) -> Weight {
                Weight::from_parts(94_489_865,
                        0).saturating_add(Weight::from_parts(77_000_887,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_signal_from(r: u32) -> Weight {
                Weight::from_parts(89_719_238,
                        0).saturating_add(Weight::from_parts(75_316_833,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_reply_push_input(r: u32) -> Weight {
                Weight::from_parts(715_479_508,
                        0).saturating_add(Weight::from_parts(92_273_923,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `n` is `[0, 2048]`.
            fn gr_reply_push_input_per_kb(n: u32) -> Weight {
                Weight::from_parts(713_406_025,
                        0).saturating_add(Weight::from_parts(150_034,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_send_push_input(r: u32) -> Weight {
                Weight::from_parts(2_351_528_744,
                        0).saturating_add(Weight::from_parts(121_605_056,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `n` is `[0, 2048]`.
            fn gr_send_push_input_per_kb(n: u32) -> Weight {
                Weight::from_parts(2_382_984_712,
                        0).saturating_add(Weight::from_parts(13_586_421,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_debug(r: u32) -> Weight {
                Weight::from_parts(80_965_772,
                        0).saturating_add(Weight::from_parts(96_988_657,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `n` is `[0, 2048]`.
            fn gr_debug_per_kb(n: u32) -> Weight {
                Weight::from_parts(124_686_000,
                        0).saturating_add(Weight::from_parts(25_956_010,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_reply_code(r: u32) -> Weight {
                Weight::from_parts(80_408_202,
                        0).saturating_add(Weight::from_parts(73_582_256,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_wake(r: u32) -> Weight {
                Weight::from_parts(107_007_000,
                        0).saturating_add(Weight::from_parts(294_563_800,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_create_program(r: u32) -> Weight {
                Weight::from_parts(70_732_297,
                        0).saturating_add(Weight::from_parts(326_308_772,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `p` is `[0, 2048]`.
            /// The range of component `s` is `[1, 2048]`.
            fn gr_create_program_per_kb(p: u32, s: u32) -> Weight {
                Weight::from_parts(45_056_030_000,
                            0).saturating_add(Weight::from_parts(6_396_435,
                                0).saturating_mul(p.into())).saturating_add(Weight::from_parts(153_430_909,
                            0).saturating_mul(s.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_create_program_wgas(r: u32) -> Weight {
                Weight::from_parts(69_297_593,
                        0).saturating_add(Weight::from_parts(330_199_040,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `p` is `[0, 2048]`.
            /// The range of component `s` is `[1, 2048]`.
            fn gr_create_program_wgas_per_kb(p: u32, s: u32) -> Weight {
                Weight::from_parts(44_891_319_000,
                            0).saturating_add(Weight::from_parts(7_282_931,
                                0).saturating_mul(p.into())).saturating_add(Weight::from_parts(153_258_816,
                            0).saturating_mul(s.into()))
            }
            /// The range of component `p` is `[0, 512]`.
            fn lazy_pages_signal_read(p: u32) -> Weight {
                Weight::from_parts(107_829_188,
                                1131).saturating_add(Weight::from_parts(15_060_122,
                                    0).saturating_mul(p.into())).saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into()))).saturating_add(Weight::from_parts(0,
                            9900).saturating_mul(p.into()))
            }
            /// The range of component `p` is `[0, 512]`.
            fn lazy_pages_signal_write(p: u32) -> Weight {
                Weight::from_parts(75_027_000,
                                1131).saturating_add(Weight::from_parts(38_796_272,
                                    0).saturating_mul(p.into())).saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into()))).saturating_add(Weight::from_parts(0,
                            9900).saturating_mul(p.into()))
            }
            /// The range of component `p` is `[0, 512]`.
            fn lazy_pages_signal_write_after_read(p: u32) -> Weight {
                Weight::from_parts(7_492_491_772,
                            5069931).saturating_add(Weight::from_parts(40_376_041,
                                0).saturating_mul(p.into())).saturating_add(T::DbWeight::get().reads(2048_u64))
            }
            /// The range of component `p` is `[0, 512]`.
            fn lazy_pages_load_page_storage_data(p: u32) -> Weight {
                Weight::from_parts(77_486_000,
                                1946).saturating_add(Weight::from_parts(56_645_948,
                                    0).saturating_mul(p.into())).saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into()))).saturating_add(Weight::from_parts(0,
                            75482).saturating_mul(p.into()))
            }
            /// The range of component `p` is `[0, 32]`.
            fn lazy_pages_host_func_read(p: u32) -> Weight {
                Weight::from_parts(80_313_380,
                                1131).saturating_add(Weight::from_parts(40_600_455,
                                    0).saturating_mul(p.into())).saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into()))).saturating_add(Weight::from_parts(0,
                            9900).saturating_mul(p.into()))
            }
            /// The range of component `p` is `[0, 32]`.
            fn lazy_pages_host_func_write(p: u32) -> Weight {
                Weight::from_parts(719_296_174,
                                1496).saturating_add(Weight::from_parts(47_010_756,
                                    0).saturating_mul(p.into())).saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into()))).saturating_add(Weight::from_parts(0,
                            9883).saturating_mul(p.into()))
            }
            /// The range of component `p` is `[0, 32]`.
            fn lazy_pages_host_func_write_after_read(p: u32) -> Weight {
                Weight::from_parts(1_221_292_006,
                            317931).saturating_add(Weight::from_parts(47_325_607,
                                0).saturating_mul(p.into())).saturating_add(T::DbWeight::get().reads(128_u64))
            }
            /// The range of component `r` is `[0, 20]`.
            fn mem_grow(r: u32) -> Weight {
                Weight::from_parts(9_461_855,
                        0).saturating_add(Weight::from_parts(88_598_198,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[50, 500]`.
            fn instr_i64load(r: u32) -> Weight {
                Weight::from_parts(4_556_572_629,
                        0).saturating_add(Weight::from_parts(3_345_585,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[50, 500]`.
            fn instr_i32load(r: u32) -> Weight {
                Weight::from_parts(4_572_330_399,
                        0).saturating_add(Weight::from_parts(3_348_768,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[50, 500]`.
            fn instr_i64store(r: u32) -> Weight {
                Weight::from_parts(10_613_885_736,
                        0).saturating_add(Weight::from_parts(7_787_812,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[50, 500]`.
            fn instr_i32store(r: u32) -> Weight {
                Weight::from_parts(10_770_521_945,
                        0).saturating_add(Weight::from_parts(8_048_666,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_select(r: u32) -> Weight {
                Weight::from_parts(1_220_000,
                        0).saturating_add(Weight::from_parts(2_365_490,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_if(r: u32) -> Weight {
                Weight::from_parts(1_200_000,
                        0).saturating_add(Weight::from_parts(2_171_849,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_br(r: u32) -> Weight {
                Weight::from_parts(240_771,
                        0).saturating_add(Weight::from_parts(1_581_418,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_br_if(r: u32) -> Weight {
                Weight::from_parts(1_181_000,
                        0).saturating_add(Weight::from_parts(1_863_856,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_br_table(r: u32) -> Weight {
                Weight::from_parts(1_136_000,
                        0).saturating_add(Weight::from_parts(4_295_841,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `e` is `[1, 256]`.
            fn instr_br_table_per_entry(e: u32) -> Weight {
                Weight::from_parts(4_962_809,
                        0).saturating_add(Weight::from_parts(48_563,
                            0).saturating_mul(e.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_call_const(r: u32) -> Weight {
                Weight::from_parts(1_213_889,
                        0).saturating_add(Weight::from_parts(2_446_010,
                            0).saturating_mul(r.into()))
            }
            fn instr_i64const(r: u32) -> Weight {
                Weight::from_parts(0,
                        0).saturating_add(Weight::from_parts(2_446_010 - 2_307_395,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_call(r: u32) -> Weight {
                Weight::from_parts(770_567,
                        0).saturating_add(Weight::from_parts(2_307_395,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_call_indirect(r: u32) -> Weight {
                Weight::from_parts(1_217_000,
                        0).saturating_add(Weight::from_parts(7_740_891,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `p` is `[0, 128]`.
            fn instr_call_indirect_per_param(p: u32) -> Weight {
                Weight::from_parts(5_089_000,
                        0).saturating_add(Weight::from_parts(614_508,
                            0).saturating_mul(p.into()))
            }
            /// The range of component `l` is `[0, 1024]`.
            fn instr_call_per_local(_l: u32) -> Weight {
                Weight::from_parts(2_647_502, 0)
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_local_get(r: u32) -> Weight {
                Weight::from_parts(7_020_954,
                        0).saturating_add(Weight::from_parts(348_175,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_local_set(r: u32) -> Weight {
                Weight::from_parts(7_166_208,
                        0).saturating_add(Weight::from_parts(745_654,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_local_tee(r: u32) -> Weight {
                Weight::from_parts(7_874_187,
                        0).saturating_add(Weight::from_parts(745_740,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_global_get(r: u32) -> Weight {
                Weight::from_parts(5_308_653,
                        0).saturating_add(Weight::from_parts(336_903,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_global_set(r: u32) -> Weight {
                Weight::from_parts(4_874_988,
                        0).saturating_add(Weight::from_parts(560_664,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_memory_current(r: u32) -> Weight {
                Weight::from_parts(7_930_046,
                        0).saturating_add(Weight::from_parts(5_550_905,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64clz(r: u32) -> Weight {
                Weight::from_parts(1_143_000,
                        0).saturating_add(Weight::from_parts(2_095_883,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32clz(r: u32) -> Weight {
                Weight::from_parts(1_195_000,
                        0).saturating_add(Weight::from_parts(1_996_114,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64ctz(r: u32) -> Weight {
                Weight::from_parts(1_134_000,
                        0).saturating_add(Weight::from_parts(2_072_372,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32ctz(r: u32) -> Weight {
                Weight::from_parts(13_738,
                        0).saturating_add(Weight::from_parts(1_906_210,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64popcnt(r: u32) -> Weight {
                Weight::from_parts(663_739,
                        0).saturating_add(Weight::from_parts(362_180,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32popcnt(r: u32) -> Weight {
                Weight::from_parts(1_410_317,
                        0).saturating_add(Weight::from_parts(254_308,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64eqz(r: u32) -> Weight {
                Weight::from_parts(1_155_000,
                        0).saturating_add(Weight::from_parts(744_476,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32eqz(r: u32) -> Weight {
                Weight::from_parts(1_157_000,
                        0).saturating_add(Weight::from_parts(658_824,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32extend8s(r: u32) -> Weight {
                Weight::from_parts(1_198_562,
                        0).saturating_add(Weight::from_parts(273_468,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32extend16s(r: u32) -> Weight {
                Weight::from_parts(1_177_000,
                        0).saturating_add(Weight::from_parts(337_533,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64extend8s(r: u32) -> Weight {
                Weight::from_parts(1_196_000,
                        0).saturating_add(Weight::from_parts(435_144,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64extend16s(r: u32) -> Weight {
                Weight::from_parts(1_179_000,
                        0).saturating_add(Weight::from_parts(409_837,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64extend32s(r: u32) -> Weight {
                Weight::from_parts(1_226_377,
                        0).saturating_add(Weight::from_parts(341_148,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64extendsi32(r: u32) -> Weight {
                Weight::from_parts(1_132_000,
                        0).saturating_add(Weight::from_parts(311_634,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64extendui32(r: u32) -> Weight {
                Weight::from_parts(1_051_025,
                        0).saturating_add(Weight::from_parts(169_313,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32wrapi64(r: u32) -> Weight {
                Weight::from_parts(796_609,
                        0).saturating_add(Weight::from_parts(196_419,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64eq(r: u32) -> Weight {
                Weight::from_parts(1_154_000,
                        0).saturating_add(Weight::from_parts(1_044_686,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32eq(r: u32) -> Weight {
                Weight::from_parts(1_267_000,
                        0).saturating_add(Weight::from_parts(667_020,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64ne(r: u32) -> Weight {
                Weight::from_parts(1_223_000,
                        0).saturating_add(Weight::from_parts(965_395,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32ne(r: u32) -> Weight {
                Weight::from_parts(1_144_000,
                        0).saturating_add(Weight::from_parts(629_111,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64lts(r: u32) -> Weight {
                Weight::from_parts(1_000_218,
                        0).saturating_add(Weight::from_parts(749_269,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32lts(r: u32) -> Weight {
                Weight::from_parts(1_504_342,
                        0).saturating_add(Weight::from_parts(492_011,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64ltu(r: u32) -> Weight {
                Weight::from_parts(1_349_759,
                        0).saturating_add(Weight::from_parts(697_490,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32ltu(r: u32) -> Weight {
                Weight::from_parts(1_179_027,
                        0).saturating_add(Weight::from_parts(522_999,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64gts(r: u32) -> Weight {
                Weight::from_parts(1_249_853,
                        0).saturating_add(Weight::from_parts(781_336,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32gts(r: u32) -> Weight {
                Weight::from_parts(1_951_540,
                        0).saturating_add(Weight::from_parts(505_007,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64gtu(r: u32) -> Weight {
                Weight::from_parts(883_225,
                        0).saturating_add(Weight::from_parts(709_921,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32gtu(r: u32) -> Weight {
                Weight::from_parts(860_376,
                        0).saturating_add(Weight::from_parts(504_252,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64les(r: u32) -> Weight {
                Weight::from_parts(781_548,
                        0).saturating_add(Weight::from_parts(704_441,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32les(r: u32) -> Weight {
                Weight::from_parts(1_410_879,
                        0).saturating_add(Weight::from_parts(480_265,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64leu(r: u32) -> Weight {
                Weight::from_parts(1_138_000,
                        0).saturating_add(Weight::from_parts(762_432,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32leu(r: u32) -> Weight {
                Weight::from_parts(1_447_033,
                        0).saturating_add(Weight::from_parts(487_888,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64ges(r: u32) -> Weight {
                Weight::from_parts(1_151_000,
                        0).saturating_add(Weight::from_parts(789_278,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32ges(r: u32) -> Weight {
                Weight::from_parts(1_205_796,
                        0).saturating_add(Weight::from_parts(519_603,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64geu(r: u32) -> Weight {
                Weight::from_parts(1_161_000,
                        0).saturating_add(Weight::from_parts(823_640,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32geu(r: u32) -> Weight {
                Weight::from_parts(1_167_000,
                        0).saturating_add(Weight::from_parts(567_051,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64add(r: u32) -> Weight {
                Weight::from_parts(1_186_000,
                        0).saturating_add(Weight::from_parts(818_881,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32add(r: u32) -> Weight {
                Weight::from_parts(290_633,
                        0).saturating_add(Weight::from_parts(447_063,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64sub(r: u32) -> Weight {
                Weight::from_parts(1_158_000,
                        0).saturating_add(Weight::from_parts(769_190,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32sub(r: u32) -> Weight {
                Weight::from_parts(222_233,
                        0).saturating_add(Weight::from_parts(468_176,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64mul(r: u32) -> Weight {
                Weight::from_parts(1_124_000,
                        0).saturating_add(Weight::from_parts(929_811,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32mul(r: u32) -> Weight {
                Weight::from_parts(1_174_000,
                        0).saturating_add(Weight::from_parts(977_020,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64divs(r: u32) -> Weight {
                Weight::from_parts(1_161_000,
                        0).saturating_add(Weight::from_parts(1_661_976,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32divs(r: u32) -> Weight {
                Weight::from_parts(344_417,
                        0).saturating_add(Weight::from_parts(1_336_323,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64divu(r: u32) -> Weight {
                Weight::from_parts(1_149_000,
                        0).saturating_add(Weight::from_parts(1_726_892,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32divu(r: u32) -> Weight {
                Weight::from_parts(1_168_000,
                        0).saturating_add(Weight::from_parts(1_372_685,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64rems(r: u32) -> Weight {
                Weight::from_parts(1_190_000,
                        0).saturating_add(Weight::from_parts(6_047_040,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32rems(r: u32) -> Weight {
                Weight::from_parts(1_138_000,
                        0).saturating_add(Weight::from_parts(3_890_058,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64remu(r: u32) -> Weight {
                Weight::from_parts(1_166_000,
                        0).saturating_add(Weight::from_parts(1_822_711,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32remu(r: u32) -> Weight {
                Weight::from_parts(1_147_000,
                        0).saturating_add(Weight::from_parts(1_261_297,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64and(r: u32) -> Weight {
                Weight::from_parts(1_195_000,
                        0).saturating_add(Weight::from_parts(694_554,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32and(r: u32) -> Weight {
                Weight::from_parts(1_132_000,
                        0).saturating_add(Weight::from_parts(576_761,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64or(r: u32) -> Weight {
                Weight::from_parts(1_201_000,
                        0).saturating_add(Weight::from_parts(760_651,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32or(r: u32) -> Weight {
                Weight::from_parts(304_083,
                        0).saturating_add(Weight::from_parts(417_302,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64xor(r: u32) -> Weight {
                Weight::from_parts(1_153_000,
                        0).saturating_add(Weight::from_parts(680_341,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32xor(r: u32) -> Weight {
                Weight::from_parts(72_522,
                        0).saturating_add(Weight::from_parts(432_029,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64shl(r: u32) -> Weight {
                Weight::from_parts(1_194_000,
                        0).saturating_add(Weight::from_parts(597_109,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32shl(r: u32) -> Weight {
                Weight::from_parts(1_029_675,
                        0).saturating_add(Weight::from_parts(369_697,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64shrs(r: u32) -> Weight {
                Weight::from_parts(1_211_000,
                        0).saturating_add(Weight::from_parts(586_377,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32shrs(r: u32) -> Weight {
                Weight::from_parts(734_716,
                        0).saturating_add(Weight::from_parts(385_085,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64shru(r: u32) -> Weight {
                Weight::from_parts(483_072,
                        0).saturating_add(Weight::from_parts(546_280,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32shru(r: u32) -> Weight {
                Weight::from_parts(503_906,
                        0).saturating_add(Weight::from_parts(376_314,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64rotl(r: u32) -> Weight {
                Weight::from_parts(1_187_000,
                        0).saturating_add(Weight::from_parts(813_202,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32rotl(r: u32) -> Weight {
                Weight::from_parts(1_626_471,
                        0).saturating_add(Weight::from_parts(347_852,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64rotr(r: u32) -> Weight {
                Weight::from_parts(1_160_000,
                        0).saturating_add(Weight::from_parts(600_455,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32rotr(r: u32) -> Weight {
                Weight::from_parts(905_893,
                        0).saturating_add(Weight::from_parts(380_454,
                            0).saturating_mul(r.into()))
            }
            fn tasks_remove_gas_reservation() -> Weight {
                Weight::from_parts(82_623_000,
                            6196).saturating_add(T::DbWeight::get().reads(7_u64)).saturating_add(T::DbWeight::get().writes(6_u64))
            }
            fn tasks_send_user_message_to_mailbox() -> Weight {
                Weight::from_parts(49_820_000,
                            4323).saturating_add(T::DbWeight::get().reads(6_u64)).saturating_add(T::DbWeight::get().writes(5_u64))
            }
            fn tasks_send_user_message() -> Weight {
                Weight::from_parts(95_664_000,
                            6196).saturating_add(T::DbWeight::get().reads(11_u64)).saturating_add(T::DbWeight::get().writes(10_u64))
            }
            fn tasks_send_dispatch() -> Weight {
                Weight::from_parts(35_066_000,
                            4159).saturating_add(T::DbWeight::get().reads(7_u64)).saturating_add(T::DbWeight::get().writes(6_u64))
            }
            fn tasks_wake_message() -> Weight {
                Weight::from_parts(51_545_000,
                            4402).saturating_add(T::DbWeight::get().reads(8_u64)).saturating_add(T::DbWeight::get().writes(6_u64))
            }
            fn tasks_wake_message_no_wake() -> Weight {
                Weight::from_parts(5_259_000,
                        3545).saturating_add(T::DbWeight::get().reads(1_u64))
            }
            fn tasks_remove_from_waitlist() -> Weight {
                Weight::from_parts(132_686_000,
                            7505).saturating_add(T::DbWeight::get().reads(16_u64)).saturating_add(T::DbWeight::get().writes(13_u64))
            }
            fn tasks_remove_from_mailbox() -> Weight {
                Weight::from_parts(109_917_000,
                            7234).saturating_add(T::DbWeight::get().reads(14_u64)).saturating_add(T::DbWeight::get().writes(13_u64))
            }
        }
        impl WeightInfo for () {
            /// The range of component `r` is `[0, 1]`.
            fn gr_reply(r: u32) -> Weight {
                Weight::from_parts(64_412_476,
                        0).saturating_add(Weight::from_parts(22_480_174,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 1]`.
            fn gr_reply_wgas(r: u32) -> Weight {
                Weight::from_parts(65_017_310,
                        0).saturating_add(Weight::from_parts(21_374_240,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 1]`.
            fn gr_reply_commit(r: u32) -> Weight {
                Weight::from_parts(66_213_602,
                        0).saturating_add(Weight::from_parts(21_336_676,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 1]`.
            fn gr_reply_commit_wgas(r: u32) -> Weight {
                Weight::from_parts(66_174_486,
                        0).saturating_add(Weight::from_parts(19_220_242,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 1]`.
            fn gr_reply_input(r: u32) -> Weight {
                Weight::from_parts(686_647_364,
                        0).saturating_add(Weight::from_parts(25_865_578,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 1]`.
            fn gr_reply_input_wgas(r: u32) -> Weight {
                Weight::from_parts(683_858_892,
                        0).saturating_add(Weight::from_parts(24_582_802,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 1]`.
            fn gr_reservation_reply(r: u32) -> Weight {
                Weight::from_parts(78_778_146,
                        0).saturating_add(Weight::from_parts(8_253_250,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 1]`.
            fn gr_reservation_reply_commit(r: u32) -> Weight {
                Weight::from_parts(78_692_670,
                        0).saturating_add(Weight::from_parts(10_434_360,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 1]`.
            fn gr_exit(r: u32) -> Weight {
                Weight::from_parts(65_958_624,
                        0).saturating_add(Weight::from_parts(24_122_888,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 1]`.
            fn gr_leave(r: u32) -> Weight {
                Weight::from_parts(66_138_874,
                        0).saturating_add(Weight::from_parts(12_535_280,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 1]`.
            fn gr_wait(r: u32) -> Weight {
                Weight::from_parts(66_354_572,
                        0).saturating_add(Weight::from_parts(11_429_924,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 1]`.
            fn gr_wait_for(r: u32) -> Weight {
                Weight::from_parts(66_230_906,
                        0).saturating_add(Weight::from_parts(9_854_244,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 1]`.
            fn gr_wait_up_to(r: u32) -> Weight {
                Weight::from_parts(64_358_910,
                        0).saturating_add(Weight::from_parts(11_603_952,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `c` is `[0, 512]`.
            fn db_write_per_kb(c: u32) -> Weight {
                Weight::from_parts(1_097_000,
                            0).saturating_add(Weight::from_parts(244_708,
                                0).saturating_mul(c.into())).saturating_add(RocksDbWeight::get().writes(1_u64))
            }
            /// The range of component `c` is `[0, 512]`.
            fn db_read_per_kb(c: u32) -> Weight {
                Weight::from_parts(3_348_000,
                                3610).saturating_add(Weight::from_parts(598_332,
                                    0).saturating_mul(c.into())).saturating_add(RocksDbWeight::get().reads(1_u64)).saturating_add(Weight::from_parts(0,
                            1024).saturating_mul(c.into()))
            }
            /// The range of component `c` is `[0, 512]`.
            fn instantiate_module_per_kb(c: u32) -> Weight {
                Weight::from_parts(33_527_526,
                        0).saturating_add(Weight::from_parts(262_101,
                            0).saturating_mul(c.into()))
            }
            fn claim_value() -> Weight {
                Weight::from_parts(150_944_000,
                            8799).saturating_add(RocksDbWeight::get().reads(15_u64)).saturating_add(RocksDbWeight::get().writes(12_u64))
            }
            /// The range of component `c` is `[0, 250]`.
            fn upload_code(c: u32) -> Weight {
                Weight::from_parts(55_129_095,
                                3578).saturating_add(Weight::from_parts(62_834_666,
                                    0).saturating_mul(c.into())).saturating_add(RocksDbWeight::get().reads(2_u64)).saturating_add(RocksDbWeight::get().writes(4_u64))
            }
            /// The range of component `s` is `[0, 4194304]`.
            fn create_program(s: u32) -> Weight {
                Weight::from_parts(166_171_405,
                                4456).saturating_add(Weight::from_parts(2_211,
                                    0).saturating_mul(s.into())).saturating_add(RocksDbWeight::get().reads(13_u64)).saturating_add(RocksDbWeight::get().writes(10_u64))
            }
            /// The range of component `c` is `[0, 250]`.
            /// The range of component `s` is `[0, 4194304]`.
            fn upload_program(c: u32, s: u32) -> Weight {
                Weight::from_parts(189_144_225,
                                    3844).saturating_add(Weight::from_parts(63_922_649,
                                        0).saturating_mul(c.into())).saturating_add(Weight::from_parts(2_196,
                                    0).saturating_mul(s.into())).saturating_add(RocksDbWeight::get().reads(13_u64)).saturating_add(RocksDbWeight::get().writes(14_u64))
            }
            /// The range of component `p` is `[0, 2097152]`.
            fn send_message(p: u32) -> Weight {
                Weight::from_parts(86_244_456,
                                6196).saturating_add(Weight::from_parts(872,
                                    0).saturating_mul(p.into())).saturating_add(RocksDbWeight::get().reads(11_u64)).saturating_add(RocksDbWeight::get().writes(10_u64))
            }
            /// The range of component `p` is `[0, 2097152]`.
            fn send_reply(p: u32) -> Weight {
                Weight::from_parts(158_432_734,
                                8799).saturating_add(Weight::from_parts(894,
                                    0).saturating_mul(p.into())).saturating_add(RocksDbWeight::get().reads(16_u64)).saturating_add(RocksDbWeight::get().writes(13_u64))
            }
            /// The range of component `c` is `[0, 512]`.
            fn reinstrument_per_kb(c: u32) -> Weight {
                Weight::from_parts(74_592_000,
                                    3682).saturating_add(Weight::from_parts(61_681_098,
                                        0).saturating_mul(c.into())).saturating_add(RocksDbWeight::get().reads(1_u64)).saturating_add(RocksDbWeight::get().writes(2_u64)).saturating_add(Weight::from_parts(0,
                            1075).saturating_mul(c.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn alloc(r: u32) -> Weight {
                Weight::from_parts(62_010_000,
                        0).saturating_add(Weight::from_parts(766_730_622,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `p` is `[1, 512]`.
            fn alloc_per_page(p: u32) -> Weight {
                Weight::from_parts(624_121_964,
                        0).saturating_add(Weight::from_parts(19_786_855,
                            0).saturating_mul(p.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn free(r: u32) -> Weight {
                Weight::from_parts(181_217_129,
                        0).saturating_add(Weight::from_parts(50_247_135,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn free_range(r: u32) -> Weight {
                Weight::from_parts(174_244_892,
                        0).saturating_add(Weight::from_parts(61_796_579,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `p` is `[1, 20]`.
            fn free_range_per_page(p: u32) -> Weight {
                Weight::from_parts(235_677_178,
                        0).saturating_add(Weight::from_parts(5_068_497,
                            0).saturating_mul(p.into()))
            }
            /// The range of component `r` is `[0, 256]`.
            fn gr_reserve_gas(r: u32) -> Weight {
                Weight::from_parts(74_749_928,
                        0).saturating_add(Weight::from_parts(2_264_169,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 256]`.
            fn gr_unreserve_gas(r: u32) -> Weight {
                Weight::from_parts(111_587_457,
                        0).saturating_add(Weight::from_parts(1_946_607,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_system_reserve_gas(r: u32) -> Weight {
                Weight::from_parts(75_527_495,
                        0).saturating_add(Weight::from_parts(83_687_900,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_message_id(r: u32) -> Weight {
                Weight::from_parts(79_535_915,
                        0).saturating_add(Weight::from_parts(74_120_288,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_program_id(r: u32) -> Weight {
                Weight::from_parts(83_760_803,
                        0).saturating_add(Weight::from_parts(74_407_841,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_source(r: u32) -> Weight {
                Weight::from_parts(79_341_090,
                        0).saturating_add(Weight::from_parts(74_459_591,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_value(r: u32) -> Weight {
                Weight::from_parts(79_257_665,
                        0).saturating_add(Weight::from_parts(75_653_249,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_value_available(r: u32) -> Weight {
                Weight::from_parts(83_513_741,
                        0).saturating_add(Weight::from_parts(77_429_525,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_gas_available(r: u32) -> Weight {
                Weight::from_parts(78_060_963,
                        0).saturating_add(Weight::from_parts(74_584_936,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_size(r: u32) -> Weight {
                Weight::from_parts(77_311_416,
                        0).saturating_add(Weight::from_parts(74_154_750,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_read(r: u32) -> Weight {
                Weight::from_parts(697_272_696,
                        0).saturating_add(Weight::from_parts(133_787_427,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `n` is `[0, 2048]`.
            fn gr_read_per_kb(n: u32) -> Weight {
                Weight::from_parts(811_176_000,
                        0).saturating_add(Weight::from_parts(12_863_384,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_env_vars(r: u32) -> Weight {
                Weight::from_parts(81_753_952,
                        0).saturating_add(Weight::from_parts(83_059_545,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_block_height(r: u32) -> Weight {
                Weight::from_parts(78_697_921,
                        0).saturating_add(Weight::from_parts(74_073_235,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_block_timestamp(r: u32) -> Weight {
                Weight::from_parts(81_425_143,
                        0).saturating_add(Weight::from_parts(74_639_626,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `n` is `[0, 20]`.
            fn gr_random(n: u32) -> Weight {
                Weight::from_parts(81_010_935,
                        0).saturating_add(Weight::from_parts(150_937_218,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_reply_deposit(r: u32) -> Weight {
                Weight::from_parts(70_969_000,
                        0).saturating_add(Weight::from_parts(778_365_730,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_send(r: u32) -> Weight {
                Weight::from_parts(71_936_420,
                        0).saturating_add(Weight::from_parts(255_400_805,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `n` is `[0, 2048]`.
            fn gr_send_per_kb(n: u32) -> Weight {
                Weight::from_parts(307_414_000,
                        0).saturating_add(Weight::from_parts(30_564_400,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_send_wgas(r: u32) -> Weight {
                Weight::from_parts(57_375_960,
                        0).saturating_add(Weight::from_parts(260_137_877,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `n` is `[0, 2048]`.
            fn gr_send_wgas_per_kb(n: u32) -> Weight {
                Weight::from_parts(310_902_000,
                        0).saturating_add(Weight::from_parts(31_313_033,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_send_input(r: u32) -> Weight {
                Weight::from_parts(672_780_370,
                        0).saturating_add(Weight::from_parts(248_804_244,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_send_input_wgas(r: u32) -> Weight {
                Weight::from_parts(722_683_356,
                        0).saturating_add(Weight::from_parts(246_050_484,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_send_init(r: u32) -> Weight {
                Weight::from_parts(73_974_737,
                        0).saturating_add(Weight::from_parts(82_760_592,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_send_push(r: u32) -> Weight {
                Weight::from_parts(1_742_299_177,
                        0).saturating_add(Weight::from_parts(159_504_390,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `n` is `[0, 2048]`.
            fn gr_send_push_per_kb(n: u32) -> Weight {
                Weight::from_parts(269_048_000,
                        0).saturating_add(Weight::from_parts(31_080_042,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_send_commit(r: u32) -> Weight {
                Weight::from_parts(1_748_773_212,
                        0).saturating_add(Weight::from_parts(214_216_200,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_send_commit_wgas(r: u32) -> Weight {
                Weight::from_parts(1_756_578_453,
                        0).saturating_add(Weight::from_parts(213_728_846,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_reservation_send(r: u32) -> Weight {
                Weight::from_parts(149_107_120,
                        0).saturating_add(Weight::from_parts(270_903_407,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `n` is `[0, 2048]`.
            fn gr_reservation_send_per_kb(n: u32) -> Weight {
                Weight::from_parts(394_392_000,
                        0).saturating_add(Weight::from_parts(30_864_290,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_reservation_send_commit(r: u32) -> Weight {
                Weight::from_parts(1_807_378_722,
                        0).saturating_add(Weight::from_parts(229_432_403,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `n` is `[0, 2048]`.
            fn gr_reply_per_kb(n: u32) -> Weight {
                Weight::from_parts(74_249_170,
                        0).saturating_add(Weight::from_parts(577_961,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `n` is `[0, 2048]`.
            fn gr_reply_wgas_per_kb(n: u32) -> Weight {
                Weight::from_parts(68_206_217,
                        0).saturating_add(Weight::from_parts(589_359,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_reply_push(r: u32) -> Weight {
                Weight::from_parts(91_930_574,
                        0).saturating_add(Weight::from_parts(135_673_513,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `n` is `[0, 8192]`.
            fn gr_reply_push_per_kb(n: u32) -> Weight {
                Weight::from_parts(82_843_000,
                        0).saturating_add(Weight::from_parts(655_950,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `n` is `[0, 2048]`.
            fn gr_reservation_reply_per_kb(n: u32) -> Weight {
                Weight::from_parts(76_214_329,
                        0).saturating_add(Weight::from_parts(584_512,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `n` is `[0, 2048]`.
            fn gr_reservation_reply_commit_per_kb(n: u32) -> Weight {
                Weight::from_parts(74_148_301,
                        0).saturating_add(Weight::from_parts(585_592,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_reply_to(r: u32) -> Weight {
                Weight::from_parts(81_997_972,
                        0).saturating_add(Weight::from_parts(76_020_043,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_signal_code(r: u32) -> Weight {
                Weight::from_parts(94_489_865,
                        0).saturating_add(Weight::from_parts(77_000_887,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_signal_from(r: u32) -> Weight {
                Weight::from_parts(89_719_238,
                        0).saturating_add(Weight::from_parts(75_316_833,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_reply_push_input(r: u32) -> Weight {
                Weight::from_parts(715_479_508,
                        0).saturating_add(Weight::from_parts(92_273_923,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `n` is `[0, 2048]`.
            fn gr_reply_push_input_per_kb(n: u32) -> Weight {
                Weight::from_parts(713_406_025,
                        0).saturating_add(Weight::from_parts(150_034,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_send_push_input(r: u32) -> Weight {
                Weight::from_parts(2_351_528_744,
                        0).saturating_add(Weight::from_parts(121_605_056,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `n` is `[0, 2048]`.
            fn gr_send_push_input_per_kb(n: u32) -> Weight {
                Weight::from_parts(2_382_984_712,
                        0).saturating_add(Weight::from_parts(13_586_421,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_debug(r: u32) -> Weight {
                Weight::from_parts(80_965_772,
                        0).saturating_add(Weight::from_parts(96_988_657,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `n` is `[0, 2048]`.
            fn gr_debug_per_kb(n: u32) -> Weight {
                Weight::from_parts(124_686_000,
                        0).saturating_add(Weight::from_parts(25_956_010,
                            0).saturating_mul(n.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_reply_code(r: u32) -> Weight {
                Weight::from_parts(80_408_202,
                        0).saturating_add(Weight::from_parts(73_582_256,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_wake(r: u32) -> Weight {
                Weight::from_parts(107_007_000,
                        0).saturating_add(Weight::from_parts(294_563_800,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_create_program(r: u32) -> Weight {
                Weight::from_parts(70_732_297,
                        0).saturating_add(Weight::from_parts(326_308_772,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `p` is `[0, 2048]`.
            /// The range of component `s` is `[1, 2048]`.
            fn gr_create_program_per_kb(p: u32, s: u32) -> Weight {
                Weight::from_parts(45_056_030_000,
                            0).saturating_add(Weight::from_parts(6_396_435,
                                0).saturating_mul(p.into())).saturating_add(Weight::from_parts(153_430_909,
                            0).saturating_mul(s.into()))
            }
            /// The range of component `r` is `[0, 20]`.
            fn gr_create_program_wgas(r: u32) -> Weight {
                Weight::from_parts(69_297_593,
                        0).saturating_add(Weight::from_parts(330_199_040,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `p` is `[0, 2048]`.
            /// The range of component `s` is `[1, 2048]`.
            fn gr_create_program_wgas_per_kb(p: u32, s: u32) -> Weight {
                Weight::from_parts(44_891_319_000,
                            0).saturating_add(Weight::from_parts(7_282_931,
                                0).saturating_mul(p.into())).saturating_add(Weight::from_parts(153_258_816,
                            0).saturating_mul(s.into()))
            }
            /// The range of component `p` is `[0, 512]`.
            fn lazy_pages_signal_read(p: u32) -> Weight {
                Weight::from_parts(107_829_188,
                                1131).saturating_add(Weight::from_parts(15_060_122,
                                    0).saturating_mul(p.into())).saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into()))).saturating_add(Weight::from_parts(0,
                            9900).saturating_mul(p.into()))
            }
            /// The range of component `p` is `[0, 512]`.
            fn lazy_pages_signal_write(p: u32) -> Weight {
                Weight::from_parts(75_027_000,
                                1131).saturating_add(Weight::from_parts(38_796_272,
                                    0).saturating_mul(p.into())).saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into()))).saturating_add(Weight::from_parts(0,
                            9900).saturating_mul(p.into()))
            }
            /// The range of component `p` is `[0, 512]`.
            fn lazy_pages_signal_write_after_read(p: u32) -> Weight {
                Weight::from_parts(7_492_491_772,
                            5069931).saturating_add(Weight::from_parts(40_376_041,
                                0).saturating_mul(p.into())).saturating_add(RocksDbWeight::get().reads(2048_u64))
            }
            /// The range of component `p` is `[0, 512]`.
            fn lazy_pages_load_page_storage_data(p: u32) -> Weight {
                Weight::from_parts(77_486_000,
                                1946).saturating_add(Weight::from_parts(56_645_948,
                                    0).saturating_mul(p.into())).saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into()))).saturating_add(Weight::from_parts(0,
                            75482).saturating_mul(p.into()))
            }
            /// The range of component `p` is `[0, 32]`.
            fn lazy_pages_host_func_read(p: u32) -> Weight {
                Weight::from_parts(80_313_380,
                                1131).saturating_add(Weight::from_parts(40_600_455,
                                    0).saturating_mul(p.into())).saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into()))).saturating_add(Weight::from_parts(0,
                            9900).saturating_mul(p.into()))
            }
            /// The range of component `p` is `[0, 32]`.
            fn lazy_pages_host_func_write(p: u32) -> Weight {
                Weight::from_parts(719_296_174,
                                1496).saturating_add(Weight::from_parts(47_010_756,
                                    0).saturating_mul(p.into())).saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into()))).saturating_add(Weight::from_parts(0,
                            9883).saturating_mul(p.into()))
            }
            /// The range of component `p` is `[0, 32]`.
            fn lazy_pages_host_func_write_after_read(p: u32) -> Weight {
                Weight::from_parts(1_221_292_006,
                            317931).saturating_add(Weight::from_parts(47_325_607,
                                0).saturating_mul(p.into())).saturating_add(RocksDbWeight::get().reads(128_u64))
            }
            /// The range of component `r` is `[0, 20]`.
            fn mem_grow(r: u32) -> Weight {
                Weight::from_parts(9_461_855,
                        0).saturating_add(Weight::from_parts(88_598_198,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[50, 500]`.
            fn instr_i64load(r: u32) -> Weight {
                Weight::from_parts(4_556_572_629,
                        0).saturating_add(Weight::from_parts(3_345_585,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[50, 500]`.
            fn instr_i32load(r: u32) -> Weight {
                Weight::from_parts(4_572_330_399,
                        0).saturating_add(Weight::from_parts(3_348_768,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[50, 500]`.
            fn instr_i64store(r: u32) -> Weight {
                Weight::from_parts(10_613_885_736,
                        0).saturating_add(Weight::from_parts(7_787_812,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[50, 500]`.
            fn instr_i32store(r: u32) -> Weight {
                Weight::from_parts(10_770_521_945,
                        0).saturating_add(Weight::from_parts(8_048_666,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_select(r: u32) -> Weight {
                Weight::from_parts(1_220_000,
                        0).saturating_add(Weight::from_parts(2_365_490,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_if(r: u32) -> Weight {
                Weight::from_parts(1_200_000,
                        0).saturating_add(Weight::from_parts(2_171_849,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_br(r: u32) -> Weight {
                Weight::from_parts(240_771,
                        0).saturating_add(Weight::from_parts(1_581_418,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_br_if(r: u32) -> Weight {
                Weight::from_parts(1_181_000,
                        0).saturating_add(Weight::from_parts(1_863_856,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_br_table(r: u32) -> Weight {
                Weight::from_parts(1_136_000,
                        0).saturating_add(Weight::from_parts(4_295_841,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `e` is `[1, 256]`.
            fn instr_br_table_per_entry(e: u32) -> Weight {
                Weight::from_parts(4_962_809,
                        0).saturating_add(Weight::from_parts(48_563,
                            0).saturating_mul(e.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_call_const(r: u32) -> Weight {
                Weight::from_parts(1_213_889,
                        0).saturating_add(Weight::from_parts(2_446_010,
                            0).saturating_mul(r.into()))
            }
            fn instr_i64const(r: u32) -> Weight {
                Weight::from_parts(0,
                        0).saturating_add(Weight::from_parts(2_446_010 - 2_307_395,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_call(r: u32) -> Weight {
                Weight::from_parts(770_567,
                        0).saturating_add(Weight::from_parts(2_307_395,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_call_indirect(r: u32) -> Weight {
                Weight::from_parts(1_217_000,
                        0).saturating_add(Weight::from_parts(7_740_891,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `p` is `[0, 128]`.
            fn instr_call_indirect_per_param(p: u32) -> Weight {
                Weight::from_parts(5_089_000,
                        0).saturating_add(Weight::from_parts(614_508,
                            0).saturating_mul(p.into()))
            }
            /// The range of component `l` is `[0, 1024]`.
            fn instr_call_per_local(_l: u32) -> Weight {
                Weight::from_parts(2_647_502, 0)
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_local_get(r: u32) -> Weight {
                Weight::from_parts(7_020_954,
                        0).saturating_add(Weight::from_parts(348_175,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_local_set(r: u32) -> Weight {
                Weight::from_parts(7_166_208,
                        0).saturating_add(Weight::from_parts(745_654,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_local_tee(r: u32) -> Weight {
                Weight::from_parts(7_874_187,
                        0).saturating_add(Weight::from_parts(745_740,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_global_get(r: u32) -> Weight {
                Weight::from_parts(5_308_653,
                        0).saturating_add(Weight::from_parts(336_903,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_global_set(r: u32) -> Weight {
                Weight::from_parts(4_874_988,
                        0).saturating_add(Weight::from_parts(560_664,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_memory_current(r: u32) -> Weight {
                Weight::from_parts(7_930_046,
                        0).saturating_add(Weight::from_parts(5_550_905,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64clz(r: u32) -> Weight {
                Weight::from_parts(1_143_000,
                        0).saturating_add(Weight::from_parts(2_095_883,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32clz(r: u32) -> Weight {
                Weight::from_parts(1_195_000,
                        0).saturating_add(Weight::from_parts(1_996_114,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64ctz(r: u32) -> Weight {
                Weight::from_parts(1_134_000,
                        0).saturating_add(Weight::from_parts(2_072_372,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32ctz(r: u32) -> Weight {
                Weight::from_parts(13_738,
                        0).saturating_add(Weight::from_parts(1_906_210,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64popcnt(r: u32) -> Weight {
                Weight::from_parts(663_739,
                        0).saturating_add(Weight::from_parts(362_180,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32popcnt(r: u32) -> Weight {
                Weight::from_parts(1_410_317,
                        0).saturating_add(Weight::from_parts(254_308,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64eqz(r: u32) -> Weight {
                Weight::from_parts(1_155_000,
                        0).saturating_add(Weight::from_parts(744_476,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32eqz(r: u32) -> Weight {
                Weight::from_parts(1_157_000,
                        0).saturating_add(Weight::from_parts(658_824,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32extend8s(r: u32) -> Weight {
                Weight::from_parts(1_198_562,
                        0).saturating_add(Weight::from_parts(273_468,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32extend16s(r: u32) -> Weight {
                Weight::from_parts(1_177_000,
                        0).saturating_add(Weight::from_parts(337_533,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64extend8s(r: u32) -> Weight {
                Weight::from_parts(1_196_000,
                        0).saturating_add(Weight::from_parts(435_144,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64extend16s(r: u32) -> Weight {
                Weight::from_parts(1_179_000,
                        0).saturating_add(Weight::from_parts(409_837,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64extend32s(r: u32) -> Weight {
                Weight::from_parts(1_226_377,
                        0).saturating_add(Weight::from_parts(341_148,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64extendsi32(r: u32) -> Weight {
                Weight::from_parts(1_132_000,
                        0).saturating_add(Weight::from_parts(311_634,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64extendui32(r: u32) -> Weight {
                Weight::from_parts(1_051_025,
                        0).saturating_add(Weight::from_parts(169_313,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32wrapi64(r: u32) -> Weight {
                Weight::from_parts(796_609,
                        0).saturating_add(Weight::from_parts(196_419,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64eq(r: u32) -> Weight {
                Weight::from_parts(1_154_000,
                        0).saturating_add(Weight::from_parts(1_044_686,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32eq(r: u32) -> Weight {
                Weight::from_parts(1_267_000,
                        0).saturating_add(Weight::from_parts(667_020,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64ne(r: u32) -> Weight {
                Weight::from_parts(1_223_000,
                        0).saturating_add(Weight::from_parts(965_395,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32ne(r: u32) -> Weight {
                Weight::from_parts(1_144_000,
                        0).saturating_add(Weight::from_parts(629_111,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64lts(r: u32) -> Weight {
                Weight::from_parts(1_000_218,
                        0).saturating_add(Weight::from_parts(749_269,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32lts(r: u32) -> Weight {
                Weight::from_parts(1_504_342,
                        0).saturating_add(Weight::from_parts(492_011,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64ltu(r: u32) -> Weight {
                Weight::from_parts(1_349_759,
                        0).saturating_add(Weight::from_parts(697_490,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32ltu(r: u32) -> Weight {
                Weight::from_parts(1_179_027,
                        0).saturating_add(Weight::from_parts(522_999,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64gts(r: u32) -> Weight {
                Weight::from_parts(1_249_853,
                        0).saturating_add(Weight::from_parts(781_336,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32gts(r: u32) -> Weight {
                Weight::from_parts(1_951_540,
                        0).saturating_add(Weight::from_parts(505_007,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64gtu(r: u32) -> Weight {
                Weight::from_parts(883_225,
                        0).saturating_add(Weight::from_parts(709_921,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32gtu(r: u32) -> Weight {
                Weight::from_parts(860_376,
                        0).saturating_add(Weight::from_parts(504_252,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64les(r: u32) -> Weight {
                Weight::from_parts(781_548,
                        0).saturating_add(Weight::from_parts(704_441,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32les(r: u32) -> Weight {
                Weight::from_parts(1_410_879,
                        0).saturating_add(Weight::from_parts(480_265,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64leu(r: u32) -> Weight {
                Weight::from_parts(1_138_000,
                        0).saturating_add(Weight::from_parts(762_432,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32leu(r: u32) -> Weight {
                Weight::from_parts(1_447_033,
                        0).saturating_add(Weight::from_parts(487_888,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64ges(r: u32) -> Weight {
                Weight::from_parts(1_151_000,
                        0).saturating_add(Weight::from_parts(789_278,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32ges(r: u32) -> Weight {
                Weight::from_parts(1_205_796,
                        0).saturating_add(Weight::from_parts(519_603,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64geu(r: u32) -> Weight {
                Weight::from_parts(1_161_000,
                        0).saturating_add(Weight::from_parts(823_640,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32geu(r: u32) -> Weight {
                Weight::from_parts(1_167_000,
                        0).saturating_add(Weight::from_parts(567_051,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64add(r: u32) -> Weight {
                Weight::from_parts(1_186_000,
                        0).saturating_add(Weight::from_parts(818_881,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32add(r: u32) -> Weight {
                Weight::from_parts(290_633,
                        0).saturating_add(Weight::from_parts(447_063,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64sub(r: u32) -> Weight {
                Weight::from_parts(1_158_000,
                        0).saturating_add(Weight::from_parts(769_190,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32sub(r: u32) -> Weight {
                Weight::from_parts(222_233,
                        0).saturating_add(Weight::from_parts(468_176,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64mul(r: u32) -> Weight {
                Weight::from_parts(1_124_000,
                        0).saturating_add(Weight::from_parts(929_811,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32mul(r: u32) -> Weight {
                Weight::from_parts(1_174_000,
                        0).saturating_add(Weight::from_parts(977_020,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64divs(r: u32) -> Weight {
                Weight::from_parts(1_161_000,
                        0).saturating_add(Weight::from_parts(1_661_976,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32divs(r: u32) -> Weight {
                Weight::from_parts(344_417,
                        0).saturating_add(Weight::from_parts(1_336_323,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64divu(r: u32) -> Weight {
                Weight::from_parts(1_149_000,
                        0).saturating_add(Weight::from_parts(1_726_892,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32divu(r: u32) -> Weight {
                Weight::from_parts(1_168_000,
                        0).saturating_add(Weight::from_parts(1_372_685,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64rems(r: u32) -> Weight {
                Weight::from_parts(1_190_000,
                        0).saturating_add(Weight::from_parts(6_047_040,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32rems(r: u32) -> Weight {
                Weight::from_parts(1_138_000,
                        0).saturating_add(Weight::from_parts(3_890_058,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64remu(r: u32) -> Weight {
                Weight::from_parts(1_166_000,
                        0).saturating_add(Weight::from_parts(1_822_711,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32remu(r: u32) -> Weight {
                Weight::from_parts(1_147_000,
                        0).saturating_add(Weight::from_parts(1_261_297,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64and(r: u32) -> Weight {
                Weight::from_parts(1_195_000,
                        0).saturating_add(Weight::from_parts(694_554,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32and(r: u32) -> Weight {
                Weight::from_parts(1_132_000,
                        0).saturating_add(Weight::from_parts(576_761,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64or(r: u32) -> Weight {
                Weight::from_parts(1_201_000,
                        0).saturating_add(Weight::from_parts(760_651,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32or(r: u32) -> Weight {
                Weight::from_parts(304_083,
                        0).saturating_add(Weight::from_parts(417_302,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64xor(r: u32) -> Weight {
                Weight::from_parts(1_153_000,
                        0).saturating_add(Weight::from_parts(680_341,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32xor(r: u32) -> Weight {
                Weight::from_parts(72_522,
                        0).saturating_add(Weight::from_parts(432_029,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64shl(r: u32) -> Weight {
                Weight::from_parts(1_194_000,
                        0).saturating_add(Weight::from_parts(597_109,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32shl(r: u32) -> Weight {
                Weight::from_parts(1_029_675,
                        0).saturating_add(Weight::from_parts(369_697,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64shrs(r: u32) -> Weight {
                Weight::from_parts(1_211_000,
                        0).saturating_add(Weight::from_parts(586_377,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32shrs(r: u32) -> Weight {
                Weight::from_parts(734_716,
                        0).saturating_add(Weight::from_parts(385_085,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64shru(r: u32) -> Weight {
                Weight::from_parts(483_072,
                        0).saturating_add(Weight::from_parts(546_280,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32shru(r: u32) -> Weight {
                Weight::from_parts(503_906,
                        0).saturating_add(Weight::from_parts(376_314,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64rotl(r: u32) -> Weight {
                Weight::from_parts(1_187_000,
                        0).saturating_add(Weight::from_parts(813_202,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32rotl(r: u32) -> Weight {
                Weight::from_parts(1_626_471,
                        0).saturating_add(Weight::from_parts(347_852,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i64rotr(r: u32) -> Weight {
                Weight::from_parts(1_160_000,
                        0).saturating_add(Weight::from_parts(600_455,
                            0).saturating_mul(r.into()))
            }
            /// The range of component `r` is `[0, 50]`.
            fn instr_i32rotr(r: u32) -> Weight {
                Weight::from_parts(905_893,
                        0).saturating_add(Weight::from_parts(380_454,
                            0).saturating_mul(r.into()))
            }
            fn tasks_remove_gas_reservation() -> Weight {
                Weight::from_parts(82_623_000,
                            6196).saturating_add(RocksDbWeight::get().reads(7_u64)).saturating_add(RocksDbWeight::get().writes(6_u64))
            }
            fn tasks_send_user_message_to_mailbox() -> Weight {
                Weight::from_parts(49_820_000,
                            4323).saturating_add(RocksDbWeight::get().reads(6_u64)).saturating_add(RocksDbWeight::get().writes(5_u64))
            }
            fn tasks_send_user_message() -> Weight {
                Weight::from_parts(95_664_000,
                            6196).saturating_add(RocksDbWeight::get().reads(11_u64)).saturating_add(RocksDbWeight::get().writes(10_u64))
            }
            fn tasks_send_dispatch() -> Weight {
                Weight::from_parts(35_066_000,
                            4159).saturating_add(RocksDbWeight::get().reads(7_u64)).saturating_add(RocksDbWeight::get().writes(6_u64))
            }
            fn tasks_wake_message() -> Weight {
                Weight::from_parts(51_545_000,
                            4402).saturating_add(RocksDbWeight::get().reads(8_u64)).saturating_add(RocksDbWeight::get().writes(6_u64))
            }
            fn tasks_wake_message_no_wake() -> Weight {
                Weight::from_parts(5_259_000,
                        3545).saturating_add(RocksDbWeight::get().reads(1_u64))
            }
            fn tasks_remove_from_waitlist() -> Weight {
                Weight::from_parts(132_686_000,
                            7505).saturating_add(RocksDbWeight::get().reads(16_u64)).saturating_add(RocksDbWeight::get().writes(13_u64))
            }
            fn tasks_remove_from_mailbox() -> Weight {
                Weight::from_parts(109_917_000,
                            7234).saturating_add(RocksDbWeight::get().reads(14_u64)).saturating_add(RocksDbWeight::get().writes(13_u64))
            }
        }
    }
    pub mod pallet_gear_voucher {
        //! Autogenerated weights for pallet_gear_voucher
        //!
        //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
        //! DATE: 2024-04-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
        //! WORST CASE MAP SIZE: `1000000`
        //! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
        //! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024
        #![allow(unused_parens)]
        #![allow(unused_imports)]
        #![allow(clippy::unnecessary_cast)]
        use frame_support::{
            traits::Get, weights::{Weight, constants::RocksDbWeight},
        };
        use sp_std::marker::PhantomData;
        /// Weight functions needed for pallet_gear_voucher.
        pub trait WeightInfo {
            fn issue()
            -> Weight;
            fn revoke()
            -> Weight;
            fn update()
            -> Weight;
            fn decline()
            -> Weight;
        }
        /// Weights for pallet_gear_voucher using the Gear node and recommended hardware.
        pub struct SubstrateWeight<T>(PhantomData<T>);
        impl<T: frame_system::Config> pallet_gear_voucher::WeightInfo for
            SubstrateWeight<T> {
            fn issue() -> Weight {
                Weight::from_parts(55_506_000,
                            6196).saturating_add(T::DbWeight::get().reads(3_u64)).saturating_add(T::DbWeight::get().writes(4_u64))
            }
            fn revoke() -> Weight {
                Weight::from_parts(56_748_000,
                            6196).saturating_add(T::DbWeight::get().reads(3_u64)).saturating_add(T::DbWeight::get().writes(2_u64))
            }
            fn update() -> Weight {
                Weight::from_parts(55_940_000,
                            6196).saturating_add(T::DbWeight::get().reads(3_u64)).saturating_add(T::DbWeight::get().writes(3_u64))
            }
            fn decline() -> Weight {
                Weight::from_parts(15_471_000,
                            3765).saturating_add(T::DbWeight::get().reads(1_u64)).saturating_add(T::DbWeight::get().writes(1_u64))
            }
        }
        impl WeightInfo for () {
            fn issue() -> Weight {
                Weight::from_parts(55_506_000,
                            6196).saturating_add(RocksDbWeight::get().reads(3_u64)).saturating_add(RocksDbWeight::get().writes(4_u64))
            }
            fn revoke() -> Weight {
                Weight::from_parts(56_748_000,
                            6196).saturating_add(RocksDbWeight::get().reads(3_u64)).saturating_add(RocksDbWeight::get().writes(2_u64))
            }
            fn update() -> Weight {
                Weight::from_parts(55_940_000,
                            6196).saturating_add(RocksDbWeight::get().reads(3_u64)).saturating_add(RocksDbWeight::get().writes(3_u64))
            }
            fn decline() -> Weight {
                Weight::from_parts(15_471_000,
                            3765).saturating_add(RocksDbWeight::get().reads(1_u64)).saturating_add(RocksDbWeight::get().writes(1_u64))
            }
        }
    }
    pub mod pallet_timestamp {
        //! Autogenerated weights for pallet_timestamp
        //!
        //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
        //! DATE: 2024-04-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
        //! WORST CASE MAP SIZE: `1000000`
        //! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
        //! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024
        #![allow(unused_parens)]
        #![allow(unused_imports)]
        #![allow(clippy::unnecessary_cast)]
        use frame_support::{
            traits::Get, weights::{Weight, constants::RocksDbWeight},
        };
        use sp_std::marker::PhantomData;
        /// Weight functions needed for pallet_timestamp.
        pub trait WeightInfo {
            fn set()
            -> Weight;
            fn on_finalize()
            -> Weight;
        }
        /// Weights for pallet_timestamp using the Gear node and recommended hardware.
        pub struct SubstrateWeight<T>(PhantomData<T>);
        impl<T: frame_system::Config> pallet_timestamp::WeightInfo for
            SubstrateWeight<T> {
            fn set() -> Weight {
                Weight::from_parts(9_560_000,
                            1493).saturating_add(T::DbWeight::get().reads(2_u64)).saturating_add(T::DbWeight::get().writes(1_u64))
            }
            fn on_finalize() -> Weight { Weight::from_parts(3_755_000, 0) }
        }
        impl WeightInfo for () {
            fn set() -> Weight {
                Weight::from_parts(9_560_000,
                            1493).saturating_add(RocksDbWeight::get().reads(2_u64)).saturating_add(RocksDbWeight::get().writes(1_u64))
            }
            fn on_finalize() -> Weight { Weight::from_parts(3_755_000, 0) }
        }
    }
    pub mod pallet_utility {
        //! Autogenerated weights for pallet_utility
        //!
        //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
        //! DATE: 2024-04-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
        //! WORST CASE MAP SIZE: `1000000`
        //! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
        //! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024
        #![allow(unused_parens)]
        #![allow(unused_imports)]
        #![allow(clippy::unnecessary_cast)]
        use frame_support::{
            traits::Get, weights::{Weight, constants::RocksDbWeight},
        };
        use sp_std::marker::PhantomData;
        /// Weight functions needed for pallet_utility.
        pub trait WeightInfo {
            fn batch(c: u32)
            -> Weight;
            fn as_derivative()
            -> Weight;
            fn batch_all(c: u32)
            -> Weight;
            fn dispatch_as()
            -> Weight;
            fn force_batch(c: u32)
            -> Weight;
        }
        /// Weights for pallet_utility using the Gear node and recommended hardware.
        pub struct SubstrateWeight<T>(PhantomData<T>);
        impl<T: frame_system::Config> pallet_utility::WeightInfo for
            SubstrateWeight<T> {
            /// The range of component `c` is `[0, 1000]`.
            fn batch(c: u32) -> Weight {
                Weight::from_parts(2_521_791,
                        0).saturating_add(Weight::from_parts(4_013_340,
                            0).saturating_mul(c.into()))
            }
            fn as_derivative() -> Weight { Weight::from_parts(3_705_000, 0) }
            /// The range of component `c` is `[0, 1000]`.
            fn batch_all(c: u32) -> Weight {
                Weight::from_parts(4_438_178,
                        0).saturating_add(Weight::from_parts(4_242_235,
                            0).saturating_mul(c.into()))
            }
            fn dispatch_as() -> Weight { Weight::from_parts(7_415_000, 0) }
            /// The range of component `c` is `[0, 1000]`.
            fn force_batch(c: u32) -> Weight {
                Weight::from_parts(8_281_088,
                        0).saturating_add(Weight::from_parts(4_005_700,
                            0).saturating_mul(c.into()))
            }
        }
        impl WeightInfo for () {
            /// The range of component `c` is `[0, 1000]`.
            fn batch(c: u32) -> Weight {
                Weight::from_parts(2_521_791,
                        0).saturating_add(Weight::from_parts(4_013_340,
                            0).saturating_mul(c.into()))
            }
            fn as_derivative() -> Weight { Weight::from_parts(3_705_000, 0) }
            /// The range of component `c` is `[0, 1000]`.
            fn batch_all(c: u32) -> Weight {
                Weight::from_parts(4_438_178,
                        0).saturating_add(Weight::from_parts(4_242_235,
                            0).saturating_mul(c.into()))
            }
            fn dispatch_as() -> Weight { Weight::from_parts(7_415_000, 0) }
            /// The range of component `c` is `[0, 1000]`.
            fn force_batch(c: u32) -> Weight {
                Weight::from_parts(8_281_088,
                        0).saturating_add(Weight::from_parts(4_005_700,
                            0).saturating_mul(c.into()))
            }
        }
    }
}
mod bag_thresholds {
    //! Autogenerated bag thresholds.
    //!
    //! Generated on 2023-08-21T15:38:22.734264+00:00
    //! Arguments
    //! Total issuance: 10000000000
    //! Minimum balance: 10000000000000
    //! for the vara runtime.
    #![allow(clippy::all)]
    /// Existential weight for this runtime.
    #[cfg(any(test, feature = "std"))]
    #[allow(unused)]
    pub const EXISTENTIAL_WEIGHT: u64 = 10_000_000_000_000;
    /// Constant ratio between bags for this runtime.
    #[cfg(any(test, feature = "std"))]
    #[allow(unused)]
    pub const CONSTANT_RATIO: f64 = 1.0751944990982600;
    /// Upper thresholds delimiting the bag list.
    pub const THRESHOLDS: [u64; 200] =
        [10_000_000_000_000, 10_751_944_990_983, 11_560_432_108_912,
                12_429_713_010_701, 13_364_359_054_476, 14_369_285_339_347,
                15_449_776_552_839, 16_611_514_761_910, 17_860_609_293_695,
                19_203_628_863_124, 20_647_636_116_355, 22_200_224_771_687,
                23_869_559_553_263, 25_664_419_127_567, 27_594_242_268_512,
                29_669_177_493_889, 31_900_136_434_199, 34_298_851_214_535,
                36_877_936_151_258, 39_650_954_087_929, 42_632_487_719_339,
                45_838_216_278_707, 49_284_997_991_342, 52_990_958_728_360,
                56_975_587_326_676, 61_259_838_076_535, 65_866_240_915_541,
                70_819_019_908_670, 76_144_220_637_332, 81_869_847_167_384,
                88_026_009_316_387, 94_645_080_994_551, 101_761_870_452_051,
                109_413_803_327_995, 117_641_119_463_679, 126_487_084_515_109,
                135_998_217_477_622, 146_224_535_319_108, 157_219_816_008_304,
                169_041_881_321_369, 181_752_900_913_957, 195_419_719_257_838,
                210_114_207_161_354, 225_913_639_722_280, 242_901_102_700_662,
                261_165_929_448_653, 280_804_170_695_076, 301_919_099_655_195,
                324_621_755_121_965, 349_031_525_394_759, 375_276_776_116_320,
                403_495_525_319_597, 433_836_169_234_393, 466_458_262_670_681,
                501_533_358_082_447, 539_245_907_724_525, 579_794_233_646_657,
                623_391_570_625_777, 670_267_187_521_060, 720_667_592_948_706,
                774_857_831_616_833, 833_122_878_137_625, 895_769_135_646_485,
                963_126_047_109_104, 1_035_547_827_789_960,
                1_113_415_327_992_917, 1_197_138_035_869_669,
                1_287_156_230_828_364, 1_383_943_298_866_707,
                1_488_008_222_005_383, 1_599_898_254_913_170,
                1_720_201_802_799_546, 1_849_551_515_708_982,
                1_988_627_615_489_147, 2_138_161_472_928_821,
                2_298_939_453_876_902, 2_471_807_054_568_403,
                2_657_673_347_904_220, 2_857_515_764_066_674,
                3_072_385_230_611_050, 3_303_411_699_063_740,
                3_551_810_087_090_170, 3_818_886_667_481_063,
                4_106_045_937_555_325, 4_414_798_005_104_243,
                4_746_766_529_718_054, 5_103_697_261_256_589,
                5_487_467_220_365_940, 5_900_094_569_319_478,
                6_343_749_225_091_820, 6_820_764_270_477_575,
                7_333_648_223_263_445, 7_885_098_227_974_584,
                8_478_014_239_567_711, 9_115_514_273_659_920,
                9_800_950_803_490_818, 10_537_928_389_846_000,
                11_330_322_636_653_804, 12_182_300_571_938_664,
                13_098_342_561_310_038, 14_083_265_869_225_166,
                15_142_249_991_929_174, 16_280_863_895_292_920,
                17_505_095_300_786_418, 18_821_382_173_596_360,
                20_236_646_578_476_860, 21_758_331_081_373_944,
                23_394_437_888_251_960, 25_153_570_926_944_424,
                27_044_981_093_328_568, 29_078_614_899_763_324,
                31_265_166_781_622_228, 33_616_135_336_989_872,
                36_143_883_795_274_144, 38_861_705_032_725_504,
                41_783_891_476_765_632, 44_925_810_266_737_080,
                48_303_984_066_327_840, 51_936_177_952_645_696,
                55_841_492_838_872_984, 60_040_465_921_791_112,
                64_555_178_682_406_344, 69_409_373_007_628_560,
                74_628_576_043_661_488, 80_240_234_437_681_024,
                86_273_858_673_749_408, 92_761_178_261_996_064,
                99_736_308_597_171_264, 107_235_930_364_045_040,
                115_299_482_433_105_296, 123_969_369_260_951_280,
                133_291_183_886_055_744, 143_313_947_692_581_776,
                154_090_368_203_119_712, 165_677_116_256_019_744,
                178_135_124_024_935_328, 191_529_905_447_796_768,
                205_931_900_750_280_960, 221_416_846_875_550_944,
                238_066_175_768_274_144, 255_967_442_607_407_840,
                275_214_786_239_734_496, 295_909_424_235_466_048,
                318_160_185_169_306_432, 342_084_080_926_122_112,
                367_806_922_040_850_496, 395_463_979_308_585_024,
                425_200_695_144_098_752, 457_173_448_431_691_200,
                491_550_376_887_536_448, 528_512_261_259_155_712,
                568_253_476_011_826_688, 610_983_011_501_381_120,
                656_925_573_008_773_888, 706_322_762_416_006_144,
                759_434_348_737_577_088, 816_539_634_188_912_512,
                877_938_922_975_624_320, 943_955_100_527_642_240,
                1_014_935_331_483_065_984, 1_091_252_885_351_061_632,
                1_173_309_099_454_565_632, 1_261_535_489_475_482_368,
                1_356_396_018_701_269_504, 1_458_389_537_906_385_664,
                1_568_052_408_699_399_168, 1_685_961_324_131_370_496,
                1_812_736_341_398_468_096, 1_949_044_142_587_138_304,
                2_095_601_540_609_376_000, 2_253_179_248_765_040_128,
                2_422_605_933_754_521_088, 2_604_772_573_455_664_640,
                2_800_637_142_381_549_056, 3_011_229_649_458_912_256,
                3_237_657_554_619_804_160, 3_481_111_592_691_138_048,
                3_742_872_035_208_694_272, 4_024_315_423_085_096_960,
                4_326_921_805_537_383_424, 4_652_282_523_342_105_600,
                5_002_108_577_348_404_224, 5_378_239_626_257_227_776,
                5_782_653_660_984_053_760, 6_217_477_406_480_468_992,
                6_684_997_505_715_516_416, 7_187_672_544_630_912_000,
                7_728_145_981_306_749_952, 8_309_260_047_329_342_464,
                8_934_070_694_465_457_152, 9_605_863_665_244_231_680,
                10_328_171_771_958_448_128, 11_104_793_474_951_653_376,
                11_939_812_857_890_269_184, 12_837_621_105_066_293_248,
                13_802_939_593_675_003_904, 14_840_844_722_504_937_472,
                15_956_794_607_608_752_128, 17_156_657_785_341_708_288,
                18_446_744_073_709_551_615];
}
pub mod governance {
    //! Governance configuration for the Vara runtime.
    use super::*;
    use frame_support::{parameter_types, traits::{ConstU16, EitherOf}};
    use frame_system::EnsureRootWithSuccess;
    mod origins {
        //! Custom origins for governance interventions.
        pub use pallet_custom_origins::*;
        #[doc =
        r"The `pallet` module in each FRAME pallet hosts the most important items needed
to construct this pallet.

The main components of this pallet are:
- [`Pallet`], which implements all of the dispatchable extrinsics of the pallet, among
other public functions.
	- The subset of the functions that are dispatchable can be identified either in the
	[`dispatchables`] module or in the [`Call`] enum.
- [`storage_types`], which contains the list of all types that are representing a
storage item. Otherwise, all storage items are listed among [*Type Definitions*](#types).
- [`Config`], which contains the configuration trait of this pallet.
- [`Event`] and [`Error`], which are listed among the [*Enums*](#enums).
		"]
        pub mod pallet_custom_origins {
            use frame_support::pallet_prelude::*;
            use crate::{Balance, UNITS};
            #[doc =
            r"
Configuration trait of this pallet.

The main purpose of this trait is to act as an interface between this pallet and the runtime in
which it is embedded in. A type, function, or constant in this trait is essentially left to be
configured by the runtime that includes this pallet.

Consequently, a runtime that wants to include this pallet must implement this trait."]
            pub trait Config: frame_system::Config { }
            #[doc =
            r"
				The `Pallet` struct, the main type that implements traits and standalone
				functions within the pallet.
			"]
            pub struct Pallet<T>(frame_support::__private::sp_std::marker::PhantomData<(T)>);
            const _: () =
                {
                    impl<T> core::clone::Clone for Pallet<T> {
                        fn clone(&self) -> Self {
                            Self(core::clone::Clone::clone(&self.0))
                        }
                    }
                };
            const _: () =
                {
                    impl<T> core::cmp::Eq for Pallet<T> {}
                };
            const _: () =
                {
                    impl<T> core::cmp::PartialEq for Pallet<T> {
                        fn eq(&self, other: &Self) -> bool {
                            true && self.0 == other.0
                        }
                    }
                };
            const _: () =
                {
                    impl<T> core::fmt::Debug for Pallet<T> {
                        fn fmt(&self, fmt: &mut core::fmt::Formatter)
                            -> core::fmt::Result {
                            fmt.debug_tuple("Pallet").field(&self.0).finish()
                        }
                    }
                };
            pub enum Origin {

                #[doc =
                " Origin for cancelling slashes and managing election provider."]
                StakingAdmin,

                #[doc = " Origin for spending (any amount of) funds."]
                Treasurer,

                #[doc =
                " Origin for managing the composition of the fellowship."]
                FellowshipAdmin,

                #[doc = " Origin for managing the registrar."]
                GeneralAdmin,

                #[doc = " Origin able to cancel referenda."]
                ReferendumCanceller,

                #[doc = " Origin able to kill referenda."]
                ReferendumKiller,

                #[doc =
                " Origin able to spend up to 1,000 VARA from the treasury at once."]
                SmallTipper,

                #[doc =
                " Origin able to spend up to 5,000 VARA from the treasury at once."]
                BigTipper,

                #[doc =
                " Origin able to spend up to 50,000 VARA from the treasury at once."]
                SmallSpender,

                #[doc =
                " Origin able to spend up to 500,000 VARA from the treasury at once."]
                MediumSpender,

                #[doc =
                " Origin able to spend up to 5,000,000 VARA from the treasury at once."]
                BigSpender,

                #[doc = " Origin able to dispatch a whitelisted call."]
                WhitelistedCaller,

                #[doc =
                " Origin commanded by any members of the Vara Fellowship (no grade needed)."]
                FellowshipInitiates,

                #[doc =
                " Origin commanded by Vara Fellows (1st grade or greater)."]
                Fellows,

                #[doc =
                " Origin commanded by Vara Experts (2nd grade or greater)."]
                FellowshipExperts,

                #[doc =
                " Origin commanded by Vara Masters (3rd grade of greater)."]
                FellowshipMasters,

                #[doc =
                " Origin commanded by rank 1 of the Vara Fellowship and with a success of 1."]
                Fellowship1Dan,

                #[doc =
                " Origin commanded by rank 2 of the Vara Fellowship and with a success of 2."]
                Fellowship2Dan,

                #[doc =
                " Origin commanded by rank 3 of the Vara Fellowship and with a success of 3."]
                Fellowship3Dan,

                #[doc =
                " Origin commanded by rank 4 of the Vara Fellowship and with a success of 4."]
                Fellowship4Dan,

                #[doc =
                " Origin commanded by rank 5 of the Vara Fellowship and with a success of 5."]
                Fellowship5Dan,

                #[doc =
                " Origin commanded by rank 6 of the Vara Fellowship and with a success of 6."]
                Fellowship6Dan,

                #[doc =
                " Origin commanded by rank 7 of the Vara Fellowship and with a success of 7."]
                Fellowship7Dan,

                #[doc =
                " Origin commanded by rank 8 of the Vara Fellowship and with a success of 8."]
                Fellowship8Dan,

                #[doc =
                " Origin commanded by rank 9 of the Vara Fellowship and with a success of 9."]
                Fellowship9Dan,
            }
            #[automatically_derived]
            impl ::core::marker::StructuralPartialEq for Origin { }
            #[automatically_derived]
            impl ::core::cmp::PartialEq for Origin {
                #[inline]
                fn eq(&self, other: &Origin) -> bool {
                    let __self_tag =
                        ::core::intrinsics::discriminant_value(self);
                    let __arg1_tag =
                        ::core::intrinsics::discriminant_value(other);
                    __self_tag == __arg1_tag
                }
            }
            #[automatically_derived]
            impl ::core::marker::StructuralEq for Origin { }
            #[automatically_derived]
            impl ::core::cmp::Eq for Origin {
                #[inline]
                #[doc(hidden)]
                #[coverage(off)]
                fn assert_receiver_is_total_eq(&self) -> () {}
            }
            #[automatically_derived]
            impl ::core::clone::Clone for Origin {
                #[inline]
                fn clone(&self) -> Origin {
                    match self {
                        Origin::StakingAdmin => Origin::StakingAdmin,
                        Origin::Treasurer => Origin::Treasurer,
                        Origin::FellowshipAdmin => Origin::FellowshipAdmin,
                        Origin::GeneralAdmin => Origin::GeneralAdmin,
                        Origin::ReferendumCanceller => Origin::ReferendumCanceller,
                        Origin::ReferendumKiller => Origin::ReferendumKiller,
                        Origin::SmallTipper => Origin::SmallTipper,
                        Origin::BigTipper => Origin::BigTipper,
                        Origin::SmallSpender => Origin::SmallSpender,
                        Origin::MediumSpender => Origin::MediumSpender,
                        Origin::BigSpender => Origin::BigSpender,
                        Origin::WhitelistedCaller => Origin::WhitelistedCaller,
                        Origin::FellowshipInitiates => Origin::FellowshipInitiates,
                        Origin::Fellows => Origin::Fellows,
                        Origin::FellowshipExperts => Origin::FellowshipExperts,
                        Origin::FellowshipMasters => Origin::FellowshipMasters,
                        Origin::Fellowship1Dan => Origin::Fellowship1Dan,
                        Origin::Fellowship2Dan => Origin::Fellowship2Dan,
                        Origin::Fellowship3Dan => Origin::Fellowship3Dan,
                        Origin::Fellowship4Dan => Origin::Fellowship4Dan,
                        Origin::Fellowship5Dan => Origin::Fellowship5Dan,
                        Origin::Fellowship6Dan => Origin::Fellowship6Dan,
                        Origin::Fellowship7Dan => Origin::Fellowship7Dan,
                        Origin::Fellowship8Dan => Origin::Fellowship8Dan,
                        Origin::Fellowship9Dan => Origin::Fellowship9Dan,
                    }
                }
            }
            const _: () =
                {
                    impl ::parity_scale_codec::MaxEncodedLen for Origin {
                        fn max_encoded_len() -> ::core::primitive::usize {
                            0_usize.max(0_usize).max(0_usize).max(0_usize).max(0_usize).max(0_usize).max(0_usize).max(0_usize).max(0_usize).max(0_usize).max(0_usize).max(0_usize).max(0_usize).max(0_usize).max(0_usize).max(0_usize).max(0_usize).max(0_usize).max(0_usize).max(0_usize).max(0_usize).max(0_usize).max(0_usize).max(0_usize).max(0_usize).max(0_usize).saturating_add(1)
                        }
                    }
                };
            #[allow(deprecated)]
            const _: () =
                {
                    #[automatically_derived]
                    impl ::parity_scale_codec::Encode for Origin {
                        fn size_hint(&self) -> usize {
                            1_usize +
                                match *self {
                                    Origin::StakingAdmin => { 0_usize }
                                    Origin::Treasurer => { 0_usize }
                                    Origin::FellowshipAdmin => { 0_usize }
                                    Origin::GeneralAdmin => { 0_usize }
                                    Origin::ReferendumCanceller => { 0_usize }
                                    Origin::ReferendumKiller => { 0_usize }
                                    Origin::SmallTipper => { 0_usize }
                                    Origin::BigTipper => { 0_usize }
                                    Origin::SmallSpender => { 0_usize }
                                    Origin::MediumSpender => { 0_usize }
                                    Origin::BigSpender => { 0_usize }
                                    Origin::WhitelistedCaller => { 0_usize }
                                    Origin::FellowshipInitiates => { 0_usize }
                                    Origin::Fellows => { 0_usize }
                                    Origin::FellowshipExperts => { 0_usize }
                                    Origin::FellowshipMasters => { 0_usize }
                                    Origin::Fellowship1Dan => { 0_usize }
                                    Origin::Fellowship2Dan => { 0_usize }
                                    Origin::Fellowship3Dan => { 0_usize }
                                    Origin::Fellowship4Dan => { 0_usize }
                                    Origin::Fellowship5Dan => { 0_usize }
                                    Origin::Fellowship6Dan => { 0_usize }
                                    Origin::Fellowship7Dan => { 0_usize }
                                    Origin::Fellowship8Dan => { 0_usize }
                                    Origin::Fellowship9Dan => { 0_usize }
                                    _ => 0_usize,
                                }
                        }
                        fn encode_to<__CodecOutputEdqy: ::parity_scale_codec::Output +
                            ?::core::marker::Sized>(&self,
                            __codec_dest_edqy: &mut __CodecOutputEdqy) {
                            match *self {
                                Origin::StakingAdmin => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(0usize as
                                            ::core::primitive::u8);
                                }
                                Origin::Treasurer => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(1usize as
                                            ::core::primitive::u8);
                                }
                                Origin::FellowshipAdmin => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(2usize as
                                            ::core::primitive::u8);
                                }
                                Origin::GeneralAdmin => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(3usize as
                                            ::core::primitive::u8);
                                }
                                Origin::ReferendumCanceller => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(4usize as
                                            ::core::primitive::u8);
                                }
                                Origin::ReferendumKiller => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(5usize as
                                            ::core::primitive::u8);
                                }
                                Origin::SmallTipper => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(6usize as
                                            ::core::primitive::u8);
                                }
                                Origin::BigTipper => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(7usize as
                                            ::core::primitive::u8);
                                }
                                Origin::SmallSpender => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(8usize as
                                            ::core::primitive::u8);
                                }
                                Origin::MediumSpender => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(9usize as
                                            ::core::primitive::u8);
                                }
                                Origin::BigSpender => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(10usize as
                                            ::core::primitive::u8);
                                }
                                Origin::WhitelistedCaller => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(11usize as
                                            ::core::primitive::u8);
                                }
                                Origin::FellowshipInitiates => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(12usize as
                                            ::core::primitive::u8);
                                }
                                Origin::Fellows => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(13usize as
                                            ::core::primitive::u8);
                                }
                                Origin::FellowshipExperts => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(14usize as
                                            ::core::primitive::u8);
                                }
                                Origin::FellowshipMasters => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(15usize as
                                            ::core::primitive::u8);
                                }
                                Origin::Fellowship1Dan => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(16usize as
                                            ::core::primitive::u8);
                                }
                                Origin::Fellowship2Dan => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(17usize as
                                            ::core::primitive::u8);
                                }
                                Origin::Fellowship3Dan => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(18usize as
                                            ::core::primitive::u8);
                                }
                                Origin::Fellowship4Dan => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(19usize as
                                            ::core::primitive::u8);
                                }
                                Origin::Fellowship5Dan => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(20usize as
                                            ::core::primitive::u8);
                                }
                                Origin::Fellowship6Dan => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(21usize as
                                            ::core::primitive::u8);
                                }
                                Origin::Fellowship7Dan => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(22usize as
                                            ::core::primitive::u8);
                                }
                                Origin::Fellowship8Dan => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(23usize as
                                            ::core::primitive::u8);
                                }
                                Origin::Fellowship9Dan => {

                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_dest_edqy.push_byte(24usize as
                                            ::core::primitive::u8);
                                }
                                _ => (),
                            }
                        }
                    }
                    #[automatically_derived]
                    impl ::parity_scale_codec::EncodeLike for Origin { }
                };
            #[allow(deprecated)]
            const _: () =
                {
                    #[automatically_derived]
                    impl ::parity_scale_codec::Decode for Origin {
                        fn decode<__CodecInputEdqy: ::parity_scale_codec::Input>(__codec_input_edqy:
                                &mut __CodecInputEdqy)
                            ->
                                ::core::result::Result<Self, ::parity_scale_codec::Error> {
                            match __codec_input_edqy.read_byte().map_err(|e|
                                            e.chain("Could not decode `Origin`, failed to read variant byte"))?
                                {
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 0usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    { ::core::result::Result::Ok(Origin::StakingAdmin) })();
                                }
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 1usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    { ::core::result::Result::Ok(Origin::Treasurer) })();
                                }
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 2usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    { ::core::result::Result::Ok(Origin::FellowshipAdmin) })();
                                }
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 3usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    { ::core::result::Result::Ok(Origin::GeneralAdmin) })();
                                }
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 4usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    {
                                                        ::core::result::Result::Ok(Origin::ReferendumCanceller)
                                                    })();
                                }
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 5usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    { ::core::result::Result::Ok(Origin::ReferendumKiller) })();
                                }
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 6usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    { ::core::result::Result::Ok(Origin::SmallTipper) })();
                                }
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 7usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    { ::core::result::Result::Ok(Origin::BigTipper) })();
                                }
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 8usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    { ::core::result::Result::Ok(Origin::SmallSpender) })();
                                }
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 9usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    { ::core::result::Result::Ok(Origin::MediumSpender) })();
                                }
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 10usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    { ::core::result::Result::Ok(Origin::BigSpender) })();
                                }
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 11usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    {
                                                        ::core::result::Result::Ok(Origin::WhitelistedCaller)
                                                    })();
                                }
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 12usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    {
                                                        ::core::result::Result::Ok(Origin::FellowshipInitiates)
                                                    })();
                                }
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 13usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    { ::core::result::Result::Ok(Origin::Fellows) })();
                                }
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 14usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    {
                                                        ::core::result::Result::Ok(Origin::FellowshipExperts)
                                                    })();
                                }
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 15usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    {
                                                        ::core::result::Result::Ok(Origin::FellowshipMasters)
                                                    })();
                                }
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 16usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    { ::core::result::Result::Ok(Origin::Fellowship1Dan) })();
                                }
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 17usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    { ::core::result::Result::Ok(Origin::Fellowship2Dan) })();
                                }
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 18usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    { ::core::result::Result::Ok(Origin::Fellowship3Dan) })();
                                }
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 19usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    { ::core::result::Result::Ok(Origin::Fellowship4Dan) })();
                                }
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 20usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    { ::core::result::Result::Ok(Origin::Fellowship5Dan) })();
                                }
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 21usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    { ::core::result::Result::Ok(Origin::Fellowship6Dan) })();
                                }
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 22usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    { ::core::result::Result::Ok(Origin::Fellowship7Dan) })();
                                }
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 23usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    { ::core::result::Result::Ok(Origin::Fellowship8Dan) })();
                                }
                                    #[allow(clippy :: unnecessary_cast)]
                                    __codec_x_edqy if
                                    __codec_x_edqy == 24usize as ::core::primitive::u8 => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    { ::core::result::Result::Ok(Origin::Fellowship9Dan) })();
                                }
                                _ => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    {
                                                        ::core::result::Result::Err(<_ as
                                                                    ::core::convert::Into<_>>::into("Could not decode `Origin`, variant doesn't exist"))
                                                    })();
                                }
                            }
                        }
                    }
                };
            #[allow(non_upper_case_globals, unused_attributes,
            unused_qualifications)]
            const _: () =
                {
                    impl ::scale_info::TypeInfo for Origin {
                        type Identity = Self;
                        fn type_info() -> ::scale_info::Type {
                            ::scale_info::Type::builder().path(::scale_info::Path::new("Origin",
                                            "vara_runtime::governance::origins::pallet_custom_origins")).type_params(::alloc::vec::Vec::new()).variant(::scale_info::build::Variants::new().variant("StakingAdmin",
                                                                                                                                    |v|
                                                                                                                                        v.index(0usize as
                                                                                                                                                    ::core::primitive::u8).docs(&["Origin for cancelling slashes and managing election provider."])).variant("Treasurer",
                                                                                                                                |v|
                                                                                                                                    v.index(1usize as
                                                                                                                                                ::core::primitive::u8).docs(&["Origin for spending (any amount of) funds."])).variant("FellowshipAdmin",
                                                                                                                            |v|
                                                                                                                                v.index(2usize as
                                                                                                                                            ::core::primitive::u8).docs(&["Origin for managing the composition of the fellowship."])).variant("GeneralAdmin",
                                                                                                                        |v|
                                                                                                                            v.index(3usize as
                                                                                                                                        ::core::primitive::u8).docs(&["Origin for managing the registrar."])).variant("ReferendumCanceller",
                                                                                                                    |v|
                                                                                                                        v.index(4usize as
                                                                                                                                    ::core::primitive::u8).docs(&["Origin able to cancel referenda."])).variant("ReferendumKiller",
                                                                                                                |v|
                                                                                                                    v.index(5usize as
                                                                                                                                ::core::primitive::u8).docs(&["Origin able to kill referenda."])).variant("SmallTipper",
                                                                                                            |v|
                                                                                                                v.index(6usize as
                                                                                                                            ::core::primitive::u8).docs(&["Origin able to spend up to 1,000 VARA from the treasury at once."])).variant("BigTipper",
                                                                                                        |v|
                                                                                                            v.index(7usize as
                                                                                                                        ::core::primitive::u8).docs(&["Origin able to spend up to 5,000 VARA from the treasury at once."])).variant("SmallSpender",
                                                                                                    |v|
                                                                                                        v.index(8usize as
                                                                                                                    ::core::primitive::u8).docs(&["Origin able to spend up to 50,000 VARA from the treasury at once."])).variant("MediumSpender",
                                                                                                |v|
                                                                                                    v.index(9usize as
                                                                                                                ::core::primitive::u8).docs(&["Origin able to spend up to 500,000 VARA from the treasury at once."])).variant("BigSpender",
                                                                                            |v|
                                                                                                v.index(10usize as
                                                                                                            ::core::primitive::u8).docs(&["Origin able to spend up to 5,000,000 VARA from the treasury at once."])).variant("WhitelistedCaller",
                                                                                        |v|
                                                                                            v.index(11usize as
                                                                                                        ::core::primitive::u8).docs(&["Origin able to dispatch a whitelisted call."])).variant("FellowshipInitiates",
                                                                                    |v|
                                                                                        v.index(12usize as
                                                                                                    ::core::primitive::u8).docs(&["Origin commanded by any members of the Vara Fellowship (no grade needed)."])).variant("Fellows",
                                                                                |v|
                                                                                    v.index(13usize as
                                                                                                ::core::primitive::u8).docs(&["Origin commanded by Vara Fellows (1st grade or greater)."])).variant("FellowshipExperts",
                                                                            |v|
                                                                                v.index(14usize as
                                                                                            ::core::primitive::u8).docs(&["Origin commanded by Vara Experts (2nd grade or greater)."])).variant("FellowshipMasters",
                                                                        |v|
                                                                            v.index(15usize as
                                                                                        ::core::primitive::u8).docs(&["Origin commanded by Vara Masters (3rd grade of greater)."])).variant("Fellowship1Dan",
                                                                    |v|
                                                                        v.index(16usize as
                                                                                    ::core::primitive::u8).docs(&["Origin commanded by rank 1 of the Vara Fellowship and with a success of 1."])).variant("Fellowship2Dan",
                                                                |v|
                                                                    v.index(17usize as
                                                                                ::core::primitive::u8).docs(&["Origin commanded by rank 2 of the Vara Fellowship and with a success of 2."])).variant("Fellowship3Dan",
                                                            |v|
                                                                v.index(18usize as
                                                                            ::core::primitive::u8).docs(&["Origin commanded by rank 3 of the Vara Fellowship and with a success of 3."])).variant("Fellowship4Dan",
                                                        |v|
                                                            v.index(19usize as
                                                                        ::core::primitive::u8).docs(&["Origin commanded by rank 4 of the Vara Fellowship and with a success of 4."])).variant("Fellowship5Dan",
                                                    |v|
                                                        v.index(20usize as
                                                                    ::core::primitive::u8).docs(&["Origin commanded by rank 5 of the Vara Fellowship and with a success of 5."])).variant("Fellowship6Dan",
                                                |v|
                                                    v.index(21usize as
                                                                ::core::primitive::u8).docs(&["Origin commanded by rank 6 of the Vara Fellowship and with a success of 6."])).variant("Fellowship7Dan",
                                            |v|
                                                v.index(22usize as
                                                            ::core::primitive::u8).docs(&["Origin commanded by rank 7 of the Vara Fellowship and with a success of 7."])).variant("Fellowship8Dan",
                                        |v|
                                            v.index(23usize as
                                                        ::core::primitive::u8).docs(&["Origin commanded by rank 8 of the Vara Fellowship and with a success of 8."])).variant("Fellowship9Dan",
                                    |v|
                                        v.index(24usize as
                                                    ::core::primitive::u8).docs(&["Origin commanded by rank 9 of the Vara Fellowship and with a success of 9."])))
                        }
                    }
                    ;
                };
            impl core::fmt::Debug for Origin {
                fn fmt(&self, fmt: &mut core::fmt::Formatter)
                    -> core::fmt::Result {
                    match self {
                        Self::StakingAdmin =>
                            fmt.debug_tuple("Origin::StakingAdmin").finish(),
                        Self::Treasurer =>
                            fmt.debug_tuple("Origin::Treasurer").finish(),
                        Self::FellowshipAdmin =>
                            fmt.debug_tuple("Origin::FellowshipAdmin").finish(),
                        Self::GeneralAdmin =>
                            fmt.debug_tuple("Origin::GeneralAdmin").finish(),
                        Self::ReferendumCanceller =>
                            fmt.debug_tuple("Origin::ReferendumCanceller").finish(),
                        Self::ReferendumKiller =>
                            fmt.debug_tuple("Origin::ReferendumKiller").finish(),
                        Self::SmallTipper =>
                            fmt.debug_tuple("Origin::SmallTipper").finish(),
                        Self::BigTipper =>
                            fmt.debug_tuple("Origin::BigTipper").finish(),
                        Self::SmallSpender =>
                            fmt.debug_tuple("Origin::SmallSpender").finish(),
                        Self::MediumSpender =>
                            fmt.debug_tuple("Origin::MediumSpender").finish(),
                        Self::BigSpender =>
                            fmt.debug_tuple("Origin::BigSpender").finish(),
                        Self::WhitelistedCaller =>
                            fmt.debug_tuple("Origin::WhitelistedCaller").finish(),
                        Self::FellowshipInitiates =>
                            fmt.debug_tuple("Origin::FellowshipInitiates").finish(),
                        Self::Fellows =>
                            fmt.debug_tuple("Origin::Fellows").finish(),
                        Self::FellowshipExperts =>
                            fmt.debug_tuple("Origin::FellowshipExperts").finish(),
                        Self::FellowshipMasters =>
                            fmt.debug_tuple("Origin::FellowshipMasters").finish(),
                        Self::Fellowship1Dan =>
                            fmt.debug_tuple("Origin::Fellowship1Dan").finish(),
                        Self::Fellowship2Dan =>
                            fmt.debug_tuple("Origin::Fellowship2Dan").finish(),
                        Self::Fellowship3Dan =>
                            fmt.debug_tuple("Origin::Fellowship3Dan").finish(),
                        Self::Fellowship4Dan =>
                            fmt.debug_tuple("Origin::Fellowship4Dan").finish(),
                        Self::Fellowship5Dan =>
                            fmt.debug_tuple("Origin::Fellowship5Dan").finish(),
                        Self::Fellowship6Dan =>
                            fmt.debug_tuple("Origin::Fellowship6Dan").finish(),
                        Self::Fellowship7Dan =>
                            fmt.debug_tuple("Origin::Fellowship7Dan").finish(),
                        Self::Fellowship8Dan =>
                            fmt.debug_tuple("Origin::Fellowship8Dan").finish(),
                        Self::Fellowship9Dan =>
                            fmt.debug_tuple("Origin::Fellowship9Dan").finish(),
                        _ => Ok(()),
                    }
                }
            }
            macro_rules! decl_unit_ensures {
                ($name:ident: $success_type:ty = $success:expr) =>
                {
                    pub struct $name; impl<O: Into<Result<Origin, O>> +
                    From<Origin>> EnsureOrigin<O> for $name
                    {
                        type Success = $success_type; fn try_origin(o: O) ->
                        Result<Self::Success, O>
                        {
                            o.into().and_then(|o| match o
                            { Origin::$name => Ok($success), r => Err(O::from(r)), })
                        } #[cfg(feature = "runtime-benchmarks")] fn
                        try_successful_origin() -> Result<O, ()>
                        { Ok(O::from(Origin::$name)) }
                    }
                }; ($name:ident) =>
                { decl_unit_ensures! { $name : () = () } };
                ($name:ident: $success_type:ty = $success:expr, $($rest:tt)*)
                =>
                {
                    decl_unit_ensures! { $name: $success_type = $success }
                    decl_unit_ensures! { $($rest)* }
                }; ($name:ident, $($rest:tt)*) =>
                {
                    decl_unit_ensures! { $name } decl_unit_ensures!
                    { $($rest)* }
                }; () => {}
            }
            pub struct StakingAdmin;
            impl<O: Into<Result<Origin, O>> + From<Origin>> EnsureOrigin<O>
                for StakingAdmin {
                type Success = ();
                fn try_origin(o: O) -> Result<Self::Success, O> {
                    o.into().and_then(|o|
                            match o {
                                Origin::StakingAdmin => Ok(()),
                                r => Err(O::from(r)),
                            })
                }
            }
            pub struct Treasurer;
            impl<O: Into<Result<Origin, O>> + From<Origin>> EnsureOrigin<O>
                for Treasurer {
                type Success = ();
                fn try_origin(o: O) -> Result<Self::Success, O> {
                    o.into().and_then(|o|
                            match o {
                                Origin::Treasurer => Ok(()),
                                r => Err(O::from(r)),
                            })
                }
            }
            pub struct FellowshipAdmin;
            impl<O: Into<Result<Origin, O>> + From<Origin>> EnsureOrigin<O>
                for FellowshipAdmin {
                type Success = ();
                fn try_origin(o: O) -> Result<Self::Success, O> {
                    o.into().and_then(|o|
                            match o {
                                Origin::FellowshipAdmin => Ok(()),
                                r => Err(O::from(r)),
                            })
                }
            }
            pub struct GeneralAdmin;
            impl<O: Into<Result<Origin, O>> + From<Origin>> EnsureOrigin<O>
                for GeneralAdmin {
                type Success = ();
                fn try_origin(o: O) -> Result<Self::Success, O> {
                    o.into().and_then(|o|
                            match o {
                                Origin::GeneralAdmin => Ok(()),
                                r => Err(O::from(r)),
                            })
                }
            }
            pub struct ReferendumCanceller;
            impl<O: Into<Result<Origin, O>> + From<Origin>> EnsureOrigin<O>
                for ReferendumCanceller {
                type Success = ();
                fn try_origin(o: O) -> Result<Self::Success, O> {
                    o.into().and_then(|o|
                            match o {
                                Origin::ReferendumCanceller => Ok(()),
                                r => Err(O::from(r)),
                            })
                }
            }
            pub struct ReferendumKiller;
            impl<O: Into<Result<Origin, O>> + From<Origin>> EnsureOrigin<O>
                for ReferendumKiller {
                type Success = ();
                fn try_origin(o: O) -> Result<Self::Success, O> {
                    o.into().and_then(|o|
                            match o {
                                Origin::ReferendumKiller => Ok(()),
                                r => Err(O::from(r)),
                            })
                }
            }
            pub struct WhitelistedCaller;
            impl<O: Into<Result<Origin, O>> + From<Origin>> EnsureOrigin<O>
                for WhitelistedCaller {
                type Success = ();
                fn try_origin(o: O) -> Result<Self::Success, O> {
                    o.into().and_then(|o|
                            match o {
                                Origin::WhitelistedCaller => Ok(()),
                                r => Err(O::from(r)),
                            })
                }
            }
            pub struct FellowshipInitiates;
            impl<O: Into<Result<Origin, O>> + From<Origin>> EnsureOrigin<O>
                for FellowshipInitiates {
                type Success = u16;
                fn try_origin(o: O) -> Result<Self::Success, O> {
                    o.into().and_then(|o|
                            match o {
                                Origin::FellowshipInitiates => Ok(0),
                                r => Err(O::from(r)),
                            })
                }
            }
            pub struct Fellows;
            impl<O: Into<Result<Origin, O>> + From<Origin>> EnsureOrigin<O>
                for Fellows {
                type Success = u16;
                fn try_origin(o: O) -> Result<Self::Success, O> {
                    o.into().and_then(|o|
                            match o { Origin::Fellows => Ok(3), r => Err(O::from(r)), })
                }
            }
            pub struct FellowshipExperts;
            impl<O: Into<Result<Origin, O>> + From<Origin>> EnsureOrigin<O>
                for FellowshipExperts {
                type Success = u16;
                fn try_origin(o: O) -> Result<Self::Success, O> {
                    o.into().and_then(|o|
                            match o {
                                Origin::FellowshipExperts => Ok(5),
                                r => Err(O::from(r)),
                            })
                }
            }
            pub struct FellowshipMasters;
            impl<O: Into<Result<Origin, O>> + From<Origin>> EnsureOrigin<O>
                for FellowshipMasters {
                type Success = u16;
                fn try_origin(o: O) -> Result<Self::Success, O> {
                    o.into().and_then(|o|
                            match o {
                                Origin::FellowshipMasters => Ok(7),
                                r => Err(O::from(r)),
                            })
                }
            }
            macro_rules! decl_ensure {
                ($vis:vis type $name:ident: EnsureOrigin<Success =
                $success_type:ty> { $($item:ident = $success:expr,)* }) =>
                {
                    $vis struct $name; impl<O: Into<Result<Origin, O>> +
                    From<Origin>> EnsureOrigin<O> for $name
                    {
                        type Success = $success_type; fn try_origin(o: O) ->
                        Result<Self::Success, O>
                        {
                            o.into().and_then(|o| match o
                            {
                                $(Origin::$item => Ok($success),)* r => Err(O::from(r)),
                            })
                        } #[cfg(feature = "runtime-benchmarks")] fn
                        try_successful_origin() -> Result<O, ()>
                        {
                            let _result: Result<O, ()> = Err(());
                            $(let _result: Result<O, ()> = Ok(O::from(Origin::$item));)*
                            _result
                        }
                    }
                }
            }
            pub struct Spender;
            impl<O: Into<Result<Origin, O>> + From<Origin>> EnsureOrigin<O>
                for Spender {
                type Success = Balance;
                fn try_origin(o: O) -> Result<Self::Success, O> {
                    o.into().and_then(|o|
                            match o {
                                Origin::SmallTipper => Ok(1_000 * UNITS),
                                Origin::BigTipper => Ok(5_000 * UNITS),
                                Origin::SmallSpender => Ok(50_000 * UNITS),
                                Origin::MediumSpender => Ok(500_000 * UNITS),
                                Origin::BigSpender => Ok(5_000_000 * UNITS),
                                Origin::Treasurer => Ok(50_000_000 * UNITS),
                                r => Err(O::from(r)),
                            })
                }
            }
            pub struct EnsureFellowship;
            impl<O: Into<Result<Origin, O>> + From<Origin>> EnsureOrigin<O>
                for EnsureFellowship {
                type Success = u16;
                fn try_origin(o: O) -> Result<Self::Success, O> {
                    o.into().and_then(|o|
                            match o {
                                Origin::Fellowship1Dan => Ok(1),
                                Origin::Fellowship2Dan => Ok(2),
                                Origin::Fellowship3Dan => Ok(3),
                                Origin::Fellowship4Dan => Ok(4),
                                Origin::Fellowship5Dan => Ok(5),
                                Origin::Fellowship6Dan => Ok(6),
                                Origin::Fellowship7Dan => Ok(7),
                                Origin::Fellowship8Dan => Ok(8),
                                Origin::Fellowship9Dan => Ok(9),
                                r => Err(O::from(r)),
                            })
                }
            }
            impl<T: Config> Pallet<T> {
                #[doc(hidden)]
                pub fn pallet_documentation_metadata()
                    ->
                        frame_support::__private::sp_std::vec::Vec<&'static str> {
                    ::alloc::vec::Vec::new()
                }
            }
            impl<T: Config> Pallet<T> {
                #[doc(hidden)]
                pub fn pallet_constants_metadata()
                    ->
                        frame_support::__private::sp_std::vec::Vec<frame_support::__private::metadata_ir::PalletConstantMetadataIR> {
                    ::alloc::vec::Vec::new()
                }
            }
            impl<T: Config> Pallet<T> {
                #[doc(hidden)]
                pub fn error_metadata()
                    ->
                        Option<frame_support::__private::metadata_ir::PalletErrorMetadataIR> {
                    None
                }
            }
            #[doc =
            r" Type alias to `Pallet`, to be used by `construct_runtime`."]
            #[doc = r""]
            #[doc = r" Generated by `pallet` attribute macro."]
            #[deprecated(note = "use `Pallet` instead")]
            #[allow(dead_code)]
            pub type Module<T> = Pallet<T>;
            impl<T: Config> frame_support::traits::GetStorageVersion for
                Pallet<T> {
                type CurrentStorageVersion =
                    frame_support::traits::NoStorageVersionSet;
                fn current_storage_version() -> Self::CurrentStorageVersion {
                    core::default::Default::default()
                }
                fn on_chain_storage_version()
                    -> frame_support::traits::StorageVersion {
                    frame_support::traits::StorageVersion::get::<Self>()
                }
            }
            impl<T: Config> frame_support::traits::OnGenesis for Pallet<T> {
                fn on_genesis() {
                    let storage_version: frame_support::traits::StorageVersion =
                        core::default::Default::default();
                    storage_version.put::<Self>();
                }
            }
            impl<T: Config> frame_support::traits::PalletInfoAccess for
                Pallet<T> {
                fn index() -> usize {
                    <<T as frame_system::Config>::PalletInfo as
                                frame_support::traits::PalletInfo>::index::<Self>().expect("Pallet is part of the runtime because pallet `Config` trait is \
						implemented by the runtime")
                }
                fn name() -> &'static str {
                    <<T as frame_system::Config>::PalletInfo as
                                frame_support::traits::PalletInfo>::name::<Self>().expect("Pallet is part of the runtime because pallet `Config` trait is \
						implemented by the runtime")
                }
                fn module_name() -> &'static str {
                    <<T as frame_system::Config>::PalletInfo as
                                frame_support::traits::PalletInfo>::module_name::<Self>().expect("Pallet is part of the runtime because pallet `Config` trait is \
						implemented by the runtime")
                }
                fn crate_version() -> frame_support::traits::CrateVersion {
                    frame_support::traits::CrateVersion {
                        major: 1u16,
                        minor: 3u8,
                        patch: 0u8,
                    }
                }
            }
            impl<T: Config> frame_support::traits::PalletsInfoAccess for
                Pallet<T> {
                fn count() -> usize { 1 }
                fn infos()
                    ->
                        frame_support::__private::sp_std::vec::Vec<frame_support::traits::PalletInfoData> {
                    use frame_support::traits::PalletInfoAccess;
                    let item =
                        frame_support::traits::PalletInfoData {
                            index: Self::index(),
                            name: Self::name(),
                            module_name: Self::module_name(),
                            crate_version: Self::crate_version(),
                        };
                    <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([item]))
                }
            }
            impl<T: Config> frame_support::traits::StorageInfoTrait for
                Pallet<T> {
                fn storage_info()
                    ->
                        frame_support::__private::sp_std::vec::Vec<frame_support::traits::StorageInfo> {
                    #[allow(unused_mut)]
                    let mut res = ::alloc::vec::Vec::new();
                    res
                }
            }
            use frame_support::traits::{
                StorageInfoTrait, TrackedStorageKey, WhitelistedStorageKeys,
            };
            impl<T: Config> WhitelistedStorageKeys for Pallet<T> {
                fn whitelisted_storage_keys()
                    ->
                        frame_support::__private::sp_std::vec::Vec<TrackedStorageKey> {
                    use frame_support::__private::sp_std::vec;
                    ::alloc::vec::Vec::new()
                }
            }
            mod warnings {}
            #[doc(hidden)]
            pub mod __substrate_call_check {
                #[macro_export]
                #[doc(hidden)]
                macro_rules! __is_call_part_defined_0 {
                    ($pallet_name : ident) =>
                    {
                        compile_error!
                        (concat!
                        ("`", stringify! ($pallet_name),
                        "` does not have #[pallet::call] defined, perhaps you should remove `Call` from \
				construct_runtime?",))
                        ;
                    } ;
                }
                #[doc(hidden)]
                pub use __is_call_part_defined_0 as is_call_part_defined;
            }
            #[doc =
            r"Contains a variant per dispatchable extrinsic that this pallet has."]
            #[codec(encode_bound())]
            #[codec(decode_bound())]
            #[scale_info(skip_type_params(T), capture_docs = "always")]
            #[allow(non_camel_case_types)]
            pub enum Call<T: Config> {

                #[doc(hidden)]
                #[codec(skip)]
                __Ignore(frame_support::__private::sp_std::marker::PhantomData<(T,)>,
                    frame_support::Never),
            }
            const _: () =
                {
                    impl<T: Config> core::fmt::Debug for Call<T> {
                        fn fmt(&self, fmt: &mut core::fmt::Formatter)
                            -> core::fmt::Result {
                            match *self {
                                Self::__Ignore(ref _0, ref _1) => {
                                    fmt.debug_tuple("Call::__Ignore").field(&_0).field(&_1).finish()
                                }
                            }
                        }
                    }
                };
            const _: () =
                {
                    impl<T: Config> core::clone::Clone for Call<T> {
                        fn clone(&self) -> Self {
                            match self {
                                Self::__Ignore(ref _0, ref _1) =>
                                    Self::__Ignore(core::clone::Clone::clone(_0),
                                        core::clone::Clone::clone(_1)),
                            }
                        }
                    }
                };
            const _: () =
                {
                    impl<T: Config> core::cmp::Eq for Call<T> {}
                };
            const _: () =
                {
                    impl<T: Config> core::cmp::PartialEq for Call<T> {
                        fn eq(&self, other: &Self) -> bool {
                            match (self, other) {
                                (Self::__Ignore(_0, _1), Self::__Ignore(_0_other, _1_other))
                                    => true && _0 == _0_other && _1 == _1_other,
                            }
                        }
                    }
                };
            #[allow(deprecated)]
            const _: () =
                {
                    #[allow(non_camel_case_types)]
                    #[automatically_derived]
                    impl<T: Config> ::parity_scale_codec::Encode for Call<T> { }
                    #[automatically_derived]
                    impl<T: Config> ::parity_scale_codec::EncodeLike for Call<T>
                        {
                    }
                };
            #[allow(deprecated)]
            const _: () =
                {
                    #[allow(non_camel_case_types)]
                    #[automatically_derived]
                    impl<T: Config> ::parity_scale_codec::Decode for Call<T> {
                        fn decode<__CodecInputEdqy: ::parity_scale_codec::Input>(__codec_input_edqy:
                                &mut __CodecInputEdqy)
                            ->
                                ::core::result::Result<Self, ::parity_scale_codec::Error> {
                            match __codec_input_edqy.read_byte().map_err(|e|
                                            e.chain("Could not decode `Call`, failed to read variant byte"))?
                                {
                                _ => {

                                    #[allow(clippy :: redundant_closure_call)]
                                    return (move ||
                                                    {
                                                        ::core::result::Result::Err(<_ as
                                                                    ::core::convert::Into<_>>::into("Could not decode `Call`, variant doesn't exist"))
                                                    })();
                                }
                            }
                        }
                    }
                };
            #[allow(non_upper_case_globals, unused_attributes,
            unused_qualifications)]
            const _: () =
                {
                    impl<T: Config> ::scale_info::TypeInfo for Call<T> where
                        frame_support::__private::sp_std::marker::PhantomData<(T,)>: ::scale_info::TypeInfo +
                        'static, T: Config + 'static {
                        type Identity = Self;
                        fn type_info() -> ::scale_info::Type {
                            ::scale_info::Type::builder().path(::scale_info::Path::new("Call",
                                                "vara_runtime::governance::origins::pallet_custom_origins")).type_params(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([::scale_info::TypeParameter::new("T",
                                                            ::core::option::Option::None)]))).docs_always(&["Contains a variant per dispatchable extrinsic that this pallet has."]).variant(::scale_info::build::Variants::new())
                        }
                    }
                    ;
                };
            impl<T: Config> Call<T> {}
            impl<T: Config> frame_support::dispatch::GetDispatchInfo for
                Call<T> {
                fn get_dispatch_info(&self)
                    -> frame_support::dispatch::DispatchInfo {
                    match *self {
                        Self::__Ignore(_, _) => {
                            ::core::panicking::panic_fmt(format_args!("internal error: entered unreachable code: {0}",
                                    format_args!("__Ignore cannot be used")));
                        }
                    }
                }
            }
            impl<T: Config> frame_support::traits::GetCallName for Call<T> {
                fn get_call_name(&self) -> &'static str {
                    match *self {
                        Self::__Ignore(_, _) => {
                            ::core::panicking::panic_fmt(format_args!("internal error: entered unreachable code: {0}",
                                    format_args!("__PhantomItem cannot be used.")));
                        }
                    }
                }
                fn get_call_names() -> &'static [&'static str] { &[] }
            }
            impl<T: Config> frame_support::traits::GetCallIndex for Call<T> {
                fn get_call_index(&self) -> u8 {
                    match *self {
                        Self::__Ignore(_, _) => {
                            ::core::panicking::panic_fmt(format_args!("internal error: entered unreachable code: {0}",
                                    format_args!("__PhantomItem cannot be used.")));
                        }
                    }
                }
                fn get_call_indices() -> &'static [u8] { &[] }
            }
            impl<T: Config> frame_support::traits::UnfilteredDispatchable for
                Call<T> {
                type RuntimeOrigin =
                    frame_system::pallet_prelude::OriginFor<T>;
                fn dispatch_bypass_filter(self, origin: Self::RuntimeOrigin)
                    -> frame_support::dispatch::DispatchResultWithPostInfo {
                    frame_support::dispatch_context::run_in_context(||
                            {
                                match self {
                                    Self::__Ignore(_, _) => {
                                        let _ = origin;
                                        {
                                            ::core::panicking::panic_fmt(format_args!("internal error: entered unreachable code: {0}",
                                                    format_args!("__PhantomItem cannot be used.")));
                                        };
                                    }
                                }
                            })
                }
            }
            impl<T: Config> frame_support::dispatch::Callable<T> for Pallet<T>
                {
                type RuntimeCall = Call<T>;
            }
            impl<T: Config> Pallet<T> {
                #[doc(hidden)]
                pub fn call_functions()
                    ->
                        frame_support::__private::metadata_ir::PalletCallMetadataIR {
                    frame_support::__private::scale_info::meta_type::<Call<T>>().into()
                }
            }
            #[macro_export]
            #[doc(hidden)]
            macro_rules! __tt_error_token_1 {
                {
                    $caller : tt frame_support =
                    [{ $($frame_support : ident) :: * }]
                } =>
                { $($frame_support ::) * __private :: tt_return! { $caller } }
                ;
            }
            pub use __tt_error_token_1 as tt_error_token;
            #[doc(hidden)]
            pub mod __substrate_event_check {
                #[macro_export]
                #[doc(hidden)]
                macro_rules! __is_event_part_defined_2 {
                    ($pallet_name : ident) =>
                    {
                        compile_error!
                        (concat!
                        ("`", stringify! ($pallet_name),
                        "` does not have #[pallet::event] defined, perhaps you should \
							remove `Event` from construct_runtime?",))
                        ;
                    }
                }
                #[doc(hidden)]
                pub use __is_event_part_defined_2 as is_event_part_defined;
            }
            impl<T: Config> Pallet<T> {
                #[doc(hidden)]
                pub fn storage_metadata()
                    ->
                        frame_support::__private::metadata_ir::PalletStorageMetadataIR {
                    frame_support::__private::metadata_ir::PalletStorageMetadataIR {
                        prefix: <<T as frame_system::Config>::PalletInfo as
                                    frame_support::traits::PalletInfo>::name::<Pallet<T>>().expect("No name found for the pallet in the runtime! This usually means that the pallet wasn't added to `construct_runtime!`."),
                        entries: {
                            #[allow(unused_mut)]
                            let mut entries = ::alloc::vec::Vec::new();
                            entries
                        },
                    }
                }
            }
            #[doc(hidden)]
            pub mod __substrate_inherent_check {
                #[macro_export]
                #[doc(hidden)]
                macro_rules! __is_inherent_part_defined_3 {
                    ($pallet_name : ident) =>
                    {
                        compile_error!
                        (concat!
                        ("`", stringify! ($pallet_name),
                        "` does not have #[pallet::inherent] defined, perhaps you should \
				remove `Inherent` from construct_runtime?",))
                        ;
                    }
                }
                #[doc(hidden)]
                pub use __is_inherent_part_defined_3 as is_inherent_part_defined;
            }
            #[doc =
            r" Hidden instance generated to be internally used when module is used without"]
            #[doc = r" instance."]
            #[doc(hidden)]
            pub type __InherentHiddenInstance = ();
            impl<T: Config>
                frame_support::traits::Hooks<frame_system::pallet_prelude::BlockNumberFor<T>>
                for Pallet<T> {}
            impl<T: Config>
                frame_support::traits::OnFinalize<frame_system::pallet_prelude::BlockNumberFor<T>>
                for Pallet<T> {
                fn on_finalize(n:
                        frame_system::pallet_prelude::BlockNumberFor<T>) {
                    let __within_span__ =
                        {
                            use ::tracing::__macro_support::Callsite as _;
                            static __CALLSITE: ::tracing::callsite::DefaultCallsite =
                                {
                                    static META: ::tracing::Metadata<'static> =
                                        {
                                            ::tracing_core::metadata::Metadata::new("on_finalize",
                                                "vara_runtime::governance::origins::pallet_custom_origins",
                                                ::tracing::Level::TRACE,
                                                ::core::option::Option::Some("runtime/vara/src/governance/origins.rs"),
                                                ::core::option::Option::Some(23u32),
                                                ::core::option::Option::Some("vara_runtime::governance::origins::pallet_custom_origins"),
                                                ::tracing_core::field::FieldSet::new(&[],
                                                    ::tracing_core::callsite::Identifier(&__CALLSITE)),
                                                ::tracing::metadata::Kind::SPAN)
                                        };
                                    ::tracing::callsite::DefaultCallsite::new(&META)
                                };
                            let mut interest = ::tracing::subscriber::Interest::never();
                            if ::tracing::Level::TRACE <=
                                                    ::tracing::level_filters::STATIC_MAX_LEVEL &&
                                                ::tracing::Level::TRACE <=
                                                    ::tracing::level_filters::LevelFilter::current() &&
                                            { interest = __CALLSITE.interest(); !interest.is_never() }
                                        &&
                                        ::tracing::__macro_support::__is_enabled(__CALLSITE.metadata(),
                                            interest) {
                                    let meta = __CALLSITE.metadata();
                                    ::tracing::Span::new(meta,
                                        &{ meta.fields().value_set(&[]) })
                                } else {
                                   let span =
                                       ::tracing::__macro_support::__disabled_span(__CALLSITE.metadata());
                                   if match ::tracing::Level::TRACE {
                                                   ::tracing::Level::ERROR => ::tracing::log::Level::Error,
                                                   ::tracing::Level::WARN => ::tracing::log::Level::Warn,
                                                   ::tracing::Level::INFO => ::tracing::log::Level::Info,
                                                   ::tracing::Level::DEBUG => ::tracing::log::Level::Debug,
                                                   _ => ::tracing::log::Level::Trace,
                                               } <= ::tracing::log::STATIC_MAX_LEVEL {
                                           if !::tracing::dispatcher::has_been_set() {
                                                   {
                                                       span.record_all(&{
                                                                   __CALLSITE.metadata().fields().value_set(&[])
                                                               });
                                                   }
                                               } else { {} }
                                       } else { {} };
                                   span
                               }
                        };
                    let __tracing_guard__ = __within_span__.enter();
                    <Self as
                            frame_support::traits::Hooks<frame_system::pallet_prelude::BlockNumberFor<T>>>::on_finalize(n)
                }
            }
            impl<T: Config>
                frame_support::traits::OnIdle<frame_system::pallet_prelude::BlockNumberFor<T>>
                for Pallet<T> {
                fn on_idle(n: frame_system::pallet_prelude::BlockNumberFor<T>,
                    remaining_weight: frame_support::weights::Weight)
                    -> frame_support::weights::Weight {
                    <Self as
                            frame_support::traits::Hooks<frame_system::pallet_prelude::BlockNumberFor<T>>>::on_idle(n,
                        remaining_weight)
                }
            }
            impl<T: Config>
                frame_support::traits::OnInitialize<frame_system::pallet_prelude::BlockNumberFor<T>>
                for Pallet<T> {
                fn on_initialize(n:
                        frame_system::pallet_prelude::BlockNumberFor<T>)
                    -> frame_support::weights::Weight {
                    let __within_span__ =
                        {
                            use ::tracing::__macro_support::Callsite as _;
                            static __CALLSITE: ::tracing::callsite::DefaultCallsite =
                                {
                                    static META: ::tracing::Metadata<'static> =
                                        {
                                            ::tracing_core::metadata::Metadata::new("on_initialize",
                                                "vara_runtime::governance::origins::pallet_custom_origins",
                                                ::tracing::Level::TRACE,
                                                ::core::option::Option::Some("runtime/vara/src/governance/origins.rs"),
                                                ::core::option::Option::Some(23u32),
                                                ::core::option::Option::Some("vara_runtime::governance::origins::pallet_custom_origins"),
                                                ::tracing_core::field::FieldSet::new(&[],
                                                    ::tracing_core::callsite::Identifier(&__CALLSITE)),
                                                ::tracing::metadata::Kind::SPAN)
                                        };
                                    ::tracing::callsite::DefaultCallsite::new(&META)
                                };
                            let mut interest = ::tracing::subscriber::Interest::never();
                            if ::tracing::Level::TRACE <=
                                                    ::tracing::level_filters::STATIC_MAX_LEVEL &&
                                                ::tracing::Level::TRACE <=
                                                    ::tracing::level_filters::LevelFilter::current() &&
                                            { interest = __CALLSITE.interest(); !interest.is_never() }
                                        &&
                                        ::tracing::__macro_support::__is_enabled(__CALLSITE.metadata(),
                                            interest) {
                                    let meta = __CALLSITE.metadata();
                                    ::tracing::Span::new(meta,
                                        &{ meta.fields().value_set(&[]) })
                                } else {
                                   let span =
                                       ::tracing::__macro_support::__disabled_span(__CALLSITE.metadata());
                                   if match ::tracing::Level::TRACE {
                                                   ::tracing::Level::ERROR => ::tracing::log::Level::Error,
                                                   ::tracing::Level::WARN => ::tracing::log::Level::Warn,
                                                   ::tracing::Level::INFO => ::tracing::log::Level::Info,
                                                   ::tracing::Level::DEBUG => ::tracing::log::Level::Debug,
                                                   _ => ::tracing::log::Level::Trace,
                                               } <= ::tracing::log::STATIC_MAX_LEVEL {
                                           if !::tracing::dispatcher::has_been_set() {
                                                   {
                                                       span.record_all(&{
                                                                   __CALLSITE.metadata().fields().value_set(&[])
                                                               });
                                                   }
                                               } else { {} }
                                       } else { {} };
                                   span
                               }
                        };
                    let __tracing_guard__ = __within_span__.enter();
                    <Self as
                            frame_support::traits::Hooks<frame_system::pallet_prelude::BlockNumberFor<T>>>::on_initialize(n)
                }
            }
            impl<T: Config> frame_support::traits::OnRuntimeUpgrade for
                Pallet<T> {
                fn on_runtime_upgrade() -> frame_support::weights::Weight {
                    let __within_span__ =
                        {
                            use ::tracing::__macro_support::Callsite as _;
                            static __CALLSITE: ::tracing::callsite::DefaultCallsite =
                                {
                                    static META: ::tracing::Metadata<'static> =
                                        {
                                            ::tracing_core::metadata::Metadata::new("on_runtime_update",
                                                "vara_runtime::governance::origins::pallet_custom_origins",
                                                ::tracing::Level::TRACE,
                                                ::core::option::Option::Some("runtime/vara/src/governance/origins.rs"),
                                                ::core::option::Option::Some(23u32),
                                                ::core::option::Option::Some("vara_runtime::governance::origins::pallet_custom_origins"),
                                                ::tracing_core::field::FieldSet::new(&[],
                                                    ::tracing_core::callsite::Identifier(&__CALLSITE)),
                                                ::tracing::metadata::Kind::SPAN)
                                        };
                                    ::tracing::callsite::DefaultCallsite::new(&META)
                                };
                            let mut interest = ::tracing::subscriber::Interest::never();
                            if ::tracing::Level::TRACE <=
                                                    ::tracing::level_filters::STATIC_MAX_LEVEL &&
                                                ::tracing::Level::TRACE <=
                                                    ::tracing::level_filters::LevelFilter::current() &&
                                            { interest = __CALLSITE.interest(); !interest.is_never() }
                                        &&
                                        ::tracing::__macro_support::__is_enabled(__CALLSITE.metadata(),
                                            interest) {
                                    let meta = __CALLSITE.metadata();
                                    ::tracing::Span::new(meta,
                                        &{ meta.fields().value_set(&[]) })
                                } else {
                                   let span =
                                       ::tracing::__macro_support::__disabled_span(__CALLSITE.metadata());
                                   if match ::tracing::Level::TRACE {
                                                   ::tracing::Level::ERROR => ::tracing::log::Level::Error,
                                                   ::tracing::Level::WARN => ::tracing::log::Level::Warn,
                                                   ::tracing::Level::INFO => ::tracing::log::Level::Info,
                                                   ::tracing::Level::DEBUG => ::tracing::log::Level::Debug,
                                                   _ => ::tracing::log::Level::Trace,
                                               } <= ::tracing::log::STATIC_MAX_LEVEL {
                                           if !::tracing::dispatcher::has_been_set() {
                                                   {
                                                       span.record_all(&{
                                                                   __CALLSITE.metadata().fields().value_set(&[])
                                                               });
                                                   }
                                               } else { {} }
                                       } else { {} };
                                   span
                               }
                        };
                    let __tracing_guard__ = __within_span__.enter();
                    let pallet_name =
                        <<T as frame_system::Config>::PalletInfo as
                                    frame_support::traits::PalletInfo>::name::<Self>().unwrap_or("<unknown pallet name>");
                    {
                        let lvl = ::log::Level::Debug;
                        if lvl <= ::log::STATIC_MAX_LEVEL &&
                                    lvl <= ::log::max_level() {
                                ::log::__private_api::log(format_args!("✅ no migration for {0}",
                                        pallet_name), lvl,
                                    &(frame_support::LOG_TARGET,
                                            "vara_runtime::governance::origins::pallet_custom_origins",
                                            "runtime/vara/src/governance/origins.rs"), 23u32, ());
                            }
                    };
                    <Self as
                            frame_support::traits::Hooks<frame_system::pallet_prelude::BlockNumberFor<T>>>::on_runtime_upgrade()
                }
            }
            impl<T: Config>
                frame_support::traits::OffchainWorker<frame_system::pallet_prelude::BlockNumberFor<T>>
                for Pallet<T> {
                fn offchain_worker(n:
                        frame_system::pallet_prelude::BlockNumberFor<T>) {
                    <Self as
                            frame_support::traits::Hooks<frame_system::pallet_prelude::BlockNumberFor<T>>>::offchain_worker(n)
                }
            }
            impl<T: Config> frame_support::traits::IntegrityTest for Pallet<T>
                {
                fn integrity_test() {
                    frame_support::__private::sp_io::TestExternalities::default().execute_with(||
                            {
                                <Self as
                                        frame_support::traits::Hooks<frame_system::pallet_prelude::BlockNumberFor<T>>>::integrity_test()
                            });
                }
            }
            #[doc(hidden)]
            pub mod __substrate_genesis_config_check {
                #[macro_export]
                #[doc(hidden)]
                macro_rules! __is_genesis_config_defined_4 {
                    ($pallet_name : ident) =>
                    {
                        compile_error!
                        (concat!
                        ("`", stringify! ($pallet_name),
                        "` does not have #[pallet::genesis_config] defined, perhaps you should \
								remove `Config` from construct_runtime?",))
                        ;
                    }
                }
                #[macro_export]
                #[doc(hidden)]
                macro_rules! __is_std_enabled_for_genesis_4 {
                    ($pallet_name : ident, $pallet_path : expr) => {} ;
                }
                #[doc(hidden)]
                pub use __is_genesis_config_defined_4 as is_genesis_config_defined;
                #[doc(hidden)]
                pub use __is_std_enabled_for_genesis_4 as is_std_enabled_for_genesis;
            }
            #[doc(hidden)]
            pub mod __substrate_origin_check {
                #[macro_export]
                #[doc(hidden)]
                macro_rules! __is_origin_part_defined_5 {
                    ($pallet_name : ident) => {}
                }
                #[doc(hidden)]
                pub use __is_origin_part_defined_5 as is_origin_part_defined;
            }
            #[doc(hidden)]
            pub mod __substrate_validate_unsigned_check {
                #[macro_export]
                #[doc(hidden)]
                macro_rules! __is_validate_unsigned_part_defined_6 {
                    ($pallet_name : ident) =>
                    {
                        compile_error!
                        (concat!
                        ("`", stringify! ($pallet_name),
                        "` does not have #[pallet::validate_unsigned] defined, perhaps you should \
				remove `ValidateUnsigned` from construct_runtime?",))
                        ;
                    }
                }
                #[doc(hidden)]
                pub use __is_validate_unsigned_part_defined_6 as is_validate_unsigned_part_defined;
            }
            #[macro_export]
            #[doc(hidden)]
            macro_rules! __tt_default_parts_7 {
                {
                    $caller : tt frame_support =
                    [{ $($frame_support : ident) :: * }]
                } =>
                {
                    $($frame_support) * :: __private :: tt_return!
                    { $caller tokens = [{ expanded :: { Pallet, Origin, } }] }
                } ;
            }
            pub use __tt_default_parts_7 as tt_default_parts;
            #[macro_export]
            #[doc(hidden)]
            macro_rules! __tt_extra_parts_7 {
                {
                    $caller : tt frame_support =
                    [{ $($frame_support : ident) :: * }]
                } =>
                {
                    $($frame_support) * :: __private :: tt_return!
                    { $caller tokens = [{ expanded :: {} }] }
                } ;
            }
            pub use __tt_extra_parts_7 as tt_extra_parts;
        }
    }
    pub use origins::{
        pallet_custom_origins, Fellows, FellowshipAdmin, FellowshipExperts,
        FellowshipInitiates, FellowshipMasters, GeneralAdmin,
        ReferendumCanceller, ReferendumKiller, Spender, StakingAdmin,
        Treasurer, WhitelistedCaller,
    };
    mod tracks {
        //! Track configurations for governance.
        use super::*;
        const fn percent(x: i32) -> sp_runtime::FixedI64 {
            sp_runtime::FixedI64::from_rational(x as u128, 100)
        }
        use pallet_referenda::Curve;
        const APP_ROOT: Curve =
            Curve::make_reciprocal(4, 28, percent(80), percent(50),
                percent(100));
        const SUP_ROOT: Curve =
            Curve::make_linear(28, 28, percent(0), percent(50));
        const APP_STAKING_ADMIN: Curve =
            Curve::make_linear(17, 28, percent(50), percent(100));
        const SUP_STAKING_ADMIN: Curve =
            Curve::make_reciprocal(12, 28, percent(1), percent(0),
                percent(50));
        const APP_TREASURER: Curve =
            Curve::make_reciprocal(4, 28, percent(80), percent(50),
                percent(100));
        const SUP_TREASURER: Curve =
            Curve::make_linear(28, 28, percent(0), percent(50));
        const APP_FELLOWSHIP_ADMIN: Curve =
            Curve::make_linear(17, 28, percent(50), percent(100));
        const SUP_FELLOWSHIP_ADMIN: Curve =
            Curve::make_reciprocal(12, 28, percent(1), percent(0),
                percent(50));
        const APP_GENERAL_ADMIN: Curve =
            Curve::make_reciprocal(4, 28, percent(80), percent(50),
                percent(100));
        const SUP_GENERAL_ADMIN: Curve =
            Curve::make_reciprocal(7, 28, percent(10), percent(0),
                percent(50));
        const APP_REFERENDUM_CANCELLER: Curve =
            Curve::make_linear(17, 28, percent(50), percent(100));
        const SUP_REFERENDUM_CANCELLER: Curve =
            Curve::make_reciprocal(12, 28, percent(1), percent(0),
                percent(50));
        const APP_REFERENDUM_KILLER: Curve =
            Curve::make_linear(17, 28, percent(50), percent(100));
        const SUP_REFERENDUM_KILLER: Curve =
            Curve::make_reciprocal(12, 28, percent(1), percent(0),
                percent(50));
        const APP_SMALL_TIPPER: Curve =
            Curve::make_linear(10, 28, percent(50), percent(100));
        const SUP_SMALL_TIPPER: Curve =
            Curve::make_reciprocal(1, 28, percent(4), percent(0),
                percent(50));
        const APP_BIG_TIPPER: Curve =
            Curve::make_linear(10, 28, percent(50), percent(100));
        const SUP_BIG_TIPPER: Curve =
            Curve::make_reciprocal(8, 28, percent(1), percent(0),
                percent(50));
        const APP_SMALL_SPENDER: Curve =
            Curve::make_linear(17, 28, percent(50), percent(100));
        const SUP_SMALL_SPENDER: Curve =
            Curve::make_reciprocal(12, 28, percent(1), percent(0),
                percent(50));
        const APP_MEDIUM_SPENDER: Curve =
            Curve::make_linear(23, 28, percent(50), percent(100));
        const SUP_MEDIUM_SPENDER: Curve =
            Curve::make_reciprocal(16, 28, percent(1), percent(0),
                percent(50));
        const APP_BIG_SPENDER: Curve =
            Curve::make_linear(28, 28, percent(50), percent(100));
        const SUP_BIG_SPENDER: Curve =
            Curve::make_reciprocal(20, 28, percent(1), percent(0),
                percent(50));
        const APP_WHITELISTED_CALLER: Curve =
            Curve::make_reciprocal(16, 28 * 24, percent(96), percent(50),
                percent(100));
        const SUP_WHITELISTED_CALLER: Curve =
            Curve::make_reciprocal(1, 28, percent(20), percent(5),
                percent(50));
        const TRACKS_DATA:
            [(u16, pallet_referenda::TrackInfo<Balance, BlockNumber>); 13] =
            [(0,
                        pallet_referenda::TrackInfo {
                            name: "root",
                            max_deciding: 1,
                            decision_deposit: 100_000 * ECONOMIC_UNITS,
                            prepare_period: 2 * HOURS,
                            decision_period: 14 * DAYS,
                            confirm_period: 24 * HOURS,
                            min_enactment_period: 24 * HOURS,
                            min_approval: APP_ROOT,
                            min_support: SUP_ROOT,
                        }),
                    (1,
                        pallet_referenda::TrackInfo {
                            name: "whitelisted_caller",
                            max_deciding: 100,
                            decision_deposit: 10_000 * ECONOMIC_UNITS,
                            prepare_period: 30 * MINUTES,
                            decision_period: 14 * DAYS,
                            confirm_period: 10 * MINUTES,
                            min_enactment_period: 10 * MINUTES,
                            min_approval: APP_WHITELISTED_CALLER,
                            min_support: SUP_WHITELISTED_CALLER,
                        }),
                    (10,
                        pallet_referenda::TrackInfo {
                            name: "staking_admin",
                            max_deciding: 10,
                            decision_deposit: 5_000 * ECONOMIC_UNITS,
                            prepare_period: 2 * HOURS,
                            decision_period: 14 * DAYS,
                            confirm_period: 3 * HOURS,
                            min_enactment_period: 10 * MINUTES,
                            min_approval: APP_STAKING_ADMIN,
                            min_support: SUP_STAKING_ADMIN,
                        }),
                    (11,
                        pallet_referenda::TrackInfo {
                            name: "treasurer",
                            max_deciding: 10,
                            decision_deposit: 1_000 * ECONOMIC_UNITS,
                            prepare_period: 2 * HOURS,
                            decision_period: 14 * DAYS,
                            confirm_period: 3 * HOURS,
                            min_enactment_period: 24 * HOURS,
                            min_approval: APP_TREASURER,
                            min_support: SUP_TREASURER,
                        }),
                    (12,
                        pallet_referenda::TrackInfo {
                            name: "fellowship_admin",
                            max_deciding: 10,
                            decision_deposit: 5_000 * ECONOMIC_UNITS,
                            prepare_period: 2 * HOURS,
                            decision_period: 14 * DAYS,
                            confirm_period: 3 * HOURS,
                            min_enactment_period: 10 * MINUTES,
                            min_approval: APP_FELLOWSHIP_ADMIN,
                            min_support: SUP_FELLOWSHIP_ADMIN,
                        }),
                    (13,
                        pallet_referenda::TrackInfo {
                            name: "general_admin",
                            max_deciding: 10,
                            decision_deposit: 5_000 * ECONOMIC_UNITS,
                            prepare_period: 2 * HOURS,
                            decision_period: 14 * DAYS,
                            confirm_period: 3 * HOURS,
                            min_enactment_period: 10 * MINUTES,
                            min_approval: APP_GENERAL_ADMIN,
                            min_support: SUP_GENERAL_ADMIN,
                        }),
                    (20,
                        pallet_referenda::TrackInfo {
                            name: "referendum_canceller",
                            max_deciding: 1_000,
                            decision_deposit: 10_000 * ECONOMIC_UNITS,
                            prepare_period: 2 * HOURS,
                            decision_period: 7 * DAYS,
                            confirm_period: 3 * HOURS,
                            min_enactment_period: 10 * MINUTES,
                            min_approval: APP_REFERENDUM_CANCELLER,
                            min_support: SUP_REFERENDUM_CANCELLER,
                        }),
                    (21,
                        pallet_referenda::TrackInfo {
                            name: "referendum_killer",
                            max_deciding: 1_000,
                            decision_deposit: 50_000 * ECONOMIC_UNITS,
                            prepare_period: 2 * HOURS,
                            decision_period: 14 * DAYS,
                            confirm_period: 3 * HOURS,
                            min_enactment_period: 10 * MINUTES,
                            min_approval: APP_REFERENDUM_KILLER,
                            min_support: SUP_REFERENDUM_KILLER,
                        }),
                    (30,
                        pallet_referenda::TrackInfo {
                            name: "small_tipper",
                            max_deciding: 200,
                            decision_deposit: ECONOMIC_UNITS,
                            prepare_period: MINUTES,
                            decision_period: 7 * DAYS,
                            confirm_period: 10 * MINUTES,
                            min_enactment_period: MINUTES,
                            min_approval: APP_SMALL_TIPPER,
                            min_support: SUP_SMALL_TIPPER,
                        }),
                    (31,
                        pallet_referenda::TrackInfo {
                            name: "big_tipper",
                            max_deciding: 100,
                            decision_deposit: 10 * ECONOMIC_UNITS,
                            prepare_period: 10 * MINUTES,
                            decision_period: 7 * DAYS,
                            confirm_period: HOURS,
                            min_enactment_period: 10 * MINUTES,
                            min_approval: APP_BIG_TIPPER,
                            min_support: SUP_BIG_TIPPER,
                        }),
                    (32,
                        pallet_referenda::TrackInfo {
                            name: "small_spender",
                            max_deciding: 50,
                            decision_deposit: 100 * ECONOMIC_UNITS,
                            prepare_period: 4 * HOURS,
                            decision_period: 14 * DAYS,
                            confirm_period: 12 * HOURS,
                            min_enactment_period: 24 * HOURS,
                            min_approval: APP_SMALL_SPENDER,
                            min_support: SUP_SMALL_SPENDER,
                        }),
                    (33,
                        pallet_referenda::TrackInfo {
                            name: "medium_spender",
                            max_deciding: 50,
                            decision_deposit: 200 * ECONOMIC_UNITS,
                            prepare_period: 4 * HOURS,
                            decision_period: 14 * DAYS,
                            confirm_period: 24 * HOURS,
                            min_enactment_period: 24 * HOURS,
                            min_approval: APP_MEDIUM_SPENDER,
                            min_support: SUP_MEDIUM_SPENDER,
                        }),
                    (34,
                        pallet_referenda::TrackInfo {
                            name: "big_spender",
                            max_deciding: 50,
                            decision_deposit: 400 * ECONOMIC_UNITS,
                            prepare_period: 4 * HOURS,
                            decision_period: 14 * DAYS,
                            confirm_period: 48 * HOURS,
                            min_enactment_period: 24 * HOURS,
                            min_approval: APP_BIG_SPENDER,
                            min_support: SUP_BIG_SPENDER,
                        })];
        pub struct TracksInfo;
        impl pallet_referenda::TracksInfo<Balance, BlockNumber> for TracksInfo
            {
            type Id = u16;
            type RuntimeOrigin =
                <RuntimeOrigin as
                frame_support::traits::OriginTrait>::PalletsOrigin;
            fn tracks()
                ->
                    &'static [(Self::Id,
                    pallet_referenda::TrackInfo<Balance, BlockNumber>)] {
                &TRACKS_DATA[..]
            }
            fn track_for(id: &Self::RuntimeOrigin) -> Result<Self::Id, ()> {
                if let Ok(system_origin) =
                            frame_system::RawOrigin::try_from(id.clone()) {
                        match system_origin {
                            frame_system::RawOrigin::Root => Ok(0),
                            _ => Err(()),
                        }
                    } else if let Ok(custom_origin) =
                           origins::Origin::try_from(id.clone()) {
                       match custom_origin {
                           origins::Origin::WhitelistedCaller => Ok(1),
                           origins::Origin::StakingAdmin => Ok(10),
                           origins::Origin::Treasurer => Ok(11),
                           origins::Origin::FellowshipAdmin => Ok(12),
                           origins::Origin::GeneralAdmin => Ok(13),
                           origins::Origin::ReferendumCanceller => Ok(20),
                           origins::Origin::ReferendumKiller => Ok(21),
                           origins::Origin::SmallTipper => Ok(30),
                           origins::Origin::BigTipper => Ok(31),
                           origins::Origin::SmallSpender => Ok(32),
                           origins::Origin::MediumSpender => Ok(33),
                           origins::Origin::BigSpender => Ok(34),
                           _ => Err(()),
                       }
                   } else { Err(()) }
            }
        }
        impl ::pallet_referenda::Get<::pallet_referenda::Vec<(<TracksInfo as
            ::pallet_referenda::TracksInfo<Balance, BlockNumber>>::Id,
            ::pallet_referenda::TrackInfo<Balance, BlockNumber>)>> for
            TracksInfo {
            fn get()
                ->
                    ::pallet_referenda::Vec<(<TracksInfo as
                    ::pallet_referenda::TracksInfo<Balance, BlockNumber>>::Id,
                    ::pallet_referenda::TrackInfo<Balance, BlockNumber>)> {
                <TracksInfo as
                            ::pallet_referenda::TracksInfo<Balance,
                            BlockNumber>>::tracks().to_vec()
            }
        }
    }
    pub use tracks::TracksInfo;
    mod fellowship {
        //! Elements of governance concerning the Gear Fellowship - an on-chain organ
        //! that acts as an oracle to certify whether a proposal is good and can be
        //! submitted within an agile track yet being of high impact
        #![allow(clippy::identity_op)]
        use frame_support::traits::{MapSuccess, TryMapSuccess};
        use sp_arithmetic::traits::CheckedSub;
        use sp_runtime::{morph_types, traits::{ConstU16, Replace, TypedGet}};
        use super::*;
        use crate::{DAYS, ECONOMIC_UNITS};
        pub struct AlarmInterval;
        impl AlarmInterval<> {
            /// Returns the value of this parameter type.
            pub const fn get() -> BlockNumber { 1 }
        }
        impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
            AlarmInterval<> {
            fn get() -> _I { _I::from(Self::get()) }
        }
        impl ::frame_support::traits::TypedGet for AlarmInterval<> {
            type Type = BlockNumber;
            fn get() -> BlockNumber { Self::get() }
        }
        pub struct SubmissionDeposit;
        impl SubmissionDeposit<> {
            /// Returns the value of this parameter type.
            pub const fn get() -> Balance { 0 }
        }
        impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
            SubmissionDeposit<> {
            fn get() -> _I { _I::from(Self::get()) }
        }
        impl ::frame_support::traits::TypedGet for SubmissionDeposit<> {
            type Type = Balance;
            fn get() -> Balance { Self::get() }
        }
        pub struct UndecidingTimeout;
        impl UndecidingTimeout<> {
            /// Returns the value of this parameter type.
            pub const fn get() -> BlockNumber { 7 * DAYS }
        }
        impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
            UndecidingTimeout<> {
            fn get() -> _I { _I::from(Self::get()) }
        }
        impl ::frame_support::traits::TypedGet for UndecidingTimeout<> {
            type Type = BlockNumber;
            fn get() -> BlockNumber { Self::get() }
        }
        pub struct TracksInfo;
        impl pallet_referenda::TracksInfo<Balance, BlockNumber> for TracksInfo
            {
            type Id = u16;
            type RuntimeOrigin =
                <RuntimeOrigin as
                frame_support::traits::OriginTrait>::PalletsOrigin;
            fn tracks()
                ->
                    &'static [(Self::Id,
                    pallet_referenda::TrackInfo<Balance, BlockNumber>)] {
                static DATA:
                    [(u16,
                    pallet_referenda::TrackInfo<Balance, BlockNumber>); 10] =
                    [(0u16,
                                pallet_referenda::TrackInfo {
                                    name: "candidates",
                                    max_deciding: 10,
                                    decision_deposit: 100 * ECONOMIC_UNITS,
                                    prepare_period: 30 * MINUTES,
                                    decision_period: 7 * DAYS,
                                    confirm_period: 30 * MINUTES,
                                    min_enactment_period: 1 * MINUTES,
                                    min_approval: pallet_referenda::Curve::LinearDecreasing {
                                        length: Perbill::from_percent(100),
                                        floor: Perbill::from_percent(50),
                                        ceil: Perbill::from_percent(100),
                                    },
                                    min_support: pallet_referenda::Curve::LinearDecreasing {
                                        length: Perbill::from_percent(100),
                                        floor: Perbill::from_percent(0),
                                        ceil: Perbill::from_percent(50),
                                    },
                                }),
                            (1u16,
                                pallet_referenda::TrackInfo {
                                    name: "members",
                                    max_deciding: 10,
                                    decision_deposit: 10 * ECONOMIC_UNITS,
                                    prepare_period: 30 * MINUTES,
                                    decision_period: 7 * DAYS,
                                    confirm_period: 30 * MINUTES,
                                    min_enactment_period: 1 * MINUTES,
                                    min_approval: pallet_referenda::Curve::LinearDecreasing {
                                        length: Perbill::from_percent(100),
                                        floor: Perbill::from_percent(50),
                                        ceil: Perbill::from_percent(100),
                                    },
                                    min_support: pallet_referenda::Curve::LinearDecreasing {
                                        length: Perbill::from_percent(100),
                                        floor: Perbill::from_percent(0),
                                        ceil: Perbill::from_percent(50),
                                    },
                                }),
                            (2u16,
                                pallet_referenda::TrackInfo {
                                    name: "proficients",
                                    max_deciding: 10,
                                    decision_deposit: 10 * ECONOMIC_UNITS,
                                    prepare_period: 30 * MINUTES,
                                    decision_period: 7 * DAYS,
                                    confirm_period: 30 * MINUTES,
                                    min_enactment_period: 1 * MINUTES,
                                    min_approval: pallet_referenda::Curve::LinearDecreasing {
                                        length: Perbill::from_percent(100),
                                        floor: Perbill::from_percent(50),
                                        ceil: Perbill::from_percent(100),
                                    },
                                    min_support: pallet_referenda::Curve::LinearDecreasing {
                                        length: Perbill::from_percent(100),
                                        floor: Perbill::from_percent(0),
                                        ceil: Perbill::from_percent(50),
                                    },
                                }),
                            (3u16,
                                pallet_referenda::TrackInfo {
                                    name: "fellows",
                                    max_deciding: 10,
                                    decision_deposit: 10 * ECONOMIC_UNITS,
                                    prepare_period: 30 * MINUTES,
                                    decision_period: 7 * DAYS,
                                    confirm_period: 30 * MINUTES,
                                    min_enactment_period: 1 * MINUTES,
                                    min_approval: pallet_referenda::Curve::LinearDecreasing {
                                        length: Perbill::from_percent(100),
                                        floor: Perbill::from_percent(50),
                                        ceil: Perbill::from_percent(100),
                                    },
                                    min_support: pallet_referenda::Curve::LinearDecreasing {
                                        length: Perbill::from_percent(100),
                                        floor: Perbill::from_percent(0),
                                        ceil: Perbill::from_percent(50),
                                    },
                                }),
                            (4u16,
                                pallet_referenda::TrackInfo {
                                    name: "senior fellows",
                                    max_deciding: 10,
                                    decision_deposit: 10 * ECONOMIC_UNITS,
                                    prepare_period: 30 * MINUTES,
                                    decision_period: 7 * DAYS,
                                    confirm_period: 30 * MINUTES,
                                    min_enactment_period: 1 * MINUTES,
                                    min_approval: pallet_referenda::Curve::LinearDecreasing {
                                        length: Perbill::from_percent(100),
                                        floor: Perbill::from_percent(50),
                                        ceil: Perbill::from_percent(100),
                                    },
                                    min_support: pallet_referenda::Curve::LinearDecreasing {
                                        length: Perbill::from_percent(100),
                                        floor: Perbill::from_percent(0),
                                        ceil: Perbill::from_percent(50),
                                    },
                                }),
                            (5u16,
                                pallet_referenda::TrackInfo {
                                    name: "experts",
                                    max_deciding: 10,
                                    decision_deposit: 1 * ECONOMIC_UNITS,
                                    prepare_period: 30 * MINUTES,
                                    decision_period: 7 * DAYS,
                                    confirm_period: 30 * MINUTES,
                                    min_enactment_period: 1 * MINUTES,
                                    min_approval: pallet_referenda::Curve::LinearDecreasing {
                                        length: Perbill::from_percent(100),
                                        floor: Perbill::from_percent(50),
                                        ceil: Perbill::from_percent(100),
                                    },
                                    min_support: pallet_referenda::Curve::LinearDecreasing {
                                        length: Perbill::from_percent(100),
                                        floor: Perbill::from_percent(0),
                                        ceil: Perbill::from_percent(50),
                                    },
                                }),
                            (6u16,
                                pallet_referenda::TrackInfo {
                                    name: "senior experts",
                                    max_deciding: 10,
                                    decision_deposit: 1 * ECONOMIC_UNITS,
                                    prepare_period: 30 * MINUTES,
                                    decision_period: 7 * DAYS,
                                    confirm_period: 30 * MINUTES,
                                    min_enactment_period: 1 * MINUTES,
                                    min_approval: pallet_referenda::Curve::LinearDecreasing {
                                        length: Perbill::from_percent(100),
                                        floor: Perbill::from_percent(50),
                                        ceil: Perbill::from_percent(100),
                                    },
                                    min_support: pallet_referenda::Curve::LinearDecreasing {
                                        length: Perbill::from_percent(100),
                                        floor: Perbill::from_percent(0),
                                        ceil: Perbill::from_percent(50),
                                    },
                                }),
                            (7u16,
                                pallet_referenda::TrackInfo {
                                    name: "masters",
                                    max_deciding: 10,
                                    decision_deposit: 1 * ECONOMIC_UNITS,
                                    prepare_period: 30 * MINUTES,
                                    decision_period: 7 * DAYS,
                                    confirm_period: 30 * MINUTES,
                                    min_enactment_period: 1 * MINUTES,
                                    min_approval: pallet_referenda::Curve::LinearDecreasing {
                                        length: Perbill::from_percent(100),
                                        floor: Perbill::from_percent(50),
                                        ceil: Perbill::from_percent(100),
                                    },
                                    min_support: pallet_referenda::Curve::LinearDecreasing {
                                        length: Perbill::from_percent(100),
                                        floor: Perbill::from_percent(0),
                                        ceil: Perbill::from_percent(50),
                                    },
                                }),
                            (8u16,
                                pallet_referenda::TrackInfo {
                                    name: "senior masters",
                                    max_deciding: 10,
                                    decision_deposit: 1 * ECONOMIC_UNITS,
                                    prepare_period: 30 * MINUTES,
                                    decision_period: 7 * DAYS,
                                    confirm_period: 30 * MINUTES,
                                    min_enactment_period: 1 * MINUTES,
                                    min_approval: pallet_referenda::Curve::LinearDecreasing {
                                        length: Perbill::from_percent(100),
                                        floor: Perbill::from_percent(50),
                                        ceil: Perbill::from_percent(100),
                                    },
                                    min_support: pallet_referenda::Curve::LinearDecreasing {
                                        length: Perbill::from_percent(100),
                                        floor: Perbill::from_percent(0),
                                        ceil: Perbill::from_percent(50),
                                    },
                                }),
                            (9u16,
                                pallet_referenda::TrackInfo {
                                    name: "grand masters",
                                    max_deciding: 10,
                                    decision_deposit: 1 * ECONOMIC_UNITS,
                                    prepare_period: 30 * MINUTES,
                                    decision_period: 7 * DAYS,
                                    confirm_period: 30 * MINUTES,
                                    min_enactment_period: 1 * MINUTES,
                                    min_approval: pallet_referenda::Curve::LinearDecreasing {
                                        length: Perbill::from_percent(100),
                                        floor: Perbill::from_percent(50),
                                        ceil: Perbill::from_percent(100),
                                    },
                                    min_support: pallet_referenda::Curve::LinearDecreasing {
                                        length: Perbill::from_percent(100),
                                        floor: Perbill::from_percent(0),
                                        ceil: Perbill::from_percent(50),
                                    },
                                })];
                &DATA[..]
            }
            fn track_for(id: &Self::RuntimeOrigin) -> Result<Self::Id, ()> {
                use super::origins::Origin;
                match Origin::try_from(id.clone()) {
                    Ok(Origin::FellowshipInitiates) => Ok(0),
                    Ok(Origin::Fellowship1Dan) => Ok(1),
                    Ok(Origin::Fellowship2Dan) => Ok(2),
                    Ok(Origin::Fellowship3Dan) | Ok(Origin::Fellows) => Ok(3),
                    Ok(Origin::Fellowship4Dan) => Ok(4),
                    Ok(Origin::Fellowship5Dan) | Ok(Origin::FellowshipExperts)
                        => Ok(5),
                    Ok(Origin::Fellowship6Dan) => Ok(6),
                    Ok(Origin::Fellowship7Dan | Origin::FellowshipMasters) =>
                        Ok(7),
                    Ok(Origin::Fellowship8Dan) => Ok(8),
                    Ok(Origin::Fellowship9Dan) => Ok(9),
                    _ => Err(()),
                }
            }
        }
        impl ::pallet_referenda::Get<::pallet_referenda::Vec<(<TracksInfo as
            ::pallet_referenda::TracksInfo<Balance, BlockNumber>>::Id,
            ::pallet_referenda::TrackInfo<Balance, BlockNumber>)>> for
            TracksInfo {
            fn get()
                ->
                    ::pallet_referenda::Vec<(<TracksInfo as
                    ::pallet_referenda::TracksInfo<Balance, BlockNumber>>::Id,
                    ::pallet_referenda::TrackInfo<Balance, BlockNumber>)> {
                <TracksInfo as
                            ::pallet_referenda::TracksInfo<Balance,
                            BlockNumber>>::tracks().to_vec()
            }
        }
        pub type FellowshipReferendaInstance = pallet_referenda::Instance2;
        impl pallet_referenda::Config<FellowshipReferendaInstance> for Runtime
            {
            type WeightInfo =
                pallet_referenda::weights::SubstrateWeight<Self>;
            type RuntimeCall = RuntimeCall;
            type RuntimeEvent = RuntimeEvent;
            type Scheduler = Scheduler;
            type Currency = Balances;
            type SubmitOrigin =
                pallet_ranked_collective::EnsureMember<Runtime,
                FellowshipCollectiveInstance, 1>;
            type CancelOrigin = FellowshipExperts;
            type KillOrigin = FellowshipMasters;
            type Slash = Treasury;
            type Votes = pallet_ranked_collective::Votes;
            type Tally =
                pallet_ranked_collective::TallyOf<Runtime,
                FellowshipCollectiveInstance>;
            type SubmissionDeposit = SubmissionDeposit;
            type MaxQueued = ConstU32<100>;
            type UndecidingTimeout = UndecidingTimeout;
            type AlarmInterval = AlarmInterval;
            type Tracks = TracksInfo;
            type Preimages = Preimage;
        }
        pub type FellowshipCollectiveInstance =
            pallet_ranked_collective::Instance1;
        #[doc =
        r" A `TryMorph` implementation to reduce a scalar by a particular amount, checking for"]
        #[doc = r" underflow."]
        pub struct CheckedReduceBy<N>(::sp_runtime::traits::PhantomData<(N,)>);
        impl<N: TypedGet> ::sp_runtime::traits::TryMorph<N::Type> for
            CheckedReduceBy<N> where N::Type: CheckedSub {
            type Outcome = N::Type;
            fn try_morph(r: N::Type) -> Result<Self::Outcome, ()> {
                r.checked_sub(&N::get()).ok_or(())
            }
        }
        impl pallet_ranked_collective::Config<FellowshipCollectiveInstance>
            for Runtime {
            type WeightInfo =
                pallet_ranked_collective::weights::SubstrateWeight<Self>;
            type RuntimeEvent = RuntimeEvent;
            type PromoteOrigin =
                EitherOf<frame_system::EnsureRootWithSuccess<Self::AccountId,
                ConstU16<65535>>,
                EitherOf<MapSuccess<FellowshipAdmin, Replace<ConstU16<3>>>,
                TryMapSuccess<origins::EnsureFellowship,
                CheckedReduceBy<ConstU16<1>>>>>;
            type DemoteOrigin =
                EitherOf<frame_system::EnsureRootWithSuccess<Self::AccountId,
                ConstU16<65535>>,
                EitherOf<MapSuccess<FellowshipAdmin, Replace<ConstU16<3>>>,
                TryMapSuccess<origins::EnsureFellowship,
                CheckedReduceBy<ConstU16<2>>>>>;
            type Polls = FellowshipReferenda;
            type MinRankOfClass = sp_runtime::traits::Identity;
            type VoteWeight = pallet_ranked_collective::Geometric;
        }
    }
    pub use fellowship::{
        FellowshipCollectiveInstance, FellowshipReferendaInstance,
    };
    pub struct VoteLockingPeriod;
    impl VoteLockingPeriod<> {
        /// Returns the value of this parameter type.
        pub const fn get() -> BlockNumber { 7 * DAYS }
    }
    impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
        VoteLockingPeriod<> {
        fn get() -> _I { _I::from(Self::get()) }
    }
    impl ::frame_support::traits::TypedGet for VoteLockingPeriod<> {
        type Type = BlockNumber;
        fn get() -> BlockNumber { Self::get() }
    }
    impl pallet_conviction_voting::Config for Runtime {
        type WeightInfo =
            pallet_conviction_voting::weights::SubstrateWeight<Self>;
        type RuntimeEvent = RuntimeEvent;
        type Currency = Balances;
        type VoteLockingPeriod = VoteLockingPeriod;
        type MaxVotes = ConstU32<512>;
        type MaxTurnout =
            frame_support::traits::tokens::currency::ActiveIssuanceOf<Balances,
            Self::AccountId>;
        type Polls = Referenda;
    }
    pub struct AlarmInterval;
    impl AlarmInterval<> {
        /// Returns the value of this parameter type.
        pub const fn get() -> BlockNumber { 1 }
    }
    impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
        AlarmInterval<> {
        fn get() -> _I { _I::from(Self::get()) }
    }
    impl ::frame_support::traits::TypedGet for AlarmInterval<> {
        type Type = BlockNumber;
        fn get() -> BlockNumber { Self::get() }
    }
    pub struct SubmissionDeposit;
    impl SubmissionDeposit<> {
        /// Returns the value of this parameter type.
        pub const fn get() -> Balance { 10 * ECONOMIC_UNITS }
    }
    impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
        SubmissionDeposit<> {
        fn get() -> _I { _I::from(Self::get()) }
    }
    impl ::frame_support::traits::TypedGet for SubmissionDeposit<> {
        type Type = Balance;
        fn get() -> Balance { Self::get() }
    }
    pub struct UndecidingTimeout;
    impl UndecidingTimeout<> {
        /// Returns the value of this parameter type.
        pub const fn get() -> BlockNumber { 14 * DAYS }
    }
    impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
        UndecidingTimeout<> {
        fn get() -> _I { _I::from(Self::get()) }
    }
    impl ::frame_support::traits::TypedGet for UndecidingTimeout<> {
        type Type = BlockNumber;
        fn get() -> BlockNumber { Self::get() }
    }
    pub struct MaxBalance;
    impl MaxBalance<> {
        /// Returns the value of this parameter type.
        pub const fn get() -> Balance { Balance::max_value() }
    }
    impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for MaxBalance<>
        {
        fn get() -> _I { _I::from(Self::get()) }
    }
    impl ::frame_support::traits::TypedGet for MaxBalance<> {
        type Type = Balance;
        fn get() -> Balance { Self::get() }
    }
    pub type TreasurySpender =
        EitherOf<EnsureRootWithSuccess<AccountId, MaxBalance>, Spender>;
    impl pallet_custom_origins::Config for Runtime {}
    impl pallet_whitelist::Config for Runtime {
        type RuntimeEvent = RuntimeEvent;
        type RuntimeCall = RuntimeCall;
        type WhitelistOrigin =
            EitherOf<EnsureRootWithSuccess<Self::AccountId, ConstU16<65535>>,
            Fellows>;
        type DispatchWhitelistedOrigin =
            EitherOf<EnsureRoot<Self::AccountId>, WhitelistedCaller>;
        type Preimages = Preimage;
        type WeightInfo = pallet_whitelist::weights::SubstrateWeight<Runtime>;
    }
    impl pallet_referenda::Config for Runtime {
        type WeightInfo = pallet_referenda::weights::SubstrateWeight<Self>;
        type RuntimeCall = RuntimeCall;
        type RuntimeEvent = RuntimeEvent;
        type Scheduler = Scheduler;
        type Currency = Balances;
        type SubmitOrigin = frame_system::EnsureSigned<AccountId>;
        type CancelOrigin = ReferendumCanceller;
        type KillOrigin = ReferendumKiller;
        type Slash = Treasury;
        type Votes = pallet_conviction_voting::VotesOf<Runtime>;
        type Tally = pallet_conviction_voting::TallyOf<Runtime>;
        type SubmissionDeposit = SubmissionDeposit;
        type MaxQueued = ConstU32<100>;
        type UndecidingTimeout = UndecidingTimeout;
        type AlarmInterval = AlarmInterval;
        type Tracks = TracksInfo;
        type Preimages = Preimage;
    }
}
use governance::{
    pallet_custom_origins, GeneralAdmin, StakingAdmin, Treasurer,
    TreasurySpender,
};
mod migrations {
    use crate::*;
    /// All migrations that will run on the next runtime upgrade.
    pub type Migrations =
        (pallet_gear_program::migration::AppendStackEndMigration<Runtime>,
        pallet_gear::migrations::MigrateWaitingInitList<Runtime>);
}
static _DEV_RUNTIME: u8 = 0;
pub const VERSION: RuntimeVersion =
    RuntimeVersion {
        spec_name: { ::sp_runtime::RuntimeString::Borrowed("vara") },
        impl_name: { ::sp_runtime::RuntimeString::Borrowed("vara") },
        authoring_version: 1,
        spec_version: 1300,
        impl_version: 1,
        apis: RUNTIME_API_VERSIONS,
        transaction_version: 1,
        state_version: 1,
    };
const _: () = {};
/// The BABE epoch configuration at genesis.
pub const BABE_GENESIS_EPOCH_CONFIG: sp_consensus_babe::BabeEpochConfiguration
    =
    sp_consensus_babe::BabeEpochConfiguration {
        c: PRIMARY_PROBABILITY,
        allowed_slots: sp_consensus_babe::AllowedSlots::PrimaryAndSecondaryPlainSlots,
    };
const _: () =
    if !WEIGHT_REF_TIME_PER_SECOND.checked_div(3).is_some() {
            ::core::panicking::panic("assertion failed: WEIGHT_REF_TIME_PER_SECOND.checked_div(3).is_some()")
        };
const _: () =
    if !(WEIGHT_REF_TIME_PER_SECOND / 3).checked_mul(2).is_some() {
            ::core::panicking::panic("assertion failed: (WEIGHT_REF_TIME_PER_SECOND / 3).checked_mul(2).is_some()")
        };
/// We allow for 1/3 of block time for computations, with maximum proof size.
///
/// It's 3/3 sec for vara runtime with 3 second block duration.
const MAXIMUM_BLOCK_WEIGHT: Weight =
    Weight::from_parts(WEIGHT_REF_TIME_PER_MILLIS * MILLISECS_PER_BLOCK / 3,
        u64::MAX);
/// The version information used to identify this runtime when compiled natively.
#[cfg(feature = "std")]
pub fn native_version() -> NativeVersion {
    NativeVersion {
        runtime_version: VERSION,
        can_author_with: Default::default(),
    }
}
pub struct Version;
impl Version<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> RuntimeVersion { VERSION }
}
impl<_I: From<RuntimeVersion>> ::frame_support::traits::Get<_I> for Version<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for Version<> {
    type Type = RuntimeVersion;
    fn get() -> RuntimeVersion { Self::get() }
}
pub struct SS58Prefix;
impl SS58Prefix<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u8 { VARA_SS58_PREFIX }
}
impl<_I: From<u8>> ::frame_support::traits::Get<_I> for SS58Prefix<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for SS58Prefix<> {
    type Type = u8;
    fn get() -> u8 { Self::get() }
}
pub struct RuntimeBlockWeights;
impl RuntimeBlockWeights<> {
    /// Returns the value of this parameter type.
    pub fn get() -> BlockWeights {
        runtime_common::block_weights_for(MAXIMUM_BLOCK_WEIGHT)
    }
}
impl<_I: From<BlockWeights>> ::frame_support::traits::Get<_I> for
    RuntimeBlockWeights<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for RuntimeBlockWeights<> {
    type Type = BlockWeights;
    fn get() -> BlockWeights { Self::get() }
}
pub struct RuntimeBlockLength;
impl RuntimeBlockLength<> {
    /// Returns the value of this parameter type.
    pub fn get() -> BlockLength {
        BlockLength::max_with_normal_ratio(5 * 1024 * 1024,
            NORMAL_DISPATCH_RATIO)
    }
}
impl<_I: From<BlockLength>> ::frame_support::traits::Get<_I> for
    RuntimeBlockLength<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for RuntimeBlockLength<> {
    type Type = BlockLength;
    fn get() -> BlockLength { Self::get() }
}
impl frame_system::Config for Runtime {
    /// The basic call filter to use in dispatchable.
    type BaseCallFilter = Everything;
    /// Block & extrinsics weights: base values and limits.
    type BlockWeights = RuntimeBlockWeights;
    /// The maximum length of a block (in bytes).
    type BlockLength = RuntimeBlockLength;
    /// The identifier used to distinguish between accounts.
    type AccountId = AccountId;
    /// The aggregated dispatch type that is available for extrinsics.
    type RuntimeCall = RuntimeCall;
    /// The lookup mechanism to get account ID from whatever is passed in dispatchers.
    type Lookup = AccountIdLookup<AccountId, ()>;
    /// The nonce type for storing how many extrinsics an account has signed.
    type Nonce = Nonce;
    /// The type for hashing blocks and tries.
    type Hash = Hash;
    /// The hashing algorithm used.
    type Hashing = BlakeTwo256;
    /// The block type.
    type Block = Block;
    /// The ubiquitous event type.
    type RuntimeEvent = RuntimeEvent;
    /// The ubiquitous origin type.
    type RuntimeOrigin = RuntimeOrigin;
    /// Maximum number of block number to block hash mappings to keep (oldest pruned first).
    type BlockHashCount = BlockHashCount;
    /// The weight of database operations that the runtime can invoke.
    type DbWeight = RocksDbWeight;
    /// Version of the runtime.
    type Version = Version;
    /// Converts a module to the index of the module in `construct_runtime!`.
    ///
    /// This type is being generated by `construct_runtime!`.
    type PalletInfo = PalletInfo;
    /// What to do if a new account is created.
    type OnNewAccount = ();
    /// What to do if an account is fully reaped from the system.
    type OnKilledAccount = ();
    /// The data to be stored in an account.
    type AccountData = pallet_balances::AccountData<Balance>;
    /// Weight information for the extrinsics of this pallet.
    type SystemWeightInfo = weights::frame_system::SubstrateWeight<Runtime>;
    /// This is used as an identifier of the chain. 42 is the generic substrate prefix.
    type SS58Prefix = SS58Prefix;
    /// The set code logic, just the default since we're not a parachain.
    type OnSetCode = ();
    type MaxConsumers = ConstU32<16>;
}
pub struct EpochDuration;
impl EpochDuration<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u64 { EPOCH_DURATION_IN_SLOTS }
}
impl<_I: From<u64>> ::frame_support::traits::Get<_I> for EpochDuration<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for EpochDuration<> {
    type Type = u64;
    fn get() -> u64 { Self::get() }
}
pub struct ExpectedBlockTime;
impl ExpectedBlockTime<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Moment { MILLISECS_PER_BLOCK }
}
impl<_I: From<Moment>> ::frame_support::traits::Get<_I> for
    ExpectedBlockTime<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ExpectedBlockTime<> {
    type Type = Moment;
    fn get() -> Moment { Self::get() }
}
pub struct ReportLongevity;
impl ReportLongevity<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u64 {
        BondingDuration::get() as u64 * SessionsPerEra::get() as u64 *
            EpochDuration::get()
    }
}
impl<_I: From<u64>> ::frame_support::traits::Get<_I> for ReportLongevity<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ReportLongevity<> {
    type Type = u64;
    fn get() -> u64 { Self::get() }
}
pub struct MaxSetIdSessionEntries;
impl MaxSetIdSessionEntries<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 {
        BondingDuration::get() * SessionsPerEra::get()
    }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for
    MaxSetIdSessionEntries<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxSetIdSessionEntries<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
impl pallet_babe::Config for Runtime {
    type EpochDuration = EpochDuration;
    type ExpectedBlockTime = ExpectedBlockTime;
    type EpochChangeTrigger = pallet_babe::ExternalTrigger;
    type DisabledValidators = Session;
    type WeightInfo = ();
    type MaxAuthorities = MaxAuthorities;
    type MaxNominators = MaxNominatorRewardedPerValidator;
    type KeyOwnerProof = sp_session::MembershipProof;
    type EquivocationReportSystem =
        pallet_babe::EquivocationReportSystem<Self, Offences, Historical,
        ReportLongevity>;
}
impl pallet_grandpa::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type WeightInfo = ();
    type MaxAuthorities = MaxAuthorities;
    type MaxNominators = MaxNominatorRewardedPerValidator;
    type MaxSetIdSessionEntries = MaxSetIdSessionEntries;
    type KeyOwnerProof = sp_session::MembershipProof;
    type EquivocationReportSystem =
        pallet_grandpa::EquivocationReportSystem<Self, Offences, Historical,
        ReportLongevity>;
}
impl pallet_authorship::Config for Runtime {
    type FindAuthor = pallet_session::FindAccountFromAuthorIndex<Self, Babe>;
    type EventHandler = (Staking, ImOnline);
}
pub struct MinimumPeriod;
impl MinimumPeriod<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Moment { SLOT_DURATION / 2 }
}
impl<_I: From<Moment>> ::frame_support::traits::Get<_I> for MinimumPeriod<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MinimumPeriod<> {
    type Type = Moment;
    fn get() -> Moment { Self::get() }
}
impl pallet_timestamp::Config for Runtime {
    /// A timestamp: milliseconds since the unix epoch.
    type Moment = Moment;
    type OnTimestampSet = Babe;
    type MinimumPeriod = MinimumPeriod;
    type WeightInfo = weights::pallet_timestamp::SubstrateWeight<Runtime>;
}
pub struct MaximumSchedulerWeight;
impl MaximumSchedulerWeight<> {
    /// Returns the value of this parameter type.
    pub fn get() -> Weight {
        Perbill::from_percent(80) * RuntimeBlockWeights::get().max_block
    }
}
impl<_I: From<Weight>> ::frame_support::traits::Get<_I> for
    MaximumSchedulerWeight<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaximumSchedulerWeight<> {
    type Type = Weight;
    fn get() -> Weight { Self::get() }
}
pub struct NoPreimagePostponement;
impl NoPreimagePostponement<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Option<u32> { Some(30) }
}
impl<_I: From<Option<u32>>> ::frame_support::traits::Get<_I> for
    NoPreimagePostponement<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for NoPreimagePostponement<> {
    type Type = Option<u32>;
    fn get() -> Option<u32> { Self::get() }
}
impl pallet_scheduler::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type RuntimeOrigin = RuntimeOrigin;
    type PalletsOrigin = OriginCaller;
    type RuntimeCall = RuntimeCall;
    type MaximumWeight = MaximumSchedulerWeight;
    type ScheduleOrigin = EnsureRoot<AccountId>;
    type MaxScheduledPerBlock = ConstU32<512>;
    type WeightInfo = pallet_scheduler::weights::SubstrateWeight<Runtime>;
    type OriginPrivilegeCmp = EqualPrivilegeOnly;
    type Preimages = Preimage;
}
pub struct PreimageMaxSize;
impl PreimageMaxSize<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 4096 * 1024 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for PreimageMaxSize<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for PreimageMaxSize<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct PreimageBaseDeposit;
impl PreimageBaseDeposit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { ECONOMIC_UNITS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    PreimageBaseDeposit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for PreimageBaseDeposit<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct PreimageByteDeposit;
impl PreimageByteDeposit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { ECONOMIC_CENTIUNITS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    PreimageByteDeposit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for PreimageByteDeposit<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
impl pallet_preimage::Config for Runtime {
    type WeightInfo = pallet_preimage::weights::SubstrateWeight<Runtime>;
    type RuntimeEvent = RuntimeEvent;
    type Currency = Balances;
    type ManagerOrigin = EnsureRoot<AccountId>;
    type BaseDeposit = PreimageBaseDeposit;
    type ByteDeposit = PreimageByteDeposit;
}
pub struct MaxLocks;
impl MaxLocks<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 50 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxLocks<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxLocks<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxReserves;
impl MaxReserves<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 50 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxReserves<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxReserves<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
impl pallet_balances::Config for Runtime {
    type MaxLocks = MaxLocks;
    type MaxReserves = MaxReserves;
    type ReserveIdentifier = [u8; 8];
    type Balance = Balance;
    type RuntimeEvent = RuntimeEvent;
    type DustRemoval = pallet_gear_staking_rewards::OffsetPoolDust<Self>;
    type ExistentialDeposit = ConstU128<EXISTENTIAL_DEPOSIT>;
    type AccountStore = System;
    type WeightInfo = ();
    type FreezeIdentifier = ();
    type MaxFreezes = ();
    type RuntimeHoldReason = RuntimeHoldReason;
    type MaxHolds = ConstU32<2>;
}
pub struct TransactionByteFee;
impl TransactionByteFee<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 1 }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    TransactionByteFee<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for TransactionByteFee<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct QueueLengthStep;
impl QueueLengthStep<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u128 { 1000 }
}
impl<_I: From<u128>> ::frame_support::traits::Get<_I> for QueueLengthStep<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for QueueLengthStep<> {
    type Type = u128;
    fn get() -> u128 { Self::get() }
}
pub struct OperationalFeeMultiplier;
impl OperationalFeeMultiplier<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u8 { 5 }
}
impl<_I: From<u8>> ::frame_support::traits::Get<_I> for
    OperationalFeeMultiplier<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for OperationalFeeMultiplier<> {
    type Type = u8;
    fn get() -> u8 { Self::get() }
}
impl pallet_transaction_payment::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type OnChargeTransaction =
        CurrencyAdapter<Balances, DealWithFees<Runtime>>;
    type OperationalFeeMultiplier = OperationalFeeMultiplier;
    type WeightToFee = ConstantMultiplier<u128, ConstU128<VALUE_PER_GAS>>;
    type LengthToFee = ConstantMultiplier<u128, ConstU128<VALUE_PER_GAS>>;
    type FeeMultiplierUpdate =
        pallet_gear_payment::GearFeeMultiplier<Runtime, QueueLengthStep>;
}
use ::sp_runtime::serde as __opaque_keys_serde_import__SessionKeys;
#[serde(crate = "__opaque_keys_serde_import__SessionKeys")]
pub struct SessionKeys {
    pub babe: <Babe as ::sp_runtime::BoundToRuntimeAppPublic>::Public,
    pub grandpa: <Grandpa as ::sp_runtime::BoundToRuntimeAppPublic>::Public,
    pub im_online: <ImOnline as
    ::sp_runtime::BoundToRuntimeAppPublic>::Public,
    pub authority_discovery: <AuthorityDiscovery as
    ::sp_runtime::BoundToRuntimeAppPublic>::Public,
}
#[automatically_derived]
impl ::core::clone::Clone for SessionKeys {
    #[inline]
    fn clone(&self) -> SessionKeys {
        SessionKeys {
            babe: ::core::clone::Clone::clone(&self.babe),
            grandpa: ::core::clone::Clone::clone(&self.grandpa),
            im_online: ::core::clone::Clone::clone(&self.im_online),
            authority_discovery: ::core::clone::Clone::clone(&self.authority_discovery),
        }
    }
}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for SessionKeys { }
#[automatically_derived]
impl ::core::cmp::PartialEq for SessionKeys {
    #[inline]
    fn eq(&self, other: &SessionKeys) -> bool {
        self.babe == other.babe && self.grandpa == other.grandpa &&
                self.im_online == other.im_online &&
            self.authority_discovery == other.authority_discovery
    }
}
#[automatically_derived]
impl ::core::marker::StructuralEq for SessionKeys { }
#[automatically_derived]
impl ::core::cmp::Eq for SessionKeys {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {
        let _:
                ::core::cmp::AssertParamIsEq<<Babe as
                ::sp_runtime::BoundToRuntimeAppPublic>::Public>;
        let _:
                ::core::cmp::AssertParamIsEq<<Grandpa as
                ::sp_runtime::BoundToRuntimeAppPublic>::Public>;
        let _:
                ::core::cmp::AssertParamIsEq<<ImOnline as
                ::sp_runtime::BoundToRuntimeAppPublic>::Public>;
        let _:
                ::core::cmp::AssertParamIsEq<<AuthorityDiscovery as
                ::sp_runtime::BoundToRuntimeAppPublic>::Public>;
    }
}
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::parity_scale_codec::Encode for SessionKeys {
            fn size_hint(&self) -> usize {
                0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(&self.babe)).saturating_add(::parity_scale_codec::Encode::size_hint(&self.grandpa)).saturating_add(::parity_scale_codec::Encode::size_hint(&self.im_online)).saturating_add(::parity_scale_codec::Encode::size_hint(&self.authority_discovery))
            }
            fn encode_to<__CodecOutputEdqy: ::parity_scale_codec::Output +
                ?::core::marker::Sized>(&self,
                __codec_dest_edqy: &mut __CodecOutputEdqy) {
                ::parity_scale_codec::Encode::encode_to(&self.babe,
                    __codec_dest_edqy);
                ::parity_scale_codec::Encode::encode_to(&self.grandpa,
                    __codec_dest_edqy);
                ::parity_scale_codec::Encode::encode_to(&self.im_online,
                    __codec_dest_edqy);
                ::parity_scale_codec::Encode::encode_to(&self.authority_discovery,
                    __codec_dest_edqy);
            }
        }
        #[automatically_derived]
        impl ::parity_scale_codec::EncodeLike for SessionKeys { }
    };
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::parity_scale_codec::Decode for SessionKeys {
            fn decode<__CodecInputEdqy: ::parity_scale_codec::Input>(__codec_input_edqy:
                    &mut __CodecInputEdqy)
                -> ::core::result::Result<Self, ::parity_scale_codec::Error> {
                ::core::result::Result::Ok(SessionKeys {
                        babe: {
                            let __codec_res_edqy =
                                <<Babe as ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                                        ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                            match __codec_res_edqy {
                                ::core::result::Result::Err(e) =>
                                    return ::core::result::Result::Err(e.chain("Could not decode `SessionKeys::babe`")),
                                ::core::result::Result::Ok(__codec_res_edqy) =>
                                    __codec_res_edqy,
                            }
                        },
                        grandpa: {
                            let __codec_res_edqy =
                                <<Grandpa as ::sp_runtime::BoundToRuntimeAppPublic>::Public
                                        as
                                        ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                            match __codec_res_edqy {
                                ::core::result::Result::Err(e) =>
                                    return ::core::result::Result::Err(e.chain("Could not decode `SessionKeys::grandpa`")),
                                ::core::result::Result::Ok(__codec_res_edqy) =>
                                    __codec_res_edqy,
                            }
                        },
                        im_online: {
                            let __codec_res_edqy =
                                <<ImOnline as ::sp_runtime::BoundToRuntimeAppPublic>::Public
                                        as
                                        ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                            match __codec_res_edqy {
                                ::core::result::Result::Err(e) =>
                                    return ::core::result::Result::Err(e.chain("Could not decode `SessionKeys::im_online`")),
                                ::core::result::Result::Ok(__codec_res_edqy) =>
                                    __codec_res_edqy,
                            }
                        },
                        authority_discovery: {
                            let __codec_res_edqy =
                                <<AuthorityDiscovery as
                                        ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                                        ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                            match __codec_res_edqy {
                                ::core::result::Result::Err(e) =>
                                    return ::core::result::Result::Err(e.chain("Could not decode `SessionKeys::authority_discovery`")),
                                ::core::result::Result::Ok(__codec_res_edqy) =>
                                    __codec_res_edqy,
                            }
                        },
                    })
            }
        }
    };
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        impl ::scale_info::TypeInfo for SessionKeys {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder().path(::scale_info::Path::new("SessionKeys",
                                "vara_runtime")).type_params(::alloc::vec::Vec::new()).composite(::scale_info::build::Fields::named().field(|f|
                                        f.ty::<<Babe as
                                                    ::sp_runtime::BoundToRuntimeAppPublic>::Public>().name("babe").type_name("<Babe as $crate::BoundToRuntimeAppPublic>::Public")).field(|f|
                                    f.ty::<<Grandpa as
                                                ::sp_runtime::BoundToRuntimeAppPublic>::Public>().name("grandpa").type_name("<Grandpa as $crate::BoundToRuntimeAppPublic>::Public")).field(|f|
                                f.ty::<<ImOnline as
                                            ::sp_runtime::BoundToRuntimeAppPublic>::Public>().name("im_online").type_name("<ImOnline as $crate::BoundToRuntimeAppPublic>::Public")).field(|f|
                            f.ty::<<AuthorityDiscovery as
                                        ::sp_runtime::BoundToRuntimeAppPublic>::Public>().name("authority_discovery").type_name("<AuthorityDiscovery as $crate::BoundToRuntimeAppPublic>::Public")))
            }
        }
        ;
    };
impl core::fmt::Debug for SessionKeys {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        fmt.debug_struct("SessionKeys").field("babe",
                            &self.babe).field("grandpa",
                        &self.grandpa).field("im_online",
                    &self.im_online).field("authority_discovery",
                &self.authority_discovery).finish()
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        use __opaque_keys_serde_import__SessionKeys as _serde;
        #[automatically_derived]
        impl __opaque_keys_serde_import__SessionKeys::Serialize for
            SessionKeys {
            fn serialize<__S>(&self, __serializer: __S)
                ->
                    __opaque_keys_serde_import__SessionKeys::__private::Result<__S::Ok,
                    __S::Error> where
                __S: __opaque_keys_serde_import__SessionKeys::Serializer {
                let mut __serde_state =
                    _serde::Serializer::serialize_struct(__serializer,
                            "SessionKeys", false as usize + 1 + 1 + 1 + 1)?;
                _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "babe", &self.babe)?;
                _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "grandpa", &self.grandpa)?;
                _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "im_online", &self.im_online)?;
                _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "authority_discovery", &self.authority_discovery)?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        use __opaque_keys_serde_import__SessionKeys as _serde;
        #[automatically_derived]
        impl<'de> __opaque_keys_serde_import__SessionKeys::Deserialize<'de>
            for SessionKeys {
            fn deserialize<__D>(__deserializer: __D)
                ->
                    __opaque_keys_serde_import__SessionKeys::__private::Result<Self,
                    __D::Error> where
                __D: __opaque_keys_serde_import__SessionKeys::Deserializer<'de> {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(&self,
                        __formatter: &mut _serde::__private::Formatter)
                        -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(__formatter,
                            "field identifier")
                    }
                    fn visit_u64<__E>(self, __value: u64)
                        -> _serde::__private::Result<Self::Value, __E> where
                        __E: _serde::de::Error {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(self, __value: &str)
                        -> _serde::__private::Result<Self::Value, __E> where
                        __E: _serde::de::Error {
                        match __value {
                            "babe" => _serde::__private::Ok(__Field::__field0),
                            "grandpa" => _serde::__private::Ok(__Field::__field1),
                            "im_online" => _serde::__private::Ok(__Field::__field2),
                            "authority_discovery" =>
                                _serde::__private::Ok(__Field::__field3),
                            _ => { _serde::__private::Ok(__Field::__ignore) }
                        }
                    }
                    fn visit_bytes<__E>(self, __value: &[u8])
                        -> _serde::__private::Result<Self::Value, __E> where
                        __E: _serde::de::Error {
                        match __value {
                            b"babe" => _serde::__private::Ok(__Field::__field0),
                            b"grandpa" => _serde::__private::Ok(__Field::__field1),
                            b"im_online" => _serde::__private::Ok(__Field::__field2),
                            b"authority_discovery" =>
                                _serde::__private::Ok(__Field::__field3),
                            _ => { _serde::__private::Ok(__Field::__ignore) }
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(__deserializer: __D)
                        -> _serde::__private::Result<Self, __D::Error> where
                        __D: _serde::Deserializer<'de> {
                        _serde::Deserializer::deserialize_identifier(__deserializer,
                            __FieldVisitor)
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<SessionKeys>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = SessionKeys;
                    fn expecting(&self,
                        __formatter: &mut _serde::__private::Formatter)
                        -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(__formatter,
                            "struct SessionKeys")
                    }
                    #[inline]
                    fn visit_seq<__A>(self, mut __seq: __A)
                        -> _serde::__private::Result<Self::Value, __A::Error> where
                        __A: _serde::de::SeqAccess<'de> {
                        let __field0 =
                            match _serde::de::SeqAccess::next_element::<<Babe as
                                            ::sp_runtime::BoundToRuntimeAppPublic>::Public>(&mut __seq)?
                                {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None =>
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(0usize,
                                                &"struct SessionKeys with 4 elements")),
                            };
                        let __field1 =
                            match _serde::de::SeqAccess::next_element::<<Grandpa as
                                            ::sp_runtime::BoundToRuntimeAppPublic>::Public>(&mut __seq)?
                                {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None =>
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(1usize,
                                                &"struct SessionKeys with 4 elements")),
                            };
                        let __field2 =
                            match _serde::de::SeqAccess::next_element::<<ImOnline as
                                            ::sp_runtime::BoundToRuntimeAppPublic>::Public>(&mut __seq)?
                                {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None =>
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(2usize,
                                                &"struct SessionKeys with 4 elements")),
                            };
                        let __field3 =
                            match _serde::de::SeqAccess::next_element::<<AuthorityDiscovery
                                            as
                                            ::sp_runtime::BoundToRuntimeAppPublic>::Public>(&mut __seq)?
                                {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None =>
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(3usize,
                                                &"struct SessionKeys with 4 elements")),
                            };
                        _serde::__private::Ok(SessionKeys {
                                babe: __field0,
                                grandpa: __field1,
                                im_online: __field2,
                                authority_discovery: __field3,
                            })
                    }
                    #[inline]
                    fn visit_map<__A>(self, mut __map: __A)
                        -> _serde::__private::Result<Self::Value, __A::Error> where
                        __A: _serde::de::MapAccess<'de> {
                        let mut __field0:
                                _serde::__private::Option<<Babe as
                                ::sp_runtime::BoundToRuntimeAppPublic>::Public> =
                            _serde::__private::None;
                        let mut __field1:
                                _serde::__private::Option<<Grandpa as
                                ::sp_runtime::BoundToRuntimeAppPublic>::Public> =
                            _serde::__private::None;
                        let mut __field2:
                                _serde::__private::Option<<ImOnline as
                                ::sp_runtime::BoundToRuntimeAppPublic>::Public> =
                            _serde::__private::None;
                        let mut __field3:
                                _serde::__private::Option<<AuthorityDiscovery as
                                ::sp_runtime::BoundToRuntimeAppPublic>::Public> =
                            _serde::__private::None;
                        while let _serde::__private::Some(__key) =
                                _serde::de::MapAccess::next_key::<__Field>(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("babe"));
                                        }
                                    __field0 =
                                        _serde::__private::Some(_serde::de::MapAccess::next_value::<<Babe
                                                        as
                                                        ::sp_runtime::BoundToRuntimeAppPublic>::Public>(&mut __map)?);
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("grandpa"));
                                        }
                                    __field1 =
                                        _serde::__private::Some(_serde::de::MapAccess::next_value::<<Grandpa
                                                        as
                                                        ::sp_runtime::BoundToRuntimeAppPublic>::Public>(&mut __map)?);
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("im_online"));
                                        }
                                    __field2 =
                                        _serde::__private::Some(_serde::de::MapAccess::next_value::<<ImOnline
                                                        as
                                                        ::sp_runtime::BoundToRuntimeAppPublic>::Public>(&mut __map)?);
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("authority_discovery"));
                                        }
                                    __field3 =
                                        _serde::__private::Some(_serde::de::MapAccess::next_value::<<AuthorityDiscovery
                                                        as
                                                        ::sp_runtime::BoundToRuntimeAppPublic>::Public>(&mut __map)?);
                                }
                                _ => {
                                    let _ =
                                        _serde::de::MapAccess::next_value::<_serde::de::IgnoredAny>(&mut __map)?;
                                }
                            }
                        }
                        let __field0 =
                            match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None =>
                                    _serde::__private::de::missing_field("babe")?,
                            };
                        let __field1 =
                            match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None =>
                                    _serde::__private::de::missing_field("grandpa")?,
                            };
                        let __field2 =
                            match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None =>
                                    _serde::__private::de::missing_field("im_online")?,
                            };
                        let __field3 =
                            match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None =>
                                    _serde::__private::de::missing_field("authority_discovery")?,
                            };
                        _serde::__private::Ok(SessionKeys {
                                babe: __field0,
                                grandpa: __field1,
                                im_online: __field2,
                                authority_discovery: __field3,
                            })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] =
                    &["babe", "grandpa", "im_online", "authority_discovery"];
                _serde::Deserializer::deserialize_struct(__deserializer,
                    "SessionKeys", FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<SessionKeys>,
                        lifetime: _serde::__private::PhantomData,
                    })
            }
        }
    };
impl SessionKeys {
    /// Generate a set of keys with optionally using the given seed.
    ///
    /// The generated key pairs are stored in the keystore.
    ///
    /// Returns the concatenated SCALE encoded public keys.
    pub fn generate(seed: Option<::sp_runtime::sp_std::vec::Vec<u8>>)
        -> ::sp_runtime::sp_std::vec::Vec<u8> {
        let keys =
            Self {
                babe: <<Babe as ::sp_runtime::BoundToRuntimeAppPublic>::Public
                        as
                        ::sp_runtime::RuntimeAppPublic>::generate_pair(seed.clone()),
                grandpa: <<Grandpa as
                        ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                        ::sp_runtime::RuntimeAppPublic>::generate_pair(seed.clone()),
                im_online: <<ImOnline as
                        ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                        ::sp_runtime::RuntimeAppPublic>::generate_pair(seed.clone()),
                authority_discovery: <<AuthorityDiscovery as
                        ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                        ::sp_runtime::RuntimeAppPublic>::generate_pair(seed.clone()),
            };
        ::sp_runtime::codec::Encode::encode(&keys)
    }
    /// Converts `Self` into a `Vec` of `(raw public key, KeyTypeId)`.
    pub fn into_raw_public_keys(self)
        ->
            ::sp_runtime::sp_std::vec::Vec<(::sp_runtime::sp_std::vec::Vec<u8>,
            ::sp_runtime::KeyTypeId)> {
        let mut keys = Vec::new();
        keys.push((::sp_runtime::RuntimeAppPublic::to_raw_vec(&self.babe),
                <<Babe as ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                    ::sp_runtime::RuntimeAppPublic>::ID));
        keys.push((::sp_runtime::RuntimeAppPublic::to_raw_vec(&self.grandpa),
                <<Grandpa as ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                    ::sp_runtime::RuntimeAppPublic>::ID));
        keys.push((::sp_runtime::RuntimeAppPublic::to_raw_vec(&self.im_online),
                <<ImOnline as ::sp_runtime::BoundToRuntimeAppPublic>::Public
                    as ::sp_runtime::RuntimeAppPublic>::ID));
        keys.push((::sp_runtime::RuntimeAppPublic::to_raw_vec(&self.authority_discovery),
                <<AuthorityDiscovery as
                    ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                    ::sp_runtime::RuntimeAppPublic>::ID));
        keys
    }
    /// Decode `Self` from the given `encoded` slice and convert `Self` into the raw public
    /// keys (see [`Self::into_raw_public_keys`]).
    ///
    /// Returns `None` when the decoding failed, otherwise `Some(_)`.
    pub fn decode_into_raw_public_keys(encoded: &[u8])
        ->
            Option<::sp_runtime::sp_std::vec::Vec<(::sp_runtime::sp_std::vec::Vec<u8>,
            ::sp_runtime::KeyTypeId)>> {
        <Self as
                        ::sp_runtime::codec::Decode>::decode(&mut &encoded[..]).ok().map(|s|
                s.into_raw_public_keys())
    }
}
impl ::sp_runtime::traits::OpaqueKeys for SessionKeys {
    type KeyTypeIdProviders = (Babe, Grandpa, ImOnline, AuthorityDiscovery);
    fn key_ids() -> &'static [::sp_runtime::KeyTypeId] {
        &[<<Babe as ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                        ::sp_runtime::RuntimeAppPublic>::ID,
                    <<Grandpa as ::sp_runtime::BoundToRuntimeAppPublic>::Public
                        as ::sp_runtime::RuntimeAppPublic>::ID,
                    <<ImOnline as ::sp_runtime::BoundToRuntimeAppPublic>::Public
                        as ::sp_runtime::RuntimeAppPublic>::ID,
                    <<AuthorityDiscovery as
                        ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                        ::sp_runtime::RuntimeAppPublic>::ID]
    }
    fn get_raw(&self, i: ::sp_runtime::KeyTypeId) -> &[u8] {
        match i {
            i if
                i ==
                    <<Babe as ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                        ::sp_runtime::RuntimeAppPublic>::ID => self.babe.as_ref(),
            i if
                i ==
                    <<Grandpa as ::sp_runtime::BoundToRuntimeAppPublic>::Public
                        as ::sp_runtime::RuntimeAppPublic>::ID =>
                self.grandpa.as_ref(),
            i if
                i ==
                    <<ImOnline as ::sp_runtime::BoundToRuntimeAppPublic>::Public
                        as ::sp_runtime::RuntimeAppPublic>::ID =>
                self.im_online.as_ref(),
            i if
                i ==
                    <<AuthorityDiscovery as
                        ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                        ::sp_runtime::RuntimeAppPublic>::ID =>
                self.authority_discovery.as_ref(),
            _ => &[],
        }
    }
}
impl pallet_session::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type ValidatorId = <Self as frame_system::Config>::AccountId;
    type ValidatorIdOf = pallet_staking::StashOf<Self>;
    type ShouldEndSession = Babe;
    type NextSessionRotation = Babe;
    type SessionManager =
        pallet_session_historical::NoteHistoricalRoot<Self, Staking>;
    type SessionHandler = <SessionKeys as OpaqueKeys>::KeyTypeIdProviders;
    type Keys = SessionKeys;
    type WeightInfo = pallet_session::weights::SubstrateWeight<Runtime>;
}
impl pallet_session_historical::Config for Runtime {
    type FullIdentification = pallet_staking::Exposure<AccountId, Balance>;
    type FullIdentificationOf = pallet_staking::ExposureOf<Runtime>;
}
pub struct BondCallFilter;
impl Contains<RuntimeCall> for BondCallFilter {
    fn contains(call: &RuntimeCall) -> bool {
        match call {
            RuntimeCall::Staking(pallet_staking::Call::bond { .. }) => true,
            RuntimeCall::Utility(utility_call) => {
                match utility_call {
                    pallet_utility::Call::batch { calls } |
                        pallet_utility::Call::batch_all { calls } |
                        pallet_utility::Call::force_batch { calls } => {
                        for c in calls { if Self::contains(c) { return true; } }
                    }
                    pallet_utility::Call::as_derivative { call, .. } |
                        pallet_utility::Call::dispatch_as { call, .. } |
                        pallet_utility::Call::with_weight { call, .. } => {
                        return Self::contains(call);
                    }
                    _ => (),
                }
                false
            }
            RuntimeCall::Proxy(pallet_proxy::Call::proxy { call, .. }) |
                RuntimeCall::Proxy(pallet_proxy::Call::proxy_announced { call,
                .. }) => {
                Self::contains(call)
            }
            _ => false,
        }
    }
}
pub struct NonStakingAccountsFilter;
impl Contains<AccountId> for NonStakingAccountsFilter {
    fn contains(account: &AccountId) -> bool {
        StakingRewards::filtered_accounts().contains(account)
    }
}
pub struct StakingRewardsPalletId;
impl StakingRewardsPalletId<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> PalletId { PalletId(*b"py/strwd") }
}
impl<_I: From<PalletId>> ::frame_support::traits::Get<_I> for
    StakingRewardsPalletId<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for StakingRewardsPalletId<> {
    type Type = PalletId;
    fn get() -> PalletId { Self::get() }
}
pub struct MinInflation;
impl MinInflation<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Perquintill { Perquintill::from_percent(1) }
}
impl<_I: From<Perquintill>> ::frame_support::traits::Get<_I> for
    MinInflation<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MinInflation<> {
    type Type = Perquintill;
    fn get() -> Perquintill { Self::get() }
}
pub struct MaxROI;
impl MaxROI<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Perquintill { Perquintill::from_percent(30) }
}
impl<_I: From<Perquintill>> ::frame_support::traits::Get<_I> for MaxROI<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxROI<> {
    type Type = Perquintill;
    fn get() -> Perquintill { Self::get() }
}
pub struct Falloff;
impl Falloff<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Perquintill { Perquintill::from_percent(2) }
}
impl<_I: From<Perquintill>> ::frame_support::traits::Get<_I> for Falloff<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for Falloff<> {
    type Type = Perquintill;
    fn get() -> Perquintill { Self::get() }
}
impl pallet_gear_staking_rewards::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type BondCallFilter = BondCallFilter;
    type AccountFilter = NonStakingAccountsFilter;
    type PalletId = StakingRewardsPalletId;
    type RefillOrigin = EnsureRoot<AccountId>;
    type WithdrawOrigin = EnsureRoot<AccountId>;
    type MillisecondsPerYear = ConstU64<MILLISECONDS_PER_YEAR>;
    type MinInflation = MinInflation;
    type MaxROI = MaxROI;
    type Falloff = Falloff;
    type WeightInfo =
        pallet_gear_staking_rewards::weights::SubstrateWeight<Runtime>;
}
pub struct SignedPhase;
impl SignedPhase<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { EPOCH_DURATION_IN_BLOCKS / 4 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for SignedPhase<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for SignedPhase<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct UnsignedPhase;
impl UnsignedPhase<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { EPOCH_DURATION_IN_BLOCKS / 4 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for UnsignedPhase<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for UnsignedPhase<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct SignedRewardBase;
impl SignedRewardBase<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { ECONOMIC_UNITS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    SignedRewardBase<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for SignedRewardBase<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct SignedDepositBase;
impl SignedDepositBase<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { ECONOMIC_UNITS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    SignedDepositBase<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for SignedDepositBase<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct SignedDepositByte;
impl SignedDepositByte<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { ECONOMIC_CENTIUNITS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    SignedDepositByte<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for SignedDepositByte<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct BetterUnsignedThreshold;
impl BetterUnsignedThreshold<> {
    /// Returns the value of this parameter type.
    pub fn get() -> Perbill { Perbill::from_rational(1u32, 10_000) }
}
impl<_I: From<Perbill>> ::frame_support::traits::Get<_I> for
    BetterUnsignedThreshold<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for BetterUnsignedThreshold<> {
    type Type = Perbill;
    fn get() -> Perbill { Self::get() }
}
pub struct MultiPhaseUnsignedPriority;
impl MultiPhaseUnsignedPriority<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> TransactionPriority {
        StakingUnsignedPriority::get() - 1u64
    }
}
impl<_I: From<TransactionPriority>> ::frame_support::traits::Get<_I> for
    MultiPhaseUnsignedPriority<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MultiPhaseUnsignedPriority<> {
    type Type = TransactionPriority;
    fn get() -> TransactionPriority { Self::get() }
}
pub struct MinerMaxWeight;
impl MinerMaxWeight<> {
    /// Returns the value of this parameter type.
    pub fn get() -> Weight {
        RuntimeBlockWeights::get().get(DispatchClass::Normal).max_extrinsic.expect("Normal extrinsics have a weight limit configured; qed").saturating_sub(BlockExecutionWeight::get())
    }
}
impl<_I: From<Weight>> ::frame_support::traits::Get<_I> for MinerMaxWeight<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MinerMaxWeight<> {
    type Type = Weight;
    fn get() -> Weight { Self::get() }
}
pub struct MinerMaxLength;
impl MinerMaxLength<> {
    /// Returns the value of this parameter type.
    pub fn get() -> u32 {
        Perbill::from_rational(9u32, 10) *
            *RuntimeBlockLength::get().max.get(DispatchClass::Normal)
    }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MinerMaxLength<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MinerMaxLength<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
use frame_election_provider_support as _feps;
use _feps::private as _fepsp;
#[doc = r" A struct to encode a election assignment in a compact way."]
impl _fepsp::codec::Encode for NposSolution16 {
    fn encode(&self) -> _fepsp::sp_std::prelude::Vec<u8> {
        let mut r = ::alloc::vec::Vec::new();
        let votes1 =
            self.votes1.iter().map(|(v, t)|
                        (_fepsp::codec::Compact(v.clone()),
                            _fepsp::codec::Compact(t.clone()))).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        votes1.encode_to(&mut r);
        let votes2 =
            self.votes2.iter().map(|(v, inner, t_last)|
                        (_fepsp::codec::Compact(v.clone()),
                            [(_fepsp::codec::Compact(inner[0usize].0.clone()),
                                        _fepsp::codec::Compact(inner[0usize].1.clone()))],
                            _fepsp::codec::Compact(t_last.clone()))).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        votes2.encode_to(&mut r);
        let votes3 =
            self.votes3.iter().map(|(v, inner, t_last)|
                        (_fepsp::codec::Compact(v.clone()),
                            [(_fepsp::codec::Compact(inner[0usize].0.clone()),
                                        _fepsp::codec::Compact(inner[0usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[1usize].0.clone()),
                                        _fepsp::codec::Compact(inner[1usize].1.clone()))],
                            _fepsp::codec::Compact(t_last.clone()))).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        votes3.encode_to(&mut r);
        let votes4 =
            self.votes4.iter().map(|(v, inner, t_last)|
                        (_fepsp::codec::Compact(v.clone()),
                            [(_fepsp::codec::Compact(inner[0usize].0.clone()),
                                        _fepsp::codec::Compact(inner[0usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[1usize].0.clone()),
                                        _fepsp::codec::Compact(inner[1usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[2usize].0.clone()),
                                        _fepsp::codec::Compact(inner[2usize].1.clone()))],
                            _fepsp::codec::Compact(t_last.clone()))).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        votes4.encode_to(&mut r);
        let votes5 =
            self.votes5.iter().map(|(v, inner, t_last)|
                        (_fepsp::codec::Compact(v.clone()),
                            [(_fepsp::codec::Compact(inner[0usize].0.clone()),
                                        _fepsp::codec::Compact(inner[0usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[1usize].0.clone()),
                                        _fepsp::codec::Compact(inner[1usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[2usize].0.clone()),
                                        _fepsp::codec::Compact(inner[2usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[3usize].0.clone()),
                                        _fepsp::codec::Compact(inner[3usize].1.clone()))],
                            _fepsp::codec::Compact(t_last.clone()))).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        votes5.encode_to(&mut r);
        let votes6 =
            self.votes6.iter().map(|(v, inner, t_last)|
                        (_fepsp::codec::Compact(v.clone()),
                            [(_fepsp::codec::Compact(inner[0usize].0.clone()),
                                        _fepsp::codec::Compact(inner[0usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[1usize].0.clone()),
                                        _fepsp::codec::Compact(inner[1usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[2usize].0.clone()),
                                        _fepsp::codec::Compact(inner[2usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[3usize].0.clone()),
                                        _fepsp::codec::Compact(inner[3usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[4usize].0.clone()),
                                        _fepsp::codec::Compact(inner[4usize].1.clone()))],
                            _fepsp::codec::Compact(t_last.clone()))).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        votes6.encode_to(&mut r);
        let votes7 =
            self.votes7.iter().map(|(v, inner, t_last)|
                        (_fepsp::codec::Compact(v.clone()),
                            [(_fepsp::codec::Compact(inner[0usize].0.clone()),
                                        _fepsp::codec::Compact(inner[0usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[1usize].0.clone()),
                                        _fepsp::codec::Compact(inner[1usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[2usize].0.clone()),
                                        _fepsp::codec::Compact(inner[2usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[3usize].0.clone()),
                                        _fepsp::codec::Compact(inner[3usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[4usize].0.clone()),
                                        _fepsp::codec::Compact(inner[4usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[5usize].0.clone()),
                                        _fepsp::codec::Compact(inner[5usize].1.clone()))],
                            _fepsp::codec::Compact(t_last.clone()))).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        votes7.encode_to(&mut r);
        let votes8 =
            self.votes8.iter().map(|(v, inner, t_last)|
                        (_fepsp::codec::Compact(v.clone()),
                            [(_fepsp::codec::Compact(inner[0usize].0.clone()),
                                        _fepsp::codec::Compact(inner[0usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[1usize].0.clone()),
                                        _fepsp::codec::Compact(inner[1usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[2usize].0.clone()),
                                        _fepsp::codec::Compact(inner[2usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[3usize].0.clone()),
                                        _fepsp::codec::Compact(inner[3usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[4usize].0.clone()),
                                        _fepsp::codec::Compact(inner[4usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[5usize].0.clone()),
                                        _fepsp::codec::Compact(inner[5usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[6usize].0.clone()),
                                        _fepsp::codec::Compact(inner[6usize].1.clone()))],
                            _fepsp::codec::Compact(t_last.clone()))).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        votes8.encode_to(&mut r);
        let votes9 =
            self.votes9.iter().map(|(v, inner, t_last)|
                        (_fepsp::codec::Compact(v.clone()),
                            [(_fepsp::codec::Compact(inner[0usize].0.clone()),
                                        _fepsp::codec::Compact(inner[0usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[1usize].0.clone()),
                                        _fepsp::codec::Compact(inner[1usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[2usize].0.clone()),
                                        _fepsp::codec::Compact(inner[2usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[3usize].0.clone()),
                                        _fepsp::codec::Compact(inner[3usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[4usize].0.clone()),
                                        _fepsp::codec::Compact(inner[4usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[5usize].0.clone()),
                                        _fepsp::codec::Compact(inner[5usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[6usize].0.clone()),
                                        _fepsp::codec::Compact(inner[6usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[7usize].0.clone()),
                                        _fepsp::codec::Compact(inner[7usize].1.clone()))],
                            _fepsp::codec::Compact(t_last.clone()))).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        votes9.encode_to(&mut r);
        let votes10 =
            self.votes10.iter().map(|(v, inner, t_last)|
                        (_fepsp::codec::Compact(v.clone()),
                            [(_fepsp::codec::Compact(inner[0usize].0.clone()),
                                        _fepsp::codec::Compact(inner[0usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[1usize].0.clone()),
                                        _fepsp::codec::Compact(inner[1usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[2usize].0.clone()),
                                        _fepsp::codec::Compact(inner[2usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[3usize].0.clone()),
                                        _fepsp::codec::Compact(inner[3usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[4usize].0.clone()),
                                        _fepsp::codec::Compact(inner[4usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[5usize].0.clone()),
                                        _fepsp::codec::Compact(inner[5usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[6usize].0.clone()),
                                        _fepsp::codec::Compact(inner[6usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[7usize].0.clone()),
                                        _fepsp::codec::Compact(inner[7usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[8usize].0.clone()),
                                        _fepsp::codec::Compact(inner[8usize].1.clone()))],
                            _fepsp::codec::Compact(t_last.clone()))).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        votes10.encode_to(&mut r);
        let votes11 =
            self.votes11.iter().map(|(v, inner, t_last)|
                        (_fepsp::codec::Compact(v.clone()),
                            [(_fepsp::codec::Compact(inner[0usize].0.clone()),
                                        _fepsp::codec::Compact(inner[0usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[1usize].0.clone()),
                                        _fepsp::codec::Compact(inner[1usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[2usize].0.clone()),
                                        _fepsp::codec::Compact(inner[2usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[3usize].0.clone()),
                                        _fepsp::codec::Compact(inner[3usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[4usize].0.clone()),
                                        _fepsp::codec::Compact(inner[4usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[5usize].0.clone()),
                                        _fepsp::codec::Compact(inner[5usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[6usize].0.clone()),
                                        _fepsp::codec::Compact(inner[6usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[7usize].0.clone()),
                                        _fepsp::codec::Compact(inner[7usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[8usize].0.clone()),
                                        _fepsp::codec::Compact(inner[8usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[9usize].0.clone()),
                                        _fepsp::codec::Compact(inner[9usize].1.clone()))],
                            _fepsp::codec::Compact(t_last.clone()))).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        votes11.encode_to(&mut r);
        let votes12 =
            self.votes12.iter().map(|(v, inner, t_last)|
                        (_fepsp::codec::Compact(v.clone()),
                            [(_fepsp::codec::Compact(inner[0usize].0.clone()),
                                        _fepsp::codec::Compact(inner[0usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[1usize].0.clone()),
                                        _fepsp::codec::Compact(inner[1usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[2usize].0.clone()),
                                        _fepsp::codec::Compact(inner[2usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[3usize].0.clone()),
                                        _fepsp::codec::Compact(inner[3usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[4usize].0.clone()),
                                        _fepsp::codec::Compact(inner[4usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[5usize].0.clone()),
                                        _fepsp::codec::Compact(inner[5usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[6usize].0.clone()),
                                        _fepsp::codec::Compact(inner[6usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[7usize].0.clone()),
                                        _fepsp::codec::Compact(inner[7usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[8usize].0.clone()),
                                        _fepsp::codec::Compact(inner[8usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[9usize].0.clone()),
                                        _fepsp::codec::Compact(inner[9usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[10usize].0.clone()),
                                        _fepsp::codec::Compact(inner[10usize].1.clone()))],
                            _fepsp::codec::Compact(t_last.clone()))).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        votes12.encode_to(&mut r);
        let votes13 =
            self.votes13.iter().map(|(v, inner, t_last)|
                        (_fepsp::codec::Compact(v.clone()),
                            [(_fepsp::codec::Compact(inner[0usize].0.clone()),
                                        _fepsp::codec::Compact(inner[0usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[1usize].0.clone()),
                                        _fepsp::codec::Compact(inner[1usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[2usize].0.clone()),
                                        _fepsp::codec::Compact(inner[2usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[3usize].0.clone()),
                                        _fepsp::codec::Compact(inner[3usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[4usize].0.clone()),
                                        _fepsp::codec::Compact(inner[4usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[5usize].0.clone()),
                                        _fepsp::codec::Compact(inner[5usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[6usize].0.clone()),
                                        _fepsp::codec::Compact(inner[6usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[7usize].0.clone()),
                                        _fepsp::codec::Compact(inner[7usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[8usize].0.clone()),
                                        _fepsp::codec::Compact(inner[8usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[9usize].0.clone()),
                                        _fepsp::codec::Compact(inner[9usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[10usize].0.clone()),
                                        _fepsp::codec::Compact(inner[10usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[11usize].0.clone()),
                                        _fepsp::codec::Compact(inner[11usize].1.clone()))],
                            _fepsp::codec::Compact(t_last.clone()))).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        votes13.encode_to(&mut r);
        let votes14 =
            self.votes14.iter().map(|(v, inner, t_last)|
                        (_fepsp::codec::Compact(v.clone()),
                            [(_fepsp::codec::Compact(inner[0usize].0.clone()),
                                        _fepsp::codec::Compact(inner[0usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[1usize].0.clone()),
                                        _fepsp::codec::Compact(inner[1usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[2usize].0.clone()),
                                        _fepsp::codec::Compact(inner[2usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[3usize].0.clone()),
                                        _fepsp::codec::Compact(inner[3usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[4usize].0.clone()),
                                        _fepsp::codec::Compact(inner[4usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[5usize].0.clone()),
                                        _fepsp::codec::Compact(inner[5usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[6usize].0.clone()),
                                        _fepsp::codec::Compact(inner[6usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[7usize].0.clone()),
                                        _fepsp::codec::Compact(inner[7usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[8usize].0.clone()),
                                        _fepsp::codec::Compact(inner[8usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[9usize].0.clone()),
                                        _fepsp::codec::Compact(inner[9usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[10usize].0.clone()),
                                        _fepsp::codec::Compact(inner[10usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[11usize].0.clone()),
                                        _fepsp::codec::Compact(inner[11usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[12usize].0.clone()),
                                        _fepsp::codec::Compact(inner[12usize].1.clone()))],
                            _fepsp::codec::Compact(t_last.clone()))).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        votes14.encode_to(&mut r);
        let votes15 =
            self.votes15.iter().map(|(v, inner, t_last)|
                        (_fepsp::codec::Compact(v.clone()),
                            [(_fepsp::codec::Compact(inner[0usize].0.clone()),
                                        _fepsp::codec::Compact(inner[0usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[1usize].0.clone()),
                                        _fepsp::codec::Compact(inner[1usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[2usize].0.clone()),
                                        _fepsp::codec::Compact(inner[2usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[3usize].0.clone()),
                                        _fepsp::codec::Compact(inner[3usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[4usize].0.clone()),
                                        _fepsp::codec::Compact(inner[4usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[5usize].0.clone()),
                                        _fepsp::codec::Compact(inner[5usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[6usize].0.clone()),
                                        _fepsp::codec::Compact(inner[6usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[7usize].0.clone()),
                                        _fepsp::codec::Compact(inner[7usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[8usize].0.clone()),
                                        _fepsp::codec::Compact(inner[8usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[9usize].0.clone()),
                                        _fepsp::codec::Compact(inner[9usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[10usize].0.clone()),
                                        _fepsp::codec::Compact(inner[10usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[11usize].0.clone()),
                                        _fepsp::codec::Compact(inner[11usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[12usize].0.clone()),
                                        _fepsp::codec::Compact(inner[12usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[13usize].0.clone()),
                                        _fepsp::codec::Compact(inner[13usize].1.clone()))],
                            _fepsp::codec::Compact(t_last.clone()))).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        votes15.encode_to(&mut r);
        let votes16 =
            self.votes16.iter().map(|(v, inner, t_last)|
                        (_fepsp::codec::Compact(v.clone()),
                            [(_fepsp::codec::Compact(inner[0usize].0.clone()),
                                        _fepsp::codec::Compact(inner[0usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[1usize].0.clone()),
                                        _fepsp::codec::Compact(inner[1usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[2usize].0.clone()),
                                        _fepsp::codec::Compact(inner[2usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[3usize].0.clone()),
                                        _fepsp::codec::Compact(inner[3usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[4usize].0.clone()),
                                        _fepsp::codec::Compact(inner[4usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[5usize].0.clone()),
                                        _fepsp::codec::Compact(inner[5usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[6usize].0.clone()),
                                        _fepsp::codec::Compact(inner[6usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[7usize].0.clone()),
                                        _fepsp::codec::Compact(inner[7usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[8usize].0.clone()),
                                        _fepsp::codec::Compact(inner[8usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[9usize].0.clone()),
                                        _fepsp::codec::Compact(inner[9usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[10usize].0.clone()),
                                        _fepsp::codec::Compact(inner[10usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[11usize].0.clone()),
                                        _fepsp::codec::Compact(inner[11usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[12usize].0.clone()),
                                        _fepsp::codec::Compact(inner[12usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[13usize].0.clone()),
                                        _fepsp::codec::Compact(inner[13usize].1.clone())),
                                    (_fepsp::codec::Compact(inner[14usize].0.clone()),
                                        _fepsp::codec::Compact(inner[14usize].1.clone()))],
                            _fepsp::codec::Compact(t_last.clone()))).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        votes16.encode_to(&mut r);
        r
    }
}
impl _fepsp::codec::Decode for NposSolution16 {
    fn decode<I: _fepsp::codec::Input>(value: &mut I)
        -> Result<Self, _fepsp::codec::Error> {
        let votes1 =
            <_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                        _fepsp::codec::Compact<u16>)> as
                        _fepsp::codec::Decode>::decode(value)?;
        let votes1 =
            votes1.into_iter().map(|(v, t)|
                        (v.0, t.0)).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        let votes2 =
            <_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                        [(_fepsp::codec::Compact<u16>,
                        _fepsp::codec::Compact<sp_runtime::PerU16>); 2usize - 1],
                        _fepsp::codec::Compact<u16>)> as
                        _fepsp::codec::Decode>::decode(value)?;
        let votes2 =
            votes2.into_iter().map(|(v, inner, t_last)|
                        (v.0, [((inner[0usize].0).0, (inner[0usize].1).0)],
                            t_last.0)).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        let votes3 =
            <_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                        [(_fepsp::codec::Compact<u16>,
                        _fepsp::codec::Compact<sp_runtime::PerU16>); 3usize - 1],
                        _fepsp::codec::Compact<u16>)> as
                        _fepsp::codec::Decode>::decode(value)?;
        let votes3 =
            votes3.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0)],
                            t_last.0)).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        let votes4 =
            <_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                        [(_fepsp::codec::Compact<u16>,
                        _fepsp::codec::Compact<sp_runtime::PerU16>); 4usize - 1],
                        _fepsp::codec::Compact<u16>)> as
                        _fepsp::codec::Decode>::decode(value)?;
        let votes4 =
            votes4.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0)],
                            t_last.0)).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        let votes5 =
            <_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                        [(_fepsp::codec::Compact<u16>,
                        _fepsp::codec::Compact<sp_runtime::PerU16>); 5usize - 1],
                        _fepsp::codec::Compact<u16>)> as
                        _fepsp::codec::Decode>::decode(value)?;
        let votes5 =
            votes5.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0),
                                    ((inner[3usize].0).0, (inner[3usize].1).0)],
                            t_last.0)).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        let votes6 =
            <_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                        [(_fepsp::codec::Compact<u16>,
                        _fepsp::codec::Compact<sp_runtime::PerU16>); 6usize - 1],
                        _fepsp::codec::Compact<u16>)> as
                        _fepsp::codec::Decode>::decode(value)?;
        let votes6 =
            votes6.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0),
                                    ((inner[3usize].0).0, (inner[3usize].1).0),
                                    ((inner[4usize].0).0, (inner[4usize].1).0)],
                            t_last.0)).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        let votes7 =
            <_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                        [(_fepsp::codec::Compact<u16>,
                        _fepsp::codec::Compact<sp_runtime::PerU16>); 7usize - 1],
                        _fepsp::codec::Compact<u16>)> as
                        _fepsp::codec::Decode>::decode(value)?;
        let votes7 =
            votes7.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0),
                                    ((inner[3usize].0).0, (inner[3usize].1).0),
                                    ((inner[4usize].0).0, (inner[4usize].1).0),
                                    ((inner[5usize].0).0, (inner[5usize].1).0)],
                            t_last.0)).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        let votes8 =
            <_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                        [(_fepsp::codec::Compact<u16>,
                        _fepsp::codec::Compact<sp_runtime::PerU16>); 8usize - 1],
                        _fepsp::codec::Compact<u16>)> as
                        _fepsp::codec::Decode>::decode(value)?;
        let votes8 =
            votes8.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0),
                                    ((inner[3usize].0).0, (inner[3usize].1).0),
                                    ((inner[4usize].0).0, (inner[4usize].1).0),
                                    ((inner[5usize].0).0, (inner[5usize].1).0),
                                    ((inner[6usize].0).0, (inner[6usize].1).0)],
                            t_last.0)).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        let votes9 =
            <_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                        [(_fepsp::codec::Compact<u16>,
                        _fepsp::codec::Compact<sp_runtime::PerU16>); 9usize - 1],
                        _fepsp::codec::Compact<u16>)> as
                        _fepsp::codec::Decode>::decode(value)?;
        let votes9 =
            votes9.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0),
                                    ((inner[3usize].0).0, (inner[3usize].1).0),
                                    ((inner[4usize].0).0, (inner[4usize].1).0),
                                    ((inner[5usize].0).0, (inner[5usize].1).0),
                                    ((inner[6usize].0).0, (inner[6usize].1).0),
                                    ((inner[7usize].0).0, (inner[7usize].1).0)],
                            t_last.0)).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        let votes10 =
            <_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                        [(_fepsp::codec::Compact<u16>,
                        _fepsp::codec::Compact<sp_runtime::PerU16>); 10usize - 1],
                        _fepsp::codec::Compact<u16>)> as
                        _fepsp::codec::Decode>::decode(value)?;
        let votes10 =
            votes10.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0),
                                    ((inner[3usize].0).0, (inner[3usize].1).0),
                                    ((inner[4usize].0).0, (inner[4usize].1).0),
                                    ((inner[5usize].0).0, (inner[5usize].1).0),
                                    ((inner[6usize].0).0, (inner[6usize].1).0),
                                    ((inner[7usize].0).0, (inner[7usize].1).0),
                                    ((inner[8usize].0).0, (inner[8usize].1).0)],
                            t_last.0)).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        let votes11 =
            <_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                        [(_fepsp::codec::Compact<u16>,
                        _fepsp::codec::Compact<sp_runtime::PerU16>); 11usize - 1],
                        _fepsp::codec::Compact<u16>)> as
                        _fepsp::codec::Decode>::decode(value)?;
        let votes11 =
            votes11.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0),
                                    ((inner[3usize].0).0, (inner[3usize].1).0),
                                    ((inner[4usize].0).0, (inner[4usize].1).0),
                                    ((inner[5usize].0).0, (inner[5usize].1).0),
                                    ((inner[6usize].0).0, (inner[6usize].1).0),
                                    ((inner[7usize].0).0, (inner[7usize].1).0),
                                    ((inner[8usize].0).0, (inner[8usize].1).0),
                                    ((inner[9usize].0).0, (inner[9usize].1).0)],
                            t_last.0)).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        let votes12 =
            <_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                        [(_fepsp::codec::Compact<u16>,
                        _fepsp::codec::Compact<sp_runtime::PerU16>); 12usize - 1],
                        _fepsp::codec::Compact<u16>)> as
                        _fepsp::codec::Decode>::decode(value)?;
        let votes12 =
            votes12.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0),
                                    ((inner[3usize].0).0, (inner[3usize].1).0),
                                    ((inner[4usize].0).0, (inner[4usize].1).0),
                                    ((inner[5usize].0).0, (inner[5usize].1).0),
                                    ((inner[6usize].0).0, (inner[6usize].1).0),
                                    ((inner[7usize].0).0, (inner[7usize].1).0),
                                    ((inner[8usize].0).0, (inner[8usize].1).0),
                                    ((inner[9usize].0).0, (inner[9usize].1).0),
                                    ((inner[10usize].0).0, (inner[10usize].1).0)],
                            t_last.0)).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        let votes13 =
            <_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                        [(_fepsp::codec::Compact<u16>,
                        _fepsp::codec::Compact<sp_runtime::PerU16>); 13usize - 1],
                        _fepsp::codec::Compact<u16>)> as
                        _fepsp::codec::Decode>::decode(value)?;
        let votes13 =
            votes13.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0),
                                    ((inner[3usize].0).0, (inner[3usize].1).0),
                                    ((inner[4usize].0).0, (inner[4usize].1).0),
                                    ((inner[5usize].0).0, (inner[5usize].1).0),
                                    ((inner[6usize].0).0, (inner[6usize].1).0),
                                    ((inner[7usize].0).0, (inner[7usize].1).0),
                                    ((inner[8usize].0).0, (inner[8usize].1).0),
                                    ((inner[9usize].0).0, (inner[9usize].1).0),
                                    ((inner[10usize].0).0, (inner[10usize].1).0),
                                    ((inner[11usize].0).0, (inner[11usize].1).0)],
                            t_last.0)).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        let votes14 =
            <_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                        [(_fepsp::codec::Compact<u16>,
                        _fepsp::codec::Compact<sp_runtime::PerU16>); 14usize - 1],
                        _fepsp::codec::Compact<u16>)> as
                        _fepsp::codec::Decode>::decode(value)?;
        let votes14 =
            votes14.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0),
                                    ((inner[3usize].0).0, (inner[3usize].1).0),
                                    ((inner[4usize].0).0, (inner[4usize].1).0),
                                    ((inner[5usize].0).0, (inner[5usize].1).0),
                                    ((inner[6usize].0).0, (inner[6usize].1).0),
                                    ((inner[7usize].0).0, (inner[7usize].1).0),
                                    ((inner[8usize].0).0, (inner[8usize].1).0),
                                    ((inner[9usize].0).0, (inner[9usize].1).0),
                                    ((inner[10usize].0).0, (inner[10usize].1).0),
                                    ((inner[11usize].0).0, (inner[11usize].1).0),
                                    ((inner[12usize].0).0, (inner[12usize].1).0)],
                            t_last.0)).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        let votes15 =
            <_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                        [(_fepsp::codec::Compact<u16>,
                        _fepsp::codec::Compact<sp_runtime::PerU16>); 15usize - 1],
                        _fepsp::codec::Compact<u16>)> as
                        _fepsp::codec::Decode>::decode(value)?;
        let votes15 =
            votes15.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0),
                                    ((inner[3usize].0).0, (inner[3usize].1).0),
                                    ((inner[4usize].0).0, (inner[4usize].1).0),
                                    ((inner[5usize].0).0, (inner[5usize].1).0),
                                    ((inner[6usize].0).0, (inner[6usize].1).0),
                                    ((inner[7usize].0).0, (inner[7usize].1).0),
                                    ((inner[8usize].0).0, (inner[8usize].1).0),
                                    ((inner[9usize].0).0, (inner[9usize].1).0),
                                    ((inner[10usize].0).0, (inner[10usize].1).0),
                                    ((inner[11usize].0).0, (inner[11usize].1).0),
                                    ((inner[12usize].0).0, (inner[12usize].1).0),
                                    ((inner[13usize].0).0, (inner[13usize].1).0)],
                            t_last.0)).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        let votes16 =
            <_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                        [(_fepsp::codec::Compact<u16>,
                        _fepsp::codec::Compact<sp_runtime::PerU16>); 16usize - 1],
                        _fepsp::codec::Compact<u16>)> as
                        _fepsp::codec::Decode>::decode(value)?;
        let votes16 =
            votes16.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0),
                                    ((inner[3usize].0).0, (inner[3usize].1).0),
                                    ((inner[4usize].0).0, (inner[4usize].1).0),
                                    ((inner[5usize].0).0, (inner[5usize].1).0),
                                    ((inner[6usize].0).0, (inner[6usize].1).0),
                                    ((inner[7usize].0).0, (inner[7usize].1).0),
                                    ((inner[8usize].0).0, (inner[8usize].1).0),
                                    ((inner[9usize].0).0, (inner[9usize].1).0),
                                    ((inner[10usize].0).0, (inner[10usize].1).0),
                                    ((inner[11usize].0).0, (inner[11usize].1).0),
                                    ((inner[12usize].0).0, (inner[12usize].1).0),
                                    ((inner[13usize].0).0, (inner[13usize].1).0),
                                    ((inner[14usize].0).0, (inner[14usize].1).0)],
                            t_last.0)).collect::<_fepsp::sp_std::prelude::Vec<_>>();
        Ok(NposSolution16 {
                votes1,
                votes2,
                votes3,
                votes4,
                votes5,
                votes6,
                votes7,
                votes8,
                votes9,
                votes10,
                votes11,
                votes12,
                votes13,
                votes14,
                votes15,
                votes16,
            })
    }
}
impl _fepsp::scale_info::TypeInfo for NposSolution16 {
    type Identity = Self;
    fn type_info()
        -> _fepsp::scale_info::Type<_fepsp::scale_info::form::MetaForm> {
        _fepsp::scale_info::Type::builder().path(_fepsp::scale_info::Path::new("NposSolution16",
                    "vara_runtime")).composite(_fepsp::scale_info::build::Fields::named().field(|f|
                                                                                f.ty::<_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                                                                                        _fepsp::codec::Compact<u16>)>>().name("votes1")).field(|f|
                                                                            f.ty::<_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                                                                                    (_fepsp::codec::Compact<u16>,
                                                                                    _fepsp::codec::Compact<sp_runtime::PerU16>),
                                                                                    _fepsp::codec::Compact<u16>)>>().name("votes2")).field(|f|
                                                                        f.ty::<_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                                                                                [(_fepsp::codec::Compact<u16>,
                                                                                _fepsp::codec::Compact<sp_runtime::PerU16>); 3usize - 1],
                                                                                _fepsp::codec::Compact<u16>)>>().name("votes3")).field(|f|
                                                                    f.ty::<_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                                                                            [(_fepsp::codec::Compact<u16>,
                                                                            _fepsp::codec::Compact<sp_runtime::PerU16>); 4usize - 1],
                                                                            _fepsp::codec::Compact<u16>)>>().name("votes4")).field(|f|
                                                                f.ty::<_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                                                                        [(_fepsp::codec::Compact<u16>,
                                                                        _fepsp::codec::Compact<sp_runtime::PerU16>); 5usize - 1],
                                                                        _fepsp::codec::Compact<u16>)>>().name("votes5")).field(|f|
                                                            f.ty::<_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                                                                    [(_fepsp::codec::Compact<u16>,
                                                                    _fepsp::codec::Compact<sp_runtime::PerU16>); 6usize - 1],
                                                                    _fepsp::codec::Compact<u16>)>>().name("votes6")).field(|f|
                                                        f.ty::<_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                                                                [(_fepsp::codec::Compact<u16>,
                                                                _fepsp::codec::Compact<sp_runtime::PerU16>); 7usize - 1],
                                                                _fepsp::codec::Compact<u16>)>>().name("votes7")).field(|f|
                                                    f.ty::<_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                                                            [(_fepsp::codec::Compact<u16>,
                                                            _fepsp::codec::Compact<sp_runtime::PerU16>); 8usize - 1],
                                                            _fepsp::codec::Compact<u16>)>>().name("votes8")).field(|f|
                                                f.ty::<_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                                                        [(_fepsp::codec::Compact<u16>,
                                                        _fepsp::codec::Compact<sp_runtime::PerU16>); 9usize - 1],
                                                        _fepsp::codec::Compact<u16>)>>().name("votes9")).field(|f|
                                            f.ty::<_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                                                    [(_fepsp::codec::Compact<u16>,
                                                    _fepsp::codec::Compact<sp_runtime::PerU16>); 10usize - 1],
                                                    _fepsp::codec::Compact<u16>)>>().name("votes10")).field(|f|
                                        f.ty::<_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                                                [(_fepsp::codec::Compact<u16>,
                                                _fepsp::codec::Compact<sp_runtime::PerU16>); 11usize - 1],
                                                _fepsp::codec::Compact<u16>)>>().name("votes11")).field(|f|
                                    f.ty::<_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                                            [(_fepsp::codec::Compact<u16>,
                                            _fepsp::codec::Compact<sp_runtime::PerU16>); 12usize - 1],
                                            _fepsp::codec::Compact<u16>)>>().name("votes12")).field(|f|
                                f.ty::<_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                                        [(_fepsp::codec::Compact<u16>,
                                        _fepsp::codec::Compact<sp_runtime::PerU16>); 13usize - 1],
                                        _fepsp::codec::Compact<u16>)>>().name("votes13")).field(|f|
                            f.ty::<_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                                    [(_fepsp::codec::Compact<u16>,
                                    _fepsp::codec::Compact<sp_runtime::PerU16>); 14usize - 1],
                                    _fepsp::codec::Compact<u16>)>>().name("votes14")).field(|f|
                        f.ty::<_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                                [(_fepsp::codec::Compact<u16>,
                                _fepsp::codec::Compact<sp_runtime::PerU16>); 15usize - 1],
                                _fepsp::codec::Compact<u16>)>>().name("votes15")).field(|f|
                    f.ty::<_fepsp::sp_std::prelude::Vec<(_fepsp::codec::Compact<u32>,
                            [(_fepsp::codec::Compact<u16>,
                            _fepsp::codec::Compact<sp_runtime::PerU16>); 16usize - 1],
                            _fepsp::codec::Compact<u16>)>>().name("votes16")))
    }
}
pub struct NposSolution16 {
    pub votes1: _fepsp::sp_std::prelude::Vec<(u32, u16)>,
    pub votes2: _fepsp::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 1usize], u16)>,
    pub votes3: _fepsp::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 2usize], u16)>,
    pub votes4: _fepsp::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 3usize], u16)>,
    pub votes5: _fepsp::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 4usize], u16)>,
    pub votes6: _fepsp::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 5usize], u16)>,
    pub votes7: _fepsp::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 6usize], u16)>,
    pub votes8: _fepsp::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 7usize], u16)>,
    pub votes9: _fepsp::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 8usize], u16)>,
    pub votes10: _fepsp::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 9usize], u16)>,
    pub votes11: _fepsp::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 10usize], u16)>,
    pub votes12: _fepsp::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 11usize], u16)>,
    pub votes13: _fepsp::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 12usize], u16)>,
    pub votes14: _fepsp::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 13usize], u16)>,
    pub votes15: _fepsp::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 14usize], u16)>,
    pub votes16: _fepsp::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 15usize], u16)>,
}
#[automatically_derived]
impl ::core::default::Default for NposSolution16 {
    #[inline]
    fn default() -> NposSolution16 {
        NposSolution16 {
            votes1: ::core::default::Default::default(),
            votes2: ::core::default::Default::default(),
            votes3: ::core::default::Default::default(),
            votes4: ::core::default::Default::default(),
            votes5: ::core::default::Default::default(),
            votes6: ::core::default::Default::default(),
            votes7: ::core::default::Default::default(),
            votes8: ::core::default::Default::default(),
            votes9: ::core::default::Default::default(),
            votes10: ::core::default::Default::default(),
            votes11: ::core::default::Default::default(),
            votes12: ::core::default::Default::default(),
            votes13: ::core::default::Default::default(),
            votes14: ::core::default::Default::default(),
            votes15: ::core::default::Default::default(),
            votes16: ::core::default::Default::default(),
        }
    }
}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for NposSolution16 { }
#[automatically_derived]
impl ::core::cmp::PartialEq for NposSolution16 {
    #[inline]
    fn eq(&self, other: &NposSolution16) -> bool {
        self.votes1 == other.votes1 && self.votes2 == other.votes2 &&
                                                                self.votes3 == other.votes3 && self.votes4 == other.votes4
                                                        && self.votes5 == other.votes5 &&
                                                    self.votes6 == other.votes6 && self.votes7 == other.votes7
                                            && self.votes8 == other.votes8 &&
                                        self.votes9 == other.votes9 && self.votes10 == other.votes10
                                && self.votes11 == other.votes11 &&
                            self.votes12 == other.votes12 &&
                        self.votes13 == other.votes13 &&
                    self.votes14 == other.votes14 &&
                self.votes15 == other.votes15 && self.votes16 == other.votes16
    }
}
#[automatically_derived]
impl ::core::marker::StructuralEq for NposSolution16 { }
#[automatically_derived]
impl ::core::cmp::Eq for NposSolution16 {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {
        let _:
                ::core::cmp::AssertParamIsEq<_fepsp::sp_std::prelude::Vec<(u32,
                u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_fepsp::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 1usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_fepsp::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 2usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_fepsp::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 3usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_fepsp::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 4usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_fepsp::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 5usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_fepsp::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 6usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_fepsp::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 7usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_fepsp::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 8usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_fepsp::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 9usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_fepsp::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 10usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_fepsp::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 11usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_fepsp::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 12usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_fepsp::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 13usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_fepsp::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 14usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_fepsp::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 15usize], u16)>>;
    }
}
#[automatically_derived]
impl ::core::clone::Clone for NposSolution16 {
    #[inline]
    fn clone(&self) -> NposSolution16 {
        NposSolution16 {
            votes1: ::core::clone::Clone::clone(&self.votes1),
            votes2: ::core::clone::Clone::clone(&self.votes2),
            votes3: ::core::clone::Clone::clone(&self.votes3),
            votes4: ::core::clone::Clone::clone(&self.votes4),
            votes5: ::core::clone::Clone::clone(&self.votes5),
            votes6: ::core::clone::Clone::clone(&self.votes6),
            votes7: ::core::clone::Clone::clone(&self.votes7),
            votes8: ::core::clone::Clone::clone(&self.votes8),
            votes9: ::core::clone::Clone::clone(&self.votes9),
            votes10: ::core::clone::Clone::clone(&self.votes10),
            votes11: ::core::clone::Clone::clone(&self.votes11),
            votes12: ::core::clone::Clone::clone(&self.votes12),
            votes13: ::core::clone::Clone::clone(&self.votes13),
            votes14: ::core::clone::Clone::clone(&self.votes14),
            votes15: ::core::clone::Clone::clone(&self.votes15),
            votes16: ::core::clone::Clone::clone(&self.votes16),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for NposSolution16 {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ =
            &["votes1", "votes2", "votes3", "votes4", "votes5", "votes6",
                        "votes7", "votes8", "votes9", "votes10", "votes11",
                        "votes12", "votes13", "votes14", "votes15", "votes16"];
        let values: &[&dyn ::core::fmt::Debug] =
            &[&self.votes1, &self.votes2, &self.votes3, &self.votes4,
                        &self.votes5, &self.votes6, &self.votes7, &self.votes8,
                        &self.votes9, &self.votes10, &self.votes11, &self.votes12,
                        &self.votes13, &self.votes14, &self.votes15,
                        &&self.votes16];
        ::core::fmt::Formatter::debug_struct_fields_finish(f,
            "NposSolution16", names, values)
    }
}
#[automatically_derived]
impl ::core::cmp::PartialOrd for NposSolution16 {
    #[inline]
    fn partial_cmp(&self, other: &NposSolution16)
        -> ::core::option::Option<::core::cmp::Ordering> {
        match ::core::cmp::PartialOrd::partial_cmp(&self.votes1,
                &other.votes1) {
            ::core::option::Option::Some(::core::cmp::Ordering::Equal) =>
                match ::core::cmp::PartialOrd::partial_cmp(&self.votes2,
                        &other.votes2) {
                    ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                        =>
                        match ::core::cmp::PartialOrd::partial_cmp(&self.votes3,
                                &other.votes3) {
                            ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                =>
                                match ::core::cmp::PartialOrd::partial_cmp(&self.votes4,
                                        &other.votes4) {
                                    ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                        =>
                                        match ::core::cmp::PartialOrd::partial_cmp(&self.votes5,
                                                &other.votes5) {
                                            ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                                =>
                                                match ::core::cmp::PartialOrd::partial_cmp(&self.votes6,
                                                        &other.votes6) {
                                                    ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                                        =>
                                                        match ::core::cmp::PartialOrd::partial_cmp(&self.votes7,
                                                                &other.votes7) {
                                                            ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                                                =>
                                                                match ::core::cmp::PartialOrd::partial_cmp(&self.votes8,
                                                                        &other.votes8) {
                                                                    ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                                                        =>
                                                                        match ::core::cmp::PartialOrd::partial_cmp(&self.votes9,
                                                                                &other.votes9) {
                                                                            ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                                                                =>
                                                                                match ::core::cmp::PartialOrd::partial_cmp(&self.votes10,
                                                                                        &other.votes10) {
                                                                                    ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                                                                        =>
                                                                                        match ::core::cmp::PartialOrd::partial_cmp(&self.votes11,
                                                                                                &other.votes11) {
                                                                                            ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                                                                                =>
                                                                                                match ::core::cmp::PartialOrd::partial_cmp(&self.votes12,
                                                                                                        &other.votes12) {
                                                                                                    ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                                                                                        =>
                                                                                                        match ::core::cmp::PartialOrd::partial_cmp(&self.votes13,
                                                                                                                &other.votes13) {
                                                                                                            ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                                                                                                =>
                                                                                                                match ::core::cmp::PartialOrd::partial_cmp(&self.votes14,
                                                                                                                        &other.votes14) {
                                                                                                                    ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                                                                                                        =>
                                                                                                                        match ::core::cmp::PartialOrd::partial_cmp(&self.votes15,
                                                                                                                                &other.votes15) {
                                                                                                                            ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                                                                                                                =>
                                                                                                                                ::core::cmp::PartialOrd::partial_cmp(&self.votes16,
                                                                                                                                    &other.votes16),
                                                                                                                            cmp => cmp,
                                                                                                                        },
                                                                                                                    cmp => cmp,
                                                                                                                },
                                                                                                            cmp => cmp,
                                                                                                        },
                                                                                                    cmp => cmp,
                                                                                                },
                                                                                            cmp => cmp,
                                                                                        },
                                                                                    cmp => cmp,
                                                                                },
                                                                            cmp => cmp,
                                                                        },
                                                                    cmp => cmp,
                                                                },
                                                            cmp => cmp,
                                                        },
                                                    cmp => cmp,
                                                },
                                            cmp => cmp,
                                        },
                                    cmp => cmp,
                                },
                            cmp => cmp,
                        },
                    cmp => cmp,
                },
            cmp => cmp,
        }
    }
}
#[automatically_derived]
impl ::core::cmp::Ord for NposSolution16 {
    #[inline]
    fn cmp(&self, other: &NposSolution16) -> ::core::cmp::Ordering {
        match ::core::cmp::Ord::cmp(&self.votes1, &other.votes1) {
            ::core::cmp::Ordering::Equal =>
                match ::core::cmp::Ord::cmp(&self.votes2, &other.votes2) {
                    ::core::cmp::Ordering::Equal =>
                        match ::core::cmp::Ord::cmp(&self.votes3, &other.votes3) {
                            ::core::cmp::Ordering::Equal =>
                                match ::core::cmp::Ord::cmp(&self.votes4, &other.votes4) {
                                    ::core::cmp::Ordering::Equal =>
                                        match ::core::cmp::Ord::cmp(&self.votes5, &other.votes5) {
                                            ::core::cmp::Ordering::Equal =>
                                                match ::core::cmp::Ord::cmp(&self.votes6, &other.votes6) {
                                                    ::core::cmp::Ordering::Equal =>
                                                        match ::core::cmp::Ord::cmp(&self.votes7, &other.votes7) {
                                                            ::core::cmp::Ordering::Equal =>
                                                                match ::core::cmp::Ord::cmp(&self.votes8, &other.votes8) {
                                                                    ::core::cmp::Ordering::Equal =>
                                                                        match ::core::cmp::Ord::cmp(&self.votes9, &other.votes9) {
                                                                            ::core::cmp::Ordering::Equal =>
                                                                                match ::core::cmp::Ord::cmp(&self.votes10, &other.votes10) {
                                                                                    ::core::cmp::Ordering::Equal =>
                                                                                        match ::core::cmp::Ord::cmp(&self.votes11, &other.votes11) {
                                                                                            ::core::cmp::Ordering::Equal =>
                                                                                                match ::core::cmp::Ord::cmp(&self.votes12, &other.votes12) {
                                                                                                    ::core::cmp::Ordering::Equal =>
                                                                                                        match ::core::cmp::Ord::cmp(&self.votes13, &other.votes13) {
                                                                                                            ::core::cmp::Ordering::Equal =>
                                                                                                                match ::core::cmp::Ord::cmp(&self.votes14, &other.votes14) {
                                                                                                                    ::core::cmp::Ordering::Equal =>
                                                                                                                        match ::core::cmp::Ord::cmp(&self.votes15, &other.votes15) {
                                                                                                                            ::core::cmp::Ordering::Equal =>
                                                                                                                                ::core::cmp::Ord::cmp(&self.votes16, &other.votes16),
                                                                                                                            cmp => cmp,
                                                                                                                        },
                                                                                                                    cmp => cmp,
                                                                                                                },
                                                                                                            cmp => cmp,
                                                                                                        },
                                                                                                    cmp => cmp,
                                                                                                },
                                                                                            cmp => cmp,
                                                                                        },
                                                                                    cmp => cmp,
                                                                                },
                                                                            cmp => cmp,
                                                                        },
                                                                    cmp => cmp,
                                                                },
                                                            cmp => cmp,
                                                        },
                                                    cmp => cmp,
                                                },
                                            cmp => cmp,
                                        },
                                    cmp => cmp,
                                },
                            cmp => cmp,
                        },
                    cmp => cmp,
                },
            cmp => cmp,
        }
    }
}
use _fepsp::__OrInvalidIndex;
impl _feps::NposSolution for NposSolution16 {
    const LIMIT: usize = 16usize;
    type VoterIndex = u32;
    type TargetIndex = u16;
    type Accuracy = sp_runtime::PerU16;
    fn remove_voter(&mut self, to_remove: Self::VoterIndex) -> bool {
        if let Some(idx) =
                    self.votes1.iter().position(|(x, _)| *x == to_remove) {
                self.votes1.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes2.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes2.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes3.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes3.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes4.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes4.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes5.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes5.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes6.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes6.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes7.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes7.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes8.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes8.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes9.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes9.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes10.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes10.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes11.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes11.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes12.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes12.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes13.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes13.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes14.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes14.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes15.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes15.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes16.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes16.remove(idx);
                return true
            }
        return false
    }
    fn from_assignment<FV, FT,
        A>(assignments: &[_feps::Assignment<A, sp_runtime::PerU16>],
        voter_index: FV, target_index: FT) -> Result<Self, _feps::Error> where
        A: _feps::IdentifierT, for<'r> FV: Fn(&'r A)
        -> Option<Self::VoterIndex>, for<'r> FT: Fn(&'r A)
        -> Option<Self::TargetIndex> {
        if assignments.len() as u32 >
                    <MaxElectingVoters as _feps::Get<u32>>::get() {
                return Err(_feps::Error::TooManyVoters);
            }
        let mut solution: NposSolution16 = Default::default();
        for _feps::Assignment { who, distribution } in assignments {
            match distribution.len() {
                0 => continue,
                1 =>
                    solution.votes1.push((voter_index(&who).or_invalid_index()?,
                            target_index(&distribution[0].0).or_invalid_index()?)),
                2usize =>
                    solution.votes2.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1)],
                            target_index(&distribution[1usize].0).or_invalid_index()?)),
                3usize =>
                    solution.votes3.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1)],
                            target_index(&distribution[2usize].0).or_invalid_index()?)),
                4usize =>
                    solution.votes4.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1)],
                            target_index(&distribution[3usize].0).or_invalid_index()?)),
                5usize =>
                    solution.votes5.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1),
                                    (target_index(&distribution[3usize].0).or_invalid_index()?,
                                        distribution[3usize].1)],
                            target_index(&distribution[4usize].0).or_invalid_index()?)),
                6usize =>
                    solution.votes6.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1),
                                    (target_index(&distribution[3usize].0).or_invalid_index()?,
                                        distribution[3usize].1),
                                    (target_index(&distribution[4usize].0).or_invalid_index()?,
                                        distribution[4usize].1)],
                            target_index(&distribution[5usize].0).or_invalid_index()?)),
                7usize =>
                    solution.votes7.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1),
                                    (target_index(&distribution[3usize].0).or_invalid_index()?,
                                        distribution[3usize].1),
                                    (target_index(&distribution[4usize].0).or_invalid_index()?,
                                        distribution[4usize].1),
                                    (target_index(&distribution[5usize].0).or_invalid_index()?,
                                        distribution[5usize].1)],
                            target_index(&distribution[6usize].0).or_invalid_index()?)),
                8usize =>
                    solution.votes8.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1),
                                    (target_index(&distribution[3usize].0).or_invalid_index()?,
                                        distribution[3usize].1),
                                    (target_index(&distribution[4usize].0).or_invalid_index()?,
                                        distribution[4usize].1),
                                    (target_index(&distribution[5usize].0).or_invalid_index()?,
                                        distribution[5usize].1),
                                    (target_index(&distribution[6usize].0).or_invalid_index()?,
                                        distribution[6usize].1)],
                            target_index(&distribution[7usize].0).or_invalid_index()?)),
                9usize =>
                    solution.votes9.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1),
                                    (target_index(&distribution[3usize].0).or_invalid_index()?,
                                        distribution[3usize].1),
                                    (target_index(&distribution[4usize].0).or_invalid_index()?,
                                        distribution[4usize].1),
                                    (target_index(&distribution[5usize].0).or_invalid_index()?,
                                        distribution[5usize].1),
                                    (target_index(&distribution[6usize].0).or_invalid_index()?,
                                        distribution[6usize].1),
                                    (target_index(&distribution[7usize].0).or_invalid_index()?,
                                        distribution[7usize].1)],
                            target_index(&distribution[8usize].0).or_invalid_index()?)),
                10usize =>
                    solution.votes10.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1),
                                    (target_index(&distribution[3usize].0).or_invalid_index()?,
                                        distribution[3usize].1),
                                    (target_index(&distribution[4usize].0).or_invalid_index()?,
                                        distribution[4usize].1),
                                    (target_index(&distribution[5usize].0).or_invalid_index()?,
                                        distribution[5usize].1),
                                    (target_index(&distribution[6usize].0).or_invalid_index()?,
                                        distribution[6usize].1),
                                    (target_index(&distribution[7usize].0).or_invalid_index()?,
                                        distribution[7usize].1),
                                    (target_index(&distribution[8usize].0).or_invalid_index()?,
                                        distribution[8usize].1)],
                            target_index(&distribution[9usize].0).or_invalid_index()?)),
                11usize =>
                    solution.votes11.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1),
                                    (target_index(&distribution[3usize].0).or_invalid_index()?,
                                        distribution[3usize].1),
                                    (target_index(&distribution[4usize].0).or_invalid_index()?,
                                        distribution[4usize].1),
                                    (target_index(&distribution[5usize].0).or_invalid_index()?,
                                        distribution[5usize].1),
                                    (target_index(&distribution[6usize].0).or_invalid_index()?,
                                        distribution[6usize].1),
                                    (target_index(&distribution[7usize].0).or_invalid_index()?,
                                        distribution[7usize].1),
                                    (target_index(&distribution[8usize].0).or_invalid_index()?,
                                        distribution[8usize].1),
                                    (target_index(&distribution[9usize].0).or_invalid_index()?,
                                        distribution[9usize].1)],
                            target_index(&distribution[10usize].0).or_invalid_index()?)),
                12usize =>
                    solution.votes12.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1),
                                    (target_index(&distribution[3usize].0).or_invalid_index()?,
                                        distribution[3usize].1),
                                    (target_index(&distribution[4usize].0).or_invalid_index()?,
                                        distribution[4usize].1),
                                    (target_index(&distribution[5usize].0).or_invalid_index()?,
                                        distribution[5usize].1),
                                    (target_index(&distribution[6usize].0).or_invalid_index()?,
                                        distribution[6usize].1),
                                    (target_index(&distribution[7usize].0).or_invalid_index()?,
                                        distribution[7usize].1),
                                    (target_index(&distribution[8usize].0).or_invalid_index()?,
                                        distribution[8usize].1),
                                    (target_index(&distribution[9usize].0).or_invalid_index()?,
                                        distribution[9usize].1),
                                    (target_index(&distribution[10usize].0).or_invalid_index()?,
                                        distribution[10usize].1)],
                            target_index(&distribution[11usize].0).or_invalid_index()?)),
                13usize =>
                    solution.votes13.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1),
                                    (target_index(&distribution[3usize].0).or_invalid_index()?,
                                        distribution[3usize].1),
                                    (target_index(&distribution[4usize].0).or_invalid_index()?,
                                        distribution[4usize].1),
                                    (target_index(&distribution[5usize].0).or_invalid_index()?,
                                        distribution[5usize].1),
                                    (target_index(&distribution[6usize].0).or_invalid_index()?,
                                        distribution[6usize].1),
                                    (target_index(&distribution[7usize].0).or_invalid_index()?,
                                        distribution[7usize].1),
                                    (target_index(&distribution[8usize].0).or_invalid_index()?,
                                        distribution[8usize].1),
                                    (target_index(&distribution[9usize].0).or_invalid_index()?,
                                        distribution[9usize].1),
                                    (target_index(&distribution[10usize].0).or_invalid_index()?,
                                        distribution[10usize].1),
                                    (target_index(&distribution[11usize].0).or_invalid_index()?,
                                        distribution[11usize].1)],
                            target_index(&distribution[12usize].0).or_invalid_index()?)),
                14usize =>
                    solution.votes14.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1),
                                    (target_index(&distribution[3usize].0).or_invalid_index()?,
                                        distribution[3usize].1),
                                    (target_index(&distribution[4usize].0).or_invalid_index()?,
                                        distribution[4usize].1),
                                    (target_index(&distribution[5usize].0).or_invalid_index()?,
                                        distribution[5usize].1),
                                    (target_index(&distribution[6usize].0).or_invalid_index()?,
                                        distribution[6usize].1),
                                    (target_index(&distribution[7usize].0).or_invalid_index()?,
                                        distribution[7usize].1),
                                    (target_index(&distribution[8usize].0).or_invalid_index()?,
                                        distribution[8usize].1),
                                    (target_index(&distribution[9usize].0).or_invalid_index()?,
                                        distribution[9usize].1),
                                    (target_index(&distribution[10usize].0).or_invalid_index()?,
                                        distribution[10usize].1),
                                    (target_index(&distribution[11usize].0).or_invalid_index()?,
                                        distribution[11usize].1),
                                    (target_index(&distribution[12usize].0).or_invalid_index()?,
                                        distribution[12usize].1)],
                            target_index(&distribution[13usize].0).or_invalid_index()?)),
                15usize =>
                    solution.votes15.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1),
                                    (target_index(&distribution[3usize].0).or_invalid_index()?,
                                        distribution[3usize].1),
                                    (target_index(&distribution[4usize].0).or_invalid_index()?,
                                        distribution[4usize].1),
                                    (target_index(&distribution[5usize].0).or_invalid_index()?,
                                        distribution[5usize].1),
                                    (target_index(&distribution[6usize].0).or_invalid_index()?,
                                        distribution[6usize].1),
                                    (target_index(&distribution[7usize].0).or_invalid_index()?,
                                        distribution[7usize].1),
                                    (target_index(&distribution[8usize].0).or_invalid_index()?,
                                        distribution[8usize].1),
                                    (target_index(&distribution[9usize].0).or_invalid_index()?,
                                        distribution[9usize].1),
                                    (target_index(&distribution[10usize].0).or_invalid_index()?,
                                        distribution[10usize].1),
                                    (target_index(&distribution[11usize].0).or_invalid_index()?,
                                        distribution[11usize].1),
                                    (target_index(&distribution[12usize].0).or_invalid_index()?,
                                        distribution[12usize].1),
                                    (target_index(&distribution[13usize].0).or_invalid_index()?,
                                        distribution[13usize].1)],
                            target_index(&distribution[14usize].0).or_invalid_index()?)),
                16usize =>
                    solution.votes16.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1),
                                    (target_index(&distribution[3usize].0).or_invalid_index()?,
                                        distribution[3usize].1),
                                    (target_index(&distribution[4usize].0).or_invalid_index()?,
                                        distribution[4usize].1),
                                    (target_index(&distribution[5usize].0).or_invalid_index()?,
                                        distribution[5usize].1),
                                    (target_index(&distribution[6usize].0).or_invalid_index()?,
                                        distribution[6usize].1),
                                    (target_index(&distribution[7usize].0).or_invalid_index()?,
                                        distribution[7usize].1),
                                    (target_index(&distribution[8usize].0).or_invalid_index()?,
                                        distribution[8usize].1),
                                    (target_index(&distribution[9usize].0).or_invalid_index()?,
                                        distribution[9usize].1),
                                    (target_index(&distribution[10usize].0).or_invalid_index()?,
                                        distribution[10usize].1),
                                    (target_index(&distribution[11usize].0).or_invalid_index()?,
                                        distribution[11usize].1),
                                    (target_index(&distribution[12usize].0).or_invalid_index()?,
                                        distribution[12usize].1),
                                    (target_index(&distribution[13usize].0).or_invalid_index()?,
                                        distribution[13usize].1),
                                    (target_index(&distribution[14usize].0).or_invalid_index()?,
                                        distribution[14usize].1)],
                            target_index(&distribution[15usize].0).or_invalid_index()?)),
                _ => { return Err(_feps::Error::SolutionTargetOverflow); }
            }
        };
        Ok(solution)
    }
    fn into_assignment<A: _feps::IdentifierT>(self,
        voter_at: impl Fn(Self::VoterIndex) -> Option<A>,
        target_at: impl Fn(Self::TargetIndex) -> Option<A>)
        ->
            Result<_fepsp::sp_std::prelude::Vec<_feps::Assignment<A,
            sp_runtime::PerU16>>, _feps::Error> {
        let mut all_assignments:
                _fepsp::sp_std::prelude::Vec<_feps::Assignment<A,
                sp_runtime::PerU16>> = Default::default();
        for (voter_index, target_index) in self.votes1 {
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([(target_at(target_index).or_invalid_index()?,
                                        sp_runtime::PerU16::one())])),
                })
        }
        for (voter_index, inners, t_last_idx) in self.votes2 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _fepsp::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_fepsp::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _fepsp::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes3 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _fepsp::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_fepsp::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _fepsp::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes4 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _fepsp::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_fepsp::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _fepsp::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes5 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _fepsp::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_fepsp::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _fepsp::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes6 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _fepsp::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_fepsp::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _fepsp::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes7 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _fepsp::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_fepsp::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _fepsp::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes8 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _fepsp::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_fepsp::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _fepsp::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes9 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _fepsp::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_fepsp::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _fepsp::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes10 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _fepsp::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_fepsp::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _fepsp::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes11 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _fepsp::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_fepsp::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _fepsp::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes12 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _fepsp::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_fepsp::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _fepsp::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes13 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _fepsp::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_fepsp::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _fepsp::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes14 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _fepsp::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_fepsp::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _fepsp::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes15 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _fepsp::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_fepsp::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _fepsp::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes16 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _fepsp::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_fepsp::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _fepsp::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        Ok(all_assignments)
    }
    fn voter_count(&self) -> usize {
        let mut all_len = 0usize;
        all_len = all_len.saturating_add(self.votes1.len());
        all_len = all_len.saturating_add(self.votes2.len());
        all_len = all_len.saturating_add(self.votes3.len());
        all_len = all_len.saturating_add(self.votes4.len());
        all_len = all_len.saturating_add(self.votes5.len());
        all_len = all_len.saturating_add(self.votes6.len());
        all_len = all_len.saturating_add(self.votes7.len());
        all_len = all_len.saturating_add(self.votes8.len());
        all_len = all_len.saturating_add(self.votes9.len());
        all_len = all_len.saturating_add(self.votes10.len());
        all_len = all_len.saturating_add(self.votes11.len());
        all_len = all_len.saturating_add(self.votes12.len());
        all_len = all_len.saturating_add(self.votes13.len());
        all_len = all_len.saturating_add(self.votes14.len());
        all_len = all_len.saturating_add(self.votes15.len());
        all_len = all_len.saturating_add(self.votes16.len());
        all_len
    }
    fn edge_count(&self) -> usize {
        let mut all_edges = 0usize;
        all_edges =
            all_edges.saturating_add(self.votes1.len().saturating_mul(1usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes2.len().saturating_mul(2usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes3.len().saturating_mul(3usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes4.len().saturating_mul(4usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes5.len().saturating_mul(5usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes6.len().saturating_mul(6usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes7.len().saturating_mul(7usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes8.len().saturating_mul(8usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes9.len().saturating_mul(9usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes10.len().saturating_mul(10usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes11.len().saturating_mul(11usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes12.len().saturating_mul(12usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes13.len().saturating_mul(13usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes14.len().saturating_mul(14usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes15.len().saturating_mul(15usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes16.len().saturating_mul(16usize
                        as usize));
        all_edges
    }
    fn unique_targets(&self)
        -> _fepsp::sp_std::prelude::Vec<Self::TargetIndex> {
        use _fepsp::sp_std::collections::btree_set::BTreeSet;
        let mut all_targets: BTreeSet<Self::TargetIndex> = BTreeSet::new();
        let mut maybe_insert_target =
            |t: Self::TargetIndex| { all_targets.insert(t); };
        self.votes1.iter().for_each(|(_, t)| { maybe_insert_target(*t); });
        self.votes2.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes3.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes4.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes5.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes6.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes7.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes8.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes9.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes10.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes11.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes12.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes13.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes14.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes15.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes16.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        all_targets.into_iter().collect()
    }
}
type __IndexAssignment =
    _feps::IndexAssignment<<NposSolution16 as
    _feps::NposSolution>::VoterIndex,
    <NposSolution16 as _feps::NposSolution>::TargetIndex,
    <NposSolution16 as _feps::NposSolution>::Accuracy>;
impl _fepsp::codec::MaxEncodedLen for NposSolution16 {
    fn max_encoded_len() -> usize {
        use frame_support::traits::Get;
        use _fepsp::codec::Encode;
        let s: u32 = MaxElectingVoters::get();
        let max_element_size =
            u32::max_encoded_len().saturating_add((16usize -
                                1).saturating_mul(u16::max_encoded_len().saturating_add(sp_runtime::PerU16::max_encoded_len()))).saturating_add(u16::max_encoded_len());
        16usize.saturating_mul(_fepsp::codec::Compact(0u32).encoded_size()).saturating_add((s
                        as usize).saturating_mul(max_element_size))
    }
}
impl<'a> _fepsp::sp_std::convert::TryFrom<&'a [__IndexAssignment]> for
    NposSolution16 {
    type Error = _feps::Error;
    fn try_from(index_assignments: &'a [__IndexAssignment])
        -> Result<Self, Self::Error> {
        let mut solution = NposSolution16::default();
        for _feps::IndexAssignment { who, distribution } in index_assignments
            {
            match distribution.len() {
                0 => {}
                1 => solution.votes1.push((*who, distribution[0].0)),
                2usize =>
                    solution.votes2.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1)],
                            distribution[1usize].0)),
                3usize =>
                    solution.votes3.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1)],
                            distribution[2usize].0)),
                4usize =>
                    solution.votes4.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1)],
                            distribution[3usize].0)),
                5usize =>
                    solution.votes5.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1),
                                    (distribution[3usize].0, distribution[3usize].1)],
                            distribution[4usize].0)),
                6usize =>
                    solution.votes6.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1),
                                    (distribution[3usize].0, distribution[3usize].1),
                                    (distribution[4usize].0, distribution[4usize].1)],
                            distribution[5usize].0)),
                7usize =>
                    solution.votes7.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1),
                                    (distribution[3usize].0, distribution[3usize].1),
                                    (distribution[4usize].0, distribution[4usize].1),
                                    (distribution[5usize].0, distribution[5usize].1)],
                            distribution[6usize].0)),
                8usize =>
                    solution.votes8.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1),
                                    (distribution[3usize].0, distribution[3usize].1),
                                    (distribution[4usize].0, distribution[4usize].1),
                                    (distribution[5usize].0, distribution[5usize].1),
                                    (distribution[6usize].0, distribution[6usize].1)],
                            distribution[7usize].0)),
                9usize =>
                    solution.votes9.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1),
                                    (distribution[3usize].0, distribution[3usize].1),
                                    (distribution[4usize].0, distribution[4usize].1),
                                    (distribution[5usize].0, distribution[5usize].1),
                                    (distribution[6usize].0, distribution[6usize].1),
                                    (distribution[7usize].0, distribution[7usize].1)],
                            distribution[8usize].0)),
                10usize =>
                    solution.votes10.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1),
                                    (distribution[3usize].0, distribution[3usize].1),
                                    (distribution[4usize].0, distribution[4usize].1),
                                    (distribution[5usize].0, distribution[5usize].1),
                                    (distribution[6usize].0, distribution[6usize].1),
                                    (distribution[7usize].0, distribution[7usize].1),
                                    (distribution[8usize].0, distribution[8usize].1)],
                            distribution[9usize].0)),
                11usize =>
                    solution.votes11.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1),
                                    (distribution[3usize].0, distribution[3usize].1),
                                    (distribution[4usize].0, distribution[4usize].1),
                                    (distribution[5usize].0, distribution[5usize].1),
                                    (distribution[6usize].0, distribution[6usize].1),
                                    (distribution[7usize].0, distribution[7usize].1),
                                    (distribution[8usize].0, distribution[8usize].1),
                                    (distribution[9usize].0, distribution[9usize].1)],
                            distribution[10usize].0)),
                12usize =>
                    solution.votes12.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1),
                                    (distribution[3usize].0, distribution[3usize].1),
                                    (distribution[4usize].0, distribution[4usize].1),
                                    (distribution[5usize].0, distribution[5usize].1),
                                    (distribution[6usize].0, distribution[6usize].1),
                                    (distribution[7usize].0, distribution[7usize].1),
                                    (distribution[8usize].0, distribution[8usize].1),
                                    (distribution[9usize].0, distribution[9usize].1),
                                    (distribution[10usize].0, distribution[10usize].1)],
                            distribution[11usize].0)),
                13usize =>
                    solution.votes13.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1),
                                    (distribution[3usize].0, distribution[3usize].1),
                                    (distribution[4usize].0, distribution[4usize].1),
                                    (distribution[5usize].0, distribution[5usize].1),
                                    (distribution[6usize].0, distribution[6usize].1),
                                    (distribution[7usize].0, distribution[7usize].1),
                                    (distribution[8usize].0, distribution[8usize].1),
                                    (distribution[9usize].0, distribution[9usize].1),
                                    (distribution[10usize].0, distribution[10usize].1),
                                    (distribution[11usize].0, distribution[11usize].1)],
                            distribution[12usize].0)),
                14usize =>
                    solution.votes14.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1),
                                    (distribution[3usize].0, distribution[3usize].1),
                                    (distribution[4usize].0, distribution[4usize].1),
                                    (distribution[5usize].0, distribution[5usize].1),
                                    (distribution[6usize].0, distribution[6usize].1),
                                    (distribution[7usize].0, distribution[7usize].1),
                                    (distribution[8usize].0, distribution[8usize].1),
                                    (distribution[9usize].0, distribution[9usize].1),
                                    (distribution[10usize].0, distribution[10usize].1),
                                    (distribution[11usize].0, distribution[11usize].1),
                                    (distribution[12usize].0, distribution[12usize].1)],
                            distribution[13usize].0)),
                15usize =>
                    solution.votes15.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1),
                                    (distribution[3usize].0, distribution[3usize].1),
                                    (distribution[4usize].0, distribution[4usize].1),
                                    (distribution[5usize].0, distribution[5usize].1),
                                    (distribution[6usize].0, distribution[6usize].1),
                                    (distribution[7usize].0, distribution[7usize].1),
                                    (distribution[8usize].0, distribution[8usize].1),
                                    (distribution[9usize].0, distribution[9usize].1),
                                    (distribution[10usize].0, distribution[10usize].1),
                                    (distribution[11usize].0, distribution[11usize].1),
                                    (distribution[12usize].0, distribution[12usize].1),
                                    (distribution[13usize].0, distribution[13usize].1)],
                            distribution[14usize].0)),
                16usize =>
                    solution.votes16.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1),
                                    (distribution[3usize].0, distribution[3usize].1),
                                    (distribution[4usize].0, distribution[4usize].1),
                                    (distribution[5usize].0, distribution[5usize].1),
                                    (distribution[6usize].0, distribution[6usize].1),
                                    (distribution[7usize].0, distribution[7usize].1),
                                    (distribution[8usize].0, distribution[8usize].1),
                                    (distribution[9usize].0, distribution[9usize].1),
                                    (distribution[10usize].0, distribution[10usize].1),
                                    (distribution[11usize].0, distribution[11usize].1),
                                    (distribution[12usize].0, distribution[12usize].1),
                                    (distribution[13usize].0, distribution[13usize].1),
                                    (distribution[14usize].0, distribution[14usize].1)],
                            distribution[15usize].0)),
                _ => { return Err(_feps::Error::SolutionTargetOverflow); }
            }
        };
        Ok(solution)
    }
}
pub struct MaxNominations;
impl MaxNominations<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 {
        <NposSolution16 as NposSolution>::LIMIT as u32
    }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxNominations<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxNominations<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxElectingVoters;
impl MaxElectingVoters<> {
    /// Returns the value of this parameter type.
    pub fn get() -> u32 { 40_000 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxElectingVoters<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxElectingVoters<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
#[doc =
r" We take the top 40_000 nominators as electing voters and all of the validators as electable"]
#[doc =
r" targets. Whilst this is the case, we cannot and shall not increase the size of the"]
#[doc = r" validator intentions."]
pub struct ElectionBounds;
impl ElectionBounds<> {
    /// Returns the value of this parameter type.
    pub fn get() -> frame_election_provider_support::bounds::ElectionBounds {
        ElectionBoundsBuilder::default().voters_count(MaxElectingVoters::get().into()).build()
    }
}
impl<_I: From<frame_election_provider_support::bounds::ElectionBounds>>
    ::frame_support::traits::Get<_I> for ElectionBounds<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ElectionBounds<> {
    type Type = frame_election_provider_support::bounds::ElectionBounds;
    fn get() -> frame_election_provider_support::bounds::ElectionBounds {
        Self::get()
    }
}
pub struct MaxOnChainElectingVoters;
impl MaxOnChainElectingVoters<> {
    /// Returns the value of this parameter type.
    pub fn get() -> u32 { 5000 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for
    MaxOnChainElectingVoters<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxOnChainElectingVoters<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxOnChainElectableTargets;
impl MaxOnChainElectableTargets<> {
    /// Returns the value of this parameter type.
    pub fn get() -> u16 { 1250 }
}
impl<_I: From<u16>> ::frame_support::traits::Get<_I> for
    MaxOnChainElectableTargets<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxOnChainElectableTargets<> {
    type Type = u16;
    fn get() -> u16 { Self::get() }
}
pub struct MaxActiveValidators;
impl MaxActiveValidators<> {
    /// Returns the value of this parameter type.
    pub fn get() -> u32 { 1000 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxActiveValidators<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxActiveValidators<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct OnChainSeqPhragmen;
impl onchain::Config for OnChainSeqPhragmen {
    type System = Runtime;
    type Solver =
        SequentialPhragmen<AccountId,
        pallet_election_provider_multi_phase::SolutionAccuracyOf<Runtime>>;
    type DataProvider =
        <Runtime as
        pallet_election_provider_multi_phase::Config>::DataProvider;
    type WeightInfo =
        frame_election_provider_support::weights::SubstrateWeight<Runtime>;
    type MaxWinners =
        <Runtime as pallet_election_provider_multi_phase::Config>::MaxWinners;
    type Bounds = ElectionBounds;
}
impl pallet_election_provider_multi_phase::MinerConfig for Runtime {
    type AccountId = AccountId;
    type MaxLength = MinerMaxLength;
    type MaxWeight = MinerMaxWeight;
    type Solution = NposSolution16;
    type MaxVotesPerVoter =
        <<Self as pallet_election_provider_multi_phase::Config>::DataProvider
        as ElectionDataProvider>::MaxVotesPerVoter;
    type MaxWinners = MaxActiveValidators;
    fn solution_weight(v: u32, t: u32, a: u32, d: u32) -> Weight {
        <<Self as pallet_election_provider_multi_phase::Config>::WeightInfo as
                pallet_election_provider_multi_phase::WeightInfo>::submit_unsigned(v,
            t, a, d)
    }
}
pub struct ElectionProviderBenchmarkConfig;
impl pallet_election_provider_multi_phase::BenchmarkingConfig for
    ElectionProviderBenchmarkConfig {
    const VOTERS: [u32; 2] = [1000, 2000];
    const TARGETS: [u32; 2] = [500, 1000];
    const ACTIVE_VOTERS: [u32; 2] = [500, 800];
    const DESIRED_TARGETS: [u32; 2] = [200, 400];
    const SNAPSHOT_MAXIMUM_VOTERS: u32 = 1000;
    const MINER_MAXIMUM_VOTERS: u32 = 1000;
    const MAXIMUM_TARGETS: u32 = 300;
}
impl pallet_election_provider_multi_phase::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type Currency = Balances;
    type EstimateCallFee = TransactionPayment;
    type SignedPhase = SignedPhase;
    type UnsignedPhase = UnsignedPhase;
    type BetterUnsignedThreshold = BetterUnsignedThreshold;
    type BetterSignedThreshold = ();
    type OffchainRepeat = OffchainRepeat;
    type MinerTxPriority = MultiPhaseUnsignedPriority;
    type MinerConfig = Self;
    type SignedMaxSubmissions = ConstU32<10>;
    type SignedRewardBase = SignedRewardBase;
    type SignedDepositBase = SignedDepositBase;
    type SignedDepositByte = SignedDepositByte;
    type SignedMaxRefunds = ConstU32<3>;
    type SignedDepositWeight = ();
    type SignedMaxWeight = MinerMaxWeight;
    type SlashHandler = Treasury;
    type RewardHandler = StakingRewards;
    type DataProvider = Staking;
    type Fallback = onchain::OnChainExecution<OnChainSeqPhragmen>;
    type GovernanceFallback = onchain::OnChainExecution<OnChainSeqPhragmen>;
    type Solver = SequentialPhragmen<AccountId, SolutionAccuracyOf<Self>, ()>;
    type ForceOrigin = AdminOrigin;
    type MaxWinners = MaxActiveValidators;
    type ElectionBounds = ElectionBounds;
    type BenchmarkingConfig = ElectionProviderBenchmarkConfig;
    type WeightInfo =
        pallet_election_provider_multi_phase::weights::SubstrateWeight<Self>;
}
pub struct SessionsPerEra;
impl SessionsPerEra<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> sp_staking::SessionIndex { 6 }
}
impl<_I: From<sp_staking::SessionIndex>> ::frame_support::traits::Get<_I> for
    SessionsPerEra<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for SessionsPerEra<> {
    type Type = sp_staking::SessionIndex;
    fn get() -> sp_staking::SessionIndex { Self::get() }
}
pub struct BondingDuration;
impl BondingDuration<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> sp_staking::EraIndex { 14 }
}
impl<_I: From<sp_staking::EraIndex>> ::frame_support::traits::Get<_I> for
    BondingDuration<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for BondingDuration<> {
    type Type = sp_staking::EraIndex;
    fn get() -> sp_staking::EraIndex { Self::get() }
}
pub struct SlashDeferDuration;
impl SlashDeferDuration<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> sp_staking::EraIndex { 13 }
}
impl<_I: From<sp_staking::EraIndex>> ::frame_support::traits::Get<_I> for
    SlashDeferDuration<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for SlashDeferDuration<> {
    type Type = sp_staking::EraIndex;
    fn get() -> sp_staking::EraIndex { Self::get() }
}
pub struct MaxNominatorRewardedPerValidator;
impl MaxNominatorRewardedPerValidator<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 256 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for
    MaxNominatorRewardedPerValidator<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxNominatorRewardedPerValidator<>
    {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct OffendingValidatorsThreshold;
impl OffendingValidatorsThreshold<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Perbill { Perbill::from_percent(17) }
}
impl<_I: From<Perbill>> ::frame_support::traits::Get<_I> for
    OffendingValidatorsThreshold<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for OffendingValidatorsThreshold<> {
    type Type = Perbill;
    fn get() -> Perbill { Self::get() }
}
pub struct OffchainRepeat;
impl OffchainRepeat<> {
    /// Returns the value of this parameter type.
    pub fn get() -> BlockNumber { UnsignedPhase::get() / 16 }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    OffchainRepeat<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for OffchainRepeat<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct HistoryDepth;
impl HistoryDepth<> {
    /// Returns the value of this parameter type.
    pub fn get() -> u32 { 84 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for HistoryDepth<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for HistoryDepth<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
/// Only the root or staking admin origin can cancel the slash or manage election provider
type AdminOrigin = EitherOfDiverse<EnsureRoot<AccountId>, StakingAdmin>;
pub struct StakingBenchmarkingConfig;
impl pallet_staking::BenchmarkingConfig for StakingBenchmarkingConfig {
    type MaxNominators = ConstU32<1000>;
    type MaxValidators = ConstU32<1000>;
}
impl pallet_staking::Config for Runtime {
    type Currency = Balances;
    type CurrencyBalance = Balance;
    type UnixTime = Timestamp;
    type CurrencyToVote = sp_staking::currency_to_vote::U128CurrencyToVote;
    type ElectionProvider = ElectionProviderMultiPhase;
    type GenesisElectionProvider =
        onchain::OnChainExecution<OnChainSeqPhragmen>;
    type RewardRemainder = ();
    type RuntimeEvent = RuntimeEvent;
    type Slash = Treasury;
    type Reward = StakingRewards;
    type SessionsPerEra = SessionsPerEra;
    type BondingDuration = BondingDuration;
    type SlashDeferDuration = SlashDeferDuration;
    type AdminOrigin = AdminOrigin;
    type SessionInterface = Self;
    type EraPayout = StakingRewards;
    type NextNewSession = Session;
    type MaxNominatorRewardedPerValidator = MaxNominatorRewardedPerValidator;
    type OffendingValidatorsThreshold = OffendingValidatorsThreshold;
    type VoterList = BagsList;
    type TargetList = pallet_staking::UseValidatorsMap<Self>;
    type NominationsQuota =
        pallet_staking::FixedNominationsQuota<{ MaxNominations::get() }>;
    type MaxUnlockingChunks = ConstU32<32>;
    type HistoryDepth = HistoryDepth;
    type EventListeners = NominationPools;
    type WeightInfo = pallet_staking::weights::SubstrateWeight<Runtime>;
    type BenchmarkingConfig = StakingBenchmarkingConfig;
}
pub struct BagThresholds;
impl BagThresholds<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> &'static [u64] { &bag_thresholds::THRESHOLDS }
}
impl<_I: From<&'static [u64]>> ::frame_support::traits::Get<_I> for
    BagThresholds<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for BagThresholds<> {
    type Type = &'static [u64];
    fn get() -> &'static [u64] { Self::get() }
}
impl pallet_bags_list::Config<pallet_bags_list::Instance1> for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type ScoreProvider = Staking;
    type BagThresholds = BagThresholds;
    type Score = VoteWeight;
    type WeightInfo = pallet_bags_list::weights::SubstrateWeight<Runtime>;
}
pub struct NominationPoolsPalletId;
impl NominationPoolsPalletId<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> PalletId { PalletId(*b"py/nopls") }
}
impl<_I: From<PalletId>> ::frame_support::traits::Get<_I> for
    NominationPoolsPalletId<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for NominationPoolsPalletId<> {
    type Type = PalletId;
    fn get() -> PalletId { Self::get() }
}
pub struct MaxPointsToBalance;
impl MaxPointsToBalance<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u8 { 10 }
}
impl<_I: From<u8>> ::frame_support::traits::Get<_I> for MaxPointsToBalance<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxPointsToBalance<> {
    type Type = u8;
    fn get() -> u8 { Self::get() }
}
use sp_runtime::traits::Convert;
pub struct BalanceToU256;
impl Convert<Balance, sp_core::U256> for BalanceToU256 {
    fn convert(balance: Balance) -> sp_core::U256 {
        sp_core::U256::from(balance)
    }
}
pub struct U256ToBalance;
impl Convert<sp_core::U256, Balance> for U256ToBalance {
    fn convert(n: sp_core::U256) -> Balance {
        n.try_into().unwrap_or(Balance::max_value())
    }
}
impl pallet_nomination_pools::Config for Runtime {
    type WeightInfo = ();
    type RuntimeEvent = RuntimeEvent;
    type Currency = Balances;
    type RewardCounter = FixedU128;
    type BalanceToU256 = BalanceToU256;
    type U256ToBalance = U256ToBalance;
    type Staking = Staking;
    type PostUnbondingPoolsWindow = ConstU32<4>;
    type MaxMetadataLen = ConstU32<256>;
    type MaxUnbonding = <Self as pallet_staking::Config>::MaxUnlockingChunks;
    type PalletId = NominationPoolsPalletId;
    type MaxPointsToBalance = MaxPointsToBalance;
}
impl pallet_offences::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type IdentificationTuple =
        pallet_session_historical::IdentificationTuple<Self>;
    type OnOffenceHandler = Staking;
}
pub struct ProposalBond;
impl ProposalBond<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Permill { Permill::from_percent(5) }
}
impl<_I: From<Permill>> ::frame_support::traits::Get<_I> for ProposalBond<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ProposalBond<> {
    type Type = Permill;
    fn get() -> Permill { Self::get() }
}
pub struct ProposalBondMinimum;
impl ProposalBondMinimum<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { ECONOMIC_UNITS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    ProposalBondMinimum<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ProposalBondMinimum<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct SpendPeriod;
impl SpendPeriod<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { DAYS }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for SpendPeriod<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for SpendPeriod<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct Burn;
impl Burn<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Permill { Permill::zero() }
}
impl<_I: From<Permill>> ::frame_support::traits::Get<_I> for Burn<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for Burn<> {
    type Type = Permill;
    fn get() -> Permill { Self::get() }
}
pub struct TipCountdown;
impl TipCountdown<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { DAYS }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    TipCountdown<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for TipCountdown<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct TipFindersFee;
impl TipFindersFee<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Percent { Percent::from_percent(20) }
}
impl<_I: From<Percent>> ::frame_support::traits::Get<_I> for TipFindersFee<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for TipFindersFee<> {
    type Type = Percent;
    fn get() -> Percent { Self::get() }
}
pub struct TipReportDepositBase;
impl TipReportDepositBase<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { ECONOMIC_UNITS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    TipReportDepositBase<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for TipReportDepositBase<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct DataDepositPerByte;
impl DataDepositPerByte<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { ECONOMIC_CENTIUNITS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    DataDepositPerByte<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for DataDepositPerByte<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct TreasuryPalletId;
impl TreasuryPalletId<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> PalletId { PalletId(*b"py/trsry") }
}
impl<_I: From<PalletId>> ::frame_support::traits::Get<_I> for
    TreasuryPalletId<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for TreasuryPalletId<> {
    type Type = PalletId;
    fn get() -> PalletId { Self::get() }
}
pub struct MaximumReasonLength;
impl MaximumReasonLength<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 300 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaximumReasonLength<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaximumReasonLength<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxApprovals;
impl MaxApprovals<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 100 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxApprovals<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxApprovals<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
impl pallet_treasury::Config for Runtime {
    type PalletId = TreasuryPalletId;
    type Currency = Balances;
    type ApproveOrigin = EitherOfDiverse<EnsureRoot<AccountId>, Treasurer>;
    type RejectOrigin = EitherOfDiverse<EnsureRoot<AccountId>, Treasurer>;
    type RuntimeEvent = RuntimeEvent;
    type OnSlash = Treasury;
    type ProposalBond = ProposalBond;
    type ProposalBondMinimum = ProposalBondMinimum;
    type ProposalBondMaximum = ();
    type SpendPeriod = SpendPeriod;
    type Burn = Burn;
    type BurnDestination = ();
    type SpendFunds = Bounties;
    type WeightInfo = pallet_treasury::weights::SubstrateWeight<Runtime>;
    type MaxApprovals = MaxApprovals;
    type SpendOrigin = TreasurySpender;
}
pub struct BountyCuratorDeposit;
impl BountyCuratorDeposit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Permill { Permill::from_percent(50) }
}
impl<_I: From<Permill>> ::frame_support::traits::Get<_I> for
    BountyCuratorDeposit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for BountyCuratorDeposit<> {
    type Type = Permill;
    fn get() -> Permill { Self::get() }
}
pub struct BountyValueMinimum;
impl BountyValueMinimum<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 5 * ECONOMIC_UNITS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    BountyValueMinimum<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for BountyValueMinimum<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct BountyDepositBase;
impl BountyDepositBase<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { ECONOMIC_UNITS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    BountyDepositBase<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for BountyDepositBase<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct CuratorDepositMultiplier;
impl CuratorDepositMultiplier<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Permill { Permill::from_percent(50) }
}
impl<_I: From<Permill>> ::frame_support::traits::Get<_I> for
    CuratorDepositMultiplier<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for CuratorDepositMultiplier<> {
    type Type = Permill;
    fn get() -> Permill { Self::get() }
}
pub struct CuratorDepositMin;
impl CuratorDepositMin<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { ECONOMIC_UNITS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    CuratorDepositMin<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for CuratorDepositMin<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct CuratorDepositMax;
impl CuratorDepositMax<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 100 * ECONOMIC_UNITS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    CuratorDepositMax<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for CuratorDepositMax<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct BountyDepositPayoutDelay;
impl BountyDepositPayoutDelay<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { DAYS }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    BountyDepositPayoutDelay<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for BountyDepositPayoutDelay<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct BountyUpdatePeriod;
impl BountyUpdatePeriod<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 14 * DAYS }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    BountyUpdatePeriod<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for BountyUpdatePeriod<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
impl pallet_bounties::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type BountyDepositBase = BountyDepositBase;
    type BountyDepositPayoutDelay = BountyDepositPayoutDelay;
    type BountyUpdatePeriod = BountyUpdatePeriod;
    type CuratorDepositMultiplier = CuratorDepositMultiplier;
    type CuratorDepositMin = CuratorDepositMin;
    type CuratorDepositMax = CuratorDepositMax;
    type BountyValueMinimum = BountyValueMinimum;
    type DataDepositPerByte = DataDepositPerByte;
    type MaximumReasonLength = MaximumReasonLength;
    type WeightInfo = pallet_bounties::weights::SubstrateWeight<Runtime>;
    type ChildBountyManager = ChildBounties;
}
pub struct ChildBountyValueMinimum;
impl ChildBountyValueMinimum<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { ECONOMIC_UNITS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    ChildBountyValueMinimum<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ChildBountyValueMinimum<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
impl pallet_child_bounties::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type MaxActiveChildBountyCount = ConstU32<5>;
    type ChildBountyValueMinimum = ChildBountyValueMinimum;
    type WeightInfo =
        pallet_child_bounties::weights::SubstrateWeight<Runtime>;
}
pub struct ImOnlineUnsignedPriority;
impl ImOnlineUnsignedPriority<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> TransactionPriority {
        TransactionPriority::max_value()
    }
}
impl<_I: From<TransactionPriority>> ::frame_support::traits::Get<_I> for
    ImOnlineUnsignedPriority<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ImOnlineUnsignedPriority<> {
    type Type = TransactionPriority;
    fn get() -> TransactionPriority { Self::get() }
}
#[doc =
r" We prioritize im-online heartbeats over election solution submission."]
pub struct StakingUnsignedPriority;
impl StakingUnsignedPriority<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> TransactionPriority {
        TransactionPriority::max_value() / 2
    }
}
impl<_I: From<TransactionPriority>> ::frame_support::traits::Get<_I> for
    StakingUnsignedPriority<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for StakingUnsignedPriority<> {
    type Type = TransactionPriority;
    fn get() -> TransactionPriority { Self::get() }
}
pub struct MaxAuthorities;
impl MaxAuthorities<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 100_000 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxAuthorities<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxAuthorities<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxKeys;
impl MaxKeys<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 10_000 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxKeys<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxKeys<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxPeerInHeartbeats;
impl MaxPeerInHeartbeats<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 10_000 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxPeerInHeartbeats<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxPeerInHeartbeats<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
impl pallet_im_online::Config for Runtime {
    type AuthorityId = ImOnlineId;
    type RuntimeEvent = RuntimeEvent;
    type NextSessionRotation = Babe;
    type ValidatorSet = Historical;
    type ReportUnresponsiveness = ();
    type UnsignedPriority = ImOnlineUnsignedPriority;
    type WeightInfo = pallet_im_online::weights::SubstrateWeight<Runtime>;
    type MaxKeys = MaxKeys;
    type MaxPeerInHeartbeats = MaxPeerInHeartbeats;
}
impl pallet_authority_discovery::Config for Runtime {
    type MaxAuthorities = MaxAuthorities;
}
pub struct BasicDeposit;
impl BasicDeposit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 10 * ECONOMIC_UNITS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for BasicDeposit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for BasicDeposit<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct FieldDeposit;
impl FieldDeposit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 250 * ECONOMIC_CENTIUNITS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for FieldDeposit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for FieldDeposit<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct SubAccountDeposit;
impl SubAccountDeposit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 2 * ECONOMIC_UNITS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    SubAccountDeposit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for SubAccountDeposit<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct MaxSubAccounts;
impl MaxSubAccounts<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 100 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxSubAccounts<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxSubAccounts<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxAdditionalFields;
impl MaxAdditionalFields<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 100 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxAdditionalFields<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxAdditionalFields<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxRegistrars;
impl MaxRegistrars<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 20 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxRegistrars<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxRegistrars<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
impl pallet_identity::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type Currency = Balances;
    type BasicDeposit = BasicDeposit;
    type FieldDeposit = FieldDeposit;
    type SubAccountDeposit = SubAccountDeposit;
    type MaxSubAccounts = MaxSubAccounts;
    type MaxAdditionalFields = MaxAdditionalFields;
    type MaxRegistrars = MaxRegistrars;
    type Slashed = Treasury;
    type ForceOrigin = EitherOf<EnsureRoot<AccountId>, GeneralAdmin>;
    type RegistrarOrigin = EitherOf<EnsureRoot<AccountId>, GeneralAdmin>;
    type WeightInfo = pallet_identity::weights::SubstrateWeight<Runtime>;
}
impl pallet_utility::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type RuntimeCall = RuntimeCall;
    type WeightInfo = weights::pallet_utility::SubstrateWeight<Runtime>;
    type PalletsOrigin = OriginCaller;
}
pub struct DepositBase;
impl DepositBase<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { deposit(1, 88) }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for DepositBase<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for DepositBase<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct DepositFactor;
impl DepositFactor<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { deposit(0, 32) }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for DepositFactor<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for DepositFactor<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
impl pallet_multisig::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type RuntimeCall = RuntimeCall;
    type Currency = Balances;
    type DepositBase = DepositBase;
    type DepositFactor = DepositFactor;
    type MaxSignatories = ConstU32<100>;
    type WeightInfo = pallet_multisig::weights::SubstrateWeight<Runtime>;
}
pub struct ProxyDepositBase;
impl ProxyDepositBase<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { deposit(1, 8) }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    ProxyDepositBase<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ProxyDepositBase<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct ProxyDepositFactor;
impl ProxyDepositFactor<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { deposit(0, 33) }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    ProxyDepositFactor<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ProxyDepositFactor<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct AnnouncementDepositBase;
impl AnnouncementDepositBase<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { deposit(1, 8) }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    AnnouncementDepositBase<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for AnnouncementDepositBase<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct AnnouncementDepositFactor;
impl AnnouncementDepositFactor<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { deposit(0, 66) }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    AnnouncementDepositFactor<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for AnnouncementDepositFactor<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
/// The type used to represent the kinds of proxying allowed.
pub enum ProxyType {
    Any,
    NonTransfer,
    Governance,
    Staking,
    IdentityJudgement,
    CancelProxy,
}
#[automatically_derived]
impl ::core::marker::Copy for ProxyType { }
#[automatically_derived]
impl ::core::clone::Clone for ProxyType {
    #[inline]
    fn clone(&self) -> ProxyType { *self }
}
#[automatically_derived]
impl ::core::marker::StructuralEq for ProxyType { }
#[automatically_derived]
impl ::core::cmp::Eq for ProxyType {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {}
}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for ProxyType { }
#[automatically_derived]
impl ::core::cmp::PartialEq for ProxyType {
    #[inline]
    fn eq(&self, other: &ProxyType) -> bool {
        let __self_tag = ::core::intrinsics::discriminant_value(self);
        let __arg1_tag = ::core::intrinsics::discriminant_value(other);
        __self_tag == __arg1_tag
    }
}
#[automatically_derived]
impl ::core::cmp::Ord for ProxyType {
    #[inline]
    fn cmp(&self, other: &ProxyType) -> ::core::cmp::Ordering {
        let __self_tag = ::core::intrinsics::discriminant_value(self);
        let __arg1_tag = ::core::intrinsics::discriminant_value(other);
        ::core::cmp::Ord::cmp(&__self_tag, &__arg1_tag)
    }
}
#[automatically_derived]
impl ::core::cmp::PartialOrd for ProxyType {
    #[inline]
    fn partial_cmp(&self, other: &ProxyType)
        -> ::core::option::Option<::core::cmp::Ordering> {
        let __self_tag = ::core::intrinsics::discriminant_value(self);
        let __arg1_tag = ::core::intrinsics::discriminant_value(other);
        ::core::cmp::PartialOrd::partial_cmp(&__self_tag, &__arg1_tag)
    }
}
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::parity_scale_codec::Encode for ProxyType {
            fn size_hint(&self) -> usize {
                1_usize +
                    match *self {
                        ProxyType::Any => { 0_usize }
                        ProxyType::NonTransfer => { 0_usize }
                        ProxyType::Governance => { 0_usize }
                        ProxyType::Staking => { 0_usize }
                        ProxyType::IdentityJudgement => { 0_usize }
                        ProxyType::CancelProxy => { 0_usize }
                        _ => 0_usize,
                    }
            }
            fn encode_to<__CodecOutputEdqy: ::parity_scale_codec::Output +
                ?::core::marker::Sized>(&self,
                __codec_dest_edqy: &mut __CodecOutputEdqy) {
                match *self {
                    ProxyType::Any => {

                        #[allow(clippy :: unnecessary_cast)]
                        __codec_dest_edqy.push_byte(0usize as
                                ::core::primitive::u8);
                    }
                    ProxyType::NonTransfer => {

                        #[allow(clippy :: unnecessary_cast)]
                        __codec_dest_edqy.push_byte(1usize as
                                ::core::primitive::u8);
                    }
                    ProxyType::Governance => {

                        #[allow(clippy :: unnecessary_cast)]
                        __codec_dest_edqy.push_byte(2usize as
                                ::core::primitive::u8);
                    }
                    ProxyType::Staking => {

                        #[allow(clippy :: unnecessary_cast)]
                        __codec_dest_edqy.push_byte(3usize as
                                ::core::primitive::u8);
                    }
                    ProxyType::IdentityJudgement => {

                        #[allow(clippy :: unnecessary_cast)]
                        __codec_dest_edqy.push_byte(4usize as
                                ::core::primitive::u8);
                    }
                    ProxyType::CancelProxy => {

                        #[allow(clippy :: unnecessary_cast)]
                        __codec_dest_edqy.push_byte(5usize as
                                ::core::primitive::u8);
                    }
                    _ => (),
                }
            }
        }
        #[automatically_derived]
        impl ::parity_scale_codec::EncodeLike for ProxyType { }
    };
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::parity_scale_codec::Decode for ProxyType {
            fn decode<__CodecInputEdqy: ::parity_scale_codec::Input>(__codec_input_edqy:
                    &mut __CodecInputEdqy)
                -> ::core::result::Result<Self, ::parity_scale_codec::Error> {
                match __codec_input_edqy.read_byte().map_err(|e|
                                e.chain("Could not decode `ProxyType`, failed to read variant byte"))?
                    {
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 0usize as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        { ::core::result::Result::Ok(ProxyType::Any) })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 1usize as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        { ::core::result::Result::Ok(ProxyType::NonTransfer) })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 2usize as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        { ::core::result::Result::Ok(ProxyType::Governance) })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 3usize as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        { ::core::result::Result::Ok(ProxyType::Staking) })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 4usize as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(ProxyType::IdentityJudgement)
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 5usize as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        { ::core::result::Result::Ok(ProxyType::CancelProxy) })();
                    }
                    _ => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Err(<_ as
                                                        ::core::convert::Into<_>>::into("Could not decode `ProxyType`, variant doesn't exist"))
                                        })();
                    }
                }
            }
        }
    };
impl core::fmt::Debug for ProxyType {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        match self {
            Self::Any => fmt.debug_tuple("ProxyType::Any").finish(),
            Self::NonTransfer =>
                fmt.debug_tuple("ProxyType::NonTransfer").finish(),
            Self::Governance =>
                fmt.debug_tuple("ProxyType::Governance").finish(),
            Self::Staking => fmt.debug_tuple("ProxyType::Staking").finish(),
            Self::IdentityJudgement =>
                fmt.debug_tuple("ProxyType::IdentityJudgement").finish(),
            Self::CancelProxy =>
                fmt.debug_tuple("ProxyType::CancelProxy").finish(),
            _ => Ok(()),
        }
    }
}
const _: () =
    {
        impl ::parity_scale_codec::MaxEncodedLen for ProxyType {
            fn max_encoded_len() -> ::core::primitive::usize {
                0_usize.max(0_usize).max(0_usize).max(0_usize).max(0_usize).max(0_usize).max(0_usize).saturating_add(1)
            }
        }
    };
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        impl ::scale_info::TypeInfo for ProxyType {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder().path(::scale_info::Path::new("ProxyType",
                                    "vara_runtime")).type_params(::alloc::vec::Vec::new()).docs(&["The type used to represent the kinds of proxying allowed."]).variant(::scale_info::build::Variants::new().variant("Any",
                                            |v|
                                                v.index(0usize as
                                                        ::core::primitive::u8)).variant("NonTransfer",
                                        |v|
                                            v.index(1usize as
                                                    ::core::primitive::u8)).variant("Governance",
                                    |v|
                                        v.index(2usize as
                                                ::core::primitive::u8)).variant("Staking",
                                |v|
                                    v.index(3usize as
                                            ::core::primitive::u8)).variant("IdentityJudgement",
                            |v|
                                v.index(4usize as
                                        ::core::primitive::u8)).variant("CancelProxy",
                        |v| v.index(5usize as ::core::primitive::u8)))
            }
        }
        ;
    };
impl Default for ProxyType {
    fn default() -> Self { Self::Any }
}
impl InstanceFilter<RuntimeCall> for ProxyType {
    fn filter(&self, c: &RuntimeCall) -> bool {
        match self {
            ProxyType::Any => true,
            ProxyType::NonTransfer => {

                #[cfg(not(feature = "dev"))]
                return !match c {
                            RuntimeCall::Balances(..) |
                                RuntimeCall::Vesting(pallet_vesting::Call::vested_transfer {
                                .. }) |
                                RuntimeCall::Vesting(pallet_vesting::Call::force_vested_transfer {
                                .. }) => true,
                            _ => false,
                        };
            }
            ProxyType::Governance =>
                match c {
                    RuntimeCall::Treasury(..) |
                        RuntimeCall::ConvictionVoting(..) |
                        RuntimeCall::Referenda(..) |
                        RuntimeCall::FellowshipCollective(..) |
                        RuntimeCall::FellowshipReferenda(..) |
                        RuntimeCall::Whitelist(..) => true,
                    _ => false,
                },
            ProxyType::Staking =>
                match c { RuntimeCall::Staking(..) => true, _ => false, },
            ProxyType::IdentityJudgement =>
                match c {
                    RuntimeCall::Identity(pallet_identity::Call::provide_judgement {
                        .. }) | RuntimeCall::Utility(..) => true,
                    _ => false,
                },
            ProxyType::CancelProxy => {
                match c {
                    RuntimeCall::Proxy(pallet_proxy::Call::reject_announcement {
                        .. }) => true,
                    _ => false,
                }
            }
        }
    }
    fn is_superset(&self, o: &Self) -> bool {
        match (self, o) {
            (x, y) if x == y => true,
            (ProxyType::Any, _) => true,
            (_, ProxyType::Any) => false,
            (ProxyType::NonTransfer, _) => true,
            _ => false,
        }
    }
}
impl pallet_proxy::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type RuntimeCall = RuntimeCall;
    type Currency = Balances;
    type ProxyType = ProxyType;
    type ProxyDepositBase = ProxyDepositBase;
    type ProxyDepositFactor = ProxyDepositFactor;
    type MaxProxies = ConstU32<32>;
    type WeightInfo = pallet_proxy::weights::SubstrateWeight<Runtime>;
    type MaxPending = ConstU32<32>;
    type CallHasher = BlakeTwo256;
    type AnnouncementDepositBase = AnnouncementDepositBase;
    type AnnouncementDepositFactor = AnnouncementDepositFactor;
}
impl pallet_gear_program::Config for Runtime {
    type Scheduler = GearScheduler;
    type CurrentBlockNumber = Gear;
}
pub struct GasLimitMaxPercentage;
impl GasLimitMaxPercentage<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Percent {
        Percent::from_percent(GAS_LIMIT_MIN_PERCENTAGE_NUM)
    }
}
impl<_I: From<Percent>> ::frame_support::traits::Get<_I> for
    GasLimitMaxPercentage<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for GasLimitMaxPercentage<> {
    type Type = Percent;
    fn get() -> Percent { Self::get() }
}
pub struct BlockGasLimit;
impl BlockGasLimit<> {
    /// Returns the value of this parameter type.
    pub fn get() -> u64 {
        GasLimitMaxPercentage::get() *
            RuntimeBlockWeights::get().max_block.ref_time()
    }
}
impl<_I: From<u64>> ::frame_support::traits::Get<_I> for BlockGasLimit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for BlockGasLimit<> {
    type Type = u64;
    fn get() -> u64 { Self::get() }
}
pub struct ReserveThreshold;
impl ReserveThreshold<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 1 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for ReserveThreshold<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ReserveThreshold<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct WaitlistCost;
impl WaitlistCost<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u64 { 100 }
}
impl<_I: From<u64>> ::frame_support::traits::Get<_I> for WaitlistCost<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for WaitlistCost<> {
    type Type = u64;
    fn get() -> u64 { Self::get() }
}
pub struct MailboxCost;
impl MailboxCost<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u64 { 100 }
}
impl<_I: From<u64>> ::frame_support::traits::Get<_I> for MailboxCost<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MailboxCost<> {
    type Type = u64;
    fn get() -> u64 { Self::get() }
}
pub struct ReservationCost;
impl ReservationCost<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u64 { 100 }
}
impl<_I: From<u64>> ::frame_support::traits::Get<_I> for ReservationCost<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ReservationCost<> {
    type Type = u64;
    fn get() -> u64 { Self::get() }
}
pub struct DispatchHoldCost;
impl DispatchHoldCost<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u64 { 100 }
}
impl<_I: From<u64>> ::frame_support::traits::Get<_I> for DispatchHoldCost<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for DispatchHoldCost<> {
    type Type = u64;
    fn get() -> u64 { Self::get() }
}
pub struct OutgoingLimit;
impl OutgoingLimit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 1024 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for OutgoingLimit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for OutgoingLimit<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct OutgoingBytesLimit;
impl OutgoingBytesLimit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 64 * 1024 * 1024 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for OutgoingBytesLimit<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for OutgoingBytesLimit<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MailboxThreshold;
impl MailboxThreshold<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u64 { 3000 }
}
impl<_I: From<u64>> ::frame_support::traits::Get<_I> for MailboxThreshold<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MailboxThreshold<> {
    type Type = u64;
    fn get() -> u64 { Self::get() }
}
pub struct PerformanceMultiplier;
impl PerformanceMultiplier<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 100 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for
    PerformanceMultiplier<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for PerformanceMultiplier<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct Schedule;
impl Schedule<> {
    /// Returns the value of this parameter type.
    pub fn get() -> pallet_gear::Schedule<Runtime> { Default::default() }
}
impl<_I: From<pallet_gear::Schedule<Runtime>>>
    ::frame_support::traits::Get<_I> for Schedule<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for Schedule<> {
    type Type = pallet_gear::Schedule<Runtime>;
    fn get() -> pallet_gear::Schedule<Runtime> { Self::get() }
}
pub struct BankAddress;
impl BankAddress<> {
    /// Returns the value of this parameter type.
    pub fn get() -> AccountId { BANK_ADDRESS.into() }
}
impl<_I: From<AccountId>> ::frame_support::traits::Get<_I> for BankAddress<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for BankAddress<> {
    type Type = AccountId;
    fn get() -> AccountId { Self::get() }
}
pub struct GasMultiplier;
impl GasMultiplier<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> common::GasMultiplier<Balance, u64> {
        common::GasMultiplier::ValuePerGas(VALUE_PER_GAS)
    }
}
impl<_I: From<common::GasMultiplier<Balance, u64>>>
    ::frame_support::traits::Get<_I> for GasMultiplier<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for GasMultiplier<> {
    type Type = common::GasMultiplier<Balance, u64>;
    fn get() -> common::GasMultiplier<Balance, u64> { Self::get() }
}
impl pallet_gear_bank::Config for Runtime {
    type Currency = Balances;
    type BankAddress = BankAddress;
    type GasMultiplier = GasMultiplier;
}
impl pallet_gear::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type Randomness = pallet_babe::RandomnessFromOneEpochAgo<Runtime>;
    type WeightInfo = weights::pallet_gear::SubstrateWeight<Runtime>;
    type Schedule = Schedule;
    type OutgoingLimit = OutgoingLimit;
    type OutgoingBytesLimit = OutgoingBytesLimit;
    type PerformanceMultiplier = PerformanceMultiplier;
    type DebugInfo = DebugInfo;
    type CodeStorage = GearProgram;
    type ProgramStorage = GearProgram;
    type MailboxThreshold = MailboxThreshold;
    type ReservationsLimit = ConstU64<256>;
    type Messenger = GearMessenger;
    type GasProvider = GearGas;
    type BlockLimiter = GearGas;
    type Scheduler = GearScheduler;
    type QueueRunner = Gear;
    type BuiltinDispatcherFactory = GearBuiltin;
    type ProgramRentFreePeriod =
        ConstU32<{ MONTHS * RENT_FREE_PERIOD_MONTH_FACTOR }>;
    type ProgramResumeMinimalRentPeriod =
        ConstU32<{ WEEKS * RENT_RESUME_WEEK_FACTOR }>;
    type ProgramRentCostPerBlock = ConstU128<RENT_COST_PER_BLOCK>;
    type ProgramResumeSessionDuration =
        ConstU32<{ HOURS * RESUME_SESSION_DURATION_HOUR_FACTOR }>;
    #[cfg(not(feature = "runtime-benchmarks"))]
    type ProgramRentEnabled = ConstBool<false>;
    type ProgramRentDisabledDelta =
        ConstU32<{ WEEKS * RENT_DISABLED_DELTA_WEEK_FACTOR }>;
    type RentPoolId = pallet_gear_staking_rewards::RentPoolId<Self>;
}
impl pallet_gear_scheduler::Config for Runtime {
    type BlockLimiter = GearGas;
    type ReserveThreshold = ReserveThreshold;
    type WaitlistCost = WaitlistCost;
    type MailboxCost = MailboxCost;
    type ReservationCost = ReservationCost;
    type DispatchHoldCost = DispatchHoldCost;
}
impl pallet_gear_gas::Config for Runtime {
    type BlockGasLimit = BlockGasLimit;
}
impl pallet_gear_messenger::Config for Runtime {
    type BlockLimiter = GearGas;
    type CurrentBlockNumber = Gear;
}
/// Builtin actors arranged in a tuple.
#[cfg(not(feature = "runtime-benchmarks"))]
pub type BuiltinActors = (pallet_gear_builtin::bls12_381::Actor<Runtime>,);
pub struct BuiltinActorPalletId;
impl BuiltinActorPalletId<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> PalletId { PalletId(*b"py/biact") }
}
impl<_I: From<PalletId>> ::frame_support::traits::Get<_I> for
    BuiltinActorPalletId<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for BuiltinActorPalletId<> {
    type Type = PalletId;
    fn get() -> PalletId { Self::get() }
}
impl pallet_gear_builtin::Config for Runtime {
    type Builtins = BuiltinActors;
    type WeightInfo = pallet_gear_builtin::weights::SubstrateWeight<Runtime>;
}
pub struct ExtraFeeFilter;
impl Contains<RuntimeCall> for ExtraFeeFilter {
    fn contains(call: &RuntimeCall) -> bool {
        match call {
            RuntimeCall::Gear(pallet_gear::Call::create_program { .. }) |
                RuntimeCall::Gear(pallet_gear::Call::upload_program { .. }) |
                RuntimeCall::Gear(pallet_gear::Call::send_message { .. }) |
                RuntimeCall::Gear(pallet_gear::Call::send_reply { .. }) =>
                true,
            _ => false,
        }
    }
}
pub struct DelegateFeeAccountBuilder;
impl DelegateFee<RuntimeCall, AccountId> for DelegateFeeAccountBuilder {
    fn delegate_fee(call: &RuntimeCall, who: &AccountId)
        -> Option<AccountId> {
        match call {
            RuntimeCall::GearVoucher(voucher_call) =>
                voucher_call.get_sponsor(who.clone()),
            _ => None,
        }
    }
}
impl pallet_gear_payment::Config for Runtime {
    type ExtraFeeCallFilter = ExtraFeeFilter;
    type DelegateFee = DelegateFeeAccountBuilder;
    type Messenger = GearMessenger;
}
pub struct VoucherPalletId;
impl VoucherPalletId<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> PalletId { PalletId(*b"py/vouch") }
}
impl<_I: From<PalletId>> ::frame_support::traits::Get<_I> for
    VoucherPalletId<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for VoucherPalletId<> {
    type Type = PalletId;
    fn get() -> PalletId { Self::get() }
}
pub struct MinVoucherDuration;
impl MinVoucherDuration<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 30 * MINUTES }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    MinVoucherDuration<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MinVoucherDuration<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct MaxVoucherDuration;
impl MaxVoucherDuration<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 3 * MONTHS }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    MaxVoucherDuration<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxVoucherDuration<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
impl pallet_gear_voucher::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type Currency = Balances;
    type PalletId = VoucherPalletId;
    type WeightInfo = weights::pallet_gear_voucher::SubstrateWeight<Runtime>;
    type CallsDispatcher = pallet_gear::PrepaidCallDispatcher<Runtime>;
    type Mailbox = <GearMessenger as Messenger>::Mailbox;
    type MaxProgramsAmount = ConstU8<32>;
    type MaxDuration = MaxVoucherDuration;
    type MinDuration = MinVoucherDuration;
}
impl<C> frame_system::offchain::SendTransactionTypes<C> for Runtime where
    RuntimeCall: From<C> {
    type Extrinsic = UncheckedExtrinsic;
    type OverarchingCall = RuntimeCall;
}
pub struct MinVestedTransfer;
impl MinVestedTransfer<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 100 * ECONOMIC_CENTIUNITS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    MinVestedTransfer<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MinVestedTransfer<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct UnvestedFundsAllowedWithdrawReasons;
impl UnvestedFundsAllowedWithdrawReasons<> {
    /// Returns the value of this parameter type.
    pub fn get() -> WithdrawReasons {
        WithdrawReasons::except(WithdrawReasons::TRANSFER |
                WithdrawReasons::RESERVE)
    }
}
impl<_I: From<WithdrawReasons>> ::frame_support::traits::Get<_I> for
    UnvestedFundsAllowedWithdrawReasons<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for
    UnvestedFundsAllowedWithdrawReasons<> {
    type Type = WithdrawReasons;
    fn get() -> WithdrawReasons { Self::get() }
}
impl pallet_vesting::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type Currency = Balances;
    type BlockNumberToBalance = ConvertInto;
    type MinVestedTransfer = MinVestedTransfer;
    type WeightInfo = pallet_vesting::weights::SubstrateWeight<Runtime>;
    type UnvestedFundsAllowedWithdrawReasons =
        UnvestedFundsAllowedWithdrawReasons;
    const MAX_VESTING_SCHEDULES: u32 = 28;
}
#[doc(hidden)]
mod sp_api_hidden_includes_construct_runtime {
    pub extern crate frame_support as hidden_include;
}
const _: () =
    {
        #[allow(unused)]
        type __hidden_use_of_unchecked_extrinsic =
            <<Runtime as frame_system::Config>::Block as
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Block>::Extrinsic;
    };
pub struct Runtime;
#[automatically_derived]
impl ::core::clone::Clone for Runtime {
    #[inline]
    fn clone(&self) -> Runtime { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for Runtime { }
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for Runtime { }
#[automatically_derived]
impl ::core::cmp::PartialEq for Runtime {
    #[inline]
    fn eq(&self, other: &Runtime) -> bool { true }
}
#[automatically_derived]
impl ::core::marker::StructuralEq for Runtime { }
#[automatically_derived]
impl ::core::cmp::Eq for Runtime {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {}
}
impl core::fmt::Debug for Runtime {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        fmt.debug_tuple("Runtime").finish()
    }
}
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        impl ::scale_info::TypeInfo for Runtime {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder().path(::scale_info::Path::new("Runtime",
                                "vara_runtime")).type_params(::alloc::vec::Vec::new()).composite(::scale_info::build::Fields::unit())
            }
        }
        ;
    };
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::GetRuntimeBlockType
    for Runtime {
    type RuntimeBlock = <Runtime as frame_system::Config>::Block;
}
#[doc(hidden)]
trait InternalConstructRuntime {
    #[inline(always)]
    fn runtime_metadata(&self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::vec::Vec<self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::RuntimeApiMetadataIR> {
        Default::default()
    }
}
#[doc(hidden)]
impl InternalConstructRuntime for &Runtime { }
#[allow(non_camel_case_types)]
pub enum RuntimeEvent {

    #[codec(index = 0u8)]
    System(frame_system::Event<Runtime>),

    #[codec(index = 4u8)]
    Grandpa(pallet_grandpa::Event),

    #[codec(index = 5u8)]
    Balances(pallet_balances::Event<Runtime>),

    #[codec(index = 10u8)]
    Vesting(pallet_vesting::Event<Runtime>),

    #[codec(index = 6u8)]
    TransactionPayment(pallet_transaction_payment::Event<Runtime>),

    #[codec(index = 11u8)]
    BagsList(pallet_bags_list::Event<Runtime, pallet_bags_list::Instance1>),

    #[codec(index = 12u8)]
    ImOnline(pallet_im_online::Event<Runtime>),

    #[codec(index = 13u8)]
    Staking(pallet_staking::Event<Runtime>),

    #[codec(index = 7u8)]
    Session(pallet_session::Event),

    #[codec(index = 14u8)]
    Treasury(pallet_treasury::Event<Runtime>),

    #[codec(index = 8u8)]
    Utility(pallet_utility::Event),

    #[codec(index = 16u8)]
    ConvictionVoting(pallet_conviction_voting::Event<Runtime>),

    #[codec(index = 17u8)]
    Referenda(pallet_referenda::Event<Runtime>),

    #[codec(index = 18u8)]
    FellowshipCollective(pallet_ranked_collective::Event<Runtime,
        pallet_ranked_collective::Instance1>),

    #[codec(index = 19u8)]
    FellowshipReferenda(pallet_referenda::Event<Runtime,
        pallet_referenda::Instance2>),

    #[codec(index = 21u8)]
    Whitelist(pallet_whitelist::Event<Runtime>),

    #[codec(index = 22u8)]
    Scheduler(pallet_scheduler::Event<Runtime>),

    #[codec(index = 23u8)]
    Preimage(pallet_preimage::Event<Runtime>),

    #[codec(index = 24u8)]
    Identity(pallet_identity::Event<Runtime>),

    #[codec(index = 25u8)]
    Proxy(pallet_proxy::Event<Runtime>),

    #[codec(index = 26u8)]
    Multisig(pallet_multisig::Event<Runtime>),

    #[codec(index = 27u8)]
    ElectionProviderMultiPhase(pallet_election_provider_multi_phase::Event<Runtime>),

    #[codec(index = 28u8)]
    Offences(pallet_offences::Event),

    #[codec(index = 29u8)]
    Bounties(pallet_bounties::Event<Runtime>),

    #[codec(index = 30u8)]
    ChildBounties(pallet_child_bounties::Event<Runtime>),

    #[codec(index = 31u8)]
    NominationPools(pallet_nomination_pools::Event<Runtime>),

    #[codec(index = 104u8)]
    Gear(pallet_gear::Event<Runtime>),

    #[codec(index = 106u8)]
    StakingRewards(pallet_gear_staking_rewards::Event<Runtime>),

    #[codec(index = 107u8)]
    GearVoucher(pallet_gear_voucher::Event<Runtime>),
}
#[automatically_derived]
#[allow(non_camel_case_types)]
impl ::core::clone::Clone for RuntimeEvent {
    #[inline]
    fn clone(&self) -> RuntimeEvent {
        match self {
            RuntimeEvent::System(__self_0) =>
                RuntimeEvent::System(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Grandpa(__self_0) =>
                RuntimeEvent::Grandpa(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Balances(__self_0) =>
                RuntimeEvent::Balances(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Vesting(__self_0) =>
                RuntimeEvent::Vesting(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::TransactionPayment(__self_0) =>
                RuntimeEvent::TransactionPayment(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::BagsList(__self_0) =>
                RuntimeEvent::BagsList(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::ImOnline(__self_0) =>
                RuntimeEvent::ImOnline(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Staking(__self_0) =>
                RuntimeEvent::Staking(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Session(__self_0) =>
                RuntimeEvent::Session(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Treasury(__self_0) =>
                RuntimeEvent::Treasury(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Utility(__self_0) =>
                RuntimeEvent::Utility(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::ConvictionVoting(__self_0) =>
                RuntimeEvent::ConvictionVoting(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Referenda(__self_0) =>
                RuntimeEvent::Referenda(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::FellowshipCollective(__self_0) =>
                RuntimeEvent::FellowshipCollective(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::FellowshipReferenda(__self_0) =>
                RuntimeEvent::FellowshipReferenda(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Whitelist(__self_0) =>
                RuntimeEvent::Whitelist(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Scheduler(__self_0) =>
                RuntimeEvent::Scheduler(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Preimage(__self_0) =>
                RuntimeEvent::Preimage(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Identity(__self_0) =>
                RuntimeEvent::Identity(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Proxy(__self_0) =>
                RuntimeEvent::Proxy(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Multisig(__self_0) =>
                RuntimeEvent::Multisig(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::ElectionProviderMultiPhase(__self_0) =>
                RuntimeEvent::ElectionProviderMultiPhase(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Offences(__self_0) =>
                RuntimeEvent::Offences(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Bounties(__self_0) =>
                RuntimeEvent::Bounties(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::ChildBounties(__self_0) =>
                RuntimeEvent::ChildBounties(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::NominationPools(__self_0) =>
                RuntimeEvent::NominationPools(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Gear(__self_0) =>
                RuntimeEvent::Gear(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::StakingRewards(__self_0) =>
                RuntimeEvent::StakingRewards(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::GearVoucher(__self_0) =>
                RuntimeEvent::GearVoucher(::core::clone::Clone::clone(__self_0)),
        }
    }
}
#[automatically_derived]
#[allow(non_camel_case_types)]
impl ::core::marker::StructuralPartialEq for RuntimeEvent { }
#[automatically_derived]
#[allow(non_camel_case_types)]
impl ::core::cmp::PartialEq for RuntimeEvent {
    #[inline]
    fn eq(&self, other: &RuntimeEvent) -> bool {
        let __self_tag = ::core::intrinsics::discriminant_value(self);
        let __arg1_tag = ::core::intrinsics::discriminant_value(other);
        __self_tag == __arg1_tag &&
            match (self, other) {
                (RuntimeEvent::System(__self_0),
                    RuntimeEvent::System(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Grandpa(__self_0),
                    RuntimeEvent::Grandpa(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Balances(__self_0),
                    RuntimeEvent::Balances(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Vesting(__self_0),
                    RuntimeEvent::Vesting(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::TransactionPayment(__self_0),
                    RuntimeEvent::TransactionPayment(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::BagsList(__self_0),
                    RuntimeEvent::BagsList(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::ImOnline(__self_0),
                    RuntimeEvent::ImOnline(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Staking(__self_0),
                    RuntimeEvent::Staking(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Session(__self_0),
                    RuntimeEvent::Session(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Treasury(__self_0),
                    RuntimeEvent::Treasury(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Utility(__self_0),
                    RuntimeEvent::Utility(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::ConvictionVoting(__self_0),
                    RuntimeEvent::ConvictionVoting(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::Referenda(__self_0),
                    RuntimeEvent::Referenda(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::FellowshipCollective(__self_0),
                    RuntimeEvent::FellowshipCollective(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::FellowshipReferenda(__self_0),
                    RuntimeEvent::FellowshipReferenda(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::Whitelist(__self_0),
                    RuntimeEvent::Whitelist(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::Scheduler(__self_0),
                    RuntimeEvent::Scheduler(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::Preimage(__self_0),
                    RuntimeEvent::Preimage(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Identity(__self_0),
                    RuntimeEvent::Identity(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Proxy(__self_0), RuntimeEvent::Proxy(__arg1_0))
                    => *__self_0 == *__arg1_0,
                (RuntimeEvent::Multisig(__self_0),
                    RuntimeEvent::Multisig(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::ElectionProviderMultiPhase(__self_0),
                    RuntimeEvent::ElectionProviderMultiPhase(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::Offences(__self_0),
                    RuntimeEvent::Offences(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Bounties(__self_0),
                    RuntimeEvent::Bounties(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::ChildBounties(__self_0),
                    RuntimeEvent::ChildBounties(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::NominationPools(__self_0),
                    RuntimeEvent::NominationPools(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::Gear(__self_0), RuntimeEvent::Gear(__arg1_0))
                    => *__self_0 == *__arg1_0,
                (RuntimeEvent::StakingRewards(__self_0),
                    RuntimeEvent::StakingRewards(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::GearVoucher(__self_0),
                    RuntimeEvent::GearVoucher(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                _ => unsafe { ::core::intrinsics::unreachable() }
            }
    }
}
#[automatically_derived]
#[allow(non_camel_case_types)]
impl ::core::marker::StructuralEq for RuntimeEvent { }
#[automatically_derived]
#[allow(non_camel_case_types)]
impl ::core::cmp::Eq for RuntimeEvent {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {
        let _: ::core::cmp::AssertParamIsEq<frame_system::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_grandpa::Event>;
        let _: ::core::cmp::AssertParamIsEq<pallet_balances::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_vesting::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_transaction_payment::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_bags_list::Event<Runtime,
                pallet_bags_list::Instance1>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_im_online::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_staking::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_session::Event>;
        let _: ::core::cmp::AssertParamIsEq<pallet_treasury::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_utility::Event>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_conviction_voting::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_referenda::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_ranked_collective::Event<Runtime,
                pallet_ranked_collective::Instance1>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_referenda::Event<Runtime,
                pallet_referenda::Instance2>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_whitelist::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_scheduler::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_preimage::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_identity::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_proxy::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_multisig::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_election_provider_multi_phase::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_offences::Event>;
        let _: ::core::cmp::AssertParamIsEq<pallet_bounties::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_child_bounties::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_nomination_pools::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_gear::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_gear_staking_rewards::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_gear_voucher::Event<Runtime>>;
    }
}
#[allow(deprecated)]
const _: () =
    {
        #[allow(non_camel_case_types)]
        #[automatically_derived]
        impl ::parity_scale_codec::Encode for RuntimeEvent {
            fn size_hint(&self) -> usize {
                1_usize +
                    match *self {
                        RuntimeEvent::System(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::Grandpa(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::Balances(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::Vesting(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::TransactionPayment(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::BagsList(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::ImOnline(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::Staking(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::Session(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::Treasury(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::Utility(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::ConvictionVoting(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::Referenda(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::FellowshipCollective(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::FellowshipReferenda(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::Whitelist(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::Scheduler(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::Preimage(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::Identity(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::Proxy(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::Multisig(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::ElectionProviderMultiPhase(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::Offences(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::Bounties(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::ChildBounties(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::NominationPools(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::Gear(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::StakingRewards(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeEvent::GearVoucher(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        _ => 0_usize,
                    }
            }
            fn encode_to<__CodecOutputEdqy: ::parity_scale_codec::Output +
                ?::core::marker::Sized>(&self,
                __codec_dest_edqy: &mut __CodecOutputEdqy) {
                match *self {
                    RuntimeEvent::System(ref aa) => {
                        __codec_dest_edqy.push_byte(0u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::Grandpa(ref aa) => {
                        __codec_dest_edqy.push_byte(4u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::Balances(ref aa) => {
                        __codec_dest_edqy.push_byte(5u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::Vesting(ref aa) => {
                        __codec_dest_edqy.push_byte(10u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::TransactionPayment(ref aa) => {
                        __codec_dest_edqy.push_byte(6u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::BagsList(ref aa) => {
                        __codec_dest_edqy.push_byte(11u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::ImOnline(ref aa) => {
                        __codec_dest_edqy.push_byte(12u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::Staking(ref aa) => {
                        __codec_dest_edqy.push_byte(13u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::Session(ref aa) => {
                        __codec_dest_edqy.push_byte(7u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::Treasury(ref aa) => {
                        __codec_dest_edqy.push_byte(14u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::Utility(ref aa) => {
                        __codec_dest_edqy.push_byte(8u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::ConvictionVoting(ref aa) => {
                        __codec_dest_edqy.push_byte(16u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::Referenda(ref aa) => {
                        __codec_dest_edqy.push_byte(17u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::FellowshipCollective(ref aa) => {
                        __codec_dest_edqy.push_byte(18u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::FellowshipReferenda(ref aa) => {
                        __codec_dest_edqy.push_byte(19u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::Whitelist(ref aa) => {
                        __codec_dest_edqy.push_byte(21u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::Scheduler(ref aa) => {
                        __codec_dest_edqy.push_byte(22u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::Preimage(ref aa) => {
                        __codec_dest_edqy.push_byte(23u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::Identity(ref aa) => {
                        __codec_dest_edqy.push_byte(24u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::Proxy(ref aa) => {
                        __codec_dest_edqy.push_byte(25u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::Multisig(ref aa) => {
                        __codec_dest_edqy.push_byte(26u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::ElectionProviderMultiPhase(ref aa) => {
                        __codec_dest_edqy.push_byte(27u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::Offences(ref aa) => {
                        __codec_dest_edqy.push_byte(28u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::Bounties(ref aa) => {
                        __codec_dest_edqy.push_byte(29u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::ChildBounties(ref aa) => {
                        __codec_dest_edqy.push_byte(30u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::NominationPools(ref aa) => {
                        __codec_dest_edqy.push_byte(31u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::Gear(ref aa) => {
                        __codec_dest_edqy.push_byte(104u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::StakingRewards(ref aa) => {
                        __codec_dest_edqy.push_byte(106u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeEvent::GearVoucher(ref aa) => {
                        __codec_dest_edqy.push_byte(107u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    _ => (),
                }
            }
        }
        #[automatically_derived]
        impl ::parity_scale_codec::EncodeLike for RuntimeEvent { }
    };
#[allow(deprecated)]
const _: () =
    {
        #[allow(non_camel_case_types)]
        #[automatically_derived]
        impl ::parity_scale_codec::Decode for RuntimeEvent {
            fn decode<__CodecInputEdqy: ::parity_scale_codec::Input>(__codec_input_edqy:
                    &mut __CodecInputEdqy)
                -> ::core::result::Result<Self, ::parity_scale_codec::Error> {
                match __codec_input_edqy.read_byte().map_err(|e|
                                e.chain("Could not decode `RuntimeEvent`, failed to read variant byte"))?
                    {
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 0u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::System({
                                                        let __codec_res_edqy =
                                                            <frame_system::Event<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::System.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 4u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::Grandpa({
                                                        let __codec_res_edqy =
                                                            <pallet_grandpa::Event as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Grandpa.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 5u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::Balances({
                                                        let __codec_res_edqy =
                                                            <pallet_balances::Event<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Balances.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 10u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::Vesting({
                                                        let __codec_res_edqy =
                                                            <pallet_vesting::Event<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Vesting.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 6u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::TransactionPayment({
                                                        let __codec_res_edqy =
                                                            <pallet_transaction_payment::Event<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::TransactionPayment.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 11u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::BagsList({
                                                        let __codec_res_edqy =
                                                            <pallet_bags_list::Event<Runtime,
                                                                    pallet_bags_list::Instance1> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::BagsList.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 12u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::ImOnline({
                                                        let __codec_res_edqy =
                                                            <pallet_im_online::Event<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::ImOnline.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 13u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::Staking({
                                                        let __codec_res_edqy =
                                                            <pallet_staking::Event<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Staking.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 7u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::Session({
                                                        let __codec_res_edqy =
                                                            <pallet_session::Event as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Session.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 14u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::Treasury({
                                                        let __codec_res_edqy =
                                                            <pallet_treasury::Event<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Treasury.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 8u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::Utility({
                                                        let __codec_res_edqy =
                                                            <pallet_utility::Event as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Utility.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 16u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::ConvictionVoting({
                                                        let __codec_res_edqy =
                                                            <pallet_conviction_voting::Event<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::ConvictionVoting.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 17u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::Referenda({
                                                        let __codec_res_edqy =
                                                            <pallet_referenda::Event<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Referenda.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 18u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::FellowshipCollective({
                                                        let __codec_res_edqy =
                                                            <pallet_ranked_collective::Event<Runtime,
                                                                    pallet_ranked_collective::Instance1> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::FellowshipCollective.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 19u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::FellowshipReferenda({
                                                        let __codec_res_edqy =
                                                            <pallet_referenda::Event<Runtime,
                                                                    pallet_referenda::Instance2> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::FellowshipReferenda.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 21u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::Whitelist({
                                                        let __codec_res_edqy =
                                                            <pallet_whitelist::Event<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Whitelist.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 22u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::Scheduler({
                                                        let __codec_res_edqy =
                                                            <pallet_scheduler::Event<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Scheduler.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 23u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::Preimage({
                                                        let __codec_res_edqy =
                                                            <pallet_preimage::Event<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Preimage.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 24u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::Identity({
                                                        let __codec_res_edqy =
                                                            <pallet_identity::Event<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Identity.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 25u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::Proxy({
                                                        let __codec_res_edqy =
                                                            <pallet_proxy::Event<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Proxy.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 26u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::Multisig({
                                                        let __codec_res_edqy =
                                                            <pallet_multisig::Event<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Multisig.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 27u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::ElectionProviderMultiPhase({
                                                        let __codec_res_edqy =
                                                            <pallet_election_provider_multi_phase::Event<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::ElectionProviderMultiPhase.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 28u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::Offences({
                                                        let __codec_res_edqy =
                                                            <pallet_offences::Event as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Offences.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 29u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::Bounties({
                                                        let __codec_res_edqy =
                                                            <pallet_bounties::Event<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Bounties.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 30u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::ChildBounties({
                                                        let __codec_res_edqy =
                                                            <pallet_child_bounties::Event<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::ChildBounties.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 31u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::NominationPools({
                                                        let __codec_res_edqy =
                                                            <pallet_nomination_pools::Event<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::NominationPools.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 104u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::Gear({
                                                        let __codec_res_edqy =
                                                            <pallet_gear::Event<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Gear.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 106u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::StakingRewards({
                                                        let __codec_res_edqy =
                                                            <pallet_gear_staking_rewards::Event<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::StakingRewards.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 107u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeEvent::GearVoucher({
                                                        let __codec_res_edqy =
                                                            <pallet_gear_voucher::Event<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::GearVoucher.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                    _ => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Err(<_ as
                                                        ::core::convert::Into<_>>::into("Could not decode `RuntimeEvent`, variant doesn't exist"))
                                        })();
                    }
                }
            }
        }
    };
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        impl ::scale_info::TypeInfo for RuntimeEvent {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder().path(::scale_info::Path::new("RuntimeEvent",
                                "vara_runtime")).type_params(::alloc::vec::Vec::new()).variant(::scale_info::build::Variants::new().variant("System",
                                                                                                                                        |v|
                                                                                                                                            v.index(0u8 as
                                                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                        f.ty::<frame_system::Event<Runtime>>().type_name("frame_system::Event<Runtime>")))).variant("Grandpa",
                                                                                                                                    |v|
                                                                                                                                        v.index(4u8 as
                                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                    f.ty::<pallet_grandpa::Event>().type_name("pallet_grandpa::Event")))).variant("Balances",
                                                                                                                                |v|
                                                                                                                                    v.index(5u8 as
                                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                f.ty::<pallet_balances::Event<Runtime>>().type_name("pallet_balances::Event<Runtime>")))).variant("Vesting",
                                                                                                                            |v|
                                                                                                                                v.index(10u8 as
                                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                            f.ty::<pallet_vesting::Event<Runtime>>().type_name("pallet_vesting::Event<Runtime>")))).variant("TransactionPayment",
                                                                                                                        |v|
                                                                                                                            v.index(6u8 as
                                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                        f.ty::<pallet_transaction_payment::Event<Runtime>>().type_name("pallet_transaction_payment::Event<Runtime>")))).variant("BagsList",
                                                                                                                    |v|
                                                                                                                        v.index(11u8 as
                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                    f.ty::<pallet_bags_list::Event<Runtime,
                                                                                                                                            pallet_bags_list::Instance1>>().type_name("pallet_bags_list::Event<Runtime, pallet_bags_list::Instance1>")))).variant("ImOnline",
                                                                                                                |v|
                                                                                                                    v.index(12u8 as
                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                f.ty::<pallet_im_online::Event<Runtime>>().type_name("pallet_im_online::Event<Runtime>")))).variant("Staking",
                                                                                                            |v|
                                                                                                                v.index(13u8 as
                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                            f.ty::<pallet_staking::Event<Runtime>>().type_name("pallet_staking::Event<Runtime>")))).variant("Session",
                                                                                                        |v|
                                                                                                            v.index(7u8 as
                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                        f.ty::<pallet_session::Event>().type_name("pallet_session::Event")))).variant("Treasury",
                                                                                                    |v|
                                                                                                        v.index(14u8 as
                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                    f.ty::<pallet_treasury::Event<Runtime>>().type_name("pallet_treasury::Event<Runtime>")))).variant("Utility",
                                                                                                |v|
                                                                                                    v.index(8u8 as
                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                f.ty::<pallet_utility::Event>().type_name("pallet_utility::Event")))).variant("ConvictionVoting",
                                                                                            |v|
                                                                                                v.index(16u8 as
                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                            f.ty::<pallet_conviction_voting::Event<Runtime>>().type_name("pallet_conviction_voting::Event<Runtime>")))).variant("Referenda",
                                                                                        |v|
                                                                                            v.index(17u8 as
                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                        f.ty::<pallet_referenda::Event<Runtime>>().type_name("pallet_referenda::Event<Runtime>")))).variant("FellowshipCollective",
                                                                                    |v|
                                                                                        v.index(18u8 as
                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                    f.ty::<pallet_ranked_collective::Event<Runtime,
                                                                                                            pallet_ranked_collective::Instance1>>().type_name("pallet_ranked_collective::Event<Runtime, pallet_ranked_collective::\nInstance1>")))).variant("FellowshipReferenda",
                                                                                |v|
                                                                                    v.index(19u8 as
                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                f.ty::<pallet_referenda::Event<Runtime,
                                                                                                        pallet_referenda::Instance2>>().type_name("pallet_referenda::Event<Runtime, pallet_referenda::Instance2>")))).variant("Whitelist",
                                                                            |v|
                                                                                v.index(21u8 as
                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                            f.ty::<pallet_whitelist::Event<Runtime>>().type_name("pallet_whitelist::Event<Runtime>")))).variant("Scheduler",
                                                                        |v|
                                                                            v.index(22u8 as
                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                        f.ty::<pallet_scheduler::Event<Runtime>>().type_name("pallet_scheduler::Event<Runtime>")))).variant("Preimage",
                                                                    |v|
                                                                        v.index(23u8 as
                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                    f.ty::<pallet_preimage::Event<Runtime>>().type_name("pallet_preimage::Event<Runtime>")))).variant("Identity",
                                                                |v|
                                                                    v.index(24u8 as
                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                f.ty::<pallet_identity::Event<Runtime>>().type_name("pallet_identity::Event<Runtime>")))).variant("Proxy",
                                                            |v|
                                                                v.index(25u8 as
                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                            f.ty::<pallet_proxy::Event<Runtime>>().type_name("pallet_proxy::Event<Runtime>")))).variant("Multisig",
                                                        |v|
                                                            v.index(26u8 as
                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                        f.ty::<pallet_multisig::Event<Runtime>>().type_name("pallet_multisig::Event<Runtime>")))).variant("ElectionProviderMultiPhase",
                                                    |v|
                                                        v.index(27u8 as
                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                    f.ty::<pallet_election_provider_multi_phase::Event<Runtime>>().type_name("pallet_election_provider_multi_phase::Event<Runtime>")))).variant("Offences",
                                                |v|
                                                    v.index(28u8 as
                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                f.ty::<pallet_offences::Event>().type_name("pallet_offences::Event")))).variant("Bounties",
                                            |v|
                                                v.index(29u8 as
                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                            f.ty::<pallet_bounties::Event<Runtime>>().type_name("pallet_bounties::Event<Runtime>")))).variant("ChildBounties",
                                        |v|
                                            v.index(30u8 as
                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                        f.ty::<pallet_child_bounties::Event<Runtime>>().type_name("pallet_child_bounties::Event<Runtime>")))).variant("NominationPools",
                                    |v|
                                        v.index(31u8 as
                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                    f.ty::<pallet_nomination_pools::Event<Runtime>>().type_name("pallet_nomination_pools::Event<Runtime>")))).variant("Gear",
                                |v|
                                    v.index(104u8 as
                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                f.ty::<pallet_gear::Event<Runtime>>().type_name("pallet_gear::Event<Runtime>")))).variant("StakingRewards",
                            |v|
                                v.index(106u8 as
                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                            f.ty::<pallet_gear_staking_rewards::Event<Runtime>>().type_name("pallet_gear_staking_rewards::Event<Runtime>")))).variant("GearVoucher",
                        |v|
                            v.index(107u8 as
                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                        f.ty::<pallet_gear_voucher::Event<Runtime>>().type_name("pallet_gear_voucher::Event<Runtime>")))))
            }
        }
        ;
    };
impl core::fmt::Debug for RuntimeEvent {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        match self {
            Self::System(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::System").field(a0).finish(),
            Self::Grandpa(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Grandpa").field(a0).finish(),
            Self::Balances(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Balances").field(a0).finish(),
            Self::Vesting(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Vesting").field(a0).finish(),
            Self::TransactionPayment(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::TransactionPayment").field(a0).finish(),
            Self::BagsList(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::BagsList").field(a0).finish(),
            Self::ImOnline(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::ImOnline").field(a0).finish(),
            Self::Staking(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Staking").field(a0).finish(),
            Self::Session(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Session").field(a0).finish(),
            Self::Treasury(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Treasury").field(a0).finish(),
            Self::Utility(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Utility").field(a0).finish(),
            Self::ConvictionVoting(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::ConvictionVoting").field(a0).finish(),
            Self::Referenda(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Referenda").field(a0).finish(),
            Self::FellowshipCollective(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::FellowshipCollective").field(a0).finish(),
            Self::FellowshipReferenda(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::FellowshipReferenda").field(a0).finish(),
            Self::Whitelist(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Whitelist").field(a0).finish(),
            Self::Scheduler(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Scheduler").field(a0).finish(),
            Self::Preimage(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Preimage").field(a0).finish(),
            Self::Identity(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Identity").field(a0).finish(),
            Self::Proxy(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Proxy").field(a0).finish(),
            Self::Multisig(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Multisig").field(a0).finish(),
            Self::ElectionProviderMultiPhase(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::ElectionProviderMultiPhase").field(a0).finish(),
            Self::Offences(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Offences").field(a0).finish(),
            Self::Bounties(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Bounties").field(a0).finish(),
            Self::ChildBounties(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::ChildBounties").field(a0).finish(),
            Self::NominationPools(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::NominationPools").field(a0).finish(),
            Self::Gear(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Gear").field(a0).finish(),
            Self::StakingRewards(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::StakingRewards").field(a0).finish(),
            Self::GearVoucher(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::GearVoucher").field(a0).finish(),
            _ => Ok(()),
        }
    }
}
impl From<frame_system::Event<Runtime>> for RuntimeEvent {
    fn from(x: frame_system::Event<Runtime>) -> Self {
        RuntimeEvent::System(x)
    }
}
impl TryInto<frame_system::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<frame_system::Event<Runtime>,
            Self::Error> {
        match self { Self::System(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_grandpa::Event> for RuntimeEvent {
    fn from(x: pallet_grandpa::Event) -> Self { RuntimeEvent::Grandpa(x) }
}
impl TryInto<pallet_grandpa::Event> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_grandpa::Event,
            Self::Error> {
        match self { Self::Grandpa(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_balances::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_balances::Event<Runtime>) -> Self {
        RuntimeEvent::Balances(x)
    }
}
impl TryInto<pallet_balances::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_balances::Event<Runtime>,
            Self::Error> {
        match self { Self::Balances(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_vesting::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_vesting::Event<Runtime>) -> Self {
        RuntimeEvent::Vesting(x)
    }
}
impl TryInto<pallet_vesting::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_vesting::Event<Runtime>,
            Self::Error> {
        match self { Self::Vesting(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_transaction_payment::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_transaction_payment::Event<Runtime>) -> Self {
        RuntimeEvent::TransactionPayment(x)
    }
}
impl TryInto<pallet_transaction_payment::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_transaction_payment::Event<Runtime>,
            Self::Error> {
        match self { Self::TransactionPayment(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_bags_list::Event<Runtime, pallet_bags_list::Instance1>> for
    RuntimeEvent {
    fn from(x: pallet_bags_list::Event<Runtime, pallet_bags_list::Instance1>)
        -> Self {
        RuntimeEvent::BagsList(x)
    }
}
impl TryInto<pallet_bags_list::Event<Runtime, pallet_bags_list::Instance1>>
    for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_bags_list::Event<Runtime,
            pallet_bags_list::Instance1>, Self::Error> {
        match self { Self::BagsList(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_im_online::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_im_online::Event<Runtime>) -> Self {
        RuntimeEvent::ImOnline(x)
    }
}
impl TryInto<pallet_im_online::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_im_online::Event<Runtime>,
            Self::Error> {
        match self { Self::ImOnline(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_staking::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_staking::Event<Runtime>) -> Self {
        RuntimeEvent::Staking(x)
    }
}
impl TryInto<pallet_staking::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_staking::Event<Runtime>,
            Self::Error> {
        match self { Self::Staking(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_session::Event> for RuntimeEvent {
    fn from(x: pallet_session::Event) -> Self { RuntimeEvent::Session(x) }
}
impl TryInto<pallet_session::Event> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_session::Event,
            Self::Error> {
        match self { Self::Session(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_treasury::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_treasury::Event<Runtime>) -> Self {
        RuntimeEvent::Treasury(x)
    }
}
impl TryInto<pallet_treasury::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_treasury::Event<Runtime>,
            Self::Error> {
        match self { Self::Treasury(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_utility::Event> for RuntimeEvent {
    fn from(x: pallet_utility::Event) -> Self { RuntimeEvent::Utility(x) }
}
impl TryInto<pallet_utility::Event> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_utility::Event,
            Self::Error> {
        match self { Self::Utility(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_conviction_voting::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_conviction_voting::Event<Runtime>) -> Self {
        RuntimeEvent::ConvictionVoting(x)
    }
}
impl TryInto<pallet_conviction_voting::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_conviction_voting::Event<Runtime>,
            Self::Error> {
        match self { Self::ConvictionVoting(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_referenda::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_referenda::Event<Runtime>) -> Self {
        RuntimeEvent::Referenda(x)
    }
}
impl TryInto<pallet_referenda::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_referenda::Event<Runtime>,
            Self::Error> {
        match self { Self::Referenda(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_ranked_collective::Event<Runtime,
    pallet_ranked_collective::Instance1>> for RuntimeEvent {
    fn from(x:
            pallet_ranked_collective::Event<Runtime,
            pallet_ranked_collective::Instance1>) -> Self {
        RuntimeEvent::FellowshipCollective(x)
    }
}
impl TryInto<pallet_ranked_collective::Event<Runtime,
    pallet_ranked_collective::Instance1>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_ranked_collective::Event<Runtime,
            pallet_ranked_collective::Instance1>, Self::Error> {
        match self {
            Self::FellowshipCollective(evt) => Ok(evt),
            _ => Err(()),
        }
    }
}
impl From<pallet_referenda::Event<Runtime, pallet_referenda::Instance2>> for
    RuntimeEvent {
    fn from(x: pallet_referenda::Event<Runtime, pallet_referenda::Instance2>)
        -> Self {
        RuntimeEvent::FellowshipReferenda(x)
    }
}
impl TryInto<pallet_referenda::Event<Runtime, pallet_referenda::Instance2>>
    for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_referenda::Event<Runtime,
            pallet_referenda::Instance2>, Self::Error> {
        match self {
            Self::FellowshipReferenda(evt) => Ok(evt),
            _ => Err(()),
        }
    }
}
impl From<pallet_whitelist::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_whitelist::Event<Runtime>) -> Self {
        RuntimeEvent::Whitelist(x)
    }
}
impl TryInto<pallet_whitelist::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_whitelist::Event<Runtime>,
            Self::Error> {
        match self { Self::Whitelist(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_scheduler::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_scheduler::Event<Runtime>) -> Self {
        RuntimeEvent::Scheduler(x)
    }
}
impl TryInto<pallet_scheduler::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_scheduler::Event<Runtime>,
            Self::Error> {
        match self { Self::Scheduler(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_preimage::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_preimage::Event<Runtime>) -> Self {
        RuntimeEvent::Preimage(x)
    }
}
impl TryInto<pallet_preimage::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_preimage::Event<Runtime>,
            Self::Error> {
        match self { Self::Preimage(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_identity::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_identity::Event<Runtime>) -> Self {
        RuntimeEvent::Identity(x)
    }
}
impl TryInto<pallet_identity::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_identity::Event<Runtime>,
            Self::Error> {
        match self { Self::Identity(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_proxy::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_proxy::Event<Runtime>) -> Self {
        RuntimeEvent::Proxy(x)
    }
}
impl TryInto<pallet_proxy::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_proxy::Event<Runtime>,
            Self::Error> {
        match self { Self::Proxy(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_multisig::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_multisig::Event<Runtime>) -> Self {
        RuntimeEvent::Multisig(x)
    }
}
impl TryInto<pallet_multisig::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_multisig::Event<Runtime>,
            Self::Error> {
        match self { Self::Multisig(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_election_provider_multi_phase::Event<Runtime>> for
    RuntimeEvent {
    fn from(x: pallet_election_provider_multi_phase::Event<Runtime>) -> Self {
        RuntimeEvent::ElectionProviderMultiPhase(x)
    }
}
impl TryInto<pallet_election_provider_multi_phase::Event<Runtime>> for
    RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_election_provider_multi_phase::Event<Runtime>,
            Self::Error> {
        match self {
            Self::ElectionProviderMultiPhase(evt) => Ok(evt),
            _ => Err(()),
        }
    }
}
impl From<pallet_offences::Event> for RuntimeEvent {
    fn from(x: pallet_offences::Event) -> Self { RuntimeEvent::Offences(x) }
}
impl TryInto<pallet_offences::Event> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_offences::Event,
            Self::Error> {
        match self { Self::Offences(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_bounties::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_bounties::Event<Runtime>) -> Self {
        RuntimeEvent::Bounties(x)
    }
}
impl TryInto<pallet_bounties::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_bounties::Event<Runtime>,
            Self::Error> {
        match self { Self::Bounties(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_child_bounties::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_child_bounties::Event<Runtime>) -> Self {
        RuntimeEvent::ChildBounties(x)
    }
}
impl TryInto<pallet_child_bounties::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_child_bounties::Event<Runtime>,
            Self::Error> {
        match self { Self::ChildBounties(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_nomination_pools::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_nomination_pools::Event<Runtime>) -> Self {
        RuntimeEvent::NominationPools(x)
    }
}
impl TryInto<pallet_nomination_pools::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_nomination_pools::Event<Runtime>,
            Self::Error> {
        match self { Self::NominationPools(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_gear::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_gear::Event<Runtime>) -> Self { RuntimeEvent::Gear(x) }
}
impl TryInto<pallet_gear::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_gear::Event<Runtime>,
            Self::Error> {
        match self { Self::Gear(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_gear_staking_rewards::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_gear_staking_rewards::Event<Runtime>) -> Self {
        RuntimeEvent::StakingRewards(x)
    }
}
impl TryInto<pallet_gear_staking_rewards::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_gear_staking_rewards::Event<Runtime>,
            Self::Error> {
        match self { Self::StakingRewards(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_gear_voucher::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_gear_voucher::Event<Runtime>) -> Self {
        RuntimeEvent::GearVoucher(x)
    }
}
impl TryInto<pallet_gear_voucher::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_gear_voucher::Event<Runtime>,
            Self::Error> {
        match self { Self::GearVoucher(evt) => Ok(evt), _ => Err(()), }
    }
}
#[allow(non_camel_case_types)]
pub enum RuntimeError {

    #[codec(index = 0u8)]
    System(frame_system::Error<Runtime>),

    #[codec(index = 3u8)]
    Babe(pallet_babe::Error<Runtime>),

    #[codec(index = 4u8)]
    Grandpa(pallet_grandpa::Error<Runtime>),

    #[codec(index = 5u8)]
    Balances(pallet_balances::Error<Runtime>),

    #[codec(index = 10u8)]
    Vesting(pallet_vesting::Error<Runtime>),

    #[codec(index = 11u8)]
    BagsList(pallet_bags_list::Error<Runtime, pallet_bags_list::Instance1>),

    #[codec(index = 12u8)]
    ImOnline(pallet_im_online::Error<Runtime>),

    #[codec(index = 13u8)]
    Staking(pallet_staking::Error<Runtime>),

    #[codec(index = 7u8)]
    Session(pallet_session::Error<Runtime>),

    #[codec(index = 14u8)]
    Treasury(pallet_treasury::Error<Runtime>),

    #[codec(index = 8u8)]
    Utility(pallet_utility::Error<Runtime>),

    #[codec(index = 16u8)]
    ConvictionVoting(pallet_conviction_voting::Error<Runtime>),

    #[codec(index = 17u8)]
    Referenda(pallet_referenda::Error<Runtime>),

    #[codec(index = 18u8)]
    FellowshipCollective(pallet_ranked_collective::Error<Runtime,
        pallet_ranked_collective::Instance1>),

    #[codec(index = 19u8)]
    FellowshipReferenda(pallet_referenda::Error<Runtime,
        pallet_referenda::Instance2>),

    #[codec(index = 21u8)]
    Whitelist(pallet_whitelist::Error<Runtime>),

    #[codec(index = 22u8)]
    Scheduler(pallet_scheduler::Error<Runtime>),

    #[codec(index = 23u8)]
    Preimage(pallet_preimage::Error<Runtime>),

    #[codec(index = 24u8)]
    Identity(pallet_identity::Error<Runtime>),

    #[codec(index = 25u8)]
    Proxy(pallet_proxy::Error<Runtime>),

    #[codec(index = 26u8)]
    Multisig(pallet_multisig::Error<Runtime>),

    #[codec(index = 27u8)]
    ElectionProviderMultiPhase(pallet_election_provider_multi_phase::Error<Runtime>),

    #[codec(index = 29u8)]
    Bounties(pallet_bounties::Error<Runtime>),

    #[codec(index = 30u8)]
    ChildBounties(pallet_child_bounties::Error<Runtime>),

    #[codec(index = 31u8)]
    NominationPools(pallet_nomination_pools::Error<Runtime>),

    #[codec(index = 100u8)]
    GearProgram(pallet_gear_program::Error<Runtime>),

    #[codec(index = 101u8)]
    GearMessenger(pallet_gear_messenger::Error<Runtime>),

    #[codec(index = 102u8)]
    GearScheduler(pallet_gear_scheduler::Error<Runtime>),

    #[codec(index = 103u8)]
    GearGas(pallet_gear_gas::Error<Runtime>),

    #[codec(index = 104u8)]
    Gear(pallet_gear::Error<Runtime>),

    #[codec(index = 106u8)]
    StakingRewards(pallet_gear_staking_rewards::Error<Runtime>),

    #[codec(index = 107u8)]
    GearVoucher(pallet_gear_voucher::Error<Runtime>),

    #[codec(index = 108u8)]
    GearBank(pallet_gear_bank::Error<Runtime>),
}
#[allow(deprecated)]
const _: () =
    {
        #[allow(non_camel_case_types)]
        #[automatically_derived]
        impl ::parity_scale_codec::Encode for RuntimeError {
            fn size_hint(&self) -> usize {
                1_usize +
                    match *self {
                        RuntimeError::System(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::Babe(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::Grandpa(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::Balances(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::Vesting(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::BagsList(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::ImOnline(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::Staking(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::Session(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::Treasury(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::Utility(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::ConvictionVoting(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::Referenda(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::FellowshipCollective(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::FellowshipReferenda(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::Whitelist(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::Scheduler(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::Preimage(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::Identity(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::Proxy(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::Multisig(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::ElectionProviderMultiPhase(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::Bounties(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::ChildBounties(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::NominationPools(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::GearProgram(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::GearMessenger(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::GearScheduler(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::GearGas(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::Gear(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::StakingRewards(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::GearVoucher(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeError::GearBank(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        _ => 0_usize,
                    }
            }
            fn encode_to<__CodecOutputEdqy: ::parity_scale_codec::Output +
                ?::core::marker::Sized>(&self,
                __codec_dest_edqy: &mut __CodecOutputEdqy) {
                match *self {
                    RuntimeError::System(ref aa) => {
                        __codec_dest_edqy.push_byte(0u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::Babe(ref aa) => {
                        __codec_dest_edqy.push_byte(3u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::Grandpa(ref aa) => {
                        __codec_dest_edqy.push_byte(4u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::Balances(ref aa) => {
                        __codec_dest_edqy.push_byte(5u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::Vesting(ref aa) => {
                        __codec_dest_edqy.push_byte(10u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::BagsList(ref aa) => {
                        __codec_dest_edqy.push_byte(11u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::ImOnline(ref aa) => {
                        __codec_dest_edqy.push_byte(12u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::Staking(ref aa) => {
                        __codec_dest_edqy.push_byte(13u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::Session(ref aa) => {
                        __codec_dest_edqy.push_byte(7u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::Treasury(ref aa) => {
                        __codec_dest_edqy.push_byte(14u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::Utility(ref aa) => {
                        __codec_dest_edqy.push_byte(8u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::ConvictionVoting(ref aa) => {
                        __codec_dest_edqy.push_byte(16u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::Referenda(ref aa) => {
                        __codec_dest_edqy.push_byte(17u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::FellowshipCollective(ref aa) => {
                        __codec_dest_edqy.push_byte(18u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::FellowshipReferenda(ref aa) => {
                        __codec_dest_edqy.push_byte(19u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::Whitelist(ref aa) => {
                        __codec_dest_edqy.push_byte(21u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::Scheduler(ref aa) => {
                        __codec_dest_edqy.push_byte(22u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::Preimage(ref aa) => {
                        __codec_dest_edqy.push_byte(23u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::Identity(ref aa) => {
                        __codec_dest_edqy.push_byte(24u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::Proxy(ref aa) => {
                        __codec_dest_edqy.push_byte(25u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::Multisig(ref aa) => {
                        __codec_dest_edqy.push_byte(26u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::ElectionProviderMultiPhase(ref aa) => {
                        __codec_dest_edqy.push_byte(27u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::Bounties(ref aa) => {
                        __codec_dest_edqy.push_byte(29u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::ChildBounties(ref aa) => {
                        __codec_dest_edqy.push_byte(30u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::NominationPools(ref aa) => {
                        __codec_dest_edqy.push_byte(31u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::GearProgram(ref aa) => {
                        __codec_dest_edqy.push_byte(100u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::GearMessenger(ref aa) => {
                        __codec_dest_edqy.push_byte(101u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::GearScheduler(ref aa) => {
                        __codec_dest_edqy.push_byte(102u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::GearGas(ref aa) => {
                        __codec_dest_edqy.push_byte(103u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::Gear(ref aa) => {
                        __codec_dest_edqy.push_byte(104u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::StakingRewards(ref aa) => {
                        __codec_dest_edqy.push_byte(106u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::GearVoucher(ref aa) => {
                        __codec_dest_edqy.push_byte(107u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeError::GearBank(ref aa) => {
                        __codec_dest_edqy.push_byte(108u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    _ => (),
                }
            }
        }
        #[automatically_derived]
        impl ::parity_scale_codec::EncodeLike for RuntimeError { }
    };
#[allow(deprecated)]
const _: () =
    {
        #[allow(non_camel_case_types)]
        #[automatically_derived]
        impl ::parity_scale_codec::Decode for RuntimeError {
            fn decode<__CodecInputEdqy: ::parity_scale_codec::Input>(__codec_input_edqy:
                    &mut __CodecInputEdqy)
                -> ::core::result::Result<Self, ::parity_scale_codec::Error> {
                match __codec_input_edqy.read_byte().map_err(|e|
                                e.chain("Could not decode `RuntimeError`, failed to read variant byte"))?
                    {
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 0u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::System({
                                                        let __codec_res_edqy =
                                                            <frame_system::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::System.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 3u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::Babe({
                                                        let __codec_res_edqy =
                                                            <pallet_babe::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::Babe.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 4u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::Grandpa({
                                                        let __codec_res_edqy =
                                                            <pallet_grandpa::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::Grandpa.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 5u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::Balances({
                                                        let __codec_res_edqy =
                                                            <pallet_balances::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::Balances.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 10u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::Vesting({
                                                        let __codec_res_edqy =
                                                            <pallet_vesting::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::Vesting.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 11u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::BagsList({
                                                        let __codec_res_edqy =
                                                            <pallet_bags_list::Error<Runtime,
                                                                    pallet_bags_list::Instance1> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::BagsList.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 12u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::ImOnline({
                                                        let __codec_res_edqy =
                                                            <pallet_im_online::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::ImOnline.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 13u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::Staking({
                                                        let __codec_res_edqy =
                                                            <pallet_staking::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::Staking.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 7u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::Session({
                                                        let __codec_res_edqy =
                                                            <pallet_session::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::Session.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 14u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::Treasury({
                                                        let __codec_res_edqy =
                                                            <pallet_treasury::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::Treasury.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 8u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::Utility({
                                                        let __codec_res_edqy =
                                                            <pallet_utility::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::Utility.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 16u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::ConvictionVoting({
                                                        let __codec_res_edqy =
                                                            <pallet_conviction_voting::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::ConvictionVoting.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 17u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::Referenda({
                                                        let __codec_res_edqy =
                                                            <pallet_referenda::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::Referenda.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 18u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::FellowshipCollective({
                                                        let __codec_res_edqy =
                                                            <pallet_ranked_collective::Error<Runtime,
                                                                    pallet_ranked_collective::Instance1> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::FellowshipCollective.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 19u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::FellowshipReferenda({
                                                        let __codec_res_edqy =
                                                            <pallet_referenda::Error<Runtime,
                                                                    pallet_referenda::Instance2> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::FellowshipReferenda.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 21u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::Whitelist({
                                                        let __codec_res_edqy =
                                                            <pallet_whitelist::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::Whitelist.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 22u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::Scheduler({
                                                        let __codec_res_edqy =
                                                            <pallet_scheduler::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::Scheduler.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 23u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::Preimage({
                                                        let __codec_res_edqy =
                                                            <pallet_preimage::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::Preimage.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 24u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::Identity({
                                                        let __codec_res_edqy =
                                                            <pallet_identity::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::Identity.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 25u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::Proxy({
                                                        let __codec_res_edqy =
                                                            <pallet_proxy::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::Proxy.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 26u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::Multisig({
                                                        let __codec_res_edqy =
                                                            <pallet_multisig::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::Multisig.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 27u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::ElectionProviderMultiPhase({
                                                        let __codec_res_edqy =
                                                            <pallet_election_provider_multi_phase::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::ElectionProviderMultiPhase.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 29u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::Bounties({
                                                        let __codec_res_edqy =
                                                            <pallet_bounties::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::Bounties.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 30u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::ChildBounties({
                                                        let __codec_res_edqy =
                                                            <pallet_child_bounties::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::ChildBounties.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 31u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::NominationPools({
                                                        let __codec_res_edqy =
                                                            <pallet_nomination_pools::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::NominationPools.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 100u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::GearProgram({
                                                        let __codec_res_edqy =
                                                            <pallet_gear_program::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::GearProgram.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 101u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::GearMessenger({
                                                        let __codec_res_edqy =
                                                            <pallet_gear_messenger::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::GearMessenger.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 102u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::GearScheduler({
                                                        let __codec_res_edqy =
                                                            <pallet_gear_scheduler::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::GearScheduler.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 103u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::GearGas({
                                                        let __codec_res_edqy =
                                                            <pallet_gear_gas::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::GearGas.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 104u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::Gear({
                                                        let __codec_res_edqy =
                                                            <pallet_gear::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::Gear.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 106u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::StakingRewards({
                                                        let __codec_res_edqy =
                                                            <pallet_gear_staking_rewards::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::StakingRewards.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 107u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::GearVoucher({
                                                        let __codec_res_edqy =
                                                            <pallet_gear_voucher::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::GearVoucher.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 108u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeError::GearBank({
                                                        let __codec_res_edqy =
                                                            <pallet_gear_bank::Error<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeError::GearBank.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                    _ => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Err(<_ as
                                                        ::core::convert::Into<_>>::into("Could not decode `RuntimeError`, variant doesn't exist"))
                                        })();
                    }
                }
            }
        }
    };
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        impl ::scale_info::TypeInfo for RuntimeError {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder().path(::scale_info::Path::new("RuntimeError",
                                "vara_runtime")).type_params(::alloc::vec::Vec::new()).variant(::scale_info::build::Variants::new().variant("System",
                                                                                                                                                        |v|
                                                                                                                                                            v.index(0u8 as
                                                                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                        f.ty::<frame_system::Error<Runtime>>().type_name("frame_system::Error<Runtime>")))).variant("Babe",
                                                                                                                                                    |v|
                                                                                                                                                        v.index(3u8 as
                                                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                    f.ty::<pallet_babe::Error<Runtime>>().type_name("pallet_babe::Error<Runtime>")))).variant("Grandpa",
                                                                                                                                                |v|
                                                                                                                                                    v.index(4u8 as
                                                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                f.ty::<pallet_grandpa::Error<Runtime>>().type_name("pallet_grandpa::Error<Runtime>")))).variant("Balances",
                                                                                                                                            |v|
                                                                                                                                                v.index(5u8 as
                                                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                            f.ty::<pallet_balances::Error<Runtime>>().type_name("pallet_balances::Error<Runtime>")))).variant("Vesting",
                                                                                                                                        |v|
                                                                                                                                            v.index(10u8 as
                                                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                        f.ty::<pallet_vesting::Error<Runtime>>().type_name("pallet_vesting::Error<Runtime>")))).variant("BagsList",
                                                                                                                                    |v|
                                                                                                                                        v.index(11u8 as
                                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                    f.ty::<pallet_bags_list::Error<Runtime,
                                                                                                                                                            pallet_bags_list::Instance1>>().type_name("pallet_bags_list::Error<Runtime, pallet_bags_list::Instance1>")))).variant("ImOnline",
                                                                                                                                |v|
                                                                                                                                    v.index(12u8 as
                                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                f.ty::<pallet_im_online::Error<Runtime>>().type_name("pallet_im_online::Error<Runtime>")))).variant("Staking",
                                                                                                                            |v|
                                                                                                                                v.index(13u8 as
                                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                            f.ty::<pallet_staking::Error<Runtime>>().type_name("pallet_staking::Error<Runtime>")))).variant("Session",
                                                                                                                        |v|
                                                                                                                            v.index(7u8 as
                                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                        f.ty::<pallet_session::Error<Runtime>>().type_name("pallet_session::Error<Runtime>")))).variant("Treasury",
                                                                                                                    |v|
                                                                                                                        v.index(14u8 as
                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                    f.ty::<pallet_treasury::Error<Runtime>>().type_name("pallet_treasury::Error<Runtime>")))).variant("Utility",
                                                                                                                |v|
                                                                                                                    v.index(8u8 as
                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                f.ty::<pallet_utility::Error<Runtime>>().type_name("pallet_utility::Error<Runtime>")))).variant("ConvictionVoting",
                                                                                                            |v|
                                                                                                                v.index(16u8 as
                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                            f.ty::<pallet_conviction_voting::Error<Runtime>>().type_name("pallet_conviction_voting::Error<Runtime>")))).variant("Referenda",
                                                                                                        |v|
                                                                                                            v.index(17u8 as
                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                        f.ty::<pallet_referenda::Error<Runtime>>().type_name("pallet_referenda::Error<Runtime>")))).variant("FellowshipCollective",
                                                                                                    |v|
                                                                                                        v.index(18u8 as
                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                    f.ty::<pallet_ranked_collective::Error<Runtime,
                                                                                                                            pallet_ranked_collective::Instance1>>().type_name("pallet_ranked_collective::Error<Runtime, pallet_ranked_collective::\nInstance1>")))).variant("FellowshipReferenda",
                                                                                                |v|
                                                                                                    v.index(19u8 as
                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                f.ty::<pallet_referenda::Error<Runtime,
                                                                                                                        pallet_referenda::Instance2>>().type_name("pallet_referenda::Error<Runtime, pallet_referenda::Instance2>")))).variant("Whitelist",
                                                                                            |v|
                                                                                                v.index(21u8 as
                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                            f.ty::<pallet_whitelist::Error<Runtime>>().type_name("pallet_whitelist::Error<Runtime>")))).variant("Scheduler",
                                                                                        |v|
                                                                                            v.index(22u8 as
                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                        f.ty::<pallet_scheduler::Error<Runtime>>().type_name("pallet_scheduler::Error<Runtime>")))).variant("Preimage",
                                                                                    |v|
                                                                                        v.index(23u8 as
                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                    f.ty::<pallet_preimage::Error<Runtime>>().type_name("pallet_preimage::Error<Runtime>")))).variant("Identity",
                                                                                |v|
                                                                                    v.index(24u8 as
                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                f.ty::<pallet_identity::Error<Runtime>>().type_name("pallet_identity::Error<Runtime>")))).variant("Proxy",
                                                                            |v|
                                                                                v.index(25u8 as
                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                            f.ty::<pallet_proxy::Error<Runtime>>().type_name("pallet_proxy::Error<Runtime>")))).variant("Multisig",
                                                                        |v|
                                                                            v.index(26u8 as
                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                        f.ty::<pallet_multisig::Error<Runtime>>().type_name("pallet_multisig::Error<Runtime>")))).variant("ElectionProviderMultiPhase",
                                                                    |v|
                                                                        v.index(27u8 as
                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                    f.ty::<pallet_election_provider_multi_phase::Error<Runtime>>().type_name("pallet_election_provider_multi_phase::Error<Runtime>")))).variant("Bounties",
                                                                |v|
                                                                    v.index(29u8 as
                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                f.ty::<pallet_bounties::Error<Runtime>>().type_name("pallet_bounties::Error<Runtime>")))).variant("ChildBounties",
                                                            |v|
                                                                v.index(30u8 as
                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                            f.ty::<pallet_child_bounties::Error<Runtime>>().type_name("pallet_child_bounties::Error<Runtime>")))).variant("NominationPools",
                                                        |v|
                                                            v.index(31u8 as
                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                        f.ty::<pallet_nomination_pools::Error<Runtime>>().type_name("pallet_nomination_pools::Error<Runtime>")))).variant("GearProgram",
                                                    |v|
                                                        v.index(100u8 as
                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                    f.ty::<pallet_gear_program::Error<Runtime>>().type_name("pallet_gear_program::Error<Runtime>")))).variant("GearMessenger",
                                                |v|
                                                    v.index(101u8 as
                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                f.ty::<pallet_gear_messenger::Error<Runtime>>().type_name("pallet_gear_messenger::Error<Runtime>")))).variant("GearScheduler",
                                            |v|
                                                v.index(102u8 as
                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                            f.ty::<pallet_gear_scheduler::Error<Runtime>>().type_name("pallet_gear_scheduler::Error<Runtime>")))).variant("GearGas",
                                        |v|
                                            v.index(103u8 as
                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                        f.ty::<pallet_gear_gas::Error<Runtime>>().type_name("pallet_gear_gas::Error<Runtime>")))).variant("Gear",
                                    |v|
                                        v.index(104u8 as
                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                    f.ty::<pallet_gear::Error<Runtime>>().type_name("pallet_gear::Error<Runtime>")))).variant("StakingRewards",
                                |v|
                                    v.index(106u8 as
                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                f.ty::<pallet_gear_staking_rewards::Error<Runtime>>().type_name("pallet_gear_staking_rewards::Error<Runtime>")))).variant("GearVoucher",
                            |v|
                                v.index(107u8 as
                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                            f.ty::<pallet_gear_voucher::Error<Runtime>>().type_name("pallet_gear_voucher::Error<Runtime>")))).variant("GearBank",
                        |v|
                            v.index(108u8 as
                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                        f.ty::<pallet_gear_bank::Error<Runtime>>().type_name("pallet_gear_bank::Error<Runtime>")))))
            }
        }
        ;
    };
impl core::fmt::Debug for RuntimeError {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        match self {
            Self::System(ref a0) =>
                fmt.debug_tuple("RuntimeError::System").field(a0).finish(),
            Self::Babe(ref a0) =>
                fmt.debug_tuple("RuntimeError::Babe").field(a0).finish(),
            Self::Grandpa(ref a0) =>
                fmt.debug_tuple("RuntimeError::Grandpa").field(a0).finish(),
            Self::Balances(ref a0) =>
                fmt.debug_tuple("RuntimeError::Balances").field(a0).finish(),
            Self::Vesting(ref a0) =>
                fmt.debug_tuple("RuntimeError::Vesting").field(a0).finish(),
            Self::BagsList(ref a0) =>
                fmt.debug_tuple("RuntimeError::BagsList").field(a0).finish(),
            Self::ImOnline(ref a0) =>
                fmt.debug_tuple("RuntimeError::ImOnline").field(a0).finish(),
            Self::Staking(ref a0) =>
                fmt.debug_tuple("RuntimeError::Staking").field(a0).finish(),
            Self::Session(ref a0) =>
                fmt.debug_tuple("RuntimeError::Session").field(a0).finish(),
            Self::Treasury(ref a0) =>
                fmt.debug_tuple("RuntimeError::Treasury").field(a0).finish(),
            Self::Utility(ref a0) =>
                fmt.debug_tuple("RuntimeError::Utility").field(a0).finish(),
            Self::ConvictionVoting(ref a0) =>
                fmt.debug_tuple("RuntimeError::ConvictionVoting").field(a0).finish(),
            Self::Referenda(ref a0) =>
                fmt.debug_tuple("RuntimeError::Referenda").field(a0).finish(),
            Self::FellowshipCollective(ref a0) =>
                fmt.debug_tuple("RuntimeError::FellowshipCollective").field(a0).finish(),
            Self::FellowshipReferenda(ref a0) =>
                fmt.debug_tuple("RuntimeError::FellowshipReferenda").field(a0).finish(),
            Self::Whitelist(ref a0) =>
                fmt.debug_tuple("RuntimeError::Whitelist").field(a0).finish(),
            Self::Scheduler(ref a0) =>
                fmt.debug_tuple("RuntimeError::Scheduler").field(a0).finish(),
            Self::Preimage(ref a0) =>
                fmt.debug_tuple("RuntimeError::Preimage").field(a0).finish(),
            Self::Identity(ref a0) =>
                fmt.debug_tuple("RuntimeError::Identity").field(a0).finish(),
            Self::Proxy(ref a0) =>
                fmt.debug_tuple("RuntimeError::Proxy").field(a0).finish(),
            Self::Multisig(ref a0) =>
                fmt.debug_tuple("RuntimeError::Multisig").field(a0).finish(),
            Self::ElectionProviderMultiPhase(ref a0) =>
                fmt.debug_tuple("RuntimeError::ElectionProviderMultiPhase").field(a0).finish(),
            Self::Bounties(ref a0) =>
                fmt.debug_tuple("RuntimeError::Bounties").field(a0).finish(),
            Self::ChildBounties(ref a0) =>
                fmt.debug_tuple("RuntimeError::ChildBounties").field(a0).finish(),
            Self::NominationPools(ref a0) =>
                fmt.debug_tuple("RuntimeError::NominationPools").field(a0).finish(),
            Self::GearProgram(ref a0) =>
                fmt.debug_tuple("RuntimeError::GearProgram").field(a0).finish(),
            Self::GearMessenger(ref a0) =>
                fmt.debug_tuple("RuntimeError::GearMessenger").field(a0).finish(),
            Self::GearScheduler(ref a0) =>
                fmt.debug_tuple("RuntimeError::GearScheduler").field(a0).finish(),
            Self::GearGas(ref a0) =>
                fmt.debug_tuple("RuntimeError::GearGas").field(a0).finish(),
            Self::Gear(ref a0) =>
                fmt.debug_tuple("RuntimeError::Gear").field(a0).finish(),
            Self::StakingRewards(ref a0) =>
                fmt.debug_tuple("RuntimeError::StakingRewards").field(a0).finish(),
            Self::GearVoucher(ref a0) =>
                fmt.debug_tuple("RuntimeError::GearVoucher").field(a0).finish(),
            Self::GearBank(ref a0) =>
                fmt.debug_tuple("RuntimeError::GearBank").field(a0).finish(),
            _ => Ok(()),
        }
    }
}
impl From<frame_system::Error<Runtime>> for RuntimeError {
    fn from(x: frame_system::Error<Runtime>) -> Self {
        RuntimeError::System(x)
    }
}
impl TryInto<frame_system::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<frame_system::Error<Runtime>,
            Self::Error> {
        match self { Self::System(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_babe::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_babe::Error<Runtime>) -> Self { RuntimeError::Babe(x) }
}
impl TryInto<pallet_babe::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_babe::Error<Runtime>,
            Self::Error> {
        match self { Self::Babe(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_grandpa::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_grandpa::Error<Runtime>) -> Self {
        RuntimeError::Grandpa(x)
    }
}
impl TryInto<pallet_grandpa::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_grandpa::Error<Runtime>,
            Self::Error> {
        match self { Self::Grandpa(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_balances::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_balances::Error<Runtime>) -> Self {
        RuntimeError::Balances(x)
    }
}
impl TryInto<pallet_balances::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_balances::Error<Runtime>,
            Self::Error> {
        match self { Self::Balances(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_vesting::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_vesting::Error<Runtime>) -> Self {
        RuntimeError::Vesting(x)
    }
}
impl TryInto<pallet_vesting::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_vesting::Error<Runtime>,
            Self::Error> {
        match self { Self::Vesting(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_bags_list::Error<Runtime, pallet_bags_list::Instance1>> for
    RuntimeError {
    fn from(x: pallet_bags_list::Error<Runtime, pallet_bags_list::Instance1>)
        -> Self {
        RuntimeError::BagsList(x)
    }
}
impl TryInto<pallet_bags_list::Error<Runtime, pallet_bags_list::Instance1>>
    for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_bags_list::Error<Runtime,
            pallet_bags_list::Instance1>, Self::Error> {
        match self { Self::BagsList(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_im_online::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_im_online::Error<Runtime>) -> Self {
        RuntimeError::ImOnline(x)
    }
}
impl TryInto<pallet_im_online::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_im_online::Error<Runtime>,
            Self::Error> {
        match self { Self::ImOnline(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_staking::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_staking::Error<Runtime>) -> Self {
        RuntimeError::Staking(x)
    }
}
impl TryInto<pallet_staking::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_staking::Error<Runtime>,
            Self::Error> {
        match self { Self::Staking(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_session::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_session::Error<Runtime>) -> Self {
        RuntimeError::Session(x)
    }
}
impl TryInto<pallet_session::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_session::Error<Runtime>,
            Self::Error> {
        match self { Self::Session(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_treasury::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_treasury::Error<Runtime>) -> Self {
        RuntimeError::Treasury(x)
    }
}
impl TryInto<pallet_treasury::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_treasury::Error<Runtime>,
            Self::Error> {
        match self { Self::Treasury(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_utility::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_utility::Error<Runtime>) -> Self {
        RuntimeError::Utility(x)
    }
}
impl TryInto<pallet_utility::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_utility::Error<Runtime>,
            Self::Error> {
        match self { Self::Utility(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_conviction_voting::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_conviction_voting::Error<Runtime>) -> Self {
        RuntimeError::ConvictionVoting(x)
    }
}
impl TryInto<pallet_conviction_voting::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_conviction_voting::Error<Runtime>,
            Self::Error> {
        match self { Self::ConvictionVoting(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_referenda::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_referenda::Error<Runtime>) -> Self {
        RuntimeError::Referenda(x)
    }
}
impl TryInto<pallet_referenda::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_referenda::Error<Runtime>,
            Self::Error> {
        match self { Self::Referenda(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_ranked_collective::Error<Runtime,
    pallet_ranked_collective::Instance1>> for RuntimeError {
    fn from(x:
            pallet_ranked_collective::Error<Runtime,
            pallet_ranked_collective::Instance1>) -> Self {
        RuntimeError::FellowshipCollective(x)
    }
}
impl TryInto<pallet_ranked_collective::Error<Runtime,
    pallet_ranked_collective::Instance1>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_ranked_collective::Error<Runtime,
            pallet_ranked_collective::Instance1>, Self::Error> {
        match self {
            Self::FellowshipCollective(evt) => Ok(evt),
            _ => Err(()),
        }
    }
}
impl From<pallet_referenda::Error<Runtime, pallet_referenda::Instance2>> for
    RuntimeError {
    fn from(x: pallet_referenda::Error<Runtime, pallet_referenda::Instance2>)
        -> Self {
        RuntimeError::FellowshipReferenda(x)
    }
}
impl TryInto<pallet_referenda::Error<Runtime, pallet_referenda::Instance2>>
    for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_referenda::Error<Runtime,
            pallet_referenda::Instance2>, Self::Error> {
        match self {
            Self::FellowshipReferenda(evt) => Ok(evt),
            _ => Err(()),
        }
    }
}
impl From<pallet_whitelist::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_whitelist::Error<Runtime>) -> Self {
        RuntimeError::Whitelist(x)
    }
}
impl TryInto<pallet_whitelist::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_whitelist::Error<Runtime>,
            Self::Error> {
        match self { Self::Whitelist(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_scheduler::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_scheduler::Error<Runtime>) -> Self {
        RuntimeError::Scheduler(x)
    }
}
impl TryInto<pallet_scheduler::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_scheduler::Error<Runtime>,
            Self::Error> {
        match self { Self::Scheduler(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_preimage::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_preimage::Error<Runtime>) -> Self {
        RuntimeError::Preimage(x)
    }
}
impl TryInto<pallet_preimage::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_preimage::Error<Runtime>,
            Self::Error> {
        match self { Self::Preimage(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_identity::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_identity::Error<Runtime>) -> Self {
        RuntimeError::Identity(x)
    }
}
impl TryInto<pallet_identity::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_identity::Error<Runtime>,
            Self::Error> {
        match self { Self::Identity(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_proxy::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_proxy::Error<Runtime>) -> Self {
        RuntimeError::Proxy(x)
    }
}
impl TryInto<pallet_proxy::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_proxy::Error<Runtime>,
            Self::Error> {
        match self { Self::Proxy(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_multisig::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_multisig::Error<Runtime>) -> Self {
        RuntimeError::Multisig(x)
    }
}
impl TryInto<pallet_multisig::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_multisig::Error<Runtime>,
            Self::Error> {
        match self { Self::Multisig(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_election_provider_multi_phase::Error<Runtime>> for
    RuntimeError {
    fn from(x: pallet_election_provider_multi_phase::Error<Runtime>) -> Self {
        RuntimeError::ElectionProviderMultiPhase(x)
    }
}
impl TryInto<pallet_election_provider_multi_phase::Error<Runtime>> for
    RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_election_provider_multi_phase::Error<Runtime>,
            Self::Error> {
        match self {
            Self::ElectionProviderMultiPhase(evt) => Ok(evt),
            _ => Err(()),
        }
    }
}
impl From<pallet_bounties::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_bounties::Error<Runtime>) -> Self {
        RuntimeError::Bounties(x)
    }
}
impl TryInto<pallet_bounties::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_bounties::Error<Runtime>,
            Self::Error> {
        match self { Self::Bounties(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_child_bounties::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_child_bounties::Error<Runtime>) -> Self {
        RuntimeError::ChildBounties(x)
    }
}
impl TryInto<pallet_child_bounties::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_child_bounties::Error<Runtime>,
            Self::Error> {
        match self { Self::ChildBounties(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_nomination_pools::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_nomination_pools::Error<Runtime>) -> Self {
        RuntimeError::NominationPools(x)
    }
}
impl TryInto<pallet_nomination_pools::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_nomination_pools::Error<Runtime>,
            Self::Error> {
        match self { Self::NominationPools(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_gear_program::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_gear_program::Error<Runtime>) -> Self {
        RuntimeError::GearProgram(x)
    }
}
impl TryInto<pallet_gear_program::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_gear_program::Error<Runtime>,
            Self::Error> {
        match self { Self::GearProgram(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_gear_messenger::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_gear_messenger::Error<Runtime>) -> Self {
        RuntimeError::GearMessenger(x)
    }
}
impl TryInto<pallet_gear_messenger::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_gear_messenger::Error<Runtime>,
            Self::Error> {
        match self { Self::GearMessenger(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_gear_scheduler::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_gear_scheduler::Error<Runtime>) -> Self {
        RuntimeError::GearScheduler(x)
    }
}
impl TryInto<pallet_gear_scheduler::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_gear_scheduler::Error<Runtime>,
            Self::Error> {
        match self { Self::GearScheduler(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_gear_gas::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_gear_gas::Error<Runtime>) -> Self {
        RuntimeError::GearGas(x)
    }
}
impl TryInto<pallet_gear_gas::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_gear_gas::Error<Runtime>,
            Self::Error> {
        match self { Self::GearGas(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_gear::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_gear::Error<Runtime>) -> Self { RuntimeError::Gear(x) }
}
impl TryInto<pallet_gear::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_gear::Error<Runtime>,
            Self::Error> {
        match self { Self::Gear(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_gear_staking_rewards::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_gear_staking_rewards::Error<Runtime>) -> Self {
        RuntimeError::StakingRewards(x)
    }
}
impl TryInto<pallet_gear_staking_rewards::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_gear_staking_rewards::Error<Runtime>,
            Self::Error> {
        match self { Self::StakingRewards(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_gear_voucher::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_gear_voucher::Error<Runtime>) -> Self {
        RuntimeError::GearVoucher(x)
    }
}
impl TryInto<pallet_gear_voucher::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_gear_voucher::Error<Runtime>,
            Self::Error> {
        match self { Self::GearVoucher(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_gear_bank::Error<Runtime>> for RuntimeError {
    fn from(x: pallet_gear_bank::Error<Runtime>) -> Self {
        RuntimeError::GearBank(x)
    }
}
impl TryInto<pallet_gear_bank::Error<Runtime>> for RuntimeError {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_gear_bank::Error<Runtime>,
            Self::Error> {
        match self { Self::GearBank(evt) => Ok(evt), _ => Err(()), }
    }
}
impl RuntimeError {
    #[doc =
    r" Optionally convert the `DispatchError` into the `RuntimeError`."]
    #[doc = r""]
    #[doc =
    r" Returns `Some` if the error matches the `DispatchError::Module` variant, otherwise `None`."]
    pub fn from_dispatch_error(err:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::DispatchError)
        -> Option<Self> {
        let self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::DispatchError::Module(module_error) =
            err else { return None };
        let bytes =
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::codec::Encode::encode(&module_error);
        self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::codec::Decode::decode(&mut &bytes[..]).ok()
    }
}
#[doc = r" The runtime origin type representing the origin of a call."]
#[doc = r""]
#[doc =
" Origin is always created with the base filter configured in [`frame_system::Config::BaseCallFilter`]."]
pub struct RuntimeOrigin {
    caller: OriginCaller,
    filter: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::rc::Rc<Box<dyn Fn(&<Runtime
    as frame_system::Config>::RuntimeCall) -> bool>>,
}
#[automatically_derived]
impl ::core::clone::Clone for RuntimeOrigin {
    #[inline]
    fn clone(&self) -> RuntimeOrigin {
        RuntimeOrigin {
            caller: ::core::clone::Clone::clone(&self.caller),
            filter: ::core::clone::Clone::clone(&self.filter),
        }
    }
}
#[cfg(feature = "std")]
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::fmt::Debug
    for RuntimeOrigin {
    fn fmt(&self,
        fmt:
            &mut self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::fmt::Formatter)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<(),
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::fmt::Error> {
        fmt.debug_struct("Origin").field("caller",
                    &self.caller).field("filter", &"[function ptr]").finish()
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::OriginTrait
    for RuntimeOrigin {
    type Call = <Runtime as frame_system::Config>::RuntimeCall;
    type PalletsOrigin = OriginCaller;
    type AccountId = <Runtime as frame_system::Config>::AccountId;
    fn add_filter(&mut self, filter: impl Fn(&Self::Call) -> bool + 'static) {
        let f = self.filter.clone();
        self.filter =
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::rc::Rc::new(Box::new(move
                        |call| { f(call) && filter(call) }));
    }
    fn reset_filter(&mut self) {
        let filter =
            <<Runtime as frame_system::Config>::BaseCallFilter as
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::Contains<<Runtime
                as frame_system::Config>::RuntimeCall>>::contains;
        self.filter =
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::rc::Rc::new(Box::new(filter));
    }
    fn set_caller_from(&mut self, other: impl Into<Self>) {
        self.caller = other.into().caller;
    }
    fn filter_call(&self, call: &Self::Call) -> bool {
        match self.caller {
            OriginCaller::system(frame_system::Origin::<Runtime>::Root) =>
                true,
            _ => (self.filter)(call),
        }
    }
    fn caller(&self) -> &Self::PalletsOrigin { &self.caller }
    fn into_caller(self) -> Self::PalletsOrigin { self.caller }
    fn try_with_caller<R>(mut self,
        f: impl FnOnce(Self::PalletsOrigin) -> Result<R, Self::PalletsOrigin>)
        -> Result<R, Self> {
        match f(self.caller) {
            Ok(r) => Ok(r),
            Err(caller) => { self.caller = caller; Err(self) }
        }
    }
    fn none() -> Self { frame_system::RawOrigin::None.into() }
    fn root() -> Self { frame_system::RawOrigin::Root.into() }
    fn signed(by: Self::AccountId) -> Self {
        frame_system::RawOrigin::Signed(by).into()
    }
}
#[allow(non_camel_case_types)]
pub enum OriginCaller {

    #[codec(index = 0u8)]
    system(frame_system::Origin<Runtime>),

    #[codec(index = 20u8)]
    Origins(pallet_custom_origins::Origin),

    #[allow(dead_code)]
    Void(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::Void),
}
#[automatically_derived]
#[allow(non_camel_case_types)]
impl ::core::clone::Clone for OriginCaller {
    #[inline]
    fn clone(&self) -> OriginCaller {
        match self {
            OriginCaller::system(__self_0) =>
                OriginCaller::system(::core::clone::Clone::clone(__self_0)),
            OriginCaller::Origins(__self_0) =>
                OriginCaller::Origins(::core::clone::Clone::clone(__self_0)),
            OriginCaller::Void(__self_0) =>
                OriginCaller::Void(::core::clone::Clone::clone(__self_0)),
        }
    }
}
#[automatically_derived]
#[allow(non_camel_case_types)]
impl ::core::marker::StructuralPartialEq for OriginCaller { }
#[automatically_derived]
#[allow(non_camel_case_types)]
impl ::core::cmp::PartialEq for OriginCaller {
    #[inline]
    fn eq(&self, other: &OriginCaller) -> bool {
        let __self_tag = ::core::intrinsics::discriminant_value(self);
        let __arg1_tag = ::core::intrinsics::discriminant_value(other);
        __self_tag == __arg1_tag &&
            match (self, other) {
                (OriginCaller::system(__self_0),
                    OriginCaller::system(__arg1_0)) => *__self_0 == *__arg1_0,
                (OriginCaller::Origins(__self_0),
                    OriginCaller::Origins(__arg1_0)) => *__self_0 == *__arg1_0,
                (OriginCaller::Void(__self_0), OriginCaller::Void(__arg1_0))
                    => *__self_0 == *__arg1_0,
                _ => unsafe { ::core::intrinsics::unreachable() }
            }
    }
}
#[automatically_derived]
#[allow(non_camel_case_types)]
impl ::core::marker::StructuralEq for OriginCaller { }
#[automatically_derived]
#[allow(non_camel_case_types)]
impl ::core::cmp::Eq for OriginCaller {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {
        let _: ::core::cmp::AssertParamIsEq<frame_system::Origin<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_custom_origins::Origin>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::Void>;
    }
}
impl core::fmt::Debug for OriginCaller {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        match self {
            Self::system(ref a0) =>
                fmt.debug_tuple("OriginCaller::system").field(a0).finish(),
            Self::Origins(ref a0) =>
                fmt.debug_tuple("OriginCaller::Origins").field(a0).finish(),
            Self::Void(ref a0) =>
                fmt.debug_tuple("OriginCaller::Void").field(a0).finish(),
            _ => Ok(()),
        }
    }
}
#[allow(deprecated)]
const _: () =
    {
        #[allow(non_camel_case_types)]
        #[automatically_derived]
        impl ::parity_scale_codec::Encode for OriginCaller {
            fn size_hint(&self) -> usize {
                1_usize +
                    match *self {
                        OriginCaller::system(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        OriginCaller::Origins(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        OriginCaller::Void(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        _ => 0_usize,
                    }
            }
            fn encode_to<__CodecOutputEdqy: ::parity_scale_codec::Output +
                ?::core::marker::Sized>(&self,
                __codec_dest_edqy: &mut __CodecOutputEdqy) {
                match *self {
                    OriginCaller::system(ref aa) => {
                        __codec_dest_edqy.push_byte(0u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    OriginCaller::Origins(ref aa) => {
                        __codec_dest_edqy.push_byte(20u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    OriginCaller::Void(ref aa) => {
                        __codec_dest_edqy.push_byte(2usize as
                                ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    _ => (),
                }
            }
        }
        #[automatically_derived]
        impl ::parity_scale_codec::EncodeLike for OriginCaller { }
    };
#[allow(deprecated)]
const _: () =
    {
        #[allow(non_camel_case_types)]
        #[automatically_derived]
        impl ::parity_scale_codec::Decode for OriginCaller {
            fn decode<__CodecInputEdqy: ::parity_scale_codec::Input>(__codec_input_edqy:
                    &mut __CodecInputEdqy)
                -> ::core::result::Result<Self, ::parity_scale_codec::Error> {
                match __codec_input_edqy.read_byte().map_err(|e|
                                e.chain("Could not decode `OriginCaller`, failed to read variant byte"))?
                    {
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 0u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(OriginCaller::system({
                                                        let __codec_res_edqy =
                                                            <frame_system::Origin<Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `OriginCaller::system.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 20u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(OriginCaller::Origins({
                                                        let __codec_res_edqy =
                                                            <pallet_custom_origins::Origin as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `OriginCaller::Origins.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 2usize as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(OriginCaller::Void({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::Void
                                                                    as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `OriginCaller::Void.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                    _ => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Err(<_ as
                                                        ::core::convert::Into<_>>::into("Could not decode `OriginCaller`, variant doesn't exist"))
                                        })();
                    }
                }
            }
        }
    };
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        impl ::scale_info::TypeInfo for OriginCaller {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder().path(::scale_info::Path::new("OriginCaller",
                                "vara_runtime")).type_params(::alloc::vec::Vec::new()).variant(::scale_info::build::Variants::new().variant("system",
                                |v|
                                    v.index(0u8 as
                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                f.ty::<frame_system::Origin<Runtime>>().type_name("frame_system::Origin<Runtime>")))).variant("Origins",
                            |v|
                                v.index(20u8 as
                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                            f.ty::<pallet_custom_origins::Origin>().type_name("pallet_custom_origins::Origin")))).variant("Void",
                        |v|
                            v.index(2usize as
                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                        f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::Void>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::\n__private::Void")))))
            }
        }
        ;
    };
const _: () =
    {
        impl ::parity_scale_codec::MaxEncodedLen for OriginCaller {
            fn max_encoded_len() -> ::core::primitive::usize {
                0_usize.max(0_usize.saturating_add(<frame_system::Origin<Runtime>>::max_encoded_len())).max(0_usize.saturating_add(<pallet_custom_origins::Origin>::max_encoded_len())).max(0_usize.saturating_add(<self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::Void>::max_encoded_len())).saturating_add(1)
            }
        }
    };
#[allow(dead_code)]
impl RuntimeOrigin {
    #[doc =
    " Create with system none origin and [`frame_system::Config::BaseCallFilter`]."]
    pub fn none() -> Self {
        <RuntimeOrigin as
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::OriginTrait>::none()
    }
    #[doc =
    " Create with system root origin and [`frame_system::Config::BaseCallFilter`]."]
    pub fn root() -> Self {
        <RuntimeOrigin as
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::OriginTrait>::root()
    }
    #[doc =
    " Create with system signed origin and [`frame_system::Config::BaseCallFilter`]."]
    pub fn signed(by: <Runtime as frame_system::Config>::AccountId) -> Self {
        <RuntimeOrigin as
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::OriginTrait>::signed(by)
    }
}
impl From<frame_system::Origin<Runtime>> for OriginCaller {
    fn from(x: frame_system::Origin<Runtime>) -> Self {
        OriginCaller::system(x)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallerTrait<<Runtime
    as frame_system::Config>::AccountId> for OriginCaller {
    fn into_system(self)
        ->
            Option<frame_system::RawOrigin<<Runtime as
            frame_system::Config>::AccountId>> {
        match self { OriginCaller::system(x) => Some(x), _ => None, }
    }
    fn as_system_ref(&self)
        ->
            Option<&frame_system::RawOrigin<<Runtime as
            frame_system::Config>::AccountId>> {
        match &self { OriginCaller::system(o) => Some(o), _ => None, }
    }
}
impl TryFrom<OriginCaller> for frame_system::Origin<Runtime> {
    type Error = OriginCaller;
    fn try_from(x: OriginCaller)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<frame_system::Origin<Runtime>,
            OriginCaller> {
        if let OriginCaller::system(l) = x { Ok(l) } else { Err(x) }
    }
}
impl From<frame_system::Origin<Runtime>> for RuntimeOrigin {
    #[doc =
    " Convert to runtime origin, using as filter: [`frame_system::Config::BaseCallFilter`]."]
    fn from(x: frame_system::Origin<Runtime>) -> Self {
        let o: OriginCaller = x.into();
        o.into()
    }
}
impl From<OriginCaller> for RuntimeOrigin {
    fn from(x: OriginCaller) -> Self {
        let mut o =
            RuntimeOrigin {
                caller: x,
                filter: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::rc::Rc::new(Box::new(|_|
                            true)),
            };
        self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::OriginTrait::reset_filter(&mut o);
        o
    }
}
impl From<RuntimeOrigin> for
    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<frame_system::Origin<Runtime>,
    RuntimeOrigin> {
    #[doc =
    r" NOTE: converting to pallet origin loses the origin filter information."]
    fn from(val: RuntimeOrigin) -> Self {
        if let OriginCaller::system(l) = val.caller {
                Ok(l)
            } else { Err(val) }
    }
}
impl From<Option<<Runtime as frame_system::Config>::AccountId>> for
    RuntimeOrigin {
    #[doc =
    " Convert to runtime origin with caller being system signed or none and use filter [`frame_system::Config::BaseCallFilter`]."]
    fn from(x: Option<<Runtime as frame_system::Config>::AccountId>) -> Self {
        <frame_system::Origin<Runtime>>::from(x).into()
    }
}
impl From<pallet_custom_origins::Origin> for OriginCaller {
    fn from(x: pallet_custom_origins::Origin) -> Self {
        OriginCaller::Origins(x)
    }
}
impl From<pallet_custom_origins::Origin> for RuntimeOrigin {
    #[doc =
    "  Convert to runtime origin using [`pallet_custom_origins::Config::BaseCallFilter`]."]
    fn from(x: pallet_custom_origins::Origin) -> Self {
        let x: OriginCaller = x.into();
        x.into()
    }
}
impl From<RuntimeOrigin> for
    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_custom_origins::Origin,
    RuntimeOrigin> {
    #[doc =
    r" NOTE: converting to pallet origin loses the origin filter information."]
    fn from(val: RuntimeOrigin) -> Self {
        if let OriginCaller::Origins(l) = val.caller {
                Ok(l)
            } else { Err(val) }
    }
}
impl TryFrom<OriginCaller> for pallet_custom_origins::Origin {
    type Error = OriginCaller;
    fn try_from(x: OriginCaller)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<pallet_custom_origins::Origin,
            OriginCaller> {
        if let OriginCaller::Origins(l) = x { Ok(l) } else { Err(x) }
    }
}
impl<'a> TryFrom<&'a OriginCaller> for &'a pallet_custom_origins::Origin {
    type Error = ();
    fn try_from(x: &'a OriginCaller)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<&'a pallet_custom_origins::Origin,
            ()> {
        if let OriginCaller::Origins(l) = x { Ok(&l) } else { Err(()) }
    }
}
impl<'a> TryFrom<&'a RuntimeOrigin> for &'a pallet_custom_origins::Origin {
    type Error = ();
    fn try_from(x: &'a RuntimeOrigin)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result<&'a pallet_custom_origins::Origin,
            ()> {
        if let OriginCaller::Origins(l) = &x.caller {
                Ok(&l)
            } else { Err(()) }
    }
}
pub type System = frame_system::Pallet<Runtime>;
pub type Timestamp = pallet_timestamp::Pallet<Runtime>;
pub type Authorship = pallet_authorship::Pallet<Runtime>;
pub type AuthorityDiscovery = pallet_authority_discovery::Pallet<Runtime>;
pub type Babe = pallet_babe::Pallet<Runtime>;
pub type Grandpa = pallet_grandpa::Pallet<Runtime>;
pub type Balances = pallet_balances::Pallet<Runtime>;
pub type Vesting = pallet_vesting::Pallet<Runtime>;
pub type TransactionPayment = pallet_transaction_payment::Pallet<Runtime>;
pub type BagsList =
    pallet_bags_list::Pallet<Runtime, pallet_bags_list::Instance1>;
pub type ImOnline = pallet_im_online::Pallet<Runtime>;
pub type Staking = pallet_staking::Pallet<Runtime>;
pub type Session = pallet_session::Pallet<Runtime>;
pub type Treasury = pallet_treasury::Pallet<Runtime>;
pub type Historical = pallet_session_historical::Pallet<Runtime>;
pub type Utility = pallet_utility::Pallet<Runtime>;
pub type ConvictionVoting = pallet_conviction_voting::Pallet<Runtime>;
pub type Referenda = pallet_referenda::Pallet<Runtime>;
pub type FellowshipCollective =
    pallet_ranked_collective::Pallet<Runtime,
    pallet_ranked_collective::Instance1>;
pub type FellowshipReferenda =
    pallet_referenda::Pallet<Runtime, pallet_referenda::Instance2>;
pub type Origins = pallet_custom_origins::Pallet<Runtime>;
pub type Whitelist = pallet_whitelist::Pallet<Runtime>;
pub type Scheduler = pallet_scheduler::Pallet<Runtime>;
pub type Preimage = pallet_preimage::Pallet<Runtime>;
pub type Identity = pallet_identity::Pallet<Runtime>;
pub type Proxy = pallet_proxy::Pallet<Runtime>;
pub type Multisig = pallet_multisig::Pallet<Runtime>;
pub type ElectionProviderMultiPhase =
    pallet_election_provider_multi_phase::Pallet<Runtime>;
pub type Offences = pallet_offences::Pallet<Runtime>;
pub type Bounties = pallet_bounties::Pallet<Runtime>;
pub type ChildBounties = pallet_child_bounties::Pallet<Runtime>;
pub type NominationPools = pallet_nomination_pools::Pallet<Runtime>;
pub type GearProgram = pallet_gear_program::Pallet<Runtime>;
pub type GearMessenger = pallet_gear_messenger::Pallet<Runtime>;
pub type GearScheduler = pallet_gear_scheduler::Pallet<Runtime>;
pub type GearGas = pallet_gear_gas::Pallet<Runtime>;
pub type Gear = pallet_gear::Pallet<Runtime>;
pub type GearPayment = pallet_gear_payment::Pallet<Runtime>;
pub type StakingRewards = pallet_gear_staking_rewards::Pallet<Runtime>;
pub type GearVoucher = pallet_gear_voucher::Pallet<Runtime>;
pub type GearBank = pallet_gear_bank::Pallet<Runtime>;
pub type GearBuiltin = pallet_gear_builtin::Pallet<Runtime>;
#[doc = r" All pallets included in the runtime as a nested tuple of types."]
#[deprecated(note =
"The type definition has changed from representing all pallets \
			excluding system, in reversed order to become the representation of all pallets \
			including system pallet in regular order. For this reason it is encouraged to use \
			explicitly one of `AllPalletsWithSystem`, `AllPalletsWithoutSystem`, \
			`AllPalletsWithSystemReversed`, `AllPalletsWithoutSystemReversed`. \
			Note that the type `frame_executive::Executive` expects one of `AllPalletsWithSystem` \
			, `AllPalletsWithSystemReversed`, `AllPalletsReversedWithSystemFirst`. More details in \
			https://github.com/paritytech/substrate/pull/10043")]
pub type AllPallets = AllPalletsWithSystem;
#[cfg(all())]
#[doc = r" All pallets included in the runtime as a nested tuple of types."]
pub type AllPalletsWithSystem =
    (System, Timestamp, Authorship, AuthorityDiscovery, Babe, Grandpa,
    Balances, Vesting, TransactionPayment, BagsList, ImOnline, Staking,
    Session, Treasury, Historical, Utility, ConvictionVoting, Referenda,
    FellowshipCollective, FellowshipReferenda, Origins, Whitelist, Scheduler,
    Preimage, Identity, Proxy, Multisig, ElectionProviderMultiPhase, Offences,
    Bounties, ChildBounties, NominationPools, GearProgram, GearMessenger,
    GearScheduler, GearGas, Gear, GearPayment, StakingRewards, GearVoucher,
    GearBank, GearBuiltin);
#[cfg(all())]
#[doc = r" All pallets included in the runtime as a nested tuple of types."]
#[doc = r" Excludes the System pallet."]
pub type AllPalletsWithoutSystem =
    (Timestamp, Authorship, AuthorityDiscovery, Babe, Grandpa, Balances,
    Vesting, TransactionPayment, BagsList, ImOnline, Staking, Session,
    Treasury, Historical, Utility, ConvictionVoting, Referenda,
    FellowshipCollective, FellowshipReferenda, Origins, Whitelist, Scheduler,
    Preimage, Identity, Proxy, Multisig, ElectionProviderMultiPhase, Offences,
    Bounties, ChildBounties, NominationPools, GearProgram, GearMessenger,
    GearScheduler, GearGas, Gear, GearPayment, StakingRewards, GearVoucher,
    GearBank, GearBuiltin);
#[cfg(all())]
#[doc =
r" All pallets included in the runtime as a nested tuple of types in reversed order."]
#[deprecated(note =
"Using reverse pallet orders is deprecated. use only \
			`AllPalletsWithSystem or AllPalletsWithoutSystem`")]
pub type AllPalletsWithSystemReversed =
    (GearBuiltin, GearBank, GearVoucher, StakingRewards, GearPayment, Gear,
    GearGas, GearScheduler, GearMessenger, GearProgram, NominationPools,
    ChildBounties, Bounties, Offences, ElectionProviderMultiPhase, Multisig,
    Proxy, Identity, Preimage, Scheduler, Whitelist, Origins,
    FellowshipReferenda, FellowshipCollective, Referenda, ConvictionVoting,
    Utility, Historical, Treasury, Session, Staking, ImOnline, BagsList,
    TransactionPayment, Vesting, Balances, Grandpa, Babe, AuthorityDiscovery,
    Authorship, Timestamp, System);
#[cfg(all())]
#[doc =
r" All pallets included in the runtime as a nested tuple of types in reversed order."]
#[doc = r" Excludes the System pallet."]
#[deprecated(note =
"Using reverse pallet orders is deprecated. use only \
			`AllPalletsWithSystem or AllPalletsWithoutSystem`")]
pub type AllPalletsWithoutSystemReversed =
    (GearBuiltin, GearBank, GearVoucher, StakingRewards, GearPayment, Gear,
    GearGas, GearScheduler, GearMessenger, GearProgram, NominationPools,
    ChildBounties, Bounties, Offences, ElectionProviderMultiPhase, Multisig,
    Proxy, Identity, Preimage, Scheduler, Whitelist, Origins,
    FellowshipReferenda, FellowshipCollective, Referenda, ConvictionVoting,
    Utility, Historical, Treasury, Session, Staking, ImOnline, BagsList,
    TransactionPayment, Vesting, Balances, Grandpa, Babe, AuthorityDiscovery,
    Authorship, Timestamp);
#[cfg(all())]
#[doc =
r" All pallets included in the runtime as a nested tuple of types in reversed order."]
#[doc = r" With the system pallet first."]
#[deprecated(note =
"Using reverse pallet orders is deprecated. use only \
			`AllPalletsWithSystem or AllPalletsWithoutSystem`")]
pub type AllPalletsReversedWithSystemFirst =
    (System, GearBuiltin, GearBank, GearVoucher, StakingRewards, GearPayment,
    Gear, GearGas, GearScheduler, GearMessenger, GearProgram, NominationPools,
    ChildBounties, Bounties, Offences, ElectionProviderMultiPhase, Multisig,
    Proxy, Identity, Preimage, Scheduler, Whitelist, Origins,
    FellowshipReferenda, FellowshipCollective, Referenda, ConvictionVoting,
    Utility, Historical, Treasury, Session, Staking, ImOnline, BagsList,
    TransactionPayment, Vesting, Balances, Grandpa, Babe, AuthorityDiscovery,
    Authorship, Timestamp);
#[doc = r" Provides an implementation of `PalletInfo` to provide information"]
#[doc = r" about the pallet setup in the runtime."]
pub struct PalletInfo;
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfo
    for PalletInfo {
    fn index<P: 'static>() -> Option<usize> {
        let type_id =
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<P>();
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<System>()
                {
                return Some(0usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Timestamp>()
                {
                return Some(1usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Authorship>()
                {
                return Some(2usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<AuthorityDiscovery>()
                {
                return Some(9usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Babe>()
                {
                return Some(3usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Grandpa>()
                {
                return Some(4usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Balances>()
                {
                return Some(5usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Vesting>()
                {
                return Some(10usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<TransactionPayment>()
                {
                return Some(6usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<BagsList>()
                {
                return Some(11usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<ImOnline>()
                {
                return Some(12usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Staking>()
                {
                return Some(13usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Session>()
                {
                return Some(7usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Treasury>()
                {
                return Some(14usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Historical>()
                {
                return Some(15usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Utility>()
                {
                return Some(8usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<ConvictionVoting>()
                {
                return Some(16usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Referenda>()
                {
                return Some(17usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<FellowshipCollective>()
                {
                return Some(18usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<FellowshipReferenda>()
                {
                return Some(19usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Origins>()
                {
                return Some(20usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Whitelist>()
                {
                return Some(21usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Scheduler>()
                {
                return Some(22usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Preimage>()
                {
                return Some(23usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Identity>()
                {
                return Some(24usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Proxy>()
                {
                return Some(25usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Multisig>()
                {
                return Some(26usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<ElectionProviderMultiPhase>()
                {
                return Some(27usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Offences>()
                {
                return Some(28usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Bounties>()
                {
                return Some(29usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<ChildBounties>()
                {
                return Some(30usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<NominationPools>()
                {
                return Some(31usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearProgram>()
                {
                return Some(100usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearMessenger>()
                {
                return Some(101usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearScheduler>()
                {
                return Some(102usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearGas>()
                {
                return Some(103usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Gear>()
                {
                return Some(104usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearPayment>()
                {
                return Some(105usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<StakingRewards>()
                {
                return Some(106usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearVoucher>()
                {
                return Some(107usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearBank>()
                {
                return Some(108usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearBuiltin>()
                {
                return Some(109usize)
            }
        None
    }
    fn name<P: 'static>() -> Option<&'static str> {
        let type_id =
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<P>();
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<System>()
                {
                return Some("System")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Timestamp>()
                {
                return Some("Timestamp")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Authorship>()
                {
                return Some("Authorship")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<AuthorityDiscovery>()
                {
                return Some("AuthorityDiscovery")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Babe>()
                {
                return Some("Babe")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Grandpa>()
                {
                return Some("Grandpa")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Balances>()
                {
                return Some("Balances")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Vesting>()
                {
                return Some("Vesting")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<TransactionPayment>()
                {
                return Some("TransactionPayment")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<BagsList>()
                {
                return Some("BagsList")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<ImOnline>()
                {
                return Some("ImOnline")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Staking>()
                {
                return Some("Staking")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Session>()
                {
                return Some("Session")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Treasury>()
                {
                return Some("Treasury")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Historical>()
                {
                return Some("Historical")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Utility>()
                {
                return Some("Utility")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<ConvictionVoting>()
                {
                return Some("ConvictionVoting")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Referenda>()
                {
                return Some("Referenda")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<FellowshipCollective>()
                {
                return Some("FellowshipCollective")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<FellowshipReferenda>()
                {
                return Some("FellowshipReferenda")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Origins>()
                {
                return Some("Origins")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Whitelist>()
                {
                return Some("Whitelist")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Scheduler>()
                {
                return Some("Scheduler")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Preimage>()
                {
                return Some("Preimage")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Identity>()
                {
                return Some("Identity")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Proxy>()
                {
                return Some("Proxy")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Multisig>()
                {
                return Some("Multisig")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<ElectionProviderMultiPhase>()
                {
                return Some("ElectionProviderMultiPhase")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Offences>()
                {
                return Some("Offences")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Bounties>()
                {
                return Some("Bounties")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<ChildBounties>()
                {
                return Some("ChildBounties")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<NominationPools>()
                {
                return Some("NominationPools")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearProgram>()
                {
                return Some("GearProgram")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearMessenger>()
                {
                return Some("GearMessenger")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearScheduler>()
                {
                return Some("GearScheduler")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearGas>()
                {
                return Some("GearGas")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Gear>()
                {
                return Some("Gear")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearPayment>()
                {
                return Some("GearPayment")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<StakingRewards>()
                {
                return Some("StakingRewards")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearVoucher>()
                {
                return Some("GearVoucher")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearBank>()
                {
                return Some("GearBank")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearBuiltin>()
                {
                return Some("GearBuiltin")
            }
        None
    }
    fn module_name<P: 'static>() -> Option<&'static str> {
        let type_id =
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<P>();
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<System>()
                {
                return Some("frame_system")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Timestamp>()
                {
                return Some("pallet_timestamp")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Authorship>()
                {
                return Some("pallet_authorship")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<AuthorityDiscovery>()
                {
                return Some("pallet_authority_discovery")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Babe>()
                {
                return Some("pallet_babe")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Grandpa>()
                {
                return Some("pallet_grandpa")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Balances>()
                {
                return Some("pallet_balances")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Vesting>()
                {
                return Some("pallet_vesting")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<TransactionPayment>()
                {
                return Some("pallet_transaction_payment")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<BagsList>()
                {
                return Some("pallet_bags_list")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<ImOnline>()
                {
                return Some("pallet_im_online")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Staking>()
                {
                return Some("pallet_staking")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Session>()
                {
                return Some("pallet_session")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Treasury>()
                {
                return Some("pallet_treasury")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Historical>()
                {
                return Some("pallet_session_historical")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Utility>()
                {
                return Some("pallet_utility")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<ConvictionVoting>()
                {
                return Some("pallet_conviction_voting")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Referenda>()
                {
                return Some("pallet_referenda")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<FellowshipCollective>()
                {
                return Some("pallet_ranked_collective")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<FellowshipReferenda>()
                {
                return Some("pallet_referenda")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Origins>()
                {
                return Some("pallet_custom_origins")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Whitelist>()
                {
                return Some("pallet_whitelist")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Scheduler>()
                {
                return Some("pallet_scheduler")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Preimage>()
                {
                return Some("pallet_preimage")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Identity>()
                {
                return Some("pallet_identity")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Proxy>()
                {
                return Some("pallet_proxy")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Multisig>()
                {
                return Some("pallet_multisig")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<ElectionProviderMultiPhase>()
                {
                return Some("pallet_election_provider_multi_phase")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Offences>()
                {
                return Some("pallet_offences")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Bounties>()
                {
                return Some("pallet_bounties")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<ChildBounties>()
                {
                return Some("pallet_child_bounties")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<NominationPools>()
                {
                return Some("pallet_nomination_pools")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearProgram>()
                {
                return Some("pallet_gear_program")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearMessenger>()
                {
                return Some("pallet_gear_messenger")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearScheduler>()
                {
                return Some("pallet_gear_scheduler")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearGas>()
                {
                return Some("pallet_gear_gas")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Gear>()
                {
                return Some("pallet_gear")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearPayment>()
                {
                return Some("pallet_gear_payment")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<StakingRewards>()
                {
                return Some("pallet_gear_staking_rewards")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearVoucher>()
                {
                return Some("pallet_gear_voucher")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearBank>()
                {
                return Some("pallet_gear_bank")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearBuiltin>()
                {
                return Some("pallet_gear_builtin")
            }
        None
    }
    fn crate_version<P: 'static>()
        ->
            Option<self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CrateVersion> {
        let type_id =
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<P>();
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<System>()
                {
                return Some(<frame_system::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Timestamp>()
                {
                return Some(<pallet_timestamp::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Authorship>()
                {
                return Some(<pallet_authorship::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<AuthorityDiscovery>()
                {
                return Some(<pallet_authority_discovery::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Babe>()
                {
                return Some(<pallet_babe::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Grandpa>()
                {
                return Some(<pallet_grandpa::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Balances>()
                {
                return Some(<pallet_balances::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Vesting>()
                {
                return Some(<pallet_vesting::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<TransactionPayment>()
                {
                return Some(<pallet_transaction_payment::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<BagsList>()
                {
                return Some(<pallet_bags_list::Pallet<Runtime,
                                pallet_bags_list::Instance1> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<ImOnline>()
                {
                return Some(<pallet_im_online::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Staking>()
                {
                return Some(<pallet_staking::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Session>()
                {
                return Some(<pallet_session::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Treasury>()
                {
                return Some(<pallet_treasury::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Historical>()
                {
                return Some(<pallet_session_historical::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Utility>()
                {
                return Some(<pallet_utility::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<ConvictionVoting>()
                {
                return Some(<pallet_conviction_voting::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Referenda>()
                {
                return Some(<pallet_referenda::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<FellowshipCollective>()
                {
                return Some(<pallet_ranked_collective::Pallet<Runtime,
                                pallet_ranked_collective::Instance1> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<FellowshipReferenda>()
                {
                return Some(<pallet_referenda::Pallet<Runtime,
                                pallet_referenda::Instance2> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Origins>()
                {
                return Some(<pallet_custom_origins::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Whitelist>()
                {
                return Some(<pallet_whitelist::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Scheduler>()
                {
                return Some(<pallet_scheduler::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Preimage>()
                {
                return Some(<pallet_preimage::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Identity>()
                {
                return Some(<pallet_identity::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Proxy>()
                {
                return Some(<pallet_proxy::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Multisig>()
                {
                return Some(<pallet_multisig::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<ElectionProviderMultiPhase>()
                {
                return Some(<pallet_election_provider_multi_phase::Pallet<Runtime>
                                as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Offences>()
                {
                return Some(<pallet_offences::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Bounties>()
                {
                return Some(<pallet_bounties::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<ChildBounties>()
                {
                return Some(<pallet_child_bounties::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<NominationPools>()
                {
                return Some(<pallet_nomination_pools::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearProgram>()
                {
                return Some(<pallet_gear_program::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearMessenger>()
                {
                return Some(<pallet_gear_messenger::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearScheduler>()
                {
                return Some(<pallet_gear_scheduler::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearGas>()
                {
                return Some(<pallet_gear_gas::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<Gear>()
                {
                return Some(<pallet_gear::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearPayment>()
                {
                return Some(<pallet_gear_payment::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<StakingRewards>()
                {
                return Some(<pallet_gear_staking_rewards::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearVoucher>()
                {
                return Some(<pallet_gear_voucher::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearBank>()
                {
                return Some(<pallet_gear_bank::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::any::TypeId::of::<GearBuiltin>()
                {
                return Some(<pallet_gear_builtin::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        None
    }
}
pub enum RuntimeCall {

    #[codec(index = 0u8)]
    System(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<System,
        Runtime>),

    #[codec(index = 1u8)]
    Timestamp(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Timestamp,
        Runtime>),

    #[codec(index = 3u8)]
    Babe(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Babe,
        Runtime>),

    #[codec(index = 4u8)]
    Grandpa(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Grandpa,
        Runtime>),

    #[codec(index = 5u8)]
    Balances(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Balances,
        Runtime>),

    #[codec(index = 10u8)]
    Vesting(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Vesting,
        Runtime>),

    #[codec(index = 11u8)]
    BagsList(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<BagsList,
        Runtime>),

    #[codec(index = 12u8)]
    ImOnline(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ImOnline,
        Runtime>),

    #[codec(index = 13u8)]
    Staking(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Staking,
        Runtime>),

    #[codec(index = 7u8)]
    Session(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Session,
        Runtime>),

    #[codec(index = 14u8)]
    Treasury(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Treasury,
        Runtime>),

    #[codec(index = 8u8)]
    Utility(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Utility,
        Runtime>),

    #[codec(index = 16u8)]
    ConvictionVoting(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ConvictionVoting,
        Runtime>),

    #[codec(index = 17u8)]
    Referenda(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Referenda,
        Runtime>),

    #[codec(index = 18u8)]
    FellowshipCollective(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<FellowshipCollective,
        Runtime>),

    #[codec(index = 19u8)]
    FellowshipReferenda(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<FellowshipReferenda,
        Runtime>),

    #[codec(index = 21u8)]
    Whitelist(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Whitelist,
        Runtime>),

    #[codec(index = 22u8)]
    Scheduler(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Scheduler,
        Runtime>),

    #[codec(index = 23u8)]
    Preimage(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Preimage,
        Runtime>),

    #[codec(index = 24u8)]
    Identity(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Identity,
        Runtime>),

    #[codec(index = 25u8)]
    Proxy(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Proxy,
        Runtime>),

    #[codec(index = 26u8)]
    Multisig(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Multisig,
        Runtime>),

    #[codec(index = 27u8)]
    ElectionProviderMultiPhase(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ElectionProviderMultiPhase,
        Runtime>),

    #[codec(index = 29u8)]
    Bounties(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Bounties,
        Runtime>),

    #[codec(index = 30u8)]
    ChildBounties(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ChildBounties,
        Runtime>),

    #[codec(index = 31u8)]
    NominationPools(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<NominationPools,
        Runtime>),

    #[codec(index = 104u8)]
    Gear(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Gear,
        Runtime>),

    #[codec(index = 106u8)]
    StakingRewards(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<StakingRewards,
        Runtime>),

    #[codec(index = 107u8)]
    GearVoucher(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<GearVoucher,
        Runtime>),
}
#[automatically_derived]
impl ::core::clone::Clone for RuntimeCall {
    #[inline]
    fn clone(&self) -> RuntimeCall {
        match self {
            RuntimeCall::System(__self_0) =>
                RuntimeCall::System(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Timestamp(__self_0) =>
                RuntimeCall::Timestamp(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Babe(__self_0) =>
                RuntimeCall::Babe(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Grandpa(__self_0) =>
                RuntimeCall::Grandpa(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Balances(__self_0) =>
                RuntimeCall::Balances(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Vesting(__self_0) =>
                RuntimeCall::Vesting(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::BagsList(__self_0) =>
                RuntimeCall::BagsList(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::ImOnline(__self_0) =>
                RuntimeCall::ImOnline(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Staking(__self_0) =>
                RuntimeCall::Staking(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Session(__self_0) =>
                RuntimeCall::Session(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Treasury(__self_0) =>
                RuntimeCall::Treasury(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Utility(__self_0) =>
                RuntimeCall::Utility(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::ConvictionVoting(__self_0) =>
                RuntimeCall::ConvictionVoting(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Referenda(__self_0) =>
                RuntimeCall::Referenda(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::FellowshipCollective(__self_0) =>
                RuntimeCall::FellowshipCollective(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::FellowshipReferenda(__self_0) =>
                RuntimeCall::FellowshipReferenda(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Whitelist(__self_0) =>
                RuntimeCall::Whitelist(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Scheduler(__self_0) =>
                RuntimeCall::Scheduler(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Preimage(__self_0) =>
                RuntimeCall::Preimage(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Identity(__self_0) =>
                RuntimeCall::Identity(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Proxy(__self_0) =>
                RuntimeCall::Proxy(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Multisig(__self_0) =>
                RuntimeCall::Multisig(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::ElectionProviderMultiPhase(__self_0) =>
                RuntimeCall::ElectionProviderMultiPhase(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Bounties(__self_0) =>
                RuntimeCall::Bounties(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::ChildBounties(__self_0) =>
                RuntimeCall::ChildBounties(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::NominationPools(__self_0) =>
                RuntimeCall::NominationPools(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Gear(__self_0) =>
                RuntimeCall::Gear(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::StakingRewards(__self_0) =>
                RuntimeCall::StakingRewards(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::GearVoucher(__self_0) =>
                RuntimeCall::GearVoucher(::core::clone::Clone::clone(__self_0)),
        }
    }
}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for RuntimeCall { }
#[automatically_derived]
impl ::core::cmp::PartialEq for RuntimeCall {
    #[inline]
    fn eq(&self, other: &RuntimeCall) -> bool {
        let __self_tag = ::core::intrinsics::discriminant_value(self);
        let __arg1_tag = ::core::intrinsics::discriminant_value(other);
        __self_tag == __arg1_tag &&
            match (self, other) {
                (RuntimeCall::System(__self_0), RuntimeCall::System(__arg1_0))
                    => *__self_0 == *__arg1_0,
                (RuntimeCall::Timestamp(__self_0),
                    RuntimeCall::Timestamp(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Babe(__self_0), RuntimeCall::Babe(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::Grandpa(__self_0),
                    RuntimeCall::Grandpa(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Balances(__self_0),
                    RuntimeCall::Balances(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Vesting(__self_0),
                    RuntimeCall::Vesting(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::BagsList(__self_0),
                    RuntimeCall::BagsList(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::ImOnline(__self_0),
                    RuntimeCall::ImOnline(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Staking(__self_0),
                    RuntimeCall::Staking(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Session(__self_0),
                    RuntimeCall::Session(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Treasury(__self_0),
                    RuntimeCall::Treasury(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Utility(__self_0),
                    RuntimeCall::Utility(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::ConvictionVoting(__self_0),
                    RuntimeCall::ConvictionVoting(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::Referenda(__self_0),
                    RuntimeCall::Referenda(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::FellowshipCollective(__self_0),
                    RuntimeCall::FellowshipCollective(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::FellowshipReferenda(__self_0),
                    RuntimeCall::FellowshipReferenda(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::Whitelist(__self_0),
                    RuntimeCall::Whitelist(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Scheduler(__self_0),
                    RuntimeCall::Scheduler(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Preimage(__self_0),
                    RuntimeCall::Preimage(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Identity(__self_0),
                    RuntimeCall::Identity(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Proxy(__self_0), RuntimeCall::Proxy(__arg1_0))
                    => *__self_0 == *__arg1_0,
                (RuntimeCall::Multisig(__self_0),
                    RuntimeCall::Multisig(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::ElectionProviderMultiPhase(__self_0),
                    RuntimeCall::ElectionProviderMultiPhase(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::Bounties(__self_0),
                    RuntimeCall::Bounties(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::ChildBounties(__self_0),
                    RuntimeCall::ChildBounties(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::NominationPools(__self_0),
                    RuntimeCall::NominationPools(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::Gear(__self_0), RuntimeCall::Gear(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::StakingRewards(__self_0),
                    RuntimeCall::StakingRewards(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::GearVoucher(__self_0),
                    RuntimeCall::GearVoucher(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                _ => unsafe { ::core::intrinsics::unreachable() }
            }
    }
}
#[automatically_derived]
impl ::core::marker::StructuralEq for RuntimeCall { }
#[automatically_derived]
impl ::core::cmp::Eq for RuntimeCall {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<System,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Timestamp,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Babe,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Grandpa,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Balances,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Vesting,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<BagsList,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ImOnline,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Staking,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Session,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Treasury,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Utility,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ConvictionVoting,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Referenda,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<FellowshipCollective,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<FellowshipReferenda,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Whitelist,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Scheduler,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Preimage,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Identity,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Proxy,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Multisig,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ElectionProviderMultiPhase,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Bounties,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ChildBounties,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<NominationPools,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Gear,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<StakingRewards,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<GearVoucher,
                Runtime>>;
    }
}
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::parity_scale_codec::Encode for RuntimeCall {
            fn size_hint(&self) -> usize {
                1_usize +
                    match *self {
                        RuntimeCall::System(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::Timestamp(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::Babe(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::Grandpa(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::Balances(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::Vesting(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::BagsList(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::ImOnline(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::Staking(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::Session(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::Treasury(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::Utility(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::ConvictionVoting(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::Referenda(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::FellowshipCollective(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::FellowshipReferenda(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::Whitelist(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::Scheduler(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::Preimage(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::Identity(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::Proxy(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::Multisig(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::ElectionProviderMultiPhase(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::Bounties(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::ChildBounties(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::NominationPools(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::Gear(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::StakingRewards(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        RuntimeCall::GearVoucher(ref aa) => {
                            0_usize.saturating_add(::parity_scale_codec::Encode::size_hint(aa))
                        }
                        _ => 0_usize,
                    }
            }
            fn encode_to<__CodecOutputEdqy: ::parity_scale_codec::Output +
                ?::core::marker::Sized>(&self,
                __codec_dest_edqy: &mut __CodecOutputEdqy) {
                match *self {
                    RuntimeCall::System(ref aa) => {
                        __codec_dest_edqy.push_byte(0u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::Timestamp(ref aa) => {
                        __codec_dest_edqy.push_byte(1u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::Babe(ref aa) => {
                        __codec_dest_edqy.push_byte(3u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::Grandpa(ref aa) => {
                        __codec_dest_edqy.push_byte(4u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::Balances(ref aa) => {
                        __codec_dest_edqy.push_byte(5u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::Vesting(ref aa) => {
                        __codec_dest_edqy.push_byte(10u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::BagsList(ref aa) => {
                        __codec_dest_edqy.push_byte(11u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::ImOnline(ref aa) => {
                        __codec_dest_edqy.push_byte(12u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::Staking(ref aa) => {
                        __codec_dest_edqy.push_byte(13u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::Session(ref aa) => {
                        __codec_dest_edqy.push_byte(7u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::Treasury(ref aa) => {
                        __codec_dest_edqy.push_byte(14u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::Utility(ref aa) => {
                        __codec_dest_edqy.push_byte(8u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::ConvictionVoting(ref aa) => {
                        __codec_dest_edqy.push_byte(16u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::Referenda(ref aa) => {
                        __codec_dest_edqy.push_byte(17u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::FellowshipCollective(ref aa) => {
                        __codec_dest_edqy.push_byte(18u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::FellowshipReferenda(ref aa) => {
                        __codec_dest_edqy.push_byte(19u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::Whitelist(ref aa) => {
                        __codec_dest_edqy.push_byte(21u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::Scheduler(ref aa) => {
                        __codec_dest_edqy.push_byte(22u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::Preimage(ref aa) => {
                        __codec_dest_edqy.push_byte(23u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::Identity(ref aa) => {
                        __codec_dest_edqy.push_byte(24u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::Proxy(ref aa) => {
                        __codec_dest_edqy.push_byte(25u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::Multisig(ref aa) => {
                        __codec_dest_edqy.push_byte(26u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::ElectionProviderMultiPhase(ref aa) => {
                        __codec_dest_edqy.push_byte(27u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::Bounties(ref aa) => {
                        __codec_dest_edqy.push_byte(29u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::ChildBounties(ref aa) => {
                        __codec_dest_edqy.push_byte(30u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::NominationPools(ref aa) => {
                        __codec_dest_edqy.push_byte(31u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::Gear(ref aa) => {
                        __codec_dest_edqy.push_byte(104u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::StakingRewards(ref aa) => {
                        __codec_dest_edqy.push_byte(106u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    RuntimeCall::GearVoucher(ref aa) => {
                        __codec_dest_edqy.push_byte(107u8 as ::core::primitive::u8);
                        ::parity_scale_codec::Encode::encode_to(aa,
                            __codec_dest_edqy);
                    }
                    _ => (),
                }
            }
        }
        #[automatically_derived]
        impl ::parity_scale_codec::EncodeLike for RuntimeCall { }
    };
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::parity_scale_codec::Decode for RuntimeCall {
            fn decode<__CodecInputEdqy: ::parity_scale_codec::Input>(__codec_input_edqy:
                    &mut __CodecInputEdqy)
                -> ::core::result::Result<Self, ::parity_scale_codec::Error> {
                match __codec_input_edqy.read_byte().map_err(|e|
                                e.chain("Could not decode `RuntimeCall`, failed to read variant byte"))?
                    {
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 0u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::System({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<System,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::System.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 1u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::Timestamp({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Timestamp,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Timestamp.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 3u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::Babe({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Babe,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Babe.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 4u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::Grandpa({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Grandpa,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Grandpa.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 5u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::Balances({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Balances,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Balances.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 10u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::Vesting({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Vesting,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Vesting.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 11u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::BagsList({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<BagsList,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::BagsList.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 12u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::ImOnline({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ImOnline,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::ImOnline.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 13u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::Staking({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Staking,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Staking.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 7u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::Session({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Session,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Session.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 14u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::Treasury({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Treasury,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Treasury.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 8u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::Utility({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Utility,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Utility.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 16u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::ConvictionVoting({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ConvictionVoting,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::ConvictionVoting.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 17u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::Referenda({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Referenda,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Referenda.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 18u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::FellowshipCollective({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<FellowshipCollective,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::FellowshipCollective.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 19u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::FellowshipReferenda({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<FellowshipReferenda,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::FellowshipReferenda.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 21u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::Whitelist({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Whitelist,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Whitelist.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 22u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::Scheduler({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Scheduler,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Scheduler.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 23u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::Preimage({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Preimage,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Preimage.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 24u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::Identity({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Identity,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Identity.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 25u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::Proxy({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Proxy,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Proxy.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 26u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::Multisig({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Multisig,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Multisig.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 27u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::ElectionProviderMultiPhase({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ElectionProviderMultiPhase,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::ElectionProviderMultiPhase.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 29u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::Bounties({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Bounties,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Bounties.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 30u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::ChildBounties({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ChildBounties,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::ChildBounties.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 31u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::NominationPools({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<NominationPools,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::NominationPools.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 104u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::Gear({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Gear,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Gear.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 106u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::StakingRewards({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<StakingRewards,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::StakingRewards.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                        #[allow(clippy :: unnecessary_cast)]
                        __codec_x_edqy if
                        __codec_x_edqy == 107u8 as ::core::primitive::u8 => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Ok(RuntimeCall::GearVoucher({
                                                        let __codec_res_edqy =
                                                            <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<GearVoucher,
                                                                    Runtime> as
                                                                    ::parity_scale_codec::Decode>::decode(__codec_input_edqy);
                                                        match __codec_res_edqy {
                                                            ::core::result::Result::Err(e) =>
                                                                return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::GearVoucher.0`")),
                                                            ::core::result::Result::Ok(__codec_res_edqy) =>
                                                                __codec_res_edqy,
                                                        }
                                                    }))
                                        })();
                    }
                    _ => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Err(<_ as
                                                        ::core::convert::Into<_>>::into("Could not decode `RuntimeCall`, variant doesn't exist"))
                                        })();
                    }
                }
            }
        }
    };
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        impl ::scale_info::TypeInfo for RuntimeCall {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder().path(::scale_info::Path::new("RuntimeCall",
                                "vara_runtime")).type_params(::alloc::vec::Vec::new()).variant(::scale_info::build::Variants::new().variant("System",
                                                                                                                                        |v|
                                                                                                                                            v.index(0u8 as
                                                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                        f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<System,
                                                                                                                                                                Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>")))).variant("Timestamp",
                                                                                                                                    |v|
                                                                                                                                        v.index(1u8 as
                                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                    f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Timestamp,
                                                                                                                                                            Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>")))).variant("Babe",
                                                                                                                                |v|
                                                                                                                                    v.index(3u8 as
                                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Babe,
                                                                                                                                                        Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Babe, Runtime>")))).variant("Grandpa",
                                                                                                                            |v|
                                                                                                                                v.index(4u8 as
                                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                            f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Grandpa,
                                                                                                                                                    Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>")))).variant("Balances",
                                                                                                                        |v|
                                                                                                                            v.index(5u8 as
                                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                        f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Balances,
                                                                                                                                                Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>")))).variant("Vesting",
                                                                                                                    |v|
                                                                                                                        v.index(10u8 as
                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                    f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Vesting,
                                                                                                                                            Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>")))).variant("BagsList",
                                                                                                                |v|
                                                                                                                    v.index(11u8 as
                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<BagsList,
                                                                                                                                        Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BagsList, Runtime>")))).variant("ImOnline",
                                                                                                            |v|
                                                                                                                v.index(12u8 as
                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                            f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ImOnline,
                                                                                                                                    Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ImOnline, Runtime>")))).variant("Staking",
                                                                                                        |v|
                                                                                                            v.index(13u8 as
                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                        f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Staking,
                                                                                                                                Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Staking, Runtime>")))).variant("Session",
                                                                                                    |v|
                                                                                                        v.index(7u8 as
                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                    f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Session,
                                                                                                                            Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>")))).variant("Treasury",
                                                                                                |v|
                                                                                                    v.index(14u8 as
                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Treasury,
                                                                                                                        Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>")))).variant("Utility",
                                                                                            |v|
                                                                                                v.index(8u8 as
                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                            f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Utility,
                                                                                                                    Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>")))).variant("ConvictionVoting",
                                                                                        |v|
                                                                                            v.index(16u8 as
                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                        f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ConvictionVoting,
                                                                                                                Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ConvictionVoting, Runtime>")))).variant("Referenda",
                                                                                    |v|
                                                                                        v.index(17u8 as
                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                    f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Referenda,
                                                                                                            Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Referenda, Runtime>")))).variant("FellowshipCollective",
                                                                                |v|
                                                                                    v.index(18u8 as
                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<FellowshipCollective,
                                                                                                        Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FellowshipCollective, Runtime>")))).variant("FellowshipReferenda",
                                                                            |v|
                                                                                v.index(19u8 as
                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                            f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<FellowshipReferenda,
                                                                                                    Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FellowshipReferenda, Runtime>")))).variant("Whitelist",
                                                                        |v|
                                                                            v.index(21u8 as
                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                        f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Whitelist,
                                                                                                Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Whitelist, Runtime>")))).variant("Scheduler",
                                                                    |v|
                                                                        v.index(22u8 as
                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                    f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Scheduler,
                                                                                            Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>")))).variant("Preimage",
                                                                |v|
                                                                    v.index(23u8 as
                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Preimage,
                                                                                        Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>")))).variant("Identity",
                                                            |v|
                                                                v.index(24u8 as
                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                            f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Identity,
                                                                                    Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>")))).variant("Proxy",
                                                        |v|
                                                            v.index(25u8 as
                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                        f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Proxy,
                                                                                Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>")))).variant("Multisig",
                                                    |v|
                                                        v.index(26u8 as
                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                    f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Multisig,
                                                                            Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>")))).variant("ElectionProviderMultiPhase",
                                                |v|
                                                    v.index(27u8 as
                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ElectionProviderMultiPhase,
                                                                        Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ElectionProviderMultiPhase, Runtime>")))).variant("Bounties",
                                            |v|
                                                v.index(29u8 as
                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                            f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Bounties,
                                                                    Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Bounties, Runtime>")))).variant("ChildBounties",
                                        |v|
                                            v.index(30u8 as
                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                        f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ChildBounties,
                                                                Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ChildBounties, Runtime>")))).variant("NominationPools",
                                    |v|
                                        v.index(31u8 as
                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                    f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<NominationPools,
                                                            Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<NominationPools, Runtime>")))).variant("Gear",
                                |v|
                                    v.index(104u8 as
                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Gear,
                                                        Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Gear, Runtime>")))).variant("StakingRewards",
                            |v|
                                v.index(106u8 as
                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                            f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<StakingRewards,
                                                    Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<StakingRewards, Runtime>")))).variant("GearVoucher",
                        |v|
                            v.index(107u8 as
                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                        f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<GearVoucher,
                                                Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<GearVoucher, Runtime>")))))
            }
        }
        ;
    };
impl core::fmt::Debug for RuntimeCall {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        match self {
            Self::System(ref a0) =>
                fmt.debug_tuple("RuntimeCall::System").field(a0).finish(),
            Self::Timestamp(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Timestamp").field(a0).finish(),
            Self::Babe(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Babe").field(a0).finish(),
            Self::Grandpa(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Grandpa").field(a0).finish(),
            Self::Balances(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Balances").field(a0).finish(),
            Self::Vesting(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Vesting").field(a0).finish(),
            Self::BagsList(ref a0) =>
                fmt.debug_tuple("RuntimeCall::BagsList").field(a0).finish(),
            Self::ImOnline(ref a0) =>
                fmt.debug_tuple("RuntimeCall::ImOnline").field(a0).finish(),
            Self::Staking(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Staking").field(a0).finish(),
            Self::Session(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Session").field(a0).finish(),
            Self::Treasury(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Treasury").field(a0).finish(),
            Self::Utility(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Utility").field(a0).finish(),
            Self::ConvictionVoting(ref a0) =>
                fmt.debug_tuple("RuntimeCall::ConvictionVoting").field(a0).finish(),
            Self::Referenda(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Referenda").field(a0).finish(),
            Self::FellowshipCollective(ref a0) =>
                fmt.debug_tuple("RuntimeCall::FellowshipCollective").field(a0).finish(),
            Self::FellowshipReferenda(ref a0) =>
                fmt.debug_tuple("RuntimeCall::FellowshipReferenda").field(a0).finish(),
            Self::Whitelist(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Whitelist").field(a0).finish(),
            Self::Scheduler(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Scheduler").field(a0).finish(),
            Self::Preimage(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Preimage").field(a0).finish(),
            Self::Identity(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Identity").field(a0).finish(),
            Self::Proxy(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Proxy").field(a0).finish(),
            Self::Multisig(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Multisig").field(a0).finish(),
            Self::ElectionProviderMultiPhase(ref a0) =>
                fmt.debug_tuple("RuntimeCall::ElectionProviderMultiPhase").field(a0).finish(),
            Self::Bounties(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Bounties").field(a0).finish(),
            Self::ChildBounties(ref a0) =>
                fmt.debug_tuple("RuntimeCall::ChildBounties").field(a0).finish(),
            Self::NominationPools(ref a0) =>
                fmt.debug_tuple("RuntimeCall::NominationPools").field(a0).finish(),
            Self::Gear(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Gear").field(a0).finish(),
            Self::StakingRewards(ref a0) =>
                fmt.debug_tuple("RuntimeCall::StakingRewards").field(a0).finish(),
            Self::GearVoucher(ref a0) =>
                fmt.debug_tuple("RuntimeCall::GearVoucher").field(a0).finish(),
            _ => Ok(()),
        }
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::GetDispatchInfo
    for RuntimeCall {
    fn get_dispatch_info(&self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::DispatchInfo {
        match self {
            RuntimeCall::System(call) => call.get_dispatch_info(),
            RuntimeCall::Timestamp(call) => call.get_dispatch_info(),
            RuntimeCall::Babe(call) => call.get_dispatch_info(),
            RuntimeCall::Grandpa(call) => call.get_dispatch_info(),
            RuntimeCall::Balances(call) => call.get_dispatch_info(),
            RuntimeCall::Vesting(call) => call.get_dispatch_info(),
            RuntimeCall::BagsList(call) => call.get_dispatch_info(),
            RuntimeCall::ImOnline(call) => call.get_dispatch_info(),
            RuntimeCall::Staking(call) => call.get_dispatch_info(),
            RuntimeCall::Session(call) => call.get_dispatch_info(),
            RuntimeCall::Treasury(call) => call.get_dispatch_info(),
            RuntimeCall::Utility(call) => call.get_dispatch_info(),
            RuntimeCall::ConvictionVoting(call) => call.get_dispatch_info(),
            RuntimeCall::Referenda(call) => call.get_dispatch_info(),
            RuntimeCall::FellowshipCollective(call) =>
                call.get_dispatch_info(),
            RuntimeCall::FellowshipReferenda(call) =>
                call.get_dispatch_info(),
            RuntimeCall::Whitelist(call) => call.get_dispatch_info(),
            RuntimeCall::Scheduler(call) => call.get_dispatch_info(),
            RuntimeCall::Preimage(call) => call.get_dispatch_info(),
            RuntimeCall::Identity(call) => call.get_dispatch_info(),
            RuntimeCall::Proxy(call) => call.get_dispatch_info(),
            RuntimeCall::Multisig(call) => call.get_dispatch_info(),
            RuntimeCall::ElectionProviderMultiPhase(call) =>
                call.get_dispatch_info(),
            RuntimeCall::Bounties(call) => call.get_dispatch_info(),
            RuntimeCall::ChildBounties(call) => call.get_dispatch_info(),
            RuntimeCall::NominationPools(call) => call.get_dispatch_info(),
            RuntimeCall::Gear(call) => call.get_dispatch_info(),
            RuntimeCall::StakingRewards(call) => call.get_dispatch_info(),
            RuntimeCall::GearVoucher(call) => call.get_dispatch_info(),
        }
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::GetCallMetadata
    for RuntimeCall {
    fn get_call_metadata(&self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
        use self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::GetCallName;
        match self {
            RuntimeCall::System(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "System";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Timestamp(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Timestamp";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Babe(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Babe";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Grandpa(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Grandpa";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Balances(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Balances";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Vesting(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Vesting";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::BagsList(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "BagsList";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::ImOnline(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "ImOnline";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Staking(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Staking";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Session(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Session";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Treasury(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Treasury";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Utility(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Utility";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::ConvictionVoting(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "ConvictionVoting";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Referenda(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Referenda";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::FellowshipCollective(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "FellowshipCollective";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::FellowshipReferenda(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "FellowshipReferenda";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Whitelist(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Whitelist";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Scheduler(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Scheduler";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Preimage(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Preimage";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Identity(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Identity";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Proxy(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Proxy";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Multisig(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Multisig";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::ElectionProviderMultiPhase(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "ElectionProviderMultiPhase";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Bounties(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Bounties";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::ChildBounties(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "ChildBounties";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::NominationPools(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "NominationPools";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Gear(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Gear";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::StakingRewards(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "StakingRewards";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::GearVoucher(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "GearVoucher";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
        }
    }
    fn get_module_names() -> &'static [&'static str] {
        &["System", "Timestamp", "Babe", "Grandpa", "Balances", "Vesting",
                    "BagsList", "ImOnline", "Staking", "Session", "Treasury",
                    "Utility", "ConvictionVoting", "Referenda",
                    "FellowshipCollective", "FellowshipReferenda", "Whitelist",
                    "Scheduler", "Preimage", "Identity", "Proxy", "Multisig",
                    "ElectionProviderMultiPhase", "Bounties", "ChildBounties",
                    "NominationPools", "Gear", "StakingRewards", "GearVoucher"]
    }
    fn get_call_names(module: &str) -> &'static [&'static str] {
        use self::sp_api_hidden_includes_construct_runtime::hidden_include::{
            dispatch::Callable, traits::GetCallName,
        };
        match module {
            "System" =>
                <<System as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Timestamp" =>
                <<Timestamp as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Babe" =>
                <<Babe as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Grandpa" =>
                <<Grandpa as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Balances" =>
                <<Balances as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Vesting" =>
                <<Vesting as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "BagsList" =>
                <<BagsList as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "ImOnline" =>
                <<ImOnline as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Staking" =>
                <<Staking as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Session" =>
                <<Session as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Treasury" =>
                <<Treasury as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Utility" =>
                <<Utility as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "ConvictionVoting" =>
                <<ConvictionVoting as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Referenda" =>
                <<Referenda as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "FellowshipCollective" =>
                <<FellowshipCollective as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "FellowshipReferenda" =>
                <<FellowshipReferenda as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Whitelist" =>
                <<Whitelist as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Scheduler" =>
                <<Scheduler as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Preimage" =>
                <<Preimage as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Identity" =>
                <<Identity as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Proxy" =>
                <<Proxy as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Multisig" =>
                <<Multisig as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "ElectionProviderMultiPhase" =>
                <<ElectionProviderMultiPhase as
                        Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Bounties" =>
                <<Bounties as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "ChildBounties" =>
                <<ChildBounties as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "NominationPools" =>
                <<NominationPools as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Gear" =>
                <<Gear as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "StakingRewards" =>
                <<StakingRewards as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "GearVoucher" =>
                <<GearVoucher as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::Dispatchable
    for RuntimeCall {
    type RuntimeOrigin = RuntimeOrigin;
    type Config = RuntimeCall;
    type Info =
        self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::DispatchInfo;
    type PostInfo =
        self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::PostDispatchInfo;
    fn dispatch(self, origin: RuntimeOrigin)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::DispatchResultWithPostInfo {
        if !<Self::RuntimeOrigin as
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::OriginTrait>::filter_call(&origin,
                        &self) {
                return self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::result::Result::Err(frame_system::Error::<Runtime>::CallFiltered.into());
            }
        self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(self,
            origin)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable
    for RuntimeCall {
    type RuntimeOrigin = RuntimeOrigin;
    fn dispatch_bypass_filter(self, origin: RuntimeOrigin)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::DispatchResultWithPostInfo {
        match self {
            RuntimeCall::System(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Timestamp(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Babe(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Grandpa(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Balances(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Vesting(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::BagsList(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::ImOnline(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Staking(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Session(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Treasury(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Utility(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::ConvictionVoting(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Referenda(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::FellowshipCollective(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::FellowshipReferenda(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Whitelist(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Scheduler(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Preimage(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Identity(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Proxy(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Multisig(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::ElectionProviderMultiPhase(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Bounties(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::ChildBounties(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::NominationPools(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Gear(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::StakingRewards(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::GearVoucher(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
        }
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<System,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<System,
            Runtime>> {
        match self { RuntimeCall::System(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<System,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<System,
            Runtime>) -> Self {
        RuntimeCall::System(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Timestamp,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Timestamp,
            Runtime>> {
        match self { RuntimeCall::Timestamp(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Timestamp,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Timestamp,
            Runtime>) -> Self {
        RuntimeCall::Timestamp(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Babe,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Babe,
            Runtime>> {
        match self { RuntimeCall::Babe(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Babe,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Babe,
            Runtime>) -> Self {
        RuntimeCall::Babe(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Grandpa,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Grandpa,
            Runtime>> {
        match self { RuntimeCall::Grandpa(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Grandpa,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Grandpa,
            Runtime>) -> Self {
        RuntimeCall::Grandpa(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Balances,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Balances,
            Runtime>> {
        match self { RuntimeCall::Balances(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Balances,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Balances,
            Runtime>) -> Self {
        RuntimeCall::Balances(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Vesting,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Vesting,
            Runtime>> {
        match self { RuntimeCall::Vesting(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Vesting,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Vesting,
            Runtime>) -> Self {
        RuntimeCall::Vesting(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<BagsList,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<BagsList,
            Runtime>> {
        match self { RuntimeCall::BagsList(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<BagsList,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<BagsList,
            Runtime>) -> Self {
        RuntimeCall::BagsList(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ImOnline,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ImOnline,
            Runtime>> {
        match self { RuntimeCall::ImOnline(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ImOnline,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ImOnline,
            Runtime>) -> Self {
        RuntimeCall::ImOnline(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Staking,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Staking,
            Runtime>> {
        match self { RuntimeCall::Staking(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Staking,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Staking,
            Runtime>) -> Self {
        RuntimeCall::Staking(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Session,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Session,
            Runtime>> {
        match self { RuntimeCall::Session(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Session,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Session,
            Runtime>) -> Self {
        RuntimeCall::Session(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Treasury,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Treasury,
            Runtime>> {
        match self { RuntimeCall::Treasury(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Treasury,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Treasury,
            Runtime>) -> Self {
        RuntimeCall::Treasury(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Utility,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Utility,
            Runtime>> {
        match self { RuntimeCall::Utility(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Utility,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Utility,
            Runtime>) -> Self {
        RuntimeCall::Utility(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ConvictionVoting,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ConvictionVoting,
            Runtime>> {
        match self {
            RuntimeCall::ConvictionVoting(call) => Some(call),
            _ => None,
        }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ConvictionVoting,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ConvictionVoting,
            Runtime>) -> Self {
        RuntimeCall::ConvictionVoting(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Referenda,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Referenda,
            Runtime>> {
        match self { RuntimeCall::Referenda(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Referenda,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Referenda,
            Runtime>) -> Self {
        RuntimeCall::Referenda(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<FellowshipCollective,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<FellowshipCollective,
            Runtime>> {
        match self {
            RuntimeCall::FellowshipCollective(call) => Some(call),
            _ => None,
        }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<FellowshipCollective,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<FellowshipCollective,
            Runtime>) -> Self {
        RuntimeCall::FellowshipCollective(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<FellowshipReferenda,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<FellowshipReferenda,
            Runtime>> {
        match self {
            RuntimeCall::FellowshipReferenda(call) => Some(call),
            _ => None,
        }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<FellowshipReferenda,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<FellowshipReferenda,
            Runtime>) -> Self {
        RuntimeCall::FellowshipReferenda(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Whitelist,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Whitelist,
            Runtime>> {
        match self { RuntimeCall::Whitelist(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Whitelist,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Whitelist,
            Runtime>) -> Self {
        RuntimeCall::Whitelist(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Scheduler,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Scheduler,
            Runtime>> {
        match self { RuntimeCall::Scheduler(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Scheduler,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Scheduler,
            Runtime>) -> Self {
        RuntimeCall::Scheduler(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Preimage,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Preimage,
            Runtime>> {
        match self { RuntimeCall::Preimage(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Preimage,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Preimage,
            Runtime>) -> Self {
        RuntimeCall::Preimage(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Identity,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Identity,
            Runtime>> {
        match self { RuntimeCall::Identity(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Identity,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Identity,
            Runtime>) -> Self {
        RuntimeCall::Identity(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Proxy,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Proxy,
            Runtime>> {
        match self { RuntimeCall::Proxy(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Proxy,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Proxy,
            Runtime>) -> Self {
        RuntimeCall::Proxy(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Multisig,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Multisig,
            Runtime>> {
        match self { RuntimeCall::Multisig(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Multisig,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Multisig,
            Runtime>) -> Self {
        RuntimeCall::Multisig(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ElectionProviderMultiPhase,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ElectionProviderMultiPhase,
            Runtime>> {
        match self {
            RuntimeCall::ElectionProviderMultiPhase(call) => Some(call),
            _ => None,
        }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ElectionProviderMultiPhase,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ElectionProviderMultiPhase,
            Runtime>) -> Self {
        RuntimeCall::ElectionProviderMultiPhase(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Bounties,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Bounties,
            Runtime>> {
        match self { RuntimeCall::Bounties(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Bounties,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Bounties,
            Runtime>) -> Self {
        RuntimeCall::Bounties(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ChildBounties,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ChildBounties,
            Runtime>> {
        match self {
            RuntimeCall::ChildBounties(call) => Some(call),
            _ => None,
        }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ChildBounties,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ChildBounties,
            Runtime>) -> Self {
        RuntimeCall::ChildBounties(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<NominationPools,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<NominationPools,
            Runtime>> {
        match self {
            RuntimeCall::NominationPools(call) => Some(call),
            _ => None,
        }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<NominationPools,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<NominationPools,
            Runtime>) -> Self {
        RuntimeCall::NominationPools(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Gear,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Gear,
            Runtime>> {
        match self { RuntimeCall::Gear(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Gear,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Gear,
            Runtime>) -> Self {
        RuntimeCall::Gear(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<StakingRewards,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<StakingRewards,
            Runtime>> {
        match self {
            RuntimeCall::StakingRewards(call) => Some(call),
            _ => None,
        }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<StakingRewards,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<StakingRewards,
            Runtime>) -> Self {
        RuntimeCall::StakingRewards(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<GearVoucher,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<GearVoucher,
            Runtime>> {
        match self {
            RuntimeCall::GearVoucher(call) => Some(call),
            _ => None,
        }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<GearVoucher,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<GearVoucher,
            Runtime>) -> Self {
        RuntimeCall::GearVoucher(call)
    }
}
impl Runtime {
    fn metadata_ir()
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::MetadataIR {
        let rt = Runtime;
        let ty =
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<<<Runtime
                    as frame_system::Config>::Block as
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Block>::Extrinsic>();
        let address_ty =
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<<<<<Runtime
                    as frame_system::Config>::Block as
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Block>::Extrinsic
                    as
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Extrinsic>::SignaturePayload
                    as
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::SignaturePayload>::SignatureAddress>();
        let call_ty =
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<<<<Runtime
                    as frame_system::Config>::Block as
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Block>::Extrinsic
                    as
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Extrinsic>::Call>();
        let signature_ty =
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<<<<<Runtime
                    as frame_system::Config>::Block as
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Block>::Extrinsic
                    as
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Extrinsic>::SignaturePayload
                    as
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::SignaturePayload>::Signature>();
        let extra_ty =
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<<<<<Runtime
                    as frame_system::Config>::Block as
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Block>::Extrinsic
                    as
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Extrinsic>::SignaturePayload
                    as
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::SignaturePayload>::SignatureExtra>();
        self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::MetadataIR {
            pallets: <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "System",
                                index: 0u8,
                                storage: Some(frame_system::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(frame_system::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<frame_system::Event<Runtime>>(),
                                    }),
                                constants: frame_system::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: frame_system::Pallet::<Runtime>::error_metadata(),
                                docs: frame_system::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "Timestamp",
                                index: 1u8,
                                storage: Some(pallet_timestamp::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_timestamp::Pallet::<Runtime>::call_functions()),
                                event: None,
                                constants: pallet_timestamp::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_timestamp::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_timestamp::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "Authorship",
                                index: 2u8,
                                storage: Some(pallet_authorship::Pallet::<Runtime>::storage_metadata()),
                                calls: None,
                                event: None,
                                constants: pallet_authorship::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_authorship::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_authorship::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "AuthorityDiscovery",
                                index: 9u8,
                                storage: Some(pallet_authority_discovery::Pallet::<Runtime>::storage_metadata()),
                                calls: None,
                                event: None,
                                constants: pallet_authority_discovery::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_authority_discovery::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_authority_discovery::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "Babe",
                                index: 3u8,
                                storage: Some(pallet_babe::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_babe::Pallet::<Runtime>::call_functions()),
                                event: None,
                                constants: pallet_babe::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_babe::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_babe::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "Grandpa",
                                index: 4u8,
                                storage: Some(pallet_grandpa::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_grandpa::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_grandpa::Event>(),
                                    }),
                                constants: pallet_grandpa::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_grandpa::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_grandpa::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "Balances",
                                index: 5u8,
                                storage: Some(pallet_balances::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_balances::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_balances::Event<Runtime>>(),
                                    }),
                                constants: pallet_balances::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_balances::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_balances::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "Vesting",
                                index: 10u8,
                                storage: Some(pallet_vesting::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_vesting::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_vesting::Event<Runtime>>(),
                                    }),
                                constants: pallet_vesting::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_vesting::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_vesting::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "TransactionPayment",
                                index: 6u8,
                                storage: Some(pallet_transaction_payment::Pallet::<Runtime>::storage_metadata()),
                                calls: None,
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_transaction_payment::Event<Runtime>>(),
                                    }),
                                constants: pallet_transaction_payment::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_transaction_payment::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_transaction_payment::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "BagsList",
                                index: 11u8,
                                storage: Some(pallet_bags_list::Pallet::<Runtime,
                                            pallet_bags_list::Instance1>::storage_metadata()),
                                calls: Some(pallet_bags_list::Pallet::<Runtime,
                                            pallet_bags_list::Instance1>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_bags_list::Event<Runtime,
                                                pallet_bags_list::Instance1>>(),
                                    }),
                                constants: pallet_bags_list::Pallet::<Runtime,
                                        pallet_bags_list::Instance1>::pallet_constants_metadata(),
                                error: pallet_bags_list::Pallet::<Runtime,
                                        pallet_bags_list::Instance1>::error_metadata(),
                                docs: pallet_bags_list::Pallet::<Runtime,
                                        pallet_bags_list::Instance1>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "ImOnline",
                                index: 12u8,
                                storage: Some(pallet_im_online::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_im_online::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_im_online::Event<Runtime>>(),
                                    }),
                                constants: pallet_im_online::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_im_online::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_im_online::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "Staking",
                                index: 13u8,
                                storage: Some(pallet_staking::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_staking::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_staking::Event<Runtime>>(),
                                    }),
                                constants: pallet_staking::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_staking::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_staking::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "Session",
                                index: 7u8,
                                storage: Some(pallet_session::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_session::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_session::Event>(),
                                    }),
                                constants: pallet_session::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_session::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_session::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "Treasury",
                                index: 14u8,
                                storage: Some(pallet_treasury::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_treasury::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_treasury::Event<Runtime>>(),
                                    }),
                                constants: pallet_treasury::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_treasury::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_treasury::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "Historical",
                                index: 15u8,
                                storage: Some(pallet_session_historical::Pallet::<Runtime>::storage_metadata()),
                                calls: None,
                                event: None,
                                constants: pallet_session_historical::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_session_historical::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_session_historical::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "Utility",
                                index: 8u8,
                                storage: None,
                                calls: Some(pallet_utility::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_utility::Event>(),
                                    }),
                                constants: pallet_utility::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_utility::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_utility::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "ConvictionVoting",
                                index: 16u8,
                                storage: Some(pallet_conviction_voting::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_conviction_voting::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_conviction_voting::Event<Runtime>>(),
                                    }),
                                constants: pallet_conviction_voting::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_conviction_voting::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_conviction_voting::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "Referenda",
                                index: 17u8,
                                storage: Some(pallet_referenda::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_referenda::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_referenda::Event<Runtime>>(),
                                    }),
                                constants: pallet_referenda::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_referenda::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_referenda::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "FellowshipCollective",
                                index: 18u8,
                                storage: Some(pallet_ranked_collective::Pallet::<Runtime,
                                            pallet_ranked_collective::Instance1>::storage_metadata()),
                                calls: Some(pallet_ranked_collective::Pallet::<Runtime,
                                            pallet_ranked_collective::Instance1>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_ranked_collective::Event<Runtime,
                                                pallet_ranked_collective::Instance1>>(),
                                    }),
                                constants: pallet_ranked_collective::Pallet::<Runtime,
                                        pallet_ranked_collective::Instance1>::pallet_constants_metadata(),
                                error: pallet_ranked_collective::Pallet::<Runtime,
                                        pallet_ranked_collective::Instance1>::error_metadata(),
                                docs: pallet_ranked_collective::Pallet::<Runtime,
                                        pallet_ranked_collective::Instance1>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "FellowshipReferenda",
                                index: 19u8,
                                storage: Some(pallet_referenda::Pallet::<Runtime,
                                            pallet_referenda::Instance2>::storage_metadata()),
                                calls: Some(pallet_referenda::Pallet::<Runtime,
                                            pallet_referenda::Instance2>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_referenda::Event<Runtime,
                                                pallet_referenda::Instance2>>(),
                                    }),
                                constants: pallet_referenda::Pallet::<Runtime,
                                        pallet_referenda::Instance2>::pallet_constants_metadata(),
                                error: pallet_referenda::Pallet::<Runtime,
                                        pallet_referenda::Instance2>::error_metadata(),
                                docs: pallet_referenda::Pallet::<Runtime,
                                        pallet_referenda::Instance2>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "Origins",
                                index: 20u8,
                                storage: None,
                                calls: None,
                                event: None,
                                constants: pallet_custom_origins::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_custom_origins::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_custom_origins::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "Whitelist",
                                index: 21u8,
                                storage: Some(pallet_whitelist::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_whitelist::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_whitelist::Event<Runtime>>(),
                                    }),
                                constants: pallet_whitelist::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_whitelist::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_whitelist::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "Scheduler",
                                index: 22u8,
                                storage: Some(pallet_scheduler::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_scheduler::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_scheduler::Event<Runtime>>(),
                                    }),
                                constants: pallet_scheduler::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_scheduler::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_scheduler::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "Preimage",
                                index: 23u8,
                                storage: Some(pallet_preimage::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_preimage::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_preimage::Event<Runtime>>(),
                                    }),
                                constants: pallet_preimage::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_preimage::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_preimage::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "Identity",
                                index: 24u8,
                                storage: Some(pallet_identity::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_identity::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_identity::Event<Runtime>>(),
                                    }),
                                constants: pallet_identity::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_identity::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_identity::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "Proxy",
                                index: 25u8,
                                storage: Some(pallet_proxy::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_proxy::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_proxy::Event<Runtime>>(),
                                    }),
                                constants: pallet_proxy::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_proxy::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_proxy::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "Multisig",
                                index: 26u8,
                                storage: Some(pallet_multisig::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_multisig::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_multisig::Event<Runtime>>(),
                                    }),
                                constants: pallet_multisig::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_multisig::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_multisig::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "ElectionProviderMultiPhase",
                                index: 27u8,
                                storage: Some(pallet_election_provider_multi_phase::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_election_provider_multi_phase::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_election_provider_multi_phase::Event<Runtime>>(),
                                    }),
                                constants: pallet_election_provider_multi_phase::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_election_provider_multi_phase::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_election_provider_multi_phase::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "Offences",
                                index: 28u8,
                                storage: Some(pallet_offences::Pallet::<Runtime>::storage_metadata()),
                                calls: None,
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_offences::Event>(),
                                    }),
                                constants: pallet_offences::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_offences::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_offences::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "Bounties",
                                index: 29u8,
                                storage: Some(pallet_bounties::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_bounties::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_bounties::Event<Runtime>>(),
                                    }),
                                constants: pallet_bounties::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_bounties::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_bounties::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "ChildBounties",
                                index: 30u8,
                                storage: Some(pallet_child_bounties::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_child_bounties::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_child_bounties::Event<Runtime>>(),
                                    }),
                                constants: pallet_child_bounties::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_child_bounties::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_child_bounties::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "NominationPools",
                                index: 31u8,
                                storage: Some(pallet_nomination_pools::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_nomination_pools::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_nomination_pools::Event<Runtime>>(),
                                    }),
                                constants: pallet_nomination_pools::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_nomination_pools::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_nomination_pools::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "GearProgram",
                                index: 100u8,
                                storage: Some(pallet_gear_program::Pallet::<Runtime>::storage_metadata()),
                                calls: None,
                                event: None,
                                constants: pallet_gear_program::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_gear_program::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_gear_program::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "GearMessenger",
                                index: 101u8,
                                storage: Some(pallet_gear_messenger::Pallet::<Runtime>::storage_metadata()),
                                calls: None,
                                event: None,
                                constants: pallet_gear_messenger::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_gear_messenger::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_gear_messenger::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "GearScheduler",
                                index: 102u8,
                                storage: Some(pallet_gear_scheduler::Pallet::<Runtime>::storage_metadata()),
                                calls: None,
                                event: None,
                                constants: pallet_gear_scheduler::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_gear_scheduler::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_gear_scheduler::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "GearGas",
                                index: 103u8,
                                storage: Some(pallet_gear_gas::Pallet::<Runtime>::storage_metadata()),
                                calls: None,
                                event: None,
                                constants: pallet_gear_gas::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_gear_gas::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_gear_gas::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "Gear",
                                index: 104u8,
                                storage: Some(pallet_gear::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_gear::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_gear::Event<Runtime>>(),
                                    }),
                                constants: pallet_gear::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_gear::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_gear::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "GearPayment",
                                index: 105u8,
                                storage: None,
                                calls: None,
                                event: None,
                                constants: pallet_gear_payment::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_gear_payment::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_gear_payment::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "StakingRewards",
                                index: 106u8,
                                storage: Some(pallet_gear_staking_rewards::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_gear_staking_rewards::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_gear_staking_rewards::Event<Runtime>>(),
                                    }),
                                constants: pallet_gear_staking_rewards::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_gear_staking_rewards::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_gear_staking_rewards::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "GearVoucher",
                                index: 107u8,
                                storage: Some(pallet_gear_voucher::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_gear_voucher::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<pallet_gear_voucher::Event<Runtime>>(),
                                    }),
                                constants: pallet_gear_voucher::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_gear_voucher::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_gear_voucher::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "GearBank",
                                index: 108u8,
                                storage: Some(pallet_gear_bank::Pallet::<Runtime>::storage_metadata()),
                                calls: None,
                                event: None,
                                constants: pallet_gear_bank::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_gear_bank::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_gear_bank::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::PalletMetadataIR {
                                name: "GearBuiltin",
                                index: 109u8,
                                storage: None,
                                calls: None,
                                event: None,
                                constants: pallet_gear_builtin::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_gear_builtin::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_gear_builtin::Pallet::<Runtime>::pallet_documentation_metadata(),
                            }])),
            extrinsic: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::ExtrinsicMetadataIR {
                ty,
                version: <<<Runtime as frame_system::Config>::Block as
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Block>::Extrinsic
                    as
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::ExtrinsicMetadata>::VERSION,
                address_ty,
                call_ty,
                signature_ty,
                extra_ty,
                signed_extensions: <<<<Runtime as frame_system::Config>::Block
                                    as
                                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Block>::Extrinsic
                                    as
                                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::ExtrinsicMetadata>::SignedExtensions
                                    as
                                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::SignedExtension>::metadata().into_iter().map(|meta|
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::SignedExtensionMetadataIR {
                                identifier: meta.identifier,
                                ty: meta.ty,
                                additional_signed: meta.additional_signed,
                            }).collect(),
            },
            ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<Runtime>(),
            apis: (&rt).runtime_metadata(),
            outer_enums: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::OuterEnumsIR {
                call_enum_ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<<Runtime
                        as frame_system::Config>::RuntimeCall>(),
                event_enum_ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<RuntimeEvent>(),
                error_enum_ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::scale_info::meta_type::<RuntimeError>(),
            },
        }
    }
    pub fn metadata()
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata::RuntimeMetadataPrefixed {
        self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::into_v14(Runtime::metadata_ir())
    }
    pub fn metadata_at_version(version: u32)
        ->
            Option<self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::OpaqueMetadata> {
        self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::into_version(Runtime::metadata_ir(),
                version).map(|prefixed|
                {
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::OpaqueMetadata::new(prefixed.into())
                })
    }
    pub fn metadata_versions()
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::vec::Vec<u32> {
        self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::metadata_ir::supported_versions()
    }
}
pub type SystemConfig = frame_system::GenesisConfig<Runtime>;
pub type AuthorityDiscoveryConfig =
    pallet_authority_discovery::GenesisConfig<Runtime>;
pub type BabeConfig = pallet_babe::GenesisConfig<Runtime>;
pub type GrandpaConfig = pallet_grandpa::GenesisConfig<Runtime>;
pub type BalancesConfig = pallet_balances::GenesisConfig<Runtime>;
pub type VestingConfig = pallet_vesting::GenesisConfig<Runtime>;
pub type TransactionPaymentConfig =
    pallet_transaction_payment::GenesisConfig<Runtime>;
pub type ImOnlineConfig = pallet_im_online::GenesisConfig<Runtime>;
pub type StakingConfig = pallet_staking::GenesisConfig<Runtime>;
pub type SessionConfig = pallet_session::GenesisConfig<Runtime>;
pub type TreasuryConfig = pallet_treasury::GenesisConfig<Runtime>;
pub type NominationPoolsConfig =
    pallet_nomination_pools::GenesisConfig<Runtime>;
pub type StakingRewardsConfig =
    pallet_gear_staking_rewards::GenesisConfig<Runtime>;
use self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::serde as __genesis_config_serde_import__;
#[serde(rename_all = "camelCase")]
#[serde(deny_unknown_fields)]
#[serde(crate = "__genesis_config_serde_import__")]
pub struct RuntimeGenesisConfig {
    pub system: SystemConfig,
    pub authority_discovery: AuthorityDiscoveryConfig,
    pub babe: BabeConfig,
    pub grandpa: GrandpaConfig,
    pub balances: BalancesConfig,
    pub vesting: VestingConfig,
    pub transaction_payment: TransactionPaymentConfig,
    pub im_online: ImOnlineConfig,
    pub staking: StakingConfig,
    pub session: SessionConfig,
    pub treasury: TreasuryConfig,
    pub nomination_pools: NominationPoolsConfig,
    pub staking_rewards: StakingRewardsConfig,
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        use __genesis_config_serde_import__ as _serde;
        #[automatically_derived]
        impl __genesis_config_serde_import__::Serialize for
            RuntimeGenesisConfig {
            fn serialize<__S>(&self, __serializer: __S)
                ->
                    __genesis_config_serde_import__::__private::Result<__S::Ok,
                    __S::Error> where
                __S: __genesis_config_serde_import__::Serializer {
                let mut __serde_state =
                    _serde::Serializer::serialize_struct(__serializer,
                            "RuntimeGenesisConfig",
                            false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 +
                                    1 + 1)?;
                _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "system", &self.system)?;
                _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "authorityDiscovery", &self.authority_discovery)?;
                _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "babe", &self.babe)?;
                _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "grandpa", &self.grandpa)?;
                _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "balances", &self.balances)?;
                _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "vesting", &self.vesting)?;
                _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "transactionPayment", &self.transaction_payment)?;
                _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "imOnline", &self.im_online)?;
                _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "staking", &self.staking)?;
                _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "session", &self.session)?;
                _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "treasury", &self.treasury)?;
                _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "nominationPools", &self.nomination_pools)?;
                _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "stakingRewards", &self.staking_rewards)?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        use __genesis_config_serde_import__ as _serde;
        #[automatically_derived]
        impl<'de> __genesis_config_serde_import__::Deserialize<'de> for
            RuntimeGenesisConfig {
            fn deserialize<__D>(__deserializer: __D)
                ->
                    __genesis_config_serde_import__::__private::Result<Self,
                    __D::Error> where
                __D: __genesis_config_serde_import__::Deserializer<'de> {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __field10,
                    __field11,
                    __field12,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(&self,
                        __formatter: &mut _serde::__private::Formatter)
                        -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(__formatter,
                            "field identifier")
                    }
                    fn visit_u64<__E>(self, __value: u64)
                        -> _serde::__private::Result<Self::Value, __E> where
                        __E: _serde::de::Error {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            10u64 => _serde::__private::Ok(__Field::__field10),
                            11u64 => _serde::__private::Ok(__Field::__field11),
                            12u64 => _serde::__private::Ok(__Field::__field12),
                            _ =>
                                _serde::__private::Err(_serde::de::Error::invalid_value(_serde::de::Unexpected::Unsigned(__value),
                                        &"field index 0 <= i < 13")),
                        }
                    }
                    fn visit_str<__E>(self, __value: &str)
                        -> _serde::__private::Result<Self::Value, __E> where
                        __E: _serde::de::Error {
                        match __value {
                            "system" => _serde::__private::Ok(__Field::__field0),
                            "authorityDiscovery" =>
                                _serde::__private::Ok(__Field::__field1),
                            "babe" => _serde::__private::Ok(__Field::__field2),
                            "grandpa" => _serde::__private::Ok(__Field::__field3),
                            "balances" => _serde::__private::Ok(__Field::__field4),
                            "vesting" => _serde::__private::Ok(__Field::__field5),
                            "transactionPayment" =>
                                _serde::__private::Ok(__Field::__field6),
                            "imOnline" => _serde::__private::Ok(__Field::__field7),
                            "staking" => _serde::__private::Ok(__Field::__field8),
                            "session" => _serde::__private::Ok(__Field::__field9),
                            "treasury" => _serde::__private::Ok(__Field::__field10),
                            "nominationPools" =>
                                _serde::__private::Ok(__Field::__field11),
                            "stakingRewards" =>
                                _serde::__private::Ok(__Field::__field12),
                            _ => {
                                _serde::__private::Err(_serde::de::Error::unknown_field(__value,
                                        FIELDS))
                            }
                        }
                    }
                    fn visit_bytes<__E>(self, __value: &[u8])
                        -> _serde::__private::Result<Self::Value, __E> where
                        __E: _serde::de::Error {
                        match __value {
                            b"system" => _serde::__private::Ok(__Field::__field0),
                            b"authorityDiscovery" =>
                                _serde::__private::Ok(__Field::__field1),
                            b"babe" => _serde::__private::Ok(__Field::__field2),
                            b"grandpa" => _serde::__private::Ok(__Field::__field3),
                            b"balances" => _serde::__private::Ok(__Field::__field4),
                            b"vesting" => _serde::__private::Ok(__Field::__field5),
                            b"transactionPayment" =>
                                _serde::__private::Ok(__Field::__field6),
                            b"imOnline" => _serde::__private::Ok(__Field::__field7),
                            b"staking" => _serde::__private::Ok(__Field::__field8),
                            b"session" => _serde::__private::Ok(__Field::__field9),
                            b"treasury" => _serde::__private::Ok(__Field::__field10),
                            b"nominationPools" =>
                                _serde::__private::Ok(__Field::__field11),
                            b"stakingRewards" =>
                                _serde::__private::Ok(__Field::__field12),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(_serde::de::Error::unknown_field(__value,
                                        FIELDS))
                            }
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(__deserializer: __D)
                        -> _serde::__private::Result<Self, __D::Error> where
                        __D: _serde::Deserializer<'de> {
                        _serde::Deserializer::deserialize_identifier(__deserializer,
                            __FieldVisitor)
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<RuntimeGenesisConfig>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = RuntimeGenesisConfig;
                    fn expecting(&self,
                        __formatter: &mut _serde::__private::Formatter)
                        -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(__formatter,
                            "struct RuntimeGenesisConfig")
                    }
                    #[inline]
                    fn visit_seq<__A>(self, mut __seq: __A)
                        -> _serde::__private::Result<Self::Value, __A::Error> where
                        __A: _serde::de::SeqAccess<'de> {
                        let __field0 =
                            match _serde::de::SeqAccess::next_element::<SystemConfig>(&mut __seq)?
                                {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None =>
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(0usize,
                                                &"struct RuntimeGenesisConfig with 13 elements")),
                            };
                        let __field1 =
                            match _serde::de::SeqAccess::next_element::<AuthorityDiscoveryConfig>(&mut __seq)?
                                {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None =>
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(1usize,
                                                &"struct RuntimeGenesisConfig with 13 elements")),
                            };
                        let __field2 =
                            match _serde::de::SeqAccess::next_element::<BabeConfig>(&mut __seq)?
                                {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None =>
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(2usize,
                                                &"struct RuntimeGenesisConfig with 13 elements")),
                            };
                        let __field3 =
                            match _serde::de::SeqAccess::next_element::<GrandpaConfig>(&mut __seq)?
                                {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None =>
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(3usize,
                                                &"struct RuntimeGenesisConfig with 13 elements")),
                            };
                        let __field4 =
                            match _serde::de::SeqAccess::next_element::<BalancesConfig>(&mut __seq)?
                                {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None =>
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(4usize,
                                                &"struct RuntimeGenesisConfig with 13 elements")),
                            };
                        let __field5 =
                            match _serde::de::SeqAccess::next_element::<VestingConfig>(&mut __seq)?
                                {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None =>
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(5usize,
                                                &"struct RuntimeGenesisConfig with 13 elements")),
                            };
                        let __field6 =
                            match _serde::de::SeqAccess::next_element::<TransactionPaymentConfig>(&mut __seq)?
                                {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None =>
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(6usize,
                                                &"struct RuntimeGenesisConfig with 13 elements")),
                            };
                        let __field7 =
                            match _serde::de::SeqAccess::next_element::<ImOnlineConfig>(&mut __seq)?
                                {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None =>
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(7usize,
                                                &"struct RuntimeGenesisConfig with 13 elements")),
                            };
                        let __field8 =
                            match _serde::de::SeqAccess::next_element::<StakingConfig>(&mut __seq)?
                                {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None =>
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(8usize,
                                                &"struct RuntimeGenesisConfig with 13 elements")),
                            };
                        let __field9 =
                            match _serde::de::SeqAccess::next_element::<SessionConfig>(&mut __seq)?
                                {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None =>
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(9usize,
                                                &"struct RuntimeGenesisConfig with 13 elements")),
                            };
                        let __field10 =
                            match _serde::de::SeqAccess::next_element::<TreasuryConfig>(&mut __seq)?
                                {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None =>
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(10usize,
                                                &"struct RuntimeGenesisConfig with 13 elements")),
                            };
                        let __field11 =
                            match _serde::de::SeqAccess::next_element::<NominationPoolsConfig>(&mut __seq)?
                                {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None =>
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(11usize,
                                                &"struct RuntimeGenesisConfig with 13 elements")),
                            };
                        let __field12 =
                            match _serde::de::SeqAccess::next_element::<StakingRewardsConfig>(&mut __seq)?
                                {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None =>
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(12usize,
                                                &"struct RuntimeGenesisConfig with 13 elements")),
                            };
                        _serde::__private::Ok(RuntimeGenesisConfig {
                                system: __field0,
                                authority_discovery: __field1,
                                babe: __field2,
                                grandpa: __field3,
                                balances: __field4,
                                vesting: __field5,
                                transaction_payment: __field6,
                                im_online: __field7,
                                staking: __field8,
                                session: __field9,
                                treasury: __field10,
                                nomination_pools: __field11,
                                staking_rewards: __field12,
                            })
                    }
                    #[inline]
                    fn visit_map<__A>(self, mut __map: __A)
                        -> _serde::__private::Result<Self::Value, __A::Error> where
                        __A: _serde::de::MapAccess<'de> {
                        let mut __field0: _serde::__private::Option<SystemConfig> =
                            _serde::__private::None;
                        let mut __field1:
                                _serde::__private::Option<AuthorityDiscoveryConfig> =
                            _serde::__private::None;
                        let mut __field2: _serde::__private::Option<BabeConfig> =
                            _serde::__private::None;
                        let mut __field3: _serde::__private::Option<GrandpaConfig> =
                            _serde::__private::None;
                        let mut __field4:
                                _serde::__private::Option<BalancesConfig> =
                            _serde::__private::None;
                        let mut __field5: _serde::__private::Option<VestingConfig> =
                            _serde::__private::None;
                        let mut __field6:
                                _serde::__private::Option<TransactionPaymentConfig> =
                            _serde::__private::None;
                        let mut __field7:
                                _serde::__private::Option<ImOnlineConfig> =
                            _serde::__private::None;
                        let mut __field8: _serde::__private::Option<StakingConfig> =
                            _serde::__private::None;
                        let mut __field9: _serde::__private::Option<SessionConfig> =
                            _serde::__private::None;
                        let mut __field10:
                                _serde::__private::Option<TreasuryConfig> =
                            _serde::__private::None;
                        let mut __field11:
                                _serde::__private::Option<NominationPoolsConfig> =
                            _serde::__private::None;
                        let mut __field12:
                                _serde::__private::Option<StakingRewardsConfig> =
                            _serde::__private::None;
                        while let _serde::__private::Some(__key) =
                                _serde::de::MapAccess::next_key::<__Field>(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("system"));
                                        }
                                    __field0 =
                                        _serde::__private::Some(_serde::de::MapAccess::next_value::<SystemConfig>(&mut __map)?);
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("authorityDiscovery"));
                                        }
                                    __field1 =
                                        _serde::__private::Some(_serde::de::MapAccess::next_value::<AuthorityDiscoveryConfig>(&mut __map)?);
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("babe"));
                                        }
                                    __field2 =
                                        _serde::__private::Some(_serde::de::MapAccess::next_value::<BabeConfig>(&mut __map)?);
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("grandpa"));
                                        }
                                    __field3 =
                                        _serde::__private::Some(_serde::de::MapAccess::next_value::<GrandpaConfig>(&mut __map)?);
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("balances"));
                                        }
                                    __field4 =
                                        _serde::__private::Some(_serde::de::MapAccess::next_value::<BalancesConfig>(&mut __map)?);
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("vesting"));
                                        }
                                    __field5 =
                                        _serde::__private::Some(_serde::de::MapAccess::next_value::<VestingConfig>(&mut __map)?);
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("transactionPayment"));
                                        }
                                    __field6 =
                                        _serde::__private::Some(_serde::de::MapAccess::next_value::<TransactionPaymentConfig>(&mut __map)?);
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("imOnline"));
                                        }
                                    __field7 =
                                        _serde::__private::Some(_serde::de::MapAccess::next_value::<ImOnlineConfig>(&mut __map)?);
                                }
                                __Field::__field8 => {
                                    if _serde::__private::Option::is_some(&__field8) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("staking"));
                                        }
                                    __field8 =
                                        _serde::__private::Some(_serde::de::MapAccess::next_value::<StakingConfig>(&mut __map)?);
                                }
                                __Field::__field9 => {
                                    if _serde::__private::Option::is_some(&__field9) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("session"));
                                        }
                                    __field9 =
                                        _serde::__private::Some(_serde::de::MapAccess::next_value::<SessionConfig>(&mut __map)?);
                                }
                                __Field::__field10 => {
                                    if _serde::__private::Option::is_some(&__field10) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("treasury"));
                                        }
                                    __field10 =
                                        _serde::__private::Some(_serde::de::MapAccess::next_value::<TreasuryConfig>(&mut __map)?);
                                }
                                __Field::__field11 => {
                                    if _serde::__private::Option::is_some(&__field11) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("nominationPools"));
                                        }
                                    __field11 =
                                        _serde::__private::Some(_serde::de::MapAccess::next_value::<NominationPoolsConfig>(&mut __map)?);
                                }
                                __Field::__field12 => {
                                    if _serde::__private::Option::is_some(&__field12) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("stakingRewards"));
                                        }
                                    __field12 =
                                        _serde::__private::Some(_serde::de::MapAccess::next_value::<StakingRewardsConfig>(&mut __map)?);
                                }
                            }
                        }
                        let __field0 =
                            match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None =>
                                    _serde::__private::de::missing_field("system")?,
                            };
                        let __field1 =
                            match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None =>
                                    _serde::__private::de::missing_field("authorityDiscovery")?,
                            };
                        let __field2 =
                            match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None =>
                                    _serde::__private::de::missing_field("babe")?,
                            };
                        let __field3 =
                            match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None =>
                                    _serde::__private::de::missing_field("grandpa")?,
                            };
                        let __field4 =
                            match __field4 {
                                _serde::__private::Some(__field4) => __field4,
                                _serde::__private::None =>
                                    _serde::__private::de::missing_field("balances")?,
                            };
                        let __field5 =
                            match __field5 {
                                _serde::__private::Some(__field5) => __field5,
                                _serde::__private::None =>
                                    _serde::__private::de::missing_field("vesting")?,
                            };
                        let __field6 =
                            match __field6 {
                                _serde::__private::Some(__field6) => __field6,
                                _serde::__private::None =>
                                    _serde::__private::de::missing_field("transactionPayment")?,
                            };
                        let __field7 =
                            match __field7 {
                                _serde::__private::Some(__field7) => __field7,
                                _serde::__private::None =>
                                    _serde::__private::de::missing_field("imOnline")?,
                            };
                        let __field8 =
                            match __field8 {
                                _serde::__private::Some(__field8) => __field8,
                                _serde::__private::None =>
                                    _serde::__private::de::missing_field("staking")?,
                            };
                        let __field9 =
                            match __field9 {
                                _serde::__private::Some(__field9) => __field9,
                                _serde::__private::None =>
                                    _serde::__private::de::missing_field("session")?,
                            };
                        let __field10 =
                            match __field10 {
                                _serde::__private::Some(__field10) => __field10,
                                _serde::__private::None =>
                                    _serde::__private::de::missing_field("treasury")?,
                            };
                        let __field11 =
                            match __field11 {
                                _serde::__private::Some(__field11) => __field11,
                                _serde::__private::None =>
                                    _serde::__private::de::missing_field("nominationPools")?,
                            };
                        let __field12 =
                            match __field12 {
                                _serde::__private::Some(__field12) => __field12,
                                _serde::__private::None =>
                                    _serde::__private::de::missing_field("stakingRewards")?,
                            };
                        _serde::__private::Ok(RuntimeGenesisConfig {
                                system: __field0,
                                authority_discovery: __field1,
                                babe: __field2,
                                grandpa: __field3,
                                balances: __field4,
                                vesting: __field5,
                                transaction_payment: __field6,
                                im_online: __field7,
                                staking: __field8,
                                session: __field9,
                                treasury: __field10,
                                nomination_pools: __field11,
                                staking_rewards: __field12,
                            })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] =
                    &["system", "authorityDiscovery", "babe", "grandpa",
                                "balances", "vesting", "transactionPayment", "imOnline",
                                "staking", "session", "treasury", "nominationPools",
                                "stakingRewards"];
                _serde::Deserializer::deserialize_struct(__deserializer,
                    "RuntimeGenesisConfig", FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<RuntimeGenesisConfig>,
                        lifetime: _serde::__private::PhantomData,
                    })
            }
        }
    };
#[automatically_derived]
impl ::core::default::Default for RuntimeGenesisConfig {
    #[inline]
    fn default() -> RuntimeGenesisConfig {
        RuntimeGenesisConfig {
            system: ::core::default::Default::default(),
            authority_discovery: ::core::default::Default::default(),
            babe: ::core::default::Default::default(),
            grandpa: ::core::default::Default::default(),
            balances: ::core::default::Default::default(),
            vesting: ::core::default::Default::default(),
            transaction_payment: ::core::default::Default::default(),
            im_online: ::core::default::Default::default(),
            staking: ::core::default::Default::default(),
            session: ::core::default::Default::default(),
            treasury: ::core::default::Default::default(),
            nomination_pools: ::core::default::Default::default(),
            staking_rewards: ::core::default::Default::default(),
        }
    }
}
#[cfg(any(feature = "std", test))]
#[deprecated(note =
"GenesisConfig is planned to be removed in December 2023. Use `RuntimeGenesisConfig` instead.")]
pub type GenesisConfig = RuntimeGenesisConfig;
#[cfg(any(feature = "std", test))]
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildStorage
    for RuntimeGenesisConfig {
    fn assimilate_storage(&self,
        storage:
            &mut self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::Storage)
        -> std::result::Result<(), String> {
        self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::BasicExternalities::execute_with_storage(storage,
            ||
                {
                    <Self as
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::BuildGenesisConfig>::build(&self);
                    Ok(())
                })
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::BuildGenesisConfig
    for RuntimeGenesisConfig {
    fn build(&self) {
        <SystemConfig as
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::BuildGenesisConfig>::build(&self.system);
        <AuthorityDiscoveryConfig as
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::BuildGenesisConfig>::build(&self.authority_discovery);
        <BabeConfig as
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::BuildGenesisConfig>::build(&self.babe);
        <GrandpaConfig as
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::BuildGenesisConfig>::build(&self.grandpa);
        <BalancesConfig as
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::BuildGenesisConfig>::build(&self.balances);
        <VestingConfig as
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::BuildGenesisConfig>::build(&self.vesting);
        <TransactionPaymentConfig as
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::BuildGenesisConfig>::build(&self.transaction_payment);
        <ImOnlineConfig as
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::BuildGenesisConfig>::build(&self.im_online);
        <StakingConfig as
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::BuildGenesisConfig>::build(&self.staking);
        <SessionConfig as
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::BuildGenesisConfig>::build(&self.session);
        <TreasuryConfig as
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::BuildGenesisConfig>::build(&self.treasury);
        <NominationPoolsConfig as
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::BuildGenesisConfig>::build(&self.nomination_pools);
        <StakingRewardsConfig as
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::BuildGenesisConfig>::build(&self.staking_rewards);
        <AllPalletsWithSystem as
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::OnGenesis>::on_genesis();
    }
}
trait InherentDataExt {
    fn create_extrinsics(&self)
    ->
        self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::vec::Vec<<<Runtime
        as frame_system::Config>::Block as
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Block>::Extrinsic>;
    fn check_extrinsics(&self,
    block: &<Runtime as frame_system::Config>::Block)
    ->
        self::sp_api_hidden_includes_construct_runtime::hidden_include::inherent::CheckInherentsResult;
}
impl InherentDataExt for
    self::sp_api_hidden_includes_construct_runtime::hidden_include::inherent::InherentData
    {
    fn create_extrinsics(&self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::vec::Vec<<<Runtime
            as frame_system::Config>::Block as
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Block>::Extrinsic> {
        use self::sp_api_hidden_includes_construct_runtime::hidden_include::inherent::ProvideInherent;
        let mut inherents =
            self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::sp_std::vec::Vec::new();
        if let Some(inherent) = Timestamp::create_inherent(self) {
                let inherent =
                    <<<Runtime as frame_system::Config>::Block as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Block>::Extrinsic
                                as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Extrinsic>::new(inherent.into(),
                            None).expect("Runtime UncheckedExtrinsic is not Opaque, so it has to return \
							`Some`; qed");
                inherents.push(inherent);
            }
        inherents
    }
    fn check_extrinsics(&self,
        block: &<Runtime as frame_system::Config>::Block)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::inherent::CheckInherentsResult {
        use self::sp_api_hidden_includes_construct_runtime::hidden_include::inherent::{
            ProvideInherent, IsFatalError,
        };
        use self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::{
            IsSubType, ExtrinsicCall,
        };
        use self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Block as _;
        use self::sp_api_hidden_includes_construct_runtime::hidden_include::_private::sp_inherents::Error;
        use self::sp_api_hidden_includes_construct_runtime::hidden_include::__private::log;
        let mut result =
            self::sp_api_hidden_includes_construct_runtime::hidden_include::inherent::CheckInherentsResult::new();
        fn handle_put_error_result(res: Result<(), Error>) {
            const LOG_TARGET: &str = "runtime::inherent";
            match res {
                Ok(()) => (),
                Err(Error::InherentDataExists(id)) => {
                    let lvl = ::log::Level::Debug;
                    if lvl <= ::log::STATIC_MAX_LEVEL &&
                                lvl <= ::log::max_level() {
                            ::log::__private_api::log(format_args!("Some error already reported for inherent {0:?}, new non fatal error is ignored",
                                    id), lvl,
                                &(LOG_TARGET, "vara_runtime", "runtime/vara/src/lib.rs"),
                                1211u32, ());
                        }
                }
                Err(Error::FatalErrorReported) => {
                    let lvl = ::log::Level::Error;
                    if lvl <= ::log::STATIC_MAX_LEVEL &&
                                lvl <= ::log::max_level() {
                            ::log::__private_api::log(format_args!("Fatal error already reported, unexpected considering there is only one fatal error"),
                                lvl,
                                &(LOG_TARGET, "vara_runtime", "runtime/vara/src/lib.rs"),
                                1211u32, ());
                        }
                }
                Err(_) => {
                    let lvl = ::log::Level::Error;
                    if lvl <= ::log::STATIC_MAX_LEVEL &&
                                lvl <= ::log::max_level() {
                            ::log::__private_api::log(format_args!("Unexpected error from `put_error` operation"),
                                lvl,
                                &(LOG_TARGET, "vara_runtime", "runtime/vara/src/lib.rs"),
                                1211u32, ());
                        }
                }
            }
        }
        for xt in block.extrinsics() {
            if self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Extrinsic::is_signed(xt).unwrap_or(false)
                    {
                    break
                }
            let mut is_inherent = false;
            {
                let call =
                    <<<Runtime as frame_system::Config>::Block as
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Block>::Extrinsic
                            as ExtrinsicCall>::call(xt);
                if let Some(call) = IsSubType::<_>::is_sub_type(call) {
                        if Timestamp::is_inherent(call) {
                                is_inherent = true;
                                if let Err(e) = Timestamp::check_inherent(call, self) {
                                        handle_put_error_result(result.put_error(Timestamp::INHERENT_IDENTIFIER,
                                                &e));
                                        if e.is_fatal_error() { return result; }
                                    }
                            }
                    }
            }
            if !is_inherent { break }
        }
        match Timestamp::is_inherent_required(self) {
            Ok(Some(e)) => {
                let found =
                    block.extrinsics().iter().any(|xt|
                            {
                                let is_signed =
                                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Extrinsic::is_signed(xt).unwrap_or(false);
                                if !is_signed {
                                        let call =
                                            <<<Runtime as frame_system::Config>::Block as
                                                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Block>::Extrinsic
                                                    as ExtrinsicCall>::call(xt);
                                        if let Some(call) = IsSubType::<_>::is_sub_type(call) {
                                                Timestamp::is_inherent(&call)
                                            } else { false }
                                    } else { false }
                            });
                if !found {
                        handle_put_error_result(result.put_error(Timestamp::INHERENT_IDENTIFIER,
                                &e));
                        if e.is_fatal_error() { return result; }
                    }
            }
            Ok(None) => (),
            Err(e) => {
                handle_put_error_result(result.put_error(Timestamp::INHERENT_IDENTIFIER,
                        &e));
                if e.is_fatal_error() { return result; }
            }
        }
        result
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::EnsureInherentsAreFirst<<Runtime
    as frame_system::Config>::Block> for Runtime {
    fn ensure_inherents_are_first(block:
            &<Runtime as frame_system::Config>::Block) -> Result<(), u32> {
        use self::sp_api_hidden_includes_construct_runtime::hidden_include::inherent::ProvideInherent;
        use self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::{
            IsSubType, ExtrinsicCall,
        };
        use self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Block as _;
        let mut first_signed_observed = false;
        for (i, xt) in block.extrinsics().iter().enumerate() {
            let is_signed =
                self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Extrinsic::is_signed(xt).unwrap_or(false);
            let is_inherent =
                if is_signed {
                        false
                    } else {
                       let mut is_inherent = false;
                       {
                           let call =
                               <<<Runtime as frame_system::Config>::Block as
                                       self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Block>::Extrinsic
                                       as ExtrinsicCall>::call(xt);
                           if let Some(call) = IsSubType::<_>::is_sub_type(call) {
                                   if Timestamp::is_inherent(&call) { is_inherent = true; }
                               }
                       }
                       is_inherent
                   };
            if !is_inherent { first_signed_observed = true; }
            if first_signed_observed && is_inherent { return Err(i as u32) }
        }
        Ok(())
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::unsigned::ValidateUnsigned
    for Runtime {
    type Call = RuntimeCall;
    fn pre_dispatch(call: &Self::Call)
        ->
            Result<(),
            self::sp_api_hidden_includes_construct_runtime::hidden_include::unsigned::TransactionValidityError> {

        #[allow(unreachable_patterns)]
        match call {
            RuntimeCall::Babe(inner_call) => Babe::pre_dispatch(inner_call),
            RuntimeCall::Grandpa(inner_call) =>
                Grandpa::pre_dispatch(inner_call),
            RuntimeCall::ImOnline(inner_call) =>
                ImOnline::pre_dispatch(inner_call),
            RuntimeCall::ElectionProviderMultiPhase(inner_call) =>
                ElectionProviderMultiPhase::pre_dispatch(inner_call),
            _ => Ok(()),
        }
    }
    fn validate_unsigned(#[allow(unused_variables)] source:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::unsigned::TransactionSource,
        call: &Self::Call)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::unsigned::TransactionValidity {

        #[allow(unreachable_patterns)]
        match call {
            RuntimeCall::Babe(inner_call) =>
                Babe::validate_unsigned(source, inner_call),
            RuntimeCall::Grandpa(inner_call) =>
                Grandpa::validate_unsigned(source, inner_call),
            RuntimeCall::ImOnline(inner_call) =>
                ImOnline::validate_unsigned(source, inner_call),
            RuntimeCall::ElectionProviderMultiPhase(inner_call) =>
                ElectionProviderMultiPhase::validate_unsigned(source,
                    inner_call),
            _ =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::unsigned::UnknownTransaction::NoUnsignedValidator.into(),
        }
    }
}
#[doc = r" A reason for placing a freeze on funds."]
pub enum RuntimeFreezeReason {}
#[automatically_derived]
impl ::core::marker::Copy for RuntimeFreezeReason { }
#[automatically_derived]
impl ::core::clone::Clone for RuntimeFreezeReason {
    #[inline]
    fn clone(&self) -> RuntimeFreezeReason { *self }
}
#[automatically_derived]
impl ::core::marker::StructuralEq for RuntimeFreezeReason { }
#[automatically_derived]
impl ::core::cmp::Eq for RuntimeFreezeReason {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {}
}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for RuntimeFreezeReason { }
#[automatically_derived]
impl ::core::cmp::PartialEq for RuntimeFreezeReason {
    #[inline]
    fn eq(&self, other: &RuntimeFreezeReason) -> bool { match *self {} }
}
#[automatically_derived]
impl ::core::cmp::Ord for RuntimeFreezeReason {
    #[inline]
    fn cmp(&self, other: &RuntimeFreezeReason) -> ::core::cmp::Ordering {
        match *self {}
    }
}
#[automatically_derived]
impl ::core::cmp::PartialOrd for RuntimeFreezeReason {
    #[inline]
    fn partial_cmp(&self, other: &RuntimeFreezeReason)
        -> ::core::option::Option<::core::cmp::Ordering> {
        match *self {}
    }
}
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::parity_scale_codec::Encode for RuntimeFreezeReason { }
        #[automatically_derived]
        impl ::parity_scale_codec::EncodeLike for RuntimeFreezeReason { }
    };
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::parity_scale_codec::Decode for RuntimeFreezeReason {
            fn decode<__CodecInputEdqy: ::parity_scale_codec::Input>(__codec_input_edqy:
                    &mut __CodecInputEdqy)
                -> ::core::result::Result<Self, ::parity_scale_codec::Error> {
                match __codec_input_edqy.read_byte().map_err(|e|
                                e.chain("Could not decode `RuntimeFreezeReason`, failed to read variant byte"))?
                    {
                    _ => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Err(<_ as
                                                        ::core::convert::Into<_>>::into("Could not decode `RuntimeFreezeReason`, variant doesn't exist"))
                                        })();
                    }
                }
            }
        }
    };
const _: () =
    {
        impl ::parity_scale_codec::MaxEncodedLen for RuntimeFreezeReason {
            fn max_encoded_len() -> ::core::primitive::usize {
                0_usize.saturating_add(1)
            }
        }
    };
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        impl ::scale_info::TypeInfo for RuntimeFreezeReason {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder().path(::scale_info::Path::new("RuntimeFreezeReason",
                                    "vara_runtime")).type_params(::alloc::vec::Vec::new()).docs(&["A reason for placing a freeze on funds."]).variant(::scale_info::build::Variants::new())
            }
        }
        ;
    };
impl core::fmt::Debug for RuntimeFreezeReason {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        match self { _ => Ok(()), }
    }
}
#[doc = r" A reason for placing a hold on funds."]
pub enum RuntimeHoldReason {}
#[automatically_derived]
impl ::core::marker::Copy for RuntimeHoldReason { }
#[automatically_derived]
impl ::core::clone::Clone for RuntimeHoldReason {
    #[inline]
    fn clone(&self) -> RuntimeHoldReason { *self }
}
#[automatically_derived]
impl ::core::marker::StructuralEq for RuntimeHoldReason { }
#[automatically_derived]
impl ::core::cmp::Eq for RuntimeHoldReason {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {}
}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for RuntimeHoldReason { }
#[automatically_derived]
impl ::core::cmp::PartialEq for RuntimeHoldReason {
    #[inline]
    fn eq(&self, other: &RuntimeHoldReason) -> bool { match *self {} }
}
#[automatically_derived]
impl ::core::cmp::Ord for RuntimeHoldReason {
    #[inline]
    fn cmp(&self, other: &RuntimeHoldReason) -> ::core::cmp::Ordering {
        match *self {}
    }
}
#[automatically_derived]
impl ::core::cmp::PartialOrd for RuntimeHoldReason {
    #[inline]
    fn partial_cmp(&self, other: &RuntimeHoldReason)
        -> ::core::option::Option<::core::cmp::Ordering> {
        match *self {}
    }
}
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::parity_scale_codec::Encode for RuntimeHoldReason { }
        #[automatically_derived]
        impl ::parity_scale_codec::EncodeLike for RuntimeHoldReason { }
    };
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::parity_scale_codec::Decode for RuntimeHoldReason {
            fn decode<__CodecInputEdqy: ::parity_scale_codec::Input>(__codec_input_edqy:
                    &mut __CodecInputEdqy)
                -> ::core::result::Result<Self, ::parity_scale_codec::Error> {
                match __codec_input_edqy.read_byte().map_err(|e|
                                e.chain("Could not decode `RuntimeHoldReason`, failed to read variant byte"))?
                    {
                    _ => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Err(<_ as
                                                        ::core::convert::Into<_>>::into("Could not decode `RuntimeHoldReason`, variant doesn't exist"))
                                        })();
                    }
                }
            }
        }
    };
const _: () =
    {
        impl ::parity_scale_codec::MaxEncodedLen for RuntimeHoldReason {
            fn max_encoded_len() -> ::core::primitive::usize {
                0_usize.saturating_add(1)
            }
        }
    };
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        impl ::scale_info::TypeInfo for RuntimeHoldReason {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder().path(::scale_info::Path::new("RuntimeHoldReason",
                                    "vara_runtime")).type_params(::alloc::vec::Vec::new()).docs(&["A reason for placing a hold on funds."]).variant(::scale_info::build::Variants::new())
            }
        }
        ;
    };
impl core::fmt::Debug for RuntimeHoldReason {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        match self { _ => Ok(()), }
    }
}
#[doc = r" An identifier for each lock placed on funds."]
pub enum RuntimeLockId {}
#[automatically_derived]
impl ::core::marker::Copy for RuntimeLockId { }
#[automatically_derived]
impl ::core::clone::Clone for RuntimeLockId {
    #[inline]
    fn clone(&self) -> RuntimeLockId { *self }
}
#[automatically_derived]
impl ::core::marker::StructuralEq for RuntimeLockId { }
#[automatically_derived]
impl ::core::cmp::Eq for RuntimeLockId {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {}
}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for RuntimeLockId { }
#[automatically_derived]
impl ::core::cmp::PartialEq for RuntimeLockId {
    #[inline]
    fn eq(&self, other: &RuntimeLockId) -> bool { match *self {} }
}
#[automatically_derived]
impl ::core::cmp::Ord for RuntimeLockId {
    #[inline]
    fn cmp(&self, other: &RuntimeLockId) -> ::core::cmp::Ordering {
        match *self {}
    }
}
#[automatically_derived]
impl ::core::cmp::PartialOrd for RuntimeLockId {
    #[inline]
    fn partial_cmp(&self, other: &RuntimeLockId)
        -> ::core::option::Option<::core::cmp::Ordering> {
        match *self {}
    }
}
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::parity_scale_codec::Encode for RuntimeLockId { }
        #[automatically_derived]
        impl ::parity_scale_codec::EncodeLike for RuntimeLockId { }
    };
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::parity_scale_codec::Decode for RuntimeLockId {
            fn decode<__CodecInputEdqy: ::parity_scale_codec::Input>(__codec_input_edqy:
                    &mut __CodecInputEdqy)
                -> ::core::result::Result<Self, ::parity_scale_codec::Error> {
                match __codec_input_edqy.read_byte().map_err(|e|
                                e.chain("Could not decode `RuntimeLockId`, failed to read variant byte"))?
                    {
                    _ => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Err(<_ as
                                                        ::core::convert::Into<_>>::into("Could not decode `RuntimeLockId`, variant doesn't exist"))
                                        })();
                    }
                }
            }
        }
    };
const _: () =
    {
        impl ::parity_scale_codec::MaxEncodedLen for RuntimeLockId {
            fn max_encoded_len() -> ::core::primitive::usize {
                0_usize.saturating_add(1)
            }
        }
    };
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        impl ::scale_info::TypeInfo for RuntimeLockId {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder().path(::scale_info::Path::new("RuntimeLockId",
                                    "vara_runtime")).type_params(::alloc::vec::Vec::new()).docs(&["An identifier for each lock placed on funds."]).variant(::scale_info::build::Variants::new())
            }
        }
        ;
    };
impl core::fmt::Debug for RuntimeLockId {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        match self { _ => Ok(()), }
    }
}
#[doc = r" A reason for slashing funds."]
pub enum RuntimeSlashReason {}
#[automatically_derived]
impl ::core::marker::Copy for RuntimeSlashReason { }
#[automatically_derived]
impl ::core::clone::Clone for RuntimeSlashReason {
    #[inline]
    fn clone(&self) -> RuntimeSlashReason { *self }
}
#[automatically_derived]
impl ::core::marker::StructuralEq for RuntimeSlashReason { }
#[automatically_derived]
impl ::core::cmp::Eq for RuntimeSlashReason {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {}
}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for RuntimeSlashReason { }
#[automatically_derived]
impl ::core::cmp::PartialEq for RuntimeSlashReason {
    #[inline]
    fn eq(&self, other: &RuntimeSlashReason) -> bool { match *self {} }
}
#[automatically_derived]
impl ::core::cmp::Ord for RuntimeSlashReason {
    #[inline]
    fn cmp(&self, other: &RuntimeSlashReason) -> ::core::cmp::Ordering {
        match *self {}
    }
}
#[automatically_derived]
impl ::core::cmp::PartialOrd for RuntimeSlashReason {
    #[inline]
    fn partial_cmp(&self, other: &RuntimeSlashReason)
        -> ::core::option::Option<::core::cmp::Ordering> {
        match *self {}
    }
}
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::parity_scale_codec::Encode for RuntimeSlashReason { }
        #[automatically_derived]
        impl ::parity_scale_codec::EncodeLike for RuntimeSlashReason { }
    };
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::parity_scale_codec::Decode for RuntimeSlashReason {
            fn decode<__CodecInputEdqy: ::parity_scale_codec::Input>(__codec_input_edqy:
                    &mut __CodecInputEdqy)
                -> ::core::result::Result<Self, ::parity_scale_codec::Error> {
                match __codec_input_edqy.read_byte().map_err(|e|
                                e.chain("Could not decode `RuntimeSlashReason`, failed to read variant byte"))?
                    {
                    _ => {

                        #[allow(clippy :: redundant_closure_call)]
                        return (move ||
                                        {
                                            ::core::result::Result::Err(<_ as
                                                        ::core::convert::Into<_>>::into("Could not decode `RuntimeSlashReason`, variant doesn't exist"))
                                        })();
                    }
                }
            }
        }
    };
const _: () =
    {
        impl ::parity_scale_codec::MaxEncodedLen for RuntimeSlashReason {
            fn max_encoded_len() -> ::core::primitive::usize {
                0_usize.saturating_add(1)
            }
        }
    };
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        impl ::scale_info::TypeInfo for RuntimeSlashReason {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder().path(::scale_info::Path::new("RuntimeSlashReason",
                                    "vara_runtime")).type_params(::alloc::vec::Vec::new()).docs(&["A reason for slashing funds."]).variant(::scale_info::build::Variants::new())
            }
        }
        ;
    };
impl core::fmt::Debug for RuntimeSlashReason {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        match self { _ => Ok(()), }
    }
}
const _: () =
    if !(<frame_system::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `System` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_babe::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `Babe` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_grandpa::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `Grandpa` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_balances::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `Balances` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_vesting::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `Vesting` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_bags_list::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `BagsList` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_im_online::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `ImOnline` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_staking::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `Staking` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_session::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `Session` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_treasury::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `Treasury` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_utility::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `Utility` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_conviction_voting::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `ConvictionVoting` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_referenda::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `Referenda` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_ranked_collective::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `FellowshipCollective` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_referenda::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `FellowshipReferenda` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_whitelist::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `Whitelist` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_scheduler::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `Scheduler` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_preimage::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `Preimage` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_identity::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `Identity` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_proxy::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `Proxy` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_multisig::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `Multisig` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_election_provider_multi_phase::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `ElectionProviderMultiPhase` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_bounties::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `Bounties` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_child_bounties::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `ChildBounties` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_nomination_pools::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `NominationPools` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_gear_program::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `GearProgram` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_gear_messenger::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `GearMessenger` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_gear_scheduler::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `GearScheduler` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_gear_gas::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `GearGas` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_gear::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `Gear` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_gear_staking_rewards::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `StakingRewards` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_gear_voucher::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `GearVoucher` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
const _: () =
    if !(<pallet_gear_bank::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            {
                ::core::panicking::panic_fmt(format_args!("The maximum encoded size of the error type in the `GearBank` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"));
            }
        };
/// The address format for describing accounts.
pub type Address = sp_runtime::MultiAddress<AccountId, ()>;
/// Block header type as expected by this runtime.
pub type Header = generic::Header<BlockNumber, BlakeTwo256>;
/// Block type as expected by this runtime.
pub type Block = generic::Block<Header, UncheckedExtrinsic>;
/// The SignedExtension to the basic transaction logic.
pub type SignedExtra =
    (StakingBlackList<Runtime>, frame_system::CheckNonZeroSender<Runtime>,
    frame_system::CheckSpecVersion<Runtime>,
    frame_system::CheckTxVersion<Runtime>,
    frame_system::CheckGenesis<Runtime>, frame_system::CheckEra<Runtime>,
    frame_system::CheckNonce<Runtime>, frame_system::CheckWeight<Runtime>,
    CustomChargeTransactionPayment<Runtime>);
/// Unchecked extrinsic type as expected by this runtime.
pub type UncheckedExtrinsic =
    generic::UncheckedExtrinsic<Address, RuntimeCall, Signature, SignedExtra>;
/// The payload being signed in transactions.
pub type SignedPayload = generic::SignedPayload<RuntimeCall, SignedExtra>;
/// Executive: handles dispatch to the various modules.
pub type Executive =
    frame_executive::Executive<Runtime, Block,
    frame_system::ChainContext<Runtime>, Runtime, AllPalletsWithSystem,
    migrations::Migrations>;
#[cfg(not(feature = "dev"))]
type DebugInfo = ();
pub struct RuntimeApi {}
#[doc = r" Implements all runtime apis for the client side."]
pub struct RuntimeApiImpl<Block: sp_api::BlockT, C: sp_api::CallApiAt<Block> +
    'static> {
    call: &'static C,
    transaction_depth: std::cell::RefCell<u16>,
    changes: std::cell::RefCell<sp_api::OverlayedChanges<sp_api::HashingFor<Block>>>,
    recorder: std::option::Option<sp_api::ProofRecorder<Block>>,
    call_context: sp_api::CallContext,
    extensions: std::cell::RefCell<sp_api::Extensions>,
    extensions_generated_for: std::cell::RefCell<std::option::Option<Block::Hash>>,
}
impl<Block: sp_api::BlockT, C: sp_api::CallApiAt<Block>> sp_api::ApiExt<Block>
    for RuntimeApiImpl<Block, C> {
    fn execute_in_transaction<F: FnOnce(&Self)
        -> sp_api::TransactionOutcome<R>, R>(&self, call: F) -> R where
        Self: Sized {
        self.start_transaction();
        *std::cell::RefCell::borrow_mut(&self.transaction_depth) += 1;
        let res = call(self);
        std::cell::RefCell::borrow_mut(&self.transaction_depth).checked_sub(1).expect("Transactions are opened and closed together; qed");
        self.commit_or_rollback_transaction(match res {
                sp_api::TransactionOutcome::Commit(_) => true,
                _ => false,
            });
        res.into_inner()
    }
    fn has_api<A: sp_api::RuntimeApiInfo +
        ?Sized>(&self, at: <Block as sp_api::BlockT>::Hash)
        -> std::result::Result<bool, sp_api::ApiError> where Self: Sized {
        sp_api::CallApiAt::<Block>::runtime_version_at(self.call,
                at).map(|v|
                sp_api::RuntimeVersion::has_api_with(&v, &A::ID,
                    |v| v == A::VERSION))
    }
    fn has_api_with<A: sp_api::RuntimeApiInfo + ?Sized, P: Fn(u32)
        -> bool>(&self, at: <Block as sp_api::BlockT>::Hash, pred: P)
        -> std::result::Result<bool, sp_api::ApiError> where Self: Sized {
        sp_api::CallApiAt::<Block>::runtime_version_at(self.call,
                at).map(|v|
                sp_api::RuntimeVersion::has_api_with(&v, &A::ID, pred))
    }
    fn api_version<A: sp_api::RuntimeApiInfo +
        ?Sized>(&self, at: <Block as sp_api::BlockT>::Hash)
        -> std::result::Result<Option<u32>, sp_api::ApiError> where
        Self: Sized {
        sp_api::CallApiAt::<Block>::runtime_version_at(self.call,
                at).map(|v| sp_api::RuntimeVersion::api_version(&v, &A::ID))
    }
    fn record_proof(&mut self) {
        self.recorder =
            std::option::Option::Some(std::default::Default::default());
    }
    fn proof_recorder(&self)
        -> std::option::Option<sp_api::ProofRecorder<Block>> {
        std::clone::Clone::clone(&self.recorder)
    }
    fn extract_proof(&mut self) -> std::option::Option<sp_api::StorageProof> {
        let recorder = std::option::Option::take(&mut self.recorder);
        std::option::Option::map(recorder,
            |recorder|
                {
                    sp_api::ProofRecorder::<Block>::drain_storage_proof(recorder)
                })
    }
    fn into_storage_changes<B: sp_api::StateBackend<sp_api::HashingFor<Block>>>(&self,
        backend: &B, parent_hash: Block::Hash)
        -> core::result::Result<sp_api::StorageChanges<Block>, String> where
        Self: Sized {
        let state_version =
            sp_api::CallApiAt::<Block>::runtime_version_at(self.call,
                            std::clone::Clone::clone(&parent_hash)).map(|v|
                            sp_api::RuntimeVersion::state_version(&v)).map_err(|e|
                        {
                            let res =
                                ::alloc::fmt::format(format_args!("Failed to get state version: {0}",
                                        e));
                            res
                        })?;
        sp_api::OverlayedChanges::drain_storage_changes(&mut std::cell::RefCell::borrow_mut(&self.changes),
            backend, state_version)
    }
    fn set_call_context(&mut self, call_context: sp_api::CallContext) {
        self.call_context = call_context;
    }
    fn register_extension<E: sp_api::Extension>(&mut self, extension: E) {
        std::cell::RefCell::borrow_mut(&self.extensions).register(extension);
    }
}
impl<Block: sp_api::BlockT, C> sp_api::ConstructRuntimeApi<Block, C> for
    RuntimeApi where C: sp_api::CallApiAt<Block> + 'static {
    type RuntimeApi = RuntimeApiImpl<Block, C>;
    fn construct_runtime_api<'a>(call: &'a C)
        -> sp_api::ApiRef<'a, Self::RuntimeApi> {
        RuntimeApiImpl {
                call: unsafe { std::mem::transmute(call) },
                transaction_depth: 0.into(),
                changes: std::default::Default::default(),
                recorder: std::default::Default::default(),
                call_context: sp_api::CallContext::Offchain,
                extensions: std::default::Default::default(),
                extensions_generated_for: std::default::Default::default(),
            }.into()
    }
}
impl<Block: sp_api::BlockT, C: sp_api::CallApiAt<Block>>
    RuntimeApiImpl<Block, C> {
    fn commit_or_rollback_transaction(&self, commit: bool) {
        let proof =
            "\
					We only close a transaction when we opened one ourself.
					Other parts of the runtime that make use of transactions (state-machine)
					also balance their transactions. The runtime cannot close client initiated
					transactions; qed";
        let res =
            if commit {
                    let res =
                        if let Some(recorder) = &self.recorder {
                                sp_api::ProofRecorder::<Block>::commit_transaction(&recorder)
                            } else { Ok(()) };
                    let res2 =
                        sp_api::OverlayedChanges::commit_transaction(&mut std::cell::RefCell::borrow_mut(&self.changes));
                    std::result::Result::and(res,
                        std::result::Result::map_err(res2, drop))
                } else {
                   let res =
                       if let Some(recorder) = &self.recorder {
                               sp_api::ProofRecorder::<Block>::rollback_transaction(&recorder)
                           } else { Ok(()) };
                   let res2 =
                       sp_api::OverlayedChanges::rollback_transaction(&mut std::cell::RefCell::borrow_mut(&self.changes));
                   std::result::Result::and(res,
                       std::result::Result::map_err(res2, drop))
               };
        std::result::Result::expect(res, proof);
    }
    fn start_transaction(&self) {
        sp_api::OverlayedChanges::start_transaction(&mut std::cell::RefCell::borrow_mut(&self.changes));
        if let Some(recorder) = &self.recorder {
                sp_api::ProofRecorder::<Block>::start_transaction(&recorder);
            }
    }
}
impl sp_consensus_babe::runtime_decl_for_babe_api::BabeApi<Block> for Runtime
    {
    fn configuration() -> sp_consensus_babe::BabeConfiguration {
        let epoch_config =
            Babe::epoch_config().unwrap_or(BABE_GENESIS_EPOCH_CONFIG);
        sp_consensus_babe::BabeConfiguration {
            slot_duration: Babe::slot_duration(),
            epoch_length: EpochDuration::get(),
            c: epoch_config.c,
            authorities: Babe::authorities().to_vec(),
            randomness: Babe::randomness(),
            allowed_slots: epoch_config.allowed_slots,
        }
    }
    fn current_epoch_start() -> sp_consensus_babe::Slot {
        Babe::current_epoch_start()
    }
    fn current_epoch() -> sp_consensus_babe::Epoch { Babe::current_epoch() }
    fn next_epoch() -> sp_consensus_babe::Epoch { Babe::next_epoch() }
    fn generate_key_ownership_proof(_slot: sp_consensus_babe::Slot,
        authority_id: sp_consensus_babe::AuthorityId)
        -> Option<sp_consensus_babe::OpaqueKeyOwnershipProof> {
        Historical::prove((sp_consensus_babe::KEY_TYPE,
                        authority_id)).map(|p|
                    p.encode()).map(sp_consensus_babe::OpaqueKeyOwnershipProof::new)
    }
    fn submit_report_equivocation_unsigned_extrinsic(equivocation_proof:
            sp_consensus_babe::EquivocationProof<<Block as BlockT>::Header>,
        key_owner_proof: sp_consensus_babe::OpaqueKeyOwnershipProof)
        -> Option<()> {
        let key_owner_proof = key_owner_proof.decode()?;
        Babe::submit_unsigned_equivocation_report(equivocation_proof,
            key_owner_proof)
    }
}
impl pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_call_api::TransactionPaymentCallApi<Block,
    Balance, RuntimeCall> for Runtime {
    fn query_call_info(call: RuntimeCall, len: u32)
        -> RuntimeDispatchInfo<Balance> {
        TransactionPayment::query_call_info(call, len)
    }
    fn query_call_fee_details(call: RuntimeCall, len: u32)
        -> FeeDetails<Balance> {
        TransactionPayment::query_call_fee_details(call, len)
    }
    fn query_weight_to_fee(weight: Weight) -> Balance {
        TransactionPayment::weight_to_fee(weight)
    }
    fn query_length_to_fee(length: u32) -> Balance {
        TransactionPayment::length_to_fee(length)
    }
}
impl pallet_nomination_pools_runtime_api::runtime_decl_for_nomination_pools_api::NominationPoolsApi<Block,
    AccountId, Balance> for Runtime {
    fn pending_rewards(member: AccountId) -> Balance {
        NominationPools::api_pending_rewards(member).unwrap_or_default()
    }
    fn points_to_balance(pool_id: pallet_nomination_pools::PoolId,
        points: Balance) -> Balance {
        NominationPools::api_points_to_balance(pool_id, points)
    }
    fn balance_to_points(pool_id: pallet_nomination_pools::PoolId,
        new_funds: Balance) -> Balance {
        NominationPools::api_balance_to_points(pool_id, new_funds)
    }
}
impl pallet_staking_runtime_api::runtime_decl_for_staking_api::StakingApi<Block,
    Balance> for Runtime {
    fn nominations_quota(balance: Balance) -> u32 {
        Staking::api_nominations_quota(balance)
    }
}
impl pallet_gear_staking_rewards_rpc_runtime_api::runtime_decl_for_gear_staking_rewards_api::GearStakingRewardsApi<Block>
    for Runtime {
    fn inflation_info() -> pallet_gear_staking_rewards::InflationInfo {
        StakingRewards::inflation_info()
    }
}
impl pallet_gear_builtin_rpc_runtime_api::runtime_decl_for_gear_builtin_api::GearBuiltinApi<Block>
    for Runtime {
    fn query_actor_id(builtin_id: u64) -> H256 {
        GearBuiltin::generate_actor_id(builtin_id).into_bytes().into()
    }
}
impl sp_api::runtime_decl_for_core::Core<Block> for Runtime {
    fn version() -> RuntimeVersion { VERSION }
    fn execute_block(block: Block) { Executive::execute_block(block); }
    fn initialize_block(header: &<Block as BlockT>::Header) {
        Executive::initialize_block(header)
    }
}
impl sp_api::runtime_decl_for_metadata::Metadata<Block> for Runtime {
    fn metadata() -> OpaqueMetadata {
        OpaqueMetadata::new(Runtime::metadata().into())
    }
    fn metadata_at_version(version: u32) -> Option<OpaqueMetadata> {
        Runtime::metadata_at_version(version)
    }
    fn metadata_versions() -> sp_std::vec::Vec<u32> {
        Runtime::metadata_versions()
    }
}
impl sp_block_builder::runtime_decl_for_block_builder::BlockBuilder<Block> for
    Runtime {
    fn apply_extrinsic(extrinsic: <Block as BlockT>::Extrinsic)
        -> ApplyExtrinsicResult {
        Executive::apply_extrinsic(extrinsic)
    }
    fn finalize_block() -> <Block as BlockT>::Header {
        Executive::finalize_block()
    }
    fn inherent_extrinsics(data: sp_inherents::InherentData)
        -> Vec<<Block as BlockT>::Extrinsic> {
        data.create_extrinsics()
    }
    fn check_inherents(block: Block, data: sp_inherents::InherentData)
        -> sp_inherents::CheckInherentsResult {
        data.check_extrinsics(&block)
    }
}
impl sp_transaction_pool::runtime_api::runtime_decl_for_tagged_transaction_queue::TaggedTransactionQueue<Block>
    for Runtime {
    fn validate_transaction(source: TransactionSource,
        tx: <Block as BlockT>::Extrinsic, block_hash: <Block as BlockT>::Hash)
        -> TransactionValidity {
        Executive::validate_transaction(source, tx, block_hash)
    }
}
impl sp_offchain::runtime_decl_for_offchain_worker_api::OffchainWorkerApi<Block>
    for Runtime {
    fn offchain_worker(header: &<Block as BlockT>::Header) {
        Executive::offchain_worker(header)
    }
}
impl sp_session::runtime_decl_for_session_keys::SessionKeys<Block> for Runtime
    {
    fn generate_session_keys(seed: Option<Vec<u8>>) -> Vec<u8> {
        SessionKeys::generate(seed)
    }
    fn decode_session_keys(encoded: Vec<u8>)
        -> Option<Vec<(Vec<u8>, KeyTypeId)>> {
        SessionKeys::decode_into_raw_public_keys(&encoded)
    }
}
impl fg_primitives::runtime_decl_for_grandpa_api::GrandpaApi<Block> for
    Runtime {
    fn grandpa_authorities() -> GrandpaAuthorityList {
        Grandpa::grandpa_authorities()
    }
    fn current_set_id() -> fg_primitives::SetId { Grandpa::current_set_id() }
    fn submit_report_equivocation_unsigned_extrinsic(_equivocation_proof:
            fg_primitives::EquivocationProof<<Block as BlockT>::Hash,
            NumberFor<Block>>,
        _key_owner_proof: fg_primitives::OpaqueKeyOwnershipProof)
        -> Option<()> {
        None
    }
    fn generate_key_ownership_proof(_set_id: fg_primitives::SetId,
        _authority_id: GrandpaId)
        -> Option<fg_primitives::OpaqueKeyOwnershipProof> {
        None
    }
}
impl frame_system_rpc_runtime_api::runtime_decl_for_account_nonce_api::AccountNonceApi<Block,
    AccountId, Nonce> for Runtime {
    fn account_nonce(account: AccountId) -> Nonce {
        System::account_nonce(account)
    }
}
impl pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_api::TransactionPaymentApi<Block,
    Balance> for Runtime {
    fn query_info(uxt: <Block as BlockT>::Extrinsic, len: u32)
        ->
            pallet_transaction_payment_rpc_runtime_api::RuntimeDispatchInfo<Balance> {
        GearPayment::query_info(uxt, len)
    }
    fn query_fee_details(uxt: <Block as BlockT>::Extrinsic, len: u32)
        -> pallet_transaction_payment::FeeDetails<Balance> {
        GearPayment::query_fee_details(uxt, len)
    }
    fn query_weight_to_fee(weight: Weight) -> Balance {
        TransactionPayment::weight_to_fee(weight)
    }
    fn query_length_to_fee(length: u32) -> Balance {
        TransactionPayment::length_to_fee(length)
    }
}
impl pallet_gear_rpc_runtime_api::runtime_decl_for_gear_api::GearApi<Block>
    for Runtime {
    fn calculate_reply_for_handle(origin: H256, destination: H256,
        payload: Vec<u8>, gas_limit: u64, value: u128,
        allowance_multiplier: u64)
        -> Result<pallet_gear::ReplyInfo, Vec<u8>> {
        Gear::calculate_reply_for_handle(origin, destination, payload,
            gas_limit, value, allowance_multiplier)
    }
    fn calculate_gas_info(account_id: H256, kind: HandleKind,
        payload: Vec<u8>, value: u128, allow_other_panics: bool,
        initial_gas: Option<u64>, gas_allowance: Option<u64>)
        -> Result<pallet_gear::GasInfo, Vec<u8>> {
        Gear::calculate_gas_info(account_id, kind, payload, value,
            allow_other_panics, initial_gas, gas_allowance)
    }
    fn gear_run_extrinsic(max_gas: Option<u64>)
        -> <Block as BlockT>::Extrinsic {
        UncheckedExtrinsic::new_unsigned(pallet_gear::Call::run {
                        max_gas,
                    }.into()).into()
    }
    fn read_state(program_id: H256, payload: Vec<u8>,
        gas_allowance: Option<u64>) -> Result<Vec<u8>, Vec<u8>> {
        Gear::read_state(program_id, payload, gas_allowance)
    }
    fn read_state_using_wasm(program_id: H256, payload: Vec<u8>,
        fn_name: Vec<u8>, wasm: Vec<u8>, argument: Option<Vec<u8>>,
        gas_allowance: Option<u64>) -> Result<Vec<u8>, Vec<u8>> {
        Gear::read_state_using_wasm(program_id, payload, fn_name, wasm,
            argument, gas_allowance)
    }
    fn read_metahash(program_id: H256, gas_allowance: Option<u64>)
        -> Result<H256, Vec<u8>> {
        Gear::read_metahash(program_id, gas_allowance)
    }
}
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    sp_consensus_babe::BabeApi<__SrApiBlock__> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashingFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send,
    sp_consensus_babe::BabeConfiguration: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    sp_consensus_babe::Slot: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    sp_consensus_babe::Epoch: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    sp_consensus_babe::Epoch: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    sp_consensus_babe::Slot: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    sp_consensus_babe::AuthorityId: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    Option<sp_consensus_babe::OpaqueKeyOwnershipProof>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    sp_consensus_babe::EquivocationProof<<__SrApiBlock__ as
    BlockT>::Header>: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    sp_consensus_babe::OpaqueKeyOwnershipProof: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Option<()>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        let transaction_depth =
            *std::cell::RefCell::borrow(&self.transaction_depth);
        if transaction_depth == 0 { self.start_transaction(); }
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            match &mut *std::cell::RefCell::borrow_mut(&self.extensions_generated_for)
                                {
                                Some(generated_for) => {
                                    if *generated_for != at {
                                            return std::result::Result::Err(sp_api::ApiError::UsingSameInstanceForDifferentBlocks)
                                        }
                                }
                                generated_for @ None => {
                                    sp_api::CallApiAt::<__SrApiBlock__>::initialize_extensions(self.call,
                                            at, &mut std::cell::RefCell::borrow_mut(&self.extensions))?;
                                    *generated_for = Some(at);
                                }
                            }
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    call_context: self.call_context,
                                    recorder: &self.recorder,
                                    extensions: &self.extensions,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        if transaction_depth == 0 {
                self.commit_or_rollback_transaction(std::result::Result::is_ok(&res));
            }
        res
    }
}
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    pallet_transaction_payment_rpc_runtime_api::TransactionPaymentCallApi<__SrApiBlock__,
    Balance, RuntimeCall> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashingFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send, RuntimeCall: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u32: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeDispatchInfo<Balance>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, RuntimeCall: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u32: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, FeeDetails<Balance>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Weight: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Balance: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u32: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Balance: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        let transaction_depth =
            *std::cell::RefCell::borrow(&self.transaction_depth);
        if transaction_depth == 0 { self.start_transaction(); }
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            match &mut *std::cell::RefCell::borrow_mut(&self.extensions_generated_for)
                                {
                                Some(generated_for) => {
                                    if *generated_for != at {
                                            return std::result::Result::Err(sp_api::ApiError::UsingSameInstanceForDifferentBlocks)
                                        }
                                }
                                generated_for @ None => {
                                    sp_api::CallApiAt::<__SrApiBlock__>::initialize_extensions(self.call,
                                            at, &mut std::cell::RefCell::borrow_mut(&self.extensions))?;
                                    *generated_for = Some(at);
                                }
                            }
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    call_context: self.call_context,
                                    recorder: &self.recorder,
                                    extensions: &self.extensions,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        if transaction_depth == 0 {
                self.commit_or_rollback_transaction(std::result::Result::is_ok(&res));
            }
        res
    }
}
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    pallet_nomination_pools_runtime_api::NominationPoolsApi<__SrApiBlock__,
    AccountId, Balance> for RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall>
    where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashingFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send, AccountId: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Balance: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    pallet_nomination_pools::PoolId: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Balance: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Balance: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    pallet_nomination_pools::PoolId: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Balance: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Balance: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        let transaction_depth =
            *std::cell::RefCell::borrow(&self.transaction_depth);
        if transaction_depth == 0 { self.start_transaction(); }
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            match &mut *std::cell::RefCell::borrow_mut(&self.extensions_generated_for)
                                {
                                Some(generated_for) => {
                                    if *generated_for != at {
                                            return std::result::Result::Err(sp_api::ApiError::UsingSameInstanceForDifferentBlocks)
                                        }
                                }
                                generated_for @ None => {
                                    sp_api::CallApiAt::<__SrApiBlock__>::initialize_extensions(self.call,
                                            at, &mut std::cell::RefCell::borrow_mut(&self.extensions))?;
                                    *generated_for = Some(at);
                                }
                            }
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    call_context: self.call_context,
                                    recorder: &self.recorder,
                                    extensions: &self.extensions,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        if transaction_depth == 0 {
                self.commit_or_rollback_transaction(std::result::Result::is_ok(&res));
            }
        res
    }
}
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    pallet_staking_runtime_api::StakingApi<__SrApiBlock__, Balance> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashingFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send, Balance: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u32: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        let transaction_depth =
            *std::cell::RefCell::borrow(&self.transaction_depth);
        if transaction_depth == 0 { self.start_transaction(); }
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            match &mut *std::cell::RefCell::borrow_mut(&self.extensions_generated_for)
                                {
                                Some(generated_for) => {
                                    if *generated_for != at {
                                            return std::result::Result::Err(sp_api::ApiError::UsingSameInstanceForDifferentBlocks)
                                        }
                                }
                                generated_for @ None => {
                                    sp_api::CallApiAt::<__SrApiBlock__>::initialize_extensions(self.call,
                                            at, &mut std::cell::RefCell::borrow_mut(&self.extensions))?;
                                    *generated_for = Some(at);
                                }
                            }
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    call_context: self.call_context,
                                    recorder: &self.recorder,
                                    extensions: &self.extensions,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        if transaction_depth == 0 {
                self.commit_or_rollback_transaction(std::result::Result::is_ok(&res));
            }
        res
    }
}
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    pallet_gear_staking_rewards_rpc_runtime_api::GearStakingRewardsApi<__SrApiBlock__>
    for RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashingFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send,
    pallet_gear_staking_rewards::InflationInfo: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        let transaction_depth =
            *std::cell::RefCell::borrow(&self.transaction_depth);
        if transaction_depth == 0 { self.start_transaction(); }
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            match &mut *std::cell::RefCell::borrow_mut(&self.extensions_generated_for)
                                {
                                Some(generated_for) => {
                                    if *generated_for != at {
                                            return std::result::Result::Err(sp_api::ApiError::UsingSameInstanceForDifferentBlocks)
                                        }
                                }
                                generated_for @ None => {
                                    sp_api::CallApiAt::<__SrApiBlock__>::initialize_extensions(self.call,
                                            at, &mut std::cell::RefCell::borrow_mut(&self.extensions))?;
                                    *generated_for = Some(at);
                                }
                            }
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    call_context: self.call_context,
                                    recorder: &self.recorder,
                                    extensions: &self.extensions,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        if transaction_depth == 0 {
                self.commit_or_rollback_transaction(std::result::Result::is_ok(&res));
            }
        res
    }
}
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    pallet_gear_builtin_rpc_runtime_api::GearBuiltinApi<__SrApiBlock__> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashingFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send, u64: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, H256: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        let transaction_depth =
            *std::cell::RefCell::borrow(&self.transaction_depth);
        if transaction_depth == 0 { self.start_transaction(); }
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            match &mut *std::cell::RefCell::borrow_mut(&self.extensions_generated_for)
                                {
                                Some(generated_for) => {
                                    if *generated_for != at {
                                            return std::result::Result::Err(sp_api::ApiError::UsingSameInstanceForDifferentBlocks)
                                        }
                                }
                                generated_for @ None => {
                                    sp_api::CallApiAt::<__SrApiBlock__>::initialize_extensions(self.call,
                                            at, &mut std::cell::RefCell::borrow_mut(&self.extensions))?;
                                    *generated_for = Some(at);
                                }
                            }
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    call_context: self.call_context,
                                    recorder: &self.recorder,
                                    extensions: &self.extensions,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        if transaction_depth == 0 {
                self.commit_or_rollback_transaction(std::result::Result::is_ok(&res));
            }
        res
    }
}
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    sp_api::Core<__SrApiBlock__> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashingFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send,
    RuntimeVersion: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    __SrApiBlock__: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    <__SrApiBlock__ as BlockT>::Header: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        let transaction_depth =
            *std::cell::RefCell::borrow(&self.transaction_depth);
        if transaction_depth == 0 { self.start_transaction(); }
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            match &mut *std::cell::RefCell::borrow_mut(&self.extensions_generated_for)
                                {
                                Some(generated_for) => {
                                    if *generated_for != at {
                                            return std::result::Result::Err(sp_api::ApiError::UsingSameInstanceForDifferentBlocks)
                                        }
                                }
                                generated_for @ None => {
                                    sp_api::CallApiAt::<__SrApiBlock__>::initialize_extensions(self.call,
                                            at, &mut std::cell::RefCell::borrow_mut(&self.extensions))?;
                                    *generated_for = Some(at);
                                }
                            }
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    call_context: self.call_context,
                                    recorder: &self.recorder,
                                    extensions: &self.extensions,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        if transaction_depth == 0 {
                self.commit_or_rollback_transaction(std::result::Result::is_ok(&res));
            }
        res
    }
}
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    sp_api::Metadata<__SrApiBlock__> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashingFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send,
    OpaqueMetadata: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    u32: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    Option<OpaqueMetadata>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, sp_std::vec::Vec<u32>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        let transaction_depth =
            *std::cell::RefCell::borrow(&self.transaction_depth);
        if transaction_depth == 0 { self.start_transaction(); }
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            match &mut *std::cell::RefCell::borrow_mut(&self.extensions_generated_for)
                                {
                                Some(generated_for) => {
                                    if *generated_for != at {
                                            return std::result::Result::Err(sp_api::ApiError::UsingSameInstanceForDifferentBlocks)
                                        }
                                }
                                generated_for @ None => {
                                    sp_api::CallApiAt::<__SrApiBlock__>::initialize_extensions(self.call,
                                            at, &mut std::cell::RefCell::borrow_mut(&self.extensions))?;
                                    *generated_for = Some(at);
                                }
                            }
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    call_context: self.call_context,
                                    recorder: &self.recorder,
                                    extensions: &self.extensions,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        if transaction_depth == 0 {
                self.commit_or_rollback_transaction(std::result::Result::is_ok(&res));
            }
        res
    }
}
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    sp_block_builder::BlockBuilder<__SrApiBlock__> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashingFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send,
    <__SrApiBlock__ as BlockT>::Extrinsic: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, ApplyExtrinsicResult: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    <__SrApiBlock__ as BlockT>::Header: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    sp_inherents::InherentData: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    Vec<<__SrApiBlock__ as BlockT>::Extrinsic>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, __SrApiBlock__: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    sp_inherents::InherentData: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    sp_inherents::CheckInherentsResult: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        let transaction_depth =
            *std::cell::RefCell::borrow(&self.transaction_depth);
        if transaction_depth == 0 { self.start_transaction(); }
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            match &mut *std::cell::RefCell::borrow_mut(&self.extensions_generated_for)
                                {
                                Some(generated_for) => {
                                    if *generated_for != at {
                                            return std::result::Result::Err(sp_api::ApiError::UsingSameInstanceForDifferentBlocks)
                                        }
                                }
                                generated_for @ None => {
                                    sp_api::CallApiAt::<__SrApiBlock__>::initialize_extensions(self.call,
                                            at, &mut std::cell::RefCell::borrow_mut(&self.extensions))?;
                                    *generated_for = Some(at);
                                }
                            }
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    call_context: self.call_context,
                                    recorder: &self.recorder,
                                    extensions: &self.extensions,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        if transaction_depth == 0 {
                self.commit_or_rollback_transaction(std::result::Result::is_ok(&res));
            }
        res
    }
}
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    sp_transaction_pool::runtime_api::TaggedTransactionQueue<__SrApiBlock__>
    for RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashingFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send,
    TransactionSource: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    <__SrApiBlock__ as BlockT>::Extrinsic: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    <__SrApiBlock__ as BlockT>::Hash: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, TransactionValidity: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        let transaction_depth =
            *std::cell::RefCell::borrow(&self.transaction_depth);
        if transaction_depth == 0 { self.start_transaction(); }
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            match &mut *std::cell::RefCell::borrow_mut(&self.extensions_generated_for)
                                {
                                Some(generated_for) => {
                                    if *generated_for != at {
                                            return std::result::Result::Err(sp_api::ApiError::UsingSameInstanceForDifferentBlocks)
                                        }
                                }
                                generated_for @ None => {
                                    sp_api::CallApiAt::<__SrApiBlock__>::initialize_extensions(self.call,
                                            at, &mut std::cell::RefCell::borrow_mut(&self.extensions))?;
                                    *generated_for = Some(at);
                                }
                            }
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    call_context: self.call_context,
                                    recorder: &self.recorder,
                                    extensions: &self.extensions,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        if transaction_depth == 0 {
                self.commit_or_rollback_transaction(std::result::Result::is_ok(&res));
            }
        res
    }
}
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    sp_offchain::OffchainWorkerApi<__SrApiBlock__> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashingFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send,
    <__SrApiBlock__ as BlockT>::Header: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        let transaction_depth =
            *std::cell::RefCell::borrow(&self.transaction_depth);
        if transaction_depth == 0 { self.start_transaction(); }
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            match &mut *std::cell::RefCell::borrow_mut(&self.extensions_generated_for)
                                {
                                Some(generated_for) => {
                                    if *generated_for != at {
                                            return std::result::Result::Err(sp_api::ApiError::UsingSameInstanceForDifferentBlocks)
                                        }
                                }
                                generated_for @ None => {
                                    sp_api::CallApiAt::<__SrApiBlock__>::initialize_extensions(self.call,
                                            at, &mut std::cell::RefCell::borrow_mut(&self.extensions))?;
                                    *generated_for = Some(at);
                                }
                            }
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    call_context: self.call_context,
                                    recorder: &self.recorder,
                                    extensions: &self.extensions,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        if transaction_depth == 0 {
                self.commit_or_rollback_transaction(std::result::Result::is_ok(&res));
            }
        res
    }
}
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    sp_session::SessionKeys<__SrApiBlock__> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashingFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send,
    Option<Vec<u8>>: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    Vec<u8>: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    Vec<u8>: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    Option<Vec<(Vec<u8>, KeyTypeId)>>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        let transaction_depth =
            *std::cell::RefCell::borrow(&self.transaction_depth);
        if transaction_depth == 0 { self.start_transaction(); }
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            match &mut *std::cell::RefCell::borrow_mut(&self.extensions_generated_for)
                                {
                                Some(generated_for) => {
                                    if *generated_for != at {
                                            return std::result::Result::Err(sp_api::ApiError::UsingSameInstanceForDifferentBlocks)
                                        }
                                }
                                generated_for @ None => {
                                    sp_api::CallApiAt::<__SrApiBlock__>::initialize_extensions(self.call,
                                            at, &mut std::cell::RefCell::borrow_mut(&self.extensions))?;
                                    *generated_for = Some(at);
                                }
                            }
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    call_context: self.call_context,
                                    recorder: &self.recorder,
                                    extensions: &self.extensions,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        if transaction_depth == 0 {
                self.commit_or_rollback_transaction(std::result::Result::is_ok(&res));
            }
        res
    }
}
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    fg_primitives::GrandpaApi<__SrApiBlock__> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashingFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send,
    GrandpaAuthorityList: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    fg_primitives::SetId: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    fg_primitives::EquivocationProof<<__SrApiBlock__ as BlockT>::Hash,
    NumberFor<__SrApiBlock__>>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    fg_primitives::OpaqueKeyOwnershipProof: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Option<()>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, fg_primitives::SetId: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, GrandpaId: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    Option<fg_primitives::OpaqueKeyOwnershipProof>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        let transaction_depth =
            *std::cell::RefCell::borrow(&self.transaction_depth);
        if transaction_depth == 0 { self.start_transaction(); }
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            match &mut *std::cell::RefCell::borrow_mut(&self.extensions_generated_for)
                                {
                                Some(generated_for) => {
                                    if *generated_for != at {
                                            return std::result::Result::Err(sp_api::ApiError::UsingSameInstanceForDifferentBlocks)
                                        }
                                }
                                generated_for @ None => {
                                    sp_api::CallApiAt::<__SrApiBlock__>::initialize_extensions(self.call,
                                            at, &mut std::cell::RefCell::borrow_mut(&self.extensions))?;
                                    *generated_for = Some(at);
                                }
                            }
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    call_context: self.call_context,
                                    recorder: &self.recorder,
                                    extensions: &self.extensions,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        if transaction_depth == 0 {
                self.commit_or_rollback_transaction(std::result::Result::is_ok(&res));
            }
        res
    }
}
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    frame_system_rpc_runtime_api::AccountNonceApi<__SrApiBlock__, AccountId,
    Nonce> for RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashingFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send, AccountId: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Nonce: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        let transaction_depth =
            *std::cell::RefCell::borrow(&self.transaction_depth);
        if transaction_depth == 0 { self.start_transaction(); }
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            match &mut *std::cell::RefCell::borrow_mut(&self.extensions_generated_for)
                                {
                                Some(generated_for) => {
                                    if *generated_for != at {
                                            return std::result::Result::Err(sp_api::ApiError::UsingSameInstanceForDifferentBlocks)
                                        }
                                }
                                generated_for @ None => {
                                    sp_api::CallApiAt::<__SrApiBlock__>::initialize_extensions(self.call,
                                            at, &mut std::cell::RefCell::borrow_mut(&self.extensions))?;
                                    *generated_for = Some(at);
                                }
                            }
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    call_context: self.call_context,
                                    recorder: &self.recorder,
                                    extensions: &self.extensions,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        if transaction_depth == 0 {
                self.commit_or_rollback_transaction(std::result::Result::is_ok(&res));
            }
        res
    }
}
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    pallet_transaction_payment_rpc_runtime_api::TransactionPaymentApi<__SrApiBlock__,
    Balance> for RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashingFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send,
    <__SrApiBlock__ as BlockT>::Extrinsic: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u32: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    pallet_transaction_payment_rpc_runtime_api::RuntimeDispatchInfo<Balance>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    <__SrApiBlock__ as BlockT>::Extrinsic: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u32: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    pallet_transaction_payment::FeeDetails<Balance>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Weight: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Balance: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u32: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Balance: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        let transaction_depth =
            *std::cell::RefCell::borrow(&self.transaction_depth);
        if transaction_depth == 0 { self.start_transaction(); }
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            match &mut *std::cell::RefCell::borrow_mut(&self.extensions_generated_for)
                                {
                                Some(generated_for) => {
                                    if *generated_for != at {
                                            return std::result::Result::Err(sp_api::ApiError::UsingSameInstanceForDifferentBlocks)
                                        }
                                }
                                generated_for @ None => {
                                    sp_api::CallApiAt::<__SrApiBlock__>::initialize_extensions(self.call,
                                            at, &mut std::cell::RefCell::borrow_mut(&self.extensions))?;
                                    *generated_for = Some(at);
                                }
                            }
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    call_context: self.call_context,
                                    recorder: &self.recorder,
                                    extensions: &self.extensions,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        if transaction_depth == 0 {
                self.commit_or_rollback_transaction(std::result::Result::is_ok(&res));
            }
        res
    }
}
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    pallet_gear_rpc_runtime_api::GearApi<__SrApiBlock__> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashingFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send, H256: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, H256: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Vec<u8>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u64: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u128: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u64: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    Result<pallet_gear::ReplyInfo, Vec<u8>>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, H256: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, HandleKind: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Vec<u8>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u128: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, bool: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Option<u64>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Option<u64>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    Result<pallet_gear::GasInfo, Vec<u8>>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Option<u64>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    <__SrApiBlock__ as BlockT>::Extrinsic: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, H256: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Vec<u8>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Option<u64>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    Result<Vec<u8>, Vec<u8>>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, H256: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Vec<u8>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Vec<u8>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Vec<u8>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Option<Vec<u8>>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Option<u64>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    Result<Vec<u8>, Vec<u8>>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, H256: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Option<u64>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Result<H256, Vec<u8>>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        let transaction_depth =
            *std::cell::RefCell::borrow(&self.transaction_depth);
        if transaction_depth == 0 { self.start_transaction(); }
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            match &mut *std::cell::RefCell::borrow_mut(&self.extensions_generated_for)
                                {
                                Some(generated_for) => {
                                    if *generated_for != at {
                                            return std::result::Result::Err(sp_api::ApiError::UsingSameInstanceForDifferentBlocks)
                                        }
                                }
                                generated_for @ None => {
                                    sp_api::CallApiAt::<__SrApiBlock__>::initialize_extensions(self.call,
                                            at, &mut std::cell::RefCell::borrow_mut(&self.extensions))?;
                                    *generated_for = Some(at);
                                }
                            }
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    call_context: self.call_context,
                                    recorder: &self.recorder,
                                    extensions: &self.extensions,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        if transaction_depth == 0 {
                self.commit_or_rollback_transaction(std::result::Result::is_ok(&res));
            }
        res
    }
}
const RUNTIME_API_VERSIONS: sp_api::ApisVec =
    ::sp_version::sp_std::borrow::Cow::Borrowed(&[(sp_consensus_babe::runtime_decl_for_babe_api::ID,
                        sp_consensus_babe::runtime_decl_for_babe_api::VERSION),
                    (pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_call_api::ID,
                        pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_call_api::VERSION),
                    (pallet_nomination_pools_runtime_api::runtime_decl_for_nomination_pools_api::ID,
                        pallet_nomination_pools_runtime_api::runtime_decl_for_nomination_pools_api::VERSION),
                    (pallet_staking_runtime_api::runtime_decl_for_staking_api::ID,
                        pallet_staking_runtime_api::runtime_decl_for_staking_api::VERSION),
                    (pallet_gear_staking_rewards_rpc_runtime_api::runtime_decl_for_gear_staking_rewards_api::ID,
                        pallet_gear_staking_rewards_rpc_runtime_api::runtime_decl_for_gear_staking_rewards_api::VERSION),
                    (pallet_gear_builtin_rpc_runtime_api::runtime_decl_for_gear_builtin_api::ID,
                        pallet_gear_builtin_rpc_runtime_api::runtime_decl_for_gear_builtin_api::VERSION),
                    (sp_api::runtime_decl_for_core::ID,
                        sp_api::runtime_decl_for_core::VERSION),
                    (sp_api::runtime_decl_for_metadata::ID,
                        sp_api::runtime_decl_for_metadata::VERSION),
                    (sp_block_builder::runtime_decl_for_block_builder::ID,
                        sp_block_builder::runtime_decl_for_block_builder::VERSION),
                    (sp_transaction_pool::runtime_api::runtime_decl_for_tagged_transaction_queue::ID,
                        sp_transaction_pool::runtime_api::runtime_decl_for_tagged_transaction_queue::VERSION),
                    (sp_offchain::runtime_decl_for_offchain_worker_api::ID,
                        sp_offchain::runtime_decl_for_offchain_worker_api::VERSION),
                    (sp_session::runtime_decl_for_session_keys::ID,
                        sp_session::runtime_decl_for_session_keys::VERSION),
                    (fg_primitives::runtime_decl_for_grandpa_api::ID,
                        fg_primitives::runtime_decl_for_grandpa_api::VERSION),
                    (frame_system_rpc_runtime_api::runtime_decl_for_account_nonce_api::ID,
                        frame_system_rpc_runtime_api::runtime_decl_for_account_nonce_api::VERSION),
                    (pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_api::ID,
                        pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_api::VERSION),
                    (pallet_gear_rpc_runtime_api::runtime_decl_for_gear_api::ID,
                        pallet_gear_rpc_runtime_api::runtime_decl_for_gear_api::VERSION)]);
#[doc(hidden)]
trait InternalImplRuntimeApis {
    #[inline(always)]
    fn runtime_metadata(&self)
        -> sp_api::vec::Vec<sp_api::metadata_ir::RuntimeApiMetadataIR> {
        <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([sp_consensus_babe::runtime_decl_for_babe_api::runtime_metadata::<Block>(),
                        pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_call_api::runtime_metadata::<Block,
                                Balance, RuntimeCall>(),
                        pallet_nomination_pools_runtime_api::runtime_decl_for_nomination_pools_api::runtime_metadata::<Block,
                                AccountId, Balance>(),
                        pallet_staking_runtime_api::runtime_decl_for_staking_api::runtime_metadata::<Block,
                                Balance>(),
                        pallet_gear_staking_rewards_rpc_runtime_api::runtime_decl_for_gear_staking_rewards_api::runtime_metadata::<Block>(),
                        pallet_gear_builtin_rpc_runtime_api::runtime_decl_for_gear_builtin_api::runtime_metadata::<Block>(),
                        sp_api::runtime_decl_for_core::runtime_metadata::<Block>(),
                        sp_api::runtime_decl_for_metadata::runtime_metadata::<Block>(),
                        sp_block_builder::runtime_decl_for_block_builder::runtime_metadata::<Block>(),
                        sp_transaction_pool::runtime_api::runtime_decl_for_tagged_transaction_queue::runtime_metadata::<Block>(),
                        sp_offchain::runtime_decl_for_offchain_worker_api::runtime_metadata::<Block>(),
                        sp_session::runtime_decl_for_session_keys::runtime_metadata::<Block>(),
                        fg_primitives::runtime_decl_for_grandpa_api::runtime_metadata::<Block>(),
                        frame_system_rpc_runtime_api::runtime_decl_for_account_nonce_api::runtime_metadata::<Block,
                                AccountId, Nonce>(),
                        pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_api::runtime_metadata::<Block,
                                Balance>(),
                        pallet_gear_rpc_runtime_api::runtime_decl_for_gear_api::runtime_metadata::<Block>()]))
    }
}
#[doc(hidden)]
impl InternalImplRuntimeApis for Runtime { }
pub mod api {
    use super::*;
    pub fn dispatch(method: &str, mut _sp_api_input_data_: &[u8])
        -> Option<Vec<u8>> {
        match method {
            "BabeApi_configuration" =>
                Some(sp_api::Encode::encode(&{
                                if !_sp_api_input_data_.is_empty() {
                                        {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: expected no parameters, but input buffer is not empty.",
                                                    "configuration"));
                                        };
                                    }

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_consensus_babe::runtime_decl_for_babe_api::BabeApi<Block>>::configuration()
                            })),
            "BabeApi_current_epoch_start" =>
                Some(sp_api::Encode::encode(&{
                                if !_sp_api_input_data_.is_empty() {
                                        {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: expected no parameters, but input buffer is not empty.",
                                                    "current_epoch_start"));
                                        };
                                    }

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_consensus_babe::runtime_decl_for_babe_api::BabeApi<Block>>::current_epoch_start()
                            })),
            "BabeApi_current_epoch" =>
                Some(sp_api::Encode::encode(&{
                                if !_sp_api_input_data_.is_empty() {
                                        {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: expected no parameters, but input buffer is not empty.",
                                                    "current_epoch"));
                                        };
                                    }

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_consensus_babe::runtime_decl_for_babe_api::BabeApi<Block>>::current_epoch()
                            })),
            "BabeApi_next_epoch" =>
                Some(sp_api::Encode::encode(&{
                                if !_sp_api_input_data_.is_empty() {
                                        {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: expected no parameters, but input buffer is not empty.",
                                                    "next_epoch"));
                                        };
                                    }

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_consensus_babe::runtime_decl_for_babe_api::BabeApi<Block>>::next_epoch()
                            })),
            "BabeApi_generate_key_ownership_proof" =>
                Some(sp_api::Encode::encode(&{
                                let (_slot, authority_id):
                                        (sp_consensus_babe::Slot, sp_consensus_babe::AuthorityId) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "generate_key_ownership_proof", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_consensus_babe::runtime_decl_for_babe_api::BabeApi<Block>>::generate_key_ownership_proof(_slot,
                                    authority_id)
                            })),
            "BabeApi_submit_report_equivocation_unsigned_extrinsic" =>
                Some(sp_api::Encode::encode(&{
                                let (equivocation_proof, key_owner_proof):
                                        (sp_consensus_babe::EquivocationProof<<Block as
                                        BlockT>::Header>,
                                        sp_consensus_babe::OpaqueKeyOwnershipProof) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "submit_report_equivocation_unsigned_extrinsic", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_consensus_babe::runtime_decl_for_babe_api::BabeApi<Block>>::submit_report_equivocation_unsigned_extrinsic(equivocation_proof,
                                    key_owner_proof)
                            })),
            "TransactionPaymentCallApi_query_call_info" =>
                Some(sp_api::Encode::encode(&{
                                let (call, len): (RuntimeCall, u32) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "query_call_info", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_call_api::TransactionPaymentCallApi<Block,
                                        Balance, RuntimeCall>>::query_call_info(call, len)
                            })),
            "TransactionPaymentCallApi_query_call_fee_details" =>
                Some(sp_api::Encode::encode(&{
                                let (call, len): (RuntimeCall, u32) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "query_call_fee_details", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_call_api::TransactionPaymentCallApi<Block,
                                        Balance, RuntimeCall>>::query_call_fee_details(call, len)
                            })),
            "TransactionPaymentCallApi_query_weight_to_fee" =>
                Some(sp_api::Encode::encode(&{
                                let weight: Weight =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "query_weight_to_fee", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_call_api::TransactionPaymentCallApi<Block,
                                        Balance, RuntimeCall>>::query_weight_to_fee(weight)
                            })),
            "TransactionPaymentCallApi_query_length_to_fee" =>
                Some(sp_api::Encode::encode(&{
                                let length: u32 =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "query_length_to_fee", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_call_api::TransactionPaymentCallApi<Block,
                                        Balance, RuntimeCall>>::query_length_to_fee(length)
                            })),
            "NominationPoolsApi_pending_rewards" =>
                Some(sp_api::Encode::encode(&{
                                let member: AccountId =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "pending_rewards", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_nomination_pools_runtime_api::runtime_decl_for_nomination_pools_api::NominationPoolsApi<Block,
                                        AccountId, Balance>>::pending_rewards(member)
                            })),
            "NominationPoolsApi_points_to_balance" =>
                Some(sp_api::Encode::encode(&{
                                let (pool_id, points):
                                        (pallet_nomination_pools::PoolId, Balance) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "points_to_balance", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_nomination_pools_runtime_api::runtime_decl_for_nomination_pools_api::NominationPoolsApi<Block,
                                        AccountId, Balance>>::points_to_balance(pool_id, points)
                            })),
            "NominationPoolsApi_balance_to_points" =>
                Some(sp_api::Encode::encode(&{
                                let (pool_id, new_funds):
                                        (pallet_nomination_pools::PoolId, Balance) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "balance_to_points", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_nomination_pools_runtime_api::runtime_decl_for_nomination_pools_api::NominationPoolsApi<Block,
                                        AccountId, Balance>>::balance_to_points(pool_id, new_funds)
                            })),
            "StakingApi_nominations_quota" =>
                Some(sp_api::Encode::encode(&{
                                let balance: Balance =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "nominations_quota", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_staking_runtime_api::runtime_decl_for_staking_api::StakingApi<Block,
                                        Balance>>::nominations_quota(balance)
                            })),
            "GearStakingRewardsApi_inflation_info" =>
                Some(sp_api::Encode::encode(&{
                                if !_sp_api_input_data_.is_empty() {
                                        {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: expected no parameters, but input buffer is not empty.",
                                                    "inflation_info"));
                                        };
                                    }

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_gear_staking_rewards_rpc_runtime_api::runtime_decl_for_gear_staking_rewards_api::GearStakingRewardsApi<Block>>::inflation_info()
                            })),
            "GearBuiltinApi_query_actor_id" =>
                Some(sp_api::Encode::encode(&{
                                let builtin_id: u64 =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "query_actor_id", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_gear_builtin_rpc_runtime_api::runtime_decl_for_gear_builtin_api::GearBuiltinApi<Block>>::query_actor_id(builtin_id)
                            })),
            "Core_version" =>
                Some(sp_api::Encode::encode(&{
                                if !_sp_api_input_data_.is_empty() {
                                        {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: expected no parameters, but input buffer is not empty.",
                                                    "version"));
                                        };
                                    }

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_api::runtime_decl_for_core::Core<Block>>::version()
                            })),
            "Core_execute_block" =>
                Some(sp_api::Encode::encode(&{
                                let block: Block =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "execute_block", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_api::runtime_decl_for_core::Core<Block>>::execute_block(block)
                            })),
            "Core_initialize_block" =>
                Some(sp_api::Encode::encode(&{
                                let header: <Block as BlockT>::Header =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "initialize_block", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_api::runtime_decl_for_core::Core<Block>>::initialize_block(&header)
                            })),
            "Metadata_metadata" =>
                Some(sp_api::Encode::encode(&{
                                if !_sp_api_input_data_.is_empty() {
                                        {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: expected no parameters, but input buffer is not empty.",
                                                    "metadata"));
                                        };
                                    }

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_api::runtime_decl_for_metadata::Metadata<Block>>::metadata()
                            })),
            "Metadata_metadata_at_version" =>
                Some(sp_api::Encode::encode(&{
                                let version: u32 =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "metadata_at_version", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_api::runtime_decl_for_metadata::Metadata<Block>>::metadata_at_version(version)
                            })),
            "Metadata_metadata_versions" =>
                Some(sp_api::Encode::encode(&{
                                if !_sp_api_input_data_.is_empty() {
                                        {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: expected no parameters, but input buffer is not empty.",
                                                    "metadata_versions"));
                                        };
                                    }

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_api::runtime_decl_for_metadata::Metadata<Block>>::metadata_versions()
                            })),
            "BlockBuilder_apply_extrinsic" =>
                Some(sp_api::Encode::encode(&{
                                let extrinsic: <Block as BlockT>::Extrinsic =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "apply_extrinsic", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_block_builder::runtime_decl_for_block_builder::BlockBuilder<Block>>::apply_extrinsic(extrinsic)
                            })),
            "BlockBuilder_finalize_block" =>
                Some(sp_api::Encode::encode(&{
                                if !_sp_api_input_data_.is_empty() {
                                        {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: expected no parameters, but input buffer is not empty.",
                                                    "finalize_block"));
                                        };
                                    }

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_block_builder::runtime_decl_for_block_builder::BlockBuilder<Block>>::finalize_block()
                            })),
            "BlockBuilder_inherent_extrinsics" =>
                Some(sp_api::Encode::encode(&{
                                let data: sp_inherents::InherentData =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "inherent_extrinsics", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_block_builder::runtime_decl_for_block_builder::BlockBuilder<Block>>::inherent_extrinsics(data)
                            })),
            "BlockBuilder_check_inherents" =>
                Some(sp_api::Encode::encode(&{
                                let (block, data): (Block, sp_inherents::InherentData) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "check_inherents", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_block_builder::runtime_decl_for_block_builder::BlockBuilder<Block>>::check_inherents(block,
                                    data)
                            })),
            "TaggedTransactionQueue_validate_transaction" =>
                Some(sp_api::Encode::encode(&{
                                let (source, tx, block_hash):
                                        (TransactionSource, <Block as BlockT>::Extrinsic,
                                        <Block as BlockT>::Hash) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "validate_transaction", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_transaction_pool::runtime_api::runtime_decl_for_tagged_transaction_queue::TaggedTransactionQueue<Block>>::validate_transaction(source,
                                    tx, block_hash)
                            })),
            "OffchainWorkerApi_offchain_worker" =>
                Some(sp_api::Encode::encode(&{
                                let header: <Block as BlockT>::Header =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "offchain_worker", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_offchain::runtime_decl_for_offchain_worker_api::OffchainWorkerApi<Block>>::offchain_worker(&header)
                            })),
            "SessionKeys_generate_session_keys" =>
                Some(sp_api::Encode::encode(&{
                                let seed: Option<Vec<u8>> =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "generate_session_keys", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_session::runtime_decl_for_session_keys::SessionKeys<Block>>::generate_session_keys(seed)
                            })),
            "SessionKeys_decode_session_keys" =>
                Some(sp_api::Encode::encode(&{
                                let encoded: Vec<u8> =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "decode_session_keys", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_session::runtime_decl_for_session_keys::SessionKeys<Block>>::decode_session_keys(encoded)
                            })),
            "GrandpaApi_grandpa_authorities" =>
                Some(sp_api::Encode::encode(&{
                                if !_sp_api_input_data_.is_empty() {
                                        {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: expected no parameters, but input buffer is not empty.",
                                                    "grandpa_authorities"));
                                        };
                                    }

                                #[allow(deprecated)]
                                <Runtime as
                                        fg_primitives::runtime_decl_for_grandpa_api::GrandpaApi<Block>>::grandpa_authorities()
                            })),
            "GrandpaApi_current_set_id" =>
                Some(sp_api::Encode::encode(&{
                                if !_sp_api_input_data_.is_empty() {
                                        {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: expected no parameters, but input buffer is not empty.",
                                                    "current_set_id"));
                                        };
                                    }

                                #[allow(deprecated)]
                                <Runtime as
                                        fg_primitives::runtime_decl_for_grandpa_api::GrandpaApi<Block>>::current_set_id()
                            })),
            "GrandpaApi_submit_report_equivocation_unsigned_extrinsic" =>
                Some(sp_api::Encode::encode(&{
                                let (_equivocation_proof, _key_owner_proof):
                                        (fg_primitives::EquivocationProof<<Block as BlockT>::Hash,
                                        NumberFor<Block>>, fg_primitives::OpaqueKeyOwnershipProof) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "submit_report_equivocation_unsigned_extrinsic", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        fg_primitives::runtime_decl_for_grandpa_api::GrandpaApi<Block>>::submit_report_equivocation_unsigned_extrinsic(_equivocation_proof,
                                    _key_owner_proof)
                            })),
            "GrandpaApi_generate_key_ownership_proof" =>
                Some(sp_api::Encode::encode(&{
                                let (_set_id, _authority_id):
                                        (fg_primitives::SetId, GrandpaId) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "generate_key_ownership_proof", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        fg_primitives::runtime_decl_for_grandpa_api::GrandpaApi<Block>>::generate_key_ownership_proof(_set_id,
                                    _authority_id)
                            })),
            "AccountNonceApi_account_nonce" =>
                Some(sp_api::Encode::encode(&{
                                let account: AccountId =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "account_nonce", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        frame_system_rpc_runtime_api::runtime_decl_for_account_nonce_api::AccountNonceApi<Block,
                                        AccountId, Nonce>>::account_nonce(account)
                            })),
            "TransactionPaymentApi_query_info" =>
                Some(sp_api::Encode::encode(&{
                                let (uxt, len): (<Block as BlockT>::Extrinsic, u32) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "query_info", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_api::TransactionPaymentApi<Block,
                                        Balance>>::query_info(uxt, len)
                            })),
            "TransactionPaymentApi_query_fee_details" =>
                Some(sp_api::Encode::encode(&{
                                let (uxt, len): (<Block as BlockT>::Extrinsic, u32) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "query_fee_details", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_api::TransactionPaymentApi<Block,
                                        Balance>>::query_fee_details(uxt, len)
                            })),
            "TransactionPaymentApi_query_weight_to_fee" =>
                Some(sp_api::Encode::encode(&{
                                let weight: Weight =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "query_weight_to_fee", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_api::TransactionPaymentApi<Block,
                                        Balance>>::query_weight_to_fee(weight)
                            })),
            "TransactionPaymentApi_query_length_to_fee" =>
                Some(sp_api::Encode::encode(&{
                                let length: u32 =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "query_length_to_fee", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_api::TransactionPaymentApi<Block,
                                        Balance>>::query_length_to_fee(length)
                            })),
            "GearApi_calculate_reply_for_handle" =>
                Some(sp_api::Encode::encode(&{
                                let (origin, destination, payload, gas_limit, value,
                                        allowance_multiplier):
                                        (H256, H256, Vec<u8>, u64, u128, u64) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "calculate_reply_for_handle", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_gear_rpc_runtime_api::runtime_decl_for_gear_api::GearApi<Block>>::calculate_reply_for_handle(origin,
                                    destination, payload, gas_limit, value,
                                    allowance_multiplier)
                            })),
            "GearApi_calculate_gas_info" =>
                Some(sp_api::Encode::encode(&{
                                let (account_id, kind, payload, value, allow_other_panics,
                                        initial_gas, gas_allowance):
                                        (H256, HandleKind, Vec<u8>, u128, bool, Option<u64>,
                                        Option<u64>) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "calculate_gas_info", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_gear_rpc_runtime_api::runtime_decl_for_gear_api::GearApi<Block>>::calculate_gas_info(account_id,
                                    kind, payload, value, allow_other_panics, initial_gas,
                                    gas_allowance)
                            })),
            "GearApi_gear_run_extrinsic" =>
                Some(sp_api::Encode::encode(&{
                                let max_gas: Option<u64> =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "gear_run_extrinsic", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_gear_rpc_runtime_api::runtime_decl_for_gear_api::GearApi<Block>>::gear_run_extrinsic(max_gas)
                            })),
            "GearApi_read_state" =>
                Some(sp_api::Encode::encode(&{
                                let (program_id, payload, gas_allowance):
                                        (H256, Vec<u8>, Option<u64>) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "read_state", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_gear_rpc_runtime_api::runtime_decl_for_gear_api::GearApi<Block>>::read_state(program_id,
                                    payload, gas_allowance)
                            })),
            "GearApi_read_state_using_wasm" =>
                Some(sp_api::Encode::encode(&{
                                let (program_id, payload, fn_name, wasm, argument,
                                        gas_allowance):
                                        (H256, Vec<u8>, Vec<u8>, Vec<u8>, Option<Vec<u8>>,
                                        Option<u64>) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "read_state_using_wasm", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_gear_rpc_runtime_api::runtime_decl_for_gear_api::GearApi<Block>>::read_state_using_wasm(program_id,
                                    payload, fn_name, wasm, argument, gas_allowance)
                            })),
            "GearApi_read_metahash" =>
                Some(sp_api::Encode::encode(&{
                                let (program_id, gas_allowance): (H256, Option<u64>) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) => {
                                            ::core::panicking::panic_fmt(format_args!("Bad input data provided to {0}: {1}",
                                                    "read_metahash", e));
                                        }
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_gear_rpc_runtime_api::runtime_decl_for_gear_api::GearApi<Block>>::read_metahash(program_id,
                                    gas_allowance)
                            })),
            _ => None,
        }
    }
}
#[cfg(any(feature = "std", test))]
impl<B, C> Clone for RuntimeApiImpl<B, C> where B: BlockT, C: CallApiAt<B> {
    fn clone(&self) -> Self {
        Self {
            call: <&C>::clone(&self.call),
            transaction_depth: self.transaction_depth.clone(),
            changes: self.changes.clone(),
            recorder: self.recorder.clone(),
            call_context: self.call_context,
            extensions: Default::default(),
            extensions_generated_for: self.extensions_generated_for.clone(),
        }
    }
}
/// Implementation of the `common::Deconstructable` trait to enable deconstruction into
/// and restoration from components for the `RuntimeApiImpl` struct.
///
/// substrate/primitives/api/proc-macro/src/impl_runtime_apis.rs:219
#[cfg(any(feature = "std", test))]
impl<B, C> common::Deconstructable<C> for RuntimeApiImpl<B, C> where
    B: BlockT, C: CallApiAt<B> {
    type Params =
        (u16, OverlayedChanges<HashingFor<B>>, Option<ProofRecorder<B>>,
        CallContext, Extensions, Option<B::Hash>);
    fn into_parts(self) -> (&'static C, Self::Params) {
        (self.call,
            (*core::cell::RefCell::borrow(&self.transaction_depth),
                self.changes.into_inner(), self.recorder, self.call_context,
                self.extensions.into_inner(),
                self.extensions_generated_for.into_inner()))
    }
    fn from_parts(call: &C, params: Self::Params) -> Self {
        Self {
            call: unsafe { std::mem::transmute(call) },
            transaction_depth: params.0.into(),
            changes: core::cell::RefCell::new(params.1),
            recorder: params.2,
            call_context: params.3,
            extensions: core::cell::RefCell::new(params.4),
            extensions_generated_for: core::cell::RefCell::new(params.5),
        }
    }
}
