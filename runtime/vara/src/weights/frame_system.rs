// This file is part of Gear.

// Copyright (C) 2022-2025 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for frame_system
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-07-23, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --runtime=./target/production/wbuild/vara-runtime/vara_runtime.compact.compressed.wasm --genesis-builder=runtime --genesis-builder-preset=development --steps=50 --repeat=20 --pallet=frame_system --extrinsic=* --heap-pages=4096 --output=./scripts/benchmarking/weights-output/frame_system.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for frame_system.
pub trait WeightInfo {
    fn remark(b: u32, ) -> Weight;
    fn remark_with_event(b: u32, ) -> Weight;
    fn set_heap_pages() -> Weight;
    fn set_code() -> Weight;
    fn set_storage(i: u32, ) -> Weight;
    fn kill_storage(i: u32, ) -> Weight;
    fn kill_prefix(p: u32, ) -> Weight;
    fn authorize_upgrade() -> Weight;
    fn apply_authorized_upgrade() -> Weight;
}

/// Weights for frame_system using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> frame_system::WeightInfo for SubstrateWeight<T> {
    /// The range of component `b` is `[0, 2621440]`.
    fn remark(b: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_177_000 picoseconds.
        Weight::from_parts(2_242_000, 0)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(582, 0).saturating_mul(b.into()))
    }
    /// The range of component `b` is `[0, 2621440]`.
    fn remark_with_event(b: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_925_000 picoseconds.
        Weight::from_parts(6_119_000, 0)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_767, 0).saturating_mul(b.into()))
    }
    fn set_heap_pages() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `1485`
        // Minimum execution time: 4_133_000 picoseconds.
        Weight::from_parts(4_311_000, 1485)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    fn set_code() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `1485`
        // Minimum execution time: 98_829_841_000 picoseconds.
        Weight::from_parts(108_370_719_000, 1485)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `i` is `[0, 1000]`.
    fn set_storage(i: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_202_000 picoseconds.
        Weight::from_parts(2_295_000, 0)
            // Standard Error: 1_027
            .saturating_add(Weight::from_parts(737_700, 0).saturating_mul(i.into()))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
    }
    /// The range of component `i` is `[0, 1000]`.
    fn kill_storage(i: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_164_000 picoseconds.
        Weight::from_parts(2_252_000, 0)
            // Standard Error: 870
            .saturating_add(Weight::from_parts(587_830, 0).saturating_mul(i.into()))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
    }
    /// The range of component `p` is `[0, 1000]`.
    fn kill_prefix(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `86 + p * (69 ±0)`
        //  Estimated: `89 + p * (70 ±0)`
        // Minimum execution time: 4_384_000 picoseconds.
        Weight::from_parts(4_428_000, 89)
            // Standard Error: 1_171
            .saturating_add(Weight::from_parts(1_435_125, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 70).saturating_mul(p.into()))
    }
    fn authorize_upgrade() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_583_000 picoseconds.
        Weight::from_parts(8_803_000, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn apply_authorized_upgrade() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `22`
        //  Estimated: `1518`
        // Minimum execution time: 95_539_520_000 picoseconds.
        Weight::from_parts(96_160_181_000, 1518)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// The range of component `b` is `[0, 2621440]`.
    fn remark(b: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_177_000 picoseconds.
        Weight::from_parts(2_242_000, 0)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(582, 0).saturating_mul(b.into()))
    }
    /// The range of component `b` is `[0, 2621440]`.
    fn remark_with_event(b: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_925_000 picoseconds.
        Weight::from_parts(6_119_000, 0)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_767, 0).saturating_mul(b.into()))
    }
    fn set_heap_pages() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `1485`
        // Minimum execution time: 4_133_000 picoseconds.
        Weight::from_parts(4_311_000, 1485)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    fn set_code() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `1485`
        // Minimum execution time: 98_829_841_000 picoseconds.
        Weight::from_parts(108_370_719_000, 1485)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `i` is `[0, 1000]`.
    fn set_storage(i: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_202_000 picoseconds.
        Weight::from_parts(2_295_000, 0)
            // Standard Error: 1_027
            .saturating_add(Weight::from_parts(737_700, 0).saturating_mul(i.into()))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(i.into())))
    }
    /// The range of component `i` is `[0, 1000]`.
    fn kill_storage(i: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_164_000 picoseconds.
        Weight::from_parts(2_252_000, 0)
            // Standard Error: 870
            .saturating_add(Weight::from_parts(587_830, 0).saturating_mul(i.into()))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(i.into())))
    }
    /// The range of component `p` is `[0, 1000]`.
    fn kill_prefix(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `86 + p * (69 ±0)`
        //  Estimated: `89 + p * (70 ±0)`
        // Minimum execution time: 4_384_000 picoseconds.
        Weight::from_parts(4_428_000, 89)
            // Standard Error: 1_171
            .saturating_add(Weight::from_parts(1_435_125, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(p.into())))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 70).saturating_mul(p.into()))
    }
    fn authorize_upgrade() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_583_000 picoseconds.
        Weight::from_parts(8_803_000, 0)
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    fn apply_authorized_upgrade() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `22`
        //  Estimated: `1518`
        // Minimum execution time: 95_539_520_000 picoseconds.
        Weight::from_parts(96_160_181_000, 1518)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }
}
