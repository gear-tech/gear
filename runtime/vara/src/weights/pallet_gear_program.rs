// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear_program
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-15, STEPS: `1`, REPEAT: 1, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Vadims-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/gear-node benchmark pallet --chain=gear-dev --steps=1 --repeat=1 --pallet=pallet_gear_program --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear_program.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear_program.
pub trait WeightInfo {
	fn resume_program(q: u32, ) -> Weight;
}

/// Weights for pallet_gear_program using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear_program::WeightInfo for SubstrateWeight<T> {
	// Storage: GearProgram PausedPrograms (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: unknown [0x673a3a70616765733a3a13614ad1183876953cdd99749d6dcf5d41b7ffc0740c] (r:0 w:16)
	// Storage: unknown [0x673a3a70726f673a3a13614ad1183876953cdd99749d6dcf5d41b7ffc0740cd2] (r:0 w:1)
	// Storage: unknown [0x673a3a70726f675f776169743a3a13614ad1183876953cdd99749d6dcf5d41b7] (r:0 w:1)
	/// The range of component `q` is `[1, 128]`.
	fn resume_program(_q: u32, ) -> Weight {
		Weight::from_ref_time(17_601_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(2054 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: GearProgram PausedPrograms (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: unknown [0x673a3a70616765733a3a13614ad1183876953cdd99749d6dcf5d41b7ffc0740c] (r:0 w:16)
	// Storage: unknown [0x673a3a70726f673a3a13614ad1183876953cdd99749d6dcf5d41b7ffc0740cd2] (r:0 w:1)
	// Storage: unknown [0x673a3a70726f675f776169743a3a13614ad1183876953cdd99749d6dcf5d41b7] (r:0 w:1)
	/// The range of component `q` is `[1, 128]`.
	fn resume_program(_q: u32, ) -> Weight {
		Weight::from_ref_time(17_601_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(2054 as u64))
	}
}
