// This file is part of Gear.

// Copyright (C) 2022-2024 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-03-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=alloc,alloc_per_page,claim_value,create_program,db_read_per_kb,db_write_per_kb,free,free_range,free_range_per_page,gr_block_height,gr_block_timestamp,gr_create_program,gr_create_program_per_kb,gr_create_program_wgas,gr_create_program_wgas_per_kb,gr_debug,gr_debug_per_kb,gr_env_vars,gr_gas_available,gr_message_id,gr_program_id,gr_random,gr_read,gr_read_per_kb,gr_reply_code,gr_reply_deposit,gr_reply_per_kb,gr_reply_push,gr_reply_push_input,gr_reply_push_input_per_kb,gr_reply_push_per_kb,gr_reply_to,gr_reply_wgas_per_kb,gr_reservation_reply_commit_per_kb,gr_reservation_reply_per_kb,gr_reservation_send,gr_reservation_send_commit,gr_reservation_send_per_kb,gr_reserve_gas,gr_send,gr_send_commit,gr_send_commit_wgas,gr_send_init,gr_send_input,gr_send_input_wgas,gr_send_per_kb,gr_send_push,gr_send_push_input,gr_send_push_input_per_kb,gr_send_push_per_kb,gr_send_wgas,gr_send_wgas_per_kb,gr_signal_code,gr_signal_from,gr_size,gr_source,gr_system_reserve_gas,gr_unreserve_gas,gr_value,gr_value_available,gr_wake,instantiate_module_per_kb,instr_br,instr_br_if,instr_br_table,instr_br_table_per_entry,instr_call,instr_call_const,instr_call_indirect,instr_call_indirect_per_param,instr_call_per_local,instr_global_get,instr_global_set,instr_i32add,instr_i32and,instr_i32clz,instr_i32ctz,instr_i32divs,instr_i32divu,instr_i32eq,instr_i32eqz,instr_i32extend16s,instr_i32extend8s,instr_i32ges,instr_i32geu,instr_i32gts,instr_i32gtu,instr_i32les,instr_i32leu,instr_i32load,instr_i32lts,instr_i32ltu,instr_i32mul,instr_i32ne,instr_i32or,instr_i32popcnt,instr_i32rems,instr_i32remu,instr_i32rotl,instr_i32rotr,instr_i32shl,instr_i32shrs,instr_i32shru,instr_i32store,instr_i32sub,instr_i32wrapi64,instr_i32xor,instr_i64add,instr_i64and,instr_i64clz,instr_i64ctz,instr_i64divs,instr_i64divu,instr_i64eq,instr_i64eqz,instr_i64extend16s,instr_i64extend32s,instr_i64extend8s,instr_i64extendsi32,instr_i64extendui32,instr_i64ges,instr_i64geu,instr_i64gts,instr_i64gtu,instr_i64les,instr_i64leu,instr_i64load,instr_i64lts,instr_i64ltu,instr_i64mul,instr_i64ne,instr_i64or,instr_i64popcnt,instr_i64rems,instr_i64remu,instr_i64rotl,instr_i64rotr,instr_i64shl,instr_i64shrs,instr_i64shru,instr_i64store,instr_i64sub,instr_i64xor,instr_if,instr_local_get,instr_local_set,instr_local_tee,instr_memory_current,instr_select,lazy_pages_host_func_read,lazy_pages_host_func_write,lazy_pages_host_func_write_after_read,lazy_pages_load_page_storage_data,lazy_pages_signal_read,lazy_pages_signal_write,lazy_pages_signal_write_after_read,mem_grow,reinstrument_per_kb,send_message,send_reply,tasks_remove_from_mailbox,tasks_remove_from_waitlist,tasks_remove_gas_reservation,tasks_send_dispatch,tasks_send_user_message,tasks_send_user_message_to_mailbox,tasks_wake_message,tasks_wake_message_no_wake,upload_code,upload_program --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn free_range(r: u32, ) -> Weight;
    fn free_range_per_page(p: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_env_vars(r: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn tasks_remove_gas_reservation() -> Weight;
    fn tasks_send_user_message_to_mailbox() -> Weight;
    fn tasks_send_user_message() -> Weight;
    fn tasks_send_dispatch() -> Weight;
    fn tasks_wake_message() -> Weight;
    fn tasks_wake_message_no_wake() -> Weight;
    fn tasks_remove_from_waitlist() -> Weight;
    fn tasks_remove_from_mailbox() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_945_000 picoseconds.
        Weight::from_parts(104_022_456, 0)
            // Standard Error: 84_976
            .saturating_add(Weight::from_parts(18_597_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_112_000 picoseconds.
        Weight::from_parts(108_438_244, 0)
            // Standard Error: 79_452
            .saturating_add(Weight::from_parts(17_073_848, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_584_000 picoseconds.
        Weight::from_parts(105_407_772, 0)
            // Standard Error: 89_767
            .saturating_add(Weight::from_parts(15_945_644, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_635_000 picoseconds.
        Weight::from_parts(108_324_434, 0)
            // Standard Error: 87_298
            .saturating_add(Weight::from_parts(17_766_276, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 568_213_000 picoseconds.
        Weight::from_parts(604_987_960, 0)
            // Standard Error: 665_842
            .saturating_add(Weight::from_parts(32_335_524, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 570_660_000 picoseconds.
        Weight::from_parts(611_026_484, 0)
            // Standard Error: 576_630
            .saturating_add(Weight::from_parts(23_008_380, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_542_000 picoseconds.
        Weight::from_parts(115_023_350, 0)
            // Standard Error: 85_990
            .saturating_add(Weight::from_parts(8_136_998, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_378_000 picoseconds.
        Weight::from_parts(113_409_394, 0)
            // Standard Error: 81_485
            .saturating_add(Weight::from_parts(8_195_100, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_026_000 picoseconds.
        Weight::from_parts(103_897_954, 0)
            // Standard Error: 1_159_251
            .saturating_add(Weight::from_parts(112_089_066, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_296_000 picoseconds.
        Weight::from_parts(103_841_682, 0)
            // Standard Error: 1_704_765
            .saturating_add(Weight::from_parts(149_602_654, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_117_000 picoseconds.
        Weight::from_parts(107_901_650, 0)
            // Standard Error: 1_509_874
            .saturating_add(Weight::from_parts(125_962_900, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_942_000 picoseconds.
        Weight::from_parts(104_102_032, 0)
            // Standard Error: 1_162_443
            .saturating_add(Weight::from_parts(106_261_854, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_167_000 picoseconds.
        Weight::from_parts(103_475_948, 0)
            // Standard Error: 1_720_847
            .saturating_add(Weight::from_parts(144_635_006, 0).saturating_mul(r.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 993_000 picoseconds.
        Weight::from_parts(1_058_000, 0)
            // Standard Error: 887
            .saturating_add(Weight::from_parts(217_892, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_284_000 picoseconds.
        Weight::from_parts(3_377_000, 3610)
            // Standard Error: 1_175
            .saturating_add(Weight::from_parts(667_081, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_737_000 picoseconds.
        Weight::from_parts(91_263_746, 0)
            // Standard Error: 4_620
            .saturating_add(Weight::from_parts(2_433_097, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1325`
        //  Estimated: `8799`
        // Minimum execution time: 155_453_000 picoseconds.
        Weight::from_parts(158_106_000, 8799)
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `3578`
        // Minimum execution time: 102_658_000 picoseconds.
        Weight::from_parts(81_791_774, 3578)
            // Standard Error: 44_744
            .saturating_add(Weight::from_parts(63_265_547, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1009`
        //  Estimated: `4474`
        // Minimum execution time: 137_764_000 picoseconds.
        Weight::from_parts(176_092_561, 4474)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_256, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(11_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `383`
        //  Estimated: `3848`
        // Minimum execution time: 9_654_646_000 picoseconds.
        Weight::from_parts(249_475_234, 3848)
            // Standard Error: 111_917
            .saturating_add(Weight::from_parts(64_496_518, 0).saturating_mul(c.into()))
            // Standard Error: 6
            .saturating_add(Weight::from_parts(2_225, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(15_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `484`
        //  Estimated: `6196`
        // Minimum execution time: 119_929_000 picoseconds.
        Weight::from_parts(86_319_635, 6196)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(951, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(12_u64))
            .saturating_add(T::DbWeight::get().writes(11_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1324`
        //  Estimated: `8799`
        // Minimum execution time: 190_318_000 picoseconds.
        Weight::from_parts(161_575_790, 8799)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(976, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(17_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3682 + c * (1075 ±0)`
        // Minimum execution time: 82_267_000 picoseconds.
        Weight::from_parts(82_683_000, 3682)
            // Standard Error: 27_496
            .saturating_add(Weight::from_parts(61_859_476, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1075).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_864_000 picoseconds.
        Weight::from_parts(97_859_000, 0)
            // Standard Error: 1_826_449
            .saturating_add(Weight::from_parts(495_900_442, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 433_172_000 picoseconds.
        Weight::from_parts(395_919_950, 0)
            // Standard Error: 7_645
            .saturating_add(Weight::from_parts(18_429_147, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 210_858_000 picoseconds.
        Weight::from_parts(229_522_021, 0)
            // Standard Error: 235_486
            .saturating_add(Weight::from_parts(58_860_041, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 209_939_000 picoseconds.
        Weight::from_parts(224_714_410, 0)
            // Standard Error: 171_928
            .saturating_add(Weight::from_parts(72_151_582, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 20]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 279_073_000 picoseconds.
        Weight::from_parts(274_540_950, 0)
            // Standard Error: 67_771
            .saturating_add(Weight::from_parts(5_193_022, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_623_000 picoseconds.
        Weight::from_parts(109_055_704, 0)
            // Standard Error: 5_091
            .saturating_add(Weight::from_parts(2_283_964, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 177_219_000 picoseconds.
        Weight::from_parts(205_156_764, 0)
            // Standard Error: 11_723
            .saturating_add(Weight::from_parts(2_039_252, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_847_000 picoseconds.
        Weight::from_parts(110_516_807, 0)
            // Standard Error: 297_166
            .saturating_add(Weight::from_parts(93_391_170, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_898_000 picoseconds.
        Weight::from_parts(98_131_533, 0)
            // Standard Error: 243_679
            .saturating_add(Weight::from_parts(83_100_430, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_327_000 picoseconds.
        Weight::from_parts(101_832_389, 0)
            // Standard Error: 215_484
            .saturating_add(Weight::from_parts(82_333_641, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_310_000 picoseconds.
        Weight::from_parts(97_330_077, 0)
            // Standard Error: 251_873
            .saturating_add(Weight::from_parts(83_182_033, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_130_000 picoseconds.
        Weight::from_parts(94_856_797, 0)
            // Standard Error: 256_005
            .saturating_add(Weight::from_parts(84_530_059, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_462_000 picoseconds.
        Weight::from_parts(97_960_708, 0)
            // Standard Error: 273_125
            .saturating_add(Weight::from_parts(84_177_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_189_000 picoseconds.
        Weight::from_parts(95_303_210, 0)
            // Standard Error: 307_431
            .saturating_add(Weight::from_parts(83_444_187, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_146_000 picoseconds.
        Weight::from_parts(96_419_521, 0)
            // Standard Error: 283_578
            .saturating_add(Weight::from_parts(83_650_120, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 575_802_000 picoseconds.
        Weight::from_parts(639_212_775, 0)
            // Standard Error: 387_848
            .saturating_add(Weight::from_parts(143_198_247, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 761_793_000 picoseconds.
        Weight::from_parts(805_063_000, 0)
            // Standard Error: 55_487
            .saturating_add(Weight::from_parts(12_925_135, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_702_000 picoseconds.
        Weight::from_parts(112_622_829, 0)
            // Standard Error: 302_732
            .saturating_add(Weight::from_parts(93_055_023, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_204_000 picoseconds.
        Weight::from_parts(89_439_022, 0)
            // Standard Error: 301_903
            .saturating_add(Weight::from_parts(83_908_928, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_566_000 picoseconds.
        Weight::from_parts(92_054_763, 0)
            // Standard Error: 275_412
            .saturating_add(Weight::from_parts(83_951_838, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_827_000 picoseconds.
        Weight::from_parts(112_945_295, 0)
            // Standard Error: 319_665
            .saturating_add(Weight::from_parts(160_757_363, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_459_000 picoseconds.
        Weight::from_parts(106_478_000, 0)
            // Standard Error: 3_818_273
            .saturating_add(Weight::from_parts(770_456_481, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_823_000 picoseconds.
        Weight::from_parts(171_061_216, 0)
            // Standard Error: 382_689
            .saturating_add(Weight::from_parts(248_479_923, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 343_361_000 picoseconds.
        Weight::from_parts(346_814_000, 0)
            // Standard Error: 55_782
            .saturating_add(Weight::from_parts(24_723_313, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_942_000 picoseconds.
        Weight::from_parts(170_016_776, 0)
            // Standard Error: 351_007
            .saturating_add(Weight::from_parts(251_684_813, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 350_579_000 picoseconds.
        Weight::from_parts(353_144_000, 0)
            // Standard Error: 54_966
            .saturating_add(Weight::from_parts(24_846_485, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 575_262_000 picoseconds.
        Weight::from_parts(646_936_468, 0)
            // Standard Error: 379_993
            .saturating_add(Weight::from_parts(267_491_876, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 607_335_000 picoseconds.
        Weight::from_parts(761_166_467, 0)
            // Standard Error: 445_819
            .saturating_add(Weight::from_parts(263_592_774, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_494_000 picoseconds.
        Weight::from_parts(91_513_942, 0)
            // Standard Error: 263_488
            .saturating_add(Weight::from_parts(91_419_769, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_782_452_000 picoseconds.
        Weight::from_parts(1_881_612_867, 0)
            // Standard Error: 261_272
            .saturating_add(Weight::from_parts(165_776_467, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 316_760_000 picoseconds.
        Weight::from_parts(319_874_000, 0)
            // Standard Error: 59_829
            .saturating_add(Weight::from_parts(33_976_436, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_786_062_000 picoseconds.
        Weight::from_parts(1_910_418_388, 0)
            // Standard Error: 354_774
            .saturating_add(Weight::from_parts(209_618_206, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_785_491_000 picoseconds.
        Weight::from_parts(1_881_103_622, 0)
            // Standard Error: 332_866
            .saturating_add(Weight::from_parts(218_643_869, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 261_105_000 picoseconds.
        Weight::from_parts(312_305_734, 0)
            // Standard Error: 346_673
            .saturating_add(Weight::from_parts(263_603_053, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 522_644_000 picoseconds.
        Weight::from_parts(530_554_000, 0)
            // Standard Error: 63_470
            .saturating_add(Weight::from_parts(25_410_700, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_952_104_000 picoseconds.
        Weight::from_parts(2_069_900_506, 0)
            // Standard Error: 412_026
            .saturating_add(Weight::from_parts(234_547_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 123_537_000 picoseconds.
        Weight::from_parts(104_620_601, 0)
            // Standard Error: 1_182
            .saturating_add(Weight::from_parts(498_229, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 114_626_000 picoseconds.
        Weight::from_parts(117_727_506, 0)
            // Standard Error: 1_001
            .saturating_add(Weight::from_parts(480_404, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_544_000 picoseconds.
        Weight::from_parts(142_216_475, 0)
            // Standard Error: 345_701
            .saturating_add(Weight::from_parts(142_183_846, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 114_136_000 picoseconds.
        Weight::from_parts(117_980_000, 0)
            // Standard Error: 2_632
            .saturating_add(Weight::from_parts(701_332, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_786_000 picoseconds.
        Weight::from_parts(113_942_660, 0)
            // Standard Error: 890
            .saturating_add(Weight::from_parts(480_705, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_318_000 picoseconds.
        Weight::from_parts(106_152_416, 0)
            // Standard Error: 902
            .saturating_add(Weight::from_parts(488_394, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_103_000 picoseconds.
        Weight::from_parts(90_981_521, 0)
            // Standard Error: 262_157
            .saturating_add(Weight::from_parts(85_653_037, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_180_000 picoseconds.
        Weight::from_parts(97_007_581, 0)
            // Standard Error: 281_978
            .saturating_add(Weight::from_parts(83_685_172, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_331_000 picoseconds.
        Weight::from_parts(102_081_765, 0)
            // Standard Error: 276_975
            .saturating_add(Weight::from_parts(83_070_796, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 577_739_000 picoseconds.
        Weight::from_parts(671_791_056, 0)
            // Standard Error: 409_996
            .saturating_add(Weight::from_parts(107_077_852, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 636_364_000 picoseconds.
        Weight::from_parts(704_115_538, 0)
            // Standard Error: 2_300
            .saturating_add(Weight::from_parts(112_680, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_367_299_000 picoseconds.
        Weight::from_parts(2_512_951_187, 0)
            // Standard Error: 452_043
            .saturating_add(Weight::from_parts(125_707_578, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_567_734_000 picoseconds.
        Weight::from_parts(2_438_122_902, 0)
            // Standard Error: 11_962
            .saturating_add(Weight::from_parts(12_487_691, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_919_000 picoseconds.
        Weight::from_parts(114_983_534, 0)
            // Standard Error: 285_687
            .saturating_add(Weight::from_parts(105_923_678, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 160_184_000 picoseconds.
        Weight::from_parts(161_901_000, 0)
            // Standard Error: 50_780
            .saturating_add(Weight::from_parts(30_686_739, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_732_000 picoseconds.
        Weight::from_parts(99_863_182, 0)
            // Standard Error: 239_449
            .saturating_add(Weight::from_parts(82_061_540, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 177_157_000 picoseconds.
        Weight::from_parts(181_837_000, 0)
            // Standard Error: 1_507_304
            .saturating_add(Weight::from_parts(279_247_460, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 111_603_000 picoseconds.
        Weight::from_parts(171_690_280, 0)
            // Standard Error: 314_659
            .saturating_add(Weight::from_parts(326_930_887, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_556_083_000 picoseconds.
        Weight::from_parts(881_593_384, 0)
            // Standard Error: 89_661
            .saturating_add(Weight::from_parts(25_096_671, 0).saturating_mul(p.into()))
            // Standard Error: 89_707
            .saturating_add(Weight::from_parts(171_082_804, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_440_000 picoseconds.
        Weight::from_parts(158_253_767, 0)
            // Standard Error: 309_332
            .saturating_add(Weight::from_parts(333_689_354, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 53_406_603_000 picoseconds.
        Weight::from_parts(53_509_778_000, 0)
            // Standard Error: 300_731
            .saturating_add(Weight::from_parts(8_483_458, 0).saturating_mul(p.into()))
            // Standard Error: 300_717
            .saturating_add(Weight::from_parts(154_938_585, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 97_451_000 picoseconds.
        Weight::from_parts(154_274_505, 1131)
            // Standard Error: 15_264
            .saturating_add(Weight::from_parts(14_411_143, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 99_024_000 picoseconds.
        Weight::from_parts(102_745_000, 1131)
            // Standard Error: 24_705
            .saturating_add(Weight::from_parts(42_427_452, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 7_387_512_000 picoseconds.
        Weight::from_parts(7_335_876_420, 5069931)
            // Standard Error: 48_896
            .saturating_add(Weight::from_parts(42_587_783, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1820 + p * (65580 ±0)`
        //  Estimated: `1946 + p * (75482 ±0)`
        // Minimum execution time: 98_601_000 picoseconds.
        Weight::from_parts(100_445_000, 1946)
            // Standard Error: 50_920
            .saturating_add(Weight::from_parts(55_814_010, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 106_085_000 picoseconds.
        Weight::from_parts(111_925_649, 1131)
            // Standard Error: 52_940
            .saturating_add(Weight::from_parts(42_934_839, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 626_714_000 picoseconds.
        Weight::from_parts(665_886_286, 1496)
            // Standard Error: 243_001
            .saturating_add(Weight::from_parts(51_879_221, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_092_471_000 picoseconds.
        Weight::from_parts(1_180_260_163, 317931)
            // Standard Error: 223_197
            .saturating_add(Weight::from_parts(51_311_986, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_582_000 picoseconds.
        Weight::from_parts(6_122_450, 0)
            // Standard Error: 333_948
            .saturating_add(Weight::from_parts(75_586_013, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_463_527_000 picoseconds.
        Weight::from_parts(4_368_070_712, 0)
            // Standard Error: 92_790
            .saturating_add(Weight::from_parts(4_873_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_484_551_000 picoseconds.
        Weight::from_parts(4_394_526_160, 0)
            // Standard Error: 76_062
            .saturating_add(Weight::from_parts(4_620_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_176_299_000 picoseconds.
        Weight::from_parts(11_533_122_806, 0)
            // Standard Error: 135_663
            .saturating_add(Weight::from_parts(9_957_410, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_072_266_000 picoseconds.
        Weight::from_parts(11_158_381_663, 0)
            // Standard Error: 250_007
            .saturating_add(Weight::from_parts(11_909_439, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_248_000 picoseconds.
        Weight::from_parts(2_286_000, 0)
            // Standard Error: 7_099
            .saturating_add(Weight::from_parts(3_791_275, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_371_000 picoseconds.
        Weight::from_parts(1_550_887, 0)
            // Standard Error: 9_220
            .saturating_add(Weight::from_parts(3_106_468, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_308_000 picoseconds.
        Weight::from_parts(3_224_842, 0)
            // Standard Error: 1_355
            .saturating_add(Weight::from_parts(1_584_500, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_276_000 picoseconds.
        Weight::from_parts(2_340_000, 0)
            // Standard Error: 9_571
            .saturating_add(Weight::from_parts(2_941_472, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_373_000 picoseconds.
        Weight::from_parts(7_911_478, 0)
            // Standard Error: 22_429
            .saturating_add(Weight::from_parts(4_756_629, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_144_000 picoseconds.
        Weight::from_parts(5_692_999, 0)
            // Standard Error: 1_298
            .saturating_add(Weight::from_parts(171_786, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_425_000 picoseconds.
        Weight::from_parts(4_802_528, 0)
            // Standard Error: 7_260
            .saturating_add(Weight::from_parts(2_604_184, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_604_184 -
            2_424_629, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_363_000 picoseconds.
        Weight::from_parts(4_922_988, 0)
            // Standard Error: 12_429
            .saturating_add(Weight::from_parts(2_424_629, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_708_000 picoseconds.
        Weight::from_parts(15_770_711, 0)
            // Standard Error: 28_957
            .saturating_add(Weight::from_parts(10_162_344, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_353_000 picoseconds.
        Weight::from_parts(2_831_366, 0)
            // Standard Error: 5_790
            .saturating_add(Weight::from_parts(1_288_753, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_386_000 picoseconds.
        Weight::from_parts(5_699_848, 0)
            // Standard Error: 14
            .saturating_add(Weight::from_parts(18, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_236_000 picoseconds.
        Weight::from_parts(8_933_466, 0)
            // Standard Error: 2_922
            .saturating_add(Weight::from_parts(517_570, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_307_000 picoseconds.
        Weight::from_parts(8_059_769, 0)
            // Standard Error: 5_936
            .saturating_add(Weight::from_parts(1_213_364, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_283_000 picoseconds.
        Weight::from_parts(9_069_039, 0)
            // Standard Error: 6_335
            .saturating_add(Weight::from_parts(1_192_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_487_000 picoseconds.
        Weight::from_parts(3_352_093, 0)
            // Standard Error: 5_860
            .saturating_add(Weight::from_parts(819_442, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_372_000 picoseconds.
        Weight::from_parts(6_474_000, 0)
            // Standard Error: 8_119
            .saturating_add(Weight::from_parts(1_417_391, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_507_000 picoseconds.
        Weight::from_parts(5_603_008, 0)
            // Standard Error: 9_086
            .saturating_add(Weight::from_parts(6_255_060, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_315_000 picoseconds.
        Weight::from_parts(2_414_000, 0)
            // Standard Error: 4_741
            .saturating_add(Weight::from_parts(3_312_008, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_226_000 picoseconds.
        Weight::from_parts(2_319_000, 0)
            // Standard Error: 4_679
            .saturating_add(Weight::from_parts(3_149_772, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_312_000 picoseconds.
        Weight::from_parts(2_371_000, 0)
            // Standard Error: 4_966
            .saturating_add(Weight::from_parts(3_143_849, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_239_000 picoseconds.
        Weight::from_parts(2_370_000, 0)
            // Standard Error: 3_641
            .saturating_add(Weight::from_parts(2_713_806, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_280_000 picoseconds.
        Weight::from_parts(2_339_000, 0)
            // Standard Error: 3_905
            .saturating_add(Weight::from_parts(681_773, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_270_000 picoseconds.
        Weight::from_parts(1_331_910, 0)
            // Standard Error: 4_433
            .saturating_add(Weight::from_parts(457_864, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_268_000 picoseconds.
        Weight::from_parts(2_325_000, 0)
            // Standard Error: 7_639
            .saturating_add(Weight::from_parts(1_875_510, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_277_000 picoseconds.
        Weight::from_parts(2_356_000, 0)
            // Standard Error: 5_888
            .saturating_add(Weight::from_parts(1_226_071, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_257_000 picoseconds.
        Weight::from_parts(1_452_510, 0)
            // Standard Error: 4_107
            .saturating_add(Weight::from_parts(421_422, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_236_000 picoseconds.
        Weight::from_parts(1_566_774, 0)
            // Standard Error: 3_256
            .saturating_add(Weight::from_parts(416_288, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_341_000 picoseconds.
        Weight::from_parts(2_395_000, 0)
            // Standard Error: 4_377
            .saturating_add(Weight::from_parts(543_317, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_325_000 picoseconds.
        Weight::from_parts(401_036, 0)
            // Standard Error: 5_298
            .saturating_add(Weight::from_parts(609_500, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_350_000 picoseconds.
        Weight::from_parts(431_298, 0)
            // Standard Error: 5_913
            .saturating_add(Weight::from_parts(550_272, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_238_000 picoseconds.
        Weight::from_parts(1_908_769, 0)
            // Standard Error: 2_636
            .saturating_add(Weight::from_parts(347_804, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_334_000 picoseconds.
        Weight::from_parts(2_639_864, 0)
            // Standard Error: 1_886
            .saturating_add(Weight::from_parts(179_046, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_294_000 picoseconds.
        Weight::from_parts(2_435_807, 0)
            // Standard Error: 2_245
            .saturating_add(Weight::from_parts(210_426, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_347_000 picoseconds.
        Weight::from_parts(2_410_000, 0)
            // Standard Error: 8_257
            .saturating_add(Weight::from_parts(1_803_397, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_293_000 picoseconds.
        Weight::from_parts(2_333_000, 0)
            // Standard Error: 7_226
            .saturating_add(Weight::from_parts(1_160_797, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_402_000 picoseconds.
        Weight::from_parts(2_424_000, 0)
            // Standard Error: 8_636
            .saturating_add(Weight::from_parts(1_789_970, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_234_000 picoseconds.
        Weight::from_parts(2_364_000, 0)
            // Standard Error: 6_609
            .saturating_add(Weight::from_parts(1_166_729, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_293_000 picoseconds.
        Weight::from_parts(2_350_000, 0)
            // Standard Error: 9_318
            .saturating_add(Weight::from_parts(1_914_258, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_335_000 picoseconds.
        Weight::from_parts(2_411_000, 0)
            // Standard Error: 7_286
            .saturating_add(Weight::from_parts(1_213_289, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_300_000 picoseconds.
        Weight::from_parts(2_349_000, 0)
            // Standard Error: 9_759
            .saturating_add(Weight::from_parts(1_833_544, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_271_000 picoseconds.
        Weight::from_parts(2_334_000, 0)
            // Standard Error: 6_908
            .saturating_add(Weight::from_parts(1_139_166, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_347_000 picoseconds.
        Weight::from_parts(2_368_000, 0)
            // Standard Error: 11_018
            .saturating_add(Weight::from_parts(1_829_950, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_281_000 picoseconds.
        Weight::from_parts(2_329_000, 0)
            // Standard Error: 8_074
            .saturating_add(Weight::from_parts(1_272_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_279_000 picoseconds.
        Weight::from_parts(2_369_000, 0)
            // Standard Error: 9_263
            .saturating_add(Weight::from_parts(1_989_691, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_243_000 picoseconds.
        Weight::from_parts(2_309_000, 0)
            // Standard Error: 7_128
            .saturating_add(Weight::from_parts(1_192_922, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_355_000 picoseconds.
        Weight::from_parts(2_407_000, 0)
            // Standard Error: 9_153
            .saturating_add(Weight::from_parts(1_914_434, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_306_000 picoseconds.
        Weight::from_parts(2_381_000, 0)
            // Standard Error: 6_637
            .saturating_add(Weight::from_parts(1_177_037, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_289_000 picoseconds.
        Weight::from_parts(2_334_000, 0)
            // Standard Error: 9_556
            .saturating_add(Weight::from_parts(1_936_207, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_308_000 picoseconds.
        Weight::from_parts(2_389_000, 0)
            // Standard Error: 8_346
            .saturating_add(Weight::from_parts(1_249_124, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_310_000 picoseconds.
        Weight::from_parts(2_358_000, 0)
            // Standard Error: 9_917
            .saturating_add(Weight::from_parts(1_888_073, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_362_000 picoseconds.
        Weight::from_parts(2_433_000, 0)
            // Standard Error: 7_082
            .saturating_add(Weight::from_parts(1_187_437, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_293_000 picoseconds.
        Weight::from_parts(2_329_000, 0)
            // Standard Error: 8_917
            .saturating_add(Weight::from_parts(1_819_888, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_294_000 picoseconds.
        Weight::from_parts(2_315_000, 0)
            // Standard Error: 7_590
            .saturating_add(Weight::from_parts(1_246_696, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_370_000 picoseconds.
        Weight::from_parts(2_404_000, 0)
            // Standard Error: 8_235
            .saturating_add(Weight::from_parts(1_371_951, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_319_000 picoseconds.
        Weight::from_parts(2_349_000, 0)
            // Standard Error: 5_433
            .saturating_add(Weight::from_parts(678_931, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_288_000 picoseconds.
        Weight::from_parts(2_367_000, 0)
            // Standard Error: 8_564
            .saturating_add(Weight::from_parts(1_326_966, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_367_000 picoseconds.
        Weight::from_parts(2_394_000, 0)
            // Standard Error: 4_330
            .saturating_add(Weight::from_parts(632_029, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_415_000 picoseconds.
        Weight::from_parts(2_441_000, 0)
            // Standard Error: 8_857
            .saturating_add(Weight::from_parts(1_760_125, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_284_000 picoseconds.
        Weight::from_parts(2_339_000, 0)
            // Standard Error: 8_204
            .saturating_add(Weight::from_parts(1_233_365, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_279_000 picoseconds.
        Weight::from_parts(9_548_032, 0)
            // Standard Error: 21_796
            .saturating_add(Weight::from_parts(2_068_026, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_299_000 picoseconds.
        Weight::from_parts(3_167_232, 0)
            // Standard Error: 13_869
            .saturating_add(Weight::from_parts(2_288_072, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_268_000 picoseconds.
        Weight::from_parts(4_234_523, 0)
            // Standard Error: 23_687
            .saturating_add(Weight::from_parts(2_712_849, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_303_000 picoseconds.
        Weight::from_parts(8_243_950, 0)
            // Standard Error: 22_534
            .saturating_add(Weight::from_parts(1_873_975, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_281_000 picoseconds.
        Weight::from_parts(12_581_368, 0)
            // Standard Error: 47_569
            .saturating_add(Weight::from_parts(8_400_473, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_354_000 picoseconds.
        Weight::from_parts(10_509_119, 0)
            // Standard Error: 54_252
            .saturating_add(Weight::from_parts(6_913_210, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_317_000 picoseconds.
        Weight::from_parts(6_128_702, 0)
            // Standard Error: 17_874
            .saturating_add(Weight::from_parts(2_659_128, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_341_000 picoseconds.
        Weight::from_parts(3_899_500, 0)
            // Standard Error: 17_305
            .saturating_add(Weight::from_parts(2_260_843, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_284_000 picoseconds.
        Weight::from_parts(2_384_000, 0)
            // Standard Error: 7_955
            .saturating_add(Weight::from_parts(1_362_993, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_228_000 picoseconds.
        Weight::from_parts(2_344_000, 0)
            // Standard Error: 5_020
            .saturating_add(Weight::from_parts(692_438, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_273_000 picoseconds.
        Weight::from_parts(2_306_000, 0)
            // Standard Error: 9_545
            .saturating_add(Weight::from_parts(1_409_717, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_268_000 picoseconds.
        Weight::from_parts(2_360_000, 0)
            // Standard Error: 5_713
            .saturating_add(Weight::from_parts(726_050, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_295_000 picoseconds.
        Weight::from_parts(2_370_000, 0)
            // Standard Error: 8_435
            .saturating_add(Weight::from_parts(1_422_576, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_259_000 picoseconds.
        Weight::from_parts(2_335_000, 0)
            // Standard Error: 6_228
            .saturating_add(Weight::from_parts(812_631, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_278_000 picoseconds.
        Weight::from_parts(2_344_000, 0)
            // Standard Error: 7_307
            .saturating_add(Weight::from_parts(1_202_531, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_227_000 picoseconds.
        Weight::from_parts(2_323_000, 0)
            // Standard Error: 5_016
            .saturating_add(Weight::from_parts(682_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_288_000 picoseconds.
        Weight::from_parts(2_368_000, 0)
            // Standard Error: 7_399
            .saturating_add(Weight::from_parts(1_177_857, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_311_000 picoseconds.
        Weight::from_parts(2_398_000, 0)
            // Standard Error: 4_382
            .saturating_add(Weight::from_parts(638_367, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_306_000 picoseconds.
        Weight::from_parts(2_336_000, 0)
            // Standard Error: 6_742
            .saturating_add(Weight::from_parts(1_190_996, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_190_000 picoseconds.
        Weight::from_parts(2_294_000, 0)
            // Standard Error: 3_546
            .saturating_add(Weight::from_parts(627_494, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_266_000 picoseconds.
        Weight::from_parts(2_336_000, 0)
            // Standard Error: 7_852
            .saturating_add(Weight::from_parts(1_192_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_268_000 picoseconds.
        Weight::from_parts(2_359_000, 0)
            // Standard Error: 4_172
            .saturating_add(Weight::from_parts(627_128, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_341_000 picoseconds.
        Weight::from_parts(2_416_000, 0)
            // Standard Error: 7_493
            .saturating_add(Weight::from_parts(1_162_802, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_310_000 picoseconds.
        Weight::from_parts(2_344_000, 0)
            // Standard Error: 5_002
            .saturating_add(Weight::from_parts(664_397, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1090`
        //  Estimated: `6196`
        // Minimum execution time: 80_766_000 picoseconds.
        Weight::from_parts(83_124_000, 6196)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `858`
        //  Estimated: `4323`
        // Minimum execution time: 49_194_000 picoseconds.
        Weight::from_parts(51_250_000, 4323)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1009`
        //  Estimated: `6196`
        // Minimum execution time: 98_018_000 picoseconds.
        Weight::from_parts(101_876_000, 6196)
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `694`
        //  Estimated: `4159`
        // Minimum execution time: 32_626_000 picoseconds.
        Weight::from_parts(34_442_000, 4159)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `937`
        //  Estimated: `4402`
        // Minimum execution time: 49_344_000 picoseconds.
        Weight::from_parts(52_997_000, 4402)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_520_000 picoseconds.
        Weight::from_parts(3_688_000, 3545)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2109`
        //  Estimated: `8049`
        // Minimum execution time: 140_984_000 picoseconds.
        Weight::from_parts(145_199_000, 8049)
            .saturating_add(T::DbWeight::get().reads(17_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1294`
        //  Estimated: `7234`
        // Minimum execution time: 108_379_000 picoseconds.
        Weight::from_parts(115_122_000, 7234)
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_945_000 picoseconds.
        Weight::from_parts(104_022_456, 0)
            // Standard Error: 84_976
            .saturating_add(Weight::from_parts(18_597_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_112_000 picoseconds.
        Weight::from_parts(108_438_244, 0)
            // Standard Error: 79_452
            .saturating_add(Weight::from_parts(17_073_848, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_584_000 picoseconds.
        Weight::from_parts(105_407_772, 0)
            // Standard Error: 89_767
            .saturating_add(Weight::from_parts(15_945_644, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_635_000 picoseconds.
        Weight::from_parts(108_324_434, 0)
            // Standard Error: 87_298
            .saturating_add(Weight::from_parts(17_766_276, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 568_213_000 picoseconds.
        Weight::from_parts(604_987_960, 0)
            // Standard Error: 665_842
            .saturating_add(Weight::from_parts(32_335_524, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 570_660_000 picoseconds.
        Weight::from_parts(611_026_484, 0)
            // Standard Error: 576_630
            .saturating_add(Weight::from_parts(23_008_380, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_542_000 picoseconds.
        Weight::from_parts(115_023_350, 0)
            // Standard Error: 85_990
            .saturating_add(Weight::from_parts(8_136_998, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_378_000 picoseconds.
        Weight::from_parts(113_409_394, 0)
            // Standard Error: 81_485
            .saturating_add(Weight::from_parts(8_195_100, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_026_000 picoseconds.
        Weight::from_parts(103_897_954, 0)
            // Standard Error: 1_159_251
            .saturating_add(Weight::from_parts(112_089_066, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_296_000 picoseconds.
        Weight::from_parts(103_841_682, 0)
            // Standard Error: 1_704_765
            .saturating_add(Weight::from_parts(149_602_654, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_117_000 picoseconds.
        Weight::from_parts(107_901_650, 0)
            // Standard Error: 1_509_874
            .saturating_add(Weight::from_parts(125_962_900, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_942_000 picoseconds.
        Weight::from_parts(104_102_032, 0)
            // Standard Error: 1_162_443
            .saturating_add(Weight::from_parts(106_261_854, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_167_000 picoseconds.
        Weight::from_parts(103_475_948, 0)
            // Standard Error: 1_720_847
            .saturating_add(Weight::from_parts(144_635_006, 0).saturating_mul(r.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 993_000 picoseconds.
        Weight::from_parts(1_058_000, 0)
            // Standard Error: 887
            .saturating_add(Weight::from_parts(217_892, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_284_000 picoseconds.
        Weight::from_parts(3_377_000, 3610)
            // Standard Error: 1_175
            .saturating_add(Weight::from_parts(667_081, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_737_000 picoseconds.
        Weight::from_parts(91_263_746, 0)
            // Standard Error: 4_620
            .saturating_add(Weight::from_parts(2_433_097, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1325`
        //  Estimated: `8799`
        // Minimum execution time: 155_453_000 picoseconds.
        Weight::from_parts(158_106_000, 8799)
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `3578`
        // Minimum execution time: 102_658_000 picoseconds.
        Weight::from_parts(81_791_774, 3578)
            // Standard Error: 44_744
            .saturating_add(Weight::from_parts(63_265_547, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1009`
        //  Estimated: `4474`
        // Minimum execution time: 137_764_000 picoseconds.
        Weight::from_parts(176_092_561, 4474)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_256, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(11_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `383`
        //  Estimated: `3848`
        // Minimum execution time: 9_654_646_000 picoseconds.
        Weight::from_parts(249_475_234, 3848)
            // Standard Error: 111_917
            .saturating_add(Weight::from_parts(64_496_518, 0).saturating_mul(c.into()))
            // Standard Error: 6
            .saturating_add(Weight::from_parts(2_225, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(15_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `484`
        //  Estimated: `6196`
        // Minimum execution time: 119_929_000 picoseconds.
        Weight::from_parts(86_319_635, 6196)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(951, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(12_u64))
            .saturating_add(RocksDbWeight::get().writes(11_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1324`
        //  Estimated: `8799`
        // Minimum execution time: 190_318_000 picoseconds.
        Weight::from_parts(161_575_790, 8799)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(976, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(17_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3682 + c * (1075 ±0)`
        // Minimum execution time: 82_267_000 picoseconds.
        Weight::from_parts(82_683_000, 3682)
            // Standard Error: 27_496
            .saturating_add(Weight::from_parts(61_859_476, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1075).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_864_000 picoseconds.
        Weight::from_parts(97_859_000, 0)
            // Standard Error: 1_826_449
            .saturating_add(Weight::from_parts(495_900_442, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 433_172_000 picoseconds.
        Weight::from_parts(395_919_950, 0)
            // Standard Error: 7_645
            .saturating_add(Weight::from_parts(18_429_147, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 210_858_000 picoseconds.
        Weight::from_parts(229_522_021, 0)
            // Standard Error: 235_486
            .saturating_add(Weight::from_parts(58_860_041, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 209_939_000 picoseconds.
        Weight::from_parts(224_714_410, 0)
            // Standard Error: 171_928
            .saturating_add(Weight::from_parts(72_151_582, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 20]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 279_073_000 picoseconds.
        Weight::from_parts(274_540_950, 0)
            // Standard Error: 67_771
            .saturating_add(Weight::from_parts(5_193_022, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_623_000 picoseconds.
        Weight::from_parts(109_055_704, 0)
            // Standard Error: 5_091
            .saturating_add(Weight::from_parts(2_283_964, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 177_219_000 picoseconds.
        Weight::from_parts(205_156_764, 0)
            // Standard Error: 11_723
            .saturating_add(Weight::from_parts(2_039_252, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_847_000 picoseconds.
        Weight::from_parts(110_516_807, 0)
            // Standard Error: 297_166
            .saturating_add(Weight::from_parts(93_391_170, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_898_000 picoseconds.
        Weight::from_parts(98_131_533, 0)
            // Standard Error: 243_679
            .saturating_add(Weight::from_parts(83_100_430, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_327_000 picoseconds.
        Weight::from_parts(101_832_389, 0)
            // Standard Error: 215_484
            .saturating_add(Weight::from_parts(82_333_641, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_310_000 picoseconds.
        Weight::from_parts(97_330_077, 0)
            // Standard Error: 251_873
            .saturating_add(Weight::from_parts(83_182_033, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_130_000 picoseconds.
        Weight::from_parts(94_856_797, 0)
            // Standard Error: 256_005
            .saturating_add(Weight::from_parts(84_530_059, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_462_000 picoseconds.
        Weight::from_parts(97_960_708, 0)
            // Standard Error: 273_125
            .saturating_add(Weight::from_parts(84_177_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_189_000 picoseconds.
        Weight::from_parts(95_303_210, 0)
            // Standard Error: 307_431
            .saturating_add(Weight::from_parts(83_444_187, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_146_000 picoseconds.
        Weight::from_parts(96_419_521, 0)
            // Standard Error: 283_578
            .saturating_add(Weight::from_parts(83_650_120, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 575_802_000 picoseconds.
        Weight::from_parts(639_212_775, 0)
            // Standard Error: 387_848
            .saturating_add(Weight::from_parts(143_198_247, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 761_793_000 picoseconds.
        Weight::from_parts(805_063_000, 0)
            // Standard Error: 55_487
            .saturating_add(Weight::from_parts(12_925_135, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_702_000 picoseconds.
        Weight::from_parts(112_622_829, 0)
            // Standard Error: 302_732
            .saturating_add(Weight::from_parts(93_055_023, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_204_000 picoseconds.
        Weight::from_parts(89_439_022, 0)
            // Standard Error: 301_903
            .saturating_add(Weight::from_parts(83_908_928, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_566_000 picoseconds.
        Weight::from_parts(92_054_763, 0)
            // Standard Error: 275_412
            .saturating_add(Weight::from_parts(83_951_838, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_827_000 picoseconds.
        Weight::from_parts(112_945_295, 0)
            // Standard Error: 319_665
            .saturating_add(Weight::from_parts(160_757_363, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_459_000 picoseconds.
        Weight::from_parts(106_478_000, 0)
            // Standard Error: 3_818_273
            .saturating_add(Weight::from_parts(770_456_481, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_823_000 picoseconds.
        Weight::from_parts(171_061_216, 0)
            // Standard Error: 382_689
            .saturating_add(Weight::from_parts(248_479_923, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 343_361_000 picoseconds.
        Weight::from_parts(346_814_000, 0)
            // Standard Error: 55_782
            .saturating_add(Weight::from_parts(24_723_313, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_942_000 picoseconds.
        Weight::from_parts(170_016_776, 0)
            // Standard Error: 351_007
            .saturating_add(Weight::from_parts(251_684_813, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 350_579_000 picoseconds.
        Weight::from_parts(353_144_000, 0)
            // Standard Error: 54_966
            .saturating_add(Weight::from_parts(24_846_485, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 575_262_000 picoseconds.
        Weight::from_parts(646_936_468, 0)
            // Standard Error: 379_993
            .saturating_add(Weight::from_parts(267_491_876, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 607_335_000 picoseconds.
        Weight::from_parts(761_166_467, 0)
            // Standard Error: 445_819
            .saturating_add(Weight::from_parts(263_592_774, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_494_000 picoseconds.
        Weight::from_parts(91_513_942, 0)
            // Standard Error: 263_488
            .saturating_add(Weight::from_parts(91_419_769, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_782_452_000 picoseconds.
        Weight::from_parts(1_881_612_867, 0)
            // Standard Error: 261_272
            .saturating_add(Weight::from_parts(165_776_467, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 316_760_000 picoseconds.
        Weight::from_parts(319_874_000, 0)
            // Standard Error: 59_829
            .saturating_add(Weight::from_parts(33_976_436, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_786_062_000 picoseconds.
        Weight::from_parts(1_910_418_388, 0)
            // Standard Error: 354_774
            .saturating_add(Weight::from_parts(209_618_206, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_785_491_000 picoseconds.
        Weight::from_parts(1_881_103_622, 0)
            // Standard Error: 332_866
            .saturating_add(Weight::from_parts(218_643_869, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 261_105_000 picoseconds.
        Weight::from_parts(312_305_734, 0)
            // Standard Error: 346_673
            .saturating_add(Weight::from_parts(263_603_053, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 522_644_000 picoseconds.
        Weight::from_parts(530_554_000, 0)
            // Standard Error: 63_470
            .saturating_add(Weight::from_parts(25_410_700, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_952_104_000 picoseconds.
        Weight::from_parts(2_069_900_506, 0)
            // Standard Error: 412_026
            .saturating_add(Weight::from_parts(234_547_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 123_537_000 picoseconds.
        Weight::from_parts(104_620_601, 0)
            // Standard Error: 1_182
            .saturating_add(Weight::from_parts(498_229, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 114_626_000 picoseconds.
        Weight::from_parts(117_727_506, 0)
            // Standard Error: 1_001
            .saturating_add(Weight::from_parts(480_404, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_544_000 picoseconds.
        Weight::from_parts(142_216_475, 0)
            // Standard Error: 345_701
            .saturating_add(Weight::from_parts(142_183_846, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 114_136_000 picoseconds.
        Weight::from_parts(117_980_000, 0)
            // Standard Error: 2_632
            .saturating_add(Weight::from_parts(701_332, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_786_000 picoseconds.
        Weight::from_parts(113_942_660, 0)
            // Standard Error: 890
            .saturating_add(Weight::from_parts(480_705, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_318_000 picoseconds.
        Weight::from_parts(106_152_416, 0)
            // Standard Error: 902
            .saturating_add(Weight::from_parts(488_394, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_103_000 picoseconds.
        Weight::from_parts(90_981_521, 0)
            // Standard Error: 262_157
            .saturating_add(Weight::from_parts(85_653_037, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_180_000 picoseconds.
        Weight::from_parts(97_007_581, 0)
            // Standard Error: 281_978
            .saturating_add(Weight::from_parts(83_685_172, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_331_000 picoseconds.
        Weight::from_parts(102_081_765, 0)
            // Standard Error: 276_975
            .saturating_add(Weight::from_parts(83_070_796, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 577_739_000 picoseconds.
        Weight::from_parts(671_791_056, 0)
            // Standard Error: 409_996
            .saturating_add(Weight::from_parts(107_077_852, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 636_364_000 picoseconds.
        Weight::from_parts(704_115_538, 0)
            // Standard Error: 2_300
            .saturating_add(Weight::from_parts(112_680, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_367_299_000 picoseconds.
        Weight::from_parts(2_512_951_187, 0)
            // Standard Error: 452_043
            .saturating_add(Weight::from_parts(125_707_578, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_567_734_000 picoseconds.
        Weight::from_parts(2_438_122_902, 0)
            // Standard Error: 11_962
            .saturating_add(Weight::from_parts(12_487_691, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_919_000 picoseconds.
        Weight::from_parts(114_983_534, 0)
            // Standard Error: 285_687
            .saturating_add(Weight::from_parts(105_923_678, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 160_184_000 picoseconds.
        Weight::from_parts(161_901_000, 0)
            // Standard Error: 50_780
            .saturating_add(Weight::from_parts(30_686_739, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_732_000 picoseconds.
        Weight::from_parts(99_863_182, 0)
            // Standard Error: 239_449
            .saturating_add(Weight::from_parts(82_061_540, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 177_157_000 picoseconds.
        Weight::from_parts(181_837_000, 0)
            // Standard Error: 1_507_304
            .saturating_add(Weight::from_parts(279_247_460, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 111_603_000 picoseconds.
        Weight::from_parts(171_690_280, 0)
            // Standard Error: 314_659
            .saturating_add(Weight::from_parts(326_930_887, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_556_083_000 picoseconds.
        Weight::from_parts(881_593_384, 0)
            // Standard Error: 89_661
            .saturating_add(Weight::from_parts(25_096_671, 0).saturating_mul(p.into()))
            // Standard Error: 89_707
            .saturating_add(Weight::from_parts(171_082_804, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_440_000 picoseconds.
        Weight::from_parts(158_253_767, 0)
            // Standard Error: 309_332
            .saturating_add(Weight::from_parts(333_689_354, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 53_406_603_000 picoseconds.
        Weight::from_parts(53_509_778_000, 0)
            // Standard Error: 300_731
            .saturating_add(Weight::from_parts(8_483_458, 0).saturating_mul(p.into()))
            // Standard Error: 300_717
            .saturating_add(Weight::from_parts(154_938_585, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 97_451_000 picoseconds.
        Weight::from_parts(154_274_505, 1131)
            // Standard Error: 15_264
            .saturating_add(Weight::from_parts(14_411_143, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 99_024_000 picoseconds.
        Weight::from_parts(102_745_000, 1131)
            // Standard Error: 24_705
            .saturating_add(Weight::from_parts(42_427_452, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 7_387_512_000 picoseconds.
        Weight::from_parts(7_335_876_420, 5069931)
            // Standard Error: 48_896
            .saturating_add(Weight::from_parts(42_587_783, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1820 + p * (65580 ±0)`
        //  Estimated: `1946 + p * (75482 ±0)`
        // Minimum execution time: 98_601_000 picoseconds.
        Weight::from_parts(100_445_000, 1946)
            // Standard Error: 50_920
            .saturating_add(Weight::from_parts(55_814_010, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 106_085_000 picoseconds.
        Weight::from_parts(111_925_649, 1131)
            // Standard Error: 52_940
            .saturating_add(Weight::from_parts(42_934_839, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 626_714_000 picoseconds.
        Weight::from_parts(665_886_286, 1496)
            // Standard Error: 243_001
            .saturating_add(Weight::from_parts(51_879_221, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_092_471_000 picoseconds.
        Weight::from_parts(1_180_260_163, 317931)
            // Standard Error: 223_197
            .saturating_add(Weight::from_parts(51_311_986, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_582_000 picoseconds.
        Weight::from_parts(6_122_450, 0)
            // Standard Error: 333_948
            .saturating_add(Weight::from_parts(75_586_013, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_463_527_000 picoseconds.
        Weight::from_parts(4_368_070_712, 0)
            // Standard Error: 92_790
            .saturating_add(Weight::from_parts(4_873_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_484_551_000 picoseconds.
        Weight::from_parts(4_394_526_160, 0)
            // Standard Error: 76_062
            .saturating_add(Weight::from_parts(4_620_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_176_299_000 picoseconds.
        Weight::from_parts(11_533_122_806, 0)
            // Standard Error: 135_663
            .saturating_add(Weight::from_parts(9_957_410, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_072_266_000 picoseconds.
        Weight::from_parts(11_158_381_663, 0)
            // Standard Error: 250_007
            .saturating_add(Weight::from_parts(11_909_439, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_248_000 picoseconds.
        Weight::from_parts(2_286_000, 0)
            // Standard Error: 7_099
            .saturating_add(Weight::from_parts(3_791_275, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_371_000 picoseconds.
        Weight::from_parts(1_550_887, 0)
            // Standard Error: 9_220
            .saturating_add(Weight::from_parts(3_106_468, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_308_000 picoseconds.
        Weight::from_parts(3_224_842, 0)
            // Standard Error: 1_355
            .saturating_add(Weight::from_parts(1_584_500, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_276_000 picoseconds.
        Weight::from_parts(2_340_000, 0)
            // Standard Error: 9_571
            .saturating_add(Weight::from_parts(2_941_472, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_373_000 picoseconds.
        Weight::from_parts(7_911_478, 0)
            // Standard Error: 22_429
            .saturating_add(Weight::from_parts(4_756_629, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_144_000 picoseconds.
        Weight::from_parts(5_692_999, 0)
            // Standard Error: 1_298
            .saturating_add(Weight::from_parts(171_786, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_425_000 picoseconds.
        Weight::from_parts(4_802_528, 0)
            // Standard Error: 7_260
            .saturating_add(Weight::from_parts(2_604_184, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_604_184 -
            2_424_629, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_363_000 picoseconds.
        Weight::from_parts(4_922_988, 0)
            // Standard Error: 12_429
            .saturating_add(Weight::from_parts(2_424_629, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_708_000 picoseconds.
        Weight::from_parts(15_770_711, 0)
            // Standard Error: 28_957
            .saturating_add(Weight::from_parts(10_162_344, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_353_000 picoseconds.
        Weight::from_parts(2_831_366, 0)
            // Standard Error: 5_790
            .saturating_add(Weight::from_parts(1_288_753, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_386_000 picoseconds.
        Weight::from_parts(5_699_848, 0)
            // Standard Error: 14
            .saturating_add(Weight::from_parts(18, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_236_000 picoseconds.
        Weight::from_parts(8_933_466, 0)
            // Standard Error: 2_922
            .saturating_add(Weight::from_parts(517_570, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_307_000 picoseconds.
        Weight::from_parts(8_059_769, 0)
            // Standard Error: 5_936
            .saturating_add(Weight::from_parts(1_213_364, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_283_000 picoseconds.
        Weight::from_parts(9_069_039, 0)
            // Standard Error: 6_335
            .saturating_add(Weight::from_parts(1_192_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_487_000 picoseconds.
        Weight::from_parts(3_352_093, 0)
            // Standard Error: 5_860
            .saturating_add(Weight::from_parts(819_442, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_372_000 picoseconds.
        Weight::from_parts(6_474_000, 0)
            // Standard Error: 8_119
            .saturating_add(Weight::from_parts(1_417_391, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_507_000 picoseconds.
        Weight::from_parts(5_603_008, 0)
            // Standard Error: 9_086
            .saturating_add(Weight::from_parts(6_255_060, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_315_000 picoseconds.
        Weight::from_parts(2_414_000, 0)
            // Standard Error: 4_741
            .saturating_add(Weight::from_parts(3_312_008, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_226_000 picoseconds.
        Weight::from_parts(2_319_000, 0)
            // Standard Error: 4_679
            .saturating_add(Weight::from_parts(3_149_772, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_312_000 picoseconds.
        Weight::from_parts(2_371_000, 0)
            // Standard Error: 4_966
            .saturating_add(Weight::from_parts(3_143_849, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_239_000 picoseconds.
        Weight::from_parts(2_370_000, 0)
            // Standard Error: 3_641
            .saturating_add(Weight::from_parts(2_713_806, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_280_000 picoseconds.
        Weight::from_parts(2_339_000, 0)
            // Standard Error: 3_905
            .saturating_add(Weight::from_parts(681_773, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_270_000 picoseconds.
        Weight::from_parts(1_331_910, 0)
            // Standard Error: 4_433
            .saturating_add(Weight::from_parts(457_864, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_268_000 picoseconds.
        Weight::from_parts(2_325_000, 0)
            // Standard Error: 7_639
            .saturating_add(Weight::from_parts(1_875_510, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_277_000 picoseconds.
        Weight::from_parts(2_356_000, 0)
            // Standard Error: 5_888
            .saturating_add(Weight::from_parts(1_226_071, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_257_000 picoseconds.
        Weight::from_parts(1_452_510, 0)
            // Standard Error: 4_107
            .saturating_add(Weight::from_parts(421_422, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_236_000 picoseconds.
        Weight::from_parts(1_566_774, 0)
            // Standard Error: 3_256
            .saturating_add(Weight::from_parts(416_288, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_341_000 picoseconds.
        Weight::from_parts(2_395_000, 0)
            // Standard Error: 4_377
            .saturating_add(Weight::from_parts(543_317, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_325_000 picoseconds.
        Weight::from_parts(401_036, 0)
            // Standard Error: 5_298
            .saturating_add(Weight::from_parts(609_500, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_350_000 picoseconds.
        Weight::from_parts(431_298, 0)
            // Standard Error: 5_913
            .saturating_add(Weight::from_parts(550_272, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_238_000 picoseconds.
        Weight::from_parts(1_908_769, 0)
            // Standard Error: 2_636
            .saturating_add(Weight::from_parts(347_804, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_334_000 picoseconds.
        Weight::from_parts(2_639_864, 0)
            // Standard Error: 1_886
            .saturating_add(Weight::from_parts(179_046, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_294_000 picoseconds.
        Weight::from_parts(2_435_807, 0)
            // Standard Error: 2_245
            .saturating_add(Weight::from_parts(210_426, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_347_000 picoseconds.
        Weight::from_parts(2_410_000, 0)
            // Standard Error: 8_257
            .saturating_add(Weight::from_parts(1_803_397, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_293_000 picoseconds.
        Weight::from_parts(2_333_000, 0)
            // Standard Error: 7_226
            .saturating_add(Weight::from_parts(1_160_797, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_402_000 picoseconds.
        Weight::from_parts(2_424_000, 0)
            // Standard Error: 8_636
            .saturating_add(Weight::from_parts(1_789_970, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_234_000 picoseconds.
        Weight::from_parts(2_364_000, 0)
            // Standard Error: 6_609
            .saturating_add(Weight::from_parts(1_166_729, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_293_000 picoseconds.
        Weight::from_parts(2_350_000, 0)
            // Standard Error: 9_318
            .saturating_add(Weight::from_parts(1_914_258, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_335_000 picoseconds.
        Weight::from_parts(2_411_000, 0)
            // Standard Error: 7_286
            .saturating_add(Weight::from_parts(1_213_289, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_300_000 picoseconds.
        Weight::from_parts(2_349_000, 0)
            // Standard Error: 9_759
            .saturating_add(Weight::from_parts(1_833_544, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_271_000 picoseconds.
        Weight::from_parts(2_334_000, 0)
            // Standard Error: 6_908
            .saturating_add(Weight::from_parts(1_139_166, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_347_000 picoseconds.
        Weight::from_parts(2_368_000, 0)
            // Standard Error: 11_018
            .saturating_add(Weight::from_parts(1_829_950, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_281_000 picoseconds.
        Weight::from_parts(2_329_000, 0)
            // Standard Error: 8_074
            .saturating_add(Weight::from_parts(1_272_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_279_000 picoseconds.
        Weight::from_parts(2_369_000, 0)
            // Standard Error: 9_263
            .saturating_add(Weight::from_parts(1_989_691, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_243_000 picoseconds.
        Weight::from_parts(2_309_000, 0)
            // Standard Error: 7_128
            .saturating_add(Weight::from_parts(1_192_922, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_355_000 picoseconds.
        Weight::from_parts(2_407_000, 0)
            // Standard Error: 9_153
            .saturating_add(Weight::from_parts(1_914_434, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_306_000 picoseconds.
        Weight::from_parts(2_381_000, 0)
            // Standard Error: 6_637
            .saturating_add(Weight::from_parts(1_177_037, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_289_000 picoseconds.
        Weight::from_parts(2_334_000, 0)
            // Standard Error: 9_556
            .saturating_add(Weight::from_parts(1_936_207, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_308_000 picoseconds.
        Weight::from_parts(2_389_000, 0)
            // Standard Error: 8_346
            .saturating_add(Weight::from_parts(1_249_124, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_310_000 picoseconds.
        Weight::from_parts(2_358_000, 0)
            // Standard Error: 9_917
            .saturating_add(Weight::from_parts(1_888_073, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_362_000 picoseconds.
        Weight::from_parts(2_433_000, 0)
            // Standard Error: 7_082
            .saturating_add(Weight::from_parts(1_187_437, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_293_000 picoseconds.
        Weight::from_parts(2_329_000, 0)
            // Standard Error: 8_917
            .saturating_add(Weight::from_parts(1_819_888, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_294_000 picoseconds.
        Weight::from_parts(2_315_000, 0)
            // Standard Error: 7_590
            .saturating_add(Weight::from_parts(1_246_696, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_370_000 picoseconds.
        Weight::from_parts(2_404_000, 0)
            // Standard Error: 8_235
            .saturating_add(Weight::from_parts(1_371_951, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_319_000 picoseconds.
        Weight::from_parts(2_349_000, 0)
            // Standard Error: 5_433
            .saturating_add(Weight::from_parts(678_931, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_288_000 picoseconds.
        Weight::from_parts(2_367_000, 0)
            // Standard Error: 8_564
            .saturating_add(Weight::from_parts(1_326_966, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_367_000 picoseconds.
        Weight::from_parts(2_394_000, 0)
            // Standard Error: 4_330
            .saturating_add(Weight::from_parts(632_029, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_415_000 picoseconds.
        Weight::from_parts(2_441_000, 0)
            // Standard Error: 8_857
            .saturating_add(Weight::from_parts(1_760_125, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_284_000 picoseconds.
        Weight::from_parts(2_339_000, 0)
            // Standard Error: 8_204
            .saturating_add(Weight::from_parts(1_233_365, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_279_000 picoseconds.
        Weight::from_parts(9_548_032, 0)
            // Standard Error: 21_796
            .saturating_add(Weight::from_parts(2_068_026, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_299_000 picoseconds.
        Weight::from_parts(3_167_232, 0)
            // Standard Error: 13_869
            .saturating_add(Weight::from_parts(2_288_072, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_268_000 picoseconds.
        Weight::from_parts(4_234_523, 0)
            // Standard Error: 23_687
            .saturating_add(Weight::from_parts(2_712_849, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_303_000 picoseconds.
        Weight::from_parts(8_243_950, 0)
            // Standard Error: 22_534
            .saturating_add(Weight::from_parts(1_873_975, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_281_000 picoseconds.
        Weight::from_parts(12_581_368, 0)
            // Standard Error: 47_569
            .saturating_add(Weight::from_parts(8_400_473, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_354_000 picoseconds.
        Weight::from_parts(10_509_119, 0)
            // Standard Error: 54_252
            .saturating_add(Weight::from_parts(6_913_210, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_317_000 picoseconds.
        Weight::from_parts(6_128_702, 0)
            // Standard Error: 17_874
            .saturating_add(Weight::from_parts(2_659_128, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_341_000 picoseconds.
        Weight::from_parts(3_899_500, 0)
            // Standard Error: 17_305
            .saturating_add(Weight::from_parts(2_260_843, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_284_000 picoseconds.
        Weight::from_parts(2_384_000, 0)
            // Standard Error: 7_955
            .saturating_add(Weight::from_parts(1_362_993, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_228_000 picoseconds.
        Weight::from_parts(2_344_000, 0)
            // Standard Error: 5_020
            .saturating_add(Weight::from_parts(692_438, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_273_000 picoseconds.
        Weight::from_parts(2_306_000, 0)
            // Standard Error: 9_545
            .saturating_add(Weight::from_parts(1_409_717, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_268_000 picoseconds.
        Weight::from_parts(2_360_000, 0)
            // Standard Error: 5_713
            .saturating_add(Weight::from_parts(726_050, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_295_000 picoseconds.
        Weight::from_parts(2_370_000, 0)
            // Standard Error: 8_435
            .saturating_add(Weight::from_parts(1_422_576, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_259_000 picoseconds.
        Weight::from_parts(2_335_000, 0)
            // Standard Error: 6_228
            .saturating_add(Weight::from_parts(812_631, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_278_000 picoseconds.
        Weight::from_parts(2_344_000, 0)
            // Standard Error: 7_307
            .saturating_add(Weight::from_parts(1_202_531, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_227_000 picoseconds.
        Weight::from_parts(2_323_000, 0)
            // Standard Error: 5_016
            .saturating_add(Weight::from_parts(682_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_288_000 picoseconds.
        Weight::from_parts(2_368_000, 0)
            // Standard Error: 7_399
            .saturating_add(Weight::from_parts(1_177_857, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_311_000 picoseconds.
        Weight::from_parts(2_398_000, 0)
            // Standard Error: 4_382
            .saturating_add(Weight::from_parts(638_367, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_306_000 picoseconds.
        Weight::from_parts(2_336_000, 0)
            // Standard Error: 6_742
            .saturating_add(Weight::from_parts(1_190_996, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_190_000 picoseconds.
        Weight::from_parts(2_294_000, 0)
            // Standard Error: 3_546
            .saturating_add(Weight::from_parts(627_494, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_266_000 picoseconds.
        Weight::from_parts(2_336_000, 0)
            // Standard Error: 7_852
            .saturating_add(Weight::from_parts(1_192_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_268_000 picoseconds.
        Weight::from_parts(2_359_000, 0)
            // Standard Error: 4_172
            .saturating_add(Weight::from_parts(627_128, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_341_000 picoseconds.
        Weight::from_parts(2_416_000, 0)
            // Standard Error: 7_493
            .saturating_add(Weight::from_parts(1_162_802, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_310_000 picoseconds.
        Weight::from_parts(2_344_000, 0)
            // Standard Error: 5_002
            .saturating_add(Weight::from_parts(664_397, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1090`
        //  Estimated: `6196`
        // Minimum execution time: 80_766_000 picoseconds.
        Weight::from_parts(83_124_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `858`
        //  Estimated: `4323`
        // Minimum execution time: 49_194_000 picoseconds.
        Weight::from_parts(51_250_000, 4323)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1009`
        //  Estimated: `6196`
        // Minimum execution time: 98_018_000 picoseconds.
        Weight::from_parts(101_876_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `694`
        //  Estimated: `4159`
        // Minimum execution time: 32_626_000 picoseconds.
        Weight::from_parts(34_442_000, 4159)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `937`
        //  Estimated: `4402`
        // Minimum execution time: 49_344_000 picoseconds.
        Weight::from_parts(52_997_000, 4402)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_520_000 picoseconds.
        Weight::from_parts(3_688_000, 3545)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2109`
        //  Estimated: `8049`
        // Minimum execution time: 140_984_000 picoseconds.
        Weight::from_parts(145_199_000, 8049)
            .saturating_add(RocksDbWeight::get().reads(17_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1294`
        //  Estimated: `7234`
        // Minimum execution time: 108_379_000 picoseconds.
        Weight::from_parts(115_122_000, 7234)
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
}
