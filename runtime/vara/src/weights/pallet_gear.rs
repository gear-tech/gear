// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-04, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_error(r: u32, ) -> Weight;
    fn gr_status_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 761 nanoseconds.
        Weight::from_ref_time(794_000)
            // Standard Error: 960
            .saturating_add(Weight::from_ref_time(212_224).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `145 + c * (1024 ±0)`
        //  Estimated: `2617 + c * (1024 ±0)`
        // Minimum execution time: 3_067 nanoseconds.
        Weight::from_parts(3_132_000, 2617)
            // Standard Error: 2_641
            .saturating_add(Weight::from_ref_time(696_372).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 48_163 nanoseconds.
        Weight::from_ref_time(102_637_811)
            // Standard Error: 7_418
            .saturating_add(Weight::from_ref_time(2_284_334).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `918`
        //  Estimated: `17301`
        // Minimum execution time: 52_476 nanoseconds.
        Weight::from_parts(53_862_000, 17301)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3290`
        // Minimum execution time: 57_788 nanoseconds.
        Weight::from_parts(31_642_282, 3290)
            // Standard Error: 47_873
            .saturating_add(Weight::from_ref_time(53_067_634).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `675`
        //  Estimated: `18282`
        // Minimum execution time: 47_046 nanoseconds.
        Weight::from_parts(65_865_510, 18282)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_272).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `126`
        //  Estimated: `14142`
        // Minimum execution time: 9_629_458 nanoseconds.
        Weight::from_parts(128_023_124, 14142)
            // Standard Error: 164_368
            .saturating_add(Weight::from_ref_time(54_589_020).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_ref_time(2_268).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `375`
        //  Estimated: `14765`
        // Minimum execution time: 48_557 nanoseconds.
        Weight::from_parts(28_383_814, 14765)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(1_134).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1113`
        //  Estimated: `31447`
        // Minimum execution time: 72_760 nanoseconds.
        Weight::from_parts(61_055_469, 31447)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(1_145).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `982`
        //  Estimated: `49130`
        // Minimum execution time: 278_465 nanoseconds.
        Weight::from_parts(289_144_814, 49130)
            // Standard Error: 930
            .saturating_add(Weight::from_ref_time(3_745).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(26_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `982`
        //  Estimated: `49018`
        // Minimum execution time: 289_940 nanoseconds.
        Weight::from_parts(301_064_878, 49018)
            // Standard Error: 1_069
            .saturating_add(Weight::from_ref_time(4_413).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(26_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `243 + c * (1075 ±0)`
        //  Estimated: `2973 + c * (2150 ±0)`
        // Minimum execution time: 41_220 nanoseconds.
        Weight::from_parts(41_558_000, 2973)
            // Standard Error: 43_154
            .saturating_add(Weight::from_ref_time(51_043_357).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_proof_size(2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_620 nanoseconds.
        Weight::from_ref_time(85_723_324)
            // Standard Error: 302_409
            .saturating_add(Weight::from_ref_time(129_670_159).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 198_883 nanoseconds.
        Weight::from_ref_time(180_549_249)
            // Standard Error: 279_283
            .saturating_add(Weight::from_ref_time(127_604_915).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_282 nanoseconds.
        Weight::from_ref_time(85_230_381)
            // Standard Error: 9_033
            .saturating_add(Weight::from_ref_time(3_509_899).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 131_615 nanoseconds.
        Weight::from_ref_time(168_307_579)
            // Standard Error: 20_410
            .saturating_add(Weight::from_ref_time(3_513_779).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_244 nanoseconds.
        Weight::from_ref_time(133_381_524)
            // Standard Error: 364_215
            .saturating_add(Weight::from_ref_time(175_263_065).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_871 nanoseconds.
        Weight::from_ref_time(83_728_178)
            // Standard Error: 237_530
            .saturating_add(Weight::from_ref_time(175_396_894).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_344 nanoseconds.
        Weight::from_ref_time(80_814_311)
            // Standard Error: 242_865
            .saturating_add(Weight::from_ref_time(176_183_080).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_550 nanoseconds.
        Weight::from_ref_time(86_713_676)
            // Standard Error: 238_659
            .saturating_add(Weight::from_ref_time(174_365_605).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_212 nanoseconds.
        Weight::from_ref_time(81_118_155)
            // Standard Error: 247_291
            .saturating_add(Weight::from_ref_time(175_847_363).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_148 nanoseconds.
        Weight::from_ref_time(83_939_496)
            // Standard Error: 280_041
            .saturating_add(Weight::from_ref_time(175_400_021).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_682 nanoseconds.
        Weight::from_ref_time(85_424_687)
            // Standard Error: 255_412
            .saturating_add(Weight::from_ref_time(174_010_282).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_825 nanoseconds.
        Weight::from_ref_time(86_478_699)
            // Standard Error: 252_429
            .saturating_add(Weight::from_ref_time(177_432_143).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_170 nanoseconds.
        Weight::from_ref_time(84_210_822)
            // Standard Error: 251_283
            .saturating_add(Weight::from_ref_time(180_568_190).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 557_635 nanoseconds.
        Weight::from_ref_time(634_644_194)
            // Standard Error: 400_411
            .saturating_add(Weight::from_ref_time(239_352_408).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 828_353 nanoseconds.
        Weight::from_ref_time(837_715_000)
            // Standard Error: 60_739
            .saturating_add(Weight::from_ref_time(14_146_957).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_842 nanoseconds.
        Weight::from_ref_time(78_011_099)
            // Standard Error: 304_537
            .saturating_add(Weight::from_ref_time(174_648_210).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_383 nanoseconds.
        Weight::from_ref_time(85_071_672)
            // Standard Error: 277_230
            .saturating_add(Weight::from_ref_time(175_739_698).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_759 nanoseconds.
        Weight::from_ref_time(97_315_812)
            // Standard Error: 238_252
            .saturating_add(Weight::from_ref_time(238_074_206).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_613 nanoseconds.
        Weight::from_ref_time(73_884_051)
            // Standard Error: 231_926
            .saturating_add(Weight::from_ref_time(188_042_953).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_706_952 nanoseconds.
        Weight::from_ref_time(3_841_642_964)
            // Standard Error: 288_960
            .saturating_add(Weight::from_ref_time(247_877_210).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 520_139 nanoseconds.
        Weight::from_ref_time(523_195_000)
            // Standard Error: 61_816
            .saturating_add(Weight::from_ref_time(29_665_714).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_478 nanoseconds.
        Weight::from_ref_time(131_497_693)
            // Standard Error: 299_463
            .saturating_add(Weight::from_ref_time(352_624_503).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 437_137 nanoseconds.
        Weight::from_ref_time(440_652_000)
            // Standard Error: 59_951
            .saturating_add(Weight::from_ref_time(21_224_751).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 242_701 nanoseconds.
        Weight::from_ref_time(305_043_647)
            // Standard Error: 244_718
            .saturating_add(Weight::from_ref_time(369_921_323).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 471_909 nanoseconds.
        Weight::from_ref_time(481_316_000)
            // Standard Error: 51_289
            .saturating_add(Weight::from_ref_time(21_001_799).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_287 nanoseconds.
        Weight::from_ref_time(84_806_134)
            // Standard Error: 250_891
            .saturating_add(Weight::from_ref_time(17_607_365).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_681 nanoseconds.
        Weight::from_ref_time(86_530_601)
            // Standard Error: 774
            .saturating_add(Weight::from_ref_time(423_018).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_835 nanoseconds.
        Weight::from_ref_time(137_479_664)
            // Standard Error: 331_995
            .saturating_add(Weight::from_ref_time(243_721_746).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_910 nanoseconds.
        Weight::from_ref_time(99_515_000)
            // Standard Error: 2_501
            .saturating_add(Weight::from_ref_time(605_467).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_365 nanoseconds.
        Weight::from_ref_time(91_586_508)
            // Standard Error: 253_416
            .saturating_add(Weight::from_ref_time(11_330_891).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_342 nanoseconds.
        Weight::from_ref_time(86_985_218)
            // Standard Error: 729
            .saturating_add(Weight::from_ref_time(420_626).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_176 nanoseconds.
        Weight::from_ref_time(85_895_984)
            // Standard Error: 315_843
            .saturating_add(Weight::from_ref_time(175_959_029).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_180 nanoseconds.
        Weight::from_ref_time(87_329_873)
            // Standard Error: 255_146
            .saturating_add(Weight::from_ref_time(175_210_834).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 553_563 nanoseconds.
        Weight::from_ref_time(609_509_128)
            // Standard Error: 401_197
            .saturating_add(Weight::from_ref_time(187_924_542).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 574_867 nanoseconds.
        Weight::from_ref_time(587_172_863)
            // Standard Error: 954
            .saturating_add(Weight::from_ref_time(121_260).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_153_438 nanoseconds.
        Weight::from_ref_time(4_303_178_639)
            // Standard Error: 265_183
            .saturating_add(Weight::from_ref_time(192_266_698).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 939_474 nanoseconds.
        Weight::from_ref_time(836_256_075)
            // Standard Error: 10_783
            .saturating_add(Weight::from_ref_time(12_584_153).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_912 nanoseconds.
        Weight::from_ref_time(107_702_879)
            // Standard Error: 316_515
            .saturating_add(Weight::from_ref_time(187_518_617).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 260_251 nanoseconds.
        Weight::from_ref_time(265_607_000)
            // Standard Error: 47_176
            .saturating_add(Weight::from_ref_time(25_735_678).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_526 nanoseconds.
        Weight::from_ref_time(103_383_863)
            // Standard Error: 281_743
            .saturating_add(Weight::from_ref_time(229_630_385).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_646 nanoseconds.
        Weight::from_ref_time(77_387_247)
            // Standard Error: 240_622
            .saturating_add(Weight::from_ref_time(177_210_179).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_732 nanoseconds.
        Weight::from_ref_time(86_746_559)
            // Standard Error: 276_411
            .saturating_add(Weight::from_ref_time(24_364_740).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_768 nanoseconds.
        Weight::from_ref_time(86_254_018)
            // Standard Error: 270_944
            .saturating_add(Weight::from_ref_time(13_674_081).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_973 nanoseconds.
        Weight::from_ref_time(86_357_653)
            // Standard Error: 275_003
            .saturating_add(Weight::from_ref_time(14_931_046).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_826 nanoseconds.
        Weight::from_ref_time(86_467_016)
            // Standard Error: 264_613
            .saturating_add(Weight::from_ref_time(14_260_583).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_605 nanoseconds.
        Weight::from_ref_time(86_532_340)
            // Standard Error: 278_759
            .saturating_add(Weight::from_ref_time(14_028_659).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 132_543 nanoseconds.
        Weight::from_ref_time(192_378_038)
            // Standard Error: 249_057
            .saturating_add(Weight::from_ref_time(254_777_085).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_114 nanoseconds.
        Weight::from_ref_time(156_606_434)
            // Standard Error: 295_787
            .saturating_add(Weight::from_ref_time(425_470_652).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_256_334 nanoseconds.
        Weight::from_ref_time(43_465_935_000)
            // Standard Error: 263_063
            .saturating_add(Weight::from_ref_time(7_902_649).saturating_mul(p.into()))
            // Standard Error: 263_050
            .saturating_add(Weight::from_ref_time(152_656_694).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 81_807 nanoseconds.
        Weight::from_parts(121_821_266, 141)
            // Standard Error: 7_125
            .saturating_add(Weight::from_ref_time(11_656_827).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 83_262 nanoseconds.
        Weight::from_parts(84_399_000, 141)
            // Standard Error: 36_484
            .saturating_add(Weight::from_ref_time(34_711_742).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5068941`
        // Minimum execution time: 6_028_492 nanoseconds.
        Weight::from_parts(5_810_695_816, 5068941)
            // Standard Error: 54_356
            .saturating_add(Weight::from_ref_time(36_889_507).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65704 ±0)`
        //  Estimated: `949 + p * (75606 ±0)`
        // Minimum execution time: 84_317 nanoseconds.
        Weight::from_parts(85_299_000, 949)
            // Standard Error: 33_523
            .saturating_add(Weight::from_ref_time(43_951_462).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(75606).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `506 + p * (9883 ±2)`
        // Minimum execution time: 95_734 nanoseconds.
        Weight::from_parts(99_957_245, 506)
            // Standard Error: 59_825
            .saturating_add(Weight::from_ref_time(35_208_171).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `506 + p * (9883 ±2)`
        // Minimum execution time: 586_697 nanoseconds.
        Weight::from_parts(579_394_810, 506)
            // Standard Error: 182_196
            .saturating_add(Weight::from_ref_time(42_500_948).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `316941`
        // Minimum execution time: 983_916 nanoseconds.
        Weight::from_parts(1_010_515_733, 316941)
            // Standard Error: 143_944
            .saturating_add(Weight::from_ref_time(42_508_767).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_226_275 nanoseconds.
        Weight::from_ref_time(4_225_648_608)
            // Standard Error: 10_161
            .saturating_add(Weight::from_ref_time(3_355_980).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_228_938 nanoseconds.
        Weight::from_ref_time(4_228_073_783)
            // Standard Error: 10_035
            .saturating_add(Weight::from_ref_time(3_370_264).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_719_113 nanoseconds.
        Weight::from_ref_time(9_865_862_677)
            // Standard Error: 186_470
            .saturating_add(Weight::from_ref_time(16_510_034).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_539_429 nanoseconds.
        Weight::from_ref_time(8_971_089_150)
            // Standard Error: 149_624
            .saturating_add(Weight::from_ref_time(16_140_559).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_017 nanoseconds.
        Weight::from_ref_time(2_162_000)
            // Standard Error: 8_150
            .saturating_add(Weight::from_ref_time(3_810_640).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_005 nanoseconds.
        Weight::from_ref_time(2_091_000)
            // Standard Error: 7_804
            .saturating_add(Weight::from_ref_time(3_085_440).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_948 nanoseconds.
        Weight::from_ref_time(3_039_323)
            // Standard Error: 916
            .saturating_add(Weight::from_ref_time(1_573_630).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_945 nanoseconds.
        Weight::from_ref_time(2_017_000)
            // Standard Error: 9_300
            .saturating_add(Weight::from_ref_time(2_940_862).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_039 nanoseconds.
        Weight::from_ref_time(7_505_360)
            // Standard Error: 27_099
            .saturating_add(Weight::from_ref_time(4_937_410).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_690 nanoseconds.
        Weight::from_ref_time(4_745_487)
            // Standard Error: 1_598
            .saturating_add(Weight::from_ref_time(190_014).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_128 nanoseconds.
        Weight::from_ref_time(5_580_087)
            // Standard Error: 8_909
            .saturating_add(Weight::from_ref_time(2_581_842).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(2_581_842 -
            2_429_530).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_108 nanoseconds.
        Weight::from_ref_time(5_054_933)
            // Standard Error: 12_863
            .saturating_add(Weight::from_ref_time(2_429_530).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_370 nanoseconds.
        Weight::from_ref_time(18_616_562)
            // Standard Error: 29_254
            .saturating_add(Weight::from_ref_time(10_375_535).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_168 nanoseconds.
        Weight::from_ref_time(3_775_924)
            // Standard Error: 6_558
            .saturating_add(Weight::from_ref_time(1_321_364).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_006 nanoseconds.
        Weight::from_ref_time(5_256_467)
            // Standard Error: 12
            .saturating_add(Weight::from_ref_time(57).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_019 nanoseconds.
        Weight::from_ref_time(1_408_120)
            // Standard Error: 3_519
            .saturating_add(Weight::from_ref_time(298_892).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_058 nanoseconds.
        Weight::from_ref_time(2_092_000)
            // Standard Error: 7_004
            .saturating_add(Weight::from_ref_time(892_803).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_976 nanoseconds.
        Weight::from_ref_time(2_078_000)
            // Standard Error: 6_769
            .saturating_add(Weight::from_ref_time(930_108).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_803 nanoseconds.
        Weight::from_ref_time(1_190_711)
            // Standard Error: 9_230
            .saturating_add(Weight::from_ref_time(936_198).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_683 nanoseconds.
        Weight::from_ref_time(5_732_000)
            // Standard Error: 8_615
            .saturating_add(Weight::from_ref_time(1_560_589).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_114 nanoseconds.
        Weight::from_ref_time(2_722_110)
            // Standard Error: 11_589
            .saturating_add(Weight::from_ref_time(7_043_740).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_052 nanoseconds.
        Weight::from_ref_time(2_116_000)
            // Standard Error: 6_212
            .saturating_add(Weight::from_ref_time(3_598_868).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_998 nanoseconds.
        Weight::from_ref_time(2_072_000)
            // Standard Error: 5_918
            .saturating_add(Weight::from_ref_time(3_311_778).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_050 nanoseconds.
        Weight::from_ref_time(2_099_000)
            // Standard Error: 5_716
            .saturating_add(Weight::from_ref_time(3_268_202).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_011 nanoseconds.
        Weight::from_ref_time(2_050_000)
            // Standard Error: 5_135
            .saturating_add(Weight::from_ref_time(2_811_963).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_009 nanoseconds.
        Weight::from_ref_time(2_124_000)
            // Standard Error: 3_335
            .saturating_add(Weight::from_ref_time(599_710).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_989 nanoseconds.
        Weight::from_ref_time(1_302_632)
            // Standard Error: 3_398
            .saturating_add(Weight::from_ref_time(415_577).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_982 nanoseconds.
        Weight::from_ref_time(2_046_000)
            // Standard Error: 12_618
            .saturating_add(Weight::from_ref_time(1_899_867).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_965 nanoseconds.
        Weight::from_ref_time(2_013_000)
            // Standard Error: 8_787
            .saturating_add(Weight::from_ref_time(1_153_841).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_995 nanoseconds.
        Weight::from_ref_time(1_453_796)
            // Standard Error: 3_114
            .saturating_add(Weight::from_ref_time(327_471).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_999 nanoseconds.
        Weight::from_ref_time(2_357_081)
            // Standard Error: 2_303
            .saturating_add(Weight::from_ref_time(189_759).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_943 nanoseconds.
        Weight::from_ref_time(2_328_805)
            // Standard Error: 1_980
            .saturating_add(Weight::from_ref_time(196_714).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_016 nanoseconds.
        Weight::from_ref_time(2_044_000)
            // Standard Error: 12_976
            .saturating_add(Weight::from_ref_time(1_999_087).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_010 nanoseconds.
        Weight::from_ref_time(2_050_000)
            // Standard Error: 8_186
            .saturating_add(Weight::from_ref_time(1_216_597).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_018 nanoseconds.
        Weight::from_ref_time(2_085_000)
            // Standard Error: 11_416
            .saturating_add(Weight::from_ref_time(1_983_732).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_976 nanoseconds.
        Weight::from_ref_time(2_051_000)
            // Standard Error: 8_062
            .saturating_add(Weight::from_ref_time(1_242_110).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_998 nanoseconds.
        Weight::from_ref_time(2_044_000)
            // Standard Error: 10_495
            .saturating_add(Weight::from_ref_time(1_932_653).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_043 nanoseconds.
        Weight::from_ref_time(2_081_000)
            // Standard Error: 7_512
            .saturating_add(Weight::from_ref_time(1_186_900).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_026 nanoseconds.
        Weight::from_ref_time(2_083_000)
            // Standard Error: 10_425
            .saturating_add(Weight::from_ref_time(1_898_222).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_010 nanoseconds.
        Weight::from_ref_time(2_117_000)
            // Standard Error: 6_972
            .saturating_add(Weight::from_ref_time(1_160_775).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_990 nanoseconds.
        Weight::from_ref_time(2_047_000)
            // Standard Error: 12_802
            .saturating_add(Weight::from_ref_time(1_934_073).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_994 nanoseconds.
        Weight::from_ref_time(2_051_000)
            // Standard Error: 8_950
            .saturating_add(Weight::from_ref_time(1_150_032).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_033 nanoseconds.
        Weight::from_ref_time(2_064_000)
            // Standard Error: 10_982
            .saturating_add(Weight::from_ref_time(1_860_562).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_952 nanoseconds.
        Weight::from_ref_time(2_017_000)
            // Standard Error: 7_830
            .saturating_add(Weight::from_ref_time(1_142_371).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_967 nanoseconds.
        Weight::from_ref_time(2_043_000)
            // Standard Error: 13_663
            .saturating_add(Weight::from_ref_time(1_916_603).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_997 nanoseconds.
        Weight::from_ref_time(2_106_000)
            // Standard Error: 8_319
            .saturating_add(Weight::from_ref_time(1_134_347).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_023 nanoseconds.
        Weight::from_ref_time(2_081_000)
            // Standard Error: 11_442
            .saturating_add(Weight::from_ref_time(1_911_437).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_057 nanoseconds.
        Weight::from_ref_time(2_094_000)
            // Standard Error: 9_220
            .saturating_add(Weight::from_ref_time(1_180_260).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_975 nanoseconds.
        Weight::from_ref_time(2_048_000)
            // Standard Error: 12_117
            .saturating_add(Weight::from_ref_time(1_976_120).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_928 nanoseconds.
        Weight::from_ref_time(2_011_000)
            // Standard Error: 6_776
            .saturating_add(Weight::from_ref_time(1_194_751).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_004 nanoseconds.
        Weight::from_ref_time(2_045_000)
            // Standard Error: 10_428
            .saturating_add(Weight::from_ref_time(1_856_349).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_992 nanoseconds.
        Weight::from_ref_time(2_064_000)
            // Standard Error: 7_849
            .saturating_add(Weight::from_ref_time(1_153_509).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_956 nanoseconds.
        Weight::from_ref_time(2_030_000)
            // Standard Error: 8_433
            .saturating_add(Weight::from_ref_time(1_268_864).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_947 nanoseconds.
        Weight::from_ref_time(2_018_000)
            // Standard Error: 4_547
            .saturating_add(Weight::from_ref_time(645_032).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_032 nanoseconds.
        Weight::from_ref_time(2_064_000)
            // Standard Error: 8_005
            .saturating_add(Weight::from_ref_time(1_289_651).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_986 nanoseconds.
        Weight::from_ref_time(2_028_000)
            // Standard Error: 5_600
            .saturating_add(Weight::from_ref_time(678_797).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_994 nanoseconds.
        Weight::from_ref_time(2_039_000)
            // Standard Error: 10_526
            .saturating_add(Weight::from_ref_time(1_973_986).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_984 nanoseconds.
        Weight::from_ref_time(2_043_000)
            // Standard Error: 7_034
            .saturating_add(Weight::from_ref_time(1_215_647).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_988 nanoseconds.
        Weight::from_ref_time(2_050_000)
            // Standard Error: 7_212
            .saturating_add(Weight::from_ref_time(2_771_771).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_981 nanoseconds.
        Weight::from_ref_time(2_076_000)
            // Standard Error: 7_088
            .saturating_add(Weight::from_ref_time(2_419_686).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_036 nanoseconds.
        Weight::from_ref_time(2_083_000)
            // Standard Error: 9_570
            .saturating_add(Weight::from_ref_time(2_981_619).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_027 nanoseconds.
        Weight::from_ref_time(191_713)
            // Standard Error: 16_475
            .saturating_add(Weight::from_ref_time(2_611_675).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_028 nanoseconds.
        Weight::from_ref_time(2_100_000)
            // Standard Error: 13_977
            .saturating_add(Weight::from_ref_time(9_909_370).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_980 nanoseconds.
        Weight::from_ref_time(2_054_000)
            // Standard Error: 26_367
            .saturating_add(Weight::from_ref_time(7_874_905).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_997 nanoseconds.
        Weight::from_ref_time(2_043_000)
            // Standard Error: 9_661
            .saturating_add(Weight::from_ref_time(3_029_452).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_040 nanoseconds.
        Weight::from_ref_time(2_145_000)
            // Standard Error: 12_480
            .saturating_add(Weight::from_ref_time(2_537_714).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_991 nanoseconds.
        Weight::from_ref_time(2_043_000)
            // Standard Error: 8_986
            .saturating_add(Weight::from_ref_time(1_297_956).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_917 nanoseconds.
        Weight::from_ref_time(1_991_000)
            // Standard Error: 4_526
            .saturating_add(Weight::from_ref_time(662_435).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_021 nanoseconds.
        Weight::from_ref_time(2_069_000)
            // Standard Error: 8_324
            .saturating_add(Weight::from_ref_time(1_327_872).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_026 nanoseconds.
        Weight::from_ref_time(2_070_000)
            // Standard Error: 4_898
            .saturating_add(Weight::from_ref_time(684_578).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_989 nanoseconds.
        Weight::from_ref_time(2_057_000)
            // Standard Error: 9_116
            .saturating_add(Weight::from_ref_time(1_341_076).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_960 nanoseconds.
        Weight::from_ref_time(2_004_000)
            // Standard Error: 5_064
            .saturating_add(Weight::from_ref_time(664_619).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_024 nanoseconds.
        Weight::from_ref_time(2_072_000)
            // Standard Error: 7_079
            .saturating_add(Weight::from_ref_time(1_109_813).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_022 nanoseconds.
        Weight::from_ref_time(2_110_000)
            // Standard Error: 4_499
            .saturating_add(Weight::from_ref_time(596_565).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_945 nanoseconds.
        Weight::from_ref_time(2_043_000)
            // Standard Error: 7_388
            .saturating_add(Weight::from_ref_time(1_102_019).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_053 nanoseconds.
        Weight::from_ref_time(2_103_000)
            // Standard Error: 4_340
            .saturating_add(Weight::from_ref_time(589_998).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_017 nanoseconds.
        Weight::from_ref_time(2_099_000)
            // Standard Error: 7_859
            .saturating_add(Weight::from_ref_time(1_089_304).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_034 nanoseconds.
        Weight::from_ref_time(2_083_000)
            // Standard Error: 4_304
            .saturating_add(Weight::from_ref_time(598_598).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_023 nanoseconds.
        Weight::from_ref_time(2_097_000)
            // Standard Error: 7_539
            .saturating_add(Weight::from_ref_time(1_121_707).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_063 nanoseconds.
        Weight::from_ref_time(2_117_000)
            // Standard Error: 4_365
            .saturating_add(Weight::from_ref_time(566_368).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_995 nanoseconds.
        Weight::from_ref_time(2_062_000)
            // Standard Error: 8_936
            .saturating_add(Weight::from_ref_time(1_092_338).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_039 nanoseconds.
        Weight::from_ref_time(2_094_000)
            // Standard Error: 4_196
            .saturating_add(Weight::from_ref_time(603_336).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 761 nanoseconds.
        Weight::from_ref_time(794_000)
            // Standard Error: 960
            .saturating_add(Weight::from_ref_time(212_224).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `145 + c * (1024 ±0)`
        //  Estimated: `2617 + c * (1024 ±0)`
        // Minimum execution time: 3_067 nanoseconds.
        Weight::from_parts(3_132_000, 2617)
            // Standard Error: 2_641
            .saturating_add(Weight::from_ref_time(696_372).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 48_163 nanoseconds.
        Weight::from_ref_time(102_637_811)
            // Standard Error: 7_418
            .saturating_add(Weight::from_ref_time(2_284_334).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `918`
        //  Estimated: `17301`
        // Minimum execution time: 52_476 nanoseconds.
        Weight::from_parts(53_862_000, 17301)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3290`
        // Minimum execution time: 57_788 nanoseconds.
        Weight::from_parts(31_642_282, 3290)
            // Standard Error: 47_873
            .saturating_add(Weight::from_ref_time(53_067_634).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `675`
        //  Estimated: `18282`
        // Minimum execution time: 47_046 nanoseconds.
        Weight::from_parts(65_865_510, 18282)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_272).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `126`
        //  Estimated: `14142`
        // Minimum execution time: 9_629_458 nanoseconds.
        Weight::from_parts(128_023_124, 14142)
            // Standard Error: 164_368
            .saturating_add(Weight::from_ref_time(54_589_020).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_ref_time(2_268).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `375`
        //  Estimated: `14765`
        // Minimum execution time: 48_557 nanoseconds.
        Weight::from_parts(28_383_814, 14765)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(1_134).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1113`
        //  Estimated: `31447`
        // Minimum execution time: 72_760 nanoseconds.
        Weight::from_parts(61_055_469, 31447)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(1_145).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `982`
        //  Estimated: `49130`
        // Minimum execution time: 278_465 nanoseconds.
        Weight::from_parts(289_144_814, 49130)
            // Standard Error: 930
            .saturating_add(Weight::from_ref_time(3_745).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(26_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `982`
        //  Estimated: `49018`
        // Minimum execution time: 289_940 nanoseconds.
        Weight::from_parts(301_064_878, 49018)
            // Standard Error: 1_069
            .saturating_add(Weight::from_ref_time(4_413).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(26_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `243 + c * (1075 ±0)`
        //  Estimated: `2973 + c * (2150 ±0)`
        // Minimum execution time: 41_220 nanoseconds.
        Weight::from_parts(41_558_000, 2973)
            // Standard Error: 43_154
            .saturating_add(Weight::from_ref_time(51_043_357).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_proof_size(2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_620 nanoseconds.
        Weight::from_ref_time(85_723_324)
            // Standard Error: 302_409
            .saturating_add(Weight::from_ref_time(129_670_159).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 198_883 nanoseconds.
        Weight::from_ref_time(180_549_249)
            // Standard Error: 279_283
            .saturating_add(Weight::from_ref_time(127_604_915).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_282 nanoseconds.
        Weight::from_ref_time(85_230_381)
            // Standard Error: 9_033
            .saturating_add(Weight::from_ref_time(3_509_899).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 131_615 nanoseconds.
        Weight::from_ref_time(168_307_579)
            // Standard Error: 20_410
            .saturating_add(Weight::from_ref_time(3_513_779).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_244 nanoseconds.
        Weight::from_ref_time(133_381_524)
            // Standard Error: 364_215
            .saturating_add(Weight::from_ref_time(175_263_065).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_871 nanoseconds.
        Weight::from_ref_time(83_728_178)
            // Standard Error: 237_530
            .saturating_add(Weight::from_ref_time(175_396_894).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_344 nanoseconds.
        Weight::from_ref_time(80_814_311)
            // Standard Error: 242_865
            .saturating_add(Weight::from_ref_time(176_183_080).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_550 nanoseconds.
        Weight::from_ref_time(86_713_676)
            // Standard Error: 238_659
            .saturating_add(Weight::from_ref_time(174_365_605).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_212 nanoseconds.
        Weight::from_ref_time(81_118_155)
            // Standard Error: 247_291
            .saturating_add(Weight::from_ref_time(175_847_363).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_148 nanoseconds.
        Weight::from_ref_time(83_939_496)
            // Standard Error: 280_041
            .saturating_add(Weight::from_ref_time(175_400_021).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_682 nanoseconds.
        Weight::from_ref_time(85_424_687)
            // Standard Error: 255_412
            .saturating_add(Weight::from_ref_time(174_010_282).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_825 nanoseconds.
        Weight::from_ref_time(86_478_699)
            // Standard Error: 252_429
            .saturating_add(Weight::from_ref_time(177_432_143).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_170 nanoseconds.
        Weight::from_ref_time(84_210_822)
            // Standard Error: 251_283
            .saturating_add(Weight::from_ref_time(180_568_190).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 557_635 nanoseconds.
        Weight::from_ref_time(634_644_194)
            // Standard Error: 400_411
            .saturating_add(Weight::from_ref_time(239_352_408).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 828_353 nanoseconds.
        Weight::from_ref_time(837_715_000)
            // Standard Error: 60_739
            .saturating_add(Weight::from_ref_time(14_146_957).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_842 nanoseconds.
        Weight::from_ref_time(78_011_099)
            // Standard Error: 304_537
            .saturating_add(Weight::from_ref_time(174_648_210).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_383 nanoseconds.
        Weight::from_ref_time(85_071_672)
            // Standard Error: 277_230
            .saturating_add(Weight::from_ref_time(175_739_698).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_759 nanoseconds.
        Weight::from_ref_time(97_315_812)
            // Standard Error: 238_252
            .saturating_add(Weight::from_ref_time(238_074_206).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_613 nanoseconds.
        Weight::from_ref_time(73_884_051)
            // Standard Error: 231_926
            .saturating_add(Weight::from_ref_time(188_042_953).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_706_952 nanoseconds.
        Weight::from_ref_time(3_841_642_964)
            // Standard Error: 288_960
            .saturating_add(Weight::from_ref_time(247_877_210).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 520_139 nanoseconds.
        Weight::from_ref_time(523_195_000)
            // Standard Error: 61_816
            .saturating_add(Weight::from_ref_time(29_665_714).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_478 nanoseconds.
        Weight::from_ref_time(131_497_693)
            // Standard Error: 299_463
            .saturating_add(Weight::from_ref_time(352_624_503).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 437_137 nanoseconds.
        Weight::from_ref_time(440_652_000)
            // Standard Error: 59_951
            .saturating_add(Weight::from_ref_time(21_224_751).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 242_701 nanoseconds.
        Weight::from_ref_time(305_043_647)
            // Standard Error: 244_718
            .saturating_add(Weight::from_ref_time(369_921_323).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 471_909 nanoseconds.
        Weight::from_ref_time(481_316_000)
            // Standard Error: 51_289
            .saturating_add(Weight::from_ref_time(21_001_799).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_287 nanoseconds.
        Weight::from_ref_time(84_806_134)
            // Standard Error: 250_891
            .saturating_add(Weight::from_ref_time(17_607_365).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_681 nanoseconds.
        Weight::from_ref_time(86_530_601)
            // Standard Error: 774
            .saturating_add(Weight::from_ref_time(423_018).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_835 nanoseconds.
        Weight::from_ref_time(137_479_664)
            // Standard Error: 331_995
            .saturating_add(Weight::from_ref_time(243_721_746).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_910 nanoseconds.
        Weight::from_ref_time(99_515_000)
            // Standard Error: 2_501
            .saturating_add(Weight::from_ref_time(605_467).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_365 nanoseconds.
        Weight::from_ref_time(91_586_508)
            // Standard Error: 253_416
            .saturating_add(Weight::from_ref_time(11_330_891).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_342 nanoseconds.
        Weight::from_ref_time(86_985_218)
            // Standard Error: 729
            .saturating_add(Weight::from_ref_time(420_626).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_176 nanoseconds.
        Weight::from_ref_time(85_895_984)
            // Standard Error: 315_843
            .saturating_add(Weight::from_ref_time(175_959_029).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_180 nanoseconds.
        Weight::from_ref_time(87_329_873)
            // Standard Error: 255_146
            .saturating_add(Weight::from_ref_time(175_210_834).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 553_563 nanoseconds.
        Weight::from_ref_time(609_509_128)
            // Standard Error: 401_197
            .saturating_add(Weight::from_ref_time(187_924_542).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 574_867 nanoseconds.
        Weight::from_ref_time(587_172_863)
            // Standard Error: 954
            .saturating_add(Weight::from_ref_time(121_260).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_153_438 nanoseconds.
        Weight::from_ref_time(4_303_178_639)
            // Standard Error: 265_183
            .saturating_add(Weight::from_ref_time(192_266_698).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 939_474 nanoseconds.
        Weight::from_ref_time(836_256_075)
            // Standard Error: 10_783
            .saturating_add(Weight::from_ref_time(12_584_153).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_912 nanoseconds.
        Weight::from_ref_time(107_702_879)
            // Standard Error: 316_515
            .saturating_add(Weight::from_ref_time(187_518_617).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 260_251 nanoseconds.
        Weight::from_ref_time(265_607_000)
            // Standard Error: 47_176
            .saturating_add(Weight::from_ref_time(25_735_678).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_526 nanoseconds.
        Weight::from_ref_time(103_383_863)
            // Standard Error: 281_743
            .saturating_add(Weight::from_ref_time(229_630_385).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_646 nanoseconds.
        Weight::from_ref_time(77_387_247)
            // Standard Error: 240_622
            .saturating_add(Weight::from_ref_time(177_210_179).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_732 nanoseconds.
        Weight::from_ref_time(86_746_559)
            // Standard Error: 276_411
            .saturating_add(Weight::from_ref_time(24_364_740).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_768 nanoseconds.
        Weight::from_ref_time(86_254_018)
            // Standard Error: 270_944
            .saturating_add(Weight::from_ref_time(13_674_081).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_973 nanoseconds.
        Weight::from_ref_time(86_357_653)
            // Standard Error: 275_003
            .saturating_add(Weight::from_ref_time(14_931_046).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_826 nanoseconds.
        Weight::from_ref_time(86_467_016)
            // Standard Error: 264_613
            .saturating_add(Weight::from_ref_time(14_260_583).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_605 nanoseconds.
        Weight::from_ref_time(86_532_340)
            // Standard Error: 278_759
            .saturating_add(Weight::from_ref_time(14_028_659).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 132_543 nanoseconds.
        Weight::from_ref_time(192_378_038)
            // Standard Error: 249_057
            .saturating_add(Weight::from_ref_time(254_777_085).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_114 nanoseconds.
        Weight::from_ref_time(156_606_434)
            // Standard Error: 295_787
            .saturating_add(Weight::from_ref_time(425_470_652).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_256_334 nanoseconds.
        Weight::from_ref_time(43_465_935_000)
            // Standard Error: 263_063
            .saturating_add(Weight::from_ref_time(7_902_649).saturating_mul(p.into()))
            // Standard Error: 263_050
            .saturating_add(Weight::from_ref_time(152_656_694).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 81_807 nanoseconds.
        Weight::from_parts(121_821_266, 141)
            // Standard Error: 7_125
            .saturating_add(Weight::from_ref_time(11_656_827).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 83_262 nanoseconds.
        Weight::from_parts(84_399_000, 141)
            // Standard Error: 36_484
            .saturating_add(Weight::from_ref_time(34_711_742).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5068941`
        // Minimum execution time: 6_028_492 nanoseconds.
        Weight::from_parts(5_810_695_816, 5068941)
            // Standard Error: 54_356
            .saturating_add(Weight::from_ref_time(36_889_507).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65704 ±0)`
        //  Estimated: `949 + p * (75606 ±0)`
        // Minimum execution time: 84_317 nanoseconds.
        Weight::from_parts(85_299_000, 949)
            // Standard Error: 33_523
            .saturating_add(Weight::from_ref_time(43_951_462).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(75606).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `506 + p * (9883 ±2)`
        // Minimum execution time: 95_734 nanoseconds.
        Weight::from_parts(99_957_245, 506)
            // Standard Error: 59_825
            .saturating_add(Weight::from_ref_time(35_208_171).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `506 + p * (9883 ±2)`
        // Minimum execution time: 586_697 nanoseconds.
        Weight::from_parts(579_394_810, 506)
            // Standard Error: 182_196
            .saturating_add(Weight::from_ref_time(42_500_948).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `316941`
        // Minimum execution time: 983_916 nanoseconds.
        Weight::from_parts(1_010_515_733, 316941)
            // Standard Error: 143_944
            .saturating_add(Weight::from_ref_time(42_508_767).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_226_275 nanoseconds.
        Weight::from_ref_time(4_225_648_608)
            // Standard Error: 10_161
            .saturating_add(Weight::from_ref_time(3_355_980).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_228_938 nanoseconds.
        Weight::from_ref_time(4_228_073_783)
            // Standard Error: 10_035
            .saturating_add(Weight::from_ref_time(3_370_264).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_719_113 nanoseconds.
        Weight::from_ref_time(9_865_862_677)
            // Standard Error: 186_470
            .saturating_add(Weight::from_ref_time(16_510_034).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_539_429 nanoseconds.
        Weight::from_ref_time(8_971_089_150)
            // Standard Error: 149_624
            .saturating_add(Weight::from_ref_time(16_140_559).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_017 nanoseconds.
        Weight::from_ref_time(2_162_000)
            // Standard Error: 8_150
            .saturating_add(Weight::from_ref_time(3_810_640).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_005 nanoseconds.
        Weight::from_ref_time(2_091_000)
            // Standard Error: 7_804
            .saturating_add(Weight::from_ref_time(3_085_440).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_948 nanoseconds.
        Weight::from_ref_time(3_039_323)
            // Standard Error: 916
            .saturating_add(Weight::from_ref_time(1_573_630).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_945 nanoseconds.
        Weight::from_ref_time(2_017_000)
            // Standard Error: 9_300
            .saturating_add(Weight::from_ref_time(2_940_862).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_039 nanoseconds.
        Weight::from_ref_time(7_505_360)
            // Standard Error: 27_099
            .saturating_add(Weight::from_ref_time(4_937_410).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_690 nanoseconds.
        Weight::from_ref_time(4_745_487)
            // Standard Error: 1_598
            .saturating_add(Weight::from_ref_time(190_014).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_128 nanoseconds.
        Weight::from_ref_time(5_580_087)
            // Standard Error: 8_909
            .saturating_add(Weight::from_ref_time(2_581_842).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(2_581_842 -
            2_429_530).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_108 nanoseconds.
        Weight::from_ref_time(5_054_933)
            // Standard Error: 12_863
            .saturating_add(Weight::from_ref_time(2_429_530).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_370 nanoseconds.
        Weight::from_ref_time(18_616_562)
            // Standard Error: 29_254
            .saturating_add(Weight::from_ref_time(10_375_535).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_168 nanoseconds.
        Weight::from_ref_time(3_775_924)
            // Standard Error: 6_558
            .saturating_add(Weight::from_ref_time(1_321_364).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_006 nanoseconds.
        Weight::from_ref_time(5_256_467)
            // Standard Error: 12
            .saturating_add(Weight::from_ref_time(57).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_019 nanoseconds.
        Weight::from_ref_time(1_408_120)
            // Standard Error: 3_519
            .saturating_add(Weight::from_ref_time(298_892).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_058 nanoseconds.
        Weight::from_ref_time(2_092_000)
            // Standard Error: 7_004
            .saturating_add(Weight::from_ref_time(892_803).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_976 nanoseconds.
        Weight::from_ref_time(2_078_000)
            // Standard Error: 6_769
            .saturating_add(Weight::from_ref_time(930_108).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_803 nanoseconds.
        Weight::from_ref_time(1_190_711)
            // Standard Error: 9_230
            .saturating_add(Weight::from_ref_time(936_198).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_683 nanoseconds.
        Weight::from_ref_time(5_732_000)
            // Standard Error: 8_615
            .saturating_add(Weight::from_ref_time(1_560_589).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_114 nanoseconds.
        Weight::from_ref_time(2_722_110)
            // Standard Error: 11_589
            .saturating_add(Weight::from_ref_time(7_043_740).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_052 nanoseconds.
        Weight::from_ref_time(2_116_000)
            // Standard Error: 6_212
            .saturating_add(Weight::from_ref_time(3_598_868).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_998 nanoseconds.
        Weight::from_ref_time(2_072_000)
            // Standard Error: 5_918
            .saturating_add(Weight::from_ref_time(3_311_778).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_050 nanoseconds.
        Weight::from_ref_time(2_099_000)
            // Standard Error: 5_716
            .saturating_add(Weight::from_ref_time(3_268_202).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_011 nanoseconds.
        Weight::from_ref_time(2_050_000)
            // Standard Error: 5_135
            .saturating_add(Weight::from_ref_time(2_811_963).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_009 nanoseconds.
        Weight::from_ref_time(2_124_000)
            // Standard Error: 3_335
            .saturating_add(Weight::from_ref_time(599_710).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_989 nanoseconds.
        Weight::from_ref_time(1_302_632)
            // Standard Error: 3_398
            .saturating_add(Weight::from_ref_time(415_577).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_982 nanoseconds.
        Weight::from_ref_time(2_046_000)
            // Standard Error: 12_618
            .saturating_add(Weight::from_ref_time(1_899_867).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_965 nanoseconds.
        Weight::from_ref_time(2_013_000)
            // Standard Error: 8_787
            .saturating_add(Weight::from_ref_time(1_153_841).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_995 nanoseconds.
        Weight::from_ref_time(1_453_796)
            // Standard Error: 3_114
            .saturating_add(Weight::from_ref_time(327_471).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_999 nanoseconds.
        Weight::from_ref_time(2_357_081)
            // Standard Error: 2_303
            .saturating_add(Weight::from_ref_time(189_759).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_943 nanoseconds.
        Weight::from_ref_time(2_328_805)
            // Standard Error: 1_980
            .saturating_add(Weight::from_ref_time(196_714).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_016 nanoseconds.
        Weight::from_ref_time(2_044_000)
            // Standard Error: 12_976
            .saturating_add(Weight::from_ref_time(1_999_087).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_010 nanoseconds.
        Weight::from_ref_time(2_050_000)
            // Standard Error: 8_186
            .saturating_add(Weight::from_ref_time(1_216_597).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_018 nanoseconds.
        Weight::from_ref_time(2_085_000)
            // Standard Error: 11_416
            .saturating_add(Weight::from_ref_time(1_983_732).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_976 nanoseconds.
        Weight::from_ref_time(2_051_000)
            // Standard Error: 8_062
            .saturating_add(Weight::from_ref_time(1_242_110).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_998 nanoseconds.
        Weight::from_ref_time(2_044_000)
            // Standard Error: 10_495
            .saturating_add(Weight::from_ref_time(1_932_653).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_043 nanoseconds.
        Weight::from_ref_time(2_081_000)
            // Standard Error: 7_512
            .saturating_add(Weight::from_ref_time(1_186_900).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_026 nanoseconds.
        Weight::from_ref_time(2_083_000)
            // Standard Error: 10_425
            .saturating_add(Weight::from_ref_time(1_898_222).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_010 nanoseconds.
        Weight::from_ref_time(2_117_000)
            // Standard Error: 6_972
            .saturating_add(Weight::from_ref_time(1_160_775).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_990 nanoseconds.
        Weight::from_ref_time(2_047_000)
            // Standard Error: 12_802
            .saturating_add(Weight::from_ref_time(1_934_073).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_994 nanoseconds.
        Weight::from_ref_time(2_051_000)
            // Standard Error: 8_950
            .saturating_add(Weight::from_ref_time(1_150_032).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_033 nanoseconds.
        Weight::from_ref_time(2_064_000)
            // Standard Error: 10_982
            .saturating_add(Weight::from_ref_time(1_860_562).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_952 nanoseconds.
        Weight::from_ref_time(2_017_000)
            // Standard Error: 7_830
            .saturating_add(Weight::from_ref_time(1_142_371).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_967 nanoseconds.
        Weight::from_ref_time(2_043_000)
            // Standard Error: 13_663
            .saturating_add(Weight::from_ref_time(1_916_603).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_997 nanoseconds.
        Weight::from_ref_time(2_106_000)
            // Standard Error: 8_319
            .saturating_add(Weight::from_ref_time(1_134_347).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_023 nanoseconds.
        Weight::from_ref_time(2_081_000)
            // Standard Error: 11_442
            .saturating_add(Weight::from_ref_time(1_911_437).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_057 nanoseconds.
        Weight::from_ref_time(2_094_000)
            // Standard Error: 9_220
            .saturating_add(Weight::from_ref_time(1_180_260).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_975 nanoseconds.
        Weight::from_ref_time(2_048_000)
            // Standard Error: 12_117
            .saturating_add(Weight::from_ref_time(1_976_120).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_928 nanoseconds.
        Weight::from_ref_time(2_011_000)
            // Standard Error: 6_776
            .saturating_add(Weight::from_ref_time(1_194_751).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_004 nanoseconds.
        Weight::from_ref_time(2_045_000)
            // Standard Error: 10_428
            .saturating_add(Weight::from_ref_time(1_856_349).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_992 nanoseconds.
        Weight::from_ref_time(2_064_000)
            // Standard Error: 7_849
            .saturating_add(Weight::from_ref_time(1_153_509).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_956 nanoseconds.
        Weight::from_ref_time(2_030_000)
            // Standard Error: 8_433
            .saturating_add(Weight::from_ref_time(1_268_864).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_947 nanoseconds.
        Weight::from_ref_time(2_018_000)
            // Standard Error: 4_547
            .saturating_add(Weight::from_ref_time(645_032).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_032 nanoseconds.
        Weight::from_ref_time(2_064_000)
            // Standard Error: 8_005
            .saturating_add(Weight::from_ref_time(1_289_651).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_986 nanoseconds.
        Weight::from_ref_time(2_028_000)
            // Standard Error: 5_600
            .saturating_add(Weight::from_ref_time(678_797).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_994 nanoseconds.
        Weight::from_ref_time(2_039_000)
            // Standard Error: 10_526
            .saturating_add(Weight::from_ref_time(1_973_986).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_984 nanoseconds.
        Weight::from_ref_time(2_043_000)
            // Standard Error: 7_034
            .saturating_add(Weight::from_ref_time(1_215_647).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_988 nanoseconds.
        Weight::from_ref_time(2_050_000)
            // Standard Error: 7_212
            .saturating_add(Weight::from_ref_time(2_771_771).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_981 nanoseconds.
        Weight::from_ref_time(2_076_000)
            // Standard Error: 7_088
            .saturating_add(Weight::from_ref_time(2_419_686).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_036 nanoseconds.
        Weight::from_ref_time(2_083_000)
            // Standard Error: 9_570
            .saturating_add(Weight::from_ref_time(2_981_619).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_027 nanoseconds.
        Weight::from_ref_time(191_713)
            // Standard Error: 16_475
            .saturating_add(Weight::from_ref_time(2_611_675).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_028 nanoseconds.
        Weight::from_ref_time(2_100_000)
            // Standard Error: 13_977
            .saturating_add(Weight::from_ref_time(9_909_370).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_980 nanoseconds.
        Weight::from_ref_time(2_054_000)
            // Standard Error: 26_367
            .saturating_add(Weight::from_ref_time(7_874_905).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_997 nanoseconds.
        Weight::from_ref_time(2_043_000)
            // Standard Error: 9_661
            .saturating_add(Weight::from_ref_time(3_029_452).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_040 nanoseconds.
        Weight::from_ref_time(2_145_000)
            // Standard Error: 12_480
            .saturating_add(Weight::from_ref_time(2_537_714).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_991 nanoseconds.
        Weight::from_ref_time(2_043_000)
            // Standard Error: 8_986
            .saturating_add(Weight::from_ref_time(1_297_956).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_917 nanoseconds.
        Weight::from_ref_time(1_991_000)
            // Standard Error: 4_526
            .saturating_add(Weight::from_ref_time(662_435).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_021 nanoseconds.
        Weight::from_ref_time(2_069_000)
            // Standard Error: 8_324
            .saturating_add(Weight::from_ref_time(1_327_872).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_026 nanoseconds.
        Weight::from_ref_time(2_070_000)
            // Standard Error: 4_898
            .saturating_add(Weight::from_ref_time(684_578).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_989 nanoseconds.
        Weight::from_ref_time(2_057_000)
            // Standard Error: 9_116
            .saturating_add(Weight::from_ref_time(1_341_076).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_960 nanoseconds.
        Weight::from_ref_time(2_004_000)
            // Standard Error: 5_064
            .saturating_add(Weight::from_ref_time(664_619).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_024 nanoseconds.
        Weight::from_ref_time(2_072_000)
            // Standard Error: 7_079
            .saturating_add(Weight::from_ref_time(1_109_813).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_022 nanoseconds.
        Weight::from_ref_time(2_110_000)
            // Standard Error: 4_499
            .saturating_add(Weight::from_ref_time(596_565).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_945 nanoseconds.
        Weight::from_ref_time(2_043_000)
            // Standard Error: 7_388
            .saturating_add(Weight::from_ref_time(1_102_019).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_053 nanoseconds.
        Weight::from_ref_time(2_103_000)
            // Standard Error: 4_340
            .saturating_add(Weight::from_ref_time(589_998).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_017 nanoseconds.
        Weight::from_ref_time(2_099_000)
            // Standard Error: 7_859
            .saturating_add(Weight::from_ref_time(1_089_304).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_034 nanoseconds.
        Weight::from_ref_time(2_083_000)
            // Standard Error: 4_304
            .saturating_add(Weight::from_ref_time(598_598).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_023 nanoseconds.
        Weight::from_ref_time(2_097_000)
            // Standard Error: 7_539
            .saturating_add(Weight::from_ref_time(1_121_707).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_063 nanoseconds.
        Weight::from_ref_time(2_117_000)
            // Standard Error: 4_365
            .saturating_add(Weight::from_ref_time(566_368).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_995 nanoseconds.
        Weight::from_ref_time(2_062_000)
            // Standard Error: 8_936
            .saturating_add(Weight::from_ref_time(1_092_338).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_039 nanoseconds.
        Weight::from_ref_time(2_094_000)
            // Standard Error: 4_196
            .saturating_add(Weight::from_ref_time(603_336).saturating_mul(r.into()))
    }
}
