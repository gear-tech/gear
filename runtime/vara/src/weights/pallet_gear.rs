// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-28, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=alloc,alloc_in_handle,alloc_per_page,claim_value,create_program,db_read_per_kb,db_write_per_kb,free,gr_block_height,gr_block_timestamp,gr_create_program,gr_create_program_per_kb,gr_create_program_wgas,gr_create_program_wgas_per_kb,gr_debug,gr_debug_per_kb,gr_gas_available,gr_message_id,gr_pay_program_rent,gr_program_id,gr_random,gr_read,gr_read_per_kb,gr_reply_code,gr_reply_deposit,gr_reply_per_kb,gr_reply_push,gr_reply_push_input,gr_reply_push_input_per_kb,gr_reply_push_per_kb,gr_reply_to,gr_reply_wgas_per_kb,gr_reservation_reply_commit_per_kb,gr_reservation_reply_per_kb,gr_reservation_send,gr_reservation_send_commit,gr_reservation_send_per_kb,gr_reserve_gas,gr_send,gr_send_commit,gr_send_commit_wgas,gr_send_init,gr_send_input,gr_send_input_wgas,gr_send_per_kb,gr_send_push,gr_send_push_input,gr_send_push_input_per_kb,gr_send_push_per_kb,gr_send_wgas,gr_send_wgas_per_kb,gr_signal_code,gr_signal_from,gr_size,gr_source,gr_system_reserve_gas,gr_unreserve_gas,gr_value,gr_value_available,gr_wake,initial_allocation,instantiate_module_per_kb,instr_br,instr_br_if,instr_br_table,instr_br_table_per_entry,instr_call,instr_call_const,instr_call_indirect,instr_call_indirect_per_param,instr_call_per_local,instr_global_get,instr_global_set,instr_i32add,instr_i32and,instr_i32clz,instr_i32ctz,instr_i32divs,instr_i32divu,instr_i32eq,instr_i32eqz,instr_i32extend16s,instr_i32extend8s,instr_i32ges,instr_i32geu,instr_i32gts,instr_i32gtu,instr_i32les,instr_i32leu,instr_i32load,instr_i32lts,instr_i32ltu,instr_i32mul,instr_i32ne,instr_i32or,instr_i32popcnt,instr_i32rems,instr_i32remu,instr_i32rotl,instr_i32rotr,instr_i32shl,instr_i32shrs,instr_i32shru,instr_i32store,instr_i32sub,instr_i32wrapi64,instr_i32xor,instr_i64add,instr_i64and,instr_i64clz,instr_i64ctz,instr_i64divs,instr_i64divu,instr_i64eq,instr_i64eqz,instr_i64extend16s,instr_i64extend32s,instr_i64extend8s,instr_i64extendsi32,instr_i64extendui32,instr_i64ges,instr_i64geu,instr_i64gts,instr_i64gtu,instr_i64les,instr_i64leu,instr_i64load,instr_i64lts,instr_i64ltu,instr_i64mul,instr_i64ne,instr_i64or,instr_i64popcnt,instr_i64rems,instr_i64remu,instr_i64rotl,instr_i64rotr,instr_i64shl,instr_i64shrs,instr_i64shru,instr_i64store,instr_i64sub,instr_i64xor,instr_if,instr_local_get,instr_local_set,instr_local_tee,instr_memory_current,instr_select,lazy_pages_host_func_read,lazy_pages_host_func_write,lazy_pages_host_func_write_after_read,lazy_pages_load_page_storage_data,lazy_pages_signal_read,lazy_pages_signal_write,lazy_pages_signal_write_after_read,mem_grow,pay_program_rent,reinstrument_per_kb,resume_session_commit,resume_session_init,resume_session_push,send_message,send_reply,tasks_pause_program,tasks_pause_program_uninited,tasks_remove_from_mailbox,tasks_remove_from_waitlist,tasks_remove_gas_reservation,tasks_remove_resume_session,tasks_send_dispatch,tasks_send_user_message,tasks_send_user_message_to_mailbox,tasks_wake_message,tasks_wake_message_no_wake,upload_code,upload_program --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn tasks_remove_resume_session() -> Weight;
    fn tasks_remove_gas_reservation() -> Weight;
    fn tasks_send_user_message_to_mailbox() -> Weight;
    fn tasks_send_user_message() -> Weight;
    fn tasks_send_dispatch() -> Weight;
    fn tasks_wake_message() -> Weight;
    fn tasks_wake_message_no_wake() -> Weight;
    fn tasks_remove_from_waitlist() -> Weight;
    fn tasks_remove_from_mailbox() -> Weight;
    fn tasks_pause_program(c: u32, ) -> Weight;
    fn tasks_pause_program_uninited(c: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_967_000 picoseconds.
        Weight::from_parts(100_769_202, 0)
            // Standard Error: 78_239
            .saturating_add(Weight::from_parts(21_623_874, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_625_000 picoseconds.
        Weight::from_parts(103_100_672, 0)
            // Standard Error: 79_915
            .saturating_add(Weight::from_parts(18_339_856, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_620_000 picoseconds.
        Weight::from_parts(102_660_230, 0)
            // Standard Error: 81_604
            .saturating_add(Weight::from_parts(18_180_584, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_037_000 picoseconds.
        Weight::from_parts(101_912_864, 0)
            // Standard Error: 84_108
            .saturating_add(Weight::from_parts(20_742_928, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 716_479_000 picoseconds.
        Weight::from_parts(752_477_538, 0)
            // Standard Error: 630_784
            .saturating_add(Weight::from_parts(22_929_588, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 726_949_000 picoseconds.
        Weight::from_parts(774_347_474, 0)
            // Standard Error: 902_271
            .saturating_add(Weight::from_parts(17_273_758, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_653_000 picoseconds.
        Weight::from_parts(110_681_190, 0)
            // Standard Error: 90_520
            .saturating_add(Weight::from_parts(12_801_500, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_389_000 picoseconds.
        Weight::from_parts(113_272_838, 0)
            // Standard Error: 89_344
            .saturating_add(Weight::from_parts(5_340_718, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_868_000 picoseconds.
        Weight::from_parts(104_048_366, 0)
            // Standard Error: 2_216_528
            .saturating_add(Weight::from_parts(541_182_376, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_494_000 picoseconds.
        Weight::from_parts(103_419_240, 0)
            // Standard Error: 2_066_261
            .saturating_add(Weight::from_parts(536_063_286, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_167_000 picoseconds.
        Weight::from_parts(103_413_378, 0)
            // Standard Error: 2_011_359
            .saturating_add(Weight::from_parts(519_142_196, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_437_000 picoseconds.
        Weight::from_parts(100_205_340, 0)
            // Standard Error: 2_405_150
            .saturating_add(Weight::from_parts(547_275_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_803_000 picoseconds.
        Weight::from_parts(102_665_234, 0)
            // Standard Error: 2_225_197
            .saturating_add(Weight::from_parts(553_575_546, 0).saturating_mul(r.into()))
    }
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 976_000 picoseconds.
        Weight::from_parts(1_072_000, 0)
            // Standard Error: 699
            .saturating_add(Weight::from_parts(245_833, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_396_000 picoseconds.
        Weight::from_parts(3_490_000, 3610)
            // Standard Error: 1_049
            .saturating_add(Weight::from_parts(676_643, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_736_000 picoseconds.
        Weight::from_parts(76_636_221, 0)
            // Standard Error: 9_825
            .saturating_add(Weight::from_parts(2_570_922, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1372`
        //  Estimated: `51905`
        // Minimum execution time: 111_461_000 picoseconds.
        Weight::from_parts(114_029_000, 51905)
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `992`
        //  Estimated: `21579`
        // Minimum execution time: 57_697_000 picoseconds.
        Weight::from_parts(58_842_000, 21579)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `638`
        //  Estimated: `17486`
        // Minimum execution time: 30_530_000 picoseconds.
        Weight::from_parts(32_003_000, 17486)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_274_000 picoseconds.
        Weight::from_parts(8_261_331, 7640)
            // Standard Error: 41_108
            .saturating_add(Weight::from_parts(13_969_743, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1593 + c * (16389 ±0)`
        //  Estimated: `43266 + c * (131112 ±0)`
        // Minimum execution time: 74_444_000 picoseconds.
        Weight::from_parts(75_016_000, 43266)
            // Standard Error: 165_690
            .saturating_add(Weight::from_parts(55_174_777, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `5402`
        // Minimum execution time: 79_739_000 picoseconds.
        Weight::from_parts(1_118_426, 5402)
            // Standard Error: 68_897
            .saturating_add(Weight::from_parts(60_115_395, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1111`
        //  Estimated: `50600`
        // Minimum execution time: 96_509_000 picoseconds.
        Weight::from_parts(129_317_147, 50600)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_581, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `521`
        //  Estimated: `45152`
        // Minimum execution time: 10_940_898_000 picoseconds.
        Weight::from_parts(67_432_582, 45152)
            // Standard Error: 159_611
            .saturating_add(Weight::from_parts(61_428_399, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_577, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `531`
        //  Estimated: `31266`
        // Minimum execution time: 77_245_000 picoseconds.
        Weight::from_parts(59_204_735, 31266)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_042, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1371`
        //  Estimated: `54435`
        // Minimum execution time: 128_271_000 picoseconds.
        Weight::from_parts(93_877_619, 54435)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_085, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `121468`
        // Minimum execution time: 379_776_000 picoseconds.
        Weight::from_parts(397_994_052, 121468)
            .saturating_add(T::DbWeight::get().reads(35_u64))
            .saturating_add(T::DbWeight::get().writes(26_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `121468`
        // Minimum execution time: 393_678_000 picoseconds.
        Weight::from_parts(411_350_620, 121468)
            // Standard Error: 1_741
            .saturating_add(Weight::from_parts(5_796, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(35_u64))
            .saturating_add(T::DbWeight::get().writes(26_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 58_693_000 picoseconds.
        Weight::from_parts(59_295_000, 3899)
            // Standard Error: 33_015
            .saturating_add(Weight::from_parts(61_659_744, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_082_000 picoseconds.
        Weight::from_parts(97_548_000, 0)
            // Standard Error: 3_920_023
            .saturating_add(Weight::from_parts(729_307_729, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 491_508_000 picoseconds.
        Weight::from_parts(463_051_109, 0)
            // Standard Error: 421_338
            .saturating_add(Weight::from_parts(31_169_166, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 220_882_000 picoseconds.
        Weight::from_parts(231_751_371, 0)
            // Standard Error: 241_524
            .saturating_add(Weight::from_parts(62_988_026, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_013_000 picoseconds.
        Weight::from_parts(108_487_423, 0)
            // Standard Error: 4_858
            .saturating_add(Weight::from_parts(2_524_407, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 182_206_000 picoseconds.
        Weight::from_parts(218_782_104, 0)
            // Standard Error: 14_768
            .saturating_add(Weight::from_parts(2_153_377, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_458_000 picoseconds.
        Weight::from_parts(121_028_602, 0)
            // Standard Error: 385_510
            .saturating_add(Weight::from_parts(95_782_527, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_412_000 picoseconds.
        Weight::from_parts(86_061_953, 0)
            // Standard Error: 356_205
            .saturating_add(Weight::from_parts(87_923_229, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_962_000 picoseconds.
        Weight::from_parts(96_667_757, 0)
            // Standard Error: 333_738
            .saturating_add(Weight::from_parts(84_955_970, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_464_000 picoseconds.
        Weight::from_parts(90_164_484, 0)
            // Standard Error: 321_979
            .saturating_add(Weight::from_parts(85_647_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_334_000 picoseconds.
        Weight::from_parts(91_107_930, 0)
            // Standard Error: 336_291
            .saturating_add(Weight::from_parts(85_501_563, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_398_000 picoseconds.
        Weight::from_parts(97_803_650, 0)
            // Standard Error: 330_728
            .saturating_add(Weight::from_parts(84_746_249, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_554_000 picoseconds.
        Weight::from_parts(77_927_782, 0)
            // Standard Error: 386_800
            .saturating_add(Weight::from_parts(90_358_021, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_554_000 picoseconds.
        Weight::from_parts(96_055_722, 0)
            // Standard Error: 331_628
            .saturating_add(Weight::from_parts(84_542_244, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 725_792_000 picoseconds.
        Weight::from_parts(801_544_878, 0)
            // Standard Error: 398_821
            .saturating_add(Weight::from_parts(140_715_634, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 869_816_000 picoseconds.
        Weight::from_parts(886_588_000, 0)
            // Standard Error: 54_300
            .saturating_add(Weight::from_parts(13_214_277, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_800_000 picoseconds.
        Weight::from_parts(92_344_333, 0)
            // Standard Error: 339_355
            .saturating_add(Weight::from_parts(86_790_706, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_651_000 picoseconds.
        Weight::from_parts(92_529_847, 0)
            // Standard Error: 295_105
            .saturating_add(Weight::from_parts(89_002_384, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_357_000 picoseconds.
        Weight::from_parts(105_767_963, 0)
            // Standard Error: 380_641
            .saturating_add(Weight::from_parts(174_604_231, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_092_000 picoseconds.
        Weight::from_parts(105_802_000, 0)
            // Standard Error: 3_553_393
            .saturating_add(Weight::from_parts(783_848_741, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_050_000 picoseconds.
        Weight::from_parts(174_923_994, 0)
            // Standard Error: 430_038
            .saturating_add(Weight::from_parts(266_665_269, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 357_531_000 picoseconds.
        Weight::from_parts(365_896_000, 0)
            // Standard Error: 59_017
            .saturating_add(Weight::from_parts(21_340_532, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_643_000 picoseconds.
        Weight::from_parts(185_395_839, 0)
            // Standard Error: 402_403
            .saturating_add(Weight::from_parts(266_083_111, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 361_853_000 picoseconds.
        Weight::from_parts(371_175_000, 0)
            // Standard Error: 62_531
            .saturating_add(Weight::from_parts(21_372_225, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 731_246_000 picoseconds.
        Weight::from_parts(827_016_024, 0)
            // Standard Error: 456_568
            .saturating_add(Weight::from_parts(283_568_931, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 725_315_000 picoseconds.
        Weight::from_parts(814_525_892, 0)
            // Standard Error: 535_531
            .saturating_add(Weight::from_parts(291_725_582, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_930_000 picoseconds.
        Weight::from_parts(86_911_409, 0)
            // Standard Error: 308_962
            .saturating_add(Weight::from_parts(98_197_967, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_871_002_000 picoseconds.
        Weight::from_parts(2_023_643_652, 0)
            // Standard Error: 354_203
            .saturating_add(Weight::from_parts(163_033_723, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 321_280_000 picoseconds.
        Weight::from_parts(326_774_000, 0)
            // Standard Error: 53_820
            .saturating_add(Weight::from_parts(31_205_219, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_866_780_000 picoseconds.
        Weight::from_parts(2_024_271_501, 0)
            // Standard Error: 405_972
            .saturating_add(Weight::from_parts(225_776_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_875_608_000 picoseconds.
        Weight::from_parts(2_019_090_196, 0)
            // Standard Error: 346_810
            .saturating_add(Weight::from_parts(235_898_569, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 263_903_000 picoseconds.
        Weight::from_parts(339_925_241, 0)
            // Standard Error: 414_003
            .saturating_add(Weight::from_parts(280_423_422, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 535_212_000 picoseconds.
        Weight::from_parts(545_222_000, 0)
            // Standard Error: 58_250
            .saturating_add(Weight::from_parts(21_556_762, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_022_436_000 picoseconds.
        Weight::from_parts(2_212_258_384, 0)
            // Standard Error: 460_291
            .saturating_add(Weight::from_parts(249_403_133, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_080_000 picoseconds.
        Weight::from_parts(104_765_276, 0)
            // Standard Error: 994
            .saturating_add(Weight::from_parts(436_761, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 115_283_000 picoseconds.
        Weight::from_parts(109_185_112, 0)
            // Standard Error: 1_244
            .saturating_add(Weight::from_parts(432_177, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_873_000 picoseconds.
        Weight::from_parts(159_110_710, 0)
            // Standard Error: 457_822
            .saturating_add(Weight::from_parts(152_162_507, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 112_593_000 picoseconds.
        Weight::from_parts(114_913_000, 0)
            // Standard Error: 2_557
            .saturating_add(Weight::from_parts(677_985, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 118_073_000 picoseconds.
        Weight::from_parts(113_763_795, 0)
            // Standard Error: 1_010
            .saturating_add(Weight::from_parts(428_786, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 114_860_000 picoseconds.
        Weight::from_parts(101_920_439, 0)
            // Standard Error: 1_083
            .saturating_add(Weight::from_parts(442_833, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_512_000 picoseconds.
        Weight::from_parts(88_626_388, 0)
            // Standard Error: 366_499
            .saturating_add(Weight::from_parts(88_122_315, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_944_000 picoseconds.
        Weight::from_parts(94_274_573, 0)
            // Standard Error: 344_379
            .saturating_add(Weight::from_parts(83_385_159, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_736_000 picoseconds.
        Weight::from_parts(102_598_887, 0)
            // Standard Error: 254_019
            .saturating_add(Weight::from_parts(86_050_309, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 740_156_000 picoseconds.
        Weight::from_parts(781_820_116, 0)
            // Standard Error: 419_407
            .saturating_add(Weight::from_parts(107_969_773, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 755_846_000 picoseconds.
        Weight::from_parts(780_455_697, 0)
            // Standard Error: 1_995
            .saturating_add(Weight::from_parts(161_261, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_511_608_000 picoseconds.
        Weight::from_parts(2_705_076_651, 0)
            // Standard Error: 493_983
            .saturating_add(Weight::from_parts(127_194_997, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_717_264_000 picoseconds.
        Weight::from_parts(2_814_539_958, 0)
            // Standard Error: 10_103
            .saturating_add(Weight::from_parts(13_630_637, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_818_000 picoseconds.
        Weight::from_parts(112_676_264, 0)
            // Standard Error: 333_130
            .saturating_add(Weight::from_parts(114_231_920, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 159_849_000 picoseconds.
        Weight::from_parts(161_376_000, 0)
            // Standard Error: 52_546
            .saturating_add(Weight::from_parts(25_816_075, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_916_000 picoseconds.
        Weight::from_parts(92_228_268, 0)
            // Standard Error: 329_307
            .saturating_add(Weight::from_parts(83_076_033, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 179_446_000 picoseconds.
        Weight::from_parts(229_514_451, 0)
            // Standard Error: 257_645
            .saturating_add(Weight::from_parts(154_731_264, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_616_000 picoseconds.
        Weight::from_parts(175_768_720, 0)
            // Standard Error: 367_635
            .saturating_add(Weight::from_parts(358_564_932, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_902_420_000 picoseconds.
        Weight::from_parts(45_126_501_000, 0)
            // Standard Error: 280_708
            .saturating_add(Weight::from_parts(7_774_529, 0).saturating_mul(p.into()))
            // Standard Error: 280_694
            .saturating_add(Weight::from_parts(175_731_776, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_285_000 picoseconds.
        Weight::from_parts(176_429_268, 0)
            // Standard Error: 384_072
            .saturating_add(Weight::from_parts(366_592_077, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 46_638_288_000 picoseconds.
        Weight::from_parts(47_081_319_000, 0)
            // Standard Error: 280_733
            .saturating_add(Weight::from_parts(7_134_527, 0).saturating_mul(p.into()))
            // Standard Error: 280_720
            .saturating_add(Weight::from_parts(175_082_854, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_230_000 picoseconds.
        Weight::from_parts(120_175_562, 0)
            // Standard Error: 35_806
            .saturating_add(Weight::from_parts(1_783_612, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 99_162_000 picoseconds.
        Weight::from_parts(112_460_979, 1131)
            // Standard Error: 19_215
            .saturating_add(Weight::from_parts(16_485_170, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 100_684_000 picoseconds.
        Weight::from_parts(104_531_000, 1131)
            // Standard Error: 46_782
            .saturating_add(Weight::from_parts(42_067_142, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_272_424_000 picoseconds.
        Weight::from_parts(8_390_589_661, 5069931)
            // Standard Error: 72_393
            .saturating_add(Weight::from_parts(42_604_682, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 105_024_000 picoseconds.
        Weight::from_parts(106_386_000, 1939)
            // Standard Error: 32_440
            .saturating_add(Weight::from_parts(54_183_902, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 102_854_000 picoseconds.
        Weight::from_parts(109_646_367, 1131)
            // Standard Error: 70_655
            .saturating_add(Weight::from_parts(39_228_760, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 761_606_000 picoseconds.
        Weight::from_parts(762_350_763, 1496)
            // Standard Error: 286_780
            .saturating_add(Weight::from_parts(50_979_584, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_256_343_000 picoseconds.
        Weight::from_parts(1_302_047_252, 317931)
            // Standard Error: 283_008
            .saturating_add(Weight::from_parts(47_678_236, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_405_000 picoseconds.
        Weight::from_parts(16_352_957, 0)
            // Standard Error: 351_237
            .saturating_add(Weight::from_parts(74_154_815, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_441_407_000 picoseconds.
        Weight::from_parts(4_242_069_387, 0)
            // Standard Error: 107_408
            .saturating_add(Weight::from_parts(5_267_383, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_473_808_000 picoseconds.
        Weight::from_parts(4_245_461_153, 0)
            // Standard Error: 115_662
            .saturating_add(Weight::from_parts(5_334_771, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_011_360_000 picoseconds.
        Weight::from_parts(11_931_421_315, 0)
            // Standard Error: 187_701
            .saturating_add(Weight::from_parts(13_022_743, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_664_214_000 picoseconds.
        Weight::from_parts(11_902_396_905, 0)
            // Standard Error: 182_715
            .saturating_add(Weight::from_parts(10_825_224, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_372_000 picoseconds.
        Weight::from_parts(2_477_000, 0)
            // Standard Error: 7_020
            .saturating_add(Weight::from_parts(3_847_128, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_352_000 picoseconds.
        Weight::from_parts(470_151, 0)
            // Standard Error: 9_768
            .saturating_add(Weight::from_parts(3_187_107, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_328_000 picoseconds.
        Weight::from_parts(3_603_744, 0)
            // Standard Error: 1_310
            .saturating_add(Weight::from_parts(1_573_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_406_000 picoseconds.
        Weight::from_parts(2_502_000, 0)
            // Standard Error: 9_218
            .saturating_add(Weight::from_parts(2_948_836, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_377_000 picoseconds.
        Weight::from_parts(5_774_753, 0)
            // Standard Error: 20_000
            .saturating_add(Weight::from_parts(4_967_379, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_031_000 picoseconds.
        Weight::from_parts(5_288_626, 0)
            // Standard Error: 1_512
            .saturating_add(Weight::from_parts(180_398, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_476_000 picoseconds.
        Weight::from_parts(5_743_941, 0)
            // Standard Error: 9_413
            .saturating_add(Weight::from_parts(2_620_325, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_620_325 -
            2_411_747, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_490_000 picoseconds.
        Weight::from_parts(6_164_933, 0)
            // Standard Error: 13_627
            .saturating_add(Weight::from_parts(2_411_747, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_755_000 picoseconds.
        Weight::from_parts(21_073_006, 0)
            // Standard Error: 27_772
            .saturating_add(Weight::from_parts(9_843_221, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_641_000 picoseconds.
        Weight::from_parts(3_862_091, 0)
            // Standard Error: 6_388
            .saturating_add(Weight::from_parts(1_271_540, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_445_000 picoseconds.
        Weight::from_parts(5_936_643, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_780_000 picoseconds.
        Weight::from_parts(5_168_488, 0)
            // Standard Error: 3_624
            .saturating_add(Weight::from_parts(434_517, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_903_000 picoseconds.
        Weight::from_parts(4_238_955, 0)
            // Standard Error: 7_038
            .saturating_add(Weight::from_parts(1_087_596, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_937_000 picoseconds.
        Weight::from_parts(3_461_941, 0)
            // Standard Error: 7_961
            .saturating_add(Weight::from_parts(1_107_695, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_601_000 picoseconds.
        Weight::from_parts(2_918_352, 0)
            // Standard Error: 7_206
            .saturating_add(Weight::from_parts(827_628, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_605_000 picoseconds.
        Weight::from_parts(6_684_000, 0)
            // Standard Error: 8_000
            .saturating_add(Weight::from_parts(1_428_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_591_000 picoseconds.
        Weight::from_parts(2_772_486, 0)
            // Standard Error: 13_130
            .saturating_add(Weight::from_parts(7_127_049, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_376_000 picoseconds.
        Weight::from_parts(2_431_000, 0)
            // Standard Error: 6_471
            .saturating_add(Weight::from_parts(3_416_623, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_367_000 picoseconds.
        Weight::from_parts(2_481_000, 0)
            // Standard Error: 4_834
            .saturating_add(Weight::from_parts(3_141_274, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_414_000 picoseconds.
        Weight::from_parts(2_479_000, 0)
            // Standard Error: 5_384
            .saturating_add(Weight::from_parts(3_162_450, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_481_000 picoseconds.
        Weight::from_parts(2_534_000, 0)
            // Standard Error: 5_851
            .saturating_add(Weight::from_parts(2_742_009, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_444_000 picoseconds.
        Weight::from_parts(2_522_000, 0)
            // Standard Error: 5_551
            .saturating_add(Weight::from_parts(650_966, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_476_000 picoseconds.
        Weight::from_parts(627_113, 0)
            // Standard Error: 6_633
            .saturating_add(Weight::from_parts(527_272, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_415_000 picoseconds.
        Weight::from_parts(2_511_000, 0)
            // Standard Error: 10_855
            .saturating_add(Weight::from_parts(1_987_179, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_374_000 picoseconds.
        Weight::from_parts(2_523_000, 0)
            // Standard Error: 8_639
            .saturating_add(Weight::from_parts(1_265_345, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_385_000 picoseconds.
        Weight::from_parts(1_218_539, 0)
            // Standard Error: 5_119
            .saturating_add(Weight::from_parts(443_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_408_000 picoseconds.
        Weight::from_parts(1_419_491, 0)
            // Standard Error: 3_971
            .saturating_add(Weight::from_parts(429_566, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_442_000 picoseconds.
        Weight::from_parts(2_534_000, 0)
            // Standard Error: 5_488
            .saturating_add(Weight::from_parts(626_359, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_383_000 picoseconds.
        Weight::from_parts(267_997, 0)
            // Standard Error: 6_829
            .saturating_add(Weight::from_parts(639_304, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_336_000 picoseconds.
        Weight::from_parts(2_524_000, 0)
            // Standard Error: 4_090
            .saturating_add(Weight::from_parts(515_493, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_419_000 picoseconds.
        Weight::from_parts(1_479_176, 0)
            // Standard Error: 4_590
            .saturating_add(Weight::from_parts(393_408, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_404_000 picoseconds.
        Weight::from_parts(2_886_191, 0)
            // Standard Error: 2_108
            .saturating_add(Weight::from_parts(180_952, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_423_000 picoseconds.
        Weight::from_parts(2_587_480, 0)
            // Standard Error: 2_350
            .saturating_add(Weight::from_parts(202_312, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_457_000 picoseconds.
        Weight::from_parts(2_558_000, 0)
            // Standard Error: 9_756
            .saturating_add(Weight::from_parts(1_914_693, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_431_000 picoseconds.
        Weight::from_parts(2_481_000, 0)
            // Standard Error: 8_683
            .saturating_add(Weight::from_parts(1_235_014, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_418_000 picoseconds.
        Weight::from_parts(2_533_000, 0)
            // Standard Error: 9_762
            .saturating_add(Weight::from_parts(1_952_043, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_444_000 picoseconds.
        Weight::from_parts(2_542_000, 0)
            // Standard Error: 8_692
            .saturating_add(Weight::from_parts(1_240_320, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_415_000 picoseconds.
        Weight::from_parts(2_535_000, 0)
            // Standard Error: 10_660
            .saturating_add(Weight::from_parts(1_944_040, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_365_000 picoseconds.
        Weight::from_parts(2_469_000, 0)
            // Standard Error: 7_760
            .saturating_add(Weight::from_parts(1_232_925, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_445_000 picoseconds.
        Weight::from_parts(2_496_000, 0)
            // Standard Error: 10_669
            .saturating_add(Weight::from_parts(1_917_582, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_393_000 picoseconds.
        Weight::from_parts(2_455_000, 0)
            // Standard Error: 8_096
            .saturating_add(Weight::from_parts(1_210_306, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_351_000 picoseconds.
        Weight::from_parts(2_463_000, 0)
            // Standard Error: 10_885
            .saturating_add(Weight::from_parts(1_890_425, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_460_000 picoseconds.
        Weight::from_parts(2_542_000, 0)
            // Standard Error: 9_229
            .saturating_add(Weight::from_parts(1_236_149, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_438_000 picoseconds.
        Weight::from_parts(2_519_000, 0)
            // Standard Error: 10_023
            .saturating_add(Weight::from_parts(1_937_593, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_414_000 picoseconds.
        Weight::from_parts(2_509_000, 0)
            // Standard Error: 8_360
            .saturating_add(Weight::from_parts(1_234_039, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_354_000 picoseconds.
        Weight::from_parts(2_409_000, 0)
            // Standard Error: 10_328
            .saturating_add(Weight::from_parts(1_926_867, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_404_000 picoseconds.
        Weight::from_parts(2_498_000, 0)
            // Standard Error: 6_744
            .saturating_add(Weight::from_parts(1_201_302, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_410_000 picoseconds.
        Weight::from_parts(2_483_000, 0)
            // Standard Error: 9_487
            .saturating_add(Weight::from_parts(1_900_378, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_387_000 picoseconds.
        Weight::from_parts(2_459_000, 0)
            // Standard Error: 7_524
            .saturating_add(Weight::from_parts(1_246_740, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_452_000 picoseconds.
        Weight::from_parts(2_532_000, 0)
            // Standard Error: 9_466
            .saturating_add(Weight::from_parts(1_877_147, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_374_000 picoseconds.
        Weight::from_parts(2_541_000, 0)
            // Standard Error: 8_268
            .saturating_add(Weight::from_parts(1_218_632, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_393_000 picoseconds.
        Weight::from_parts(2_485_000, 0)
            // Standard Error: 9_288
            .saturating_add(Weight::from_parts(1_892_308, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_416_000 picoseconds.
        Weight::from_parts(2_490_000, 0)
            // Standard Error: 7_514
            .saturating_add(Weight::from_parts(1_221_546, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_396_000 picoseconds.
        Weight::from_parts(2_479_000, 0)
            // Standard Error: 8_638
            .saturating_add(Weight::from_parts(1_370_587, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_364_000 picoseconds.
        Weight::from_parts(2_433_000, 0)
            // Standard Error: 7_144
            .saturating_add(Weight::from_parts(740_923, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_409_000 picoseconds.
        Weight::from_parts(2_490_000, 0)
            // Standard Error: 7_493
            .saturating_add(Weight::from_parts(1_344_150, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_332_000 picoseconds.
        Weight::from_parts(2_408_000, 0)
            // Standard Error: 5_062
            .saturating_add(Weight::from_parts(682_810, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_357_000 picoseconds.
        Weight::from_parts(2_429_000, 0)
            // Standard Error: 8_825
            .saturating_add(Weight::from_parts(1_852_934, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_379_000 picoseconds.
        Weight::from_parts(2_477_000, 0)
            // Standard Error: 7_950
            .saturating_add(Weight::from_parts(1_310_475, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_486_000 picoseconds.
        Weight::from_parts(7_409_149, 0)
            // Standard Error: 23_280
            .saturating_add(Weight::from_parts(2_380_599, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_354_000 picoseconds.
        Weight::from_parts(3_985_947, 0)
            // Standard Error: 17_253
            .saturating_add(Weight::from_parts(2_308_046, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_428_000 picoseconds.
        Weight::from_parts(5_185_413, 0)
            // Standard Error: 23_626
            .saturating_add(Weight::from_parts(2_773_914, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_429_000 picoseconds.
        Weight::from_parts(1_762_312, 0)
            // Standard Error: 13_137
            .saturating_add(Weight::from_parts(2_479_857, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_409_000 picoseconds.
        Weight::from_parts(6_183_774, 0)
            // Standard Error: 38_390
            .saturating_add(Weight::from_parts(9_036_753, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_365_000 picoseconds.
        Weight::from_parts(4_139_889, 0)
            // Standard Error: 41_118
            .saturating_add(Weight::from_parts(7_440_928, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_381_000 picoseconds.
        Weight::from_parts(6_243_134, 0)
            // Standard Error: 22_183
            .saturating_add(Weight::from_parts(2_805_045, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_235_000 picoseconds.
        Weight::from_parts(3_471_941, 0)
            // Standard Error: 17_840
            .saturating_add(Weight::from_parts(2_399_950, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_386_000 picoseconds.
        Weight::from_parts(2_442_000, 0)
            // Standard Error: 9_450
            .saturating_add(Weight::from_parts(1_363_334, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_344_000 picoseconds.
        Weight::from_parts(2_515_000, 0)
            // Standard Error: 5_086
            .saturating_add(Weight::from_parts(682_806, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_426_000 picoseconds.
        Weight::from_parts(2_542_000, 0)
            // Standard Error: 9_043
            .saturating_add(Weight::from_parts(1_383_826, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_462_000 picoseconds.
        Weight::from_parts(2_534_000, 0)
            // Standard Error: 5_704
            .saturating_add(Weight::from_parts(687_779, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_386_000 picoseconds.
        Weight::from_parts(2_437_000, 0)
            // Standard Error: 7_683
            .saturating_add(Weight::from_parts(1_343_755, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_376_000 picoseconds.
        Weight::from_parts(2_482_000, 0)
            // Standard Error: 4_933
            .saturating_add(Weight::from_parts(708_732, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_449_000 picoseconds.
        Weight::from_parts(2_532_000, 0)
            // Standard Error: 6_389
            .saturating_add(Weight::from_parts(1_180_854, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_349_000 picoseconds.
        Weight::from_parts(2_425_000, 0)
            // Standard Error: 4_313
            .saturating_add(Weight::from_parts(633_941, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_467_000 picoseconds.
        Weight::from_parts(2_512_000, 0)
            // Standard Error: 8_780
            .saturating_add(Weight::from_parts(1_192_503, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_527_000 picoseconds.
        Weight::from_parts(2_588_000, 0)
            // Standard Error: 4_176
            .saturating_add(Weight::from_parts(593_049, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_415_000 picoseconds.
        Weight::from_parts(2_530_000, 0)
            // Standard Error: 7_794
            .saturating_add(Weight::from_parts(1_154_673, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_440_000 picoseconds.
        Weight::from_parts(2_524_000, 0)
            // Standard Error: 5_453
            .saturating_add(Weight::from_parts(633_003, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_341_000 picoseconds.
        Weight::from_parts(2_378_000, 0)
            // Standard Error: 8_555
            .saturating_add(Weight::from_parts(1_196_751, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_395_000 picoseconds.
        Weight::from_parts(2_496_000, 0)
            // Standard Error: 4_682
            .saturating_add(Weight::from_parts(627_173, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_380_000 picoseconds.
        Weight::from_parts(2_444_000, 0)
            // Standard Error: 7_964
            .saturating_add(Weight::from_parts(1_141_337, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_442_000 picoseconds.
        Weight::from_parts(2_531_000, 0)
            // Standard Error: 5_193
            .saturating_add(Weight::from_parts(628_586, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_resume_session() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `352`
        //  Estimated: `4169`
        // Minimum execution time: 5_990_000 picoseconds.
        Weight::from_parts(6_384_000, 4169)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1107`
        //  Estimated: `24053`
        // Minimum execution time: 64_318_000 picoseconds.
        Weight::from_parts(67_713_000, 24053)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `888`
        //  Estimated: `22158`
        // Minimum execution time: 50_396_000 picoseconds.
        Weight::from_parts(57_319_000, 22158)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1010`
        //  Estimated: `34619`
        // Minimum execution time: 81_192_000 picoseconds.
        Weight::from_parts(110_464_000, 34619)
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `695`
        //  Estimated: `20509`
        // Minimum execution time: 33_549_000 picoseconds.
        Weight::from_parts(35_457_000, 20509)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `976`
        //  Estimated: `26636`
        // Minimum execution time: 53_062_000 picoseconds.
        Weight::from_parts(55_913_000, 26636)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_544_000 picoseconds.
        Weight::from_parts(3_797_000, 3545)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1626`
        //  Estimated: `58232`
        // Minimum execution time: 119_636_000 picoseconds.
        Weight::from_parts(122_812_000, 58232)
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1332`
        //  Estimated: `46962`
        // Minimum execution time: 94_503_000 picoseconds.
        Weight::from_parts(98_976_000, 46962)
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2303 + c * (16400 ±0)`
        //  Estimated: `19878 + c * (84480 ±0)`
        // Minimum execution time: 31_538_000 picoseconds.
        Weight::from_parts(32_681_000, 19878)
            // Standard Error: 71_008
            .saturating_add(Weight::from_parts(39_112_947, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 84480).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program_uninited(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3129 + c * (42 ±0)`
        //  Estimated: `60575 + c * (2947 ±0)`
        // Minimum execution time: 91_887_000 picoseconds.
        Weight::from_parts(87_209_551, 60575)
            // Standard Error: 2_248
            .saturating_add(Weight::from_parts(1_083_157, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2947).saturating_mul(c.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_967_000 picoseconds.
        Weight::from_parts(100_769_202, 0)
            // Standard Error: 78_239
            .saturating_add(Weight::from_parts(21_623_874, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_625_000 picoseconds.
        Weight::from_parts(103_100_672, 0)
            // Standard Error: 79_915
            .saturating_add(Weight::from_parts(18_339_856, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_620_000 picoseconds.
        Weight::from_parts(102_660_230, 0)
            // Standard Error: 81_604
            .saturating_add(Weight::from_parts(18_180_584, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_037_000 picoseconds.
        Weight::from_parts(101_912_864, 0)
            // Standard Error: 84_108
            .saturating_add(Weight::from_parts(20_742_928, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 716_479_000 picoseconds.
        Weight::from_parts(752_477_538, 0)
            // Standard Error: 630_784
            .saturating_add(Weight::from_parts(22_929_588, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 726_949_000 picoseconds.
        Weight::from_parts(774_347_474, 0)
            // Standard Error: 902_271
            .saturating_add(Weight::from_parts(17_273_758, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_653_000 picoseconds.
        Weight::from_parts(110_681_190, 0)
            // Standard Error: 90_520
            .saturating_add(Weight::from_parts(12_801_500, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_389_000 picoseconds.
        Weight::from_parts(113_272_838, 0)
            // Standard Error: 89_344
            .saturating_add(Weight::from_parts(5_340_718, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_868_000 picoseconds.
        Weight::from_parts(104_048_366, 0)
            // Standard Error: 2_216_528
            .saturating_add(Weight::from_parts(541_182_376, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_494_000 picoseconds.
        Weight::from_parts(103_419_240, 0)
            // Standard Error: 2_066_261
            .saturating_add(Weight::from_parts(536_063_286, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_167_000 picoseconds.
        Weight::from_parts(103_413_378, 0)
            // Standard Error: 2_011_359
            .saturating_add(Weight::from_parts(519_142_196, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_437_000 picoseconds.
        Weight::from_parts(100_205_340, 0)
            // Standard Error: 2_405_150
            .saturating_add(Weight::from_parts(547_275_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_803_000 picoseconds.
        Weight::from_parts(102_665_234, 0)
            // Standard Error: 2_225_197
            .saturating_add(Weight::from_parts(553_575_546, 0).saturating_mul(r.into()))
    }
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 976_000 picoseconds.
        Weight::from_parts(1_072_000, 0)
            // Standard Error: 699
            .saturating_add(Weight::from_parts(245_833, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_396_000 picoseconds.
        Weight::from_parts(3_490_000, 3610)
            // Standard Error: 1_049
            .saturating_add(Weight::from_parts(676_643, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_736_000 picoseconds.
        Weight::from_parts(76_636_221, 0)
            // Standard Error: 9_825
            .saturating_add(Weight::from_parts(2_570_922, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1372`
        //  Estimated: `51905`
        // Minimum execution time: 111_461_000 picoseconds.
        Weight::from_parts(114_029_000, 51905)
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `992`
        //  Estimated: `21579`
        // Minimum execution time: 57_697_000 picoseconds.
        Weight::from_parts(58_842_000, 21579)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `638`
        //  Estimated: `17486`
        // Minimum execution time: 30_530_000 picoseconds.
        Weight::from_parts(32_003_000, 17486)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_274_000 picoseconds.
        Weight::from_parts(8_261_331, 7640)
            // Standard Error: 41_108
            .saturating_add(Weight::from_parts(13_969_743, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1593 + c * (16389 ±0)`
        //  Estimated: `43266 + c * (131112 ±0)`
        // Minimum execution time: 74_444_000 picoseconds.
        Weight::from_parts(75_016_000, 43266)
            // Standard Error: 165_690
            .saturating_add(Weight::from_parts(55_174_777, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `5402`
        // Minimum execution time: 79_739_000 picoseconds.
        Weight::from_parts(1_118_426, 5402)
            // Standard Error: 68_897
            .saturating_add(Weight::from_parts(60_115_395, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1111`
        //  Estimated: `50600`
        // Minimum execution time: 96_509_000 picoseconds.
        Weight::from_parts(129_317_147, 50600)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_581, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `521`
        //  Estimated: `45152`
        // Minimum execution time: 10_940_898_000 picoseconds.
        Weight::from_parts(67_432_582, 45152)
            // Standard Error: 159_611
            .saturating_add(Weight::from_parts(61_428_399, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_577, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `531`
        //  Estimated: `31266`
        // Minimum execution time: 77_245_000 picoseconds.
        Weight::from_parts(59_204_735, 31266)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_042, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1371`
        //  Estimated: `54435`
        // Minimum execution time: 128_271_000 picoseconds.
        Weight::from_parts(93_877_619, 54435)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_085, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `121468`
        // Minimum execution time: 379_776_000 picoseconds.
        Weight::from_parts(397_994_052, 121468)
            .saturating_add(RocksDbWeight::get().reads(35_u64))
            .saturating_add(RocksDbWeight::get().writes(26_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `121468`
        // Minimum execution time: 393_678_000 picoseconds.
        Weight::from_parts(411_350_620, 121468)
            // Standard Error: 1_741
            .saturating_add(Weight::from_parts(5_796, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(35_u64))
            .saturating_add(RocksDbWeight::get().writes(26_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 58_693_000 picoseconds.
        Weight::from_parts(59_295_000, 3899)
            // Standard Error: 33_015
            .saturating_add(Weight::from_parts(61_659_744, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_082_000 picoseconds.
        Weight::from_parts(97_548_000, 0)
            // Standard Error: 3_920_023
            .saturating_add(Weight::from_parts(729_307_729, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 491_508_000 picoseconds.
        Weight::from_parts(463_051_109, 0)
            // Standard Error: 421_338
            .saturating_add(Weight::from_parts(31_169_166, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 220_882_000 picoseconds.
        Weight::from_parts(231_751_371, 0)
            // Standard Error: 241_524
            .saturating_add(Weight::from_parts(62_988_026, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_013_000 picoseconds.
        Weight::from_parts(108_487_423, 0)
            // Standard Error: 4_858
            .saturating_add(Weight::from_parts(2_524_407, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 182_206_000 picoseconds.
        Weight::from_parts(218_782_104, 0)
            // Standard Error: 14_768
            .saturating_add(Weight::from_parts(2_153_377, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_458_000 picoseconds.
        Weight::from_parts(121_028_602, 0)
            // Standard Error: 385_510
            .saturating_add(Weight::from_parts(95_782_527, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_412_000 picoseconds.
        Weight::from_parts(86_061_953, 0)
            // Standard Error: 356_205
            .saturating_add(Weight::from_parts(87_923_229, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_962_000 picoseconds.
        Weight::from_parts(96_667_757, 0)
            // Standard Error: 333_738
            .saturating_add(Weight::from_parts(84_955_970, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_464_000 picoseconds.
        Weight::from_parts(90_164_484, 0)
            // Standard Error: 321_979
            .saturating_add(Weight::from_parts(85_647_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_334_000 picoseconds.
        Weight::from_parts(91_107_930, 0)
            // Standard Error: 336_291
            .saturating_add(Weight::from_parts(85_501_563, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_398_000 picoseconds.
        Weight::from_parts(97_803_650, 0)
            // Standard Error: 330_728
            .saturating_add(Weight::from_parts(84_746_249, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_554_000 picoseconds.
        Weight::from_parts(77_927_782, 0)
            // Standard Error: 386_800
            .saturating_add(Weight::from_parts(90_358_021, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_554_000 picoseconds.
        Weight::from_parts(96_055_722, 0)
            // Standard Error: 331_628
            .saturating_add(Weight::from_parts(84_542_244, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 725_792_000 picoseconds.
        Weight::from_parts(801_544_878, 0)
            // Standard Error: 398_821
            .saturating_add(Weight::from_parts(140_715_634, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 869_816_000 picoseconds.
        Weight::from_parts(886_588_000, 0)
            // Standard Error: 54_300
            .saturating_add(Weight::from_parts(13_214_277, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_800_000 picoseconds.
        Weight::from_parts(92_344_333, 0)
            // Standard Error: 339_355
            .saturating_add(Weight::from_parts(86_790_706, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_651_000 picoseconds.
        Weight::from_parts(92_529_847, 0)
            // Standard Error: 295_105
            .saturating_add(Weight::from_parts(89_002_384, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_357_000 picoseconds.
        Weight::from_parts(105_767_963, 0)
            // Standard Error: 380_641
            .saturating_add(Weight::from_parts(174_604_231, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_092_000 picoseconds.
        Weight::from_parts(105_802_000, 0)
            // Standard Error: 3_553_393
            .saturating_add(Weight::from_parts(783_848_741, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_050_000 picoseconds.
        Weight::from_parts(174_923_994, 0)
            // Standard Error: 430_038
            .saturating_add(Weight::from_parts(266_665_269, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 357_531_000 picoseconds.
        Weight::from_parts(365_896_000, 0)
            // Standard Error: 59_017
            .saturating_add(Weight::from_parts(21_340_532, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_643_000 picoseconds.
        Weight::from_parts(185_395_839, 0)
            // Standard Error: 402_403
            .saturating_add(Weight::from_parts(266_083_111, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 361_853_000 picoseconds.
        Weight::from_parts(371_175_000, 0)
            // Standard Error: 62_531
            .saturating_add(Weight::from_parts(21_372_225, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 731_246_000 picoseconds.
        Weight::from_parts(827_016_024, 0)
            // Standard Error: 456_568
            .saturating_add(Weight::from_parts(283_568_931, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 725_315_000 picoseconds.
        Weight::from_parts(814_525_892, 0)
            // Standard Error: 535_531
            .saturating_add(Weight::from_parts(291_725_582, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_930_000 picoseconds.
        Weight::from_parts(86_911_409, 0)
            // Standard Error: 308_962
            .saturating_add(Weight::from_parts(98_197_967, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_871_002_000 picoseconds.
        Weight::from_parts(2_023_643_652, 0)
            // Standard Error: 354_203
            .saturating_add(Weight::from_parts(163_033_723, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 321_280_000 picoseconds.
        Weight::from_parts(326_774_000, 0)
            // Standard Error: 53_820
            .saturating_add(Weight::from_parts(31_205_219, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_866_780_000 picoseconds.
        Weight::from_parts(2_024_271_501, 0)
            // Standard Error: 405_972
            .saturating_add(Weight::from_parts(225_776_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_875_608_000 picoseconds.
        Weight::from_parts(2_019_090_196, 0)
            // Standard Error: 346_810
            .saturating_add(Weight::from_parts(235_898_569, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 263_903_000 picoseconds.
        Weight::from_parts(339_925_241, 0)
            // Standard Error: 414_003
            .saturating_add(Weight::from_parts(280_423_422, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 535_212_000 picoseconds.
        Weight::from_parts(545_222_000, 0)
            // Standard Error: 58_250
            .saturating_add(Weight::from_parts(21_556_762, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_022_436_000 picoseconds.
        Weight::from_parts(2_212_258_384, 0)
            // Standard Error: 460_291
            .saturating_add(Weight::from_parts(249_403_133, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_080_000 picoseconds.
        Weight::from_parts(104_765_276, 0)
            // Standard Error: 994
            .saturating_add(Weight::from_parts(436_761, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 115_283_000 picoseconds.
        Weight::from_parts(109_185_112, 0)
            // Standard Error: 1_244
            .saturating_add(Weight::from_parts(432_177, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_873_000 picoseconds.
        Weight::from_parts(159_110_710, 0)
            // Standard Error: 457_822
            .saturating_add(Weight::from_parts(152_162_507, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 112_593_000 picoseconds.
        Weight::from_parts(114_913_000, 0)
            // Standard Error: 2_557
            .saturating_add(Weight::from_parts(677_985, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 118_073_000 picoseconds.
        Weight::from_parts(113_763_795, 0)
            // Standard Error: 1_010
            .saturating_add(Weight::from_parts(428_786, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 114_860_000 picoseconds.
        Weight::from_parts(101_920_439, 0)
            // Standard Error: 1_083
            .saturating_add(Weight::from_parts(442_833, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_512_000 picoseconds.
        Weight::from_parts(88_626_388, 0)
            // Standard Error: 366_499
            .saturating_add(Weight::from_parts(88_122_315, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_944_000 picoseconds.
        Weight::from_parts(94_274_573, 0)
            // Standard Error: 344_379
            .saturating_add(Weight::from_parts(83_385_159, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_736_000 picoseconds.
        Weight::from_parts(102_598_887, 0)
            // Standard Error: 254_019
            .saturating_add(Weight::from_parts(86_050_309, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 740_156_000 picoseconds.
        Weight::from_parts(781_820_116, 0)
            // Standard Error: 419_407
            .saturating_add(Weight::from_parts(107_969_773, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 755_846_000 picoseconds.
        Weight::from_parts(780_455_697, 0)
            // Standard Error: 1_995
            .saturating_add(Weight::from_parts(161_261, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_511_608_000 picoseconds.
        Weight::from_parts(2_705_076_651, 0)
            // Standard Error: 493_983
            .saturating_add(Weight::from_parts(127_194_997, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_717_264_000 picoseconds.
        Weight::from_parts(2_814_539_958, 0)
            // Standard Error: 10_103
            .saturating_add(Weight::from_parts(13_630_637, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_818_000 picoseconds.
        Weight::from_parts(112_676_264, 0)
            // Standard Error: 333_130
            .saturating_add(Weight::from_parts(114_231_920, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 159_849_000 picoseconds.
        Weight::from_parts(161_376_000, 0)
            // Standard Error: 52_546
            .saturating_add(Weight::from_parts(25_816_075, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_916_000 picoseconds.
        Weight::from_parts(92_228_268, 0)
            // Standard Error: 329_307
            .saturating_add(Weight::from_parts(83_076_033, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 179_446_000 picoseconds.
        Weight::from_parts(229_514_451, 0)
            // Standard Error: 257_645
            .saturating_add(Weight::from_parts(154_731_264, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_616_000 picoseconds.
        Weight::from_parts(175_768_720, 0)
            // Standard Error: 367_635
            .saturating_add(Weight::from_parts(358_564_932, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_902_420_000 picoseconds.
        Weight::from_parts(45_126_501_000, 0)
            // Standard Error: 280_708
            .saturating_add(Weight::from_parts(7_774_529, 0).saturating_mul(p.into()))
            // Standard Error: 280_694
            .saturating_add(Weight::from_parts(175_731_776, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_285_000 picoseconds.
        Weight::from_parts(176_429_268, 0)
            // Standard Error: 384_072
            .saturating_add(Weight::from_parts(366_592_077, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 46_638_288_000 picoseconds.
        Weight::from_parts(47_081_319_000, 0)
            // Standard Error: 280_733
            .saturating_add(Weight::from_parts(7_134_527, 0).saturating_mul(p.into()))
            // Standard Error: 280_720
            .saturating_add(Weight::from_parts(175_082_854, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_230_000 picoseconds.
        Weight::from_parts(120_175_562, 0)
            // Standard Error: 35_806
            .saturating_add(Weight::from_parts(1_783_612, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 99_162_000 picoseconds.
        Weight::from_parts(112_460_979, 1131)
            // Standard Error: 19_215
            .saturating_add(Weight::from_parts(16_485_170, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 100_684_000 picoseconds.
        Weight::from_parts(104_531_000, 1131)
            // Standard Error: 46_782
            .saturating_add(Weight::from_parts(42_067_142, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_272_424_000 picoseconds.
        Weight::from_parts(8_390_589_661, 5069931)
            // Standard Error: 72_393
            .saturating_add(Weight::from_parts(42_604_682, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 105_024_000 picoseconds.
        Weight::from_parts(106_386_000, 1939)
            // Standard Error: 32_440
            .saturating_add(Weight::from_parts(54_183_902, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 102_854_000 picoseconds.
        Weight::from_parts(109_646_367, 1131)
            // Standard Error: 70_655
            .saturating_add(Weight::from_parts(39_228_760, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 761_606_000 picoseconds.
        Weight::from_parts(762_350_763, 1496)
            // Standard Error: 286_780
            .saturating_add(Weight::from_parts(50_979_584, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_256_343_000 picoseconds.
        Weight::from_parts(1_302_047_252, 317931)
            // Standard Error: 283_008
            .saturating_add(Weight::from_parts(47_678_236, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_405_000 picoseconds.
        Weight::from_parts(16_352_957, 0)
            // Standard Error: 351_237
            .saturating_add(Weight::from_parts(74_154_815, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_441_407_000 picoseconds.
        Weight::from_parts(4_242_069_387, 0)
            // Standard Error: 107_408
            .saturating_add(Weight::from_parts(5_267_383, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_473_808_000 picoseconds.
        Weight::from_parts(4_245_461_153, 0)
            // Standard Error: 115_662
            .saturating_add(Weight::from_parts(5_334_771, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_011_360_000 picoseconds.
        Weight::from_parts(11_931_421_315, 0)
            // Standard Error: 187_701
            .saturating_add(Weight::from_parts(13_022_743, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_664_214_000 picoseconds.
        Weight::from_parts(11_902_396_905, 0)
            // Standard Error: 182_715
            .saturating_add(Weight::from_parts(10_825_224, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_372_000 picoseconds.
        Weight::from_parts(2_477_000, 0)
            // Standard Error: 7_020
            .saturating_add(Weight::from_parts(3_847_128, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_352_000 picoseconds.
        Weight::from_parts(470_151, 0)
            // Standard Error: 9_768
            .saturating_add(Weight::from_parts(3_187_107, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_328_000 picoseconds.
        Weight::from_parts(3_603_744, 0)
            // Standard Error: 1_310
            .saturating_add(Weight::from_parts(1_573_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_406_000 picoseconds.
        Weight::from_parts(2_502_000, 0)
            // Standard Error: 9_218
            .saturating_add(Weight::from_parts(2_948_836, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_377_000 picoseconds.
        Weight::from_parts(5_774_753, 0)
            // Standard Error: 20_000
            .saturating_add(Weight::from_parts(4_967_379, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_031_000 picoseconds.
        Weight::from_parts(5_288_626, 0)
            // Standard Error: 1_512
            .saturating_add(Weight::from_parts(180_398, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_476_000 picoseconds.
        Weight::from_parts(5_743_941, 0)
            // Standard Error: 9_413
            .saturating_add(Weight::from_parts(2_620_325, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_620_325 -
            2_411_747, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_490_000 picoseconds.
        Weight::from_parts(6_164_933, 0)
            // Standard Error: 13_627
            .saturating_add(Weight::from_parts(2_411_747, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_755_000 picoseconds.
        Weight::from_parts(21_073_006, 0)
            // Standard Error: 27_772
            .saturating_add(Weight::from_parts(9_843_221, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_641_000 picoseconds.
        Weight::from_parts(3_862_091, 0)
            // Standard Error: 6_388
            .saturating_add(Weight::from_parts(1_271_540, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_445_000 picoseconds.
        Weight::from_parts(5_936_643, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_780_000 picoseconds.
        Weight::from_parts(5_168_488, 0)
            // Standard Error: 3_624
            .saturating_add(Weight::from_parts(434_517, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_903_000 picoseconds.
        Weight::from_parts(4_238_955, 0)
            // Standard Error: 7_038
            .saturating_add(Weight::from_parts(1_087_596, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_937_000 picoseconds.
        Weight::from_parts(3_461_941, 0)
            // Standard Error: 7_961
            .saturating_add(Weight::from_parts(1_107_695, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_601_000 picoseconds.
        Weight::from_parts(2_918_352, 0)
            // Standard Error: 7_206
            .saturating_add(Weight::from_parts(827_628, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_605_000 picoseconds.
        Weight::from_parts(6_684_000, 0)
            // Standard Error: 8_000
            .saturating_add(Weight::from_parts(1_428_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_591_000 picoseconds.
        Weight::from_parts(2_772_486, 0)
            // Standard Error: 13_130
            .saturating_add(Weight::from_parts(7_127_049, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_376_000 picoseconds.
        Weight::from_parts(2_431_000, 0)
            // Standard Error: 6_471
            .saturating_add(Weight::from_parts(3_416_623, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_367_000 picoseconds.
        Weight::from_parts(2_481_000, 0)
            // Standard Error: 4_834
            .saturating_add(Weight::from_parts(3_141_274, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_414_000 picoseconds.
        Weight::from_parts(2_479_000, 0)
            // Standard Error: 5_384
            .saturating_add(Weight::from_parts(3_162_450, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_481_000 picoseconds.
        Weight::from_parts(2_534_000, 0)
            // Standard Error: 5_851
            .saturating_add(Weight::from_parts(2_742_009, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_444_000 picoseconds.
        Weight::from_parts(2_522_000, 0)
            // Standard Error: 5_551
            .saturating_add(Weight::from_parts(650_966, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_476_000 picoseconds.
        Weight::from_parts(627_113, 0)
            // Standard Error: 6_633
            .saturating_add(Weight::from_parts(527_272, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_415_000 picoseconds.
        Weight::from_parts(2_511_000, 0)
            // Standard Error: 10_855
            .saturating_add(Weight::from_parts(1_987_179, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_374_000 picoseconds.
        Weight::from_parts(2_523_000, 0)
            // Standard Error: 8_639
            .saturating_add(Weight::from_parts(1_265_345, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_385_000 picoseconds.
        Weight::from_parts(1_218_539, 0)
            // Standard Error: 5_119
            .saturating_add(Weight::from_parts(443_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_408_000 picoseconds.
        Weight::from_parts(1_419_491, 0)
            // Standard Error: 3_971
            .saturating_add(Weight::from_parts(429_566, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_442_000 picoseconds.
        Weight::from_parts(2_534_000, 0)
            // Standard Error: 5_488
            .saturating_add(Weight::from_parts(626_359, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_383_000 picoseconds.
        Weight::from_parts(267_997, 0)
            // Standard Error: 6_829
            .saturating_add(Weight::from_parts(639_304, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_336_000 picoseconds.
        Weight::from_parts(2_524_000, 0)
            // Standard Error: 4_090
            .saturating_add(Weight::from_parts(515_493, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_419_000 picoseconds.
        Weight::from_parts(1_479_176, 0)
            // Standard Error: 4_590
            .saturating_add(Weight::from_parts(393_408, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_404_000 picoseconds.
        Weight::from_parts(2_886_191, 0)
            // Standard Error: 2_108
            .saturating_add(Weight::from_parts(180_952, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_423_000 picoseconds.
        Weight::from_parts(2_587_480, 0)
            // Standard Error: 2_350
            .saturating_add(Weight::from_parts(202_312, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_457_000 picoseconds.
        Weight::from_parts(2_558_000, 0)
            // Standard Error: 9_756
            .saturating_add(Weight::from_parts(1_914_693, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_431_000 picoseconds.
        Weight::from_parts(2_481_000, 0)
            // Standard Error: 8_683
            .saturating_add(Weight::from_parts(1_235_014, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_418_000 picoseconds.
        Weight::from_parts(2_533_000, 0)
            // Standard Error: 9_762
            .saturating_add(Weight::from_parts(1_952_043, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_444_000 picoseconds.
        Weight::from_parts(2_542_000, 0)
            // Standard Error: 8_692
            .saturating_add(Weight::from_parts(1_240_320, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_415_000 picoseconds.
        Weight::from_parts(2_535_000, 0)
            // Standard Error: 10_660
            .saturating_add(Weight::from_parts(1_944_040, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_365_000 picoseconds.
        Weight::from_parts(2_469_000, 0)
            // Standard Error: 7_760
            .saturating_add(Weight::from_parts(1_232_925, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_445_000 picoseconds.
        Weight::from_parts(2_496_000, 0)
            // Standard Error: 10_669
            .saturating_add(Weight::from_parts(1_917_582, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_393_000 picoseconds.
        Weight::from_parts(2_455_000, 0)
            // Standard Error: 8_096
            .saturating_add(Weight::from_parts(1_210_306, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_351_000 picoseconds.
        Weight::from_parts(2_463_000, 0)
            // Standard Error: 10_885
            .saturating_add(Weight::from_parts(1_890_425, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_460_000 picoseconds.
        Weight::from_parts(2_542_000, 0)
            // Standard Error: 9_229
            .saturating_add(Weight::from_parts(1_236_149, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_438_000 picoseconds.
        Weight::from_parts(2_519_000, 0)
            // Standard Error: 10_023
            .saturating_add(Weight::from_parts(1_937_593, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_414_000 picoseconds.
        Weight::from_parts(2_509_000, 0)
            // Standard Error: 8_360
            .saturating_add(Weight::from_parts(1_234_039, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_354_000 picoseconds.
        Weight::from_parts(2_409_000, 0)
            // Standard Error: 10_328
            .saturating_add(Weight::from_parts(1_926_867, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_404_000 picoseconds.
        Weight::from_parts(2_498_000, 0)
            // Standard Error: 6_744
            .saturating_add(Weight::from_parts(1_201_302, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_410_000 picoseconds.
        Weight::from_parts(2_483_000, 0)
            // Standard Error: 9_487
            .saturating_add(Weight::from_parts(1_900_378, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_387_000 picoseconds.
        Weight::from_parts(2_459_000, 0)
            // Standard Error: 7_524
            .saturating_add(Weight::from_parts(1_246_740, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_452_000 picoseconds.
        Weight::from_parts(2_532_000, 0)
            // Standard Error: 9_466
            .saturating_add(Weight::from_parts(1_877_147, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_374_000 picoseconds.
        Weight::from_parts(2_541_000, 0)
            // Standard Error: 8_268
            .saturating_add(Weight::from_parts(1_218_632, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_393_000 picoseconds.
        Weight::from_parts(2_485_000, 0)
            // Standard Error: 9_288
            .saturating_add(Weight::from_parts(1_892_308, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_416_000 picoseconds.
        Weight::from_parts(2_490_000, 0)
            // Standard Error: 7_514
            .saturating_add(Weight::from_parts(1_221_546, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_396_000 picoseconds.
        Weight::from_parts(2_479_000, 0)
            // Standard Error: 8_638
            .saturating_add(Weight::from_parts(1_370_587, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_364_000 picoseconds.
        Weight::from_parts(2_433_000, 0)
            // Standard Error: 7_144
            .saturating_add(Weight::from_parts(740_923, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_409_000 picoseconds.
        Weight::from_parts(2_490_000, 0)
            // Standard Error: 7_493
            .saturating_add(Weight::from_parts(1_344_150, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_332_000 picoseconds.
        Weight::from_parts(2_408_000, 0)
            // Standard Error: 5_062
            .saturating_add(Weight::from_parts(682_810, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_357_000 picoseconds.
        Weight::from_parts(2_429_000, 0)
            // Standard Error: 8_825
            .saturating_add(Weight::from_parts(1_852_934, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_379_000 picoseconds.
        Weight::from_parts(2_477_000, 0)
            // Standard Error: 7_950
            .saturating_add(Weight::from_parts(1_310_475, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_486_000 picoseconds.
        Weight::from_parts(7_409_149, 0)
            // Standard Error: 23_280
            .saturating_add(Weight::from_parts(2_380_599, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_354_000 picoseconds.
        Weight::from_parts(3_985_947, 0)
            // Standard Error: 17_253
            .saturating_add(Weight::from_parts(2_308_046, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_428_000 picoseconds.
        Weight::from_parts(5_185_413, 0)
            // Standard Error: 23_626
            .saturating_add(Weight::from_parts(2_773_914, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_429_000 picoseconds.
        Weight::from_parts(1_762_312, 0)
            // Standard Error: 13_137
            .saturating_add(Weight::from_parts(2_479_857, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_409_000 picoseconds.
        Weight::from_parts(6_183_774, 0)
            // Standard Error: 38_390
            .saturating_add(Weight::from_parts(9_036_753, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_365_000 picoseconds.
        Weight::from_parts(4_139_889, 0)
            // Standard Error: 41_118
            .saturating_add(Weight::from_parts(7_440_928, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_381_000 picoseconds.
        Weight::from_parts(6_243_134, 0)
            // Standard Error: 22_183
            .saturating_add(Weight::from_parts(2_805_045, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_235_000 picoseconds.
        Weight::from_parts(3_471_941, 0)
            // Standard Error: 17_840
            .saturating_add(Weight::from_parts(2_399_950, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_386_000 picoseconds.
        Weight::from_parts(2_442_000, 0)
            // Standard Error: 9_450
            .saturating_add(Weight::from_parts(1_363_334, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_344_000 picoseconds.
        Weight::from_parts(2_515_000, 0)
            // Standard Error: 5_086
            .saturating_add(Weight::from_parts(682_806, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_426_000 picoseconds.
        Weight::from_parts(2_542_000, 0)
            // Standard Error: 9_043
            .saturating_add(Weight::from_parts(1_383_826, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_462_000 picoseconds.
        Weight::from_parts(2_534_000, 0)
            // Standard Error: 5_704
            .saturating_add(Weight::from_parts(687_779, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_386_000 picoseconds.
        Weight::from_parts(2_437_000, 0)
            // Standard Error: 7_683
            .saturating_add(Weight::from_parts(1_343_755, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_376_000 picoseconds.
        Weight::from_parts(2_482_000, 0)
            // Standard Error: 4_933
            .saturating_add(Weight::from_parts(708_732, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_449_000 picoseconds.
        Weight::from_parts(2_532_000, 0)
            // Standard Error: 6_389
            .saturating_add(Weight::from_parts(1_180_854, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_349_000 picoseconds.
        Weight::from_parts(2_425_000, 0)
            // Standard Error: 4_313
            .saturating_add(Weight::from_parts(633_941, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_467_000 picoseconds.
        Weight::from_parts(2_512_000, 0)
            // Standard Error: 8_780
            .saturating_add(Weight::from_parts(1_192_503, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_527_000 picoseconds.
        Weight::from_parts(2_588_000, 0)
            // Standard Error: 4_176
            .saturating_add(Weight::from_parts(593_049, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_415_000 picoseconds.
        Weight::from_parts(2_530_000, 0)
            // Standard Error: 7_794
            .saturating_add(Weight::from_parts(1_154_673, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_440_000 picoseconds.
        Weight::from_parts(2_524_000, 0)
            // Standard Error: 5_453
            .saturating_add(Weight::from_parts(633_003, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_341_000 picoseconds.
        Weight::from_parts(2_378_000, 0)
            // Standard Error: 8_555
            .saturating_add(Weight::from_parts(1_196_751, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_395_000 picoseconds.
        Weight::from_parts(2_496_000, 0)
            // Standard Error: 4_682
            .saturating_add(Weight::from_parts(627_173, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_380_000 picoseconds.
        Weight::from_parts(2_444_000, 0)
            // Standard Error: 7_964
            .saturating_add(Weight::from_parts(1_141_337, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_442_000 picoseconds.
        Weight::from_parts(2_531_000, 0)
            // Standard Error: 5_193
            .saturating_add(Weight::from_parts(628_586, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_resume_session() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `352`
        //  Estimated: `4169`
        // Minimum execution time: 5_990_000 picoseconds.
        Weight::from_parts(6_384_000, 4169)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1107`
        //  Estimated: `24053`
        // Minimum execution time: 64_318_000 picoseconds.
        Weight::from_parts(67_713_000, 24053)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `888`
        //  Estimated: `22158`
        // Minimum execution time: 50_396_000 picoseconds.
        Weight::from_parts(57_319_000, 22158)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1010`
        //  Estimated: `34619`
        // Minimum execution time: 81_192_000 picoseconds.
        Weight::from_parts(110_464_000, 34619)
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `695`
        //  Estimated: `20509`
        // Minimum execution time: 33_549_000 picoseconds.
        Weight::from_parts(35_457_000, 20509)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `976`
        //  Estimated: `26636`
        // Minimum execution time: 53_062_000 picoseconds.
        Weight::from_parts(55_913_000, 26636)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_544_000 picoseconds.
        Weight::from_parts(3_797_000, 3545)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1626`
        //  Estimated: `58232`
        // Minimum execution time: 119_636_000 picoseconds.
        Weight::from_parts(122_812_000, 58232)
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1332`
        //  Estimated: `46962`
        // Minimum execution time: 94_503_000 picoseconds.
        Weight::from_parts(98_976_000, 46962)
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2303 + c * (16400 ±0)`
        //  Estimated: `19878 + c * (84480 ±0)`
        // Minimum execution time: 31_538_000 picoseconds.
        Weight::from_parts(32_681_000, 19878)
            // Standard Error: 71_008
            .saturating_add(Weight::from_parts(39_112_947, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 84480).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program_uninited(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3129 + c * (42 ±0)`
        //  Estimated: `60575 + c * (2947 ±0)`
        // Minimum execution time: 91_887_000 picoseconds.
        Weight::from_parts(87_209_551, 60575)
            // Standard Error: 2_248
            .saturating_add(Weight::from_parts(1_083_157, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2947).saturating_mul(c.into()))
    }
}
