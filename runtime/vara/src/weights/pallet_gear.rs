// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-18, STEPS: `51`, REPEAT: 200, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=51 --repeat=200 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=out_vara.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_error(r: u32, ) -> Weight;
    fn gr_status_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_read_access(p: u32, ) -> Weight;
    fn lazy_pages_write_access(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(1_241_000 as u64)
            // Standard Error: 193
            .saturating_add(Weight::from_ref_time(247_471 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(4_185_000 as u64)
            // Standard Error: 390
            .saturating_add(Weight::from_ref_time(686_164 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(50_400_236 as u64)
            // Standard Error: 2_510
            .saturating_add(Weight::from_ref_time(3_350_387 as u64).saturating_mul(c as u64))
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(70_892_000 as u64)
            .saturating_add(T::DbWeight::get().reads(7 as u64))
            .saturating_add(T::DbWeight::get().writes(5 as u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(62_722_000 as u64)
            // Standard Error: 9_880
            .saturating_add(Weight::from_ref_time(53_610_054 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(4 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(25_130_330 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_397 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(9 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(122_728_398 as u64)
            // Standard Error: 17_495
            .saturating_add(Weight::from_ref_time(54_590_007 as u64).saturating_mul(c as u64))
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(2_195 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(12 as u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(37_062_233 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_242 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(9 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(63_719_882 as u64)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(1_270 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(13 as u64))
            .saturating_add(T::DbWeight::get().writes(10 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        Weight::from_ref_time(211_313_082 as u64)
            .saturating_add(T::DbWeight::get().reads(23 as u64))
            .saturating_add(T::DbWeight::get().writes(24 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(219_809_363 as u64)
            // Standard Error: 178
            .saturating_add(Weight::from_ref_time(769 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(23 as u64))
            .saturating_add(T::DbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(40_740_000 as u64)
            // Standard Error: 10_143
            .saturating_add(Weight::from_ref_time(52_623_294 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(102_570_779 as u64)
            // Standard Error: 91_760
            .saturating_add(Weight::from_ref_time(191_079_982 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        Weight::from_ref_time(280_674_030 as u64)
            // Standard Error: 35_696
            .saturating_add(Weight::from_ref_time(196_674_177 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(94_609_000 as u64)
            // Standard Error: 1_174_015
            .saturating_add(Weight::from_ref_time(584_693_861 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(140_332_470 as u64)
            // Standard Error: 175_457
            .saturating_add(Weight::from_ref_time(479_887_946 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(156_537_361 as u64)
            // Standard Error: 122_859
            .saturating_add(Weight::from_ref_time(324_293_515 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        Weight::from_ref_time(126_082_868 as u64)
            // Standard Error: 85_300
            .saturating_add(Weight::from_ref_time(319_008_756 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(126_222_642 as u64)
            // Standard Error: 89_356
            .saturating_add(Weight::from_ref_time(318_548_302 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(123_025_858 as u64)
            // Standard Error: 84_120
            .saturating_add(Weight::from_ref_time(318_645_015 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(124_575_802 as u64)
            // Standard Error: 91_084
            .saturating_add(Weight::from_ref_time(318_715_681 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(125_358_867 as u64)
            // Standard Error: 84_019
            .saturating_add(Weight::from_ref_time(318_559_453 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(129_561_214 as u64)
            // Standard Error: 85_334
            .saturating_add(Weight::from_ref_time(318_261_353 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(124_040_183 as u64)
            // Standard Error: 89_889
            .saturating_add(Weight::from_ref_time(318_498_718 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(130_996_789 as u64)
            // Standard Error: 96_273
            .saturating_add(Weight::from_ref_time(317_793_611 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(159_160_345 as u64)
            // Standard Error: 126_496
            .saturating_add(Weight::from_ref_time(453_813_566 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(573_178_000 as u64)
            // Standard Error: 69_092
            .saturating_add(Weight::from_ref_time(16_111_396 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(132_872_595 as u64)
            // Standard Error: 93_618
            .saturating_add(Weight::from_ref_time(322_883_768 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(123_013_620 as u64)
            // Standard Error: 88_786
            .saturating_add(Weight::from_ref_time(320_387_770 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        Weight::from_ref_time(168_460_397 as u64)
            // Standard Error: 170_482
            .saturating_add(Weight::from_ref_time(401_390_438 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(134_811_931 as u64)
            // Standard Error: 98_267
            .saturating_add(Weight::from_ref_time(329_806_999 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(131_114_367 as u64)
            // Standard Error: 210_116
            .saturating_add(Weight::from_ref_time(805_310_542 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(916_791_000 as u64)
            // Standard Error: 51_248
            .saturating_add(Weight::from_ref_time(40_540_643 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(173_175_147 as u64)
            // Standard Error: 188_518
            .saturating_add(Weight::from_ref_time(571_478_894 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(693_955_000 as u64)
            // Standard Error: 61_449
            .saturating_add(Weight::from_ref_time(28_190_462 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(168_114_453 as u64)
            // Standard Error: 235_051
            .saturating_add(Weight::from_ref_time(611_000_883 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(738_172_000 as u64)
            // Standard Error: 61_053
            .saturating_add(Weight::from_ref_time(28_231_530 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(95_442_218 as u64)
            // Standard Error: 150_606
            .saturating_add(Weight::from_ref_time(37_476_122 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((4 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(156_912_746 as u64)
            // Standard Error: 141_639
            .saturating_add(Weight::from_ref_time(444_900_638 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(127_803_000 as u64)
            // Standard Error: 1_092
            .saturating_add(Weight::from_ref_time(882_809 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(95_736_859 as u64)
            // Standard Error: 146_712
            .saturating_add(Weight::from_ref_time(51_356_921 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((4 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(139_768_412 as u64)
            // Standard Error: 118_870
            .saturating_add(Weight::from_ref_time(321_381_677 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        Weight::from_ref_time(143_776_429 as u64)
            // Standard Error: 110_504
            .saturating_add(Weight::from_ref_time(324_263_076 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(7 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        Weight::from_ref_time(157_934_840 as u64)
            // Standard Error: 113_330
            .saturating_add(Weight::from_ref_time(334_919_561 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(12_653_882 as u64)
            // Standard Error: 921
            .saturating_add(Weight::from_ref_time(752_376 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        Weight::from_ref_time(128_651_818 as u64)
            // Standard Error: 194_182
            .saturating_add(Weight::from_ref_time(695_099_362 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(589_270_726 as u64)
            // Standard Error: 18_905
            .saturating_add(Weight::from_ref_time(42_638_371 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(126_935_596 as u64)
            // Standard Error: 80_777
            .saturating_add(Weight::from_ref_time(302_871_969 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(391_787_000 as u64)
            // Standard Error: 57_071
            .saturating_add(Weight::from_ref_time(36_620_507 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        Weight::from_ref_time(159_944_852 as u64)
            // Standard Error: 161_758
            .saturating_add(Weight::from_ref_time(771_467_191 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        Weight::from_ref_time(133_471_449 as u64)
            // Standard Error: 97_850
            .saturating_add(Weight::from_ref_time(321_033_091 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(95_075_499 as u64)
            // Standard Error: 165_547
            .saturating_add(Weight::from_ref_time(41_678_121 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(94_516_807 as u64)
            // Standard Error: 165_830
            .saturating_add(Weight::from_ref_time(27_796_093 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(94_440_237 as u64)
            // Standard Error: 168_627
            .saturating_add(Weight::from_ref_time(28_423_603 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(94_883_316 as u64)
            // Standard Error: 163_900
            .saturating_add(Weight::from_ref_time(27_645_984 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        Weight::from_ref_time(95_159_121 as u64)
            // Standard Error: 181_239
            .saturating_add(Weight::from_ref_time(27_764_899 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(154_632_689 as u64)
            // Standard Error: 136_674
            .saturating_add(Weight::from_ref_time(472_666_498 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(141_737_630 as u64)
            // Standard Error: 177_170
            .saturating_add(Weight::from_ref_time(683_991_623 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `p` is `[0, 1024]`.
    /// The range of component `s` is `[1, 1024]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(31_931_895_000 as u64)
            // Standard Error: 254_837
            .saturating_add(Weight::from_ref_time(10_704_314 as u64).saturating_mul(p as u64))
            // Standard Error: 254_816
            .saturating_add(Weight::from_ref_time(196_684_466 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_read_access(p: u32, ) -> Weight {
        Weight::from_ref_time(93_818_000 as u64)
            // Standard Error: 11_196
            .saturating_add(Weight::from_ref_time(55_201_979 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads((16 as u64).saturating_mul(p as u64)))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_write_access(p: u32, ) -> Weight {
        Weight::from_ref_time(28_855_898_673 as u64)
            // Standard Error: 38_925
            .saturating_add(Weight::from_ref_time(71_065_751 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(8192 as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(11_639_583_000 as u64)
            // Standard Error: 121_168
            .saturating_add(Weight::from_ref_time(30_753_009 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(11_670_404_000 as u64)
            // Standard Error: 116_067
            .saturating_add(Weight::from_ref_time(42_656_030 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(6_469_708 as u64)
            // Standard Error: 9_005
            .saturating_add(Weight::from_ref_time(7_416_504 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(11_656_113 as u64)
            // Standard Error: 7_144
            .saturating_add(Weight::from_ref_time(5_597_810 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(2_921_431 as u64)
            // Standard Error: 847
            .saturating_add(Weight::from_ref_time(3_314_514 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(2_626_000 as u64)
            // Standard Error: 4_662
            .saturating_add(Weight::from_ref_time(6_272_320 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(12_505_858 as u64)
            // Standard Error: 9_902
            .saturating_add(Weight::from_ref_time(9_314_714 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(13_642_425 as u64)
            // Standard Error: 886
            .saturating_add(Weight::from_ref_time(434_471 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(5_705_422 as u64)
            // Standard Error: 7_920
            .saturating_add(Weight::from_ref_time(4_938_107 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        Weight::from_ref_time(7_347_881 as u64)
            // Standard Error: 4_255
            .saturating_add(Weight::from_ref_time(5_124_160 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(3_156_000 as u64)
            // Standard Error: 14_666
            .saturating_add(Weight::from_ref_time(21_173_803 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(31_525_958 as u64)
            // Standard Error: 3_667
            .saturating_add(Weight::from_ref_time(1_812_235 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(2_635_000 as u64)
            // Standard Error: 2_081
            .saturating_add(Weight::from_ref_time(826_720 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(2_635_000 as u64)
            // Standard Error: 2_892
            .saturating_add(Weight::from_ref_time(2_166_707 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(2_633_000 as u64)
            // Standard Error: 2_787
            .saturating_add(Weight::from_ref_time(2_184_075 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(3_965_648 as u64)
            // Standard Error: 4_130
            .saturating_add(Weight::from_ref_time(2_297_273 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(12_202_771 as u64)
            // Standard Error: 6_658
            .saturating_add(Weight::from_ref_time(3_084_916 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(5_087_933 as u64)
            // Standard Error: 4_525
            .saturating_add(Weight::from_ref_time(14_052_197 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(13_240_258 as u64)
            // Standard Error: 8_530
            .saturating_add(Weight::from_ref_time(5_846_645 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(12_177_245 as u64)
            // Standard Error: 8_162
            .saturating_add(Weight::from_ref_time(5_527_202 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(2_596_000 as u64)
            // Standard Error: 2_682
            .saturating_add(Weight::from_ref_time(1_851_385 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(7_451_779 as u64)
            // Standard Error: 9_000
            .saturating_add(Weight::from_ref_time(3_507_097 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(2_601_000 as u64)
            // Standard Error: 2_662
            .saturating_add(Weight::from_ref_time(1_209_098 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(439_500 as u64)
            // Standard Error: 1_656
            .saturating_add(Weight::from_ref_time(674_523 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(769_008 as u64)
            // Standard Error: 1_673
            .saturating_add(Weight::from_ref_time(682_336 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(8_183_409 as u64)
            // Standard Error: 8_906
            .saturating_add(Weight::from_ref_time(3_442_709 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(8_041_412 as u64)
            // Standard Error: 9_049
            .saturating_add(Weight::from_ref_time(3_483_980 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(7_965_647 as u64)
            // Standard Error: 8_585
            .saturating_add(Weight::from_ref_time(3_467_460 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(8_124_675 as u64)
            // Standard Error: 8_817
            .saturating_add(Weight::from_ref_time(3_451_687 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(1_077_680 as u64)
            // Standard Error: 7_075
            .saturating_add(Weight::from_ref_time(3_983_997 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_599_000 as u64)
            // Standard Error: 4_144
            .saturating_add(Weight::from_ref_time(3_888_326 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(2_576_000 as u64)
            // Standard Error: 3_805
            .saturating_add(Weight::from_ref_time(3_844_111 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_605_000 as u64)
            // Standard Error: 3_992
            .saturating_add(Weight::from_ref_time(3_862_868 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(2_558_000 as u64)
            // Standard Error: 3_791
            .saturating_add(Weight::from_ref_time(3_870_202 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_583_000 as u64)
            // Standard Error: 3_992
            .saturating_add(Weight::from_ref_time(3_886_450 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(2_621_000 as u64)
            // Standard Error: 3_430
            .saturating_add(Weight::from_ref_time(2_884_126 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(2_557_000 as u64)
            // Standard Error: 3_639
            .saturating_add(Weight::from_ref_time(2_896_193 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(2_596_000 as u64)
            // Standard Error: 4_122
            .saturating_add(Weight::from_ref_time(3_787_947 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(7_708_187 as u64)
            // Standard Error: 8_665
            .saturating_add(Weight::from_ref_time(4_958_039 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(8_923_924 as u64)
            // Standard Error: 7_615
            .saturating_add(Weight::from_ref_time(5_154_202 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(2_593_000 as u64)
            // Standard Error: 9_912
            .saturating_add(Weight::from_ref_time(19_384_672 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(8_937_478 as u64)
            // Standard Error: 8_099
            .saturating_add(Weight::from_ref_time(5_350_416 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(2_585_000 as u64)
            // Standard Error: 3_324
            .saturating_add(Weight::from_ref_time(2_884_065 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(2_599_000 as u64)
            // Standard Error: 3_496
            .saturating_add(Weight::from_ref_time(2_864_316 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(2_604_000 as u64)
            // Standard Error: 3_713
            .saturating_add(Weight::from_ref_time(2_915_441 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(2_594_000 as u64)
            // Standard Error: 3_812
            .saturating_add(Weight::from_ref_time(2_559_343 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(2_592_000 as u64)
            // Standard Error: 3_233
            .saturating_add(Weight::from_ref_time(2_499_461 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(2_657_000 as u64)
            // Standard Error: 3_727
            .saturating_add(Weight::from_ref_time(2_542_781 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(2_611_000 as u64)
            // Standard Error: 3_416
            .saturating_add(Weight::from_ref_time(2_531_830 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(2_591_000 as u64)
            // Standard Error: 3_607
            .saturating_add(Weight::from_ref_time(2_548_444 as u64).saturating_mul(r as u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(1_241_000 as u64)
            // Standard Error: 193
            .saturating_add(Weight::from_ref_time(247_471 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(4_185_000 as u64)
            // Standard Error: 390
            .saturating_add(Weight::from_ref_time(686_164 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(50_400_236 as u64)
            // Standard Error: 2_510
            .saturating_add(Weight::from_ref_time(3_350_387 as u64).saturating_mul(c as u64))
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(70_892_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(7 as u64))
            .saturating_add(RocksDbWeight::get().writes(5 as u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(62_722_000 as u64)
            // Standard Error: 9_880
            .saturating_add(Weight::from_ref_time(53_610_054 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().writes(4 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(25_130_330 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_397 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(9 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(122_728_398 as u64)
            // Standard Error: 17_495
            .saturating_add(Weight::from_ref_time(54_590_007 as u64).saturating_mul(c as u64))
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(2_195 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(12 as u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(37_062_233 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_242 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(9 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(63_719_882 as u64)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(1_270 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(13 as u64))
            .saturating_add(RocksDbWeight::get().writes(10 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        Weight::from_ref_time(211_313_082 as u64)
            .saturating_add(RocksDbWeight::get().reads(23 as u64))
            .saturating_add(RocksDbWeight::get().writes(24 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(219_809_363 as u64)
            // Standard Error: 178
            .saturating_add(Weight::from_ref_time(769 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(23 as u64))
            .saturating_add(RocksDbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(40_740_000 as u64)
            // Standard Error: 10_143
            .saturating_add(Weight::from_ref_time(52_623_294 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
            .saturating_add(RocksDbWeight::get().writes(2 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(102_570_779 as u64)
            // Standard Error: 91_760
            .saturating_add(Weight::from_ref_time(191_079_982 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        Weight::from_ref_time(280_674_030 as u64)
            // Standard Error: 35_696
            .saturating_add(Weight::from_ref_time(196_674_177 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(94_609_000 as u64)
            // Standard Error: 1_174_015
            .saturating_add(Weight::from_ref_time(584_693_861 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(140_332_470 as u64)
            // Standard Error: 175_457
            .saturating_add(Weight::from_ref_time(479_887_946 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(156_537_361 as u64)
            // Standard Error: 122_859
            .saturating_add(Weight::from_ref_time(324_293_515 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        Weight::from_ref_time(126_082_868 as u64)
            // Standard Error: 85_300
            .saturating_add(Weight::from_ref_time(319_008_756 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(126_222_642 as u64)
            // Standard Error: 89_356
            .saturating_add(Weight::from_ref_time(318_548_302 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(123_025_858 as u64)
            // Standard Error: 84_120
            .saturating_add(Weight::from_ref_time(318_645_015 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(124_575_802 as u64)
            // Standard Error: 91_084
            .saturating_add(Weight::from_ref_time(318_715_681 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(125_358_867 as u64)
            // Standard Error: 84_019
            .saturating_add(Weight::from_ref_time(318_559_453 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(129_561_214 as u64)
            // Standard Error: 85_334
            .saturating_add(Weight::from_ref_time(318_261_353 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(124_040_183 as u64)
            // Standard Error: 89_889
            .saturating_add(Weight::from_ref_time(318_498_718 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(130_996_789 as u64)
            // Standard Error: 96_273
            .saturating_add(Weight::from_ref_time(317_793_611 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(159_160_345 as u64)
            // Standard Error: 126_496
            .saturating_add(Weight::from_ref_time(453_813_566 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(573_178_000 as u64)
            // Standard Error: 69_092
            .saturating_add(Weight::from_ref_time(16_111_396 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(132_872_595 as u64)
            // Standard Error: 93_618
            .saturating_add(Weight::from_ref_time(322_883_768 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(123_013_620 as u64)
            // Standard Error: 88_786
            .saturating_add(Weight::from_ref_time(320_387_770 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        Weight::from_ref_time(168_460_397 as u64)
            // Standard Error: 170_482
            .saturating_add(Weight::from_ref_time(401_390_438 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(134_811_931 as u64)
            // Standard Error: 98_267
            .saturating_add(Weight::from_ref_time(329_806_999 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(131_114_367 as u64)
            // Standard Error: 210_116
            .saturating_add(Weight::from_ref_time(805_310_542 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(916_791_000 as u64)
            // Standard Error: 51_248
            .saturating_add(Weight::from_ref_time(40_540_643 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(173_175_147 as u64)
            // Standard Error: 188_518
            .saturating_add(Weight::from_ref_time(571_478_894 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(693_955_000 as u64)
            // Standard Error: 61_449
            .saturating_add(Weight::from_ref_time(28_190_462 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(168_114_453 as u64)
            // Standard Error: 235_051
            .saturating_add(Weight::from_ref_time(611_000_883 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().reads((2 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(738_172_000 as u64)
            // Standard Error: 61_053
            .saturating_add(Weight::from_ref_time(28_231_530 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(95_442_218 as u64)
            // Standard Error: 150_606
            .saturating_add(Weight::from_ref_time(37_476_122 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((4 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(156_912_746 as u64)
            // Standard Error: 141_639
            .saturating_add(Weight::from_ref_time(444_900_638 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(127_803_000 as u64)
            // Standard Error: 1_092
            .saturating_add(Weight::from_ref_time(882_809 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(95_736_859 as u64)
            // Standard Error: 146_712
            .saturating_add(Weight::from_ref_time(51_356_921 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((4 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(139_768_412 as u64)
            // Standard Error: 118_870
            .saturating_add(Weight::from_ref_time(321_381_677 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        Weight::from_ref_time(143_776_429 as u64)
            // Standard Error: 110_504
            .saturating_add(Weight::from_ref_time(324_263_076 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(7 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        Weight::from_ref_time(157_934_840 as u64)
            // Standard Error: 113_330
            .saturating_add(Weight::from_ref_time(334_919_561 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(12_653_882 as u64)
            // Standard Error: 921
            .saturating_add(Weight::from_ref_time(752_376 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        Weight::from_ref_time(128_651_818 as u64)
            // Standard Error: 194_182
            .saturating_add(Weight::from_ref_time(695_099_362 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(589_270_726 as u64)
            // Standard Error: 18_905
            .saturating_add(Weight::from_ref_time(42_638_371 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(126_935_596 as u64)
            // Standard Error: 80_777
            .saturating_add(Weight::from_ref_time(302_871_969 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(391_787_000 as u64)
            // Standard Error: 57_071
            .saturating_add(Weight::from_ref_time(36_620_507 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        Weight::from_ref_time(159_944_852 as u64)
            // Standard Error: 161_758
            .saturating_add(Weight::from_ref_time(771_467_191 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        Weight::from_ref_time(133_471_449 as u64)
            // Standard Error: 97_850
            .saturating_add(Weight::from_ref_time(321_033_091 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(95_075_499 as u64)
            // Standard Error: 165_547
            .saturating_add(Weight::from_ref_time(41_678_121 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(94_516_807 as u64)
            // Standard Error: 165_830
            .saturating_add(Weight::from_ref_time(27_796_093 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(94_440_237 as u64)
            // Standard Error: 168_627
            .saturating_add(Weight::from_ref_time(28_423_603 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(94_883_316 as u64)
            // Standard Error: 163_900
            .saturating_add(Weight::from_ref_time(27_645_984 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        Weight::from_ref_time(95_159_121 as u64)
            // Standard Error: 181_239
            .saturating_add(Weight::from_ref_time(27_764_899 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(154_632_689 as u64)
            // Standard Error: 136_674
            .saturating_add(Weight::from_ref_time(472_666_498 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(141_737_630 as u64)
            // Standard Error: 177_170
            .saturating_add(Weight::from_ref_time(683_991_623 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `p` is `[0, 1024]`.
    /// The range of component `s` is `[1, 1024]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(31_931_895_000 as u64)
            // Standard Error: 254_837
            .saturating_add(Weight::from_ref_time(10_704_314 as u64).saturating_mul(p as u64))
            // Standard Error: 254_816
            .saturating_add(Weight::from_ref_time(196_684_466 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_read_access(p: u32, ) -> Weight {
        Weight::from_ref_time(93_818_000 as u64)
            // Standard Error: 11_196
            .saturating_add(Weight::from_ref_time(55_201_979 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads((16 as u64).saturating_mul(p as u64)))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_write_access(p: u32, ) -> Weight {
        Weight::from_ref_time(28_855_898_673 as u64)
            // Standard Error: 38_925
            .saturating_add(Weight::from_ref_time(71_065_751 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(8192 as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(11_639_583_000 as u64)
            // Standard Error: 121_168
            .saturating_add(Weight::from_ref_time(30_753_009 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(11_670_404_000 as u64)
            // Standard Error: 116_067
            .saturating_add(Weight::from_ref_time(42_656_030 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(6_469_708 as u64)
            // Standard Error: 9_005
            .saturating_add(Weight::from_ref_time(7_416_504 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(11_656_113 as u64)
            // Standard Error: 7_144
            .saturating_add(Weight::from_ref_time(5_597_810 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(2_921_431 as u64)
            // Standard Error: 847
            .saturating_add(Weight::from_ref_time(3_314_514 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(2_626_000 as u64)
            // Standard Error: 4_662
            .saturating_add(Weight::from_ref_time(6_272_320 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(12_505_858 as u64)
            // Standard Error: 9_902
            .saturating_add(Weight::from_ref_time(9_314_714 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(13_642_425 as u64)
            // Standard Error: 886
            .saturating_add(Weight::from_ref_time(434_471 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(5_705_422 as u64)
            // Standard Error: 7_920
            .saturating_add(Weight::from_ref_time(4_938_107 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        Weight::from_ref_time(7_347_881 as u64)
            // Standard Error: 4_255
            .saturating_add(Weight::from_ref_time(5_124_160 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(3_156_000 as u64)
            // Standard Error: 14_666
            .saturating_add(Weight::from_ref_time(21_173_803 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(31_525_958 as u64)
            // Standard Error: 3_667
            .saturating_add(Weight::from_ref_time(1_812_235 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(2_635_000 as u64)
            // Standard Error: 2_081
            .saturating_add(Weight::from_ref_time(826_720 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(2_635_000 as u64)
            // Standard Error: 2_892
            .saturating_add(Weight::from_ref_time(2_166_707 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(2_633_000 as u64)
            // Standard Error: 2_787
            .saturating_add(Weight::from_ref_time(2_184_075 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(3_965_648 as u64)
            // Standard Error: 4_130
            .saturating_add(Weight::from_ref_time(2_297_273 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(12_202_771 as u64)
            // Standard Error: 6_658
            .saturating_add(Weight::from_ref_time(3_084_916 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(5_087_933 as u64)
            // Standard Error: 4_525
            .saturating_add(Weight::from_ref_time(14_052_197 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(13_240_258 as u64)
            // Standard Error: 8_530
            .saturating_add(Weight::from_ref_time(5_846_645 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(12_177_245 as u64)
            // Standard Error: 8_162
            .saturating_add(Weight::from_ref_time(5_527_202 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(2_596_000 as u64)
            // Standard Error: 2_682
            .saturating_add(Weight::from_ref_time(1_851_385 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(7_451_779 as u64)
            // Standard Error: 9_000
            .saturating_add(Weight::from_ref_time(3_507_097 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(2_601_000 as u64)
            // Standard Error: 2_662
            .saturating_add(Weight::from_ref_time(1_209_098 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(439_500 as u64)
            // Standard Error: 1_656
            .saturating_add(Weight::from_ref_time(674_523 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(769_008 as u64)
            // Standard Error: 1_673
            .saturating_add(Weight::from_ref_time(682_336 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(8_183_409 as u64)
            // Standard Error: 8_906
            .saturating_add(Weight::from_ref_time(3_442_709 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(8_041_412 as u64)
            // Standard Error: 9_049
            .saturating_add(Weight::from_ref_time(3_483_980 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(7_965_647 as u64)
            // Standard Error: 8_585
            .saturating_add(Weight::from_ref_time(3_467_460 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(8_124_675 as u64)
            // Standard Error: 8_817
            .saturating_add(Weight::from_ref_time(3_451_687 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(1_077_680 as u64)
            // Standard Error: 7_075
            .saturating_add(Weight::from_ref_time(3_983_997 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_599_000 as u64)
            // Standard Error: 4_144
            .saturating_add(Weight::from_ref_time(3_888_326 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(2_576_000 as u64)
            // Standard Error: 3_805
            .saturating_add(Weight::from_ref_time(3_844_111 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_605_000 as u64)
            // Standard Error: 3_992
            .saturating_add(Weight::from_ref_time(3_862_868 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(2_558_000 as u64)
            // Standard Error: 3_791
            .saturating_add(Weight::from_ref_time(3_870_202 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_583_000 as u64)
            // Standard Error: 3_992
            .saturating_add(Weight::from_ref_time(3_886_450 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(2_621_000 as u64)
            // Standard Error: 3_430
            .saturating_add(Weight::from_ref_time(2_884_126 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(2_557_000 as u64)
            // Standard Error: 3_639
            .saturating_add(Weight::from_ref_time(2_896_193 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(2_596_000 as u64)
            // Standard Error: 4_122
            .saturating_add(Weight::from_ref_time(3_787_947 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(7_708_187 as u64)
            // Standard Error: 8_665
            .saturating_add(Weight::from_ref_time(4_958_039 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(8_923_924 as u64)
            // Standard Error: 7_615
            .saturating_add(Weight::from_ref_time(5_154_202 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(2_593_000 as u64)
            // Standard Error: 9_912
            .saturating_add(Weight::from_ref_time(19_384_672 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(8_937_478 as u64)
            // Standard Error: 8_099
            .saturating_add(Weight::from_ref_time(5_350_416 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(2_585_000 as u64)
            // Standard Error: 3_324
            .saturating_add(Weight::from_ref_time(2_884_065 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(2_599_000 as u64)
            // Standard Error: 3_496
            .saturating_add(Weight::from_ref_time(2_864_316 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(2_604_000 as u64)
            // Standard Error: 3_713
            .saturating_add(Weight::from_ref_time(2_915_441 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(2_594_000 as u64)
            // Standard Error: 3_812
            .saturating_add(Weight::from_ref_time(2_559_343 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(2_592_000 as u64)
            // Standard Error: 3_233
            .saturating_add(Weight::from_ref_time(2_499_461 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(2_657_000 as u64)
            // Standard Error: 3_727
            .saturating_add(Weight::from_ref_time(2_542_781 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(2_611_000 as u64)
            // Standard Error: 3_416
            .saturating_add(Weight::from_ref_time(2_531_830 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(2_591_000 as u64)
            // Standard Error: 3_607
            .saturating_add(Weight::from_ref_time(2_548_444 as u64).saturating_mul(r as u64))
    }
}
