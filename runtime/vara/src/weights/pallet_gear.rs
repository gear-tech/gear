// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_message_with_voucher(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn send_reply_with_voucher(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 960_000 picoseconds.
        Weight::from_parts(1_013_000, 0)
            // Standard Error: 824
            .saturating_add(Weight::from_parts(252_538, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3577 + c * (1024 ±0)`
        // Minimum execution time: 3_251_000 picoseconds.
        Weight::from_parts(3_380_000, 3577)
            // Standard Error: 1_394
            .saturating_add(Weight::from_parts(696_972, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 135_524_000 picoseconds.
        Weight::from_parts(144_536_000, 0)
            // Standard Error: 250_714
            .saturating_add(Weight::from_parts(107_040_242, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1050`
        //  Estimated: `42875`
        // Minimum execution time: 85_543_000 picoseconds.
        Weight::from_parts(87_866_000, 42875)
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `958`
        //  Estimated: `21477`
        // Minimum execution time: 55_838_000 picoseconds.
        Weight::from_parts(57_370_000, 21477)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `605`
        //  Estimated: `17354`
        // Minimum execution time: 30_237_000 picoseconds.
        Weight::from_parts(31_196_000, 17354)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_129_000 picoseconds.
        Weight::from_parts(7_248_802, 7640)
            // Standard Error: 31_069
            .saturating_add(Weight::from_parts(16_200_215, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1506 + c * (16389 ±0)`
        //  Estimated: `42570 + c * (131112 ±0)`
        // Minimum execution time: 71_235_000 picoseconds.
        Weight::from_parts(72_265_000, 42570)
            // Standard Error: 620_974
            .saturating_add(Weight::from_parts(85_218_174, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `5270`
        // Minimum execution time: 64_046_000 picoseconds.
        Weight::from_parts(31_757_155, 5270)
            // Standard Error: 62_511
            .saturating_add(Weight::from_parts(54_513_430, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `809`
        //  Estimated: `40156`
        // Minimum execution time: 64_504_000 picoseconds.
        Weight::from_parts(98_939_700, 40156)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_602, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `306`
        //  Estimated: `35235`
        // Minimum execution time: 11_063_143_000 picoseconds.
        Weight::from_parts(274_151_848, 35235)
            // Standard Error: 169_096
            .saturating_add(Weight::from_parts(55_057_948, 0).saturating_mul(c.into()))
            // Standard Error: 10
            .saturating_add(Weight::from_parts(2_547, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `349`
        //  Estimated: `23860`
        // Minimum execution time: 55_842_000 picoseconds.
        Weight::from_parts(22_267_319, 23860)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_202, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `452`
        //  Estimated: `27184`
        // Minimum execution time: 59_300_000 picoseconds.
        Weight::from_parts(39_617_836, 27184)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_174, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1049`
        //  Estimated: `42866`
        // Minimum execution time: 85_819_000 picoseconds.
        Weight::from_parts(39_865_520, 42866)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(1_227, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1152`
        //  Estimated: `46396`
        // Minimum execution time: 96_120_000 picoseconds.
        Weight::from_parts(70_329_463, 46396)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_218, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `85981`
        // Minimum execution time: 486_984_000 picoseconds.
        Weight::from_parts(559_932_724, 85981)
            // Standard Error: 7_019
            .saturating_add(Weight::from_parts(6_284, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(29_u64))
            .saturating_add(T::DbWeight::get().writes(23_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `85905`
        // Minimum execution time: 524_343_000 picoseconds.
        Weight::from_parts(614_701_316, 85905)
            // Standard Error: 6_792
            .saturating_add(Weight::from_parts(26_471, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(29_u64))
            .saturating_add(T::DbWeight::get().writes(23_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 46_564_000 picoseconds.
        Weight::from_parts(47_126_000, 3899)
            // Standard Error: 30_768
            .saturating_add(Weight::from_parts(52_113_305, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_723_000 picoseconds.
        Weight::from_parts(86_836_000, 0)
            // Standard Error: 4_212_669
            .saturating_add(Weight::from_parts(686_247_352, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 411_787_000 picoseconds.
        Weight::from_parts(355_328_520, 0)
            // Standard Error: 7_364
            .saturating_add(Weight::from_parts(32_355_462, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 694_107_000 picoseconds.
        Weight::from_parts(710_696_944, 0)
            // Standard Error: 1_502_769
            .saturating_add(Weight::from_parts(445_121_037, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_293_000 picoseconds.
        Weight::from_parts(1_403_924, 0)
            // Standard Error: 11_364
            .saturating_add(Weight::from_parts(22_072_117, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 314_860_000 picoseconds.
        Weight::from_parts(367_049_499, 0)
            // Standard Error: 15_796
            .saturating_add(Weight::from_parts(5_387_493, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 398_718_000 picoseconds.
        Weight::from_parts(459_691_639, 0)
            // Standard Error: 15_791
            .saturating_add(Weight::from_parts(5_284_825, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 307_942_000 picoseconds.
        Weight::from_parts(426_078_671, 0)
            // Standard Error: 397_650
            .saturating_add(Weight::from_parts(288_380_431, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 295_750_000 picoseconds.
        Weight::from_parts(370_067_231, 0)
            // Standard Error: 290_812
            .saturating_add(Weight::from_parts(279_537_426, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 293_100_000 picoseconds.
        Weight::from_parts(347_681_006, 0)
            // Standard Error: 325_181
            .saturating_add(Weight::from_parts(282_995_593, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 286_345_000 picoseconds.
        Weight::from_parts(386_480_536, 0)
            // Standard Error: 303_694
            .saturating_add(Weight::from_parts(282_765_751, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 303_464_000 picoseconds.
        Weight::from_parts(384_989_646, 0)
            // Standard Error: 305_294
            .saturating_add(Weight::from_parts(281_187_555, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 287_166_000 picoseconds.
        Weight::from_parts(382_788_395, 0)
            // Standard Error: 288_868
            .saturating_add(Weight::from_parts(281_119_293, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 278_736_000 picoseconds.
        Weight::from_parts(355_180_015, 0)
            // Standard Error: 239_882
            .saturating_add(Weight::from_parts(280_797_617, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 296_105_000 picoseconds.
        Weight::from_parts(361_400_212, 0)
            // Standard Error: 261_539
            .saturating_add(Weight::from_parts(279_506_667, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 939_671_000 picoseconds.
        Weight::from_parts(1_085_065_458, 0)
            // Standard Error: 649_973
            .saturating_add(Weight::from_parts(377_694_228, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_345_845_000 picoseconds.
        Weight::from_parts(1_405_735_000, 0)
            // Standard Error: 54_138
            .saturating_add(Weight::from_parts(13_476_481, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 297_034_000 picoseconds.
        Weight::from_parts(367_205_532, 0)
            // Standard Error: 252_740
            .saturating_add(Weight::from_parts(280_102_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 293_434_000 picoseconds.
        Weight::from_parts(356_354_216, 0)
            // Standard Error: 240_121
            .saturating_add(Weight::from_parts(282_187_926, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 295_430_000 picoseconds.
        Weight::from_parts(391_971_898, 0)
            // Standard Error: 370_866
            .saturating_add(Weight::from_parts(372_115_006, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 355_068_000 picoseconds.
        Weight::from_parts(382_547_000, 0)
            // Standard Error: 4_073_892
            .saturating_add(Weight::from_parts(1_324_405_090, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_872_000 picoseconds.
        Weight::from_parts(148_832_064, 0)
            // Standard Error: 450_901
            .saturating_add(Weight::from_parts(445_703_147, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 871_229_000 picoseconds.
        Weight::from_parts(897_905_000, 0)
            // Standard Error: 60_780
            .saturating_add(Weight::from_parts(21_787_000, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 313_370_000 picoseconds.
        Weight::from_parts(432_644_217, 0)
            // Standard Error: 470_318
            .saturating_add(Weight::from_parts(553_818_612, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 867_422_000 picoseconds.
        Weight::from_parts(894_666_000, 0)
            // Standard Error: 57_785
            .saturating_add(Weight::from_parts(21_425_620, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 942_103_000 picoseconds.
        Weight::from_parts(1_030_470_268, 0)
            // Standard Error: 522_807
            .saturating_add(Weight::from_parts(559_810_475, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 950_273_000 picoseconds.
        Weight::from_parts(1_027_166_931, 0)
            // Standard Error: 625_307
            .saturating_add(Weight::from_parts(577_708_639, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 284_761_000 picoseconds.
        Weight::from_parts(361_719_560, 0)
            // Standard Error: 264_318
            .saturating_add(Weight::from_parts(289_398_336, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_981_259_000 picoseconds.
        Weight::from_parts(6_177_736_723, 0)
            // Standard Error: 959_883
            .saturating_add(Weight::from_parts(492_999_851, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_036_319_000 picoseconds.
        Weight::from_parts(1_059_047_000, 0)
            // Standard Error: 49_506
            .saturating_add(Weight::from_parts(31_356_271, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_016_992_000 picoseconds.
        Weight::from_parts(6_181_021_408, 0)
            // Standard Error: 1_027_376
            .saturating_add(Weight::from_parts(568_776_180, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_082_419_000 picoseconds.
        Weight::from_parts(6_350_666_200, 0)
            // Standard Error: 1_171_125
            .saturating_add(Weight::from_parts(590_168_239, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 468_759_000 picoseconds.
        Weight::from_parts(531_472_444, 0)
            // Standard Error: 420_838
            .saturating_add(Weight::from_parts(556_156_279, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_039_895_000 picoseconds.
        Weight::from_parts(1_077_911_000, 0)
            // Standard Error: 55_219
            .saturating_add(Weight::from_parts(21_485_725, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_207_211_000 picoseconds.
        Weight::from_parts(6_391_593_308, 0)
            // Standard Error: 1_057_864
            .saturating_add(Weight::from_parts(579_376_595, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 262_282_000 picoseconds.
        Weight::from_parts(344_682_771, 0)
            // Standard Error: 3_204_590
            .saturating_add(Weight::from_parts(34_834_628, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 336_089_000 picoseconds.
        Weight::from_parts(365_457_798, 0)
            // Standard Error: 1_412
            .saturating_add(Weight::from_parts(431_296, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 262_061_000 picoseconds.
        Weight::from_parts(344_771_600, 0)
            // Standard Error: 3_181_500
            .saturating_add(Weight::from_parts(31_367_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 326_804_000 picoseconds.
        Weight::from_parts(367_123_876, 0)
            // Standard Error: 1_216
            .saturating_add(Weight::from_parts(429_588, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 247_527_000 picoseconds.
        Weight::from_parts(347_704_510, 0)
            // Standard Error: 3_493_698
            .saturating_add(Weight::from_parts(34_993_389, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 272_951_000 picoseconds.
        Weight::from_parts(345_342_573, 0)
            // Standard Error: 3_254_148
            .saturating_add(Weight::from_parts(26_873_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 285_916_000 picoseconds.
        Weight::from_parts(384_521_862, 0)
            // Standard Error: 349_874
            .saturating_add(Weight::from_parts(392_128_183, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 336_807_000 picoseconds.
        Weight::from_parts(130_937_981, 0)
            // Standard Error: 3_621
            .saturating_add(Weight::from_parts(691_610, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 900_871_000 picoseconds.
        Weight::from_parts(997_701_761, 0)
            // Standard Error: 3_806_353
            .saturating_add(Weight::from_parts(74_526_338, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 914_439_000 picoseconds.
        Weight::from_parts(1_011_497_371, 0)
            // Standard Error: 4_305_220
            .saturating_add(Weight::from_parts(81_498_128, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 278_103_000 picoseconds.
        Weight::from_parts(368_192_961, 0)
            // Standard Error: 2_849_222
            .saturating_add(Weight::from_parts(17_945_838, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 333_265_000 picoseconds.
        Weight::from_parts(371_298_839, 0)
            // Standard Error: 1_236
            .saturating_add(Weight::from_parts(425_019, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(_r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 298_585_000 picoseconds.
        Weight::from_parts(366_929_938, 0)
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 307_281_000 picoseconds.
        Weight::from_parts(365_856_170, 0)
            // Standard Error: 1_405
            .saturating_add(Weight::from_parts(432_238, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 290_453_000 picoseconds.
        Weight::from_parts(347_620_563, 0)
            // Standard Error: 258_078
            .saturating_add(Weight::from_parts(284_310_849, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 279_576_000 picoseconds.
        Weight::from_parts(356_384_135, 0)
            // Standard Error: 314_286
            .saturating_add(Weight::from_parts(285_351_063, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 941_344_000 picoseconds.
        Weight::from_parts(1_035_375_431, 0)
            // Standard Error: 366_077
            .saturating_add(Weight::from_parts(310_848_058, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 982_918_000 picoseconds.
        Weight::from_parts(1_035_031_315, 0)
            // Standard Error: 1_463
            .saturating_add(Weight::from_parts(157_158, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_680_718_000 picoseconds.
        Weight::from_parts(7_085_026_906, 0)
            // Standard Error: 1_149_836
            .saturating_add(Weight::from_parts(406_779_171, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_166_382_000 picoseconds.
        Weight::from_parts(7_343_799_281, 0)
            // Standard Error: 11_075
            .saturating_add(Weight::from_parts(13_830_173, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 285_918_000 picoseconds.
        Weight::from_parts(367_505_539, 0)
            // Standard Error: 307_435
            .saturating_add(Weight::from_parts(306_586_434, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 540_244_000 picoseconds.
        Weight::from_parts(563_995_000, 0)
            // Standard Error: 49_485
            .saturating_add(Weight::from_parts(25_632_036, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 288_765_000 picoseconds.
        Weight::from_parts(357_137_821, 0)
            // Standard Error: 252_624
            .saturating_add(Weight::from_parts(280_084_887, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 275_269_000 picoseconds.
        Weight::from_parts(338_142_057, 0)
            // Standard Error: 2_816_339
            .saturating_add(Weight::from_parts(36_643_842, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 277_823_000 picoseconds.
        Weight::from_parts(333_217_659, 0)
            // Standard Error: 2_865_578
            .saturating_add(Weight::from_parts(14_696_040, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 272_489_000 picoseconds.
        Weight::from_parts(336_816_793, 0)
            // Standard Error: 2_994_581
            .saturating_add(Weight::from_parts(8_410_306, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 268_675_000 picoseconds.
        Weight::from_parts(335_825_975, 0)
            // Standard Error: 2_754_571
            .saturating_add(Weight::from_parts(18_684_924, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 274_611_000 picoseconds.
        Weight::from_parts(336_578_457, 0)
            // Standard Error: 2_934_897
            .saturating_add(Weight::from_parts(8_009_142, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 386_875_000 picoseconds.
        Weight::from_parts(469_123_435, 0)
            // Standard Error: 369_809
            .saturating_add(Weight::from_parts(409_442_365, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 312_780_000 picoseconds.
        Weight::from_parts(388_791_256, 0)
            // Standard Error: 360_780
            .saturating_add(Weight::from_parts(633_668_595, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_767_386_000 picoseconds.
        Weight::from_parts(44_445_433_000, 0)
            // Standard Error: 269_228
            .saturating_add(Weight::from_parts(7_983_485, 0).saturating_mul(p.into()))
            // Standard Error: 269_214
            .saturating_add(Weight::from_parts(178_449_933, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 335_805_000 picoseconds.
        Weight::from_parts(397_775_584, 0)
            // Standard Error: 425_078
            .saturating_add(Weight::from_parts(658_971_692, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_902_072_000 picoseconds.
        Weight::from_parts(44_605_462_000, 0)
            // Standard Error: 263_485
            .saturating_add(Weight::from_parts(7_807_726, 0).saturating_mul(p.into()))
            // Standard Error: 263_472
            .saturating_add(Weight::from_parts(178_617_446, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 285_711_000 picoseconds.
        Weight::from_parts(367_208_876, 0)
            // Standard Error: 108_350
            .saturating_add(Weight::from_parts(4_943_334, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 304_073_000 picoseconds.
        Weight::from_parts(303_895_880, 1131)
            // Standard Error: 14_543
            .saturating_add(Weight::from_parts(15_788_838, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 280_436_000 picoseconds.
        Weight::from_parts(113_684_851, 1131)
            // Standard Error: 74_277
            .saturating_add(Weight::from_parts(42_771_979, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_241_633_000 picoseconds.
        Weight::from_parts(8_080_646_830, 5069931)
            // Standard Error: 80_646
            .saturating_add(Weight::from_parts(43_989_963, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 297_682_000 picoseconds.
        Weight::from_parts(324_280_000, 1939)
            // Standard Error: 36_954
            .saturating_add(Weight::from_parts(51_969_374, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 297_102_000 picoseconds.
        Weight::from_parts(371_264_817, 1131)
            // Standard Error: 77_221
            .saturating_add(Weight::from_parts(36_391_713, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 982_880_000 picoseconds.
        Weight::from_parts(1_011_265_875, 1496)
            // Standard Error: 387_101
            .saturating_add(Weight::from_parts(54_991_799, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_517_235_000 picoseconds.
        Weight::from_parts(1_639_287_287, 317931)
            // Standard Error: 215_755
            .saturating_add(Weight::from_parts(42_692_053, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_374_125_000 picoseconds.
        Weight::from_parts(4_398_820_490, 0)
            // Standard Error: 11_892
            .saturating_add(Weight::from_parts(3_297_772, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_376_687_000 picoseconds.
        Weight::from_parts(4_398_837_328, 0)
            // Standard Error: 11_897
            .saturating_add(Weight::from_parts(3_310_862, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_714_770_000 picoseconds.
        Weight::from_parts(10_915_410_458, 0)
            // Standard Error: 176_446
            .saturating_add(Weight::from_parts(17_910_685, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_472_887_000 picoseconds.
        Weight::from_parts(11_174_175_667, 0)
            // Standard Error: 215_606
            .saturating_add(Weight::from_parts(12_641_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_172_000 picoseconds.
        Weight::from_parts(3_290_000, 0)
            // Standard Error: 7_149
            .saturating_add(Weight::from_parts(3_638_335, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_283_000 picoseconds.
        Weight::from_parts(4_557_724, 0)
            // Standard Error: 9_229
            .saturating_add(Weight::from_parts(3_000_822, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_122_000 picoseconds.
        Weight::from_parts(3_128_259, 0)
            // Standard Error: 3_781
            .saturating_add(Weight::from_parts(1_645_950, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_144_000 picoseconds.
        Weight::from_parts(326_757, 0)
            // Standard Error: 13_076
            .saturating_add(Weight::from_parts(2_949_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_216_000 picoseconds.
        Weight::from_parts(7_665_222, 0)
            // Standard Error: 17_231
            .saturating_add(Weight::from_parts(4_572_216, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_567_000 picoseconds.
        Weight::from_parts(5_294_728, 0)
            // Standard Error: 1_545
            .saturating_add(Weight::from_parts(165_534, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_346_000 picoseconds.
        Weight::from_parts(6_058_470, 0)
            // Standard Error: 8_367
            .saturating_add(Weight::from_parts(2_533_007, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_533_007 -
            2_399_383, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_261_000 picoseconds.
        Weight::from_parts(4_903_348, 0)
            // Standard Error: 11_820
            .saturating_add(Weight::from_parts(2_399_383, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_769_000 picoseconds.
        Weight::from_parts(28_365_659, 0)
            // Standard Error: 43_705
            .saturating_add(Weight::from_parts(8_831_954, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 13_275_000 picoseconds.
        Weight::from_parts(3_376_447, 0)
            // Standard Error: 7_044
            .saturating_add(Weight::from_parts(1_190_981, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_055_000 picoseconds.
        Weight::from_parts(6_563_259, 0)
            // Standard Error: 31
            .saturating_add(Weight::from_parts(512, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_435_000 picoseconds.
        Weight::from_parts(2_722_932, 0)
            // Standard Error: 3_034
            .saturating_add(Weight::from_parts(253_002, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_887_000 picoseconds.
        Weight::from_parts(2_982_000, 0)
            // Standard Error: 4_628
            .saturating_add(Weight::from_parts(750_172, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_251_000 picoseconds.
        Weight::from_parts(3_331_000, 0)
            // Standard Error: 4_628
            .saturating_add(Weight::from_parts(718_732, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_632_000 picoseconds.
        Weight::from_parts(4_174_384, 0)
            // Standard Error: 5_600
            .saturating_add(Weight::from_parts(741_894, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_396_000 picoseconds.
        Weight::from_parts(7_940_000, 0)
            // Standard Error: 9_770
            .saturating_add(Weight::from_parts(1_288_435, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_212_000 picoseconds.
        Weight::from_parts(2_297_437, 0)
            // Standard Error: 9_525
            .saturating_add(Weight::from_parts(7_026_356, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_150_000 picoseconds.
        Weight::from_parts(3_235_000, 0)
            // Standard Error: 6_544
            .saturating_add(Weight::from_parts(3_263_356, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_121_000 picoseconds.
        Weight::from_parts(7_748, 0)
            // Standard Error: 10_146
            .saturating_add(Weight::from_parts(3_128_588, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_173_000 picoseconds.
        Weight::from_parts(3_398_000, 0)
            // Standard Error: 7_431
            .saturating_add(Weight::from_parts(3_046_059, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_166_000 picoseconds.
        Weight::from_parts(3_351_000, 0)
            // Standard Error: 5_890
            .saturating_add(Weight::from_parts(2_620_824, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_092_000 picoseconds.
        Weight::from_parts(225_408, 0)
            // Standard Error: 6_697
            .saturating_add(Weight::from_parts(664_287, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_998_000 picoseconds.
        Weight::from_parts(1_073_225, 0)
            // Standard Error: 6_038
            .saturating_add(Weight::from_parts(492_347, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_143_000 picoseconds.
        Weight::from_parts(3_476_000, 0)
            // Standard Error: 10_266
            .saturating_add(Weight::from_parts(1_830_021, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_106_000 picoseconds.
        Weight::from_parts(3_265_000, 0)
            // Standard Error: 8_782
            .saturating_add(Weight::from_parts(1_188_748, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_246_000 picoseconds.
        Weight::from_parts(1_440_125, 0)
            // Standard Error: 4_182
            .saturating_add(Weight::from_parts(417_175, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_431_000 picoseconds.
        Weight::from_parts(1_399_903, 0)
            // Standard Error: 5_888
            .saturating_add(Weight::from_parts(481_502, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_113_000 picoseconds.
        Weight::from_parts(1_244_766, 0)
            // Standard Error: 5_351
            .saturating_add(Weight::from_parts(573_399, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_481_000 picoseconds.
        Weight::from_parts(850_286, 0)
            // Standard Error: 4_557
            .saturating_add(Weight::from_parts(582_971, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_148_000 picoseconds.
        Weight::from_parts(968_258, 0)
            // Standard Error: 6_054
            .saturating_add(Weight::from_parts(547_654, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_350_000 picoseconds.
        Weight::from_parts(199_311, 0)
            // Standard Error: 8_250
            .saturating_add(Weight::from_parts(503_915, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_093_000 picoseconds.
        Weight::from_parts(2_919_090, 0)
            // Standard Error: 3_358
            .saturating_add(Weight::from_parts(201_002, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_206_000 picoseconds.
        Weight::from_parts(3_190_305, 0)
            // Standard Error: 2_910
            .saturating_add(Weight::from_parts(182_570, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_016_000 picoseconds.
        Weight::from_parts(3_175_000, 0)
            // Standard Error: 11_541
            .saturating_add(Weight::from_parts(1_806_284, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_084_000 picoseconds.
        Weight::from_parts(3_401_000, 0)
            // Standard Error: 7_349
            .saturating_add(Weight::from_parts(1_179_755, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_982_000 picoseconds.
        Weight::from_parts(3_055_000, 0)
            // Standard Error: 8_740
            .saturating_add(Weight::from_parts(1_821_991, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_094_000 picoseconds.
        Weight::from_parts(3_446_000, 0)
            // Standard Error: 7_926
            .saturating_add(Weight::from_parts(1_134_739, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_175_000 picoseconds.
        Weight::from_parts(3_326_000, 0)
            // Standard Error: 10_375
            .saturating_add(Weight::from_parts(1_824_939, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_135_000 picoseconds.
        Weight::from_parts(3_396_000, 0)
            // Standard Error: 6_672
            .saturating_add(Weight::from_parts(1_165_914, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_265_000 picoseconds.
        Weight::from_parts(3_382_000, 0)
            // Standard Error: 12_444
            .saturating_add(Weight::from_parts(1_811_705, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_267_000 picoseconds.
        Weight::from_parts(3_403_000, 0)
            // Standard Error: 8_600
            .saturating_add(Weight::from_parts(1_144_245, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_301_000 picoseconds.
        Weight::from_parts(3_437_000, 0)
            // Standard Error: 10_360
            .saturating_add(Weight::from_parts(1_876_280, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_348_000 picoseconds.
        Weight::from_parts(3_655_000, 0)
            // Standard Error: 7_807
            .saturating_add(Weight::from_parts(1_086_995, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_280_000 picoseconds.
        Weight::from_parts(3_513_000, 0)
            // Standard Error: 10_574
            .saturating_add(Weight::from_parts(1_778_352, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_077_000 picoseconds.
        Weight::from_parts(3_534_000, 0)
            // Standard Error: 7_707
            .saturating_add(Weight::from_parts(1_180_486, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_091_000 picoseconds.
        Weight::from_parts(3_401_000, 0)
            // Standard Error: 10_776
            .saturating_add(Weight::from_parts(1_811_950, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_111_000 picoseconds.
        Weight::from_parts(3_193_000, 0)
            // Standard Error: 8_078
            .saturating_add(Weight::from_parts(1_159_011, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_226_000 picoseconds.
        Weight::from_parts(3_488_000, 0)
            // Standard Error: 10_848
            .saturating_add(Weight::from_parts(1_937_769, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_263_000 picoseconds.
        Weight::from_parts(3_433_000, 0)
            // Standard Error: 8_792
            .saturating_add(Weight::from_parts(1_137_397, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_900_000 picoseconds.
        Weight::from_parts(3_076_000, 0)
            // Standard Error: 11_164
            .saturating_add(Weight::from_parts(1_828_869, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_395_000 picoseconds.
        Weight::from_parts(3_606_000, 0)
            // Standard Error: 8_296
            .saturating_add(Weight::from_parts(1_166_556, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_115_000 picoseconds.
        Weight::from_parts(3_231_000, 0)
            // Standard Error: 10_181
            .saturating_add(Weight::from_parts(1_812_130, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_224_000 picoseconds.
        Weight::from_parts(3_397_000, 0)
            // Standard Error: 8_933
            .saturating_add(Weight::from_parts(1_160_241, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_132_000 picoseconds.
        Weight::from_parts(3_241_000, 0)
            // Standard Error: 9_340
            .saturating_add(Weight::from_parts(1_262_721, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_989_000 picoseconds.
        Weight::from_parts(1_179_174, 0)
            // Standard Error: 6_192
            .saturating_add(Weight::from_parts(697_107, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_954_000 picoseconds.
        Weight::from_parts(3_145_000, 0)
            // Standard Error: 7_828
            .saturating_add(Weight::from_parts(1_279_731, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_300_000 picoseconds.
        Weight::from_parts(3_400_000, 0)
            // Standard Error: 5_981
            .saturating_add(Weight::from_parts(702_203, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_316_000 picoseconds.
        Weight::from_parts(3_542_000, 0)
            // Standard Error: 8_290
            .saturating_add(Weight::from_parts(1_774_930, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_279_000 picoseconds.
        Weight::from_parts(3_402_000, 0)
            // Standard Error: 7_079
            .saturating_add(Weight::from_parts(1_152_961, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_247_000 picoseconds.
        Weight::from_parts(8_467_149, 0)
            // Standard Error: 14_782
            .saturating_add(Weight::from_parts(1_896_342, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_159_000 picoseconds.
        Weight::from_parts(6_650_714, 0)
            // Standard Error: 14_529
            .saturating_add(Weight::from_parts(1_857_553, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_277_000 picoseconds.
        Weight::from_parts(7_387_019, 0)
            // Standard Error: 16_570
            .saturating_add(Weight::from_parts(2_226_340, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_215_000 picoseconds.
        Weight::from_parts(7_997_806, 0)
            // Standard Error: 13_746
            .saturating_add(Weight::from_parts(1_682_385, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_177_000 picoseconds.
        Weight::from_parts(15_412_321, 0)
            // Standard Error: 47_175
            .saturating_add(Weight::from_parts(7_808_597, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_211_000 picoseconds.
        Weight::from_parts(6_671_527, 0)
            // Standard Error: 48_555
            .saturating_add(Weight::from_parts(6_519_118, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_100_000 picoseconds.
        Weight::from_parts(9_796_986, 0)
            // Standard Error: 19_079
            .saturating_add(Weight::from_parts(2_077_974, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_124_000 picoseconds.
        Weight::from_parts(5_384_676, 0)
            // Standard Error: 17_172
            .saturating_add(Weight::from_parts(2_022_398, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_161_000 picoseconds.
        Weight::from_parts(3_350_000, 0)
            // Standard Error: 8_014
            .saturating_add(Weight::from_parts(1_266_899, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_145_000 picoseconds.
        Weight::from_parts(3_192_000, 0)
            // Standard Error: 5_675
            .saturating_add(Weight::from_parts(661_472, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_045_000 picoseconds.
        Weight::from_parts(3_485_000, 0)
            // Standard Error: 9_954
            .saturating_add(Weight::from_parts(1_295_883, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_542_000 picoseconds.
        Weight::from_parts(120_759, 0)
            // Standard Error: 6_703
            .saturating_add(Weight::from_parts(745_366, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_334_000 picoseconds.
        Weight::from_parts(3_678_000, 0)
            // Standard Error: 8_118
            .saturating_add(Weight::from_parts(1_221_294, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_088_000 picoseconds.
        Weight::from_parts(43_623, 0)
            // Standard Error: 7_206
            .saturating_add(Weight::from_parts(716_450, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_183_000 picoseconds.
        Weight::from_parts(3_237_000, 0)
            // Standard Error: 7_433
            .saturating_add(Weight::from_parts(1_067_633, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_307_000 picoseconds.
        Weight::from_parts(3_523_000, 0)
            // Standard Error: 5_225
            .saturating_add(Weight::from_parts(626_037, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_252_000 picoseconds.
        Weight::from_parts(3_348_000, 0)
            // Standard Error: 7_848
            .saturating_add(Weight::from_parts(1_080_204, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_050_000 picoseconds.
        Weight::from_parts(406_602, 0)
            // Standard Error: 6_063
            .saturating_add(Weight::from_parts(662_568, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_195_000 picoseconds.
        Weight::from_parts(3_345_000, 0)
            // Standard Error: 7_726
            .saturating_add(Weight::from_parts(1_110_741, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_098_000 picoseconds.
        Weight::from_parts(3_203_000, 0)
            // Standard Error: 4_927
            .saturating_add(Weight::from_parts(615_824, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_185_000 picoseconds.
        Weight::from_parts(3_351_000, 0)
            // Standard Error: 6_170
            .saturating_add(Weight::from_parts(1_039_037, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_010_000 picoseconds.
        Weight::from_parts(3_128_000, 0)
            // Standard Error: 4_905
            .saturating_add(Weight::from_parts(613_681, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_052_000 picoseconds.
        Weight::from_parts(3_169_000, 0)
            // Standard Error: 8_299
            .saturating_add(Weight::from_parts(1_121_770, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_233_000 picoseconds.
        Weight::from_parts(427_902, 0)
            // Standard Error: 6_097
            .saturating_add(Weight::from_parts(654_469, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 960_000 picoseconds.
        Weight::from_parts(1_013_000, 0)
            // Standard Error: 824
            .saturating_add(Weight::from_parts(252_538, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3577 + c * (1024 ±0)`
        // Minimum execution time: 3_251_000 picoseconds.
        Weight::from_parts(3_380_000, 3577)
            // Standard Error: 1_394
            .saturating_add(Weight::from_parts(696_972, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 135_524_000 picoseconds.
        Weight::from_parts(144_536_000, 0)
            // Standard Error: 250_714
            .saturating_add(Weight::from_parts(107_040_242, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1050`
        //  Estimated: `42875`
        // Minimum execution time: 85_543_000 picoseconds.
        Weight::from_parts(87_866_000, 42875)
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `958`
        //  Estimated: `21477`
        // Minimum execution time: 55_838_000 picoseconds.
        Weight::from_parts(57_370_000, 21477)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `605`
        //  Estimated: `17354`
        // Minimum execution time: 30_237_000 picoseconds.
        Weight::from_parts(31_196_000, 17354)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_129_000 picoseconds.
        Weight::from_parts(7_248_802, 7640)
            // Standard Error: 31_069
            .saturating_add(Weight::from_parts(16_200_215, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1506 + c * (16389 ±0)`
        //  Estimated: `42570 + c * (131112 ±0)`
        // Minimum execution time: 71_235_000 picoseconds.
        Weight::from_parts(72_265_000, 42570)
            // Standard Error: 620_974
            .saturating_add(Weight::from_parts(85_218_174, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `5270`
        // Minimum execution time: 64_046_000 picoseconds.
        Weight::from_parts(31_757_155, 5270)
            // Standard Error: 62_511
            .saturating_add(Weight::from_parts(54_513_430, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `809`
        //  Estimated: `40156`
        // Minimum execution time: 64_504_000 picoseconds.
        Weight::from_parts(98_939_700, 40156)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_602, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `306`
        //  Estimated: `35235`
        // Minimum execution time: 11_063_143_000 picoseconds.
        Weight::from_parts(274_151_848, 35235)
            // Standard Error: 169_096
            .saturating_add(Weight::from_parts(55_057_948, 0).saturating_mul(c.into()))
            // Standard Error: 10
            .saturating_add(Weight::from_parts(2_547, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `349`
        //  Estimated: `23860`
        // Minimum execution time: 55_842_000 picoseconds.
        Weight::from_parts(22_267_319, 23860)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_202, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `452`
        //  Estimated: `27184`
        // Minimum execution time: 59_300_000 picoseconds.
        Weight::from_parts(39_617_836, 27184)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_174, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1049`
        //  Estimated: `42866`
        // Minimum execution time: 85_819_000 picoseconds.
        Weight::from_parts(39_865_520, 42866)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(1_227, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1152`
        //  Estimated: `46396`
        // Minimum execution time: 96_120_000 picoseconds.
        Weight::from_parts(70_329_463, 46396)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_218, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `85981`
        // Minimum execution time: 486_984_000 picoseconds.
        Weight::from_parts(559_932_724, 85981)
            // Standard Error: 7_019
            .saturating_add(Weight::from_parts(6_284, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(29_u64))
            .saturating_add(RocksDbWeight::get().writes(23_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `85905`
        // Minimum execution time: 524_343_000 picoseconds.
        Weight::from_parts(614_701_316, 85905)
            // Standard Error: 6_792
            .saturating_add(Weight::from_parts(26_471, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(29_u64))
            .saturating_add(RocksDbWeight::get().writes(23_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 46_564_000 picoseconds.
        Weight::from_parts(47_126_000, 3899)
            // Standard Error: 30_768
            .saturating_add(Weight::from_parts(52_113_305, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_723_000 picoseconds.
        Weight::from_parts(86_836_000, 0)
            // Standard Error: 4_212_669
            .saturating_add(Weight::from_parts(686_247_352, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 411_787_000 picoseconds.
        Weight::from_parts(355_328_520, 0)
            // Standard Error: 7_364
            .saturating_add(Weight::from_parts(32_355_462, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 694_107_000 picoseconds.
        Weight::from_parts(710_696_944, 0)
            // Standard Error: 1_502_769
            .saturating_add(Weight::from_parts(445_121_037, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_293_000 picoseconds.
        Weight::from_parts(1_403_924, 0)
            // Standard Error: 11_364
            .saturating_add(Weight::from_parts(22_072_117, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 314_860_000 picoseconds.
        Weight::from_parts(367_049_499, 0)
            // Standard Error: 15_796
            .saturating_add(Weight::from_parts(5_387_493, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 398_718_000 picoseconds.
        Weight::from_parts(459_691_639, 0)
            // Standard Error: 15_791
            .saturating_add(Weight::from_parts(5_284_825, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 307_942_000 picoseconds.
        Weight::from_parts(426_078_671, 0)
            // Standard Error: 397_650
            .saturating_add(Weight::from_parts(288_380_431, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 295_750_000 picoseconds.
        Weight::from_parts(370_067_231, 0)
            // Standard Error: 290_812
            .saturating_add(Weight::from_parts(279_537_426, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 293_100_000 picoseconds.
        Weight::from_parts(347_681_006, 0)
            // Standard Error: 325_181
            .saturating_add(Weight::from_parts(282_995_593, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 286_345_000 picoseconds.
        Weight::from_parts(386_480_536, 0)
            // Standard Error: 303_694
            .saturating_add(Weight::from_parts(282_765_751, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 303_464_000 picoseconds.
        Weight::from_parts(384_989_646, 0)
            // Standard Error: 305_294
            .saturating_add(Weight::from_parts(281_187_555, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 287_166_000 picoseconds.
        Weight::from_parts(382_788_395, 0)
            // Standard Error: 288_868
            .saturating_add(Weight::from_parts(281_119_293, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 278_736_000 picoseconds.
        Weight::from_parts(355_180_015, 0)
            // Standard Error: 239_882
            .saturating_add(Weight::from_parts(280_797_617, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 296_105_000 picoseconds.
        Weight::from_parts(361_400_212, 0)
            // Standard Error: 261_539
            .saturating_add(Weight::from_parts(279_506_667, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 939_671_000 picoseconds.
        Weight::from_parts(1_085_065_458, 0)
            // Standard Error: 649_973
            .saturating_add(Weight::from_parts(377_694_228, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_345_845_000 picoseconds.
        Weight::from_parts(1_405_735_000, 0)
            // Standard Error: 54_138
            .saturating_add(Weight::from_parts(13_476_481, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 297_034_000 picoseconds.
        Weight::from_parts(367_205_532, 0)
            // Standard Error: 252_740
            .saturating_add(Weight::from_parts(280_102_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 293_434_000 picoseconds.
        Weight::from_parts(356_354_216, 0)
            // Standard Error: 240_121
            .saturating_add(Weight::from_parts(282_187_926, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 295_430_000 picoseconds.
        Weight::from_parts(391_971_898, 0)
            // Standard Error: 370_866
            .saturating_add(Weight::from_parts(372_115_006, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 355_068_000 picoseconds.
        Weight::from_parts(382_547_000, 0)
            // Standard Error: 4_073_892
            .saturating_add(Weight::from_parts(1_324_405_090, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_872_000 picoseconds.
        Weight::from_parts(148_832_064, 0)
            // Standard Error: 450_901
            .saturating_add(Weight::from_parts(445_703_147, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 871_229_000 picoseconds.
        Weight::from_parts(897_905_000, 0)
            // Standard Error: 60_780
            .saturating_add(Weight::from_parts(21_787_000, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 313_370_000 picoseconds.
        Weight::from_parts(432_644_217, 0)
            // Standard Error: 470_318
            .saturating_add(Weight::from_parts(553_818_612, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 867_422_000 picoseconds.
        Weight::from_parts(894_666_000, 0)
            // Standard Error: 57_785
            .saturating_add(Weight::from_parts(21_425_620, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 942_103_000 picoseconds.
        Weight::from_parts(1_030_470_268, 0)
            // Standard Error: 522_807
            .saturating_add(Weight::from_parts(559_810_475, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 950_273_000 picoseconds.
        Weight::from_parts(1_027_166_931, 0)
            // Standard Error: 625_307
            .saturating_add(Weight::from_parts(577_708_639, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 284_761_000 picoseconds.
        Weight::from_parts(361_719_560, 0)
            // Standard Error: 264_318
            .saturating_add(Weight::from_parts(289_398_336, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_981_259_000 picoseconds.
        Weight::from_parts(6_177_736_723, 0)
            // Standard Error: 959_883
            .saturating_add(Weight::from_parts(492_999_851, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_036_319_000 picoseconds.
        Weight::from_parts(1_059_047_000, 0)
            // Standard Error: 49_506
            .saturating_add(Weight::from_parts(31_356_271, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_016_992_000 picoseconds.
        Weight::from_parts(6_181_021_408, 0)
            // Standard Error: 1_027_376
            .saturating_add(Weight::from_parts(568_776_180, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_082_419_000 picoseconds.
        Weight::from_parts(6_350_666_200, 0)
            // Standard Error: 1_171_125
            .saturating_add(Weight::from_parts(590_168_239, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 468_759_000 picoseconds.
        Weight::from_parts(531_472_444, 0)
            // Standard Error: 420_838
            .saturating_add(Weight::from_parts(556_156_279, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_039_895_000 picoseconds.
        Weight::from_parts(1_077_911_000, 0)
            // Standard Error: 55_219
            .saturating_add(Weight::from_parts(21_485_725, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_207_211_000 picoseconds.
        Weight::from_parts(6_391_593_308, 0)
            // Standard Error: 1_057_864
            .saturating_add(Weight::from_parts(579_376_595, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 262_282_000 picoseconds.
        Weight::from_parts(344_682_771, 0)
            // Standard Error: 3_204_590
            .saturating_add(Weight::from_parts(34_834_628, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 336_089_000 picoseconds.
        Weight::from_parts(365_457_798, 0)
            // Standard Error: 1_412
            .saturating_add(Weight::from_parts(431_296, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 262_061_000 picoseconds.
        Weight::from_parts(344_771_600, 0)
            // Standard Error: 3_181_500
            .saturating_add(Weight::from_parts(31_367_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 326_804_000 picoseconds.
        Weight::from_parts(367_123_876, 0)
            // Standard Error: 1_216
            .saturating_add(Weight::from_parts(429_588, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 247_527_000 picoseconds.
        Weight::from_parts(347_704_510, 0)
            // Standard Error: 3_493_698
            .saturating_add(Weight::from_parts(34_993_389, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 272_951_000 picoseconds.
        Weight::from_parts(345_342_573, 0)
            // Standard Error: 3_254_148
            .saturating_add(Weight::from_parts(26_873_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 285_916_000 picoseconds.
        Weight::from_parts(384_521_862, 0)
            // Standard Error: 349_874
            .saturating_add(Weight::from_parts(392_128_183, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 336_807_000 picoseconds.
        Weight::from_parts(130_937_981, 0)
            // Standard Error: 3_621
            .saturating_add(Weight::from_parts(691_610, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 900_871_000 picoseconds.
        Weight::from_parts(997_701_761, 0)
            // Standard Error: 3_806_353
            .saturating_add(Weight::from_parts(74_526_338, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 914_439_000 picoseconds.
        Weight::from_parts(1_011_497_371, 0)
            // Standard Error: 4_305_220
            .saturating_add(Weight::from_parts(81_498_128, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 278_103_000 picoseconds.
        Weight::from_parts(368_192_961, 0)
            // Standard Error: 2_849_222
            .saturating_add(Weight::from_parts(17_945_838, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 333_265_000 picoseconds.
        Weight::from_parts(371_298_839, 0)
            // Standard Error: 1_236
            .saturating_add(Weight::from_parts(425_019, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(_r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 298_585_000 picoseconds.
        Weight::from_parts(366_929_938, 0)
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 307_281_000 picoseconds.
        Weight::from_parts(365_856_170, 0)
            // Standard Error: 1_405
            .saturating_add(Weight::from_parts(432_238, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 290_453_000 picoseconds.
        Weight::from_parts(347_620_563, 0)
            // Standard Error: 258_078
            .saturating_add(Weight::from_parts(284_310_849, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 279_576_000 picoseconds.
        Weight::from_parts(356_384_135, 0)
            // Standard Error: 314_286
            .saturating_add(Weight::from_parts(285_351_063, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 941_344_000 picoseconds.
        Weight::from_parts(1_035_375_431, 0)
            // Standard Error: 366_077
            .saturating_add(Weight::from_parts(310_848_058, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 982_918_000 picoseconds.
        Weight::from_parts(1_035_031_315, 0)
            // Standard Error: 1_463
            .saturating_add(Weight::from_parts(157_158, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_680_718_000 picoseconds.
        Weight::from_parts(7_085_026_906, 0)
            // Standard Error: 1_149_836
            .saturating_add(Weight::from_parts(406_779_171, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_166_382_000 picoseconds.
        Weight::from_parts(7_343_799_281, 0)
            // Standard Error: 11_075
            .saturating_add(Weight::from_parts(13_830_173, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 285_918_000 picoseconds.
        Weight::from_parts(367_505_539, 0)
            // Standard Error: 307_435
            .saturating_add(Weight::from_parts(306_586_434, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 540_244_000 picoseconds.
        Weight::from_parts(563_995_000, 0)
            // Standard Error: 49_485
            .saturating_add(Weight::from_parts(25_632_036, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 288_765_000 picoseconds.
        Weight::from_parts(357_137_821, 0)
            // Standard Error: 252_624
            .saturating_add(Weight::from_parts(280_084_887, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 275_269_000 picoseconds.
        Weight::from_parts(338_142_057, 0)
            // Standard Error: 2_816_339
            .saturating_add(Weight::from_parts(36_643_842, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 277_823_000 picoseconds.
        Weight::from_parts(333_217_659, 0)
            // Standard Error: 2_865_578
            .saturating_add(Weight::from_parts(14_696_040, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 272_489_000 picoseconds.
        Weight::from_parts(336_816_793, 0)
            // Standard Error: 2_994_581
            .saturating_add(Weight::from_parts(8_410_306, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 268_675_000 picoseconds.
        Weight::from_parts(335_825_975, 0)
            // Standard Error: 2_754_571
            .saturating_add(Weight::from_parts(18_684_924, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 274_611_000 picoseconds.
        Weight::from_parts(336_578_457, 0)
            // Standard Error: 2_934_897
            .saturating_add(Weight::from_parts(8_009_142, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 386_875_000 picoseconds.
        Weight::from_parts(469_123_435, 0)
            // Standard Error: 369_809
            .saturating_add(Weight::from_parts(409_442_365, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 312_780_000 picoseconds.
        Weight::from_parts(388_791_256, 0)
            // Standard Error: 360_780
            .saturating_add(Weight::from_parts(633_668_595, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_767_386_000 picoseconds.
        Weight::from_parts(44_445_433_000, 0)
            // Standard Error: 269_228
            .saturating_add(Weight::from_parts(7_983_485, 0).saturating_mul(p.into()))
            // Standard Error: 269_214
            .saturating_add(Weight::from_parts(178_449_933, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 335_805_000 picoseconds.
        Weight::from_parts(397_775_584, 0)
            // Standard Error: 425_078
            .saturating_add(Weight::from_parts(658_971_692, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_902_072_000 picoseconds.
        Weight::from_parts(44_605_462_000, 0)
            // Standard Error: 263_485
            .saturating_add(Weight::from_parts(7_807_726, 0).saturating_mul(p.into()))
            // Standard Error: 263_472
            .saturating_add(Weight::from_parts(178_617_446, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 285_711_000 picoseconds.
        Weight::from_parts(367_208_876, 0)
            // Standard Error: 108_350
            .saturating_add(Weight::from_parts(4_943_334, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 304_073_000 picoseconds.
        Weight::from_parts(303_895_880, 1131)
            // Standard Error: 14_543
            .saturating_add(Weight::from_parts(15_788_838, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 280_436_000 picoseconds.
        Weight::from_parts(113_684_851, 1131)
            // Standard Error: 74_277
            .saturating_add(Weight::from_parts(42_771_979, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_241_633_000 picoseconds.
        Weight::from_parts(8_080_646_830, 5069931)
            // Standard Error: 80_646
            .saturating_add(Weight::from_parts(43_989_963, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 297_682_000 picoseconds.
        Weight::from_parts(324_280_000, 1939)
            // Standard Error: 36_954
            .saturating_add(Weight::from_parts(51_969_374, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 297_102_000 picoseconds.
        Weight::from_parts(371_264_817, 1131)
            // Standard Error: 77_221
            .saturating_add(Weight::from_parts(36_391_713, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 982_880_000 picoseconds.
        Weight::from_parts(1_011_265_875, 1496)
            // Standard Error: 387_101
            .saturating_add(Weight::from_parts(54_991_799, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_517_235_000 picoseconds.
        Weight::from_parts(1_639_287_287, 317931)
            // Standard Error: 215_755
            .saturating_add(Weight::from_parts(42_692_053, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_374_125_000 picoseconds.
        Weight::from_parts(4_398_820_490, 0)
            // Standard Error: 11_892
            .saturating_add(Weight::from_parts(3_297_772, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_376_687_000 picoseconds.
        Weight::from_parts(4_398_837_328, 0)
            // Standard Error: 11_897
            .saturating_add(Weight::from_parts(3_310_862, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_714_770_000 picoseconds.
        Weight::from_parts(10_915_410_458, 0)
            // Standard Error: 176_446
            .saturating_add(Weight::from_parts(17_910_685, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_472_887_000 picoseconds.
        Weight::from_parts(11_174_175_667, 0)
            // Standard Error: 215_606
            .saturating_add(Weight::from_parts(12_641_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_172_000 picoseconds.
        Weight::from_parts(3_290_000, 0)
            // Standard Error: 7_149
            .saturating_add(Weight::from_parts(3_638_335, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_283_000 picoseconds.
        Weight::from_parts(4_557_724, 0)
            // Standard Error: 9_229
            .saturating_add(Weight::from_parts(3_000_822, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_122_000 picoseconds.
        Weight::from_parts(3_128_259, 0)
            // Standard Error: 3_781
            .saturating_add(Weight::from_parts(1_645_950, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_144_000 picoseconds.
        Weight::from_parts(326_757, 0)
            // Standard Error: 13_076
            .saturating_add(Weight::from_parts(2_949_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_216_000 picoseconds.
        Weight::from_parts(7_665_222, 0)
            // Standard Error: 17_231
            .saturating_add(Weight::from_parts(4_572_216, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_567_000 picoseconds.
        Weight::from_parts(5_294_728, 0)
            // Standard Error: 1_545
            .saturating_add(Weight::from_parts(165_534, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_346_000 picoseconds.
        Weight::from_parts(6_058_470, 0)
            // Standard Error: 8_367
            .saturating_add(Weight::from_parts(2_533_007, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_533_007 -
            2_399_383, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_261_000 picoseconds.
        Weight::from_parts(4_903_348, 0)
            // Standard Error: 11_820
            .saturating_add(Weight::from_parts(2_399_383, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_769_000 picoseconds.
        Weight::from_parts(28_365_659, 0)
            // Standard Error: 43_705
            .saturating_add(Weight::from_parts(8_831_954, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 13_275_000 picoseconds.
        Weight::from_parts(3_376_447, 0)
            // Standard Error: 7_044
            .saturating_add(Weight::from_parts(1_190_981, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_055_000 picoseconds.
        Weight::from_parts(6_563_259, 0)
            // Standard Error: 31
            .saturating_add(Weight::from_parts(512, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_435_000 picoseconds.
        Weight::from_parts(2_722_932, 0)
            // Standard Error: 3_034
            .saturating_add(Weight::from_parts(253_002, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_887_000 picoseconds.
        Weight::from_parts(2_982_000, 0)
            // Standard Error: 4_628
            .saturating_add(Weight::from_parts(750_172, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_251_000 picoseconds.
        Weight::from_parts(3_331_000, 0)
            // Standard Error: 4_628
            .saturating_add(Weight::from_parts(718_732, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_632_000 picoseconds.
        Weight::from_parts(4_174_384, 0)
            // Standard Error: 5_600
            .saturating_add(Weight::from_parts(741_894, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_396_000 picoseconds.
        Weight::from_parts(7_940_000, 0)
            // Standard Error: 9_770
            .saturating_add(Weight::from_parts(1_288_435, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_212_000 picoseconds.
        Weight::from_parts(2_297_437, 0)
            // Standard Error: 9_525
            .saturating_add(Weight::from_parts(7_026_356, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_150_000 picoseconds.
        Weight::from_parts(3_235_000, 0)
            // Standard Error: 6_544
            .saturating_add(Weight::from_parts(3_263_356, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_121_000 picoseconds.
        Weight::from_parts(7_748, 0)
            // Standard Error: 10_146
            .saturating_add(Weight::from_parts(3_128_588, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_173_000 picoseconds.
        Weight::from_parts(3_398_000, 0)
            // Standard Error: 7_431
            .saturating_add(Weight::from_parts(3_046_059, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_166_000 picoseconds.
        Weight::from_parts(3_351_000, 0)
            // Standard Error: 5_890
            .saturating_add(Weight::from_parts(2_620_824, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_092_000 picoseconds.
        Weight::from_parts(225_408, 0)
            // Standard Error: 6_697
            .saturating_add(Weight::from_parts(664_287, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_998_000 picoseconds.
        Weight::from_parts(1_073_225, 0)
            // Standard Error: 6_038
            .saturating_add(Weight::from_parts(492_347, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_143_000 picoseconds.
        Weight::from_parts(3_476_000, 0)
            // Standard Error: 10_266
            .saturating_add(Weight::from_parts(1_830_021, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_106_000 picoseconds.
        Weight::from_parts(3_265_000, 0)
            // Standard Error: 8_782
            .saturating_add(Weight::from_parts(1_188_748, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_246_000 picoseconds.
        Weight::from_parts(1_440_125, 0)
            // Standard Error: 4_182
            .saturating_add(Weight::from_parts(417_175, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_431_000 picoseconds.
        Weight::from_parts(1_399_903, 0)
            // Standard Error: 5_888
            .saturating_add(Weight::from_parts(481_502, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_113_000 picoseconds.
        Weight::from_parts(1_244_766, 0)
            // Standard Error: 5_351
            .saturating_add(Weight::from_parts(573_399, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_481_000 picoseconds.
        Weight::from_parts(850_286, 0)
            // Standard Error: 4_557
            .saturating_add(Weight::from_parts(582_971, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_148_000 picoseconds.
        Weight::from_parts(968_258, 0)
            // Standard Error: 6_054
            .saturating_add(Weight::from_parts(547_654, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_350_000 picoseconds.
        Weight::from_parts(199_311, 0)
            // Standard Error: 8_250
            .saturating_add(Weight::from_parts(503_915, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_093_000 picoseconds.
        Weight::from_parts(2_919_090, 0)
            // Standard Error: 3_358
            .saturating_add(Weight::from_parts(201_002, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_206_000 picoseconds.
        Weight::from_parts(3_190_305, 0)
            // Standard Error: 2_910
            .saturating_add(Weight::from_parts(182_570, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_016_000 picoseconds.
        Weight::from_parts(3_175_000, 0)
            // Standard Error: 11_541
            .saturating_add(Weight::from_parts(1_806_284, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_084_000 picoseconds.
        Weight::from_parts(3_401_000, 0)
            // Standard Error: 7_349
            .saturating_add(Weight::from_parts(1_179_755, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_982_000 picoseconds.
        Weight::from_parts(3_055_000, 0)
            // Standard Error: 8_740
            .saturating_add(Weight::from_parts(1_821_991, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_094_000 picoseconds.
        Weight::from_parts(3_446_000, 0)
            // Standard Error: 7_926
            .saturating_add(Weight::from_parts(1_134_739, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_175_000 picoseconds.
        Weight::from_parts(3_326_000, 0)
            // Standard Error: 10_375
            .saturating_add(Weight::from_parts(1_824_939, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_135_000 picoseconds.
        Weight::from_parts(3_396_000, 0)
            // Standard Error: 6_672
            .saturating_add(Weight::from_parts(1_165_914, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_265_000 picoseconds.
        Weight::from_parts(3_382_000, 0)
            // Standard Error: 12_444
            .saturating_add(Weight::from_parts(1_811_705, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_267_000 picoseconds.
        Weight::from_parts(3_403_000, 0)
            // Standard Error: 8_600
            .saturating_add(Weight::from_parts(1_144_245, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_301_000 picoseconds.
        Weight::from_parts(3_437_000, 0)
            // Standard Error: 10_360
            .saturating_add(Weight::from_parts(1_876_280, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_348_000 picoseconds.
        Weight::from_parts(3_655_000, 0)
            // Standard Error: 7_807
            .saturating_add(Weight::from_parts(1_086_995, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_280_000 picoseconds.
        Weight::from_parts(3_513_000, 0)
            // Standard Error: 10_574
            .saturating_add(Weight::from_parts(1_778_352, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_077_000 picoseconds.
        Weight::from_parts(3_534_000, 0)
            // Standard Error: 7_707
            .saturating_add(Weight::from_parts(1_180_486, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_091_000 picoseconds.
        Weight::from_parts(3_401_000, 0)
            // Standard Error: 10_776
            .saturating_add(Weight::from_parts(1_811_950, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_111_000 picoseconds.
        Weight::from_parts(3_193_000, 0)
            // Standard Error: 8_078
            .saturating_add(Weight::from_parts(1_159_011, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_226_000 picoseconds.
        Weight::from_parts(3_488_000, 0)
            // Standard Error: 10_848
            .saturating_add(Weight::from_parts(1_937_769, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_263_000 picoseconds.
        Weight::from_parts(3_433_000, 0)
            // Standard Error: 8_792
            .saturating_add(Weight::from_parts(1_137_397, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_900_000 picoseconds.
        Weight::from_parts(3_076_000, 0)
            // Standard Error: 11_164
            .saturating_add(Weight::from_parts(1_828_869, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_395_000 picoseconds.
        Weight::from_parts(3_606_000, 0)
            // Standard Error: 8_296
            .saturating_add(Weight::from_parts(1_166_556, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_115_000 picoseconds.
        Weight::from_parts(3_231_000, 0)
            // Standard Error: 10_181
            .saturating_add(Weight::from_parts(1_812_130, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_224_000 picoseconds.
        Weight::from_parts(3_397_000, 0)
            // Standard Error: 8_933
            .saturating_add(Weight::from_parts(1_160_241, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_132_000 picoseconds.
        Weight::from_parts(3_241_000, 0)
            // Standard Error: 9_340
            .saturating_add(Weight::from_parts(1_262_721, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_989_000 picoseconds.
        Weight::from_parts(1_179_174, 0)
            // Standard Error: 6_192
            .saturating_add(Weight::from_parts(697_107, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_954_000 picoseconds.
        Weight::from_parts(3_145_000, 0)
            // Standard Error: 7_828
            .saturating_add(Weight::from_parts(1_279_731, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_300_000 picoseconds.
        Weight::from_parts(3_400_000, 0)
            // Standard Error: 5_981
            .saturating_add(Weight::from_parts(702_203, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_316_000 picoseconds.
        Weight::from_parts(3_542_000, 0)
            // Standard Error: 8_290
            .saturating_add(Weight::from_parts(1_774_930, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_279_000 picoseconds.
        Weight::from_parts(3_402_000, 0)
            // Standard Error: 7_079
            .saturating_add(Weight::from_parts(1_152_961, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_247_000 picoseconds.
        Weight::from_parts(8_467_149, 0)
            // Standard Error: 14_782
            .saturating_add(Weight::from_parts(1_896_342, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_159_000 picoseconds.
        Weight::from_parts(6_650_714, 0)
            // Standard Error: 14_529
            .saturating_add(Weight::from_parts(1_857_553, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_277_000 picoseconds.
        Weight::from_parts(7_387_019, 0)
            // Standard Error: 16_570
            .saturating_add(Weight::from_parts(2_226_340, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_215_000 picoseconds.
        Weight::from_parts(7_997_806, 0)
            // Standard Error: 13_746
            .saturating_add(Weight::from_parts(1_682_385, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_177_000 picoseconds.
        Weight::from_parts(15_412_321, 0)
            // Standard Error: 47_175
            .saturating_add(Weight::from_parts(7_808_597, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_211_000 picoseconds.
        Weight::from_parts(6_671_527, 0)
            // Standard Error: 48_555
            .saturating_add(Weight::from_parts(6_519_118, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_100_000 picoseconds.
        Weight::from_parts(9_796_986, 0)
            // Standard Error: 19_079
            .saturating_add(Weight::from_parts(2_077_974, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_124_000 picoseconds.
        Weight::from_parts(5_384_676, 0)
            // Standard Error: 17_172
            .saturating_add(Weight::from_parts(2_022_398, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_161_000 picoseconds.
        Weight::from_parts(3_350_000, 0)
            // Standard Error: 8_014
            .saturating_add(Weight::from_parts(1_266_899, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_145_000 picoseconds.
        Weight::from_parts(3_192_000, 0)
            // Standard Error: 5_675
            .saturating_add(Weight::from_parts(661_472, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_045_000 picoseconds.
        Weight::from_parts(3_485_000, 0)
            // Standard Error: 9_954
            .saturating_add(Weight::from_parts(1_295_883, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_542_000 picoseconds.
        Weight::from_parts(120_759, 0)
            // Standard Error: 6_703
            .saturating_add(Weight::from_parts(745_366, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_334_000 picoseconds.
        Weight::from_parts(3_678_000, 0)
            // Standard Error: 8_118
            .saturating_add(Weight::from_parts(1_221_294, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_088_000 picoseconds.
        Weight::from_parts(43_623, 0)
            // Standard Error: 7_206
            .saturating_add(Weight::from_parts(716_450, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_183_000 picoseconds.
        Weight::from_parts(3_237_000, 0)
            // Standard Error: 7_433
            .saturating_add(Weight::from_parts(1_067_633, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_307_000 picoseconds.
        Weight::from_parts(3_523_000, 0)
            // Standard Error: 5_225
            .saturating_add(Weight::from_parts(626_037, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_252_000 picoseconds.
        Weight::from_parts(3_348_000, 0)
            // Standard Error: 7_848
            .saturating_add(Weight::from_parts(1_080_204, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_050_000 picoseconds.
        Weight::from_parts(406_602, 0)
            // Standard Error: 6_063
            .saturating_add(Weight::from_parts(662_568, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_195_000 picoseconds.
        Weight::from_parts(3_345_000, 0)
            // Standard Error: 7_726
            .saturating_add(Weight::from_parts(1_110_741, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_098_000 picoseconds.
        Weight::from_parts(3_203_000, 0)
            // Standard Error: 4_927
            .saturating_add(Weight::from_parts(615_824, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_185_000 picoseconds.
        Weight::from_parts(3_351_000, 0)
            // Standard Error: 6_170
            .saturating_add(Weight::from_parts(1_039_037, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_010_000 picoseconds.
        Weight::from_parts(3_128_000, 0)
            // Standard Error: 4_905
            .saturating_add(Weight::from_parts(613_681, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_052_000 picoseconds.
        Weight::from_parts(3_169_000, 0)
            // Standard Error: 8_299
            .saturating_add(Weight::from_parts(1_121_770, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_233_000 picoseconds.
        Weight::from_parts(427_902, 0)
            // Standard Error: 6_097
            .saturating_add(Weight::from_parts(654_469, 0).saturating_mul(r.into()))
    }
}
