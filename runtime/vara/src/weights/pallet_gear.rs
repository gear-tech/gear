// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-17, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `epyc-runners-node.hetzner`, CPU: `AMD EPYC 7502P 32-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_exit_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(1_000_000 as u64)
            // Standard Error: 211
            .saturating_add(Weight::from_ref_time(140_336 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(4_000_000 as u64)
            // Standard Error: 559
            .saturating_add(Weight::from_ref_time(361_781 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(62_000_000 as u64)
            // Standard Error: 1_474
            .saturating_add(Weight::from_ref_time(1_234_747 as u64).saturating_mul(c as u64))
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(104_749_000 as u64)
            .saturating_add(T::DbWeight::get().reads(8 as u64))
            .saturating_add(T::DbWeight::get().writes(6 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(76_934_000 as u64)
            // Standard Error: 25
            .saturating_add(Weight::from_ref_time(41_662 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(70_642_000 as u64)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(2_514 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(10_554_169_000 as u64)
            // Standard Error: 475
            .saturating_add(Weight::from_ref_time(16_389 as u64).saturating_mul(c as u64))
            // Standard Error: 29
            .saturating_add(Weight::from_ref_time(965 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(11 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(77_164_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(925 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(126_844_000 as u64)
            // Standard Error: 9
            .saturating_add(Weight::from_ref_time(1_077 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(14 as u64))
            .saturating_add(T::DbWeight::get().writes(11 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        Weight::from_ref_time(182_936_000 as u64)
            // Standard Error: 2_372
            .saturating_add(Weight::from_ref_time(9_306 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(25 as u64))
            .saturating_add(T::DbWeight::get().writes(23 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(290_792_000 as u64)
            // Standard Error: 766
            .saturating_add(Weight::from_ref_time(10_513 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(26 as u64))
            .saturating_add(T::DbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument(c: u32, ) -> Weight {
        Weight::from_ref_time(32_185_000 as u64)
            // Standard Error: 29
            .saturating_add(Weight::from_ref_time(43_005 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(101_523_000 as u64)
            // Standard Error: 45_067
            .saturating_add(Weight::from_ref_time(235_608_959 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        Weight::from_ref_time(342_476_000 as u64)
            // Standard Error: 52_330
            .saturating_add(Weight::from_ref_time(223_414_269 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(120_251_000 as u64)
            // Standard Error: 340_030
            .saturating_add(Weight::from_ref_time(339_766_624 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(118_216_000 as u64)
            // Standard Error: 64_090
            .saturating_add(Weight::from_ref_time(240_474_822 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        Weight::from_ref_time(101_243_000 as u64)
            // Standard Error: 93_442
            .saturating_add(Weight::from_ref_time(229_039_972 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(101_212_000 as u64)
            // Standard Error: 95_334
            .saturating_add(Weight::from_ref_time(229_233_185 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(100_992_000 as u64)
            // Standard Error: 85_481
            .saturating_add(Weight::from_ref_time(228_907_757 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(100_541_000 as u64)
            // Standard Error: 86_698
            .saturating_add(Weight::from_ref_time(230_506_094 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(100_291_000 as u64)
            // Standard Error: 86_269
            .saturating_add(Weight::from_ref_time(229_588_300 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(100_131_000 as u64)
            // Standard Error: 93_224
            .saturating_add(Weight::from_ref_time(228_955_827 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(100_381_000 as u64)
            // Standard Error: 37_375
            .saturating_add(Weight::from_ref_time(203_974_107 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(100_781_000 as u64)
            // Standard Error: 42_127
            .saturating_add(Weight::from_ref_time(196_519_183 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(102_084_000 as u64)
            // Standard Error: 82_231
            .saturating_add(Weight::from_ref_time(238_271_015 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(338_087_000 as u64)
            // Standard Error: 5_590
            .saturating_add(Weight::from_ref_time(7_943_194 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(100_350_000 as u64)
            // Standard Error: 36_095
            .saturating_add(Weight::from_ref_time(195_570_954 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(100_982_000 as u64)
            // Standard Error: 35_778
            .saturating_add(Weight::from_ref_time(203_432_163 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_random(r: u32, ) -> Weight {
        Weight::from_ref_time(100_982_000 as u64)
            // Standard Error: 35_778
            .saturating_add(Weight::from_ref_time(203_432_163 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(101_503_000 as u64)
            // Standard Error: 72_966
            .saturating_add(Weight::from_ref_time(242_969_444 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(102_996_000 as u64)
            // Standard Error: 109_173
            .saturating_add(Weight::from_ref_time(501_662_397 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(624_099_000 as u64)
            // Standard Error: 116_168
            .saturating_add(Weight::from_ref_time(19_714_357 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(101_183_000 as u64)
            // Standard Error: 92_722
            .saturating_add(Weight::from_ref_time(340_404_440 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(471_374_000 as u64)
            // Standard Error: 5_434
            .saturating_add(Weight::from_ref_time(15_260_017 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(101_022_000 as u64)
            // Standard Error: 91_481
            .saturating_add(Weight::from_ref_time(251_002_556 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(100_731_000 as u64)
            // Standard Error: 75_936
            .saturating_add(Weight::from_ref_time(250_793_013 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(335_952_000 as u64)
            // Standard Error: 115_616
            .saturating_add(Weight::from_ref_time(19_700_260 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(100_772_000 as u64)
            // Standard Error: 93_592
            .saturating_add(Weight::from_ref_time(232_196_234 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(100_000_000 as u64)
            // Standard Error: 73_053
            .saturating_add(Weight::from_ref_time(245_355_850 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(331_253_000 as u64)
            // Standard Error: 7_469
            .saturating_add(Weight::from_ref_time(26_784_815 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_exit_code(r: u32, ) -> Weight {
        Weight::from_ref_time(100_671_000 as u64)
            // Standard Error: 86_868
            .saturating_add(Weight::from_ref_time(231_830_464 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(99_699_000 as u64)
            // Standard Error: 260_245
            .saturating_add(Weight::from_ref_time(38_833_099 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(99_379_000 as u64)
            // Standard Error: 205_564
            .saturating_add(Weight::from_ref_time(15_875_800 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(99_499_000 as u64)
            // Standard Error: 192_772
            .saturating_add(Weight::from_ref_time(16_390_900 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(100_200_000 as u64)
            // Standard Error: 274_052
            .saturating_add(Weight::from_ref_time(17_932_400 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        Weight::from_ref_time(99_890_000 as u64)
            // Standard Error: 288_353
            .saturating_add(Weight::from_ref_time(17_621_099 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(101_413_000 as u64)
            // Standard Error: 78_059
            .saturating_add(Weight::from_ref_time(258_183_022 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(117_585_000 as u64)
            // Standard Error: 110_326
            .saturating_add(Weight::from_ref_time(423_886_964 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 1024]`.
    /// The range of component `s` is `[0, 1024]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(16_169_786_000 as u64)
            // Standard Error: 160_729
            .saturating_add(Weight::from_ref_time(5_382_721 as u64).saturating_mul(p as u64))
            // Standard Error: 160_729
            .saturating_add(Weight::from_ref_time(222_803_421 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(257 as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(3_186_000 as u64)
            // Standard Error: 167
            .saturating_add(Weight::from_ref_time(5_536 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(5_381_000 as u64)
            // Standard Error: 15_551
            .saturating_add(Weight::from_ref_time(758_973 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(5_371_000 as u64)
            // Standard Error: 25_160
            .saturating_add(Weight::from_ref_time(1_301_985 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(3_277_000 as u64)
            // Standard Error: 198
            .saturating_add(Weight::from_ref_time(609_617 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_107_000 as u64)
            // Standard Error: 309
            .saturating_add(Weight::from_ref_time(623_067 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(3_117_000 as u64)
            // Standard Error: 270
            .saturating_add(Weight::from_ref_time(486_210 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_176_000 as u64)
            // Standard Error: 250
            .saturating_add(Weight::from_ref_time(528_242 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(3_226_000 as u64)
            // Standard Error: 674
            .saturating_add(Weight::from_ref_time(1_589_845 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(4_419_000 as u64)
            // Standard Error: 38
            .saturating_add(Weight::from_ref_time(8_347 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(3_277_000 as u64)
            // Standard Error: 560
            .saturating_add(Weight::from_ref_time(652_522 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(3_607_000 as u64)
            // Standard Error: 700
            .saturating_add(Weight::from_ref_time(1_498_996 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(5_421_000 as u64)
            // Standard Error: 178
            .saturating_add(Weight::from_ref_time(74_554 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(3_227_000 as u64)
            // Standard Error: 228
            .saturating_add(Weight::from_ref_time(33_092 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(3_257_000 as u64)
            // Standard Error: 318
            .saturating_add(Weight::from_ref_time(61_533 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(3_277_000 as u64)
            // Standard Error: 346
            .saturating_add(Weight::from_ref_time(59_638 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(14_750_000 as u64)
            // Standard Error: 373
            .saturating_add(Weight::from_ref_time(51_900 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(10_741_000 as u64)
            // Standard Error: 2_524
            .saturating_add(Weight::from_ref_time(188_839 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(5_311_000 as u64)
            // Standard Error: 490
            .saturating_add(Weight::from_ref_time(1_240_959 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_156_000 as u64)
            // Standard Error: 326
            .saturating_add(Weight::from_ref_time(767_840 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_117_000 as u64)
            // Standard Error: 347
            .saturating_add(Weight::from_ref_time(738_772 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(3_116_000 as u64)
            // Standard Error: 326
            .saturating_add(Weight::from_ref_time(55_360 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_176_000 as u64)
            // Standard Error: 436
            .saturating_add(Weight::from_ref_time(109_487 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_126_000 as u64)
            // Standard Error: 258
            .saturating_add(Weight::from_ref_time(39_696 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_136_000 as u64)
            // Standard Error: 204
            .saturating_add(Weight::from_ref_time(27_427 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(3_166_000 as u64)
            // Standard Error: 183
            .saturating_add(Weight::from_ref_time(27_288 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(3_066_000 as u64)
            // Standard Error: 469
            .saturating_add(Weight::from_ref_time(113_417 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(3_136_000 as u64)
            // Standard Error: 450
            .saturating_add(Weight::from_ref_time(111_798 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_076_000 as u64)
            // Standard Error: 512
            .saturating_add(Weight::from_ref_time(112_679 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_187_000 as u64)
            // Standard Error: 438
            .saturating_add(Weight::from_ref_time(107_124 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 498
            .saturating_add(Weight::from_ref_time(112_857 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_086_000 as u64)
            // Standard Error: 465
            .saturating_add(Weight::from_ref_time(110_476 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(3_166_000 as u64)
            // Standard Error: 463
            .saturating_add(Weight::from_ref_time(108_530 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_076_000 as u64)
            // Standard Error: 437
            .saturating_add(Weight::from_ref_time(112_664 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(3_217_000 as u64)
            // Standard Error: 392
            .saturating_add(Weight::from_ref_time(107_982 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 432
            .saturating_add(Weight::from_ref_time(113_706 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(3_146_000 as u64)
            // Standard Error: 380
            .saturating_add(Weight::from_ref_time(91_278 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(3_126_000 as u64)
            // Standard Error: 388
            .saturating_add(Weight::from_ref_time(94_103 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(3_096_000 as u64)
            // Standard Error: 417
            .saturating_add(Weight::from_ref_time(126_616 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_156_000 as u64)
            // Standard Error: 426
            .saturating_add(Weight::from_ref_time(460_409 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_076_000 as u64)
            // Standard Error: 473
            .saturating_add(Weight::from_ref_time(460_553 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(3_076_000 as u64)
            // Standard Error: 615
            .saturating_add(Weight::from_ref_time(835_187 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_086_000 as u64)
            // Standard Error: 467
            .saturating_add(Weight::from_ref_time(456_568 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(3_066_000 as u64)
            // Standard Error: 437
            .saturating_add(Weight::from_ref_time(94_001 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(3_137_000 as u64)
            // Standard Error: 385
            .saturating_add(Weight::from_ref_time(93_304 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(3_076_000 as u64)
            // Standard Error: 437
            .saturating_add(Weight::from_ref_time(93_703 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_126_000 as u64)
            // Standard Error: 423
            .saturating_add(Weight::from_ref_time(87_983 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_177_000 as u64)
            // Standard Error: 342
            .saturating_add(Weight::from_ref_time(86_378 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(3_227_000 as u64)
            // Standard Error: 366
            .saturating_add(Weight::from_ref_time(85_106 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_196_000 as u64)
            // Standard Error: 389
            .saturating_add(Weight::from_ref_time(85_317 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(3_097_000 as u64)
            // Standard Error: 405
            .saturating_add(Weight::from_ref_time(86_333 as u64).saturating_mul(r as u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(1_000_000 as u64)
            // Standard Error: 211
            .saturating_add(Weight::from_ref_time(140_336 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(4_000_000 as u64)
            // Standard Error: 559
            .saturating_add(Weight::from_ref_time(361_781 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(62_000_000 as u64)
            // Standard Error: 1_474
            .saturating_add(Weight::from_ref_time(1_234_747 as u64).saturating_mul(c as u64))
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(104_749_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(8 as u64))
            .saturating_add(RocksDbWeight::get().writes(6 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(76_934_000 as u64)
            // Standard Error: 25
            .saturating_add(Weight::from_ref_time(41_662 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
            .saturating_add(RocksDbWeight::get().writes(3 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(70_642_000 as u64)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(2_514 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(10_554_169_000 as u64)
            // Standard Error: 475
            .saturating_add(Weight::from_ref_time(16_389 as u64).saturating_mul(c as u64))
            // Standard Error: 29
            .saturating_add(Weight::from_ref_time(965 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(11 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(77_164_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(925 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(126_844_000 as u64)
            // Standard Error: 9
            .saturating_add(Weight::from_ref_time(1_077 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(14 as u64))
            .saturating_add(RocksDbWeight::get().writes(11 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        Weight::from_ref_time(182_936_000 as u64)
            // Standard Error: 2_372
            .saturating_add(Weight::from_ref_time(9_306 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(25 as u64))
            .saturating_add(RocksDbWeight::get().writes(23 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(290_792_000 as u64)
            // Standard Error: 766
            .saturating_add(Weight::from_ref_time(10_513 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(26 as u64))
            .saturating_add(RocksDbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument(c: u32, ) -> Weight {
        Weight::from_ref_time(32_185_000 as u64)
            // Standard Error: 29
            .saturating_add(Weight::from_ref_time(43_005 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(101_523_000 as u64)
            // Standard Error: 45_067
            .saturating_add(Weight::from_ref_time(235_608_959 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        Weight::from_ref_time(342_476_000 as u64)
            // Standard Error: 52_330
            .saturating_add(Weight::from_ref_time(223_414_269 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(120_251_000 as u64)
            // Standard Error: 340_030
            .saturating_add(Weight::from_ref_time(339_766_624 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(118_216_000 as u64)
            // Standard Error: 64_090
            .saturating_add(Weight::from_ref_time(240_474_822 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        Weight::from_ref_time(101_243_000 as u64)
            // Standard Error: 93_442
            .saturating_add(Weight::from_ref_time(229_039_972 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(101_212_000 as u64)
            // Standard Error: 95_334
            .saturating_add(Weight::from_ref_time(229_233_185 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(100_992_000 as u64)
            // Standard Error: 85_481
            .saturating_add(Weight::from_ref_time(228_907_757 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(100_541_000 as u64)
            // Standard Error: 86_698
            .saturating_add(Weight::from_ref_time(230_506_094 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(100_291_000 as u64)
            // Standard Error: 86_269
            .saturating_add(Weight::from_ref_time(229_588_300 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(100_131_000 as u64)
            // Standard Error: 93_224
            .saturating_add(Weight::from_ref_time(228_955_827 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(100_381_000 as u64)
            // Standard Error: 37_375
            .saturating_add(Weight::from_ref_time(203_974_107 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(100_781_000 as u64)
            // Standard Error: 42_127
            .saturating_add(Weight::from_ref_time(196_519_183 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(102_084_000 as u64)
            // Standard Error: 82_231
            .saturating_add(Weight::from_ref_time(238_271_015 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(338_087_000 as u64)
            // Standard Error: 5_590
            .saturating_add(Weight::from_ref_time(7_943_194 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(100_350_000 as u64)
            // Standard Error: 36_095
            .saturating_add(Weight::from_ref_time(195_570_954 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(100_982_000 as u64)
            // Standard Error: 35_778
            .saturating_add(Weight::from_ref_time(203_432_163 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_random(r: u32, ) -> Weight {
        Weight::from_ref_time(100_982_000 as u64)
            // Standard Error: 35_778
            .saturating_add(Weight::from_ref_time(203_432_163 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(101_503_000 as u64)
            // Standard Error: 72_966
            .saturating_add(Weight::from_ref_time(242_969_444 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(102_996_000 as u64)
            // Standard Error: 109_173
            .saturating_add(Weight::from_ref_time(501_662_397 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(624_099_000 as u64)
            // Standard Error: 116_168
            .saturating_add(Weight::from_ref_time(19_714_357 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(101_183_000 as u64)
            // Standard Error: 92_722
            .saturating_add(Weight::from_ref_time(340_404_440 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(471_374_000 as u64)
            // Standard Error: 5_434
            .saturating_add(Weight::from_ref_time(15_260_017 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(101_022_000 as u64)
            // Standard Error: 91_481
            .saturating_add(Weight::from_ref_time(251_002_556 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(100_731_000 as u64)
            // Standard Error: 75_936
            .saturating_add(Weight::from_ref_time(250_793_013 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(335_952_000 as u64)
            // Standard Error: 115_616
            .saturating_add(Weight::from_ref_time(19_700_260 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(100_772_000 as u64)
            // Standard Error: 93_592
            .saturating_add(Weight::from_ref_time(232_196_234 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(100_000_000 as u64)
            // Standard Error: 73_053
            .saturating_add(Weight::from_ref_time(245_355_850 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(331_253_000 as u64)
            // Standard Error: 7_469
            .saturating_add(Weight::from_ref_time(26_784_815 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_exit_code(r: u32, ) -> Weight {
        Weight::from_ref_time(100_671_000 as u64)
            // Standard Error: 86_868
            .saturating_add(Weight::from_ref_time(231_830_464 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(99_699_000 as u64)
            // Standard Error: 260_245
            .saturating_add(Weight::from_ref_time(38_833_099 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(99_379_000 as u64)
            // Standard Error: 205_564
            .saturating_add(Weight::from_ref_time(15_875_800 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(99_499_000 as u64)
            // Standard Error: 192_772
            .saturating_add(Weight::from_ref_time(16_390_900 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(100_200_000 as u64)
            // Standard Error: 274_052
            .saturating_add(Weight::from_ref_time(17_932_400 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        Weight::from_ref_time(99_890_000 as u64)
            // Standard Error: 288_353
            .saturating_add(Weight::from_ref_time(17_621_099 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(101_413_000 as u64)
            // Standard Error: 78_059
            .saturating_add(Weight::from_ref_time(258_183_022 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(117_585_000 as u64)
            // Standard Error: 110_326
            .saturating_add(Weight::from_ref_time(423_886_964 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 1024]`.
    /// The range of component `s` is `[0, 1024]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(16_169_786_000 as u64)
            // Standard Error: 160_729
            .saturating_add(Weight::from_ref_time(5_382_721 as u64).saturating_mul(p as u64))
            // Standard Error: 160_729
            .saturating_add(Weight::from_ref_time(222_803_421 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(257 as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(3_186_000 as u64)
            // Standard Error: 167
            .saturating_add(Weight::from_ref_time(5_536 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(5_381_000 as u64)
            // Standard Error: 15_551
            .saturating_add(Weight::from_ref_time(758_973 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(5_371_000 as u64)
            // Standard Error: 25_160
            .saturating_add(Weight::from_ref_time(1_301_985 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(3_277_000 as u64)
            // Standard Error: 198
            .saturating_add(Weight::from_ref_time(609_617 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_107_000 as u64)
            // Standard Error: 309
            .saturating_add(Weight::from_ref_time(623_067 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(3_117_000 as u64)
            // Standard Error: 270
            .saturating_add(Weight::from_ref_time(486_210 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_176_000 as u64)
            // Standard Error: 250
            .saturating_add(Weight::from_ref_time(528_242 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(3_226_000 as u64)
            // Standard Error: 674
            .saturating_add(Weight::from_ref_time(1_589_845 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(4_419_000 as u64)
            // Standard Error: 38
            .saturating_add(Weight::from_ref_time(8_347 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(3_277_000 as u64)
            // Standard Error: 560
            .saturating_add(Weight::from_ref_time(652_522 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(3_607_000 as u64)
            // Standard Error: 700
            .saturating_add(Weight::from_ref_time(1_498_996 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(5_421_000 as u64)
            // Standard Error: 178
            .saturating_add(Weight::from_ref_time(74_554 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(3_227_000 as u64)
            // Standard Error: 228
            .saturating_add(Weight::from_ref_time(33_092 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(3_257_000 as u64)
            // Standard Error: 318
            .saturating_add(Weight::from_ref_time(61_533 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(3_277_000 as u64)
            // Standard Error: 346
            .saturating_add(Weight::from_ref_time(59_638 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(14_750_000 as u64)
            // Standard Error: 373
            .saturating_add(Weight::from_ref_time(51_900 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(10_741_000 as u64)
            // Standard Error: 2_524
            .saturating_add(Weight::from_ref_time(188_839 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(5_311_000 as u64)
            // Standard Error: 490
            .saturating_add(Weight::from_ref_time(1_240_959 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_156_000 as u64)
            // Standard Error: 326
            .saturating_add(Weight::from_ref_time(767_840 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_117_000 as u64)
            // Standard Error: 347
            .saturating_add(Weight::from_ref_time(738_772 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(3_116_000 as u64)
            // Standard Error: 326
            .saturating_add(Weight::from_ref_time(55_360 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_176_000 as u64)
            // Standard Error: 436
            .saturating_add(Weight::from_ref_time(109_487 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_126_000 as u64)
            // Standard Error: 258
            .saturating_add(Weight::from_ref_time(39_696 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_136_000 as u64)
            // Standard Error: 204
            .saturating_add(Weight::from_ref_time(27_427 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(3_166_000 as u64)
            // Standard Error: 183
            .saturating_add(Weight::from_ref_time(27_288 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(3_066_000 as u64)
            // Standard Error: 469
            .saturating_add(Weight::from_ref_time(113_417 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(3_136_000 as u64)
            // Standard Error: 450
            .saturating_add(Weight::from_ref_time(111_798 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_076_000 as u64)
            // Standard Error: 512
            .saturating_add(Weight::from_ref_time(112_679 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_187_000 as u64)
            // Standard Error: 438
            .saturating_add(Weight::from_ref_time(107_124 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 498
            .saturating_add(Weight::from_ref_time(112_857 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_086_000 as u64)
            // Standard Error: 465
            .saturating_add(Weight::from_ref_time(110_476 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(3_166_000 as u64)
            // Standard Error: 463
            .saturating_add(Weight::from_ref_time(108_530 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_076_000 as u64)
            // Standard Error: 437
            .saturating_add(Weight::from_ref_time(112_664 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(3_217_000 as u64)
            // Standard Error: 392
            .saturating_add(Weight::from_ref_time(107_982 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 432
            .saturating_add(Weight::from_ref_time(113_706 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(3_146_000 as u64)
            // Standard Error: 380
            .saturating_add(Weight::from_ref_time(91_278 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(3_126_000 as u64)
            // Standard Error: 388
            .saturating_add(Weight::from_ref_time(94_103 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(3_096_000 as u64)
            // Standard Error: 417
            .saturating_add(Weight::from_ref_time(126_616 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_156_000 as u64)
            // Standard Error: 426
            .saturating_add(Weight::from_ref_time(460_409 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_076_000 as u64)
            // Standard Error: 473
            .saturating_add(Weight::from_ref_time(460_553 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(3_076_000 as u64)
            // Standard Error: 615
            .saturating_add(Weight::from_ref_time(835_187 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_086_000 as u64)
            // Standard Error: 467
            .saturating_add(Weight::from_ref_time(456_568 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(3_066_000 as u64)
            // Standard Error: 437
            .saturating_add(Weight::from_ref_time(94_001 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(3_137_000 as u64)
            // Standard Error: 385
            .saturating_add(Weight::from_ref_time(93_304 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(3_076_000 as u64)
            // Standard Error: 437
            .saturating_add(Weight::from_ref_time(93_703 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_126_000 as u64)
            // Standard Error: 423
            .saturating_add(Weight::from_ref_time(87_983 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_177_000 as u64)
            // Standard Error: 342
            .saturating_add(Weight::from_ref_time(86_378 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(3_227_000 as u64)
            // Standard Error: 366
            .saturating_add(Weight::from_ref_time(85_106 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_196_000 as u64)
            // Standard Error: 389
            .saturating_add(Weight::from_ref_time(85_317 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(3_097_000 as u64)
            // Standard Error: 405
            .saturating_add(Weight::from_ref_time(86_333 as u64).saturating_mul(r as u64))
    }
}
