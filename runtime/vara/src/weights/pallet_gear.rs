// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-04, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_message_with_voucher(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn send_reply_with_voucher(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 981_000 picoseconds.
        Weight::from_parts(1_019_000, 0)
            // Standard Error: 678
            .saturating_add(Weight::from_parts(248_920, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3577 + c * (1024 ±0)`
        // Minimum execution time: 3_361_000 picoseconds.
        Weight::from_parts(3_414_000, 3577)
            // Standard Error: 1_083
            .saturating_add(Weight::from_parts(686_477, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 124_933_000 picoseconds.
        Weight::from_parts(147_734_000, 0)
            // Standard Error: 206_909
            .saturating_add(Weight::from_parts(105_397_955, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1050`
        //  Estimated: `42875`
        // Minimum execution time: 85_414_000 picoseconds.
        Weight::from_parts(87_951_000, 42875)
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `958`
        //  Estimated: `21477`
        // Minimum execution time: 55_945_000 picoseconds.
        Weight::from_parts(57_250_000, 21477)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `605`
        //  Estimated: `17354`
        // Minimum execution time: 29_719_000 picoseconds.
        Weight::from_parts(30_400_000, 17354)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_299_000 picoseconds.
        Weight::from_parts(6_747_632, 7640)
            // Standard Error: 35_551
            .saturating_add(Weight::from_parts(16_150_240, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1506 + c * (16389 ±0)`
        //  Estimated: `42570 + c * (131112 ±0)`
        // Minimum execution time: 71_561_000 picoseconds.
        Weight::from_parts(72_032_000, 42570)
            // Standard Error: 604_356
            .saturating_add(Weight::from_parts(84_280_365, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `5270`
        // Minimum execution time: 64_261_000 picoseconds.
        Weight::from_parts(58_137_522, 5270)
            // Standard Error: 35_601
            .saturating_add(Weight::from_parts(52_111_407, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `809`
        //  Estimated: `40156`
        // Minimum execution time: 66_921_000 picoseconds.
        Weight::from_parts(100_626_245, 40156)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_571, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `306`
        //  Estimated: `35235`
        // Minimum execution time: 10_922_443_000 picoseconds.
        Weight::from_parts(257_113_495, 35235)
            // Standard Error: 144_319
            .saturating_add(Weight::from_parts(52_719_667, 0).saturating_mul(c.into()))
            // Standard Error: 8
            .saturating_add(Weight::from_parts(2_528, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `349`
        //  Estimated: `23860`
        // Minimum execution time: 55_944_000 picoseconds.
        Weight::from_parts(39_176_024, 23860)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(1_170, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `452`
        //  Estimated: `27184`
        // Minimum execution time: 59_868_000 picoseconds.
        Weight::from_parts(44_329_920, 27184)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(1_168, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1049`
        //  Estimated: `42866`
        // Minimum execution time: 86_553_000 picoseconds.
        Weight::from_parts(70_920_267, 42866)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_187, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1152`
        //  Estimated: `46396`
        // Minimum execution time: 97_024_000 picoseconds.
        Weight::from_parts(77_462_492, 46396)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_190, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `85981`
        // Minimum execution time: 479_481_000 picoseconds.
        Weight::from_parts(550_953_369, 85981)
            .saturating_add(T::DbWeight::get().reads(29_u64))
            .saturating_add(T::DbWeight::get().writes(23_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `85905`
        // Minimum execution time: 527_135_000 picoseconds.
        Weight::from_parts(613_663_129, 85905)
            .saturating_add(T::DbWeight::get().reads(29_u64))
            .saturating_add(T::DbWeight::get().writes(23_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 46_977_000 picoseconds.
        Weight::from_parts(47_489_000, 3899)
            // Standard Error: 30_932
            .saturating_add(Weight::from_parts(50_913_659, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 298_242_000 picoseconds.
        Weight::from_parts(332_511_344, 0)
            // Standard Error: 665_643
            .saturating_add(Weight::from_parts(422_667_865, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 708_453_000 picoseconds.
        Weight::from_parts(709_480_010, 0)
            // Standard Error: 1_556_335
            .saturating_add(Weight::from_parts(436_112_714, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 288_495_000 picoseconds.
        Weight::from_parts(348_826_443, 0)
            // Standard Error: 11_393
            .saturating_add(Weight::from_parts(5_158_474, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 387_629_000 picoseconds.
        Weight::from_parts(435_577_226, 0)
            // Standard Error: 14_617
            .saturating_add(Weight::from_parts(5_286_306, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 290_662_000 picoseconds.
        Weight::from_parts(372_495_530, 0)
            // Standard Error: 273_208
            .saturating_add(Weight::from_parts(298_471_433, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 296_475_000 picoseconds.
        Weight::from_parts(353_924_228, 0)
            // Standard Error: 196_565
            .saturating_add(Weight::from_parts(290_809_052, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 294_057_000 picoseconds.
        Weight::from_parts(358_940_649, 0)
            // Standard Error: 274_159
            .saturating_add(Weight::from_parts(287_179_196, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 271_994_000 picoseconds.
        Weight::from_parts(344_563_277, 0)
            // Standard Error: 234_458
            .saturating_add(Weight::from_parts(287_905_633, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 282_556_000 picoseconds.
        Weight::from_parts(357_585_855, 0)
            // Standard Error: 207_354
            .saturating_add(Weight::from_parts(290_114_918, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 297_120_000 picoseconds.
        Weight::from_parts(339_304_636, 0)
            // Standard Error: 238_304
            .saturating_add(Weight::from_parts(292_560_149, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 287_483_000 picoseconds.
        Weight::from_parts(339_924_665, 0)
            // Standard Error: 195_100
            .saturating_add(Weight::from_parts(292_630_150, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 276_902_000 picoseconds.
        Weight::from_parts(350_978_620, 0)
            // Standard Error: 209_659
            .saturating_add(Weight::from_parts(293_014_354, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 980_090_000 picoseconds.
        Weight::from_parts(1_111_967_904, 0)
            // Standard Error: 354_050
            .saturating_add(Weight::from_parts(381_979_306, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_289_936_000 picoseconds.
        Weight::from_parts(1_299_103_000, 0)
            // Standard Error: 47_565
            .saturating_add(Weight::from_parts(13_218_217, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 293_291_000 picoseconds.
        Weight::from_parts(347_087_446, 0)
            // Standard Error: 195_325
            .saturating_add(Weight::from_parts(292_857_556, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 296_777_000 picoseconds.
        Weight::from_parts(341_641_122, 0)
            // Standard Error: 188_278
            .saturating_add(Weight::from_parts(291_793_969, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 282_301_000 picoseconds.
        Weight::from_parts(377_293_252, 0)
            // Standard Error: 248_363
            .saturating_add(Weight::from_parts(364_216_749, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 337_370_000 picoseconds.
        Weight::from_parts(367_339_000, 0)
            // Standard Error: 4_316_888
            .saturating_add(Weight::from_parts(1_337_648_982, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 319_709_000 picoseconds.
        Weight::from_parts(413_676_151, 0)
            // Standard Error: 351_568
            .saturating_add(Weight::from_parts(532_869_928, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 843_084_000 picoseconds.
        Weight::from_parts(868_222_000, 0)
            // Standard Error: 59_983
            .saturating_add(Weight::from_parts(21_596_488, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 316_106_000 picoseconds.
        Weight::from_parts(412_894_986, 0)
            // Standard Error: 356_520
            .saturating_add(Weight::from_parts(547_781_535, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 860_086_000 picoseconds.
        Weight::from_parts(879_791_000, 0)
            // Standard Error: 52_754
            .saturating_add(Weight::from_parts(21_242_460, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 950_137_000 picoseconds.
        Weight::from_parts(1_088_251_462, 0)
            // Standard Error: 580_859
            .saturating_add(Weight::from_parts(545_760_376, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 927_888_000 picoseconds.
        Weight::from_parts(1_032_675_760, 0)
            // Standard Error: 437_719
            .saturating_add(Weight::from_parts(564_980_507, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 288_078_000 picoseconds.
        Weight::from_parts(349_971_884, 0)
            // Standard Error: 258_315
            .saturating_add(Weight::from_parts(296_125_420, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_147_773_000 picoseconds.
        Weight::from_parts(6_310_541_653, 0)
            // Standard Error: 1_138_279
            .saturating_add(Weight::from_parts(507_347_626, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_047_834_000 picoseconds.
        Weight::from_parts(1_074_358_000, 0)
            // Standard Error: 48_941
            .saturating_add(Weight::from_parts(31_183_209, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_162_467_000 picoseconds.
        Weight::from_parts(6_343_366_876, 0)
            // Standard Error: 1_077_810
            .saturating_add(Weight::from_parts(554_780_207, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_105_601_000 picoseconds.
        Weight::from_parts(6_282_271_917, 0)
            // Standard Error: 1_055_053
            .saturating_add(Weight::from_parts(590_234_350, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 448_548_000 picoseconds.
        Weight::from_parts(558_333_694, 0)
            // Standard Error: 351_831
            .saturating_add(Weight::from_parts(549_295_541, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 993_756_000 picoseconds.
        Weight::from_parts(1_024_401_000, 0)
            // Standard Error: 58_337
            .saturating_add(Weight::from_parts(21_269_663, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_271_647_000 picoseconds.
        Weight::from_parts(6_471_605_852, 0)
            // Standard Error: 1_192_450
            .saturating_add(Weight::from_parts(579_304_508, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 273_389_000 picoseconds.
        Weight::from_parts(347_878_263, 0)
            // Standard Error: 3_189_432
            .saturating_add(Weight::from_parts(42_775_836, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 329_289_000 picoseconds.
        Weight::from_parts(362_988_367, 0)
            // Standard Error: 1_214
            .saturating_add(Weight::from_parts(428_941, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 266_074_000 picoseconds.
        Weight::from_parts(342_807_328, 0)
            // Standard Error: 3_006_857
            .saturating_add(Weight::from_parts(42_771_571, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 352_945_000 picoseconds.
        Weight::from_parts(367_123_155, 0)
            // Standard Error: 1_304
            .saturating_add(Weight::from_parts(428_051, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 245_819_000 picoseconds.
        Weight::from_parts(337_727_820, 0)
            // Standard Error: 3_085_528
            .saturating_add(Weight::from_parts(35_992_679, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 264_702_000 picoseconds.
        Weight::from_parts(342_246_432, 0)
            // Standard Error: 3_289_084
            .saturating_add(Weight::from_parts(45_059_967, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 292_565_000 picoseconds.
        Weight::from_parts(373_431_610, 0)
            // Standard Error: 258_937
            .saturating_add(Weight::from_parts(393_480_853, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 356_683_000 picoseconds.
        Weight::from_parts(128_264_713, 0)
            // Standard Error: 3_703
            .saturating_add(Weight::from_parts(686_537, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 910_654_000 picoseconds.
        Weight::from_parts(1_010_479_316, 0)
            // Standard Error: 5_789_796
            .saturating_add(Weight::from_parts(73_956_083, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 932_363_000 picoseconds.
        Weight::from_parts(1_045_946_997, 0)
            // Standard Error: 7_580_758
            .saturating_add(Weight::from_parts(24_594_502, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(_r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 291_747_000 picoseconds.
        Weight::from_parts(373_052_038, 0)
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 354_452_000 picoseconds.
        Weight::from_parts(374_579_341, 0)
            // Standard Error: 1_440
            .saturating_add(Weight::from_parts(427_708, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 291_654_000 picoseconds.
        Weight::from_parts(375_112_316, 0)
            // Standard Error: 2_916_766
            .saturating_add(Weight::from_parts(11_850_883, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 342_720_000 picoseconds.
        Weight::from_parts(379_728_593, 0)
            // Standard Error: 1_436
            .saturating_add(Weight::from_parts(425_429, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 303_890_000 picoseconds.
        Weight::from_parts(354_885_426, 0)
            // Standard Error: 218_461
            .saturating_add(Weight::from_parts(289_562_419, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 282_103_000 picoseconds.
        Weight::from_parts(345_240_102, 0)
            // Standard Error: 206_821
            .saturating_add(Weight::from_parts(294_572_820, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 933_291_000 picoseconds.
        Weight::from_parts(1_047_997_538, 0)
            // Standard Error: 483_100
            .saturating_add(Weight::from_parts(319_696_211, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 995_151_000 picoseconds.
        Weight::from_parts(1_027_244_546, 0)
            // Standard Error: 1_674
            .saturating_add(Weight::from_parts(152_706, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_856_005_000 picoseconds.
        Weight::from_parts(7_110_836_378, 0)
            // Standard Error: 1_170_670
            .saturating_add(Weight::from_parts(421_158_013, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_228_105_000 picoseconds.
        Weight::from_parts(7_478_525_402, 0)
            // Standard Error: 9_898
            .saturating_add(Weight::from_parts(13_668_399, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 276_851_000 picoseconds.
        Weight::from_parts(374_476_776, 0)
            // Standard Error: 239_860
            .saturating_add(Weight::from_parts(312_565_683, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 506_755_000 picoseconds.
        Weight::from_parts(530_656_000, 0)
            // Standard Error: 47_170
            .saturating_add(Weight::from_parts(25_585_566, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 289_265_000 picoseconds.
        Weight::from_parts(351_216_658, 0)
            // Standard Error: 235_766
            .saturating_add(Weight::from_parts(286_451_158, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 252_607_000 picoseconds.
        Weight::from_parts(335_526_844, 0)
            // Standard Error: 3_020_425
            .saturating_add(Weight::from_parts(41_057_955, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 266_133_000 picoseconds.
        Weight::from_parts(333_069_853, 0)
            // Standard Error: 2_895_423
            .saturating_add(Weight::from_parts(14_231_646, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 269_124_000 picoseconds.
        Weight::from_parts(330_302_920, 0)
            // Standard Error: 3_045_642
            .saturating_add(Weight::from_parts(26_673_979, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 251_695_000 picoseconds.
        Weight::from_parts(333_323_691, 0)
            // Standard Error: 3_056_559
            .saturating_add(Weight::from_parts(28_794_608, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 244_059_000 picoseconds.
        Weight::from_parts(333_917_044, 0)
            // Standard Error: 2_941_496
            .saturating_add(Weight::from_parts(31_074_355, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 352_625_000 picoseconds.
        Weight::from_parts(430_021_580, 0)
            // Standard Error: 328_912
            .saturating_add(Weight::from_parts(416_595_308, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 327_289_000 picoseconds.
        Weight::from_parts(405_952_709, 0)
            // Standard Error: 362_969
            .saturating_add(Weight::from_parts(631_891_086, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_884_766_000 picoseconds.
        Weight::from_parts(44_417_250_000, 0)
            // Standard Error: 263_255
            .saturating_add(Weight::from_parts(7_929_228, 0).saturating_mul(p.into()))
            // Standard Error: 263_242
            .saturating_add(Weight::from_parts(176_930_882, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 331_159_000 picoseconds.
        Weight::from_parts(399_844_931, 0)
            // Standard Error: 425_613
            .saturating_add(Weight::from_parts(648_173_896, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_856_598_000 picoseconds.
        Weight::from_parts(44_188_223_000, 0)
            // Standard Error: 255_370
            .saturating_add(Weight::from_parts(8_018_562, 0).saturating_mul(p.into()))
            // Standard Error: 255_357
            .saturating_add(Weight::from_parts(176_933_522, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 282_396_000 picoseconds.
        Weight::from_parts(368_681_156, 0)
            // Standard Error: 104_909
            .saturating_add(Weight::from_parts(4_410_892, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 296_814_000 picoseconds.
        Weight::from_parts(318_850_898, 1131)
            // Standard Error: 10_648
            .saturating_add(Weight::from_parts(15_626_701, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 289_815_000 picoseconds.
        Weight::from_parts(51_937_528, 1131)
            // Standard Error: 55_199
            .saturating_add(Weight::from_parts(42_571_434, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_241_884_000 picoseconds.
        Weight::from_parts(8_063_674_263, 5069931)
            // Standard Error: 58_512
            .saturating_add(Weight::from_parts(43_059_612, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 292_518_000 picoseconds.
        Weight::from_parts(323_670_000, 1939)
            // Standard Error: 34_487
            .saturating_add(Weight::from_parts(51_590_942, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 305_296_000 picoseconds.
        Weight::from_parts(368_605_597, 1131)
            // Standard Error: 85_662
            .saturating_add(Weight::from_parts(37_191_847, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 1_047_440_000 picoseconds.
        Weight::from_parts(1_090_889_846, 1496)
            // Standard Error: 235_084
            .saturating_add(Weight::from_parts(46_952_352, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_444_893_000 picoseconds.
        Weight::from_parts(1_546_925_605, 317931)
            // Standard Error: 187_295
            .saturating_add(Weight::from_parts(47_285_680, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_364_224_000 picoseconds.
        Weight::from_parts(4_390_592_801, 0)
            // Standard Error: 10_831
            .saturating_add(Weight::from_parts(3_287_810, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_373_905_000 picoseconds.
        Weight::from_parts(4_385_185_205, 0)
            // Standard Error: 10_571
            .saturating_add(Weight::from_parts(3_325_487, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_807_346_000 picoseconds.
        Weight::from_parts(10_853_194_226, 0)
            // Standard Error: 189_994
            .saturating_add(Weight::from_parts(18_082_741, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_371_153_000 picoseconds.
        Weight::from_parts(11_200_190_029, 0)
            // Standard Error: 177_498
            .saturating_add(Weight::from_parts(12_636_685, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_084_000 picoseconds.
        Weight::from_parts(3_247_000, 0)
            // Standard Error: 8_214
            .saturating_add(Weight::from_parts(3_671_846, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_909_000 picoseconds.
        Weight::from_parts(1_112_864, 0)
            // Standard Error: 9_008
            .saturating_add(Weight::from_parts(3_057_386, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_035_000 picoseconds.
        Weight::from_parts(3_348_671, 0)
            // Standard Error: 2_712
            .saturating_add(Weight::from_parts(1_564_374, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_125_000 picoseconds.
        Weight::from_parts(3_602_000, 0)
            // Standard Error: 8_550
            .saturating_add(Weight::from_parts(2_833_295, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_084_000 picoseconds.
        Weight::from_parts(8_904_786, 0)
            // Standard Error: 22_696
            .saturating_add(Weight::from_parts(4_572_931, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_489_000 picoseconds.
        Weight::from_parts(5_490_749, 0)
            // Standard Error: 1_269
            .saturating_add(Weight::from_parts(172_252, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_270_000 picoseconds.
        Weight::from_parts(5_646_605, 0)
            // Standard Error: 9_042
            .saturating_add(Weight::from_parts(2_578_296, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_578_296 -
            2_413_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_096_000 picoseconds.
        Weight::from_parts(5_402_380, 0)
            // Standard Error: 13_258
            .saturating_add(Weight::from_parts(2_413_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_628_000 picoseconds.
        Weight::from_parts(29_037_788, 0)
            // Standard Error: 41_898
            .saturating_add(Weight::from_parts(8_832_655, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 14_077_000 picoseconds.
        Weight::from_parts(6_489_205, 0)
            // Standard Error: 6_927
            .saturating_add(Weight::from_parts(1_144_947, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_091_000 picoseconds.
        Weight::from_parts(6_712_503, 0)
            // Standard Error: 41
            .saturating_add(Weight::from_parts(71, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_929_000 picoseconds.
        Weight::from_parts(2_177_166, 0)
            // Standard Error: 3_151
            .saturating_add(Weight::from_parts(278_198, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_850_000 picoseconds.
        Weight::from_parts(2_919_000, 0)
            // Standard Error: 5_623
            .saturating_add(Weight::from_parts(774_990, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_206_000 picoseconds.
        Weight::from_parts(3_364_000, 0)
            // Standard Error: 4_199
            .saturating_add(Weight::from_parts(727_116, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_327_000 picoseconds.
        Weight::from_parts(3_872_851, 0)
            // Standard Error: 6_573
            .saturating_add(Weight::from_parts(787_199, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_380_000 picoseconds.
        Weight::from_parts(1_304_200, 0)
            // Standard Error: 10_826
            .saturating_add(Weight::from_parts(1_454_860, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_192_000 picoseconds.
        Weight::from_parts(2_100_983, 0)
            // Standard Error: 9_962
            .saturating_add(Weight::from_parts(7_144_897, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_147_000 picoseconds.
        Weight::from_parts(3_718_000, 0)
            // Standard Error: 6_770
            .saturating_add(Weight::from_parts(3_259_581, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_053_000 picoseconds.
        Weight::from_parts(3_624_000, 0)
            // Standard Error: 6_642
            .saturating_add(Weight::from_parts(3_031_233, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_020_000 picoseconds.
        Weight::from_parts(3_136_000, 0)
            // Standard Error: 6_323
            .saturating_add(Weight::from_parts(3_051_269, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_889_000 picoseconds.
        Weight::from_parts(3_032_000, 0)
            // Standard Error: 5_561
            .saturating_add(Weight::from_parts(2_593_252, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_328_000 picoseconds.
        Weight::from_parts(474_446, 0)
            // Standard Error: 5_335
            .saturating_add(Weight::from_parts(655_402, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_899_000 picoseconds.
        Weight::from_parts(1_288_115, 0)
            // Standard Error: 4_781
            .saturating_add(Weight::from_parts(470_267, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_946_000 picoseconds.
        Weight::from_parts(3_125_000, 0)
            // Standard Error: 10_784
            .saturating_add(Weight::from_parts(1_895_747, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_243_000 picoseconds.
        Weight::from_parts(3_819_000, 0)
            // Standard Error: 7_147
            .saturating_add(Weight::from_parts(1_094_603, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_004_000 picoseconds.
        Weight::from_parts(1_660_071, 0)
            // Standard Error: 3_524
            .saturating_add(Weight::from_parts(404_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_085_000 picoseconds.
        Weight::from_parts(1_786_414, 0)
            // Standard Error: 3_520
            .saturating_add(Weight::from_parts(417_147, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_837_000 picoseconds.
        Weight::from_parts(134_990, 0)
            // Standard Error: 6_265
            .saturating_add(Weight::from_parts(620_317, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_926_000 picoseconds.
        Weight::from_parts(1_079_141, 0)
            // Standard Error: 5_024
            .saturating_add(Weight::from_parts(594_927, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_094_000 picoseconds.
        Weight::from_parts(1_054_715, 0)
            // Standard Error: 4_546
            .saturating_add(Weight::from_parts(544_660, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_114_000 picoseconds.
        Weight::from_parts(1_886_194, 0)
            // Standard Error: 4_275
            .saturating_add(Weight::from_parts(382_008, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_234_000 picoseconds.
        Weight::from_parts(3_117_074, 0)
            // Standard Error: 2_821
            .saturating_add(Weight::from_parts(174_510, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_072_000 picoseconds.
        Weight::from_parts(3_138_562, 0)
            // Standard Error: 1_967
            .saturating_add(Weight::from_parts(177_798, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_262_000 picoseconds.
        Weight::from_parts(3_669_000, 0)
            // Standard Error: 11_290
            .saturating_add(Weight::from_parts(1_830_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_056_000 picoseconds.
        Weight::from_parts(3_208_000, 0)
            // Standard Error: 8_527
            .saturating_add(Weight::from_parts(1_186_257, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_969_000 picoseconds.
        Weight::from_parts(3_046_000, 0)
            // Standard Error: 10_360
            .saturating_add(Weight::from_parts(1_808_119, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_169_000 picoseconds.
        Weight::from_parts(3_642_000, 0)
            // Standard Error: 8_708
            .saturating_add(Weight::from_parts(1_195_741, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_857_000 picoseconds.
        Weight::from_parts(3_097_000, 0)
            // Standard Error: 9_909
            .saturating_add(Weight::from_parts(1_845_115, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_920_000 picoseconds.
        Weight::from_parts(3_400_000, 0)
            // Standard Error: 7_629
            .saturating_add(Weight::from_parts(1_154_565, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_000_000 picoseconds.
        Weight::from_parts(3_531_000, 0)
            // Standard Error: 9_902
            .saturating_add(Weight::from_parts(1_781_046, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_141_000 picoseconds.
        Weight::from_parts(3_889_000, 0)
            // Standard Error: 7_765
            .saturating_add(Weight::from_parts(1_146_840, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_109_000 picoseconds.
        Weight::from_parts(3_345_000, 0)
            // Standard Error: 11_574
            .saturating_add(Weight::from_parts(1_891_441, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_036_000 picoseconds.
        Weight::from_parts(3_331_000, 0)
            // Standard Error: 7_499
            .saturating_add(Weight::from_parts(1_173_884, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_916_000 picoseconds.
        Weight::from_parts(3_243_000, 0)
            // Standard Error: 11_382
            .saturating_add(Weight::from_parts(1_867_339, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_903_000 picoseconds.
        Weight::from_parts(3_166_000, 0)
            // Standard Error: 8_909
            .saturating_add(Weight::from_parts(1_293_121, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_807_000 picoseconds.
        Weight::from_parts(3_107_000, 0)
            // Standard Error: 9_949
            .saturating_add(Weight::from_parts(1_899_903, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_175_000 picoseconds.
        Weight::from_parts(3_401_000, 0)
            // Standard Error: 7_370
            .saturating_add(Weight::from_parts(1_272_776, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_077_000 picoseconds.
        Weight::from_parts(3_247_000, 0)
            // Standard Error: 8_562
            .saturating_add(Weight::from_parts(1_912_138, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_078_000 picoseconds.
        Weight::from_parts(3_495_000, 0)
            // Standard Error: 7_375
            .saturating_add(Weight::from_parts(1_234_626, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_970_000 picoseconds.
        Weight::from_parts(3_042_000, 0)
            // Standard Error: 9_953
            .saturating_add(Weight::from_parts(1_961_642, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_109_000 picoseconds.
        Weight::from_parts(3_573_000, 0)
            // Standard Error: 7_624
            .saturating_add(Weight::from_parts(1_115_756, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_058_000 picoseconds.
        Weight::from_parts(3_567_000, 0)
            // Standard Error: 12_631
            .saturating_add(Weight::from_parts(1_887_903, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_043_000 picoseconds.
        Weight::from_parts(3_187_000, 0)
            // Standard Error: 9_373
            .saturating_add(Weight::from_parts(1_211_061, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_030_000 picoseconds.
        Weight::from_parts(3_103_000, 0)
            // Standard Error: 7_758
            .saturating_add(Weight::from_parts(1_265_336, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_132_000 picoseconds.
        Weight::from_parts(3_513_000, 0)
            // Standard Error: 5_030
            .saturating_add(Weight::from_parts(645_058, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_112_000 picoseconds.
        Weight::from_parts(3_289_000, 0)
            // Standard Error: 7_585
            .saturating_add(Weight::from_parts(1_274_040, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_975_000 picoseconds.
        Weight::from_parts(3_394_000, 0)
            // Standard Error: 4_414
            .saturating_add(Weight::from_parts(641_620, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_996_000 picoseconds.
        Weight::from_parts(3_099_000, 0)
            // Standard Error: 9_877
            .saturating_add(Weight::from_parts(1_796_925, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_938_000 picoseconds.
        Weight::from_parts(3_189_000, 0)
            // Standard Error: 8_950
            .saturating_add(Weight::from_parts(1_223_275, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_015_000 picoseconds.
        Weight::from_parts(9_920_759, 0)
            // Standard Error: 15_919
            .saturating_add(Weight::from_parts(1_860_662, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_938_000 picoseconds.
        Weight::from_parts(6_435_426, 0)
            // Standard Error: 11_785
            .saturating_add(Weight::from_parts(1_872_412, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_119_000 picoseconds.
        Weight::from_parts(9_068_094, 0)
            // Standard Error: 16_002
            .saturating_add(Weight::from_parts(2_092_349, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_056_000 picoseconds.
        Weight::from_parts(6_472_301, 0)
            // Standard Error: 15_950
            .saturating_add(Weight::from_parts(1_873_202, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_030_000 picoseconds.
        Weight::from_parts(15_179_397, 0)
            // Standard Error: 39_556
            .saturating_add(Weight::from_parts(7_678_199, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_324_000 picoseconds.
        Weight::from_parts(7_795_346, 0)
            // Standard Error: 51_522
            .saturating_add(Weight::from_parts(6_441_353, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_040_000 picoseconds.
        Weight::from_parts(10_372_665, 0)
            // Standard Error: 20_055
            .saturating_add(Weight::from_parts(2_094_565, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_186_000 picoseconds.
        Weight::from_parts(6_917_478, 0)
            // Standard Error: 14_131
            .saturating_add(Weight::from_parts(1_888_114, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_065_000 picoseconds.
        Weight::from_parts(3_304_000, 0)
            // Standard Error: 8_168
            .saturating_add(Weight::from_parts(1_265_690, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_220_000 picoseconds.
        Weight::from_parts(3_362_000, 0)
            // Standard Error: 6_060
            .saturating_add(Weight::from_parts(714_440, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_869_000 picoseconds.
        Weight::from_parts(3_144_000, 0)
            // Standard Error: 8_045
            .saturating_add(Weight::from_parts(1_321_737, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_141_000 picoseconds.
        Weight::from_parts(262_738, 0)
            // Standard Error: 6_722
            .saturating_add(Weight::from_parts(751_731, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_058_000 picoseconds.
        Weight::from_parts(3_467_000, 0)
            // Standard Error: 5_948
            .saturating_add(Weight::from_parts(1_292_655, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_221_000 picoseconds.
        Weight::from_parts(18_004, 0)
            // Standard Error: 6_176
            .saturating_add(Weight::from_parts(747_208, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_133_000 picoseconds.
        Weight::from_parts(3_430_000, 0)
            // Standard Error: 6_251
            .saturating_add(Weight::from_parts(1_111_241, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_795_000 picoseconds.
        Weight::from_parts(2_913_000, 0)
            // Standard Error: 4_079
            .saturating_add(Weight::from_parts(611_431, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_009_000 picoseconds.
        Weight::from_parts(3_351_000, 0)
            // Standard Error: 7_965
            .saturating_add(Weight::from_parts(1_168_303, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_991_000 picoseconds.
        Weight::from_parts(249_650, 0)
            // Standard Error: 6_245
            .saturating_add(Weight::from_parts(688_429, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_944_000 picoseconds.
        Weight::from_parts(3_519_000, 0)
            // Standard Error: 5_945
            .saturating_add(Weight::from_parts(1_043_574, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_948_000 picoseconds.
        Weight::from_parts(275_569, 0)
            // Standard Error: 5_343
            .saturating_add(Weight::from_parts(647_852, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_021_000 picoseconds.
        Weight::from_parts(3_094_000, 0)
            // Standard Error: 7_563
            .saturating_add(Weight::from_parts(1_070_370, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_004_000 picoseconds.
        Weight::from_parts(192_522, 0)
            // Standard Error: 5_153
            .saturating_add(Weight::from_parts(681_342, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_911_000 picoseconds.
        Weight::from_parts(2_975_000, 0)
            // Standard Error: 5_682
            .saturating_add(Weight::from_parts(1_052_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_028_000 picoseconds.
        Weight::from_parts(772_727, 0)
            // Standard Error: 5_064
            .saturating_add(Weight::from_parts(676_727, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 981_000 picoseconds.
        Weight::from_parts(1_019_000, 0)
            // Standard Error: 678
            .saturating_add(Weight::from_parts(248_920, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3577 + c * (1024 ±0)`
        // Minimum execution time: 3_361_000 picoseconds.
        Weight::from_parts(3_414_000, 3577)
            // Standard Error: 1_083
            .saturating_add(Weight::from_parts(686_477, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 124_933_000 picoseconds.
        Weight::from_parts(147_734_000, 0)
            // Standard Error: 206_909
            .saturating_add(Weight::from_parts(105_397_955, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1050`
        //  Estimated: `42875`
        // Minimum execution time: 85_414_000 picoseconds.
        Weight::from_parts(87_951_000, 42875)
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `958`
        //  Estimated: `21477`
        // Minimum execution time: 55_945_000 picoseconds.
        Weight::from_parts(57_250_000, 21477)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `605`
        //  Estimated: `17354`
        // Minimum execution time: 29_719_000 picoseconds.
        Weight::from_parts(30_400_000, 17354)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_299_000 picoseconds.
        Weight::from_parts(6_747_632, 7640)
            // Standard Error: 35_551
            .saturating_add(Weight::from_parts(16_150_240, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1506 + c * (16389 ±0)`
        //  Estimated: `42570 + c * (131112 ±0)`
        // Minimum execution time: 71_561_000 picoseconds.
        Weight::from_parts(72_032_000, 42570)
            // Standard Error: 604_356
            .saturating_add(Weight::from_parts(84_280_365, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `5270`
        // Minimum execution time: 64_261_000 picoseconds.
        Weight::from_parts(58_137_522, 5270)
            // Standard Error: 35_601
            .saturating_add(Weight::from_parts(52_111_407, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `809`
        //  Estimated: `40156`
        // Minimum execution time: 66_921_000 picoseconds.
        Weight::from_parts(100_626_245, 40156)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_571, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `306`
        //  Estimated: `35235`
        // Minimum execution time: 10_922_443_000 picoseconds.
        Weight::from_parts(257_113_495, 35235)
            // Standard Error: 144_319
            .saturating_add(Weight::from_parts(52_719_667, 0).saturating_mul(c.into()))
            // Standard Error: 8
            .saturating_add(Weight::from_parts(2_528, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `349`
        //  Estimated: `23860`
        // Minimum execution time: 55_944_000 picoseconds.
        Weight::from_parts(39_176_024, 23860)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(1_170, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `452`
        //  Estimated: `27184`
        // Minimum execution time: 59_868_000 picoseconds.
        Weight::from_parts(44_329_920, 27184)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(1_168, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1049`
        //  Estimated: `42866`
        // Minimum execution time: 86_553_000 picoseconds.
        Weight::from_parts(70_920_267, 42866)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_187, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1152`
        //  Estimated: `46396`
        // Minimum execution time: 97_024_000 picoseconds.
        Weight::from_parts(77_462_492, 46396)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_190, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `85981`
        // Minimum execution time: 479_481_000 picoseconds.
        Weight::from_parts(550_953_369, 85981)
            .saturating_add(RocksDbWeight::get().reads(29_u64))
            .saturating_add(RocksDbWeight::get().writes(23_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `85905`
        // Minimum execution time: 527_135_000 picoseconds.
        Weight::from_parts(613_663_129, 85905)
            .saturating_add(RocksDbWeight::get().reads(29_u64))
            .saturating_add(RocksDbWeight::get().writes(23_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 46_977_000 picoseconds.
        Weight::from_parts(47_489_000, 3899)
            // Standard Error: 30_932
            .saturating_add(Weight::from_parts(50_913_659, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 298_242_000 picoseconds.
        Weight::from_parts(332_511_344, 0)
            // Standard Error: 665_643
            .saturating_add(Weight::from_parts(422_667_865, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 708_453_000 picoseconds.
        Weight::from_parts(709_480_010, 0)
            // Standard Error: 1_556_335
            .saturating_add(Weight::from_parts(436_112_714, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 288_495_000 picoseconds.
        Weight::from_parts(348_826_443, 0)
            // Standard Error: 11_393
            .saturating_add(Weight::from_parts(5_158_474, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 387_629_000 picoseconds.
        Weight::from_parts(435_577_226, 0)
            // Standard Error: 14_617
            .saturating_add(Weight::from_parts(5_286_306, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 290_662_000 picoseconds.
        Weight::from_parts(372_495_530, 0)
            // Standard Error: 273_208
            .saturating_add(Weight::from_parts(298_471_433, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 296_475_000 picoseconds.
        Weight::from_parts(353_924_228, 0)
            // Standard Error: 196_565
            .saturating_add(Weight::from_parts(290_809_052, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 294_057_000 picoseconds.
        Weight::from_parts(358_940_649, 0)
            // Standard Error: 274_159
            .saturating_add(Weight::from_parts(287_179_196, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 271_994_000 picoseconds.
        Weight::from_parts(344_563_277, 0)
            // Standard Error: 234_458
            .saturating_add(Weight::from_parts(287_905_633, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 282_556_000 picoseconds.
        Weight::from_parts(357_585_855, 0)
            // Standard Error: 207_354
            .saturating_add(Weight::from_parts(290_114_918, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 297_120_000 picoseconds.
        Weight::from_parts(339_304_636, 0)
            // Standard Error: 238_304
            .saturating_add(Weight::from_parts(292_560_149, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 287_483_000 picoseconds.
        Weight::from_parts(339_924_665, 0)
            // Standard Error: 195_100
            .saturating_add(Weight::from_parts(292_630_150, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 276_902_000 picoseconds.
        Weight::from_parts(350_978_620, 0)
            // Standard Error: 209_659
            .saturating_add(Weight::from_parts(293_014_354, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 980_090_000 picoseconds.
        Weight::from_parts(1_111_967_904, 0)
            // Standard Error: 354_050
            .saturating_add(Weight::from_parts(381_979_306, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_289_936_000 picoseconds.
        Weight::from_parts(1_299_103_000, 0)
            // Standard Error: 47_565
            .saturating_add(Weight::from_parts(13_218_217, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 293_291_000 picoseconds.
        Weight::from_parts(347_087_446, 0)
            // Standard Error: 195_325
            .saturating_add(Weight::from_parts(292_857_556, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 296_777_000 picoseconds.
        Weight::from_parts(341_641_122, 0)
            // Standard Error: 188_278
            .saturating_add(Weight::from_parts(291_793_969, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 282_301_000 picoseconds.
        Weight::from_parts(377_293_252, 0)
            // Standard Error: 248_363
            .saturating_add(Weight::from_parts(364_216_749, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 337_370_000 picoseconds.
        Weight::from_parts(367_339_000, 0)
            // Standard Error: 4_316_888
            .saturating_add(Weight::from_parts(1_337_648_982, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 319_709_000 picoseconds.
        Weight::from_parts(413_676_151, 0)
            // Standard Error: 351_568
            .saturating_add(Weight::from_parts(532_869_928, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 843_084_000 picoseconds.
        Weight::from_parts(868_222_000, 0)
            // Standard Error: 59_983
            .saturating_add(Weight::from_parts(21_596_488, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 316_106_000 picoseconds.
        Weight::from_parts(412_894_986, 0)
            // Standard Error: 356_520
            .saturating_add(Weight::from_parts(547_781_535, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 860_086_000 picoseconds.
        Weight::from_parts(879_791_000, 0)
            // Standard Error: 52_754
            .saturating_add(Weight::from_parts(21_242_460, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 950_137_000 picoseconds.
        Weight::from_parts(1_088_251_462, 0)
            // Standard Error: 580_859
            .saturating_add(Weight::from_parts(545_760_376, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 927_888_000 picoseconds.
        Weight::from_parts(1_032_675_760, 0)
            // Standard Error: 437_719
            .saturating_add(Weight::from_parts(564_980_507, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 288_078_000 picoseconds.
        Weight::from_parts(349_971_884, 0)
            // Standard Error: 258_315
            .saturating_add(Weight::from_parts(296_125_420, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_147_773_000 picoseconds.
        Weight::from_parts(6_310_541_653, 0)
            // Standard Error: 1_138_279
            .saturating_add(Weight::from_parts(507_347_626, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_047_834_000 picoseconds.
        Weight::from_parts(1_074_358_000, 0)
            // Standard Error: 48_941
            .saturating_add(Weight::from_parts(31_183_209, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_162_467_000 picoseconds.
        Weight::from_parts(6_343_366_876, 0)
            // Standard Error: 1_077_810
            .saturating_add(Weight::from_parts(554_780_207, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_105_601_000 picoseconds.
        Weight::from_parts(6_282_271_917, 0)
            // Standard Error: 1_055_053
            .saturating_add(Weight::from_parts(590_234_350, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 448_548_000 picoseconds.
        Weight::from_parts(558_333_694, 0)
            // Standard Error: 351_831
            .saturating_add(Weight::from_parts(549_295_541, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 993_756_000 picoseconds.
        Weight::from_parts(1_024_401_000, 0)
            // Standard Error: 58_337
            .saturating_add(Weight::from_parts(21_269_663, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_271_647_000 picoseconds.
        Weight::from_parts(6_471_605_852, 0)
            // Standard Error: 1_192_450
            .saturating_add(Weight::from_parts(579_304_508, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 273_389_000 picoseconds.
        Weight::from_parts(347_878_263, 0)
            // Standard Error: 3_189_432
            .saturating_add(Weight::from_parts(42_775_836, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 329_289_000 picoseconds.
        Weight::from_parts(362_988_367, 0)
            // Standard Error: 1_214
            .saturating_add(Weight::from_parts(428_941, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 266_074_000 picoseconds.
        Weight::from_parts(342_807_328, 0)
            // Standard Error: 3_006_857
            .saturating_add(Weight::from_parts(42_771_571, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 352_945_000 picoseconds.
        Weight::from_parts(367_123_155, 0)
            // Standard Error: 1_304
            .saturating_add(Weight::from_parts(428_051, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 245_819_000 picoseconds.
        Weight::from_parts(337_727_820, 0)
            // Standard Error: 3_085_528
            .saturating_add(Weight::from_parts(35_992_679, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 264_702_000 picoseconds.
        Weight::from_parts(342_246_432, 0)
            // Standard Error: 3_289_084
            .saturating_add(Weight::from_parts(45_059_967, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 292_565_000 picoseconds.
        Weight::from_parts(373_431_610, 0)
            // Standard Error: 258_937
            .saturating_add(Weight::from_parts(393_480_853, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 356_683_000 picoseconds.
        Weight::from_parts(128_264_713, 0)
            // Standard Error: 3_703
            .saturating_add(Weight::from_parts(686_537, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 910_654_000 picoseconds.
        Weight::from_parts(1_010_479_316, 0)
            // Standard Error: 5_789_796
            .saturating_add(Weight::from_parts(73_956_083, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 932_363_000 picoseconds.
        Weight::from_parts(1_045_946_997, 0)
            // Standard Error: 7_580_758
            .saturating_add(Weight::from_parts(24_594_502, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(_r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 291_747_000 picoseconds.
        Weight::from_parts(373_052_038, 0)
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 354_452_000 picoseconds.
        Weight::from_parts(374_579_341, 0)
            // Standard Error: 1_440
            .saturating_add(Weight::from_parts(427_708, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 291_654_000 picoseconds.
        Weight::from_parts(375_112_316, 0)
            // Standard Error: 2_916_766
            .saturating_add(Weight::from_parts(11_850_883, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 342_720_000 picoseconds.
        Weight::from_parts(379_728_593, 0)
            // Standard Error: 1_436
            .saturating_add(Weight::from_parts(425_429, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 303_890_000 picoseconds.
        Weight::from_parts(354_885_426, 0)
            // Standard Error: 218_461
            .saturating_add(Weight::from_parts(289_562_419, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 282_103_000 picoseconds.
        Weight::from_parts(345_240_102, 0)
            // Standard Error: 206_821
            .saturating_add(Weight::from_parts(294_572_820, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 933_291_000 picoseconds.
        Weight::from_parts(1_047_997_538, 0)
            // Standard Error: 483_100
            .saturating_add(Weight::from_parts(319_696_211, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 995_151_000 picoseconds.
        Weight::from_parts(1_027_244_546, 0)
            // Standard Error: 1_674
            .saturating_add(Weight::from_parts(152_706, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_856_005_000 picoseconds.
        Weight::from_parts(7_110_836_378, 0)
            // Standard Error: 1_170_670
            .saturating_add(Weight::from_parts(421_158_013, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_228_105_000 picoseconds.
        Weight::from_parts(7_478_525_402, 0)
            // Standard Error: 9_898
            .saturating_add(Weight::from_parts(13_668_399, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 276_851_000 picoseconds.
        Weight::from_parts(374_476_776, 0)
            // Standard Error: 239_860
            .saturating_add(Weight::from_parts(312_565_683, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 506_755_000 picoseconds.
        Weight::from_parts(530_656_000, 0)
            // Standard Error: 47_170
            .saturating_add(Weight::from_parts(25_585_566, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 289_265_000 picoseconds.
        Weight::from_parts(351_216_658, 0)
            // Standard Error: 235_766
            .saturating_add(Weight::from_parts(286_451_158, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 252_607_000 picoseconds.
        Weight::from_parts(335_526_844, 0)
            // Standard Error: 3_020_425
            .saturating_add(Weight::from_parts(41_057_955, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 266_133_000 picoseconds.
        Weight::from_parts(333_069_853, 0)
            // Standard Error: 2_895_423
            .saturating_add(Weight::from_parts(14_231_646, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 269_124_000 picoseconds.
        Weight::from_parts(330_302_920, 0)
            // Standard Error: 3_045_642
            .saturating_add(Weight::from_parts(26_673_979, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 251_695_000 picoseconds.
        Weight::from_parts(333_323_691, 0)
            // Standard Error: 3_056_559
            .saturating_add(Weight::from_parts(28_794_608, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 244_059_000 picoseconds.
        Weight::from_parts(333_917_044, 0)
            // Standard Error: 2_941_496
            .saturating_add(Weight::from_parts(31_074_355, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 352_625_000 picoseconds.
        Weight::from_parts(430_021_580, 0)
            // Standard Error: 328_912
            .saturating_add(Weight::from_parts(416_595_308, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 327_289_000 picoseconds.
        Weight::from_parts(405_952_709, 0)
            // Standard Error: 362_969
            .saturating_add(Weight::from_parts(631_891_086, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_884_766_000 picoseconds.
        Weight::from_parts(44_417_250_000, 0)
            // Standard Error: 263_255
            .saturating_add(Weight::from_parts(7_929_228, 0).saturating_mul(p.into()))
            // Standard Error: 263_242
            .saturating_add(Weight::from_parts(176_930_882, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 331_159_000 picoseconds.
        Weight::from_parts(399_844_931, 0)
            // Standard Error: 425_613
            .saturating_add(Weight::from_parts(648_173_896, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_856_598_000 picoseconds.
        Weight::from_parts(44_188_223_000, 0)
            // Standard Error: 255_370
            .saturating_add(Weight::from_parts(8_018_562, 0).saturating_mul(p.into()))
            // Standard Error: 255_357
            .saturating_add(Weight::from_parts(176_933_522, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 282_396_000 picoseconds.
        Weight::from_parts(368_681_156, 0)
            // Standard Error: 104_909
            .saturating_add(Weight::from_parts(4_410_892, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 296_814_000 picoseconds.
        Weight::from_parts(318_850_898, 1131)
            // Standard Error: 10_648
            .saturating_add(Weight::from_parts(15_626_701, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 289_815_000 picoseconds.
        Weight::from_parts(51_937_528, 1131)
            // Standard Error: 55_199
            .saturating_add(Weight::from_parts(42_571_434, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_241_884_000 picoseconds.
        Weight::from_parts(8_063_674_263, 5069931)
            // Standard Error: 58_512
            .saturating_add(Weight::from_parts(43_059_612, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 292_518_000 picoseconds.
        Weight::from_parts(323_670_000, 1939)
            // Standard Error: 34_487
            .saturating_add(Weight::from_parts(51_590_942, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 305_296_000 picoseconds.
        Weight::from_parts(368_605_597, 1131)
            // Standard Error: 85_662
            .saturating_add(Weight::from_parts(37_191_847, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 1_047_440_000 picoseconds.
        Weight::from_parts(1_090_889_846, 1496)
            // Standard Error: 235_084
            .saturating_add(Weight::from_parts(46_952_352, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_444_893_000 picoseconds.
        Weight::from_parts(1_546_925_605, 317931)
            // Standard Error: 187_295
            .saturating_add(Weight::from_parts(47_285_680, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_364_224_000 picoseconds.
        Weight::from_parts(4_390_592_801, 0)
            // Standard Error: 10_831
            .saturating_add(Weight::from_parts(3_287_810, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_373_905_000 picoseconds.
        Weight::from_parts(4_385_185_205, 0)
            // Standard Error: 10_571
            .saturating_add(Weight::from_parts(3_325_487, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_807_346_000 picoseconds.
        Weight::from_parts(10_853_194_226, 0)
            // Standard Error: 189_994
            .saturating_add(Weight::from_parts(18_082_741, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_371_153_000 picoseconds.
        Weight::from_parts(11_200_190_029, 0)
            // Standard Error: 177_498
            .saturating_add(Weight::from_parts(12_636_685, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_084_000 picoseconds.
        Weight::from_parts(3_247_000, 0)
            // Standard Error: 8_214
            .saturating_add(Weight::from_parts(3_671_846, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_909_000 picoseconds.
        Weight::from_parts(1_112_864, 0)
            // Standard Error: 9_008
            .saturating_add(Weight::from_parts(3_057_386, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_035_000 picoseconds.
        Weight::from_parts(3_348_671, 0)
            // Standard Error: 2_712
            .saturating_add(Weight::from_parts(1_564_374, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_125_000 picoseconds.
        Weight::from_parts(3_602_000, 0)
            // Standard Error: 8_550
            .saturating_add(Weight::from_parts(2_833_295, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_084_000 picoseconds.
        Weight::from_parts(8_904_786, 0)
            // Standard Error: 22_696
            .saturating_add(Weight::from_parts(4_572_931, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_489_000 picoseconds.
        Weight::from_parts(5_490_749, 0)
            // Standard Error: 1_269
            .saturating_add(Weight::from_parts(172_252, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_270_000 picoseconds.
        Weight::from_parts(5_646_605, 0)
            // Standard Error: 9_042
            .saturating_add(Weight::from_parts(2_578_296, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_578_296 -
            2_413_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_096_000 picoseconds.
        Weight::from_parts(5_402_380, 0)
            // Standard Error: 13_258
            .saturating_add(Weight::from_parts(2_413_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_628_000 picoseconds.
        Weight::from_parts(29_037_788, 0)
            // Standard Error: 41_898
            .saturating_add(Weight::from_parts(8_832_655, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 14_077_000 picoseconds.
        Weight::from_parts(6_489_205, 0)
            // Standard Error: 6_927
            .saturating_add(Weight::from_parts(1_144_947, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_091_000 picoseconds.
        Weight::from_parts(6_712_503, 0)
            // Standard Error: 41
            .saturating_add(Weight::from_parts(71, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_929_000 picoseconds.
        Weight::from_parts(2_177_166, 0)
            // Standard Error: 3_151
            .saturating_add(Weight::from_parts(278_198, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_850_000 picoseconds.
        Weight::from_parts(2_919_000, 0)
            // Standard Error: 5_623
            .saturating_add(Weight::from_parts(774_990, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_206_000 picoseconds.
        Weight::from_parts(3_364_000, 0)
            // Standard Error: 4_199
            .saturating_add(Weight::from_parts(727_116, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_327_000 picoseconds.
        Weight::from_parts(3_872_851, 0)
            // Standard Error: 6_573
            .saturating_add(Weight::from_parts(787_199, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_380_000 picoseconds.
        Weight::from_parts(1_304_200, 0)
            // Standard Error: 10_826
            .saturating_add(Weight::from_parts(1_454_860, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_192_000 picoseconds.
        Weight::from_parts(2_100_983, 0)
            // Standard Error: 9_962
            .saturating_add(Weight::from_parts(7_144_897, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_147_000 picoseconds.
        Weight::from_parts(3_718_000, 0)
            // Standard Error: 6_770
            .saturating_add(Weight::from_parts(3_259_581, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_053_000 picoseconds.
        Weight::from_parts(3_624_000, 0)
            // Standard Error: 6_642
            .saturating_add(Weight::from_parts(3_031_233, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_020_000 picoseconds.
        Weight::from_parts(3_136_000, 0)
            // Standard Error: 6_323
            .saturating_add(Weight::from_parts(3_051_269, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_889_000 picoseconds.
        Weight::from_parts(3_032_000, 0)
            // Standard Error: 5_561
            .saturating_add(Weight::from_parts(2_593_252, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_328_000 picoseconds.
        Weight::from_parts(474_446, 0)
            // Standard Error: 5_335
            .saturating_add(Weight::from_parts(655_402, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_899_000 picoseconds.
        Weight::from_parts(1_288_115, 0)
            // Standard Error: 4_781
            .saturating_add(Weight::from_parts(470_267, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_946_000 picoseconds.
        Weight::from_parts(3_125_000, 0)
            // Standard Error: 10_784
            .saturating_add(Weight::from_parts(1_895_747, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_243_000 picoseconds.
        Weight::from_parts(3_819_000, 0)
            // Standard Error: 7_147
            .saturating_add(Weight::from_parts(1_094_603, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_004_000 picoseconds.
        Weight::from_parts(1_660_071, 0)
            // Standard Error: 3_524
            .saturating_add(Weight::from_parts(404_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_085_000 picoseconds.
        Weight::from_parts(1_786_414, 0)
            // Standard Error: 3_520
            .saturating_add(Weight::from_parts(417_147, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_837_000 picoseconds.
        Weight::from_parts(134_990, 0)
            // Standard Error: 6_265
            .saturating_add(Weight::from_parts(620_317, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_926_000 picoseconds.
        Weight::from_parts(1_079_141, 0)
            // Standard Error: 5_024
            .saturating_add(Weight::from_parts(594_927, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_094_000 picoseconds.
        Weight::from_parts(1_054_715, 0)
            // Standard Error: 4_546
            .saturating_add(Weight::from_parts(544_660, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_114_000 picoseconds.
        Weight::from_parts(1_886_194, 0)
            // Standard Error: 4_275
            .saturating_add(Weight::from_parts(382_008, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_234_000 picoseconds.
        Weight::from_parts(3_117_074, 0)
            // Standard Error: 2_821
            .saturating_add(Weight::from_parts(174_510, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_072_000 picoseconds.
        Weight::from_parts(3_138_562, 0)
            // Standard Error: 1_967
            .saturating_add(Weight::from_parts(177_798, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_262_000 picoseconds.
        Weight::from_parts(3_669_000, 0)
            // Standard Error: 11_290
            .saturating_add(Weight::from_parts(1_830_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_056_000 picoseconds.
        Weight::from_parts(3_208_000, 0)
            // Standard Error: 8_527
            .saturating_add(Weight::from_parts(1_186_257, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_969_000 picoseconds.
        Weight::from_parts(3_046_000, 0)
            // Standard Error: 10_360
            .saturating_add(Weight::from_parts(1_808_119, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_169_000 picoseconds.
        Weight::from_parts(3_642_000, 0)
            // Standard Error: 8_708
            .saturating_add(Weight::from_parts(1_195_741, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_857_000 picoseconds.
        Weight::from_parts(3_097_000, 0)
            // Standard Error: 9_909
            .saturating_add(Weight::from_parts(1_845_115, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_920_000 picoseconds.
        Weight::from_parts(3_400_000, 0)
            // Standard Error: 7_629
            .saturating_add(Weight::from_parts(1_154_565, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_000_000 picoseconds.
        Weight::from_parts(3_531_000, 0)
            // Standard Error: 9_902
            .saturating_add(Weight::from_parts(1_781_046, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_141_000 picoseconds.
        Weight::from_parts(3_889_000, 0)
            // Standard Error: 7_765
            .saturating_add(Weight::from_parts(1_146_840, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_109_000 picoseconds.
        Weight::from_parts(3_345_000, 0)
            // Standard Error: 11_574
            .saturating_add(Weight::from_parts(1_891_441, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_036_000 picoseconds.
        Weight::from_parts(3_331_000, 0)
            // Standard Error: 7_499
            .saturating_add(Weight::from_parts(1_173_884, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_916_000 picoseconds.
        Weight::from_parts(3_243_000, 0)
            // Standard Error: 11_382
            .saturating_add(Weight::from_parts(1_867_339, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_903_000 picoseconds.
        Weight::from_parts(3_166_000, 0)
            // Standard Error: 8_909
            .saturating_add(Weight::from_parts(1_293_121, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_807_000 picoseconds.
        Weight::from_parts(3_107_000, 0)
            // Standard Error: 9_949
            .saturating_add(Weight::from_parts(1_899_903, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_175_000 picoseconds.
        Weight::from_parts(3_401_000, 0)
            // Standard Error: 7_370
            .saturating_add(Weight::from_parts(1_272_776, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_077_000 picoseconds.
        Weight::from_parts(3_247_000, 0)
            // Standard Error: 8_562
            .saturating_add(Weight::from_parts(1_912_138, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_078_000 picoseconds.
        Weight::from_parts(3_495_000, 0)
            // Standard Error: 7_375
            .saturating_add(Weight::from_parts(1_234_626, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_970_000 picoseconds.
        Weight::from_parts(3_042_000, 0)
            // Standard Error: 9_953
            .saturating_add(Weight::from_parts(1_961_642, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_109_000 picoseconds.
        Weight::from_parts(3_573_000, 0)
            // Standard Error: 7_624
            .saturating_add(Weight::from_parts(1_115_756, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_058_000 picoseconds.
        Weight::from_parts(3_567_000, 0)
            // Standard Error: 12_631
            .saturating_add(Weight::from_parts(1_887_903, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_043_000 picoseconds.
        Weight::from_parts(3_187_000, 0)
            // Standard Error: 9_373
            .saturating_add(Weight::from_parts(1_211_061, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_030_000 picoseconds.
        Weight::from_parts(3_103_000, 0)
            // Standard Error: 7_758
            .saturating_add(Weight::from_parts(1_265_336, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_132_000 picoseconds.
        Weight::from_parts(3_513_000, 0)
            // Standard Error: 5_030
            .saturating_add(Weight::from_parts(645_058, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_112_000 picoseconds.
        Weight::from_parts(3_289_000, 0)
            // Standard Error: 7_585
            .saturating_add(Weight::from_parts(1_274_040, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_975_000 picoseconds.
        Weight::from_parts(3_394_000, 0)
            // Standard Error: 4_414
            .saturating_add(Weight::from_parts(641_620, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_996_000 picoseconds.
        Weight::from_parts(3_099_000, 0)
            // Standard Error: 9_877
            .saturating_add(Weight::from_parts(1_796_925, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_938_000 picoseconds.
        Weight::from_parts(3_189_000, 0)
            // Standard Error: 8_950
            .saturating_add(Weight::from_parts(1_223_275, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_015_000 picoseconds.
        Weight::from_parts(9_920_759, 0)
            // Standard Error: 15_919
            .saturating_add(Weight::from_parts(1_860_662, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_938_000 picoseconds.
        Weight::from_parts(6_435_426, 0)
            // Standard Error: 11_785
            .saturating_add(Weight::from_parts(1_872_412, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_119_000 picoseconds.
        Weight::from_parts(9_068_094, 0)
            // Standard Error: 16_002
            .saturating_add(Weight::from_parts(2_092_349, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_056_000 picoseconds.
        Weight::from_parts(6_472_301, 0)
            // Standard Error: 15_950
            .saturating_add(Weight::from_parts(1_873_202, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_030_000 picoseconds.
        Weight::from_parts(15_179_397, 0)
            // Standard Error: 39_556
            .saturating_add(Weight::from_parts(7_678_199, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_324_000 picoseconds.
        Weight::from_parts(7_795_346, 0)
            // Standard Error: 51_522
            .saturating_add(Weight::from_parts(6_441_353, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_040_000 picoseconds.
        Weight::from_parts(10_372_665, 0)
            // Standard Error: 20_055
            .saturating_add(Weight::from_parts(2_094_565, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_186_000 picoseconds.
        Weight::from_parts(6_917_478, 0)
            // Standard Error: 14_131
            .saturating_add(Weight::from_parts(1_888_114, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_065_000 picoseconds.
        Weight::from_parts(3_304_000, 0)
            // Standard Error: 8_168
            .saturating_add(Weight::from_parts(1_265_690, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_220_000 picoseconds.
        Weight::from_parts(3_362_000, 0)
            // Standard Error: 6_060
            .saturating_add(Weight::from_parts(714_440, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_869_000 picoseconds.
        Weight::from_parts(3_144_000, 0)
            // Standard Error: 8_045
            .saturating_add(Weight::from_parts(1_321_737, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_141_000 picoseconds.
        Weight::from_parts(262_738, 0)
            // Standard Error: 6_722
            .saturating_add(Weight::from_parts(751_731, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_058_000 picoseconds.
        Weight::from_parts(3_467_000, 0)
            // Standard Error: 5_948
            .saturating_add(Weight::from_parts(1_292_655, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_221_000 picoseconds.
        Weight::from_parts(18_004, 0)
            // Standard Error: 6_176
            .saturating_add(Weight::from_parts(747_208, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_133_000 picoseconds.
        Weight::from_parts(3_430_000, 0)
            // Standard Error: 6_251
            .saturating_add(Weight::from_parts(1_111_241, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_795_000 picoseconds.
        Weight::from_parts(2_913_000, 0)
            // Standard Error: 4_079
            .saturating_add(Weight::from_parts(611_431, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_009_000 picoseconds.
        Weight::from_parts(3_351_000, 0)
            // Standard Error: 7_965
            .saturating_add(Weight::from_parts(1_168_303, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_991_000 picoseconds.
        Weight::from_parts(249_650, 0)
            // Standard Error: 6_245
            .saturating_add(Weight::from_parts(688_429, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_944_000 picoseconds.
        Weight::from_parts(3_519_000, 0)
            // Standard Error: 5_945
            .saturating_add(Weight::from_parts(1_043_574, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_948_000 picoseconds.
        Weight::from_parts(275_569, 0)
            // Standard Error: 5_343
            .saturating_add(Weight::from_parts(647_852, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_021_000 picoseconds.
        Weight::from_parts(3_094_000, 0)
            // Standard Error: 7_563
            .saturating_add(Weight::from_parts(1_070_370, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_004_000 picoseconds.
        Weight::from_parts(192_522, 0)
            // Standard Error: 5_153
            .saturating_add(Weight::from_parts(681_342, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_911_000 picoseconds.
        Weight::from_parts(2_975_000, 0)
            // Standard Error: 5_682
            .saturating_add(Weight::from_parts(1_052_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_028_000 picoseconds.
        Weight::from_parts(772_727, 0)
            // Standard Error: 5_064
            .saturating_add(Weight::from_parts(676_727, 0).saturating_mul(r.into()))
    }
}
