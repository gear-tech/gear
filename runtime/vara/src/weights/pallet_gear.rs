// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-29, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=alloc,alloc_in_handle,alloc_per_page,claim_value,create_program,db_read_per_kb,db_write_per_kb,free,free_range,free_range_per_page,gr_block_height,gr_block_timestamp,gr_create_program,gr_create_program_per_kb,gr_create_program_wgas,gr_create_program_wgas_per_kb,gr_debug,gr_debug_per_kb,gr_env_vars,gr_gas_available,gr_message_id,gr_pay_program_rent,gr_program_id,gr_random,gr_read,gr_read_per_kb,gr_reply_code,gr_reply_deposit,gr_reply_per_kb,gr_reply_push,gr_reply_push_input,gr_reply_push_input_per_kb,gr_reply_push_per_kb,gr_reply_to,gr_reply_wgas_per_kb,gr_reservation_reply_commit_per_kb,gr_reservation_reply_per_kb,gr_reservation_send,gr_reservation_send_commit,gr_reservation_send_per_kb,gr_reserve_gas,gr_send,gr_send_commit,gr_send_commit_wgas,gr_send_init,gr_send_input,gr_send_input_wgas,gr_send_per_kb,gr_send_push,gr_send_push_input,gr_send_push_input_per_kb,gr_send_push_per_kb,gr_send_wgas,gr_send_wgas_per_kb,gr_signal_code,gr_signal_from,gr_size,gr_source,gr_system_reserve_gas,gr_unreserve_gas,gr_value,gr_value_available,gr_wake,initial_allocation,instantiate_module_per_kb,instr_br,instr_br_if,instr_br_table,instr_br_table_per_entry,instr_call,instr_call_const,instr_call_indirect,instr_call_indirect_per_param,instr_call_per_local,instr_global_get,instr_global_set,instr_i32add,instr_i32and,instr_i32clz,instr_i32ctz,instr_i32divs,instr_i32divu,instr_i32eq,instr_i32eqz,instr_i32extend16s,instr_i32extend8s,instr_i32ges,instr_i32geu,instr_i32gts,instr_i32gtu,instr_i32les,instr_i32leu,instr_i32load,instr_i32lts,instr_i32ltu,instr_i32mul,instr_i32ne,instr_i32or,instr_i32popcnt,instr_i32rems,instr_i32remu,instr_i32rotl,instr_i32rotr,instr_i32shl,instr_i32shrs,instr_i32shru,instr_i32store,instr_i32sub,instr_i32wrapi64,instr_i32xor,instr_i64add,instr_i64and,instr_i64clz,instr_i64ctz,instr_i64divs,instr_i64divu,instr_i64eq,instr_i64eqz,instr_i64extend16s,instr_i64extend32s,instr_i64extend8s,instr_i64extendsi32,instr_i64extendui32,instr_i64ges,instr_i64geu,instr_i64gts,instr_i64gtu,instr_i64les,instr_i64leu,instr_i64load,instr_i64lts,instr_i64ltu,instr_i64mul,instr_i64ne,instr_i64or,instr_i64popcnt,instr_i64rems,instr_i64remu,instr_i64rotl,instr_i64rotr,instr_i64shl,instr_i64shrs,instr_i64shru,instr_i64store,instr_i64sub,instr_i64xor,instr_if,instr_local_get,instr_local_set,instr_local_tee,instr_memory_current,instr_select,lazy_pages_host_func_read,lazy_pages_host_func_write,lazy_pages_host_func_write_after_read,lazy_pages_load_page_storage_data,lazy_pages_signal_read,lazy_pages_signal_write,lazy_pages_signal_write_after_read,mem_grow,pay_program_rent,reinstrument_per_kb,resume_session_commit,resume_session_init,resume_session_push,send_message,send_reply,tasks_pause_program,tasks_pause_program_uninited,tasks_remove_from_mailbox,tasks_remove_from_waitlist,tasks_remove_gas_reservation,tasks_remove_resume_session,tasks_send_dispatch,tasks_send_user_message,tasks_send_user_message_to_mailbox,tasks_wake_message,tasks_wake_message_no_wake,upload_code,upload_program --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn free_range(r: u32, ) -> Weight;
    fn free_range_per_page(p: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_env_vars(r: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn tasks_remove_resume_session() -> Weight;
    fn tasks_remove_gas_reservation() -> Weight;
    fn tasks_send_user_message_to_mailbox() -> Weight;
    fn tasks_send_user_message() -> Weight;
    fn tasks_send_dispatch() -> Weight;
    fn tasks_wake_message() -> Weight;
    fn tasks_wake_message_no_wake() -> Weight;
    fn tasks_remove_from_waitlist() -> Weight;
    fn tasks_remove_from_mailbox() -> Weight;
    fn tasks_pause_program(c: u32, ) -> Weight;
    fn tasks_pause_program_uninited(c: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_860_000 picoseconds.
        Weight::from_parts(109_902_426, 0)
            // Standard Error: 87_456
            .saturating_add(Weight::from_parts(15_603_698, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_722_000 picoseconds.
        Weight::from_parts(109_322_150, 0)
            // Standard Error: 88_502
            .saturating_add(Weight::from_parts(19_976_164, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_832_000 picoseconds.
        Weight::from_parts(107_554_398, 0)
            // Standard Error: 84_477
            .saturating_add(Weight::from_parts(17_699_648, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_018_000 picoseconds.
        Weight::from_parts(106_534_970, 0)
            // Standard Error: 83_674
            .saturating_add(Weight::from_parts(18_522_146, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 581_018_000 picoseconds.
        Weight::from_parts(622_524_910, 0)
            // Standard Error: 1_089_411
            .saturating_add(Weight::from_parts(32_782_380, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 581_995_000 picoseconds.
        Weight::from_parts(627_369_326, 0)
            // Standard Error: 1_060_285
            .saturating_add(Weight::from_parts(30_074_450, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 113_896_000 picoseconds.
        Weight::from_parts(121_435_850, 0)
            // Standard Error: 89_066
            .saturating_add(Weight::from_parts(9_335_090, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 113_111_000 picoseconds.
        Weight::from_parts(121_946_094, 0)
            // Standard Error: 91_768
            .saturating_add(Weight::from_parts(3_379_896, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_416_000 picoseconds.
        Weight::from_parts(109_848_926, 0)
            // Standard Error: 2_246_907
            .saturating_add(Weight::from_parts(195_349_902, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_209_000 picoseconds.
        Weight::from_parts(106_241_878, 0)
            // Standard Error: 2_253_632
            .saturating_add(Weight::from_parts(187_195_472, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_803_000 picoseconds.
        Weight::from_parts(109_565_130, 0)
            // Standard Error: 1_477_238
            .saturating_add(Weight::from_parts(120_897_480, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_245_000 picoseconds.
        Weight::from_parts(105_590_164, 0)
            // Standard Error: 2_272_800
            .saturating_add(Weight::from_parts(188_047_714, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_063_000 picoseconds.
        Weight::from_parts(108_977_002, 0)
            // Standard Error: 2_282_702
            .saturating_add(Weight::from_parts(186_989_742, 0).saturating_mul(r.into()))
    }
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_056_000 picoseconds.
        Weight::from_parts(1_115_000, 0)
            // Standard Error: 946
            .saturating_add(Weight::from_parts(214_086, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_221_000 picoseconds.
        Weight::from_parts(3_269_000, 3610)
            // Standard Error: 978
            .saturating_add(Weight::from_parts(676_393, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_675_000 picoseconds.
        Weight::from_parts(90_836_513, 0)
            // Standard Error: 5_565
            .saturating_add(Weight::from_parts(2_387_271, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1354`
        //  Estimated: `51743`
        // Minimum execution time: 105_884_000 picoseconds.
        Weight::from_parts(108_140_000, 51743)
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `996`
        //  Estimated: `21591`
        // Minimum execution time: 54_868_000 picoseconds.
        Weight::from_parts(55_995_000, 21591)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `638`
        //  Estimated: `17474`
        // Minimum execution time: 29_109_000 picoseconds.
        Weight::from_parts(30_106_000, 17474)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `330`
        //  Estimated: `4125`
        // Minimum execution time: 8_455_000 picoseconds.
        Weight::from_parts(7_146_509, 4125)
            // Standard Error: 8_846
            .saturating_add(Weight::from_parts(13_376_010, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3179 + c * (16400 ±0)`
        //  Estimated: `43994 + c * (117282 ±0)`
        // Minimum execution time: 68_639_000 picoseconds.
        Weight::from_parts(70_011_000, 43994)
            // Standard Error: 55_407
            .saturating_add(Weight::from_parts(38_079_788, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(8_u64))
            .saturating_add(Weight::from_parts(0, 117282).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `5402`
        // Minimum execution time: 78_779_000 picoseconds.
        Weight::from_parts(76_029_472, 5402)
            // Standard Error: 51_854
            .saturating_add(Weight::from_parts(63_831_926, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1111`
        //  Estimated: `50600`
        // Minimum execution time: 94_492_000 picoseconds.
        Weight::from_parts(129_742_726, 50600)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_509, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `521`
        //  Estimated: `45152`
        // Minimum execution time: 10_659_684_000 picoseconds.
        Weight::from_parts(164_883_402, 45152)
            // Standard Error: 152_753
            .saturating_add(Weight::from_parts(65_173_180, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_486, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `513`
        //  Estimated: `31140`
        // Minimum execution time: 73_148_000 picoseconds.
        Weight::from_parts(49_931_257, 31140)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_038, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1353`
        //  Estimated: `54273`
        // Minimum execution time: 123_878_000 picoseconds.
        Weight::from_parts(103_954_193, 54273)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_056, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `121468`
        // Minimum execution time: 372_900_000 picoseconds.
        Weight::from_parts(390_064_444, 121468)
            .saturating_add(T::DbWeight::get().reads(35_u64))
            .saturating_add(T::DbWeight::get().writes(26_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `121468`
        // Minimum execution time: 393_123_000 picoseconds.
        Weight::from_parts(410_375_445, 121468)
            // Standard Error: 1_590
            .saturating_add(Weight::from_parts(1_726, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(35_u64))
            .saturating_add(T::DbWeight::get().writes(26_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 60_100_000 picoseconds.
        Weight::from_parts(60_744_000, 3899)
            // Standard Error: 29_209
            .saturating_add(Weight::from_parts(64_129_628, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_272_000 picoseconds.
        Weight::from_parts(99_337_000, 0)
            // Standard Error: 4_324_831
            .saturating_add(Weight::from_parts(756_544_372, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 493_231_000 picoseconds.
        Weight::from_parts(451_292_021, 0)
            // Standard Error: 15_090
            .saturating_add(Weight::from_parts(31_767_915, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_028_000 picoseconds.
        Weight::from_parts(110_584_770, 0)
            // Standard Error: 212_483
            .saturating_add(Weight::from_parts(68_581_058, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_774_000 picoseconds.
        Weight::from_parts(128_482_142, 0)
            // Standard Error: 307_317
            .saturating_add(Weight::from_parts(91_160_872, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 20]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 200_763_000 picoseconds.
        Weight::from_parts(194_170_085, 0)
            // Standard Error: 24_264
            .saturating_add(Weight::from_parts(15_711_865, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_404_000 picoseconds.
        Weight::from_parts(108_434_795, 0)
            // Standard Error: 4_175
            .saturating_add(Weight::from_parts(2_452_279, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 180_204_000 picoseconds.
        Weight::from_parts(227_103_463, 0)
            // Standard Error: 16_895
            .saturating_add(Weight::from_parts(2_120_795, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_834_000 picoseconds.
        Weight::from_parts(123_414_569, 0)
            // Standard Error: 300_986
            .saturating_add(Weight::from_parts(95_299_971, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_792_000 picoseconds.
        Weight::from_parts(102_008_327, 0)
            // Standard Error: 304_636
            .saturating_add(Weight::from_parts(90_621_024, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_701_000 picoseconds.
        Weight::from_parts(104_245_367, 0)
            // Standard Error: 272_118
            .saturating_add(Weight::from_parts(86_878_148, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_289_000 picoseconds.
        Weight::from_parts(100_975_174, 0)
            // Standard Error: 263_425
            .saturating_add(Weight::from_parts(86_750_115, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_758_000 picoseconds.
        Weight::from_parts(95_386_425, 0)
            // Standard Error: 301_238
            .saturating_add(Weight::from_parts(88_496_732, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_187_000 picoseconds.
        Weight::from_parts(96_364_979, 0)
            // Standard Error: 305_738
            .saturating_add(Weight::from_parts(87_927_032, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_185_000 picoseconds.
        Weight::from_parts(89_709_363, 0)
            // Standard Error: 320_760
            .saturating_add(Weight::from_parts(91_081_622, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_154_000 picoseconds.
        Weight::from_parts(98_160_645, 0)
            // Standard Error: 287_920
            .saturating_add(Weight::from_parts(86_822_134, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 567_955_000 picoseconds.
        Weight::from_parts(629_827_659, 0)
            // Standard Error: 451_018
            .saturating_add(Weight::from_parts(144_448_983, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 709_108_000 picoseconds.
        Weight::from_parts(711_285_000, 0)
            // Standard Error: 65_024
            .saturating_add(Weight::from_parts(13_432_348, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_892_000 picoseconds.
        Weight::from_parts(107_662_184, 0)
            // Standard Error: 267_946
            .saturating_add(Weight::from_parts(97_370_636, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_670_000 picoseconds.
        Weight::from_parts(103_479_522, 0)
            // Standard Error: 265_912
            .saturating_add(Weight::from_parts(87_422_323, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_599_000 picoseconds.
        Weight::from_parts(93_194_444, 0)
            // Standard Error: 245_434
            .saturating_add(Weight::from_parts(90_837_708, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_225_000 picoseconds.
        Weight::from_parts(115_943_752, 0)
            // Standard Error: 360_544
            .saturating_add(Weight::from_parts(165_912_134, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_676_000 picoseconds.
        Weight::from_parts(107_379_000, 0)
            // Standard Error: 4_681_794
            .saturating_add(Weight::from_parts(862_457_025, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_998_000 picoseconds.
        Weight::from_parts(164_500_089, 0)
            // Standard Error: 371_339
            .saturating_add(Weight::from_parts(252_167_019, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 345_293_000 picoseconds.
        Weight::from_parts(357_799_000, 0)
            // Standard Error: 65_383
            .saturating_add(Weight::from_parts(21_142_419, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_305_000 picoseconds.
        Weight::from_parts(170_516_333, 0)
            // Standard Error: 389_897
            .saturating_add(Weight::from_parts(256_773_084, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 357_433_000 picoseconds.
        Weight::from_parts(365_140_000, 0)
            // Standard Error: 61_049
            .saturating_add(Weight::from_parts(21_142_255, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 575_016_000 picoseconds.
        Weight::from_parts(663_293_766, 0)
            // Standard Error: 486_941
            .saturating_add(Weight::from_parts(269_111_637, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 575_303_000 picoseconds.
        Weight::from_parts(654_163_710, 0)
            // Standard Error: 410_449
            .saturating_add(Weight::from_parts(275_124_142, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_957_000 picoseconds.
        Weight::from_parts(89_573_360, 0)
            // Standard Error: 319_207
            .saturating_add(Weight::from_parts(94_921_950, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_873_233_000 picoseconds.
        Weight::from_parts(2_009_197_932, 0)
            // Standard Error: 334_437
            .saturating_add(Weight::from_parts(166_306_712, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 324_051_000 picoseconds.
        Weight::from_parts(327_937_000, 0)
            // Standard Error: 50_807
            .saturating_add(Weight::from_parts(29_060_344, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_871_785_000 picoseconds.
        Weight::from_parts(2_010_488_993, 0)
            // Standard Error: 389_533
            .saturating_add(Weight::from_parts(213_281_319, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_874_990_000 picoseconds.
        Weight::from_parts(2_009_606_191, 0)
            // Standard Error: 337_322
            .saturating_add(Weight::from_parts(218_803_286, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 257_358_000 picoseconds.
        Weight::from_parts(335_563_477, 0)
            // Standard Error: 389_429
            .saturating_add(Weight::from_parts(271_419_342, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 530_624_000 picoseconds.
        Weight::from_parts(540_600_000, 0)
            // Standard Error: 59_447
            .saturating_add(Weight::from_parts(21_240_436, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_035_196_000 picoseconds.
        Weight::from_parts(2_144_110_460, 0)
            // Standard Error: 447_360
            .saturating_add(Weight::from_parts(242_716_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 121_327_000 picoseconds.
        Weight::from_parts(112_077_249, 0)
            // Standard Error: 1_116
            .saturating_add(Weight::from_parts(427_193, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_345_000 picoseconds.
        Weight::from_parts(116_214_021, 0)
            // Standard Error: 834
            .saturating_add(Weight::from_parts(420_680, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_562_000 picoseconds.
        Weight::from_parts(145_043_269, 0)
            // Standard Error: 385_144
            .saturating_add(Weight::from_parts(148_660_408, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_764_000 picoseconds.
        Weight::from_parts(119_580_000, 0)
            // Standard Error: 2_560
            .saturating_add(Weight::from_parts(620_909, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 123_150_000 picoseconds.
        Weight::from_parts(109_609_605, 0)
            // Standard Error: 1_162
            .saturating_add(Weight::from_parts(434_105, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 116_950_000 picoseconds.
        Weight::from_parts(108_731_061, 0)
            // Standard Error: 980
            .saturating_add(Weight::from_parts(428_966, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_860_000 picoseconds.
        Weight::from_parts(91_987_882, 0)
            // Standard Error: 308_569
            .saturating_add(Weight::from_parts(88_349_486, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_465_000 picoseconds.
        Weight::from_parts(92_405_430, 0)
            // Standard Error: 337_302
            .saturating_add(Weight::from_parts(86_350_561, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_084_000 picoseconds.
        Weight::from_parts(98_920_604, 0)
            // Standard Error: 280_808
            .saturating_add(Weight::from_parts(87_587_366, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 576_456_000 picoseconds.
        Weight::from_parts(612_958_935, 0)
            // Standard Error: 347_792
            .saturating_add(Weight::from_parts(108_643_260, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 606_352_000 picoseconds.
        Weight::from_parts(633_204_464, 0)
            // Standard Error: 2_851
            .saturating_add(Weight::from_parts(128_298, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_344_477_000 picoseconds.
        Weight::from_parts(2_509_016_591, 0)
            // Standard Error: 429_875
            .saturating_add(Weight::from_parts(123_970_246, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_461_896_000 picoseconds.
        Weight::from_parts(2_305_508_505, 0)
            // Standard Error: 16_986
            .saturating_add(Weight::from_parts(12_350_100, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_846_000 picoseconds.
        Weight::from_parts(124_996_080, 0)
            // Standard Error: 357_003
            .saturating_add(Weight::from_parts(116_069_823, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 164_497_000 picoseconds.
        Weight::from_parts(166_097_000, 0)
            // Standard Error: 48_633
            .saturating_add(Weight::from_parts(24_658_033, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_125_000 picoseconds.
        Weight::from_parts(89_264_173, 0)
            // Standard Error: 324_487
            .saturating_add(Weight::from_parts(86_982_165, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 153_972_000 picoseconds.
        Weight::from_parts(239_477_803, 0)
            // Standard Error: 294_322
            .saturating_add(Weight::from_parts(160_305_544, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 113_642_000 picoseconds.
        Weight::from_parts(176_489_952, 0)
            // Standard Error: 350_048
            .saturating_add(Weight::from_parts(337_483_577, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_035_236_000 picoseconds.
        Weight::from_parts(43_168_150_000, 0)
            // Standard Error: 256_279
            .saturating_add(Weight::from_parts(7_817_176, 0).saturating_mul(p.into()))
            // Standard Error: 256_266
            .saturating_add(Weight::from_parts(172_954_817, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 116_143_000 picoseconds.
        Weight::from_parts(187_130_550, 0)
            // Standard Error: 392_731
            .saturating_add(Weight::from_parts(340_514_973, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_667_632_000 picoseconds.
        Weight::from_parts(44_190_982_000, 0)
            // Standard Error: 279_396
            .saturating_add(Weight::from_parts(8_239_118, 0).saturating_mul(p.into()))
            // Standard Error: 279_382
            .saturating_add(Weight::from_parts(172_687_557, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_396_000 picoseconds.
        Weight::from_parts(121_166_556, 0)
            // Standard Error: 30_407
            .saturating_add(Weight::from_parts(1_992_654, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 100_032_000 picoseconds.
        Weight::from_parts(102_195_000, 1131)
            // Standard Error: 37_643
            .saturating_add(Weight::from_parts(15_727_390, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 104_476_000 picoseconds.
        Weight::from_parts(107_729_000, 1131)
            // Standard Error: 39_654
            .saturating_add(Weight::from_parts(41_500_001, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_351_625_000 picoseconds.
        Weight::from_parts(8_314_913_562, 5069931)
            // Standard Error: 74_292
            .saturating_add(Weight::from_parts(41_520_004, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1820 + p * (65580 ±0)`
        //  Estimated: `1946 + p * (75482 ±0)`
        // Minimum execution time: 103_499_000 picoseconds.
        Weight::from_parts(349_140_109, 1946)
            // Standard Error: 151_321
            .saturating_add(Weight::from_parts(55_863_369, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 106_974_000 picoseconds.
        Weight::from_parts(112_590_341, 1131)
            // Standard Error: 76_236
            .saturating_add(Weight::from_parts(38_974_728, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 634_017_000 picoseconds.
        Weight::from_parts(693_508_455, 1496)
            // Standard Error: 386_453
            .saturating_add(Weight::from_parts(47_359_059, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_141_162_000 picoseconds.
        Weight::from_parts(1_188_690_210, 317931)
            // Standard Error: 427_671
            .saturating_add(Weight::from_parts(44_565_698, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_377_000 picoseconds.
        Weight::from_parts(2_570_000, 0)
            // Standard Error: 190_011
            .saturating_add(Weight::from_parts(77_114_584, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_464_470_000 picoseconds.
        Weight::from_parts(4_284_421_833, 0)
            // Standard Error: 56_345
            .saturating_add(Weight::from_parts(4_858_332, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_479_786_000 picoseconds.
        Weight::from_parts(4_259_025_042, 0)
            // Standard Error: 85_159
            .saturating_add(Weight::from_parts(4_931_013, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_562_832_000 picoseconds.
        Weight::from_parts(11_455_025_848, 0)
            // Standard Error: 170_550
            .saturating_add(Weight::from_parts(10_498_222, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_091_826_000 picoseconds.
        Weight::from_parts(11_816_242_326, 0)
            // Standard Error: 144_686
            .saturating_add(Weight::from_parts(7_941_320, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_279_000 picoseconds.
        Weight::from_parts(2_323_000, 0)
            // Standard Error: 8_321
            .saturating_add(Weight::from_parts(3_827_487, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_257_000 picoseconds.
        Weight::from_parts(399_338, 0)
            // Standard Error: 9_103
            .saturating_add(Weight::from_parts(3_170_914, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_350_000 picoseconds.
        Weight::from_parts(3_420_212, 0)
            // Standard Error: 959
            .saturating_add(Weight::from_parts(1_568_229, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_283_000 picoseconds.
        Weight::from_parts(2_397_000, 0)
            // Standard Error: 8_705
            .saturating_add(Weight::from_parts(2_969_892, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_279_000 picoseconds.
        Weight::from_parts(4_651_805, 0)
            // Standard Error: 23_387
            .saturating_add(Weight::from_parts(5_037_118, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_774_000 picoseconds.
        Weight::from_parts(5_438_636, 0)
            // Standard Error: 1_617
            .saturating_add(Weight::from_parts(172_888, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_400_000 picoseconds.
        Weight::from_parts(4_605_201, 0)
            // Standard Error: 6_841
            .saturating_add(Weight::from_parts(2_583_822, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_583_822 -
            2_422_591, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_284_000 picoseconds.
        Weight::from_parts(4_635_043, 0)
            // Standard Error: 12_393
            .saturating_add(Weight::from_parts(2_422_591, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_764_000 picoseconds.
        Weight::from_parts(25_993_804, 0)
            // Standard Error: 46_908
            .saturating_add(Weight::from_parts(9_424_502, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_201_000 picoseconds.
        Weight::from_parts(3_047_684, 0)
            // Standard Error: 6_253
            .saturating_add(Weight::from_parts(1_235_385, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_388_000 picoseconds.
        Weight::from_parts(5_786_703, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_218_000 picoseconds.
        Weight::from_parts(8_926_393, 0)
            // Standard Error: 3_699
            .saturating_add(Weight::from_parts(474_324, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_282_000 picoseconds.
        Weight::from_parts(7_028_267, 0)
            // Standard Error: 8_855
            .saturating_add(Weight::from_parts(1_129_254, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_328_000 picoseconds.
        Weight::from_parts(9_361_197, 0)
            // Standard Error: 6_045
            .saturating_add(Weight::from_parts(1_076_581, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_017_000 picoseconds.
        Weight::from_parts(2_776_599, 0)
            // Standard Error: 7_620
            .saturating_add(Weight::from_parts(784_295, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_080_000 picoseconds.
        Weight::from_parts(145_049, 0)
            // Standard Error: 9_865
            .saturating_add(Weight::from_parts(1_499_091, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_241_000 picoseconds.
        Weight::from_parts(1_737_293, 0)
            // Standard Error: 12_201
            .saturating_add(Weight::from_parts(7_072_983, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_278_000 picoseconds.
        Weight::from_parts(2_377_000, 0)
            // Standard Error: 7_177
            .saturating_add(Weight::from_parts(3_395_194, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_350_000 picoseconds.
        Weight::from_parts(2_402_000, 0)
            // Standard Error: 6_537
            .saturating_add(Weight::from_parts(3_175_744, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_328_000 picoseconds.
        Weight::from_parts(2_452_000, 0)
            // Standard Error: 6_422
            .saturating_add(Weight::from_parts(3_123_273, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_276_000 picoseconds.
        Weight::from_parts(2_410_000, 0)
            // Standard Error: 5_026
            .saturating_add(Weight::from_parts(2_692_651, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_263_000 picoseconds.
        Weight::from_parts(2_312_000, 0)
            // Standard Error: 5_943
            .saturating_add(Weight::from_parts(648_321, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_319_000 picoseconds.
        Weight::from_parts(1_160_270, 0)
            // Standard Error: 4_473
            .saturating_add(Weight::from_parts(421_339, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_341_000 picoseconds.
        Weight::from_parts(2_470_000, 0)
            // Standard Error: 10_566
            .saturating_add(Weight::from_parts(1_885_207, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_267_000 picoseconds.
        Weight::from_parts(2_366_000, 0)
            // Standard Error: 8_174
            .saturating_add(Weight::from_parts(1_153_040, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_209_000 picoseconds.
        Weight::from_parts(1_287_056, 0)
            // Standard Error: 3_887
            .saturating_add(Weight::from_parts(393_107, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_296_000 picoseconds.
        Weight::from_parts(657_823, 0)
            // Standard Error: 5_683
            .saturating_add(Weight::from_parts(442_088, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_301_000 picoseconds.
        Weight::from_parts(2_367_000, 0)
            // Standard Error: 3_939
            .saturating_add(Weight::from_parts(525_921, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_355_000 picoseconds.
        Weight::from_parts(2_460_000, 0)
            // Standard Error: 4_509
            .saturating_add(Weight::from_parts(512_067, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_283_000 picoseconds.
        Weight::from_parts(396_390, 0)
            // Standard Error: 5_920
            .saturating_add(Weight::from_parts(513_767, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_305_000 picoseconds.
        Weight::from_parts(1_274_690, 0)
            // Standard Error: 4_135
            .saturating_add(Weight::from_parts(368_303, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_365_000 picoseconds.
        Weight::from_parts(2_635_228, 0)
            // Standard Error: 2_169
            .saturating_add(Weight::from_parts(171_434, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_338_000 picoseconds.
        Weight::from_parts(2_782_502, 0)
            // Standard Error: 2_260
            .saturating_add(Weight::from_parts(183_006, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_360_000 picoseconds.
        Weight::from_parts(2_410_000, 0)
            // Standard Error: 10_776
            .saturating_add(Weight::from_parts(1_905_057, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_311_000 picoseconds.
        Weight::from_parts(2_456_000, 0)
            // Standard Error: 7_701
            .saturating_add(Weight::from_parts(1_176_468, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_316_000 picoseconds.
        Weight::from_parts(2_418_000, 0)
            // Standard Error: 12_153
            .saturating_add(Weight::from_parts(1_905_400, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_280_000 picoseconds.
        Weight::from_parts(2_361_000, 0)
            // Standard Error: 8_311
            .saturating_add(Weight::from_parts(1_185_925, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_305_000 picoseconds.
        Weight::from_parts(2_424_000, 0)
            // Standard Error: 12_122
            .saturating_add(Weight::from_parts(1_843_290, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_348_000 picoseconds.
        Weight::from_parts(2_425_000, 0)
            // Standard Error: 7_558
            .saturating_add(Weight::from_parts(1_165_027, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_314_000 picoseconds.
        Weight::from_parts(2_435_000, 0)
            // Standard Error: 10_176
            .saturating_add(Weight::from_parts(1_938_731, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_216_000 picoseconds.
        Weight::from_parts(2_327_000, 0)
            // Standard Error: 7_457
            .saturating_add(Weight::from_parts(1_212_953, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_441_000 picoseconds.
        Weight::from_parts(2_498_000, 0)
            // Standard Error: 10_952
            .saturating_add(Weight::from_parts(1_853_288, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_322_000 picoseconds.
        Weight::from_parts(2_400_000, 0)
            // Standard Error: 8_982
            .saturating_add(Weight::from_parts(1_246_099, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_339_000 picoseconds.
        Weight::from_parts(2_379_000, 0)
            // Standard Error: 10_615
            .saturating_add(Weight::from_parts(1_916_545, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_296_000 picoseconds.
        Weight::from_parts(2_347_000, 0)
            // Standard Error: 7_945
            .saturating_add(Weight::from_parts(1_160_121, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_352_000 picoseconds.
        Weight::from_parts(2_433_000, 0)
            // Standard Error: 12_434
            .saturating_add(Weight::from_parts(1_890_871, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_227_000 picoseconds.
        Weight::from_parts(2_275_000, 0)
            // Standard Error: 8_466
            .saturating_add(Weight::from_parts(1_189_142, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_387_000 picoseconds.
        Weight::from_parts(2_433_000, 0)
            // Standard Error: 9_562
            .saturating_add(Weight::from_parts(1_913_805, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_397_000 picoseconds.
        Weight::from_parts(2_453_000, 0)
            // Standard Error: 8_349
            .saturating_add(Weight::from_parts(1_221_519, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_315_000 picoseconds.
        Weight::from_parts(2_355_000, 0)
            // Standard Error: 10_093
            .saturating_add(Weight::from_parts(1_881_533, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_287_000 picoseconds.
        Weight::from_parts(2_370_000, 0)
            // Standard Error: 7_082
            .saturating_add(Weight::from_parts(1_231_497, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_220_000 picoseconds.
        Weight::from_parts(2_341_000, 0)
            // Standard Error: 11_188
            .saturating_add(Weight::from_parts(1_892_542, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_313_000 picoseconds.
        Weight::from_parts(2_353_000, 0)
            // Standard Error: 8_716
            .saturating_add(Weight::from_parts(1_218_178, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_239_000 picoseconds.
        Weight::from_parts(2_356_000, 0)
            // Standard Error: 8_426
            .saturating_add(Weight::from_parts(1_323_649, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_275_000 picoseconds.
        Weight::from_parts(2_384_000, 0)
            // Standard Error: 5_560
            .saturating_add(Weight::from_parts(649_388, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_346_000 picoseconds.
        Weight::from_parts(2_407_000, 0)
            // Standard Error: 9_499
            .saturating_add(Weight::from_parts(1_370_034, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_323_000 picoseconds.
        Weight::from_parts(2_422_000, 0)
            // Standard Error: 5_355
            .saturating_add(Weight::from_parts(645_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_257_000 picoseconds.
        Weight::from_parts(2_357_000, 0)
            // Standard Error: 10_316
            .saturating_add(Weight::from_parts(1_837_521, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(2_440_000, 0)
            // Standard Error: 8_479
            .saturating_add(Weight::from_parts(1_283_654, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_224_000 picoseconds.
        Weight::from_parts(5_078_638, 0)
            // Standard Error: 19_145
            .saturating_add(Weight::from_parts(2_441_269, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(743_741, 0)
            // Standard Error: 10_296
            .saturating_add(Weight::from_parts(2_489_746, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_318_000 picoseconds.
        Weight::from_parts(5_522_991, 0)
            // Standard Error: 28_662
            .saturating_add(Weight::from_parts(2_759_297, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_297_000 picoseconds.
        Weight::from_parts(3_099_874, 0)
            // Standard Error: 20_337
            .saturating_add(Weight::from_parts(2_436_064, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_373_000 picoseconds.
        Weight::from_parts(6_434_540, 0)
            // Standard Error: 50_735
            .saturating_add(Weight::from_parts(9_001_106, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_192_000 picoseconds.
        Weight::from_parts(8_945_321, 0)
            // Standard Error: 56_929
            .saturating_add(Weight::from_parts(7_128_931, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_279_000 picoseconds.
        Weight::from_parts(5_087_630, 0)
            // Standard Error: 20_381
            .saturating_add(Weight::from_parts(2_882_619, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_269_000 picoseconds.
        Weight::from_parts(1_907_400, 0)
            // Standard Error: 14_993
            .saturating_add(Weight::from_parts(2_493_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_287_000 picoseconds.
        Weight::from_parts(2_354_000, 0)
            // Standard Error: 8_867
            .saturating_add(Weight::from_parts(1_323_954, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_354_000 picoseconds.
        Weight::from_parts(2_469_000, 0)
            // Standard Error: 5_270
            .saturating_add(Weight::from_parts(672_646, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_348_000 picoseconds.
        Weight::from_parts(2_427_000, 0)
            // Standard Error: 9_912
            .saturating_add(Weight::from_parts(1_352_757, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_302_000 picoseconds.
        Weight::from_parts(2_340_000, 0)
            // Standard Error: 4_622
            .saturating_add(Weight::from_parts(663_322, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_392_000 picoseconds.
        Weight::from_parts(2_440_000, 0)
            // Standard Error: 8_661
            .saturating_add(Weight::from_parts(1_304_315, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_335_000 picoseconds.
        Weight::from_parts(2_394_000, 0)
            // Standard Error: 5_733
            .saturating_add(Weight::from_parts(670_569, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(2_360_000, 0)
            // Standard Error: 7_472
            .saturating_add(Weight::from_parts(1_136_559, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_306_000 picoseconds.
        Weight::from_parts(2_385_000, 0)
            // Standard Error: 3_618
            .saturating_add(Weight::from_parts(589_253, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_317_000 picoseconds.
        Weight::from_parts(2_368_000, 0)
            // Standard Error: 8_548
            .saturating_add(Weight::from_parts(1_120_856, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_237_000 picoseconds.
        Weight::from_parts(2_336_000, 0)
            // Standard Error: 5_006
            .saturating_add(Weight::from_parts(597_046, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_316_000 picoseconds.
        Weight::from_parts(2_395_000, 0)
            // Standard Error: 7_970
            .saturating_add(Weight::from_parts(1_149_280, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_298_000 picoseconds.
        Weight::from_parts(2_409_000, 0)
            // Standard Error: 4_049
            .saturating_add(Weight::from_parts(589_076, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_350_000 picoseconds.
        Weight::from_parts(2_464_000, 0)
            // Standard Error: 8_849
            .saturating_add(Weight::from_parts(1_148_474, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_304_000 picoseconds.
        Weight::from_parts(142_496, 0)
            // Standard Error: 5_479
            .saturating_add(Weight::from_parts(646_265, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_237_000 picoseconds.
        Weight::from_parts(2_326_000, 0)
            // Standard Error: 8_261
            .saturating_add(Weight::from_parts(1_109_112, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_222_000 picoseconds.
        Weight::from_parts(2_337_000, 0)
            // Standard Error: 4_610
            .saturating_add(Weight::from_parts(599_930, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_resume_session() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `330`
        //  Estimated: `3795`
        // Minimum execution time: 9_809_000 picoseconds.
        Weight::from_parts(10_156_000, 3795)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1090`
        //  Estimated: `23985`
        // Minimum execution time: 59_716_000 picoseconds.
        Weight::from_parts(77_026_000, 23985)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `888`
        //  Estimated: `22158`
        // Minimum execution time: 47_692_000 picoseconds.
        Weight::from_parts(60_755_000, 22158)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1010`
        //  Estimated: `34619`
        // Minimum execution time: 76_253_000 picoseconds.
        Weight::from_parts(77_953_000, 34619)
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `695`
        //  Estimated: `20509`
        // Minimum execution time: 32_357_000 picoseconds.
        Weight::from_parts(33_445_000, 20509)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `976`
        //  Estimated: `26636`
        // Minimum execution time: 47_926_000 picoseconds.
        Weight::from_parts(50_876_000, 26636)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_381_000 picoseconds.
        Weight::from_parts(3_566_000, 3545)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1605`
        //  Estimated: `58022`
        // Minimum execution time: 109_295_000 picoseconds.
        Weight::from_parts(113_319_000, 58022)
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1332`
        //  Estimated: `46962`
        // Minimum execution time: 91_222_000 picoseconds.
        Weight::from_parts(99_250_000, 46962)
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2314 + c * (16400 ±0)`
        //  Estimated: `19933 + c * (84480 ±0)`
        // Minimum execution time: 32_036_000 picoseconds.
        Weight::from_parts(32_309_000, 19933)
            // Standard Error: 65_728
            .saturating_add(Weight::from_parts(39_717_808, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 84480).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program_uninited(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3140 + c * (42 ±0)`
        //  Estimated: `60717 + c * (2947 ±0)`
        // Minimum execution time: 91_637_000 picoseconds.
        Weight::from_parts(88_157_290, 60717)
            // Standard Error: 2_601
            .saturating_add(Weight::from_parts(1_147_322, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2947).saturating_mul(c.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_860_000 picoseconds.
        Weight::from_parts(109_902_426, 0)
            // Standard Error: 87_456
            .saturating_add(Weight::from_parts(15_603_698, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_722_000 picoseconds.
        Weight::from_parts(109_322_150, 0)
            // Standard Error: 88_502
            .saturating_add(Weight::from_parts(19_976_164, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_832_000 picoseconds.
        Weight::from_parts(107_554_398, 0)
            // Standard Error: 84_477
            .saturating_add(Weight::from_parts(17_699_648, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_018_000 picoseconds.
        Weight::from_parts(106_534_970, 0)
            // Standard Error: 83_674
            .saturating_add(Weight::from_parts(18_522_146, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 581_018_000 picoseconds.
        Weight::from_parts(622_524_910, 0)
            // Standard Error: 1_089_411
            .saturating_add(Weight::from_parts(32_782_380, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 581_995_000 picoseconds.
        Weight::from_parts(627_369_326, 0)
            // Standard Error: 1_060_285
            .saturating_add(Weight::from_parts(30_074_450, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 113_896_000 picoseconds.
        Weight::from_parts(121_435_850, 0)
            // Standard Error: 89_066
            .saturating_add(Weight::from_parts(9_335_090, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 113_111_000 picoseconds.
        Weight::from_parts(121_946_094, 0)
            // Standard Error: 91_768
            .saturating_add(Weight::from_parts(3_379_896, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_416_000 picoseconds.
        Weight::from_parts(109_848_926, 0)
            // Standard Error: 2_246_907
            .saturating_add(Weight::from_parts(195_349_902, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_209_000 picoseconds.
        Weight::from_parts(106_241_878, 0)
            // Standard Error: 2_253_632
            .saturating_add(Weight::from_parts(187_195_472, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_803_000 picoseconds.
        Weight::from_parts(109_565_130, 0)
            // Standard Error: 1_477_238
            .saturating_add(Weight::from_parts(120_897_480, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_245_000 picoseconds.
        Weight::from_parts(105_590_164, 0)
            // Standard Error: 2_272_800
            .saturating_add(Weight::from_parts(188_047_714, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_063_000 picoseconds.
        Weight::from_parts(108_977_002, 0)
            // Standard Error: 2_282_702
            .saturating_add(Weight::from_parts(186_989_742, 0).saturating_mul(r.into()))
    }
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_056_000 picoseconds.
        Weight::from_parts(1_115_000, 0)
            // Standard Error: 946
            .saturating_add(Weight::from_parts(214_086, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_221_000 picoseconds.
        Weight::from_parts(3_269_000, 3610)
            // Standard Error: 978
            .saturating_add(Weight::from_parts(676_393, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_675_000 picoseconds.
        Weight::from_parts(90_836_513, 0)
            // Standard Error: 5_565
            .saturating_add(Weight::from_parts(2_387_271, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1354`
        //  Estimated: `51743`
        // Minimum execution time: 105_884_000 picoseconds.
        Weight::from_parts(108_140_000, 51743)
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `996`
        //  Estimated: `21591`
        // Minimum execution time: 54_868_000 picoseconds.
        Weight::from_parts(55_995_000, 21591)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `638`
        //  Estimated: `17474`
        // Minimum execution time: 29_109_000 picoseconds.
        Weight::from_parts(30_106_000, 17474)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `330`
        //  Estimated: `4125`
        // Minimum execution time: 8_455_000 picoseconds.
        Weight::from_parts(7_146_509, 4125)
            // Standard Error: 8_846
            .saturating_add(Weight::from_parts(13_376_010, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3179 + c * (16400 ±0)`
        //  Estimated: `43994 + c * (117282 ±0)`
        // Minimum execution time: 68_639_000 picoseconds.
        Weight::from_parts(70_011_000, 43994)
            // Standard Error: 55_407
            .saturating_add(Weight::from_parts(38_079_788, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
            .saturating_add(Weight::from_parts(0, 117282).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `5402`
        // Minimum execution time: 78_779_000 picoseconds.
        Weight::from_parts(76_029_472, 5402)
            // Standard Error: 51_854
            .saturating_add(Weight::from_parts(63_831_926, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1111`
        //  Estimated: `50600`
        // Minimum execution time: 94_492_000 picoseconds.
        Weight::from_parts(129_742_726, 50600)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_509, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `521`
        //  Estimated: `45152`
        // Minimum execution time: 10_659_684_000 picoseconds.
        Weight::from_parts(164_883_402, 45152)
            // Standard Error: 152_753
            .saturating_add(Weight::from_parts(65_173_180, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_486, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `513`
        //  Estimated: `31140`
        // Minimum execution time: 73_148_000 picoseconds.
        Weight::from_parts(49_931_257, 31140)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_038, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1353`
        //  Estimated: `54273`
        // Minimum execution time: 123_878_000 picoseconds.
        Weight::from_parts(103_954_193, 54273)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_056, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `121468`
        // Minimum execution time: 372_900_000 picoseconds.
        Weight::from_parts(390_064_444, 121468)
            .saturating_add(RocksDbWeight::get().reads(35_u64))
            .saturating_add(RocksDbWeight::get().writes(26_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `121468`
        // Minimum execution time: 393_123_000 picoseconds.
        Weight::from_parts(410_375_445, 121468)
            // Standard Error: 1_590
            .saturating_add(Weight::from_parts(1_726, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(35_u64))
            .saturating_add(RocksDbWeight::get().writes(26_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 60_100_000 picoseconds.
        Weight::from_parts(60_744_000, 3899)
            // Standard Error: 29_209
            .saturating_add(Weight::from_parts(64_129_628, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_272_000 picoseconds.
        Weight::from_parts(99_337_000, 0)
            // Standard Error: 4_324_831
            .saturating_add(Weight::from_parts(756_544_372, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 493_231_000 picoseconds.
        Weight::from_parts(451_292_021, 0)
            // Standard Error: 15_090
            .saturating_add(Weight::from_parts(31_767_915, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_028_000 picoseconds.
        Weight::from_parts(110_584_770, 0)
            // Standard Error: 212_483
            .saturating_add(Weight::from_parts(68_581_058, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_774_000 picoseconds.
        Weight::from_parts(128_482_142, 0)
            // Standard Error: 307_317
            .saturating_add(Weight::from_parts(91_160_872, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 20]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 200_763_000 picoseconds.
        Weight::from_parts(194_170_085, 0)
            // Standard Error: 24_264
            .saturating_add(Weight::from_parts(15_711_865, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_404_000 picoseconds.
        Weight::from_parts(108_434_795, 0)
            // Standard Error: 4_175
            .saturating_add(Weight::from_parts(2_452_279, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 180_204_000 picoseconds.
        Weight::from_parts(227_103_463, 0)
            // Standard Error: 16_895
            .saturating_add(Weight::from_parts(2_120_795, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_834_000 picoseconds.
        Weight::from_parts(123_414_569, 0)
            // Standard Error: 300_986
            .saturating_add(Weight::from_parts(95_299_971, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_792_000 picoseconds.
        Weight::from_parts(102_008_327, 0)
            // Standard Error: 304_636
            .saturating_add(Weight::from_parts(90_621_024, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_701_000 picoseconds.
        Weight::from_parts(104_245_367, 0)
            // Standard Error: 272_118
            .saturating_add(Weight::from_parts(86_878_148, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_289_000 picoseconds.
        Weight::from_parts(100_975_174, 0)
            // Standard Error: 263_425
            .saturating_add(Weight::from_parts(86_750_115, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_758_000 picoseconds.
        Weight::from_parts(95_386_425, 0)
            // Standard Error: 301_238
            .saturating_add(Weight::from_parts(88_496_732, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_187_000 picoseconds.
        Weight::from_parts(96_364_979, 0)
            // Standard Error: 305_738
            .saturating_add(Weight::from_parts(87_927_032, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_185_000 picoseconds.
        Weight::from_parts(89_709_363, 0)
            // Standard Error: 320_760
            .saturating_add(Weight::from_parts(91_081_622, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_154_000 picoseconds.
        Weight::from_parts(98_160_645, 0)
            // Standard Error: 287_920
            .saturating_add(Weight::from_parts(86_822_134, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 567_955_000 picoseconds.
        Weight::from_parts(629_827_659, 0)
            // Standard Error: 451_018
            .saturating_add(Weight::from_parts(144_448_983, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 709_108_000 picoseconds.
        Weight::from_parts(711_285_000, 0)
            // Standard Error: 65_024
            .saturating_add(Weight::from_parts(13_432_348, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_892_000 picoseconds.
        Weight::from_parts(107_662_184, 0)
            // Standard Error: 267_946
            .saturating_add(Weight::from_parts(97_370_636, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_670_000 picoseconds.
        Weight::from_parts(103_479_522, 0)
            // Standard Error: 265_912
            .saturating_add(Weight::from_parts(87_422_323, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_599_000 picoseconds.
        Weight::from_parts(93_194_444, 0)
            // Standard Error: 245_434
            .saturating_add(Weight::from_parts(90_837_708, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_225_000 picoseconds.
        Weight::from_parts(115_943_752, 0)
            // Standard Error: 360_544
            .saturating_add(Weight::from_parts(165_912_134, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_676_000 picoseconds.
        Weight::from_parts(107_379_000, 0)
            // Standard Error: 4_681_794
            .saturating_add(Weight::from_parts(862_457_025, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_998_000 picoseconds.
        Weight::from_parts(164_500_089, 0)
            // Standard Error: 371_339
            .saturating_add(Weight::from_parts(252_167_019, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 345_293_000 picoseconds.
        Weight::from_parts(357_799_000, 0)
            // Standard Error: 65_383
            .saturating_add(Weight::from_parts(21_142_419, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_305_000 picoseconds.
        Weight::from_parts(170_516_333, 0)
            // Standard Error: 389_897
            .saturating_add(Weight::from_parts(256_773_084, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 357_433_000 picoseconds.
        Weight::from_parts(365_140_000, 0)
            // Standard Error: 61_049
            .saturating_add(Weight::from_parts(21_142_255, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 575_016_000 picoseconds.
        Weight::from_parts(663_293_766, 0)
            // Standard Error: 486_941
            .saturating_add(Weight::from_parts(269_111_637, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 575_303_000 picoseconds.
        Weight::from_parts(654_163_710, 0)
            // Standard Error: 410_449
            .saturating_add(Weight::from_parts(275_124_142, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_957_000 picoseconds.
        Weight::from_parts(89_573_360, 0)
            // Standard Error: 319_207
            .saturating_add(Weight::from_parts(94_921_950, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_873_233_000 picoseconds.
        Weight::from_parts(2_009_197_932, 0)
            // Standard Error: 334_437
            .saturating_add(Weight::from_parts(166_306_712, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 324_051_000 picoseconds.
        Weight::from_parts(327_937_000, 0)
            // Standard Error: 50_807
            .saturating_add(Weight::from_parts(29_060_344, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_871_785_000 picoseconds.
        Weight::from_parts(2_010_488_993, 0)
            // Standard Error: 389_533
            .saturating_add(Weight::from_parts(213_281_319, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_874_990_000 picoseconds.
        Weight::from_parts(2_009_606_191, 0)
            // Standard Error: 337_322
            .saturating_add(Weight::from_parts(218_803_286, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 257_358_000 picoseconds.
        Weight::from_parts(335_563_477, 0)
            // Standard Error: 389_429
            .saturating_add(Weight::from_parts(271_419_342, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 530_624_000 picoseconds.
        Weight::from_parts(540_600_000, 0)
            // Standard Error: 59_447
            .saturating_add(Weight::from_parts(21_240_436, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_035_196_000 picoseconds.
        Weight::from_parts(2_144_110_460, 0)
            // Standard Error: 447_360
            .saturating_add(Weight::from_parts(242_716_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 121_327_000 picoseconds.
        Weight::from_parts(112_077_249, 0)
            // Standard Error: 1_116
            .saturating_add(Weight::from_parts(427_193, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_345_000 picoseconds.
        Weight::from_parts(116_214_021, 0)
            // Standard Error: 834
            .saturating_add(Weight::from_parts(420_680, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_562_000 picoseconds.
        Weight::from_parts(145_043_269, 0)
            // Standard Error: 385_144
            .saturating_add(Weight::from_parts(148_660_408, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_764_000 picoseconds.
        Weight::from_parts(119_580_000, 0)
            // Standard Error: 2_560
            .saturating_add(Weight::from_parts(620_909, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 123_150_000 picoseconds.
        Weight::from_parts(109_609_605, 0)
            // Standard Error: 1_162
            .saturating_add(Weight::from_parts(434_105, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 116_950_000 picoseconds.
        Weight::from_parts(108_731_061, 0)
            // Standard Error: 980
            .saturating_add(Weight::from_parts(428_966, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_860_000 picoseconds.
        Weight::from_parts(91_987_882, 0)
            // Standard Error: 308_569
            .saturating_add(Weight::from_parts(88_349_486, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_465_000 picoseconds.
        Weight::from_parts(92_405_430, 0)
            // Standard Error: 337_302
            .saturating_add(Weight::from_parts(86_350_561, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_084_000 picoseconds.
        Weight::from_parts(98_920_604, 0)
            // Standard Error: 280_808
            .saturating_add(Weight::from_parts(87_587_366, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 576_456_000 picoseconds.
        Weight::from_parts(612_958_935, 0)
            // Standard Error: 347_792
            .saturating_add(Weight::from_parts(108_643_260, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 606_352_000 picoseconds.
        Weight::from_parts(633_204_464, 0)
            // Standard Error: 2_851
            .saturating_add(Weight::from_parts(128_298, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_344_477_000 picoseconds.
        Weight::from_parts(2_509_016_591, 0)
            // Standard Error: 429_875
            .saturating_add(Weight::from_parts(123_970_246, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_461_896_000 picoseconds.
        Weight::from_parts(2_305_508_505, 0)
            // Standard Error: 16_986
            .saturating_add(Weight::from_parts(12_350_100, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_846_000 picoseconds.
        Weight::from_parts(124_996_080, 0)
            // Standard Error: 357_003
            .saturating_add(Weight::from_parts(116_069_823, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 164_497_000 picoseconds.
        Weight::from_parts(166_097_000, 0)
            // Standard Error: 48_633
            .saturating_add(Weight::from_parts(24_658_033, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_125_000 picoseconds.
        Weight::from_parts(89_264_173, 0)
            // Standard Error: 324_487
            .saturating_add(Weight::from_parts(86_982_165, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 153_972_000 picoseconds.
        Weight::from_parts(239_477_803, 0)
            // Standard Error: 294_322
            .saturating_add(Weight::from_parts(160_305_544, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 113_642_000 picoseconds.
        Weight::from_parts(176_489_952, 0)
            // Standard Error: 350_048
            .saturating_add(Weight::from_parts(337_483_577, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_035_236_000 picoseconds.
        Weight::from_parts(43_168_150_000, 0)
            // Standard Error: 256_279
            .saturating_add(Weight::from_parts(7_817_176, 0).saturating_mul(p.into()))
            // Standard Error: 256_266
            .saturating_add(Weight::from_parts(172_954_817, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 116_143_000 picoseconds.
        Weight::from_parts(187_130_550, 0)
            // Standard Error: 392_731
            .saturating_add(Weight::from_parts(340_514_973, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_667_632_000 picoseconds.
        Weight::from_parts(44_190_982_000, 0)
            // Standard Error: 279_396
            .saturating_add(Weight::from_parts(8_239_118, 0).saturating_mul(p.into()))
            // Standard Error: 279_382
            .saturating_add(Weight::from_parts(172_687_557, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_396_000 picoseconds.
        Weight::from_parts(121_166_556, 0)
            // Standard Error: 30_407
            .saturating_add(Weight::from_parts(1_992_654, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 100_032_000 picoseconds.
        Weight::from_parts(102_195_000, 1131)
            // Standard Error: 37_643
            .saturating_add(Weight::from_parts(15_727_390, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 104_476_000 picoseconds.
        Weight::from_parts(107_729_000, 1131)
            // Standard Error: 39_654
            .saturating_add(Weight::from_parts(41_500_001, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_351_625_000 picoseconds.
        Weight::from_parts(8_314_913_562, 5069931)
            // Standard Error: 74_292
            .saturating_add(Weight::from_parts(41_520_004, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1820 + p * (65580 ±0)`
        //  Estimated: `1946 + p * (75482 ±0)`
        // Minimum execution time: 103_499_000 picoseconds.
        Weight::from_parts(349_140_109, 1946)
            // Standard Error: 151_321
            .saturating_add(Weight::from_parts(55_863_369, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 106_974_000 picoseconds.
        Weight::from_parts(112_590_341, 1131)
            // Standard Error: 76_236
            .saturating_add(Weight::from_parts(38_974_728, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 634_017_000 picoseconds.
        Weight::from_parts(693_508_455, 1496)
            // Standard Error: 386_453
            .saturating_add(Weight::from_parts(47_359_059, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_141_162_000 picoseconds.
        Weight::from_parts(1_188_690_210, 317931)
            // Standard Error: 427_671
            .saturating_add(Weight::from_parts(44_565_698, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_377_000 picoseconds.
        Weight::from_parts(2_570_000, 0)
            // Standard Error: 190_011
            .saturating_add(Weight::from_parts(77_114_584, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_464_470_000 picoseconds.
        Weight::from_parts(4_284_421_833, 0)
            // Standard Error: 56_345
            .saturating_add(Weight::from_parts(4_858_332, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_479_786_000 picoseconds.
        Weight::from_parts(4_259_025_042, 0)
            // Standard Error: 85_159
            .saturating_add(Weight::from_parts(4_931_013, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_562_832_000 picoseconds.
        Weight::from_parts(11_455_025_848, 0)
            // Standard Error: 170_550
            .saturating_add(Weight::from_parts(10_498_222, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_091_826_000 picoseconds.
        Weight::from_parts(11_816_242_326, 0)
            // Standard Error: 144_686
            .saturating_add(Weight::from_parts(7_941_320, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_279_000 picoseconds.
        Weight::from_parts(2_323_000, 0)
            // Standard Error: 8_321
            .saturating_add(Weight::from_parts(3_827_487, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_257_000 picoseconds.
        Weight::from_parts(399_338, 0)
            // Standard Error: 9_103
            .saturating_add(Weight::from_parts(3_170_914, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_350_000 picoseconds.
        Weight::from_parts(3_420_212, 0)
            // Standard Error: 959
            .saturating_add(Weight::from_parts(1_568_229, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_283_000 picoseconds.
        Weight::from_parts(2_397_000, 0)
            // Standard Error: 8_705
            .saturating_add(Weight::from_parts(2_969_892, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_279_000 picoseconds.
        Weight::from_parts(4_651_805, 0)
            // Standard Error: 23_387
            .saturating_add(Weight::from_parts(5_037_118, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_774_000 picoseconds.
        Weight::from_parts(5_438_636, 0)
            // Standard Error: 1_617
            .saturating_add(Weight::from_parts(172_888, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_400_000 picoseconds.
        Weight::from_parts(4_605_201, 0)
            // Standard Error: 6_841
            .saturating_add(Weight::from_parts(2_583_822, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_583_822 -
            2_422_591, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_284_000 picoseconds.
        Weight::from_parts(4_635_043, 0)
            // Standard Error: 12_393
            .saturating_add(Weight::from_parts(2_422_591, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_764_000 picoseconds.
        Weight::from_parts(25_993_804, 0)
            // Standard Error: 46_908
            .saturating_add(Weight::from_parts(9_424_502, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_201_000 picoseconds.
        Weight::from_parts(3_047_684, 0)
            // Standard Error: 6_253
            .saturating_add(Weight::from_parts(1_235_385, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_388_000 picoseconds.
        Weight::from_parts(5_786_703, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_218_000 picoseconds.
        Weight::from_parts(8_926_393, 0)
            // Standard Error: 3_699
            .saturating_add(Weight::from_parts(474_324, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_282_000 picoseconds.
        Weight::from_parts(7_028_267, 0)
            // Standard Error: 8_855
            .saturating_add(Weight::from_parts(1_129_254, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_328_000 picoseconds.
        Weight::from_parts(9_361_197, 0)
            // Standard Error: 6_045
            .saturating_add(Weight::from_parts(1_076_581, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_017_000 picoseconds.
        Weight::from_parts(2_776_599, 0)
            // Standard Error: 7_620
            .saturating_add(Weight::from_parts(784_295, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_080_000 picoseconds.
        Weight::from_parts(145_049, 0)
            // Standard Error: 9_865
            .saturating_add(Weight::from_parts(1_499_091, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_241_000 picoseconds.
        Weight::from_parts(1_737_293, 0)
            // Standard Error: 12_201
            .saturating_add(Weight::from_parts(7_072_983, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_278_000 picoseconds.
        Weight::from_parts(2_377_000, 0)
            // Standard Error: 7_177
            .saturating_add(Weight::from_parts(3_395_194, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_350_000 picoseconds.
        Weight::from_parts(2_402_000, 0)
            // Standard Error: 6_537
            .saturating_add(Weight::from_parts(3_175_744, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_328_000 picoseconds.
        Weight::from_parts(2_452_000, 0)
            // Standard Error: 6_422
            .saturating_add(Weight::from_parts(3_123_273, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_276_000 picoseconds.
        Weight::from_parts(2_410_000, 0)
            // Standard Error: 5_026
            .saturating_add(Weight::from_parts(2_692_651, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_263_000 picoseconds.
        Weight::from_parts(2_312_000, 0)
            // Standard Error: 5_943
            .saturating_add(Weight::from_parts(648_321, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_319_000 picoseconds.
        Weight::from_parts(1_160_270, 0)
            // Standard Error: 4_473
            .saturating_add(Weight::from_parts(421_339, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_341_000 picoseconds.
        Weight::from_parts(2_470_000, 0)
            // Standard Error: 10_566
            .saturating_add(Weight::from_parts(1_885_207, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_267_000 picoseconds.
        Weight::from_parts(2_366_000, 0)
            // Standard Error: 8_174
            .saturating_add(Weight::from_parts(1_153_040, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_209_000 picoseconds.
        Weight::from_parts(1_287_056, 0)
            // Standard Error: 3_887
            .saturating_add(Weight::from_parts(393_107, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_296_000 picoseconds.
        Weight::from_parts(657_823, 0)
            // Standard Error: 5_683
            .saturating_add(Weight::from_parts(442_088, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_301_000 picoseconds.
        Weight::from_parts(2_367_000, 0)
            // Standard Error: 3_939
            .saturating_add(Weight::from_parts(525_921, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_355_000 picoseconds.
        Weight::from_parts(2_460_000, 0)
            // Standard Error: 4_509
            .saturating_add(Weight::from_parts(512_067, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_283_000 picoseconds.
        Weight::from_parts(396_390, 0)
            // Standard Error: 5_920
            .saturating_add(Weight::from_parts(513_767, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_305_000 picoseconds.
        Weight::from_parts(1_274_690, 0)
            // Standard Error: 4_135
            .saturating_add(Weight::from_parts(368_303, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_365_000 picoseconds.
        Weight::from_parts(2_635_228, 0)
            // Standard Error: 2_169
            .saturating_add(Weight::from_parts(171_434, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_338_000 picoseconds.
        Weight::from_parts(2_782_502, 0)
            // Standard Error: 2_260
            .saturating_add(Weight::from_parts(183_006, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_360_000 picoseconds.
        Weight::from_parts(2_410_000, 0)
            // Standard Error: 10_776
            .saturating_add(Weight::from_parts(1_905_057, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_311_000 picoseconds.
        Weight::from_parts(2_456_000, 0)
            // Standard Error: 7_701
            .saturating_add(Weight::from_parts(1_176_468, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_316_000 picoseconds.
        Weight::from_parts(2_418_000, 0)
            // Standard Error: 12_153
            .saturating_add(Weight::from_parts(1_905_400, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_280_000 picoseconds.
        Weight::from_parts(2_361_000, 0)
            // Standard Error: 8_311
            .saturating_add(Weight::from_parts(1_185_925, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_305_000 picoseconds.
        Weight::from_parts(2_424_000, 0)
            // Standard Error: 12_122
            .saturating_add(Weight::from_parts(1_843_290, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_348_000 picoseconds.
        Weight::from_parts(2_425_000, 0)
            // Standard Error: 7_558
            .saturating_add(Weight::from_parts(1_165_027, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_314_000 picoseconds.
        Weight::from_parts(2_435_000, 0)
            // Standard Error: 10_176
            .saturating_add(Weight::from_parts(1_938_731, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_216_000 picoseconds.
        Weight::from_parts(2_327_000, 0)
            // Standard Error: 7_457
            .saturating_add(Weight::from_parts(1_212_953, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_441_000 picoseconds.
        Weight::from_parts(2_498_000, 0)
            // Standard Error: 10_952
            .saturating_add(Weight::from_parts(1_853_288, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_322_000 picoseconds.
        Weight::from_parts(2_400_000, 0)
            // Standard Error: 8_982
            .saturating_add(Weight::from_parts(1_246_099, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_339_000 picoseconds.
        Weight::from_parts(2_379_000, 0)
            // Standard Error: 10_615
            .saturating_add(Weight::from_parts(1_916_545, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_296_000 picoseconds.
        Weight::from_parts(2_347_000, 0)
            // Standard Error: 7_945
            .saturating_add(Weight::from_parts(1_160_121, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_352_000 picoseconds.
        Weight::from_parts(2_433_000, 0)
            // Standard Error: 12_434
            .saturating_add(Weight::from_parts(1_890_871, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_227_000 picoseconds.
        Weight::from_parts(2_275_000, 0)
            // Standard Error: 8_466
            .saturating_add(Weight::from_parts(1_189_142, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_387_000 picoseconds.
        Weight::from_parts(2_433_000, 0)
            // Standard Error: 9_562
            .saturating_add(Weight::from_parts(1_913_805, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_397_000 picoseconds.
        Weight::from_parts(2_453_000, 0)
            // Standard Error: 8_349
            .saturating_add(Weight::from_parts(1_221_519, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_315_000 picoseconds.
        Weight::from_parts(2_355_000, 0)
            // Standard Error: 10_093
            .saturating_add(Weight::from_parts(1_881_533, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_287_000 picoseconds.
        Weight::from_parts(2_370_000, 0)
            // Standard Error: 7_082
            .saturating_add(Weight::from_parts(1_231_497, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_220_000 picoseconds.
        Weight::from_parts(2_341_000, 0)
            // Standard Error: 11_188
            .saturating_add(Weight::from_parts(1_892_542, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_313_000 picoseconds.
        Weight::from_parts(2_353_000, 0)
            // Standard Error: 8_716
            .saturating_add(Weight::from_parts(1_218_178, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_239_000 picoseconds.
        Weight::from_parts(2_356_000, 0)
            // Standard Error: 8_426
            .saturating_add(Weight::from_parts(1_323_649, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_275_000 picoseconds.
        Weight::from_parts(2_384_000, 0)
            // Standard Error: 5_560
            .saturating_add(Weight::from_parts(649_388, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_346_000 picoseconds.
        Weight::from_parts(2_407_000, 0)
            // Standard Error: 9_499
            .saturating_add(Weight::from_parts(1_370_034, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_323_000 picoseconds.
        Weight::from_parts(2_422_000, 0)
            // Standard Error: 5_355
            .saturating_add(Weight::from_parts(645_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_257_000 picoseconds.
        Weight::from_parts(2_357_000, 0)
            // Standard Error: 10_316
            .saturating_add(Weight::from_parts(1_837_521, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(2_440_000, 0)
            // Standard Error: 8_479
            .saturating_add(Weight::from_parts(1_283_654, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_224_000 picoseconds.
        Weight::from_parts(5_078_638, 0)
            // Standard Error: 19_145
            .saturating_add(Weight::from_parts(2_441_269, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(743_741, 0)
            // Standard Error: 10_296
            .saturating_add(Weight::from_parts(2_489_746, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_318_000 picoseconds.
        Weight::from_parts(5_522_991, 0)
            // Standard Error: 28_662
            .saturating_add(Weight::from_parts(2_759_297, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_297_000 picoseconds.
        Weight::from_parts(3_099_874, 0)
            // Standard Error: 20_337
            .saturating_add(Weight::from_parts(2_436_064, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_373_000 picoseconds.
        Weight::from_parts(6_434_540, 0)
            // Standard Error: 50_735
            .saturating_add(Weight::from_parts(9_001_106, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_192_000 picoseconds.
        Weight::from_parts(8_945_321, 0)
            // Standard Error: 56_929
            .saturating_add(Weight::from_parts(7_128_931, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_279_000 picoseconds.
        Weight::from_parts(5_087_630, 0)
            // Standard Error: 20_381
            .saturating_add(Weight::from_parts(2_882_619, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_269_000 picoseconds.
        Weight::from_parts(1_907_400, 0)
            // Standard Error: 14_993
            .saturating_add(Weight::from_parts(2_493_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_287_000 picoseconds.
        Weight::from_parts(2_354_000, 0)
            // Standard Error: 8_867
            .saturating_add(Weight::from_parts(1_323_954, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_354_000 picoseconds.
        Weight::from_parts(2_469_000, 0)
            // Standard Error: 5_270
            .saturating_add(Weight::from_parts(672_646, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_348_000 picoseconds.
        Weight::from_parts(2_427_000, 0)
            // Standard Error: 9_912
            .saturating_add(Weight::from_parts(1_352_757, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_302_000 picoseconds.
        Weight::from_parts(2_340_000, 0)
            // Standard Error: 4_622
            .saturating_add(Weight::from_parts(663_322, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_392_000 picoseconds.
        Weight::from_parts(2_440_000, 0)
            // Standard Error: 8_661
            .saturating_add(Weight::from_parts(1_304_315, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_335_000 picoseconds.
        Weight::from_parts(2_394_000, 0)
            // Standard Error: 5_733
            .saturating_add(Weight::from_parts(670_569, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(2_360_000, 0)
            // Standard Error: 7_472
            .saturating_add(Weight::from_parts(1_136_559, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_306_000 picoseconds.
        Weight::from_parts(2_385_000, 0)
            // Standard Error: 3_618
            .saturating_add(Weight::from_parts(589_253, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_317_000 picoseconds.
        Weight::from_parts(2_368_000, 0)
            // Standard Error: 8_548
            .saturating_add(Weight::from_parts(1_120_856, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_237_000 picoseconds.
        Weight::from_parts(2_336_000, 0)
            // Standard Error: 5_006
            .saturating_add(Weight::from_parts(597_046, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_316_000 picoseconds.
        Weight::from_parts(2_395_000, 0)
            // Standard Error: 7_970
            .saturating_add(Weight::from_parts(1_149_280, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_298_000 picoseconds.
        Weight::from_parts(2_409_000, 0)
            // Standard Error: 4_049
            .saturating_add(Weight::from_parts(589_076, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_350_000 picoseconds.
        Weight::from_parts(2_464_000, 0)
            // Standard Error: 8_849
            .saturating_add(Weight::from_parts(1_148_474, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_304_000 picoseconds.
        Weight::from_parts(142_496, 0)
            // Standard Error: 5_479
            .saturating_add(Weight::from_parts(646_265, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_237_000 picoseconds.
        Weight::from_parts(2_326_000, 0)
            // Standard Error: 8_261
            .saturating_add(Weight::from_parts(1_109_112, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_222_000 picoseconds.
        Weight::from_parts(2_337_000, 0)
            // Standard Error: 4_610
            .saturating_add(Weight::from_parts(599_930, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_resume_session() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `330`
        //  Estimated: `3795`
        // Minimum execution time: 9_809_000 picoseconds.
        Weight::from_parts(10_156_000, 3795)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1090`
        //  Estimated: `23985`
        // Minimum execution time: 59_716_000 picoseconds.
        Weight::from_parts(77_026_000, 23985)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `888`
        //  Estimated: `22158`
        // Minimum execution time: 47_692_000 picoseconds.
        Weight::from_parts(60_755_000, 22158)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1010`
        //  Estimated: `34619`
        // Minimum execution time: 76_253_000 picoseconds.
        Weight::from_parts(77_953_000, 34619)
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `695`
        //  Estimated: `20509`
        // Minimum execution time: 32_357_000 picoseconds.
        Weight::from_parts(33_445_000, 20509)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `976`
        //  Estimated: `26636`
        // Minimum execution time: 47_926_000 picoseconds.
        Weight::from_parts(50_876_000, 26636)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_381_000 picoseconds.
        Weight::from_parts(3_566_000, 3545)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1605`
        //  Estimated: `58022`
        // Minimum execution time: 109_295_000 picoseconds.
        Weight::from_parts(113_319_000, 58022)
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1332`
        //  Estimated: `46962`
        // Minimum execution time: 91_222_000 picoseconds.
        Weight::from_parts(99_250_000, 46962)
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2314 + c * (16400 ±0)`
        //  Estimated: `19933 + c * (84480 ±0)`
        // Minimum execution time: 32_036_000 picoseconds.
        Weight::from_parts(32_309_000, 19933)
            // Standard Error: 65_728
            .saturating_add(Weight::from_parts(39_717_808, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 84480).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program_uninited(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3140 + c * (42 ±0)`
        //  Estimated: `60717 + c * (2947 ±0)`
        // Minimum execution time: 91_637_000 picoseconds.
        Weight::from_parts(88_157_290, 60717)
            // Standard Error: 2_601
            .saturating_add(Weight::from_parts(1_147_322, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2947).saturating_mul(c.into()))
    }
}
