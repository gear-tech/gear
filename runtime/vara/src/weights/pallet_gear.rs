// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-07, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear-node benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
	fn allocation_cost() -> Weight;
	fn grow_cost() -> Weight;
	fn initial_cost() -> Weight;
	fn load_cost() -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn gas(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_msg_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_exit_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_no_more(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
	fn allocation_cost() -> Weight {
		// To be changed with the proper value.
		T::DbWeight::get().writes(1 as Weight)
	}
	fn grow_cost() -> Weight {
		// To be changed with the proper value.
		T::DbWeight::get().writes(1 as Weight)
	}
	fn initial_cost() -> Weight {
		T::DbWeight::get().writes(1 as Weight)
	}
	fn load_cost() -> Weight {
		T::DbWeight::get().reads(1 as Weight)
	}
    fn claim_value() -> Weight {
        (89_449_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(8 as Weight))
            .saturating_add(T::DbWeight::get().writes(6 as Weight))
    }
    fn upload_code(c: u32, ) -> Weight {
        (5_663_000 as Weight)
            // Standard Error: 0
            .saturating_add((49_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }
    fn create_program(s: u32, ) -> Weight {
        (3_591_000 as Weight)
            // Standard Error: 0
            .saturating_add((3_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(10 as Weight))
            .saturating_add(T::DbWeight::get().writes(8 as Weight))
    }
    fn upload_program(c: u32, s: u32, ) -> Weight {
        (0 as Weight)
            // Standard Error: 0
            .saturating_add((51_000 as Weight).saturating_mul(c as Weight))
            // Standard Error: 0
            .saturating_add((3_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(10 as Weight))
            .saturating_add(T::DbWeight::get().writes(11 as Weight))
    }
    fn send_message(p: u32, ) -> Weight {
        (71_494_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(10 as Weight))
            .saturating_add(T::DbWeight::get().writes(8 as Weight))
    }
    fn send_reply(p: u32, ) -> Weight {
        (114_168_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(14 as Weight))
            .saturating_add(T::DbWeight::get().writes(11 as Weight))
    }
    fn initial_allocation(_q: u32, ) -> Weight {
        (184_341_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(25 as Weight))
            .saturating_add(T::DbWeight::get().writes(23 as Weight))
    }
    fn alloc_in_handle(_q: u32, ) -> Weight {
        (285_254_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(26 as Weight))
            .saturating_add(T::DbWeight::get().writes(24 as Weight))
    }
    fn reinstrument(c: u32, ) -> Weight {
        (0 as Weight)
            // Standard Error: 0
            .saturating_add((52_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    fn alloc(r: u32, ) -> Weight {
        (93_015_000 as Weight)
            // Standard Error: 255_000
            .saturating_add((170_082_000 as Weight).saturating_mul(r as Weight))
    }
    fn gas(r: u32, ) -> Weight {
        (77_126_000 as Weight)
            // Standard Error: 86_000
            .saturating_add((61_908_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_gas_available(r: u32, ) -> Weight {
        (80_421_000 as Weight)
            // Standard Error: 75_000
            .saturating_add((59_293_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_msg_id(r: u32, ) -> Weight {
        (114_658_000 as Weight)
            // Standard Error: 97_000
            .saturating_add((72_554_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_origin(r: u32, ) -> Weight {
        (117_082_000 as Weight)
            // Standard Error: 147_000
            .saturating_add((72_610_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_program_id(r: u32, ) -> Weight {
        (114_840_000 as Weight)
            // Standard Error: 96_000
            .saturating_add((72_061_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_source(r: u32, ) -> Weight {
        (115_115_000 as Weight)
            // Standard Error: 91_000
            .saturating_add((72_602_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_value(r: u32, ) -> Weight {
        (116_249_000 as Weight)
            // Standard Error: 111_000
            .saturating_add((77_946_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_value_available(r: u32, ) -> Weight {
        (113_580_000 as Weight)
            // Standard Error: 117_000
            .saturating_add((78_174_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_size(r: u32, ) -> Weight {
        (81_023_000 as Weight)
            // Standard Error: 39_000
            .saturating_add((51_138_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_read(r: u32, ) -> Weight {
        (92_888_000 as Weight)
            // Standard Error: 131_000
            .saturating_add((77_798_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_read_per_kb(n: u32, ) -> Weight {
        (191_950_000 as Weight)
            // Standard Error: 19_000
            .saturating_add((6_812_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn gr_block_height(r: u32, ) -> Weight {
        (80_620_000 as Weight)
            // Standard Error: 65_000
            .saturating_add((51_639_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_block_timestamp(r: u32, ) -> Weight {
        (83_423_000 as Weight)
            // Standard Error: 78_000
            .saturating_add((58_954_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_send_init(r: u32, ) -> Weight {
        (109_159_000 as Weight)
            // Standard Error: 223_000
            .saturating_add((88_497_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_send_push(r: u32, ) -> Weight {
        (108_716_000 as Weight)
            // Standard Error: 188_000
            .saturating_add((173_005_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        (267_081_000 as Weight)
            // Standard Error: 50_000
            .saturating_add((51_149_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn gr_send_commit(r: u32, ) -> Weight {
        (115_537_000 as Weight)
            // Standard Error: 128_000
            .saturating_add((51_082_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        (122_056_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((1_197_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn gr_reply_commit(r: u32, ) -> Weight {
        (120_451_000 as Weight)
            // Standard Error: 113_000
            .saturating_add((98_658_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        (224_718_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((58_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(4 as Weight))
    }
    fn gr_reply_push(r: u32, ) -> Weight {
        (99_601_000 as Weight)
            // Standard Error: 111_000
            .saturating_add((79_217_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        (168_451_000 as Weight)
            // Standard Error: 57_000
            .saturating_add((51_718_000 as Weight).saturating_mul(n as Weight))
    }
    fn gr_reply_to(r: u32, ) -> Weight {
        (109_265_000 as Weight)
            // Standard Error: 123_000
            .saturating_add((74_158_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_debug(r: u32, ) -> Weight {
        (83_754_000 as Weight)
            // Standard Error: 85_000
            .saturating_add((72_511_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_exit_code(r: u32, ) -> Weight {
        (81_871_000 as Weight)
            // Standard Error: 77_000
            .saturating_add((51_130_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_exit(r: u32, ) -> Weight {
        (89_470_000 as Weight)
            // Standard Error: 348_000
            .saturating_add((25_757_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_leave(r: u32, ) -> Weight {
        (76_763_000 as Weight)
            // Standard Error: 128_000
            .saturating_add((13_948_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_wait(r: u32, ) -> Weight {
        (77_716_000 as Weight)
            // Standard Error: 543_000
            .saturating_add((13_447_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_wait_for(r: u32, ) -> Weight {
        (77_717_000 as Weight)
            // Standard Error: 110_000
            .saturating_add((32_742_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_wait_no_more(r: u32, ) -> Weight {
        (78_857_000 as Weight)
            // Standard Error: 198_000
            .saturating_add((31_399_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_wake(r: u32, ) -> Weight {
        (111_568_000 as Weight)
            // Standard Error: 190_000
            .saturating_add((115_000_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        (91_598_000 as Weight)
            // Standard Error: 998_000
            .saturating_add((47_810_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
        (145_026_000 as Weight)
            // Standard Error: 10_000
            .saturating_add((1_159_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        (2_969_000 as Weight)
            // Standard Error: 0
            .saturating_add((2_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64load(r: u32, ) -> Weight {
        (23_180_000 as Weight)
            // Standard Error: 7_000
            .saturating_add((181_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64store(r: u32, ) -> Weight {
        (34_582_000 as Weight)
            // Standard Error: 12_000
            .saturating_add((390_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_select(r: u32, ) -> Weight {
        (3_098_000 as Weight)
            // Standard Error: 0
            .saturating_add((609_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_if(r: u32, ) -> Weight {
        (3_057_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((622_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br(r: u32, ) -> Weight {
        (3_194_000 as Weight)
            // Standard Error: 0
            .saturating_add((479_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_if(r: u32, ) -> Weight {
        (3_197_000 as Weight)
            // Standard Error: 0
            .saturating_add((522_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_table(r: u32, ) -> Weight {
        (3_680_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_571_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        (4_346_000 as Weight)
            // Standard Error: 0
            .saturating_add((7_000 as Weight).saturating_mul(e as Weight))
    }
    fn instr_call(r: u32, ) -> Weight {
        (3_522_000 as Weight)
            // Standard Error: 0
            .saturating_add((641_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_call_indirect(r: u32, ) -> Weight {
        (4_045_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_476_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        (4_803_000 as Weight)
            // Standard Error: 0
            .saturating_add((78_000 as Weight).saturating_mul(p as Weight))
    }
    fn instr_local_get(r: u32, ) -> Weight {
        (3_091_000 as Weight)
            // Standard Error: 0
            .saturating_add((26_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_local_set(r: u32, ) -> Weight {
        (3_162_000 as Weight)
            // Standard Error: 0
            .saturating_add((50_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_local_tee(r: u32, ) -> Weight {
        (3_199_000 as Weight)
            // Standard Error: 0
            .saturating_add((51_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_global_get(r: u32, ) -> Weight {
        (13_988_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((61_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_global_set(r: u32, ) -> Weight {
        (14_015_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((74_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_memory_current(r: u32, ) -> Weight {
        (8_099_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((1_334_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64clz(r: u32, ) -> Weight {
        (3_140_000 as Weight)
            // Standard Error: 0
            .saturating_add((763_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ctz(r: u32, ) -> Weight {
        (3_146_000 as Weight)
            // Standard Error: 0
            .saturating_add((733_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64popcnt(r: u32, ) -> Weight {
        (3_002_000 as Weight)
            // Standard Error: 0
            .saturating_add((46_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64eqz(r: u32, ) -> Weight {
        (2_995_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        (3_053_000 as Weight)
            // Standard Error: 0
            .saturating_add((29_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64extendui32(r: u32, ) -> Weight {
        (3_040_000 as Weight)
            // Standard Error: 0
            .saturating_add((17_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        (3_085_000 as Weight)
            // Standard Error: 0
            .saturating_add((17_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64eq(r: u32, ) -> Weight {
        (3_004_000 as Weight)
            // Standard Error: 0
            .saturating_add((103_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ne(r: u32, ) -> Weight {
        (3_016_000 as Weight)
            // Standard Error: 0
            .saturating_add((103_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64lts(r: u32, ) -> Weight {
        (2_956_000 as Weight)
            // Standard Error: 0
            .saturating_add((106_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ltu(r: u32, ) -> Weight {
        (3_000_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64gts(r: u32, ) -> Weight {
        (3_019_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64gtu(r: u32, ) -> Weight {
        (2_987_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64les(r: u32, ) -> Weight {
        (2_992_000 as Weight)
            // Standard Error: 0
            .saturating_add((99_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64leu(r: u32, ) -> Weight {
        (2_969_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ges(r: u32, ) -> Weight {
        (2_970_000 as Weight)
            // Standard Error: 0
            .saturating_add((103_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64geu(r: u32, ) -> Weight {
        (2_953_000 as Weight)
            // Standard Error: 0
            .saturating_add((103_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64add(r: u32, ) -> Weight {
        (3_081_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64sub(r: u32, ) -> Weight {
        (3_072_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64mul(r: u32, ) -> Weight {
        (3_022_000 as Weight)
            // Standard Error: 0
            .saturating_add((111_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64divs(r: u32, ) -> Weight {
        (3_203_000 as Weight)
            // Standard Error: 0
            .saturating_add((450_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64divu(r: u32, ) -> Weight {
        (3_252_000 as Weight)
            // Standard Error: 0
            .saturating_add((443_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rems(r: u32, ) -> Weight {
        (3_450_000 as Weight)
            // Standard Error: 0
            .saturating_add((816_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64remu(r: u32, ) -> Weight {
        (3_152_000 as Weight)
            // Standard Error: 0
            .saturating_add((449_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64and(r: u32, ) -> Weight {
        (3_054_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64or(r: u32, ) -> Weight {
        (3_041_000 as Weight)
            // Standard Error: 0
            .saturating_add((85_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64xor(r: u32, ) -> Weight {
        (3_060_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shl(r: u32, ) -> Weight {
        (3_012_000 as Weight)
            // Standard Error: 0
            .saturating_add((77_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shrs(r: u32, ) -> Weight {
        (3_074_000 as Weight)
            // Standard Error: 0
            .saturating_add((76_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shru(r: u32, ) -> Weight {
        (3_055_000 as Weight)
            // Standard Error: 0
            .saturating_add((76_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rotl(r: u32, ) -> Weight {
        (3_031_000 as Weight)
            // Standard Error: 0
            .saturating_add((75_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rotr(r: u32, ) -> Weight {
        (3_049_000 as Weight)
            // Standard Error: 0
            .saturating_add((75_000 as Weight).saturating_mul(r as Weight))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn allocation_cost() -> Weight {
		// To be changed with the proper value.
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn grow_cost() -> Weight {
		// To be changed with the proper value.
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn initial_cost() -> Weight {
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn load_cost() -> Weight {
		RocksDbWeight::get().reads(1 as Weight)
	}
    fn claim_value() -> Weight {
        (89_449_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(8 as Weight))
            .saturating_add(RocksDbWeight::get().writes(6 as Weight))
    }
    fn upload_code(c: u32, ) -> Weight {
        (5_663_000 as Weight)
            // Standard Error: 0
            .saturating_add((49_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(3 as Weight))
    }
    fn create_program(s: u32, ) -> Weight {
        (3_591_000 as Weight)
            // Standard Error: 0
            .saturating_add((3_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(RocksDbWeight::get().reads(10 as Weight))
            .saturating_add(RocksDbWeight::get().writes(8 as Weight))
    }
    fn upload_program(c: u32, s: u32, ) -> Weight {
        (0 as Weight)
            // Standard Error: 0
            .saturating_add((51_000 as Weight).saturating_mul(c as Weight))
            // Standard Error: 0
            .saturating_add((3_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(RocksDbWeight::get().reads(10 as Weight))
            .saturating_add(RocksDbWeight::get().writes(11 as Weight))
    }
    fn send_message(p: u32, ) -> Weight {
        (71_494_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(RocksDbWeight::get().reads(10 as Weight))
            .saturating_add(RocksDbWeight::get().writes(8 as Weight))
    }
    fn send_reply(p: u32, ) -> Weight {
        (114_168_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(RocksDbWeight::get().reads(14 as Weight))
            .saturating_add(RocksDbWeight::get().writes(11 as Weight))
    }
    fn initial_allocation(_q: u32, ) -> Weight {
        (184_341_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(25 as Weight))
            .saturating_add(RocksDbWeight::get().writes(23 as Weight))
    }
    fn alloc_in_handle(_q: u32, ) -> Weight {
        (285_254_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(26 as Weight))
            .saturating_add(RocksDbWeight::get().writes(24 as Weight))
    }
    fn reinstrument(c: u32, ) -> Weight {
        (0 as Weight)
            // Standard Error: 0
            .saturating_add((52_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
    }
    fn alloc(r: u32, ) -> Weight {
        (93_015_000 as Weight)
            // Standard Error: 255_000
            .saturating_add((170_082_000 as Weight).saturating_mul(r as Weight))
    }
    fn gas(r: u32, ) -> Weight {
        (77_126_000 as Weight)
            // Standard Error: 86_000
            .saturating_add((61_908_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_gas_available(r: u32, ) -> Weight {
        (80_421_000 as Weight)
            // Standard Error: 75_000
            .saturating_add((59_293_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_msg_id(r: u32, ) -> Weight {
        (114_658_000 as Weight)
            // Standard Error: 97_000
            .saturating_add((72_554_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_origin(r: u32, ) -> Weight {
        (117_082_000 as Weight)
            // Standard Error: 147_000
            .saturating_add((72_610_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_program_id(r: u32, ) -> Weight {
        (114_840_000 as Weight)
            // Standard Error: 96_000
            .saturating_add((72_061_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_source(r: u32, ) -> Weight {
        (115_115_000 as Weight)
            // Standard Error: 91_000
            .saturating_add((72_602_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_value(r: u32, ) -> Weight {
        (116_249_000 as Weight)
            // Standard Error: 111_000
            .saturating_add((77_946_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_value_available(r: u32, ) -> Weight {
        (113_580_000 as Weight)
            // Standard Error: 117_000
            .saturating_add((78_174_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_size(r: u32, ) -> Weight {
        (81_023_000 as Weight)
            // Standard Error: 39_000
            .saturating_add((51_138_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_read(r: u32, ) -> Weight {
        (92_888_000 as Weight)
            // Standard Error: 131_000
            .saturating_add((77_798_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_read_per_kb(n: u32, ) -> Weight {
        (191_950_000 as Weight)
            // Standard Error: 19_000
            .saturating_add((6_812_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
    }
    fn gr_block_height(r: u32, ) -> Weight {
        (80_620_000 as Weight)
            // Standard Error: 65_000
            .saturating_add((51_639_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_block_timestamp(r: u32, ) -> Weight {
        (83_423_000 as Weight)
            // Standard Error: 78_000
            .saturating_add((58_954_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_send_init(r: u32, ) -> Weight {
        (109_159_000 as Weight)
            // Standard Error: 223_000
            .saturating_add((88_497_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_send_push(r: u32, ) -> Weight {
        (108_716_000 as Weight)
            // Standard Error: 188_000
            .saturating_add((173_005_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        (267_081_000 as Weight)
            // Standard Error: 50_000
            .saturating_add((51_149_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
    }
    fn gr_send_commit(r: u32, ) -> Weight {
        (115_537_000 as Weight)
            // Standard Error: 128_000
            .saturating_add((51_082_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        (122_056_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((1_197_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
    }
    fn gr_reply_commit(r: u32, ) -> Weight {
        (120_451_000 as Weight)
            // Standard Error: 113_000
            .saturating_add((98_658_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        (224_718_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((58_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(4 as Weight))
    }
    fn gr_reply_push(r: u32, ) -> Weight {
        (99_601_000 as Weight)
            // Standard Error: 111_000
            .saturating_add((79_217_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        (168_451_000 as Weight)
            // Standard Error: 57_000
            .saturating_add((51_718_000 as Weight).saturating_mul(n as Weight))
    }
    fn gr_reply_to(r: u32, ) -> Weight {
        (109_265_000 as Weight)
            // Standard Error: 123_000
            .saturating_add((74_158_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_debug(r: u32, ) -> Weight {
        (83_754_000 as Weight)
            // Standard Error: 85_000
            .saturating_add((72_511_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_exit_code(r: u32, ) -> Weight {
        (81_871_000 as Weight)
            // Standard Error: 77_000
            .saturating_add((51_130_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_exit(r: u32, ) -> Weight {
        (89_470_000 as Weight)
            // Standard Error: 348_000
            .saturating_add((25_757_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_leave(r: u32, ) -> Weight {
        (76_763_000 as Weight)
            // Standard Error: 128_000
            .saturating_add((13_948_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_wait(r: u32, ) -> Weight {
        (77_716_000 as Weight)
            // Standard Error: 543_000
            .saturating_add((13_447_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_wait_for(r: u32, ) -> Weight {
        (77_717_000 as Weight)
            // Standard Error: 110_000
            .saturating_add((32_742_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_wait_no_more(r: u32, ) -> Weight {
        (78_857_000 as Weight)
            // Standard Error: 198_000
            .saturating_add((31_399_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_wake(r: u32, ) -> Weight {
        (111_568_000 as Weight)
            // Standard Error: 190_000
            .saturating_add((115_000_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        (91_598_000 as Weight)
            // Standard Error: 998_000
            .saturating_add((47_810_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
        (145_026_000 as Weight)
            // Standard Error: 10_000
            .saturating_add((1_159_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        (2_969_000 as Weight)
            // Standard Error: 0
            .saturating_add((2_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64load(r: u32, ) -> Weight {
        (23_180_000 as Weight)
            // Standard Error: 7_000
            .saturating_add((181_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64store(r: u32, ) -> Weight {
        (34_582_000 as Weight)
            // Standard Error: 12_000
            .saturating_add((390_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_select(r: u32, ) -> Weight {
        (3_098_000 as Weight)
            // Standard Error: 0
            .saturating_add((609_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_if(r: u32, ) -> Weight {
        (3_057_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((622_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br(r: u32, ) -> Weight {
        (3_194_000 as Weight)
            // Standard Error: 0
            .saturating_add((479_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_if(r: u32, ) -> Weight {
        (3_197_000 as Weight)
            // Standard Error: 0
            .saturating_add((522_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_table(r: u32, ) -> Weight {
        (3_680_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_571_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        (4_346_000 as Weight)
            // Standard Error: 0
            .saturating_add((7_000 as Weight).saturating_mul(e as Weight))
    }
    fn instr_call(r: u32, ) -> Weight {
        (3_522_000 as Weight)
            // Standard Error: 0
            .saturating_add((641_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_call_indirect(r: u32, ) -> Weight {
        (4_045_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_476_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        (4_803_000 as Weight)
            // Standard Error: 0
            .saturating_add((78_000 as Weight).saturating_mul(p as Weight))
    }
    fn instr_local_get(r: u32, ) -> Weight {
        (3_091_000 as Weight)
            // Standard Error: 0
            .saturating_add((26_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_local_set(r: u32, ) -> Weight {
        (3_162_000 as Weight)
            // Standard Error: 0
            .saturating_add((50_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_local_tee(r: u32, ) -> Weight {
        (3_199_000 as Weight)
            // Standard Error: 0
            .saturating_add((51_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_global_get(r: u32, ) -> Weight {
        (13_988_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((61_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_global_set(r: u32, ) -> Weight {
        (14_015_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((74_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_memory_current(r: u32, ) -> Weight {
        (8_099_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((1_334_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64clz(r: u32, ) -> Weight {
        (3_140_000 as Weight)
            // Standard Error: 0
            .saturating_add((763_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ctz(r: u32, ) -> Weight {
        (3_146_000 as Weight)
            // Standard Error: 0
            .saturating_add((733_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64popcnt(r: u32, ) -> Weight {
        (3_002_000 as Weight)
            // Standard Error: 0
            .saturating_add((46_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64eqz(r: u32, ) -> Weight {
        (2_995_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        (3_053_000 as Weight)
            // Standard Error: 0
            .saturating_add((29_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64extendui32(r: u32, ) -> Weight {
        (3_040_000 as Weight)
            // Standard Error: 0
            .saturating_add((17_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        (3_085_000 as Weight)
            // Standard Error: 0
            .saturating_add((17_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64eq(r: u32, ) -> Weight {
        (3_004_000 as Weight)
            // Standard Error: 0
            .saturating_add((103_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ne(r: u32, ) -> Weight {
        (3_016_000 as Weight)
            // Standard Error: 0
            .saturating_add((103_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64lts(r: u32, ) -> Weight {
        (2_956_000 as Weight)
            // Standard Error: 0
            .saturating_add((106_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ltu(r: u32, ) -> Weight {
        (3_000_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64gts(r: u32, ) -> Weight {
        (3_019_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64gtu(r: u32, ) -> Weight {
        (2_987_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64les(r: u32, ) -> Weight {
        (2_992_000 as Weight)
            // Standard Error: 0
            .saturating_add((99_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64leu(r: u32, ) -> Weight {
        (2_969_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ges(r: u32, ) -> Weight {
        (2_970_000 as Weight)
            // Standard Error: 0
            .saturating_add((103_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64geu(r: u32, ) -> Weight {
        (2_953_000 as Weight)
            // Standard Error: 0
            .saturating_add((103_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64add(r: u32, ) -> Weight {
        (3_081_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64sub(r: u32, ) -> Weight {
        (3_072_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64mul(r: u32, ) -> Weight {
        (3_022_000 as Weight)
            // Standard Error: 0
            .saturating_add((111_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64divs(r: u32, ) -> Weight {
        (3_203_000 as Weight)
            // Standard Error: 0
            .saturating_add((450_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64divu(r: u32, ) -> Weight {
        (3_252_000 as Weight)
            // Standard Error: 0
            .saturating_add((443_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rems(r: u32, ) -> Weight {
        (3_450_000 as Weight)
            // Standard Error: 0
            .saturating_add((816_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64remu(r: u32, ) -> Weight {
        (3_152_000 as Weight)
            // Standard Error: 0
            .saturating_add((449_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64and(r: u32, ) -> Weight {
        (3_054_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64or(r: u32, ) -> Weight {
        (3_041_000 as Weight)
            // Standard Error: 0
            .saturating_add((85_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64xor(r: u32, ) -> Weight {
        (3_060_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shl(r: u32, ) -> Weight {
        (3_012_000 as Weight)
            // Standard Error: 0
            .saturating_add((77_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shrs(r: u32, ) -> Weight {
        (3_074_000 as Weight)
            // Standard Error: 0
            .saturating_add((76_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shru(r: u32, ) -> Weight {
        (3_055_000 as Weight)
            // Standard Error: 0
            .saturating_add((76_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rotl(r: u32, ) -> Weight {
        (3_031_000 as Weight)
            // Standard Error: 0
            .saturating_add((75_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rotr(r: u32, ) -> Weight {
        (3_049_000 as Weight)
            // Standard Error: 0
            .saturating_add((75_000 as Weight).saturating_mul(r as Weight))
    }
}