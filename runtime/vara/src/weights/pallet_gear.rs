// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-11, STEPS: `20`, REPEAT: `40`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --pallet=pallet_gear --steps=20 --repeat=40 --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=5000 --template=.maintain/frame-weight-template.hbs --output=vara.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_input_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reply_input_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_error(r: u32, ) -> Weight;
    fn gr_status_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 767 nanoseconds.
        Weight::from_ref_time(812_000)
            // Standard Error: 1_221
            .saturating_add(Weight::from_ref_time(217_262).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `145 + c * (1024 ±0)`
        //  Estimated: `2612 + c * (1024 ±0)`
        // Minimum execution time: 3_039 nanoseconds.
        Weight::from_parts(3_122_000, 2612)
            // Standard Error: 1_042
            .saturating_add(Weight::from_ref_time(678_200).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 47_129 nanoseconds.
        Weight::from_ref_time(82_280_033)
            // Standard Error: 4_689
            .saturating_add(Weight::from_ref_time(2_195_681).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `918`
        //  Estimated: `17301`
        // Minimum execution time: 51_048 nanoseconds.
        Weight::from_parts(53_019_000, 17301)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3290`
        // Minimum execution time: 57_161 nanoseconds.
        Weight::from_parts(58_039_000, 3290)
            // Standard Error: 147_892
            .saturating_add(Weight::from_ref_time(54_397_457).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `675`
        //  Estimated: `18282`
        // Minimum execution time: 46_309 nanoseconds.
        Weight::from_parts(66_050_334, 18282)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_271).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `126`
        //  Estimated: `14142`
        // Minimum execution time: 9_181_217 nanoseconds.
        Weight::from_parts(9_275_410_000, 14142)
            // Standard Error: 493_719
            .saturating_add(Weight::from_ref_time(29_631_010).saturating_mul(c.into()))
            // Standard Error: 29
            .saturating_add(Weight::from_ref_time(829).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `375`
        //  Estimated: `14765`
        // Minimum execution time: 47_724 nanoseconds.
        Weight::from_parts(30_924_174, 14765)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_125).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1113`
        //  Estimated: `31447`
        // Minimum execution time: 71_053 nanoseconds.
        Weight::from_parts(60_471_621, 31447)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_133).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `982`
        //  Estimated: `48842`
        // Minimum execution time: 275_927 nanoseconds.
        Weight::from_parts(286_370_592, 48842)
            // Standard Error: 948
            .saturating_add(Weight::from_ref_time(2_163).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(26_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `982`
        //  Estimated: `48842`
        // Minimum execution time: 289_321 nanoseconds.
        Weight::from_parts(300_092_103, 48842)
            .saturating_add(T::DbWeight::get().reads(26_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `243 + c * (1075 ±0)`
        //  Estimated: `2997 + c * (2150 ±0)`
        // Minimum execution time: 41_171 nanoseconds.
        Weight::from_parts(42_011_000, 2997)
            // Standard Error: 26_184
            .saturating_add(Weight::from_ref_time(51_812_968).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_proof_size(2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_242 nanoseconds.
        Weight::from_ref_time(69_181_800)
            // Standard Error: 305_945
            .saturating_add(Weight::from_ref_time(128_153_173).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 198_770 nanoseconds.
        Weight::from_ref_time(192_527_983)
            // Standard Error: 316_144
            .saturating_add(Weight::from_ref_time(126_671_134).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_470 nanoseconds.
        Weight::from_ref_time(88_699_487)
            // Standard Error: 3_645
            .saturating_add(Weight::from_ref_time(3_363_412).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 132_654 nanoseconds.
        Weight::from_ref_time(186_378_677)
            // Standard Error: 21_990
            .saturating_add(Weight::from_ref_time(3_297_160).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_043 nanoseconds.
        Weight::from_ref_time(116_920_829)
            // Standard Error: 347_877
            .saturating_add(Weight::from_ref_time(171_912_467).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_110 nanoseconds.
        Weight::from_ref_time(75_797_155)
            // Standard Error: 316_465
            .saturating_add(Weight::from_ref_time(173_616_738).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_532 nanoseconds.
        Weight::from_ref_time(64_213_227)
            // Standard Error: 301_766
            .saturating_add(Weight::from_ref_time(179_025_979).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_471 nanoseconds.
        Weight::from_ref_time(64_495_133)
            // Standard Error: 284_371
            .saturating_add(Weight::from_ref_time(177_738_849).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_666 nanoseconds.
        Weight::from_ref_time(76_478_840)
            // Standard Error: 321_926
            .saturating_add(Weight::from_ref_time(170_094_273).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_683 nanoseconds.
        Weight::from_ref_time(67_533_192)
            // Standard Error: 362_507
            .saturating_add(Weight::from_ref_time(170_203_694).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_953 nanoseconds.
        Weight::from_ref_time(77_906_831)
            // Standard Error: 388_143
            .saturating_add(Weight::from_ref_time(170_027_677).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_059 nanoseconds.
        Weight::from_ref_time(74_982_943)
            // Standard Error: 283_640
            .saturating_add(Weight::from_ref_time(170_214_122).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_265 nanoseconds.
        Weight::from_ref_time(70_654_552)
            // Standard Error: 316_842
            .saturating_add(Weight::from_ref_time(170_015_227).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 556_454 nanoseconds.
        Weight::from_ref_time(650_673_087)
            // Standard Error: 467_671
            .saturating_add(Weight::from_ref_time(228_794_857).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 795_370 nanoseconds.
        Weight::from_ref_time(804_310_000)
            // Standard Error: 45_783
            .saturating_add(Weight::from_ref_time(12_651_826).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_921 nanoseconds.
        Weight::from_ref_time(73_333_366)
            // Standard Error: 366_788
            .saturating_add(Weight::from_ref_time(170_014_561).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_684 nanoseconds.
        Weight::from_ref_time(70_518_218)
            // Standard Error: 293_348
            .saturating_add(Weight::from_ref_time(170_186_698).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_455 nanoseconds.
        Weight::from_ref_time(89_632_053)
            // Standard Error: 279_367
            .saturating_add(Weight::from_ref_time(230_094_500).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_306 nanoseconds.
        Weight::from_ref_time(131_523_472)
            // Standard Error: 421_909
            .saturating_add(Weight::from_ref_time(345_042_472).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 428_322 nanoseconds.
        Weight::from_ref_time(432_202_000)
            // Standard Error: 55_794
            .saturating_add(Weight::from_ref_time(20_583_567).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_607 nanoseconds.
        Weight::from_ref_time(154_881_981)
            // Standard Error: 371_132
            .saturating_add(Weight::from_ref_time(343_789_821).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 433_490 nanoseconds.
        Weight::from_ref_time(438_616_000)
            // Standard Error: 68_643
            .saturating_add(Weight::from_ref_time(20_929_641).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 568_340 nanoseconds.
        Weight::from_ref_time(616_185_150)
            // Standard Error: 364_196
            .saturating_add(Weight::from_ref_time(356_618_502).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 906_059 nanoseconds.
        Weight::from_ref_time(1_069_767_343)
            // Standard Error: 17_963
            .saturating_add(Weight::from_ref_time(40_165_902).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 556_589 nanoseconds.
        Weight::from_ref_time(648_034_398)
            // Standard Error: 557_639
            .saturating_add(Weight::from_ref_time(355_455_743).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_input_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 906_429 nanoseconds.
        Weight::from_ref_time(1_151_098_786)
            // Standard Error: 15_741
            .saturating_add(Weight::from_ref_time(40_077_677).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_858 nanoseconds.
        Weight::from_ref_time(57_161_789)
            // Standard Error: 287_172
            .saturating_add(Weight::from_ref_time(184_501_068).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_615_505 nanoseconds.
        Weight::from_ref_time(3_749_877_735)
            // Standard Error: 212_322
            .saturating_add(Weight::from_ref_time(242_217_134).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 499_901 nanoseconds.
        Weight::from_ref_time(506_107_000)
            // Standard Error: 56_960
            .saturating_add(Weight::from_ref_time(28_788_414).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_614_338 nanoseconds.
        Weight::from_ref_time(3_755_853_543)
            // Standard Error: 301_884
            .saturating_add(Weight::from_ref_time(300_050_144).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_611_768 nanoseconds.
        Weight::from_ref_time(3_745_365_874)
            // Standard Error: 302_925
            .saturating_add(Weight::from_ref_time(313_585_585).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_767_859 nanoseconds.
        Weight::from_ref_time(3_880_198_282)
            // Standard Error: 246_504
            .saturating_add(Weight::from_ref_time(319_335_293).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_162 nanoseconds.
        Weight::from_ref_time(82_670_528)
            // Standard Error: 186_716
            .saturating_add(Weight::from_ref_time(22_118_121).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_875 nanoseconds.
        Weight::from_ref_time(94_138_319)
            // Standard Error: 674
            .saturating_add(Weight::from_ref_time(411_456).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_846 nanoseconds.
        Weight::from_ref_time(82_231_692)
            // Standard Error: 197_240
            .saturating_add(Weight::from_ref_time(21_812_407).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_281 nanoseconds.
        Weight::from_ref_time(92_667_157)
            // Standard Error: 757
            .saturating_add(Weight::from_ref_time(414_942).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_392 nanoseconds.
        Weight::from_ref_time(81_839_921)
            // Standard Error: 187_935
            .saturating_add(Weight::from_ref_time(21_531_478).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_914 nanoseconds.
        Weight::from_ref_time(83_202_457)
            // Standard Error: 169_552
            .saturating_add(Weight::from_ref_time(18_968_642).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_038 nanoseconds.
        Weight::from_ref_time(134_755_477)
            // Standard Error: 378_455
            .saturating_add(Weight::from_ref_time(238_074_923).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_411 nanoseconds.
        Weight::from_ref_time(99_976_000)
            // Standard Error: 2_846
            .saturating_add(Weight::from_ref_time(606_488).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 549_889 nanoseconds.
        Weight::from_ref_time(561_395_552)
            // Standard Error: 456_569
            .saturating_add(Weight::from_ref_time(21_189_497).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 571_746 nanoseconds.
        Weight::from_ref_time(580_236_002)
            // Standard Error: 695
            .saturating_add(Weight::from_ref_time(508_539).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 550_458 nanoseconds.
        Weight::from_ref_time(560_109_884)
            // Standard Error: 630_804
            .saturating_add(Weight::from_ref_time(23_444_415).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_input_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 574_685 nanoseconds.
        Weight::from_ref_time(582_051_956)
            // Standard Error: 1_873
            .saturating_add(Weight::from_ref_time(510_920).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_662 nanoseconds.
        Weight::from_ref_time(92_987_913)
            // Standard Error: 221_712
            .saturating_add(Weight::from_ref_time(14_297_486).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_509 nanoseconds.
        Weight::from_ref_time(92_008_092)
            // Standard Error: 798
            .saturating_add(Weight::from_ref_time(430_013).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_934 nanoseconds.
        Weight::from_ref_time(70_759_484)
            // Standard Error: 375_882
            .saturating_add(Weight::from_ref_time(171_372_571).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_220 nanoseconds.
        Weight::from_ref_time(76_424_586)
            // Standard Error: 318_390
            .saturating_add(Weight::from_ref_time(171_997_799).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 561_001 nanoseconds.
        Weight::from_ref_time(596_859_697)
            // Standard Error: 379_506
            .saturating_add(Weight::from_ref_time(183_628_204).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(_n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 740_756 nanoseconds.
        Weight::from_ref_time(3_039_813_356)
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_105_959 nanoseconds.
        Weight::from_ref_time(4_241_883_621)
            // Standard Error: 298_317
            .saturating_add(Weight::from_ref_time(194_956_581).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_313_525 nanoseconds.
        Weight::from_ref_time(4_222_844_218)
            // Standard Error: 11_949
            .saturating_add(Weight::from_ref_time(12_247_234).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_532 nanoseconds.
        Weight::from_ref_time(115_997_414)
            // Standard Error: 400_928
            .saturating_add(Weight::from_ref_time(182_841_247).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 248_863 nanoseconds.
        Weight::from_ref_time(258_595_000)
            // Standard Error: 45_798
            .saturating_add(Weight::from_ref_time(25_617_839).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_378 nanoseconds.
        Weight::from_ref_time(106_540_287)
            // Standard Error: 360_771
            .saturating_add(Weight::from_ref_time(220_796_400).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_366 nanoseconds.
        Weight::from_ref_time(67_950_157)
            // Standard Error: 332_085
            .saturating_add(Weight::from_ref_time(170_391_240).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_828 nanoseconds.
        Weight::from_ref_time(82_857_794)
            // Standard Error: 180_972
            .saturating_add(Weight::from_ref_time(25_484_705).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_519 nanoseconds.
        Weight::from_ref_time(83_325_615)
            // Standard Error: 194_199
            .saturating_add(Weight::from_ref_time(16_666_534).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_762 nanoseconds.
        Weight::from_ref_time(84_503_586)
            // Standard Error: 188_007
            .saturating_add(Weight::from_ref_time(16_163_613).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_834 nanoseconds.
        Weight::from_ref_time(84_765_226)
            // Standard Error: 171_673
            .saturating_add(Weight::from_ref_time(15_646_173).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_798 nanoseconds.
        Weight::from_ref_time(84_251_847)
            // Standard Error: 171_586
            .saturating_add(Weight::from_ref_time(14_351_702).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 137_322 nanoseconds.
        Weight::from_ref_time(200_697_636)
            // Standard Error: 320_963
            .saturating_add(Weight::from_ref_time(244_738_457).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_865 nanoseconds.
        Weight::from_ref_time(150_624_235)
            // Standard Error: 325_518
            .saturating_add(Weight::from_ref_time(416_647_448).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_720_082 nanoseconds.
        Weight::from_ref_time(43_846_552_000)
            // Standard Error: 293_744
            .saturating_add(Weight::from_ref_time(7_459_899).saturating_mul(p.into()))
            // Standard Error: 293_727
            .saturating_add(Weight::from_ref_time(152_532_022).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_823 nanoseconds.
        Weight::from_ref_time(155_198_433)
            // Standard Error: 400_706
            .saturating_add(Weight::from_ref_time(416_847_817).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 45_667_467 nanoseconds.
        Weight::from_ref_time(45_846_668_000)
            // Standard Error: 326_915
            .saturating_add(Weight::from_ref_time(8_405_199).saturating_mul(p.into()))
            // Standard Error: 326_897
            .saturating_add(Weight::from_ref_time(151_603_274).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 186_000 nanoseconds.
        Weight::from_ref_time(180_165_128)
            // Standard Error: 369_219
            .saturating_add(Weight::from_ref_time(385_226_688).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 560_000 nanoseconds.
        Weight::from_ref_time(495_268_611)
            // Standard Error: 13_235
            .saturating_add(Weight::from_ref_time(12_068_004).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_000 nanoseconds.
        Weight::from_ref_time(83_223_684)
            // Standard Error: 299_637
            .saturating_add(Weight::from_ref_time(5_826_315).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_000 nanoseconds.
        Weight::from_ref_time(82_873_951)
            // Standard Error: 1_405
            .saturating_add(Weight::from_ref_time(234_449).saturating_mul(n.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 79_877 nanoseconds.
        Weight::from_parts(105_493_582, 141)
            // Standard Error: 8_059
            .saturating_add(Weight::from_ref_time(11_745_535).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 80_873 nanoseconds.
        Weight::from_parts(82_482_000, 141)
            // Standard Error: 26_904
            .saturating_add(Weight::from_ref_time(33_803_798).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5068941`
        // Minimum execution time: 6_024_930 nanoseconds.
        Weight::from_parts(5_883_233_796, 5068941)
            // Standard Error: 67_895
            .saturating_add(Weight::from_ref_time(35_760_405).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65704 ±0)`
        //  Estimated: `1012 + p * (75606 ±0)`
        // Minimum execution time: 80_963 nanoseconds.
        Weight::from_parts(82_817_000, 1012)
            // Standard Error: 52_524
            .saturating_add(Weight::from_ref_time(45_774_962).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(75606).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `584 + p * (9879 ±2)`
        // Minimum execution time: 95_468 nanoseconds.
        Weight::from_parts(93_982_156, 584)
            // Standard Error: 44_732
            .saturating_add(Weight::from_ref_time(35_514_215).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `584 + p * (9879 ±2)`
        // Minimum execution time: 582_845 nanoseconds.
        Weight::from_parts(581_724_705, 584)
            // Standard Error: 61_738
            .saturating_add(Weight::from_ref_time(40_476_620).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `316941`
        // Minimum execution time: 964_304 nanoseconds.
        Weight::from_parts(976_795_473, 316941)
            // Standard Error: 148_165
            .saturating_add(Weight::from_ref_time(42_648_026).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_228_267 nanoseconds.
        Weight::from_ref_time(4_217_173_792)
            // Standard Error: 14_098
            .saturating_add(Weight::from_ref_time(3_358_641).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_227_066 nanoseconds.
        Weight::from_ref_time(4_214_398_460)
            // Standard Error: 14_310
            .saturating_add(Weight::from_ref_time(3_401_925).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_517_073 nanoseconds.
        Weight::from_ref_time(9_626_826_782)
            // Standard Error: 143_316
            .saturating_add(Weight::from_ref_time(15_680_186).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_177_640 nanoseconds.
        Weight::from_ref_time(9_471_091_522)
            // Standard Error: 149_380
            .saturating_add(Weight::from_ref_time(12_354_963).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_061 nanoseconds.
        Weight::from_ref_time(2_106_000)
            // Standard Error: 9_336
            .saturating_add(Weight::from_ref_time(3_748_927).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_947 nanoseconds.
        Weight::from_ref_time(2_084_000)
            // Standard Error: 4_662
            .saturating_add(Weight::from_ref_time(3_057_390).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_034 nanoseconds.
        Weight::from_ref_time(3_071_952)
            // Standard Error: 1_152
            .saturating_add(Weight::from_ref_time(1_563_191).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_985 nanoseconds.
        Weight::from_ref_time(2_103_000)
            // Standard Error: 5_932
            .saturating_add(Weight::from_ref_time(3_020_666).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_993 nanoseconds.
        Weight::from_ref_time(2_069_000)
            // Standard Error: 5_862
            .saturating_add(Weight::from_ref_time(5_170_649).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_562 nanoseconds.
        Weight::from_ref_time(3_762_676)
            // Standard Error: 2_122
            .saturating_add(Weight::from_ref_time(163_615).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_100 nanoseconds.
        Weight::from_ref_time(3_458_940)
            // Standard Error: 6_301
            .saturating_add(Weight::from_ref_time(2_572_179).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(2_572_179 -
            2_489_435).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_005 nanoseconds.
        Weight::from_ref_time(2_361_442)
            // Standard Error: 12_617
            .saturating_add(Weight::from_ref_time(2_489_435).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_443 nanoseconds.
        Weight::from_ref_time(12_309_983)
            // Standard Error: 25_992
            .saturating_add(Weight::from_ref_time(9_956_100).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_022 nanoseconds.
        Weight::from_ref_time(3_347_999)
            // Standard Error: 6_342
            .saturating_add(Weight::from_ref_time(1_154_145).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_049 nanoseconds.
        Weight::from_ref_time(5_290_457)
            // Standard Error: 10
            .saturating_add(Weight::from_ref_time(44).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_036 nanoseconds.
        Weight::from_ref_time(1_389_943)
            // Standard Error: 3_531
            .saturating_add(Weight::from_ref_time(264_081).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_994 nanoseconds.
        Weight::from_ref_time(2_062_000)
            // Standard Error: 5_558
            .saturating_add(Weight::from_ref_time(751_514).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_995 nanoseconds.
        Weight::from_ref_time(2_106_000)
            // Standard Error: 7_191
            .saturating_add(Weight::from_ref_time(763_036).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_870 nanoseconds.
        Weight::from_ref_time(1_403_865)
            // Standard Error: 11_101
            .saturating_add(Weight::from_ref_time(801_567).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_899 nanoseconds.
        Weight::from_ref_time(5_976_000)
            // Standard Error: 9_560
            .saturating_add(Weight::from_ref_time(1_334_642).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_858 nanoseconds.
        Weight::from_ref_time(1_360_288)
            // Standard Error: 13_982
            .saturating_add(Weight::from_ref_time(6_861_743).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_034 nanoseconds.
        Weight::from_ref_time(2_091_000)
            // Standard Error: 8_329
            .saturating_add(Weight::from_ref_time(3_241_399).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_944 nanoseconds.
        Weight::from_ref_time(2_069_000)
            // Standard Error: 10_883
            .saturating_add(Weight::from_ref_time(3_082_135).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_057 nanoseconds.
        Weight::from_ref_time(2_099_000)
            // Standard Error: 7_541
            .saturating_add(Weight::from_ref_time(3_076_077).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_000 nanoseconds.
        Weight::from_ref_time(2_079_000)
            // Standard Error: 6_473
            .saturating_add(Weight::from_ref_time(2_618_173).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_935 nanoseconds.
        Weight::from_ref_time(2_069_000)
            // Standard Error: 5_267
            .saturating_add(Weight::from_ref_time(558_660).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_021 nanoseconds.
        Weight::from_ref_time(1_146_096)
            // Standard Error: 3_661
            .saturating_add(Weight::from_ref_time(404_446).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_975 nanoseconds.
        Weight::from_ref_time(2_050_000)
            // Standard Error: 11_464
            .saturating_add(Weight::from_ref_time(1_834_663).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_960 nanoseconds.
        Weight::from_ref_time(2_029_000)
            // Standard Error: 9_836
            .saturating_add(Weight::from_ref_time(1_147_285).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_018 nanoseconds.
        Weight::from_ref_time(1_436_221)
            // Standard Error: 2_897
            .saturating_add(Weight::from_ref_time(332_753).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_967 nanoseconds.
        Weight::from_ref_time(2_196_495)
            // Standard Error: 2_212
            .saturating_add(Weight::from_ref_time(165_351).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_008 nanoseconds.
        Weight::from_ref_time(2_304_336)
            // Standard Error: 1_694
            .saturating_add(Weight::from_ref_time(176_357).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_028 nanoseconds.
        Weight::from_ref_time(2_076_000)
            // Standard Error: 12_736
            .saturating_add(Weight::from_ref_time(1_808_089).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_984 nanoseconds.
        Weight::from_ref_time(2_093_000)
            // Standard Error: 9_059
            .saturating_add(Weight::from_ref_time(1_118_374).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_006 nanoseconds.
        Weight::from_ref_time(2_087_000)
            // Standard Error: 10_895
            .saturating_add(Weight::from_ref_time(1_903_891).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_964 nanoseconds.
        Weight::from_ref_time(2_081_000)
            // Standard Error: 8_856
            .saturating_add(Weight::from_ref_time(1_186_220).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_981 nanoseconds.
        Weight::from_ref_time(2_040_000)
            // Standard Error: 11_304
            .saturating_add(Weight::from_ref_time(1_845_269).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_967 nanoseconds.
        Weight::from_ref_time(2_052_000)
            // Standard Error: 8_883
            .saturating_add(Weight::from_ref_time(1_154_297).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_005 nanoseconds.
        Weight::from_ref_time(2_092_000)
            // Standard Error: 10_736
            .saturating_add(Weight::from_ref_time(1_827_020).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_959 nanoseconds.
        Weight::from_ref_time(2_066_000)
            // Standard Error: 8_220
            .saturating_add(Weight::from_ref_time(1_163_398).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_967 nanoseconds.
        Weight::from_ref_time(2_043_000)
            // Standard Error: 11_044
            .saturating_add(Weight::from_ref_time(1_820_517).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_966 nanoseconds.
        Weight::from_ref_time(2_066_000)
            // Standard Error: 8_228
            .saturating_add(Weight::from_ref_time(1_160_890).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_965 nanoseconds.
        Weight::from_ref_time(2_019_000)
            // Standard Error: 10_937
            .saturating_add(Weight::from_ref_time(1_799_335).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_946 nanoseconds.
        Weight::from_ref_time(2_018_000)
            // Standard Error: 8_709
            .saturating_add(Weight::from_ref_time(1_159_022).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_015 nanoseconds.
        Weight::from_ref_time(2_078_000)
            // Standard Error: 10_487
            .saturating_add(Weight::from_ref_time(1_805_296).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_984 nanoseconds.
        Weight::from_ref_time(2_031_000)
            // Standard Error: 8_975
            .saturating_add(Weight::from_ref_time(1_158_901).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_012 nanoseconds.
        Weight::from_ref_time(2_086_000)
            // Standard Error: 13_186
            .saturating_add(Weight::from_ref_time(1_783_792).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_965 nanoseconds.
        Weight::from_ref_time(2_043_000)
            // Standard Error: 10_159
            .saturating_add(Weight::from_ref_time(1_202_939).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_015 nanoseconds.
        Weight::from_ref_time(2_075_000)
            // Standard Error: 11_995
            .saturating_add(Weight::from_ref_time(1_865_225).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_985 nanoseconds.
        Weight::from_ref_time(2_106_000)
            // Standard Error: 9_298
            .saturating_add(Weight::from_ref_time(1_183_427).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_971 nanoseconds.
        Weight::from_ref_time(2_087_000)
            // Standard Error: 10_678
            .saturating_add(Weight::from_ref_time(1_868_921).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_058 nanoseconds.
        Weight::from_ref_time(2_118_000)
            // Standard Error: 9_837
            .saturating_add(Weight::from_ref_time(1_179_249).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_928 nanoseconds.
        Weight::from_ref_time(2_037_000)
            // Standard Error: 9_447
            .saturating_add(Weight::from_ref_time(1_313_310).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_023 nanoseconds.
        Weight::from_ref_time(2_079_000)
            // Standard Error: 4_870
            .saturating_add(Weight::from_ref_time(640_849).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_968 nanoseconds.
        Weight::from_ref_time(2_062_000)
            // Standard Error: 9_332
            .saturating_add(Weight::from_ref_time(1_302_741).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_021 nanoseconds.
        Weight::from_ref_time(2_088_000)
            // Standard Error: 5_326
            .saturating_add(Weight::from_ref_time(646_886).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_969 nanoseconds.
        Weight::from_ref_time(2_047_000)
            // Standard Error: 10_880
            .saturating_add(Weight::from_ref_time(1_783_332).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_971 nanoseconds.
        Weight::from_ref_time(2_047_000)
            // Standard Error: 9_224
            .saturating_add(Weight::from_ref_time(1_237_580).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_979 nanoseconds.
        Weight::from_ref_time(1_656_784)
            // Standard Error: 15_758
            .saturating_add(Weight::from_ref_time(2_627_106).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_994 nanoseconds.
        Weight::from_ref_time(745_890)
            // Standard Error: 11_829
            .saturating_add(Weight::from_ref_time(2_395_540).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_978 nanoseconds.
        Weight::from_ref_time(1_829_438)
            // Standard Error: 13_870
            .saturating_add(Weight::from_ref_time(2_842_707).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_949 nanoseconds.
        Weight::from_ref_time(2_033_000)
            // Standard Error: 9_310
            .saturating_add(Weight::from_ref_time(2_380_282).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_999 nanoseconds.
        Weight::from_ref_time(2_053_000)
            // Standard Error: 14_951
            .saturating_add(Weight::from_ref_time(9_506_621).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_958 nanoseconds.
        Weight::from_ref_time(815_806)
            // Standard Error: 43_497
            .saturating_add(Weight::from_ref_time(7_793_640).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_999 nanoseconds.
        Weight::from_ref_time(3_339_517)
            // Standard Error: 9_991
            .saturating_add(Weight::from_ref_time(2_871_175).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_971 nanoseconds.
        Weight::from_ref_time(2_412_466)
            // Standard Error: 10_421
            .saturating_add(Weight::from_ref_time(2_371_403).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_992 nanoseconds.
        Weight::from_ref_time(2_060_000)
            // Standard Error: 8_683
            .saturating_add(Weight::from_ref_time(1_310_650).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_991 nanoseconds.
        Weight::from_ref_time(2_063_000)
            // Standard Error: 4_470
            .saturating_add(Weight::from_ref_time(629_510).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_972 nanoseconds.
        Weight::from_ref_time(2_021_000)
            // Standard Error: 9_232
            .saturating_add(Weight::from_ref_time(1_301_970).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_009 nanoseconds.
        Weight::from_ref_time(2_067_000)
            // Standard Error: 5_252
            .saturating_add(Weight::from_ref_time(644_447).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_949 nanoseconds.
        Weight::from_ref_time(2_053_000)
            // Standard Error: 8_459
            .saturating_add(Weight::from_ref_time(1_292_517).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_000 nanoseconds.
        Weight::from_ref_time(2_096_000)
            // Standard Error: 4_348
            .saturating_add(Weight::from_ref_time(641_080).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_951 nanoseconds.
        Weight::from_ref_time(2_007_000)
            // Standard Error: 7_056
            .saturating_add(Weight::from_ref_time(1_087_085).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_984 nanoseconds.
        Weight::from_ref_time(2_048_000)
            // Standard Error: 4_341
            .saturating_add(Weight::from_ref_time(591_595).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_984 nanoseconds.
        Weight::from_ref_time(2_093_000)
            // Standard Error: 7_276
            .saturating_add(Weight::from_ref_time(1_094_649).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_022 nanoseconds.
        Weight::from_ref_time(2_091_000)
            // Standard Error: 5_305
            .saturating_add(Weight::from_ref_time(602_597).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_968 nanoseconds.
        Weight::from_ref_time(2_045_000)
            // Standard Error: 8_673
            .saturating_add(Weight::from_ref_time(1_097_589).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_968 nanoseconds.
        Weight::from_ref_time(2_033_000)
            // Standard Error: 4_218
            .saturating_add(Weight::from_ref_time(580_374).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_980 nanoseconds.
        Weight::from_ref_time(2_046_000)
            // Standard Error: 7_888
            .saturating_add(Weight::from_ref_time(1_090_944).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_961 nanoseconds.
        Weight::from_ref_time(64_963)
            // Standard Error: 5_922
            .saturating_add(Weight::from_ref_time(618_069).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_976 nanoseconds.
        Weight::from_ref_time(2_085_000)
            // Standard Error: 7_071
            .saturating_add(Weight::from_ref_time(1_105_946).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_003 nanoseconds.
        Weight::from_ref_time(2_078_000)
            // Standard Error: 4_007
            .saturating_add(Weight::from_ref_time(585_944).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 767 nanoseconds.
        Weight::from_ref_time(812_000)
            // Standard Error: 1_221
            .saturating_add(Weight::from_ref_time(217_262).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `145 + c * (1024 ±0)`
        //  Estimated: `2612 + c * (1024 ±0)`
        // Minimum execution time: 3_039 nanoseconds.
        Weight::from_parts(3_122_000, 2612)
            // Standard Error: 1_042
            .saturating_add(Weight::from_ref_time(678_200).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 47_129 nanoseconds.
        Weight::from_ref_time(82_280_033)
            // Standard Error: 4_689
            .saturating_add(Weight::from_ref_time(2_195_681).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `918`
        //  Estimated: `17301`
        // Minimum execution time: 51_048 nanoseconds.
        Weight::from_parts(53_019_000, 17301)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3290`
        // Minimum execution time: 57_161 nanoseconds.
        Weight::from_parts(58_039_000, 3290)
            // Standard Error: 147_892
            .saturating_add(Weight::from_ref_time(54_397_457).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `675`
        //  Estimated: `18282`
        // Minimum execution time: 46_309 nanoseconds.
        Weight::from_parts(66_050_334, 18282)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_271).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `126`
        //  Estimated: `14142`
        // Minimum execution time: 9_181_217 nanoseconds.
        Weight::from_parts(9_275_410_000, 14142)
            // Standard Error: 493_719
            .saturating_add(Weight::from_ref_time(29_631_010).saturating_mul(c.into()))
            // Standard Error: 29
            .saturating_add(Weight::from_ref_time(829).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `375`
        //  Estimated: `14765`
        // Minimum execution time: 47_724 nanoseconds.
        Weight::from_parts(30_924_174, 14765)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_125).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1113`
        //  Estimated: `31447`
        // Minimum execution time: 71_053 nanoseconds.
        Weight::from_parts(60_471_621, 31447)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_133).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `982`
        //  Estimated: `48842`
        // Minimum execution time: 275_927 nanoseconds.
        Weight::from_parts(286_370_592, 48842)
            // Standard Error: 948
            .saturating_add(Weight::from_ref_time(2_163).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(26_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `982`
        //  Estimated: `48842`
        // Minimum execution time: 289_321 nanoseconds.
        Weight::from_parts(300_092_103, 48842)
            .saturating_add(RocksDbWeight::get().reads(26_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `243 + c * (1075 ±0)`
        //  Estimated: `2997 + c * (2150 ±0)`
        // Minimum execution time: 41_171 nanoseconds.
        Weight::from_parts(42_011_000, 2997)
            // Standard Error: 26_184
            .saturating_add(Weight::from_ref_time(51_812_968).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_proof_size(2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_242 nanoseconds.
        Weight::from_ref_time(69_181_800)
            // Standard Error: 305_945
            .saturating_add(Weight::from_ref_time(128_153_173).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 198_770 nanoseconds.
        Weight::from_ref_time(192_527_983)
            // Standard Error: 316_144
            .saturating_add(Weight::from_ref_time(126_671_134).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_470 nanoseconds.
        Weight::from_ref_time(88_699_487)
            // Standard Error: 3_645
            .saturating_add(Weight::from_ref_time(3_363_412).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 132_654 nanoseconds.
        Weight::from_ref_time(186_378_677)
            // Standard Error: 21_990
            .saturating_add(Weight::from_ref_time(3_297_160).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_043 nanoseconds.
        Weight::from_ref_time(116_920_829)
            // Standard Error: 347_877
            .saturating_add(Weight::from_ref_time(171_912_467).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_110 nanoseconds.
        Weight::from_ref_time(75_797_155)
            // Standard Error: 316_465
            .saturating_add(Weight::from_ref_time(173_616_738).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_532 nanoseconds.
        Weight::from_ref_time(64_213_227)
            // Standard Error: 301_766
            .saturating_add(Weight::from_ref_time(179_025_979).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_471 nanoseconds.
        Weight::from_ref_time(64_495_133)
            // Standard Error: 284_371
            .saturating_add(Weight::from_ref_time(177_738_849).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_666 nanoseconds.
        Weight::from_ref_time(76_478_840)
            // Standard Error: 321_926
            .saturating_add(Weight::from_ref_time(170_094_273).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_683 nanoseconds.
        Weight::from_ref_time(67_533_192)
            // Standard Error: 362_507
            .saturating_add(Weight::from_ref_time(170_203_694).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_953 nanoseconds.
        Weight::from_ref_time(77_906_831)
            // Standard Error: 388_143
            .saturating_add(Weight::from_ref_time(170_027_677).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_059 nanoseconds.
        Weight::from_ref_time(74_982_943)
            // Standard Error: 283_640
            .saturating_add(Weight::from_ref_time(170_214_122).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_265 nanoseconds.
        Weight::from_ref_time(70_654_552)
            // Standard Error: 316_842
            .saturating_add(Weight::from_ref_time(170_015_227).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 556_454 nanoseconds.
        Weight::from_ref_time(650_673_087)
            // Standard Error: 467_671
            .saturating_add(Weight::from_ref_time(228_794_857).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 795_370 nanoseconds.
        Weight::from_ref_time(804_310_000)
            // Standard Error: 45_783
            .saturating_add(Weight::from_ref_time(12_651_826).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_921 nanoseconds.
        Weight::from_ref_time(73_333_366)
            // Standard Error: 366_788
            .saturating_add(Weight::from_ref_time(170_014_561).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_684 nanoseconds.
        Weight::from_ref_time(70_518_218)
            // Standard Error: 293_348
            .saturating_add(Weight::from_ref_time(170_186_698).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_455 nanoseconds.
        Weight::from_ref_time(89_632_053)
            // Standard Error: 279_367
            .saturating_add(Weight::from_ref_time(230_094_500).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_306 nanoseconds.
        Weight::from_ref_time(131_523_472)
            // Standard Error: 421_909
            .saturating_add(Weight::from_ref_time(345_042_472).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 428_322 nanoseconds.
        Weight::from_ref_time(432_202_000)
            // Standard Error: 55_794
            .saturating_add(Weight::from_ref_time(20_583_567).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_607 nanoseconds.
        Weight::from_ref_time(154_881_981)
            // Standard Error: 371_132
            .saturating_add(Weight::from_ref_time(343_789_821).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 433_490 nanoseconds.
        Weight::from_ref_time(438_616_000)
            // Standard Error: 68_643
            .saturating_add(Weight::from_ref_time(20_929_641).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 568_340 nanoseconds.
        Weight::from_ref_time(616_185_150)
            // Standard Error: 364_196
            .saturating_add(Weight::from_ref_time(356_618_502).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 906_059 nanoseconds.
        Weight::from_ref_time(1_069_767_343)
            // Standard Error: 17_963
            .saturating_add(Weight::from_ref_time(40_165_902).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 556_589 nanoseconds.
        Weight::from_ref_time(648_034_398)
            // Standard Error: 557_639
            .saturating_add(Weight::from_ref_time(355_455_743).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_input_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 906_429 nanoseconds.
        Weight::from_ref_time(1_151_098_786)
            // Standard Error: 15_741
            .saturating_add(Weight::from_ref_time(40_077_677).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_858 nanoseconds.
        Weight::from_ref_time(57_161_789)
            // Standard Error: 287_172
            .saturating_add(Weight::from_ref_time(184_501_068).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_615_505 nanoseconds.
        Weight::from_ref_time(3_749_877_735)
            // Standard Error: 212_322
            .saturating_add(Weight::from_ref_time(242_217_134).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 499_901 nanoseconds.
        Weight::from_ref_time(506_107_000)
            // Standard Error: 56_960
            .saturating_add(Weight::from_ref_time(28_788_414).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_614_338 nanoseconds.
        Weight::from_ref_time(3_755_853_543)
            // Standard Error: 301_884
            .saturating_add(Weight::from_ref_time(300_050_144).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_611_768 nanoseconds.
        Weight::from_ref_time(3_745_365_874)
            // Standard Error: 302_925
            .saturating_add(Weight::from_ref_time(313_585_585).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_767_859 nanoseconds.
        Weight::from_ref_time(3_880_198_282)
            // Standard Error: 246_504
            .saturating_add(Weight::from_ref_time(319_335_293).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_162 nanoseconds.
        Weight::from_ref_time(82_670_528)
            // Standard Error: 186_716
            .saturating_add(Weight::from_ref_time(22_118_121).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_875 nanoseconds.
        Weight::from_ref_time(94_138_319)
            // Standard Error: 674
            .saturating_add(Weight::from_ref_time(411_456).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_846 nanoseconds.
        Weight::from_ref_time(82_231_692)
            // Standard Error: 197_240
            .saturating_add(Weight::from_ref_time(21_812_407).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_281 nanoseconds.
        Weight::from_ref_time(92_667_157)
            // Standard Error: 757
            .saturating_add(Weight::from_ref_time(414_942).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_392 nanoseconds.
        Weight::from_ref_time(81_839_921)
            // Standard Error: 187_935
            .saturating_add(Weight::from_ref_time(21_531_478).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_914 nanoseconds.
        Weight::from_ref_time(83_202_457)
            // Standard Error: 169_552
            .saturating_add(Weight::from_ref_time(18_968_642).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_038 nanoseconds.
        Weight::from_ref_time(134_755_477)
            // Standard Error: 378_455
            .saturating_add(Weight::from_ref_time(238_074_923).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_411 nanoseconds.
        Weight::from_ref_time(99_976_000)
            // Standard Error: 2_846
            .saturating_add(Weight::from_ref_time(606_488).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 549_889 nanoseconds.
        Weight::from_ref_time(561_395_552)
            // Standard Error: 456_569
            .saturating_add(Weight::from_ref_time(21_189_497).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 571_746 nanoseconds.
        Weight::from_ref_time(580_236_002)
            // Standard Error: 695
            .saturating_add(Weight::from_ref_time(508_539).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 550_458 nanoseconds.
        Weight::from_ref_time(560_109_884)
            // Standard Error: 630_804
            .saturating_add(Weight::from_ref_time(23_444_415).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_input_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 574_685 nanoseconds.
        Weight::from_ref_time(582_051_956)
            // Standard Error: 1_873
            .saturating_add(Weight::from_ref_time(510_920).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_662 nanoseconds.
        Weight::from_ref_time(92_987_913)
            // Standard Error: 221_712
            .saturating_add(Weight::from_ref_time(14_297_486).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_509 nanoseconds.
        Weight::from_ref_time(92_008_092)
            // Standard Error: 798
            .saturating_add(Weight::from_ref_time(430_013).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_934 nanoseconds.
        Weight::from_ref_time(70_759_484)
            // Standard Error: 375_882
            .saturating_add(Weight::from_ref_time(171_372_571).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_220 nanoseconds.
        Weight::from_ref_time(76_424_586)
            // Standard Error: 318_390
            .saturating_add(Weight::from_ref_time(171_997_799).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 561_001 nanoseconds.
        Weight::from_ref_time(596_859_697)
            // Standard Error: 379_506
            .saturating_add(Weight::from_ref_time(183_628_204).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(_n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 740_756 nanoseconds.
        Weight::from_ref_time(3_039_813_356)
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_105_959 nanoseconds.
        Weight::from_ref_time(4_241_883_621)
            // Standard Error: 298_317
            .saturating_add(Weight::from_ref_time(194_956_581).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_313_525 nanoseconds.
        Weight::from_ref_time(4_222_844_218)
            // Standard Error: 11_949
            .saturating_add(Weight::from_ref_time(12_247_234).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_532 nanoseconds.
        Weight::from_ref_time(115_997_414)
            // Standard Error: 400_928
            .saturating_add(Weight::from_ref_time(182_841_247).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 248_863 nanoseconds.
        Weight::from_ref_time(258_595_000)
            // Standard Error: 45_798
            .saturating_add(Weight::from_ref_time(25_617_839).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_378 nanoseconds.
        Weight::from_ref_time(106_540_287)
            // Standard Error: 360_771
            .saturating_add(Weight::from_ref_time(220_796_400).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_366 nanoseconds.
        Weight::from_ref_time(67_950_157)
            // Standard Error: 332_085
            .saturating_add(Weight::from_ref_time(170_391_240).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_828 nanoseconds.
        Weight::from_ref_time(82_857_794)
            // Standard Error: 180_972
            .saturating_add(Weight::from_ref_time(25_484_705).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_519 nanoseconds.
        Weight::from_ref_time(83_325_615)
            // Standard Error: 194_199
            .saturating_add(Weight::from_ref_time(16_666_534).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_762 nanoseconds.
        Weight::from_ref_time(84_503_586)
            // Standard Error: 188_007
            .saturating_add(Weight::from_ref_time(16_163_613).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_834 nanoseconds.
        Weight::from_ref_time(84_765_226)
            // Standard Error: 171_673
            .saturating_add(Weight::from_ref_time(15_646_173).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_798 nanoseconds.
        Weight::from_ref_time(84_251_847)
            // Standard Error: 171_586
            .saturating_add(Weight::from_ref_time(14_351_702).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 137_322 nanoseconds.
        Weight::from_ref_time(200_697_636)
            // Standard Error: 320_963
            .saturating_add(Weight::from_ref_time(244_738_457).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_865 nanoseconds.
        Weight::from_ref_time(150_624_235)
            // Standard Error: 325_518
            .saturating_add(Weight::from_ref_time(416_647_448).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_720_082 nanoseconds.
        Weight::from_ref_time(43_846_552_000)
            // Standard Error: 293_744
            .saturating_add(Weight::from_ref_time(7_459_899).saturating_mul(p.into()))
            // Standard Error: 293_727
            .saturating_add(Weight::from_ref_time(152_532_022).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_823 nanoseconds.
        Weight::from_ref_time(155_198_433)
            // Standard Error: 400_706
            .saturating_add(Weight::from_ref_time(416_847_817).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 45_667_467 nanoseconds.
        Weight::from_ref_time(45_846_668_000)
            // Standard Error: 326_915
            .saturating_add(Weight::from_ref_time(8_405_199).saturating_mul(p.into()))
            // Standard Error: 326_897
            .saturating_add(Weight::from_ref_time(151_603_274).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 186_000 nanoseconds.
        Weight::from_ref_time(180_165_128)
            // Standard Error: 369_219
            .saturating_add(Weight::from_ref_time(385_226_688).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 560_000 nanoseconds.
        Weight::from_ref_time(495_268_611)
            // Standard Error: 13_235
            .saturating_add(Weight::from_ref_time(12_068_004).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_000 nanoseconds.
        Weight::from_ref_time(83_223_684)
            // Standard Error: 299_637
            .saturating_add(Weight::from_ref_time(5_826_315).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_000 nanoseconds.
        Weight::from_ref_time(82_873_951)
            // Standard Error: 1_405
            .saturating_add(Weight::from_ref_time(234_449).saturating_mul(n.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 79_877 nanoseconds.
        Weight::from_parts(105_493_582, 141)
            // Standard Error: 8_059
            .saturating_add(Weight::from_ref_time(11_745_535).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 80_873 nanoseconds.
        Weight::from_parts(82_482_000, 141)
            // Standard Error: 26_904
            .saturating_add(Weight::from_ref_time(33_803_798).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5068941`
        // Minimum execution time: 6_024_930 nanoseconds.
        Weight::from_parts(5_883_233_796, 5068941)
            // Standard Error: 67_895
            .saturating_add(Weight::from_ref_time(35_760_405).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65704 ±0)`
        //  Estimated: `1012 + p * (75606 ±0)`
        // Minimum execution time: 80_963 nanoseconds.
        Weight::from_parts(82_817_000, 1012)
            // Standard Error: 52_524
            .saturating_add(Weight::from_ref_time(45_774_962).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(75606).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `584 + p * (9879 ±2)`
        // Minimum execution time: 95_468 nanoseconds.
        Weight::from_parts(93_982_156, 584)
            // Standard Error: 44_732
            .saturating_add(Weight::from_ref_time(35_514_215).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `584 + p * (9879 ±2)`
        // Minimum execution time: 582_845 nanoseconds.
        Weight::from_parts(581_724_705, 584)
            // Standard Error: 61_738
            .saturating_add(Weight::from_ref_time(40_476_620).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `316941`
        // Minimum execution time: 964_304 nanoseconds.
        Weight::from_parts(976_795_473, 316941)
            // Standard Error: 148_165
            .saturating_add(Weight::from_ref_time(42_648_026).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_228_267 nanoseconds.
        Weight::from_ref_time(4_217_173_792)
            // Standard Error: 14_098
            .saturating_add(Weight::from_ref_time(3_358_641).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_227_066 nanoseconds.
        Weight::from_ref_time(4_214_398_460)
            // Standard Error: 14_310
            .saturating_add(Weight::from_ref_time(3_401_925).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_517_073 nanoseconds.
        Weight::from_ref_time(9_626_826_782)
            // Standard Error: 143_316
            .saturating_add(Weight::from_ref_time(15_680_186).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_177_640 nanoseconds.
        Weight::from_ref_time(9_471_091_522)
            // Standard Error: 149_380
            .saturating_add(Weight::from_ref_time(12_354_963).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_061 nanoseconds.
        Weight::from_ref_time(2_106_000)
            // Standard Error: 9_336
            .saturating_add(Weight::from_ref_time(3_748_927).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_947 nanoseconds.
        Weight::from_ref_time(2_084_000)
            // Standard Error: 4_662
            .saturating_add(Weight::from_ref_time(3_057_390).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_034 nanoseconds.
        Weight::from_ref_time(3_071_952)
            // Standard Error: 1_152
            .saturating_add(Weight::from_ref_time(1_563_191).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_985 nanoseconds.
        Weight::from_ref_time(2_103_000)
            // Standard Error: 5_932
            .saturating_add(Weight::from_ref_time(3_020_666).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_993 nanoseconds.
        Weight::from_ref_time(2_069_000)
            // Standard Error: 5_862
            .saturating_add(Weight::from_ref_time(5_170_649).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_562 nanoseconds.
        Weight::from_ref_time(3_762_676)
            // Standard Error: 2_122
            .saturating_add(Weight::from_ref_time(163_615).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_100 nanoseconds.
        Weight::from_ref_time(3_458_940)
            // Standard Error: 6_301
            .saturating_add(Weight::from_ref_time(2_572_179).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(2_572_179 -
            2_489_435).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_005 nanoseconds.
        Weight::from_ref_time(2_361_442)
            // Standard Error: 12_617
            .saturating_add(Weight::from_ref_time(2_489_435).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_443 nanoseconds.
        Weight::from_ref_time(12_309_983)
            // Standard Error: 25_992
            .saturating_add(Weight::from_ref_time(9_956_100).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_022 nanoseconds.
        Weight::from_ref_time(3_347_999)
            // Standard Error: 6_342
            .saturating_add(Weight::from_ref_time(1_154_145).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_049 nanoseconds.
        Weight::from_ref_time(5_290_457)
            // Standard Error: 10
            .saturating_add(Weight::from_ref_time(44).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_036 nanoseconds.
        Weight::from_ref_time(1_389_943)
            // Standard Error: 3_531
            .saturating_add(Weight::from_ref_time(264_081).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_994 nanoseconds.
        Weight::from_ref_time(2_062_000)
            // Standard Error: 5_558
            .saturating_add(Weight::from_ref_time(751_514).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_995 nanoseconds.
        Weight::from_ref_time(2_106_000)
            // Standard Error: 7_191
            .saturating_add(Weight::from_ref_time(763_036).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_870 nanoseconds.
        Weight::from_ref_time(1_403_865)
            // Standard Error: 11_101
            .saturating_add(Weight::from_ref_time(801_567).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_899 nanoseconds.
        Weight::from_ref_time(5_976_000)
            // Standard Error: 9_560
            .saturating_add(Weight::from_ref_time(1_334_642).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_858 nanoseconds.
        Weight::from_ref_time(1_360_288)
            // Standard Error: 13_982
            .saturating_add(Weight::from_ref_time(6_861_743).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_034 nanoseconds.
        Weight::from_ref_time(2_091_000)
            // Standard Error: 8_329
            .saturating_add(Weight::from_ref_time(3_241_399).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_944 nanoseconds.
        Weight::from_ref_time(2_069_000)
            // Standard Error: 10_883
            .saturating_add(Weight::from_ref_time(3_082_135).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_057 nanoseconds.
        Weight::from_ref_time(2_099_000)
            // Standard Error: 7_541
            .saturating_add(Weight::from_ref_time(3_076_077).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_000 nanoseconds.
        Weight::from_ref_time(2_079_000)
            // Standard Error: 6_473
            .saturating_add(Weight::from_ref_time(2_618_173).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_935 nanoseconds.
        Weight::from_ref_time(2_069_000)
            // Standard Error: 5_267
            .saturating_add(Weight::from_ref_time(558_660).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_021 nanoseconds.
        Weight::from_ref_time(1_146_096)
            // Standard Error: 3_661
            .saturating_add(Weight::from_ref_time(404_446).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_975 nanoseconds.
        Weight::from_ref_time(2_050_000)
            // Standard Error: 11_464
            .saturating_add(Weight::from_ref_time(1_834_663).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_960 nanoseconds.
        Weight::from_ref_time(2_029_000)
            // Standard Error: 9_836
            .saturating_add(Weight::from_ref_time(1_147_285).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_018 nanoseconds.
        Weight::from_ref_time(1_436_221)
            // Standard Error: 2_897
            .saturating_add(Weight::from_ref_time(332_753).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_967 nanoseconds.
        Weight::from_ref_time(2_196_495)
            // Standard Error: 2_212
            .saturating_add(Weight::from_ref_time(165_351).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_008 nanoseconds.
        Weight::from_ref_time(2_304_336)
            // Standard Error: 1_694
            .saturating_add(Weight::from_ref_time(176_357).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_028 nanoseconds.
        Weight::from_ref_time(2_076_000)
            // Standard Error: 12_736
            .saturating_add(Weight::from_ref_time(1_808_089).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_984 nanoseconds.
        Weight::from_ref_time(2_093_000)
            // Standard Error: 9_059
            .saturating_add(Weight::from_ref_time(1_118_374).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_006 nanoseconds.
        Weight::from_ref_time(2_087_000)
            // Standard Error: 10_895
            .saturating_add(Weight::from_ref_time(1_903_891).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_964 nanoseconds.
        Weight::from_ref_time(2_081_000)
            // Standard Error: 8_856
            .saturating_add(Weight::from_ref_time(1_186_220).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_981 nanoseconds.
        Weight::from_ref_time(2_040_000)
            // Standard Error: 11_304
            .saturating_add(Weight::from_ref_time(1_845_269).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_967 nanoseconds.
        Weight::from_ref_time(2_052_000)
            // Standard Error: 8_883
            .saturating_add(Weight::from_ref_time(1_154_297).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_005 nanoseconds.
        Weight::from_ref_time(2_092_000)
            // Standard Error: 10_736
            .saturating_add(Weight::from_ref_time(1_827_020).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_959 nanoseconds.
        Weight::from_ref_time(2_066_000)
            // Standard Error: 8_220
            .saturating_add(Weight::from_ref_time(1_163_398).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_967 nanoseconds.
        Weight::from_ref_time(2_043_000)
            // Standard Error: 11_044
            .saturating_add(Weight::from_ref_time(1_820_517).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_966 nanoseconds.
        Weight::from_ref_time(2_066_000)
            // Standard Error: 8_228
            .saturating_add(Weight::from_ref_time(1_160_890).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_965 nanoseconds.
        Weight::from_ref_time(2_019_000)
            // Standard Error: 10_937
            .saturating_add(Weight::from_ref_time(1_799_335).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_946 nanoseconds.
        Weight::from_ref_time(2_018_000)
            // Standard Error: 8_709
            .saturating_add(Weight::from_ref_time(1_159_022).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_015 nanoseconds.
        Weight::from_ref_time(2_078_000)
            // Standard Error: 10_487
            .saturating_add(Weight::from_ref_time(1_805_296).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_984 nanoseconds.
        Weight::from_ref_time(2_031_000)
            // Standard Error: 8_975
            .saturating_add(Weight::from_ref_time(1_158_901).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_012 nanoseconds.
        Weight::from_ref_time(2_086_000)
            // Standard Error: 13_186
            .saturating_add(Weight::from_ref_time(1_783_792).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_965 nanoseconds.
        Weight::from_ref_time(2_043_000)
            // Standard Error: 10_159
            .saturating_add(Weight::from_ref_time(1_202_939).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_015 nanoseconds.
        Weight::from_ref_time(2_075_000)
            // Standard Error: 11_995
            .saturating_add(Weight::from_ref_time(1_865_225).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_985 nanoseconds.
        Weight::from_ref_time(2_106_000)
            // Standard Error: 9_298
            .saturating_add(Weight::from_ref_time(1_183_427).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_971 nanoseconds.
        Weight::from_ref_time(2_087_000)
            // Standard Error: 10_678
            .saturating_add(Weight::from_ref_time(1_868_921).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_058 nanoseconds.
        Weight::from_ref_time(2_118_000)
            // Standard Error: 9_837
            .saturating_add(Weight::from_ref_time(1_179_249).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_928 nanoseconds.
        Weight::from_ref_time(2_037_000)
            // Standard Error: 9_447
            .saturating_add(Weight::from_ref_time(1_313_310).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_023 nanoseconds.
        Weight::from_ref_time(2_079_000)
            // Standard Error: 4_870
            .saturating_add(Weight::from_ref_time(640_849).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_968 nanoseconds.
        Weight::from_ref_time(2_062_000)
            // Standard Error: 9_332
            .saturating_add(Weight::from_ref_time(1_302_741).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_021 nanoseconds.
        Weight::from_ref_time(2_088_000)
            // Standard Error: 5_326
            .saturating_add(Weight::from_ref_time(646_886).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_969 nanoseconds.
        Weight::from_ref_time(2_047_000)
            // Standard Error: 10_880
            .saturating_add(Weight::from_ref_time(1_783_332).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_971 nanoseconds.
        Weight::from_ref_time(2_047_000)
            // Standard Error: 9_224
            .saturating_add(Weight::from_ref_time(1_237_580).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_979 nanoseconds.
        Weight::from_ref_time(1_656_784)
            // Standard Error: 15_758
            .saturating_add(Weight::from_ref_time(2_627_106).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_994 nanoseconds.
        Weight::from_ref_time(745_890)
            // Standard Error: 11_829
            .saturating_add(Weight::from_ref_time(2_395_540).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_978 nanoseconds.
        Weight::from_ref_time(1_829_438)
            // Standard Error: 13_870
            .saturating_add(Weight::from_ref_time(2_842_707).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_949 nanoseconds.
        Weight::from_ref_time(2_033_000)
            // Standard Error: 9_310
            .saturating_add(Weight::from_ref_time(2_380_282).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_999 nanoseconds.
        Weight::from_ref_time(2_053_000)
            // Standard Error: 14_951
            .saturating_add(Weight::from_ref_time(9_506_621).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_958 nanoseconds.
        Weight::from_ref_time(815_806)
            // Standard Error: 43_497
            .saturating_add(Weight::from_ref_time(7_793_640).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_999 nanoseconds.
        Weight::from_ref_time(3_339_517)
            // Standard Error: 9_991
            .saturating_add(Weight::from_ref_time(2_871_175).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_971 nanoseconds.
        Weight::from_ref_time(2_412_466)
            // Standard Error: 10_421
            .saturating_add(Weight::from_ref_time(2_371_403).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_992 nanoseconds.
        Weight::from_ref_time(2_060_000)
            // Standard Error: 8_683
            .saturating_add(Weight::from_ref_time(1_310_650).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_991 nanoseconds.
        Weight::from_ref_time(2_063_000)
            // Standard Error: 4_470
            .saturating_add(Weight::from_ref_time(629_510).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_972 nanoseconds.
        Weight::from_ref_time(2_021_000)
            // Standard Error: 9_232
            .saturating_add(Weight::from_ref_time(1_301_970).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_009 nanoseconds.
        Weight::from_ref_time(2_067_000)
            // Standard Error: 5_252
            .saturating_add(Weight::from_ref_time(644_447).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_949 nanoseconds.
        Weight::from_ref_time(2_053_000)
            // Standard Error: 8_459
            .saturating_add(Weight::from_ref_time(1_292_517).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_000 nanoseconds.
        Weight::from_ref_time(2_096_000)
            // Standard Error: 4_348
            .saturating_add(Weight::from_ref_time(641_080).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_951 nanoseconds.
        Weight::from_ref_time(2_007_000)
            // Standard Error: 7_056
            .saturating_add(Weight::from_ref_time(1_087_085).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_984 nanoseconds.
        Weight::from_ref_time(2_048_000)
            // Standard Error: 4_341
            .saturating_add(Weight::from_ref_time(591_595).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_984 nanoseconds.
        Weight::from_ref_time(2_093_000)
            // Standard Error: 7_276
            .saturating_add(Weight::from_ref_time(1_094_649).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_022 nanoseconds.
        Weight::from_ref_time(2_091_000)
            // Standard Error: 5_305
            .saturating_add(Weight::from_ref_time(602_597).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_968 nanoseconds.
        Weight::from_ref_time(2_045_000)
            // Standard Error: 8_673
            .saturating_add(Weight::from_ref_time(1_097_589).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_968 nanoseconds.
        Weight::from_ref_time(2_033_000)
            // Standard Error: 4_218
            .saturating_add(Weight::from_ref_time(580_374).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_980 nanoseconds.
        Weight::from_ref_time(2_046_000)
            // Standard Error: 7_888
            .saturating_add(Weight::from_ref_time(1_090_944).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_961 nanoseconds.
        Weight::from_ref_time(64_963)
            // Standard Error: 5_922
            .saturating_add(Weight::from_ref_time(618_069).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_976 nanoseconds.
        Weight::from_ref_time(2_085_000)
            // Standard Error: 7_071
            .saturating_add(Weight::from_ref_time(1_105_946).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_003 nanoseconds.
        Weight::from_ref_time(2_078_000)
            // Standard Error: 4_007
            .saturating_add(Weight::from_ref_time(585_944).saturating_mul(r.into()))
    }
}
