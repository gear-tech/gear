// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-08-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_message_with_voucher(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn send_reply_with_voucher(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_003_000 picoseconds.
        Weight::from_parts(1_051_000, 0)
            // Standard Error: 968
            .saturating_add(Weight::from_parts(212_482, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3577 + c * (1024 ±0)`
        // Minimum execution time: 3_267_000 picoseconds.
        Weight::from_parts(3_316_000, 3577)
            // Standard Error: 1_072
            .saturating_add(Weight::from_parts(688_242, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 53_248_000 picoseconds.
        Weight::from_parts(71_345_881, 0)
            // Standard Error: 10_707
            .saturating_add(Weight::from_parts(2_548_249, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1050`
        //  Estimated: `42875`
        // Minimum execution time: 84_992_000 picoseconds.
        Weight::from_parts(88_176_000, 42875)
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `958`
        //  Estimated: `21477`
        // Minimum execution time: 56_951_000 picoseconds.
        Weight::from_parts(58_755_000, 21477)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `605`
        //  Estimated: `17354`
        // Minimum execution time: 30_483_000 picoseconds.
        Weight::from_parts(31_174_000, 17354)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_269_000 picoseconds.
        Weight::from_parts(7_343_300, 7640)
            // Standard Error: 45_015
            .saturating_add(Weight::from_parts(15_758_869, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1439 + c * (16389 ±0)`
        //  Estimated: `42034 + c * (131112 ±0)`
        // Minimum execution time: 70_643_000 picoseconds.
        Weight::from_parts(71_487_000, 42034)
            // Standard Error: 217_960
            .saturating_add(Weight::from_parts(56_304_860, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `5270`
        // Minimum execution time: 63_871_000 picoseconds.
        Weight::from_parts(31_431_372, 5270)
            // Standard Error: 58_224
            .saturating_add(Weight::from_parts(52_560_364, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `742`
        //  Estimated: `39419`
        // Minimum execution time: 65_988_000 picoseconds.
        Weight::from_parts(102_441_114, 39419)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(2_612, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `306`
        //  Estimated: `35235`
        // Minimum execution time: 11_021_135_000 picoseconds.
        Weight::from_parts(397_699_856, 35235)
            // Standard Error: 169_994
            .saturating_add(Weight::from_parts(52_665_060, 0).saturating_mul(c.into()))
            // Standard Error: 10
            .saturating_add(Weight::from_parts(2_533, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `349`
        //  Estimated: `23860`
        // Minimum execution time: 57_013_000 picoseconds.
        Weight::from_parts(35_413_717, 23860)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_158, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `452`
        //  Estimated: `27184`
        // Minimum execution time: 60_180_000 picoseconds.
        Weight::from_parts(33_390_466, 27184)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_167, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1049`
        //  Estimated: `42866`
        // Minimum execution time: 87_446_000 picoseconds.
        Weight::from_parts(69_330_706, 42866)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_174, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1152`
        //  Estimated: `46396`
        // Minimum execution time: 97_152_000 picoseconds.
        Weight::from_parts(77_891_346, 46396)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_170, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `85981`
        // Minimum execution time: 323_882_000 picoseconds.
        Weight::from_parts(336_539_045, 85981)
            .saturating_add(T::DbWeight::get().reads(29_u64))
            .saturating_add(T::DbWeight::get().writes(23_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `85905`
        // Minimum execution time: 336_406_000 picoseconds.
        Weight::from_parts(353_807_338, 85905)
            .saturating_add(T::DbWeight::get().reads(29_u64))
            .saturating_add(T::DbWeight::get().writes(23_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 45_464_000 picoseconds.
        Weight::from_parts(45_831_000, 3899)
            // Standard Error: 36_617
            .saturating_add(Weight::from_parts(51_273_892, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_254_000 picoseconds.
        Weight::from_parts(86_749_000, 0)
            // Standard Error: 3_967_638
            .saturating_add(Weight::from_parts(617_894_062, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 366_392_000 picoseconds.
        Weight::from_parts(294_624_660, 0)
            // Standard Error: 10_067
            .saturating_add(Weight::from_parts(30_802_641, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 199_070_000 picoseconds.
        Weight::from_parts(213_938_845, 0)
            // Standard Error: 343_895
            .saturating_add(Weight::from_parts(120_152_478, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_714_000 picoseconds.
        Weight::from_parts(96_261_609, 0)
            // Standard Error: 3_991
            .saturating_add(Weight::from_parts(3_567_375, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 139_882_000 picoseconds.
        Weight::from_parts(221_553_985, 0)
            // Standard Error: 29_743
            .saturating_add(Weight::from_parts(3_602_987, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_497_000 picoseconds.
        Weight::from_parts(118_603_695, 0)
            // Standard Error: 431_810
            .saturating_add(Weight::from_parts(177_456_338, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_831_000 picoseconds.
        Weight::from_parts(88_005_607, 0)
            // Standard Error: 244_708
            .saturating_add(Weight::from_parts(175_744_834, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_145_000 picoseconds.
        Weight::from_parts(86_969_872, 0)
            // Standard Error: 302_008
            .saturating_add(Weight::from_parts(180_744_297, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_337_000 picoseconds.
        Weight::from_parts(80_268_581, 0)
            // Standard Error: 290_578
            .saturating_add(Weight::from_parts(180_541_423, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_327_000 picoseconds.
        Weight::from_parts(84_307_332, 0)
            // Standard Error: 316_639
            .saturating_add(Weight::from_parts(179_561_839, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_300_000 picoseconds.
        Weight::from_parts(70_645_226, 0)
            // Standard Error: 320_673
            .saturating_add(Weight::from_parts(182_342_085, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_250_000 picoseconds.
        Weight::from_parts(81_902_510, 0)
            // Standard Error: 273_253
            .saturating_add(Weight::from_parts(180_582_426, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_232_000 picoseconds.
        Weight::from_parts(87_259_581, 0)
            // Standard Error: 294_035
            .saturating_add(Weight::from_parts(175_294_464, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 595_636_000 picoseconds.
        Weight::from_parts(656_136_663, 0)
            // Standard Error: 485_302
            .saturating_add(Weight::from_parts(261_855_478, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 850_360_000 picoseconds.
        Weight::from_parts(903_367_000, 0)
            // Standard Error: 55_203
            .saturating_add(Weight::from_parts(13_094_816, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_957_000 picoseconds.
        Weight::from_parts(87_586_547, 0)
            // Standard Error: 323_063
            .saturating_add(Weight::from_parts(174_117_671, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_008_000 picoseconds.
        Weight::from_parts(78_303_076, 0)
            // Standard Error: 299_495
            .saturating_add(Weight::from_parts(175_222_715, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_234_000 picoseconds.
        Weight::from_parts(103_801_859, 0)
            // Standard Error: 382_198
            .saturating_add(Weight::from_parts(245_171_881, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_211_000 picoseconds.
        Weight::from_parts(87_766_000, 0)
            // Standard Error: 4_237_435
            .saturating_add(Weight::from_parts(1_076_031_771, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_722_000 picoseconds.
        Weight::from_parts(144_011_827, 0)
            // Standard Error: 476_324
            .saturating_add(Weight::from_parts(387_231_993, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 461_434_000 picoseconds.
        Weight::from_parts(469_780_000, 0)
            // Standard Error: 61_125
            .saturating_add(Weight::from_parts(21_613_603, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_818_000 picoseconds.
        Weight::from_parts(149_809_757, 0)
            // Standard Error: 456_443
            .saturating_add(Weight::from_parts(395_488_333, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 479_154_000 picoseconds.
        Weight::from_parts(483_278_000, 0)
            // Standard Error: 67_159
            .saturating_add(Weight::from_parts(21_947_194, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 567_500_000 picoseconds.
        Weight::from_parts(693_644_323, 0)
            // Standard Error: 568_410
            .saturating_add(Weight::from_parts(412_109_027, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 575_808_000 picoseconds.
        Weight::from_parts(724_736_213, 0)
            // Standard Error: 602_935
            .saturating_add(Weight::from_parts(412_885_093, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_691_000 picoseconds.
        Weight::from_parts(74_497_929, 0)
            // Standard Error: 328_672
            .saturating_add(Weight::from_parts(197_295_056, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_899_275_000 picoseconds.
        Weight::from_parts(4_052_914_766, 0)
            // Standard Error: 433_071
            .saturating_add(Weight::from_parts(279_414_467, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 481_093_000 picoseconds.
        Weight::from_parts(489_651_000, 0)
            // Standard Error: 58_131
            .saturating_add(Weight::from_parts(29_725_779, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_898_930_000 picoseconds.
        Weight::from_parts(4_051_051_643, 0)
            // Standard Error: 422_685
            .saturating_add(Weight::from_parts(335_909_883, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_889_863_000 picoseconds.
        Weight::from_parts(4_037_859_582, 0)
            // Standard Error: 492_684
            .saturating_add(Weight::from_parts(354_039_027, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 254_292_000 picoseconds.
        Weight::from_parts(299_243_857, 0)
            // Standard Error: 453_209
            .saturating_add(Weight::from_parts(402_577_817, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 654_055_000 picoseconds.
        Weight::from_parts(663_310_000, 0)
            // Standard Error: 60_031
            .saturating_add(Weight::from_parts(21_652_831, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_054_583_000 picoseconds.
        Weight::from_parts(4_192_801_478, 0)
            // Standard Error: 494_878
            .saturating_add(Weight::from_parts(356_698_705, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_037_000 picoseconds.
        Weight::from_parts(88_828_036, 0)
            // Standard Error: 335_490
            .saturating_add(Weight::from_parts(26_597_063, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_733_000 picoseconds.
        Weight::from_parts(93_898_943, 0)
            // Standard Error: 1_151
            .saturating_add(Weight::from_parts(428_904, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_569_000 picoseconds.
        Weight::from_parts(89_213_638, 0)
            // Standard Error: 317_917
            .saturating_add(Weight::from_parts(22_797_961, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_164_000 picoseconds.
        Weight::from_parts(95_571_505, 0)
            // Standard Error: 1_085
            .saturating_add(Weight::from_parts(425_025, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_844_000 picoseconds.
        Weight::from_parts(88_247_426, 0)
            // Standard Error: 280_700
            .saturating_add(Weight::from_parts(17_706_873, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_987_000 picoseconds.
        Weight::from_parts(87_544_514, 0)
            // Standard Error: 269_120
            .saturating_add(Weight::from_parts(21_098_185, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_012_000 picoseconds.
        Weight::from_parts(115_149_368, 0)
            // Standard Error: 328_818
            .saturating_add(Weight::from_parts(265_684_350, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_890_000 picoseconds.
        Weight::from_parts(102_844_000, 0)
            // Standard Error: 2_931
            .saturating_add(Weight::from_parts(635_797, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 563_182_000 picoseconds.
        Weight::from_parts(640_794_146, 0)
            // Standard Error: 7_497_207
            .saturating_add(Weight::from_parts(15_239_053, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 560_481_000 picoseconds.
        Weight::from_parts(593_427_573, 0)
            // Standard Error: 3_203_142
            .saturating_add(Weight::from_parts(25_969_526, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_574_000 picoseconds.
        Weight::from_parts(97_280_140, 0)
            // Standard Error: 268_694
            .saturating_add(Weight::from_parts(12_092_859, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_631_000 picoseconds.
        Weight::from_parts(94_175_255, 0)
            // Standard Error: 1_213
            .saturating_add(Weight::from_parts(427_553, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_505_000 picoseconds.
        Weight::from_parts(100_109_459, 0)
            // Standard Error: 279_145
            .saturating_add(Weight::from_parts(8_335_840, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_015_000 picoseconds.
        Weight::from_parts(96_000_128, 0)
            // Standard Error: 1_363
            .saturating_add(Weight::from_parts(423_685, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_784_000 picoseconds.
        Weight::from_parts(84_956_444, 0)
            // Standard Error: 285_268
            .saturating_add(Weight::from_parts(178_346_410, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_915_000 picoseconds.
        Weight::from_parts(78_586_027, 0)
            // Standard Error: 254_710
            .saturating_add(Weight::from_parts(178_243_954, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 557_380_000 picoseconds.
        Weight::from_parts(633_253_100, 0)
            // Standard Error: 538_762
            .saturating_add(Weight::from_parts(195_061_580, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 597_682_000 picoseconds.
        Weight::from_parts(661_897_574, 0)
            // Standard Error: 3_826
            .saturating_add(Weight::from_parts(136_457, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_454_821_000 picoseconds.
        Weight::from_parts(4_682_125_339, 0)
            // Standard Error: 520_741
            .saturating_add(Weight::from_parts(206_155_172, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_637_831_000 picoseconds.
        Weight::from_parts(4_748_853_254, 0)
            // Standard Error: 16_010
            .saturating_add(Weight::from_parts(12_276_105, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_447_000 picoseconds.
        Weight::from_parts(111_081_974, 0)
            // Standard Error: 422_093
            .saturating_add(Weight::from_parts(195_515_962, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 188_901_000 picoseconds.
        Weight::from_parts(192_422_000, 0)
            // Standard Error: 54_402
            .saturating_add(Weight::from_parts(25_703_289, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_538_000 picoseconds.
        Weight::from_parts(83_073_715, 0)
            // Standard Error: 285_530
            .saturating_add(Weight::from_parts(174_178_092, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_697_000 picoseconds.
        Weight::from_parts(89_049_881, 0)
            // Standard Error: 281_628
            .saturating_add(Weight::from_parts(27_362_618, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_006_000 picoseconds.
        Weight::from_parts(86_657_161, 0)
            // Standard Error: 254_208
            .saturating_add(Weight::from_parts(14_853_038, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_155_000 picoseconds.
        Weight::from_parts(87_136_381, 0)
            // Standard Error: 296_075
            .saturating_add(Weight::from_parts(15_564_718, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_160_000 picoseconds.
        Weight::from_parts(87_382_440, 0)
            // Standard Error: 263_499
            .saturating_add(Weight::from_parts(17_288_459, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_780_000 picoseconds.
        Weight::from_parts(90_970_389, 0)
            // Standard Error: 273_512
            .saturating_add(Weight::from_parts(14_976_210, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 141_871_000 picoseconds.
        Weight::from_parts(203_107_595, 0)
            // Standard Error: 322_999
            .saturating_add(Weight::from_parts(280_023_774, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_132_000 picoseconds.
        Weight::from_parts(166_620_417, 0)
            // Standard Error: 428_363
            .saturating_add(Weight::from_parts(469_520_431, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 46_670_030_000 picoseconds.
        Weight::from_parts(46_979_707_000, 0)
            // Standard Error: 290_199
            .saturating_add(Weight::from_parts(7_295_075, 0).saturating_mul(p.into()))
            // Standard Error: 290_185
            .saturating_add(Weight::from_parts(178_049_340, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_401_000 picoseconds.
        Weight::from_parts(162_215_381, 0)
            // Standard Error: 435_866
            .saturating_add(Weight::from_parts(479_266_464, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_093_174_000 picoseconds.
        Weight::from_parts(44_268_099_000, 0)
            // Standard Error: 249_484
            .saturating_add(Weight::from_parts(7_595_737, 0).saturating_mul(p.into()))
            // Standard Error: 249_471
            .saturating_add(Weight::from_parts(179_055_114, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_188_000 picoseconds.
        Weight::from_parts(101_583_480, 0)
            // Standard Error: 35_878
            .saturating_add(Weight::from_parts(3_611_568, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 86_183_000 picoseconds.
        Weight::from_parts(118_618_192, 1131)
            // Standard Error: 6_832
            .saturating_add(Weight::from_parts(11_877_671, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 84_629_000 picoseconds.
        Weight::from_parts(86_416_000, 1131)
            // Standard Error: 28_253
            .saturating_add(Weight::from_parts(36_463_142, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_148_282_000 picoseconds.
        Weight::from_parts(5_977_321_351, 5069931)
            // Standard Error: 52_501
            .saturating_add(Weight::from_parts(36_684_019, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 85_557_000 picoseconds.
        Weight::from_parts(86_547_000, 1939)
            // Standard Error: 32_777
            .saturating_add(Weight::from_parts(46_224_064, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 89_966_000 picoseconds.
        Weight::from_parts(89_543_596, 1131)
            // Standard Error: 68_448
            .saturating_add(Weight::from_parts(36_359_585, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 600_329_000 picoseconds.
        Weight::from_parts(623_878_315, 1496)
            // Standard Error: 267_055
            .saturating_add(Weight::from_parts(46_147_238, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_023_023_000 picoseconds.
        Weight::from_parts(1_022_993_537, 317931)
            // Standard Error: 203_791
            .saturating_add(Weight::from_parts(43_538_291, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_300_000 picoseconds.
        Weight::from_parts(2_436_506, 0)
            // Standard Error: 16_946
            .saturating_add(Weight::from_parts(24_493_632, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_347_874_000 picoseconds.
        Weight::from_parts(4_179_322_071, 0)
            // Standard Error: 53_086
            .saturating_add(Weight::from_parts(4_505_224, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_348_187_000 picoseconds.
        Weight::from_parts(4_205_195_765, 0)
            // Standard Error: 44_017
            .saturating_add(Weight::from_parts(4_404_586, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_882_662_000 picoseconds.
        Weight::from_parts(11_083_501_979, 0)
            // Standard Error: 200_162
            .saturating_add(Weight::from_parts(13_165_815, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_784_867_000 picoseconds.
        Weight::from_parts(11_957_102_430, 0)
            // Standard Error: 187_347
            .saturating_add(Weight::from_parts(8_480_335, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_343_000 picoseconds.
        Weight::from_parts(2_421_000, 0)
            // Standard Error: 9_011
            .saturating_add(Weight::from_parts(3_834_828, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_326_000 picoseconds.
        Weight::from_parts(2_421_000, 0)
            // Standard Error: 5_612
            .saturating_add(Weight::from_parts(3_061_076, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_282_000 picoseconds.
        Weight::from_parts(3_427_769, 0)
            // Standard Error: 941
            .saturating_add(Weight::from_parts(1_568_677, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_284_000 picoseconds.
        Weight::from_parts(2_392_000, 0)
            // Standard Error: 8_418
            .saturating_add(Weight::from_parts(2_921_747, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_263_000 picoseconds.
        Weight::from_parts(1_354_050, 0)
            // Standard Error: 14_642
            .saturating_add(Weight::from_parts(5_182_595, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_011_000 picoseconds.
        Weight::from_parts(5_823_252, 0)
            // Standard Error: 2_035
            .saturating_add(Weight::from_parts(162_988, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_405_000 picoseconds.
        Weight::from_parts(5_172_082, 0)
            // Standard Error: 7_906
            .saturating_add(Weight::from_parts(2_576_107, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_576_107 -
            2_413_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_315_000 picoseconds.
        Weight::from_parts(4_417_546, 0)
            // Standard Error: 12_281
            .saturating_add(Weight::from_parts(2_413_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_774_000 picoseconds.
        Weight::from_parts(19_445_534, 0)
            // Standard Error: 34_031
            .saturating_add(Weight::from_parts(9_947_648, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_663_000 picoseconds.
        Weight::from_parts(2_443_915, 0)
            // Standard Error: 6_189
            .saturating_add(Weight::from_parts(1_274_832, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_382_000 picoseconds.
        Weight::from_parts(5_657_220, 0)
            // Standard Error: 12
            .saturating_add(Weight::from_parts(14, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_461_000 picoseconds.
        Weight::from_parts(1_936_508, 0)
            // Standard Error: 3_019
            .saturating_add(Weight::from_parts(275_086, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_305_000 picoseconds.
        Weight::from_parts(2_394_000, 0)
            // Standard Error: 4_239
            .saturating_add(Weight::from_parts(763_775, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_367_000 picoseconds.
        Weight::from_parts(2_411_000, 0)
            // Standard Error: 5_426
            .saturating_add(Weight::from_parts(771_295, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_346_000 picoseconds.
        Weight::from_parts(2_691_888, 0)
            // Standard Error: 7_020
            .saturating_add(Weight::from_parts(804_877, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_476_000 picoseconds.
        Weight::from_parts(6_582_000, 0)
            // Standard Error: 8_493
            .saturating_add(Weight::from_parts(1_358_866, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_943_000 picoseconds.
        Weight::from_parts(1_102_558, 0)
            // Standard Error: 12_614
            .saturating_add(Weight::from_parts(7_099_473, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_298_000 picoseconds.
        Weight::from_parts(2_357_000, 0)
            // Standard Error: 7_419
            .saturating_add(Weight::from_parts(3_438_043, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_201_000 picoseconds.
        Weight::from_parts(2_270_000, 0)
            // Standard Error: 7_089
            .saturating_add(Weight::from_parts(3_224_674, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_358_000 picoseconds.
        Weight::from_parts(2_444_000, 0)
            // Standard Error: 5_880
            .saturating_add(Weight::from_parts(3_196_577, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_205_000 picoseconds.
        Weight::from_parts(2_361_000, 0)
            // Standard Error: 5_007
            .saturating_add(Weight::from_parts(2_694_074, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_217_000 picoseconds.
        Weight::from_parts(2_339_000, 0)
            // Standard Error: 4_242
            .saturating_add(Weight::from_parts(562_083, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_180_000 picoseconds.
        Weight::from_parts(1_150_328, 0)
            // Standard Error: 4_155
            .saturating_add(Weight::from_parts(430_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_218_000 picoseconds.
        Weight::from_parts(2_269_000, 0)
            // Standard Error: 12_863
            .saturating_add(Weight::from_parts(1_875_276, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_290_000 picoseconds.
        Weight::from_parts(2_322_000, 0)
            // Standard Error: 8_333
            .saturating_add(Weight::from_parts(1_185_939, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_384_000 picoseconds.
        Weight::from_parts(1_572_617, 0)
            // Standard Error: 3_727
            .saturating_add(Weight::from_parts(382_695, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_236_000 picoseconds.
        Weight::from_parts(1_495_799, 0)
            // Standard Error: 4_058
            .saturating_add(Weight::from_parts(373_636, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_341_000 picoseconds.
        Weight::from_parts(465_059, 0)
            // Standard Error: 4_917
            .saturating_add(Weight::from_parts(551_259, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_230_000 picoseconds.
        Weight::from_parts(515_890, 0)
            // Standard Error: 4_848
            .saturating_add(Weight::from_parts(545_542, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_272_000 picoseconds.
        Weight::from_parts(739_709, 0)
            // Standard Error: 4_827
            .saturating_add(Weight::from_parts(496_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_322_000 picoseconds.
        Weight::from_parts(1_492_190, 0)
            // Standard Error: 3_923
            .saturating_add(Weight::from_parts(340_665, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_257_000 picoseconds.
        Weight::from_parts(2_979_817, 0)
            // Standard Error: 1_972
            .saturating_add(Weight::from_parts(154_315, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_282_000 picoseconds.
        Weight::from_parts(2_877_230, 0)
            // Standard Error: 1_753
            .saturating_add(Weight::from_parts(153_462, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_193_000 picoseconds.
        Weight::from_parts(2_289_000, 0)
            // Standard Error: 11_649
            .saturating_add(Weight::from_parts(1_795_062, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_303_000 picoseconds.
        Weight::from_parts(2_366_000, 0)
            // Standard Error: 7_436
            .saturating_add(Weight::from_parts(1_091_962, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_346_000 picoseconds.
        Weight::from_parts(2_409_000, 0)
            // Standard Error: 11_197
            .saturating_add(Weight::from_parts(1_828_518, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_328_000 picoseconds.
        Weight::from_parts(2_384_000, 0)
            // Standard Error: 7_307
            .saturating_add(Weight::from_parts(1_106_869, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_286_000 picoseconds.
        Weight::from_parts(2_343_000, 0)
            // Standard Error: 10_932
            .saturating_add(Weight::from_parts(1_789_419, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_214_000 picoseconds.
        Weight::from_parts(2_283_000, 0)
            // Standard Error: 7_556
            .saturating_add(Weight::from_parts(1_111_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_263_000 picoseconds.
        Weight::from_parts(2_322_000, 0)
            // Standard Error: 10_995
            .saturating_add(Weight::from_parts(1_822_680, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_276_000 picoseconds.
        Weight::from_parts(2_334_000, 0)
            // Standard Error: 6_944
            .saturating_add(Weight::from_parts(1_121_080, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_227_000 picoseconds.
        Weight::from_parts(2_292_000, 0)
            // Standard Error: 11_873
            .saturating_add(Weight::from_parts(1_840_273, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_265_000 picoseconds.
        Weight::from_parts(2_409_000, 0)
            // Standard Error: 7_972
            .saturating_add(Weight::from_parts(1_134_825, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_269_000 picoseconds.
        Weight::from_parts(2_355_000, 0)
            // Standard Error: 11_547
            .saturating_add(Weight::from_parts(1_813_029, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_273_000 picoseconds.
        Weight::from_parts(2_349_000, 0)
            // Standard Error: 6_487
            .saturating_add(Weight::from_parts(1_091_201, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_225_000 picoseconds.
        Weight::from_parts(2_329_000, 0)
            // Standard Error: 12_018
            .saturating_add(Weight::from_parts(1_823_755, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_287_000 picoseconds.
        Weight::from_parts(2_359_000, 0)
            // Standard Error: 7_325
            .saturating_add(Weight::from_parts(1_192_292, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_352_000 picoseconds.
        Weight::from_parts(2_386_000, 0)
            // Standard Error: 10_009
            .saturating_add(Weight::from_parts(1_870_539, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_315_000 picoseconds.
        Weight::from_parts(2_382_000, 0)
            // Standard Error: 7_109
            .saturating_add(Weight::from_parts(1_122_152, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_254_000 picoseconds.
        Weight::from_parts(2_337_000, 0)
            // Standard Error: 11_700
            .saturating_add(Weight::from_parts(1_825_021, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_357_000 picoseconds.
        Weight::from_parts(2_407_000, 0)
            // Standard Error: 7_769
            .saturating_add(Weight::from_parts(1_146_472, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_196_000 picoseconds.
        Weight::from_parts(2_292_000, 0)
            // Standard Error: 9_908
            .saturating_add(Weight::from_parts(1_845_094, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_276_000 picoseconds.
        Weight::from_parts(2_382_000, 0)
            // Standard Error: 9_519
            .saturating_add(Weight::from_parts(1_241_507, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_256_000 picoseconds.
        Weight::from_parts(2_323_000, 0)
            // Standard Error: 7_921
            .saturating_add(Weight::from_parts(1_330_988, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_203_000 picoseconds.
        Weight::from_parts(2_262_000, 0)
            // Standard Error: 4_732
            .saturating_add(Weight::from_parts(619_908, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_273_000 picoseconds.
        Weight::from_parts(2_318_000, 0)
            // Standard Error: 8_121
            .saturating_add(Weight::from_parts(1_255_733, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_332_000 picoseconds.
        Weight::from_parts(2_392_000, 0)
            // Standard Error: 5_698
            .saturating_add(Weight::from_parts(666_782, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_269_000 picoseconds.
        Weight::from_parts(2_342_000, 0)
            // Standard Error: 10_724
            .saturating_add(Weight::from_parts(1_779_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_239_000 picoseconds.
        Weight::from_parts(2_377_000, 0)
            // Standard Error: 8_303
            .saturating_add(Weight::from_parts(1_231_579, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_247_000 picoseconds.
        Weight::from_parts(3_881_473, 0)
            // Standard Error: 22_336
            .saturating_add(Weight::from_parts(2_602_873, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_366_000 picoseconds.
        Weight::from_parts(971_800, 0)
            // Standard Error: 9_516
            .saturating_add(Weight::from_parts(2_473_994, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_333_000 picoseconds.
        Weight::from_parts(3_150_808, 0)
            // Standard Error: 24_239
            .saturating_add(Weight::from_parts(2_853_024, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_243_000 picoseconds.
        Weight::from_parts(1_149_774, 0)
            // Standard Error: 13_355
            .saturating_add(Weight::from_parts(2_517_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_243_000 picoseconds.
        Weight::from_parts(1_527_824, 0)
            // Standard Error: 31_972
            .saturating_add(Weight::from_parts(9_267_865, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_323_000 picoseconds.
        Weight::from_parts(988_781, 0)
            // Standard Error: 44_193
            .saturating_add(Weight::from_parts(7_612_584, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_294_000 picoseconds.
        Weight::from_parts(2_334_729, 0)
            // Standard Error: 15_965
            .saturating_add(Weight::from_parts(2_951_129, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_243_000 picoseconds.
        Weight::from_parts(1_116_651, 0)
            // Standard Error: 17_134
            .saturating_add(Weight::from_parts(2_528_749, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_247_000 picoseconds.
        Weight::from_parts(2_268_000, 0)
            // Standard Error: 8_575
            .saturating_add(Weight::from_parts(1_262_352, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_245_000 picoseconds.
        Weight::from_parts(2_338_000, 0)
            // Standard Error: 4_378
            .saturating_add(Weight::from_parts(623_671, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_335_000 picoseconds.
        Weight::from_parts(2_380_000, 0)
            // Standard Error: 8_320
            .saturating_add(Weight::from_parts(1_276_618, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_330_000 picoseconds.
        Weight::from_parts(2_374_000, 0)
            // Standard Error: 4_039
            .saturating_add(Weight::from_parts(593_652, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_220_000 picoseconds.
        Weight::from_parts(2_325_000, 0)
            // Standard Error: 8_112
            .saturating_add(Weight::from_parts(1_247_970, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_280_000 picoseconds.
        Weight::from_parts(2_353_000, 0)
            // Standard Error: 4_344
            .saturating_add(Weight::from_parts(606_457, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_234_000 picoseconds.
        Weight::from_parts(2_286_000, 0)
            // Standard Error: 7_296
            .saturating_add(Weight::from_parts(1_053_977, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_342_000 picoseconds.
        Weight::from_parts(75_359, 0)
            // Standard Error: 6_197
            .saturating_add(Weight::from_parts(627_367, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_281_000 picoseconds.
        Weight::from_parts(2_367_000, 0)
            // Standard Error: 6_750
            .saturating_add(Weight::from_parts(1_078_782, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_221_000 picoseconds.
        Weight::from_parts(2_312_000, 0)
            // Standard Error: 4_413
            .saturating_add(Weight::from_parts(586_782, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_353_000 picoseconds.
        Weight::from_parts(2_385_000, 0)
            // Standard Error: 9_421
            .saturating_add(Weight::from_parts(1_130_965, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_344_000 picoseconds.
        Weight::from_parts(2_438_000, 0)
            // Standard Error: 5_975
            .saturating_add(Weight::from_parts(638_969, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_294_000 picoseconds.
        Weight::from_parts(2_356_000, 0)
            // Standard Error: 8_189
            .saturating_add(Weight::from_parts(1_080_515, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_253_000 picoseconds.
        Weight::from_parts(2_290_000, 0)
            // Standard Error: 3_500
            .saturating_add(Weight::from_parts(556_273, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_215_000 picoseconds.
        Weight::from_parts(2_333_000, 0)
            // Standard Error: 7_954
            .saturating_add(Weight::from_parts(1_067_773, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_183_000 picoseconds.
        Weight::from_parts(2_223_000, 0)
            // Standard Error: 3_658
            .saturating_add(Weight::from_parts(566_527, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_003_000 picoseconds.
        Weight::from_parts(1_051_000, 0)
            // Standard Error: 968
            .saturating_add(Weight::from_parts(212_482, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3577 + c * (1024 ±0)`
        // Minimum execution time: 3_267_000 picoseconds.
        Weight::from_parts(3_316_000, 3577)
            // Standard Error: 1_072
            .saturating_add(Weight::from_parts(688_242, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 53_248_000 picoseconds.
        Weight::from_parts(71_345_881, 0)
            // Standard Error: 10_707
            .saturating_add(Weight::from_parts(2_548_249, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1050`
        //  Estimated: `42875`
        // Minimum execution time: 84_992_000 picoseconds.
        Weight::from_parts(88_176_000, 42875)
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `958`
        //  Estimated: `21477`
        // Minimum execution time: 56_951_000 picoseconds.
        Weight::from_parts(58_755_000, 21477)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `605`
        //  Estimated: `17354`
        // Minimum execution time: 30_483_000 picoseconds.
        Weight::from_parts(31_174_000, 17354)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_269_000 picoseconds.
        Weight::from_parts(7_343_300, 7640)
            // Standard Error: 45_015
            .saturating_add(Weight::from_parts(15_758_869, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1439 + c * (16389 ±0)`
        //  Estimated: `42034 + c * (131112 ±0)`
        // Minimum execution time: 70_643_000 picoseconds.
        Weight::from_parts(71_487_000, 42034)
            // Standard Error: 217_960
            .saturating_add(Weight::from_parts(56_304_860, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `5270`
        // Minimum execution time: 63_871_000 picoseconds.
        Weight::from_parts(31_431_372, 5270)
            // Standard Error: 58_224
            .saturating_add(Weight::from_parts(52_560_364, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `742`
        //  Estimated: `39419`
        // Minimum execution time: 65_988_000 picoseconds.
        Weight::from_parts(102_441_114, 39419)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(2_612, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `306`
        //  Estimated: `35235`
        // Minimum execution time: 11_021_135_000 picoseconds.
        Weight::from_parts(397_699_856, 35235)
            // Standard Error: 169_994
            .saturating_add(Weight::from_parts(52_665_060, 0).saturating_mul(c.into()))
            // Standard Error: 10
            .saturating_add(Weight::from_parts(2_533, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `349`
        //  Estimated: `23860`
        // Minimum execution time: 57_013_000 picoseconds.
        Weight::from_parts(35_413_717, 23860)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_158, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `452`
        //  Estimated: `27184`
        // Minimum execution time: 60_180_000 picoseconds.
        Weight::from_parts(33_390_466, 27184)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_167, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1049`
        //  Estimated: `42866`
        // Minimum execution time: 87_446_000 picoseconds.
        Weight::from_parts(69_330_706, 42866)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_174, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1152`
        //  Estimated: `46396`
        // Minimum execution time: 97_152_000 picoseconds.
        Weight::from_parts(77_891_346, 46396)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_170, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `85981`
        // Minimum execution time: 323_882_000 picoseconds.
        Weight::from_parts(336_539_045, 85981)
            .saturating_add(RocksDbWeight::get().reads(29_u64))
            .saturating_add(RocksDbWeight::get().writes(23_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `85905`
        // Minimum execution time: 336_406_000 picoseconds.
        Weight::from_parts(353_807_338, 85905)
            .saturating_add(RocksDbWeight::get().reads(29_u64))
            .saturating_add(RocksDbWeight::get().writes(23_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 45_464_000 picoseconds.
        Weight::from_parts(45_831_000, 3899)
            // Standard Error: 36_617
            .saturating_add(Weight::from_parts(51_273_892, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_254_000 picoseconds.
        Weight::from_parts(86_749_000, 0)
            // Standard Error: 3_967_638
            .saturating_add(Weight::from_parts(617_894_062, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 366_392_000 picoseconds.
        Weight::from_parts(294_624_660, 0)
            // Standard Error: 10_067
            .saturating_add(Weight::from_parts(30_802_641, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 199_070_000 picoseconds.
        Weight::from_parts(213_938_845, 0)
            // Standard Error: 343_895
            .saturating_add(Weight::from_parts(120_152_478, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_714_000 picoseconds.
        Weight::from_parts(96_261_609, 0)
            // Standard Error: 3_991
            .saturating_add(Weight::from_parts(3_567_375, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 139_882_000 picoseconds.
        Weight::from_parts(221_553_985, 0)
            // Standard Error: 29_743
            .saturating_add(Weight::from_parts(3_602_987, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_497_000 picoseconds.
        Weight::from_parts(118_603_695, 0)
            // Standard Error: 431_810
            .saturating_add(Weight::from_parts(177_456_338, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_831_000 picoseconds.
        Weight::from_parts(88_005_607, 0)
            // Standard Error: 244_708
            .saturating_add(Weight::from_parts(175_744_834, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_145_000 picoseconds.
        Weight::from_parts(86_969_872, 0)
            // Standard Error: 302_008
            .saturating_add(Weight::from_parts(180_744_297, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_337_000 picoseconds.
        Weight::from_parts(80_268_581, 0)
            // Standard Error: 290_578
            .saturating_add(Weight::from_parts(180_541_423, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_327_000 picoseconds.
        Weight::from_parts(84_307_332, 0)
            // Standard Error: 316_639
            .saturating_add(Weight::from_parts(179_561_839, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_300_000 picoseconds.
        Weight::from_parts(70_645_226, 0)
            // Standard Error: 320_673
            .saturating_add(Weight::from_parts(182_342_085, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_250_000 picoseconds.
        Weight::from_parts(81_902_510, 0)
            // Standard Error: 273_253
            .saturating_add(Weight::from_parts(180_582_426, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_232_000 picoseconds.
        Weight::from_parts(87_259_581, 0)
            // Standard Error: 294_035
            .saturating_add(Weight::from_parts(175_294_464, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 595_636_000 picoseconds.
        Weight::from_parts(656_136_663, 0)
            // Standard Error: 485_302
            .saturating_add(Weight::from_parts(261_855_478, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 850_360_000 picoseconds.
        Weight::from_parts(903_367_000, 0)
            // Standard Error: 55_203
            .saturating_add(Weight::from_parts(13_094_816, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_957_000 picoseconds.
        Weight::from_parts(87_586_547, 0)
            // Standard Error: 323_063
            .saturating_add(Weight::from_parts(174_117_671, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_008_000 picoseconds.
        Weight::from_parts(78_303_076, 0)
            // Standard Error: 299_495
            .saturating_add(Weight::from_parts(175_222_715, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_234_000 picoseconds.
        Weight::from_parts(103_801_859, 0)
            // Standard Error: 382_198
            .saturating_add(Weight::from_parts(245_171_881, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_211_000 picoseconds.
        Weight::from_parts(87_766_000, 0)
            // Standard Error: 4_237_435
            .saturating_add(Weight::from_parts(1_076_031_771, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_722_000 picoseconds.
        Weight::from_parts(144_011_827, 0)
            // Standard Error: 476_324
            .saturating_add(Weight::from_parts(387_231_993, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 461_434_000 picoseconds.
        Weight::from_parts(469_780_000, 0)
            // Standard Error: 61_125
            .saturating_add(Weight::from_parts(21_613_603, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_818_000 picoseconds.
        Weight::from_parts(149_809_757, 0)
            // Standard Error: 456_443
            .saturating_add(Weight::from_parts(395_488_333, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 479_154_000 picoseconds.
        Weight::from_parts(483_278_000, 0)
            // Standard Error: 67_159
            .saturating_add(Weight::from_parts(21_947_194, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 567_500_000 picoseconds.
        Weight::from_parts(693_644_323, 0)
            // Standard Error: 568_410
            .saturating_add(Weight::from_parts(412_109_027, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 575_808_000 picoseconds.
        Weight::from_parts(724_736_213, 0)
            // Standard Error: 602_935
            .saturating_add(Weight::from_parts(412_885_093, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_691_000 picoseconds.
        Weight::from_parts(74_497_929, 0)
            // Standard Error: 328_672
            .saturating_add(Weight::from_parts(197_295_056, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_899_275_000 picoseconds.
        Weight::from_parts(4_052_914_766, 0)
            // Standard Error: 433_071
            .saturating_add(Weight::from_parts(279_414_467, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 481_093_000 picoseconds.
        Weight::from_parts(489_651_000, 0)
            // Standard Error: 58_131
            .saturating_add(Weight::from_parts(29_725_779, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_898_930_000 picoseconds.
        Weight::from_parts(4_051_051_643, 0)
            // Standard Error: 422_685
            .saturating_add(Weight::from_parts(335_909_883, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_889_863_000 picoseconds.
        Weight::from_parts(4_037_859_582, 0)
            // Standard Error: 492_684
            .saturating_add(Weight::from_parts(354_039_027, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 254_292_000 picoseconds.
        Weight::from_parts(299_243_857, 0)
            // Standard Error: 453_209
            .saturating_add(Weight::from_parts(402_577_817, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 654_055_000 picoseconds.
        Weight::from_parts(663_310_000, 0)
            // Standard Error: 60_031
            .saturating_add(Weight::from_parts(21_652_831, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_054_583_000 picoseconds.
        Weight::from_parts(4_192_801_478, 0)
            // Standard Error: 494_878
            .saturating_add(Weight::from_parts(356_698_705, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_037_000 picoseconds.
        Weight::from_parts(88_828_036, 0)
            // Standard Error: 335_490
            .saturating_add(Weight::from_parts(26_597_063, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_733_000 picoseconds.
        Weight::from_parts(93_898_943, 0)
            // Standard Error: 1_151
            .saturating_add(Weight::from_parts(428_904, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_569_000 picoseconds.
        Weight::from_parts(89_213_638, 0)
            // Standard Error: 317_917
            .saturating_add(Weight::from_parts(22_797_961, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_164_000 picoseconds.
        Weight::from_parts(95_571_505, 0)
            // Standard Error: 1_085
            .saturating_add(Weight::from_parts(425_025, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_844_000 picoseconds.
        Weight::from_parts(88_247_426, 0)
            // Standard Error: 280_700
            .saturating_add(Weight::from_parts(17_706_873, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_987_000 picoseconds.
        Weight::from_parts(87_544_514, 0)
            // Standard Error: 269_120
            .saturating_add(Weight::from_parts(21_098_185, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_012_000 picoseconds.
        Weight::from_parts(115_149_368, 0)
            // Standard Error: 328_818
            .saturating_add(Weight::from_parts(265_684_350, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_890_000 picoseconds.
        Weight::from_parts(102_844_000, 0)
            // Standard Error: 2_931
            .saturating_add(Weight::from_parts(635_797, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 563_182_000 picoseconds.
        Weight::from_parts(640_794_146, 0)
            // Standard Error: 7_497_207
            .saturating_add(Weight::from_parts(15_239_053, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 560_481_000 picoseconds.
        Weight::from_parts(593_427_573, 0)
            // Standard Error: 3_203_142
            .saturating_add(Weight::from_parts(25_969_526, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_574_000 picoseconds.
        Weight::from_parts(97_280_140, 0)
            // Standard Error: 268_694
            .saturating_add(Weight::from_parts(12_092_859, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_631_000 picoseconds.
        Weight::from_parts(94_175_255, 0)
            // Standard Error: 1_213
            .saturating_add(Weight::from_parts(427_553, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_505_000 picoseconds.
        Weight::from_parts(100_109_459, 0)
            // Standard Error: 279_145
            .saturating_add(Weight::from_parts(8_335_840, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_015_000 picoseconds.
        Weight::from_parts(96_000_128, 0)
            // Standard Error: 1_363
            .saturating_add(Weight::from_parts(423_685, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_784_000 picoseconds.
        Weight::from_parts(84_956_444, 0)
            // Standard Error: 285_268
            .saturating_add(Weight::from_parts(178_346_410, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_915_000 picoseconds.
        Weight::from_parts(78_586_027, 0)
            // Standard Error: 254_710
            .saturating_add(Weight::from_parts(178_243_954, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 557_380_000 picoseconds.
        Weight::from_parts(633_253_100, 0)
            // Standard Error: 538_762
            .saturating_add(Weight::from_parts(195_061_580, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 597_682_000 picoseconds.
        Weight::from_parts(661_897_574, 0)
            // Standard Error: 3_826
            .saturating_add(Weight::from_parts(136_457, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_454_821_000 picoseconds.
        Weight::from_parts(4_682_125_339, 0)
            // Standard Error: 520_741
            .saturating_add(Weight::from_parts(206_155_172, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_637_831_000 picoseconds.
        Weight::from_parts(4_748_853_254, 0)
            // Standard Error: 16_010
            .saturating_add(Weight::from_parts(12_276_105, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_447_000 picoseconds.
        Weight::from_parts(111_081_974, 0)
            // Standard Error: 422_093
            .saturating_add(Weight::from_parts(195_515_962, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 188_901_000 picoseconds.
        Weight::from_parts(192_422_000, 0)
            // Standard Error: 54_402
            .saturating_add(Weight::from_parts(25_703_289, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_538_000 picoseconds.
        Weight::from_parts(83_073_715, 0)
            // Standard Error: 285_530
            .saturating_add(Weight::from_parts(174_178_092, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_697_000 picoseconds.
        Weight::from_parts(89_049_881, 0)
            // Standard Error: 281_628
            .saturating_add(Weight::from_parts(27_362_618, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_006_000 picoseconds.
        Weight::from_parts(86_657_161, 0)
            // Standard Error: 254_208
            .saturating_add(Weight::from_parts(14_853_038, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_155_000 picoseconds.
        Weight::from_parts(87_136_381, 0)
            // Standard Error: 296_075
            .saturating_add(Weight::from_parts(15_564_718, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_160_000 picoseconds.
        Weight::from_parts(87_382_440, 0)
            // Standard Error: 263_499
            .saturating_add(Weight::from_parts(17_288_459, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_780_000 picoseconds.
        Weight::from_parts(90_970_389, 0)
            // Standard Error: 273_512
            .saturating_add(Weight::from_parts(14_976_210, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 141_871_000 picoseconds.
        Weight::from_parts(203_107_595, 0)
            // Standard Error: 322_999
            .saturating_add(Weight::from_parts(280_023_774, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_132_000 picoseconds.
        Weight::from_parts(166_620_417, 0)
            // Standard Error: 428_363
            .saturating_add(Weight::from_parts(469_520_431, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 46_670_030_000 picoseconds.
        Weight::from_parts(46_979_707_000, 0)
            // Standard Error: 290_199
            .saturating_add(Weight::from_parts(7_295_075, 0).saturating_mul(p.into()))
            // Standard Error: 290_185
            .saturating_add(Weight::from_parts(178_049_340, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_401_000 picoseconds.
        Weight::from_parts(162_215_381, 0)
            // Standard Error: 435_866
            .saturating_add(Weight::from_parts(479_266_464, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_093_174_000 picoseconds.
        Weight::from_parts(44_268_099_000, 0)
            // Standard Error: 249_484
            .saturating_add(Weight::from_parts(7_595_737, 0).saturating_mul(p.into()))
            // Standard Error: 249_471
            .saturating_add(Weight::from_parts(179_055_114, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_188_000 picoseconds.
        Weight::from_parts(101_583_480, 0)
            // Standard Error: 35_878
            .saturating_add(Weight::from_parts(3_611_568, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 86_183_000 picoseconds.
        Weight::from_parts(118_618_192, 1131)
            // Standard Error: 6_832
            .saturating_add(Weight::from_parts(11_877_671, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 84_629_000 picoseconds.
        Weight::from_parts(86_416_000, 1131)
            // Standard Error: 28_253
            .saturating_add(Weight::from_parts(36_463_142, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_148_282_000 picoseconds.
        Weight::from_parts(5_977_321_351, 5069931)
            // Standard Error: 52_501
            .saturating_add(Weight::from_parts(36_684_019, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 85_557_000 picoseconds.
        Weight::from_parts(86_547_000, 1939)
            // Standard Error: 32_777
            .saturating_add(Weight::from_parts(46_224_064, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 89_966_000 picoseconds.
        Weight::from_parts(89_543_596, 1131)
            // Standard Error: 68_448
            .saturating_add(Weight::from_parts(36_359_585, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 600_329_000 picoseconds.
        Weight::from_parts(623_878_315, 1496)
            // Standard Error: 267_055
            .saturating_add(Weight::from_parts(46_147_238, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_023_023_000 picoseconds.
        Weight::from_parts(1_022_993_537, 317931)
            // Standard Error: 203_791
            .saturating_add(Weight::from_parts(43_538_291, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_300_000 picoseconds.
        Weight::from_parts(2_436_506, 0)
            // Standard Error: 16_946
            .saturating_add(Weight::from_parts(24_493_632, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_347_874_000 picoseconds.
        Weight::from_parts(4_179_322_071, 0)
            // Standard Error: 53_086
            .saturating_add(Weight::from_parts(4_505_224, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_348_187_000 picoseconds.
        Weight::from_parts(4_205_195_765, 0)
            // Standard Error: 44_017
            .saturating_add(Weight::from_parts(4_404_586, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_882_662_000 picoseconds.
        Weight::from_parts(11_083_501_979, 0)
            // Standard Error: 200_162
            .saturating_add(Weight::from_parts(13_165_815, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_784_867_000 picoseconds.
        Weight::from_parts(11_957_102_430, 0)
            // Standard Error: 187_347
            .saturating_add(Weight::from_parts(8_480_335, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_343_000 picoseconds.
        Weight::from_parts(2_421_000, 0)
            // Standard Error: 9_011
            .saturating_add(Weight::from_parts(3_834_828, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_326_000 picoseconds.
        Weight::from_parts(2_421_000, 0)
            // Standard Error: 5_612
            .saturating_add(Weight::from_parts(3_061_076, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_282_000 picoseconds.
        Weight::from_parts(3_427_769, 0)
            // Standard Error: 941
            .saturating_add(Weight::from_parts(1_568_677, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_284_000 picoseconds.
        Weight::from_parts(2_392_000, 0)
            // Standard Error: 8_418
            .saturating_add(Weight::from_parts(2_921_747, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_263_000 picoseconds.
        Weight::from_parts(1_354_050, 0)
            // Standard Error: 14_642
            .saturating_add(Weight::from_parts(5_182_595, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_011_000 picoseconds.
        Weight::from_parts(5_823_252, 0)
            // Standard Error: 2_035
            .saturating_add(Weight::from_parts(162_988, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_405_000 picoseconds.
        Weight::from_parts(5_172_082, 0)
            // Standard Error: 7_906
            .saturating_add(Weight::from_parts(2_576_107, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_576_107 -
            2_413_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_315_000 picoseconds.
        Weight::from_parts(4_417_546, 0)
            // Standard Error: 12_281
            .saturating_add(Weight::from_parts(2_413_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_774_000 picoseconds.
        Weight::from_parts(19_445_534, 0)
            // Standard Error: 34_031
            .saturating_add(Weight::from_parts(9_947_648, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_663_000 picoseconds.
        Weight::from_parts(2_443_915, 0)
            // Standard Error: 6_189
            .saturating_add(Weight::from_parts(1_274_832, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_382_000 picoseconds.
        Weight::from_parts(5_657_220, 0)
            // Standard Error: 12
            .saturating_add(Weight::from_parts(14, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_461_000 picoseconds.
        Weight::from_parts(1_936_508, 0)
            // Standard Error: 3_019
            .saturating_add(Weight::from_parts(275_086, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_305_000 picoseconds.
        Weight::from_parts(2_394_000, 0)
            // Standard Error: 4_239
            .saturating_add(Weight::from_parts(763_775, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_367_000 picoseconds.
        Weight::from_parts(2_411_000, 0)
            // Standard Error: 5_426
            .saturating_add(Weight::from_parts(771_295, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_346_000 picoseconds.
        Weight::from_parts(2_691_888, 0)
            // Standard Error: 7_020
            .saturating_add(Weight::from_parts(804_877, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_476_000 picoseconds.
        Weight::from_parts(6_582_000, 0)
            // Standard Error: 8_493
            .saturating_add(Weight::from_parts(1_358_866, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_943_000 picoseconds.
        Weight::from_parts(1_102_558, 0)
            // Standard Error: 12_614
            .saturating_add(Weight::from_parts(7_099_473, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_298_000 picoseconds.
        Weight::from_parts(2_357_000, 0)
            // Standard Error: 7_419
            .saturating_add(Weight::from_parts(3_438_043, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_201_000 picoseconds.
        Weight::from_parts(2_270_000, 0)
            // Standard Error: 7_089
            .saturating_add(Weight::from_parts(3_224_674, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_358_000 picoseconds.
        Weight::from_parts(2_444_000, 0)
            // Standard Error: 5_880
            .saturating_add(Weight::from_parts(3_196_577, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_205_000 picoseconds.
        Weight::from_parts(2_361_000, 0)
            // Standard Error: 5_007
            .saturating_add(Weight::from_parts(2_694_074, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_217_000 picoseconds.
        Weight::from_parts(2_339_000, 0)
            // Standard Error: 4_242
            .saturating_add(Weight::from_parts(562_083, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_180_000 picoseconds.
        Weight::from_parts(1_150_328, 0)
            // Standard Error: 4_155
            .saturating_add(Weight::from_parts(430_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_218_000 picoseconds.
        Weight::from_parts(2_269_000, 0)
            // Standard Error: 12_863
            .saturating_add(Weight::from_parts(1_875_276, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_290_000 picoseconds.
        Weight::from_parts(2_322_000, 0)
            // Standard Error: 8_333
            .saturating_add(Weight::from_parts(1_185_939, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_384_000 picoseconds.
        Weight::from_parts(1_572_617, 0)
            // Standard Error: 3_727
            .saturating_add(Weight::from_parts(382_695, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_236_000 picoseconds.
        Weight::from_parts(1_495_799, 0)
            // Standard Error: 4_058
            .saturating_add(Weight::from_parts(373_636, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_341_000 picoseconds.
        Weight::from_parts(465_059, 0)
            // Standard Error: 4_917
            .saturating_add(Weight::from_parts(551_259, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_230_000 picoseconds.
        Weight::from_parts(515_890, 0)
            // Standard Error: 4_848
            .saturating_add(Weight::from_parts(545_542, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_272_000 picoseconds.
        Weight::from_parts(739_709, 0)
            // Standard Error: 4_827
            .saturating_add(Weight::from_parts(496_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_322_000 picoseconds.
        Weight::from_parts(1_492_190, 0)
            // Standard Error: 3_923
            .saturating_add(Weight::from_parts(340_665, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_257_000 picoseconds.
        Weight::from_parts(2_979_817, 0)
            // Standard Error: 1_972
            .saturating_add(Weight::from_parts(154_315, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_282_000 picoseconds.
        Weight::from_parts(2_877_230, 0)
            // Standard Error: 1_753
            .saturating_add(Weight::from_parts(153_462, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_193_000 picoseconds.
        Weight::from_parts(2_289_000, 0)
            // Standard Error: 11_649
            .saturating_add(Weight::from_parts(1_795_062, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_303_000 picoseconds.
        Weight::from_parts(2_366_000, 0)
            // Standard Error: 7_436
            .saturating_add(Weight::from_parts(1_091_962, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_346_000 picoseconds.
        Weight::from_parts(2_409_000, 0)
            // Standard Error: 11_197
            .saturating_add(Weight::from_parts(1_828_518, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_328_000 picoseconds.
        Weight::from_parts(2_384_000, 0)
            // Standard Error: 7_307
            .saturating_add(Weight::from_parts(1_106_869, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_286_000 picoseconds.
        Weight::from_parts(2_343_000, 0)
            // Standard Error: 10_932
            .saturating_add(Weight::from_parts(1_789_419, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_214_000 picoseconds.
        Weight::from_parts(2_283_000, 0)
            // Standard Error: 7_556
            .saturating_add(Weight::from_parts(1_111_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_263_000 picoseconds.
        Weight::from_parts(2_322_000, 0)
            // Standard Error: 10_995
            .saturating_add(Weight::from_parts(1_822_680, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_276_000 picoseconds.
        Weight::from_parts(2_334_000, 0)
            // Standard Error: 6_944
            .saturating_add(Weight::from_parts(1_121_080, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_227_000 picoseconds.
        Weight::from_parts(2_292_000, 0)
            // Standard Error: 11_873
            .saturating_add(Weight::from_parts(1_840_273, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_265_000 picoseconds.
        Weight::from_parts(2_409_000, 0)
            // Standard Error: 7_972
            .saturating_add(Weight::from_parts(1_134_825, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_269_000 picoseconds.
        Weight::from_parts(2_355_000, 0)
            // Standard Error: 11_547
            .saturating_add(Weight::from_parts(1_813_029, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_273_000 picoseconds.
        Weight::from_parts(2_349_000, 0)
            // Standard Error: 6_487
            .saturating_add(Weight::from_parts(1_091_201, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_225_000 picoseconds.
        Weight::from_parts(2_329_000, 0)
            // Standard Error: 12_018
            .saturating_add(Weight::from_parts(1_823_755, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_287_000 picoseconds.
        Weight::from_parts(2_359_000, 0)
            // Standard Error: 7_325
            .saturating_add(Weight::from_parts(1_192_292, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_352_000 picoseconds.
        Weight::from_parts(2_386_000, 0)
            // Standard Error: 10_009
            .saturating_add(Weight::from_parts(1_870_539, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_315_000 picoseconds.
        Weight::from_parts(2_382_000, 0)
            // Standard Error: 7_109
            .saturating_add(Weight::from_parts(1_122_152, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_254_000 picoseconds.
        Weight::from_parts(2_337_000, 0)
            // Standard Error: 11_700
            .saturating_add(Weight::from_parts(1_825_021, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_357_000 picoseconds.
        Weight::from_parts(2_407_000, 0)
            // Standard Error: 7_769
            .saturating_add(Weight::from_parts(1_146_472, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_196_000 picoseconds.
        Weight::from_parts(2_292_000, 0)
            // Standard Error: 9_908
            .saturating_add(Weight::from_parts(1_845_094, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_276_000 picoseconds.
        Weight::from_parts(2_382_000, 0)
            // Standard Error: 9_519
            .saturating_add(Weight::from_parts(1_241_507, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_256_000 picoseconds.
        Weight::from_parts(2_323_000, 0)
            // Standard Error: 7_921
            .saturating_add(Weight::from_parts(1_330_988, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_203_000 picoseconds.
        Weight::from_parts(2_262_000, 0)
            // Standard Error: 4_732
            .saturating_add(Weight::from_parts(619_908, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_273_000 picoseconds.
        Weight::from_parts(2_318_000, 0)
            // Standard Error: 8_121
            .saturating_add(Weight::from_parts(1_255_733, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_332_000 picoseconds.
        Weight::from_parts(2_392_000, 0)
            // Standard Error: 5_698
            .saturating_add(Weight::from_parts(666_782, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_269_000 picoseconds.
        Weight::from_parts(2_342_000, 0)
            // Standard Error: 10_724
            .saturating_add(Weight::from_parts(1_779_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_239_000 picoseconds.
        Weight::from_parts(2_377_000, 0)
            // Standard Error: 8_303
            .saturating_add(Weight::from_parts(1_231_579, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_247_000 picoseconds.
        Weight::from_parts(3_881_473, 0)
            // Standard Error: 22_336
            .saturating_add(Weight::from_parts(2_602_873, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_366_000 picoseconds.
        Weight::from_parts(971_800, 0)
            // Standard Error: 9_516
            .saturating_add(Weight::from_parts(2_473_994, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_333_000 picoseconds.
        Weight::from_parts(3_150_808, 0)
            // Standard Error: 24_239
            .saturating_add(Weight::from_parts(2_853_024, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_243_000 picoseconds.
        Weight::from_parts(1_149_774, 0)
            // Standard Error: 13_355
            .saturating_add(Weight::from_parts(2_517_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_243_000 picoseconds.
        Weight::from_parts(1_527_824, 0)
            // Standard Error: 31_972
            .saturating_add(Weight::from_parts(9_267_865, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_323_000 picoseconds.
        Weight::from_parts(988_781, 0)
            // Standard Error: 44_193
            .saturating_add(Weight::from_parts(7_612_584, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_294_000 picoseconds.
        Weight::from_parts(2_334_729, 0)
            // Standard Error: 15_965
            .saturating_add(Weight::from_parts(2_951_129, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_243_000 picoseconds.
        Weight::from_parts(1_116_651, 0)
            // Standard Error: 17_134
            .saturating_add(Weight::from_parts(2_528_749, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_247_000 picoseconds.
        Weight::from_parts(2_268_000, 0)
            // Standard Error: 8_575
            .saturating_add(Weight::from_parts(1_262_352, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_245_000 picoseconds.
        Weight::from_parts(2_338_000, 0)
            // Standard Error: 4_378
            .saturating_add(Weight::from_parts(623_671, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_335_000 picoseconds.
        Weight::from_parts(2_380_000, 0)
            // Standard Error: 8_320
            .saturating_add(Weight::from_parts(1_276_618, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_330_000 picoseconds.
        Weight::from_parts(2_374_000, 0)
            // Standard Error: 4_039
            .saturating_add(Weight::from_parts(593_652, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_220_000 picoseconds.
        Weight::from_parts(2_325_000, 0)
            // Standard Error: 8_112
            .saturating_add(Weight::from_parts(1_247_970, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_280_000 picoseconds.
        Weight::from_parts(2_353_000, 0)
            // Standard Error: 4_344
            .saturating_add(Weight::from_parts(606_457, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_234_000 picoseconds.
        Weight::from_parts(2_286_000, 0)
            // Standard Error: 7_296
            .saturating_add(Weight::from_parts(1_053_977, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_342_000 picoseconds.
        Weight::from_parts(75_359, 0)
            // Standard Error: 6_197
            .saturating_add(Weight::from_parts(627_367, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_281_000 picoseconds.
        Weight::from_parts(2_367_000, 0)
            // Standard Error: 6_750
            .saturating_add(Weight::from_parts(1_078_782, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_221_000 picoseconds.
        Weight::from_parts(2_312_000, 0)
            // Standard Error: 4_413
            .saturating_add(Weight::from_parts(586_782, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_353_000 picoseconds.
        Weight::from_parts(2_385_000, 0)
            // Standard Error: 9_421
            .saturating_add(Weight::from_parts(1_130_965, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_344_000 picoseconds.
        Weight::from_parts(2_438_000, 0)
            // Standard Error: 5_975
            .saturating_add(Weight::from_parts(638_969, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_294_000 picoseconds.
        Weight::from_parts(2_356_000, 0)
            // Standard Error: 8_189
            .saturating_add(Weight::from_parts(1_080_515, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_253_000 picoseconds.
        Weight::from_parts(2_290_000, 0)
            // Standard Error: 3_500
            .saturating_add(Weight::from_parts(556_273, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_215_000 picoseconds.
        Weight::from_parts(2_333_000, 0)
            // Standard Error: 7_954
            .saturating_add(Weight::from_parts(1_067_773, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_183_000 picoseconds.
        Weight::from_parts(2_223_000, 0)
            // Standard Error: 3_658
            .saturating_add(Weight::from_parts(566_527, 0).saturating_mul(r.into()))
    }
}
