// This file is part of Gear.

// Copyright (C) 2022-2024 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-04-09, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=alloc,alloc_per_page,claim_value,create_program,db_read_per_kb,db_write_per_kb,free,free_range,free_range_per_page,gr_block_height,gr_block_timestamp,gr_create_program,gr_create_program_per_kb,gr_create_program_wgas,gr_create_program_wgas_per_kb,gr_debug,gr_debug_per_kb,gr_env_vars,gr_gas_available,gr_message_id,gr_program_id,gr_random,gr_read,gr_read_per_kb,gr_reply_code,gr_reply_deposit,gr_reply_per_kb,gr_reply_push,gr_reply_push_input,gr_reply_push_input_per_kb,gr_reply_push_per_kb,gr_reply_to,gr_reply_wgas_per_kb,gr_reservation_reply_commit_per_kb,gr_reservation_reply_per_kb,gr_reservation_send,gr_reservation_send_commit,gr_reservation_send_per_kb,gr_reserve_gas,gr_send,gr_send_commit,gr_send_commit_wgas,gr_send_init,gr_send_input,gr_send_input_wgas,gr_send_per_kb,gr_send_push,gr_send_push_input,gr_send_push_input_per_kb,gr_send_push_per_kb,gr_send_wgas,gr_send_wgas_per_kb,gr_signal_code,gr_signal_from,gr_size,gr_source,gr_system_reserve_gas,gr_unreserve_gas,gr_value,gr_value_available,gr_wake,instantiate_module_per_kb,instr_br,instr_br_if,instr_br_table,instr_br_table_per_entry,instr_call,instr_call_const,instr_call_indirect,instr_call_indirect_per_param,instr_call_per_local,instr_global_get,instr_global_set,instr_i32add,instr_i32and,instr_i32clz,instr_i32ctz,instr_i32divs,instr_i32divu,instr_i32eq,instr_i32eqz,instr_i32extend16s,instr_i32extend8s,instr_i32ges,instr_i32geu,instr_i32gts,instr_i32gtu,instr_i32les,instr_i32leu,instr_i32load,instr_i32lts,instr_i32ltu,instr_i32mul,instr_i32ne,instr_i32or,instr_i32popcnt,instr_i32rems,instr_i32remu,instr_i32rotl,instr_i32rotr,instr_i32shl,instr_i32shrs,instr_i32shru,instr_i32store,instr_i32sub,instr_i32wrapi64,instr_i32xor,instr_i64add,instr_i64and,instr_i64clz,instr_i64ctz,instr_i64divs,instr_i64divu,instr_i64eq,instr_i64eqz,instr_i64extend16s,instr_i64extend32s,instr_i64extend8s,instr_i64extendsi32,instr_i64extendui32,instr_i64ges,instr_i64geu,instr_i64gts,instr_i64gtu,instr_i64les,instr_i64leu,instr_i64load,instr_i64lts,instr_i64ltu,instr_i64mul,instr_i64ne,instr_i64or,instr_i64popcnt,instr_i64rems,instr_i64remu,instr_i64rotl,instr_i64rotr,instr_i64shl,instr_i64shrs,instr_i64shru,instr_i64store,instr_i64sub,instr_i64xor,instr_if,instr_local_get,instr_local_set,instr_local_tee,instr_memory_current,instr_select,lazy_pages_host_func_read,lazy_pages_host_func_write,lazy_pages_host_func_write_after_read,lazy_pages_load_page_storage_data,lazy_pages_signal_read,lazy_pages_signal_write,lazy_pages_signal_write_after_read,mem_grow,reinstrument_per_kb,send_message,send_reply,tasks_remove_from_mailbox,tasks_remove_from_waitlist,tasks_remove_gas_reservation,tasks_send_dispatch,tasks_send_user_message,tasks_send_user_message_to_mailbox,tasks_wake_message,tasks_wake_message_no_wake,upload_code,upload_program --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn free_range(r: u32, ) -> Weight;
    fn free_range_per_page(p: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_env_vars(r: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn tasks_remove_gas_reservation() -> Weight;
    fn tasks_send_user_message_to_mailbox() -> Weight;
    fn tasks_send_user_message() -> Weight;
    fn tasks_send_dispatch() -> Weight;
    fn tasks_wake_message() -> Weight;
    fn tasks_wake_message_no_wake() -> Weight;
    fn tasks_remove_from_waitlist() -> Weight;
    fn tasks_remove_from_mailbox() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_342_000 picoseconds.
        Weight::from_parts(64_412_476, 0)
            // Standard Error: 37_198
            .saturating_add(Weight::from_parts(22_480_174, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_181_000 picoseconds.
        Weight::from_parts(65_017_310, 0)
            // Standard Error: 36_580
            .saturating_add(Weight::from_parts(21_374_240, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_106_000 picoseconds.
        Weight::from_parts(66_213_602, 0)
            // Standard Error: 35_968
            .saturating_add(Weight::from_parts(21_336_676, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_420_000 picoseconds.
        Weight::from_parts(66_174_486, 0)
            // Standard Error: 33_932
            .saturating_add(Weight::from_parts(19_220_242, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 679_711_000 picoseconds.
        Weight::from_parts(686_647_364, 0)
            // Standard Error: 202_496
            .saturating_add(Weight::from_parts(25_865_578, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 676_851_000 picoseconds.
        Weight::from_parts(683_858_892, 0)
            // Standard Error: 208_774
            .saturating_add(Weight::from_parts(24_582_802, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 75_744_000 picoseconds.
        Weight::from_parts(78_778_146, 0)
            // Standard Error: 34_733
            .saturating_add(Weight::from_parts(8_253_250, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 75_716_000 picoseconds.
        Weight::from_parts(78_692_670, 0)
            // Standard Error: 33_977
            .saturating_add(Weight::from_parts(10_434_360, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_814_000 picoseconds.
        Weight::from_parts(65_958_624, 0)
            // Standard Error: 37_185
            .saturating_add(Weight::from_parts(24_122_888, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_397_000 picoseconds.
        Weight::from_parts(66_138_874, 0)
            // Standard Error: 37_401
            .saturating_add(Weight::from_parts(12_535_280, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_250_000 picoseconds.
        Weight::from_parts(66_354_572, 0)
            // Standard Error: 38_552
            .saturating_add(Weight::from_parts(11_429_924, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_441_000 picoseconds.
        Weight::from_parts(66_230_906, 0)
            // Standard Error: 40_644
            .saturating_add(Weight::from_parts(9_854_244, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_425_000 picoseconds.
        Weight::from_parts(64_358_910, 0)
            // Standard Error: 39_149
            .saturating_add(Weight::from_parts(11_603_952, 0).saturating_mul(r.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_032_000 picoseconds.
        Weight::from_parts(1_097_000, 0)
            // Standard Error: 735
            .saturating_add(Weight::from_parts(244_708, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_300_000 picoseconds.
        Weight::from_parts(3_348_000, 3610)
            // Standard Error: 1_194
            .saturating_add(Weight::from_parts(598_332, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 36_743_000 picoseconds.
        Weight::from_parts(33_527_526, 0)
            // Standard Error: 2_541
            .saturating_add(Weight::from_parts(262_101, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1321`
        //  Estimated: `8799`
        // Minimum execution time: 148_424_000 picoseconds.
        Weight::from_parts(150_944_000, 8799)
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `3578`
        // Minimum execution time: 93_872_000 picoseconds.
        Weight::from_parts(55_129_095, 3578)
            // Standard Error: 52_026
            .saturating_add(Weight::from_parts(62_834_666, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `991`
        //  Estimated: `4456`
        // Minimum execution time: 136_063_000 picoseconds.
        Weight::from_parts(166_171_405, 4456)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(2_211, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `379`
        //  Estimated: `3844`
        // Minimum execution time: 9_520_323_000 picoseconds.
        Weight::from_parts(189_144_225, 3844)
            // Standard Error: 108_336
            .saturating_add(Weight::from_parts(63_922_649, 0).saturating_mul(c.into()))
            // Standard Error: 6
            .saturating_add(Weight::from_parts(2_196, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `480`
        //  Estimated: `6196`
        // Minimum execution time: 112_954_000 picoseconds.
        Weight::from_parts(86_244_456, 6196)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(872, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1320`
        //  Estimated: `8799`
        // Minimum execution time: 179_997_000 picoseconds.
        Weight::from_parts(158_432_734, 8799)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(894, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3682 + c * (1075 ±0)`
        // Minimum execution time: 73_591_000 picoseconds.
        Weight::from_parts(74_592_000, 3682)
            // Standard Error: 32_473
            .saturating_add(Weight::from_parts(61_681_098, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1075).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 60_751_000 picoseconds.
        Weight::from_parts(62_010_000, 0)
            // Standard Error: 2_310_803
            .saturating_add(Weight::from_parts(766_730_622, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 633_685_000 picoseconds.
        Weight::from_parts(624_121_964, 0)
            // Standard Error: 8_001
            .saturating_add(Weight::from_parts(19_786_855, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 170_798_000 picoseconds.
        Weight::from_parts(181_217_129, 0)
            // Standard Error: 80_000
            .saturating_add(Weight::from_parts(50_247_135, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 170_433_000 picoseconds.
        Weight::from_parts(174_244_892, 0)
            // Standard Error: 81_902
            .saturating_add(Weight::from_parts(61_796_579, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 20]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 244_343_000 picoseconds.
        Weight::from_parts(235_677_178, 0)
            // Standard Error: 63_358
            .saturating_add(Weight::from_parts(5_068_497, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 69_497_000 picoseconds.
        Weight::from_parts(74_749_928, 0)
            // Standard Error: 2_996
            .saturating_add(Weight::from_parts(2_264_169, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_653_000 picoseconds.
        Weight::from_parts(111_587_457, 0)
            // Standard Error: 2_577
            .saturating_add(Weight::from_parts(1_946_607, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 67_392_000 picoseconds.
        Weight::from_parts(75_527_495, 0)
            // Standard Error: 51_371
            .saturating_add(Weight::from_parts(83_687_900, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 69_015_000 picoseconds.
        Weight::from_parts(79_535_915, 0)
            // Standard Error: 58_323
            .saturating_add(Weight::from_parts(74_120_288, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_214_000 picoseconds.
        Weight::from_parts(83_760_803, 0)
            // Standard Error: 61_738
            .saturating_add(Weight::from_parts(74_407_841, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_828_000 picoseconds.
        Weight::from_parts(79_341_090, 0)
            // Standard Error: 73_379
            .saturating_add(Weight::from_parts(74_459_591, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 67_410_000 picoseconds.
        Weight::from_parts(79_257_665, 0)
            // Standard Error: 63_445
            .saturating_add(Weight::from_parts(75_653_249, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_130_000 picoseconds.
        Weight::from_parts(83_513_741, 0)
            // Standard Error: 141_169
            .saturating_add(Weight::from_parts(77_429_525, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_219_000 picoseconds.
        Weight::from_parts(78_060_963, 0)
            // Standard Error: 62_385
            .saturating_add(Weight::from_parts(74_584_936, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_037_000 picoseconds.
        Weight::from_parts(77_311_416, 0)
            // Standard Error: 50_426
            .saturating_add(Weight::from_parts(74_154_750, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 687_056_000 picoseconds.
        Weight::from_parts(697_272_696, 0)
            // Standard Error: 73_395
            .saturating_add(Weight::from_parts(133_787_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 808_879_000 picoseconds.
        Weight::from_parts(811_176_000, 0)
            // Standard Error: 43_059
            .saturating_add(Weight::from_parts(12_863_384, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_097_000 picoseconds.
        Weight::from_parts(81_753_952, 0)
            // Standard Error: 82_839
            .saturating_add(Weight::from_parts(83_059_545, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_005_000 picoseconds.
        Weight::from_parts(78_697_921, 0)
            // Standard Error: 61_447
            .saturating_add(Weight::from_parts(74_073_235, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 67_415_000 picoseconds.
        Weight::from_parts(81_425_143, 0)
            // Standard Error: 64_294
            .saturating_add(Weight::from_parts(74_639_626, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_389_000 picoseconds.
        Weight::from_parts(81_010_935, 0)
            // Standard Error: 97_235
            .saturating_add(Weight::from_parts(150_937_218, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_836_000 picoseconds.
        Weight::from_parts(70_969_000, 0)
            // Standard Error: 4_152_446
            .saturating_add(Weight::from_parts(778_365_730, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 67_574_000 picoseconds.
        Weight::from_parts(71_936_420, 0)
            // Standard Error: 212_037
            .saturating_add(Weight::from_parts(255_400_805, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 307_086_000 picoseconds.
        Weight::from_parts(307_414_000, 0)
            // Standard Error: 43_199
            .saturating_add(Weight::from_parts(30_564_400, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_454_000 picoseconds.
        Weight::from_parts(57_375_960, 0)
            // Standard Error: 198_985
            .saturating_add(Weight::from_parts(260_137_877, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 308_715_000 picoseconds.
        Weight::from_parts(310_902_000, 0)
            // Standard Error: 58_509
            .saturating_add(Weight::from_parts(31_313_033, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 683_183_000 picoseconds.
        Weight::from_parts(672_780_370, 0)
            // Standard Error: 229_319
            .saturating_add(Weight::from_parts(248_804_244, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 709_153_000 picoseconds.
        Weight::from_parts(722_683_356, 0)
            // Standard Error: 252_066
            .saturating_add(Weight::from_parts(246_050_484, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_664_000 picoseconds.
        Weight::from_parts(73_974_737, 0)
            // Standard Error: 68_024
            .saturating_add(Weight::from_parts(82_760_592, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_700_982_000 picoseconds.
        Weight::from_parts(1_742_299_177, 0)
            // Standard Error: 311_881
            .saturating_add(Weight::from_parts(159_504_390, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 267_532_000 picoseconds.
        Weight::from_parts(269_048_000, 0)
            // Standard Error: 48_487
            .saturating_add(Weight::from_parts(31_080_042, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_705_674_000 picoseconds.
        Weight::from_parts(1_748_773_212, 0)
            // Standard Error: 226_752
            .saturating_add(Weight::from_parts(214_216_200, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_705_565_000 picoseconds.
        Weight::from_parts(1_756_578_453, 0)
            // Standard Error: 247_490
            .saturating_add(Weight::from_parts(213_728_846, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 136_827_000 picoseconds.
        Weight::from_parts(149_107_120, 0)
            // Standard Error: 162_336
            .saturating_add(Weight::from_parts(270_903_407, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 389_548_000 picoseconds.
        Weight::from_parts(394_392_000, 0)
            // Standard Error: 40_346
            .saturating_add(Weight::from_parts(30_864_290, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_757_355_000 picoseconds.
        Weight::from_parts(1_807_378_722, 0)
            // Standard Error: 299_698
            .saturating_add(Weight::from_parts(229_432_403, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_636_000 picoseconds.
        Weight::from_parts(74_249_170, 0)
            // Standard Error: 996
            .saturating_add(Weight::from_parts(577_961, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_145_000 picoseconds.
        Weight::from_parts(68_206_217, 0)
            // Standard Error: 1_139
            .saturating_add(Weight::from_parts(589_359, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 66_233_000 picoseconds.
        Weight::from_parts(91_930_574, 0)
            // Standard Error: 171_563
            .saturating_add(Weight::from_parts(135_673_513, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_518_000 picoseconds.
        Weight::from_parts(82_843_000, 0)
            // Standard Error: 2_285
            .saturating_add(Weight::from_parts(655_950, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_865_000 picoseconds.
        Weight::from_parts(76_214_329, 0)
            // Standard Error: 921
            .saturating_add(Weight::from_parts(584_512, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_269_000 picoseconds.
        Weight::from_parts(74_148_301, 0)
            // Standard Error: 929
            .saturating_add(Weight::from_parts(585_592, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_587_000 picoseconds.
        Weight::from_parts(81_997_972, 0)
            // Standard Error: 66_043
            .saturating_add(Weight::from_parts(76_020_043, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_696_000 picoseconds.
        Weight::from_parts(94_489_865, 0)
            // Standard Error: 197_083
            .saturating_add(Weight::from_parts(77_000_887, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 66_743_000 picoseconds.
        Weight::from_parts(89_719_238, 0)
            // Standard Error: 76_064
            .saturating_add(Weight::from_parts(75_316_833, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 690_846_000 picoseconds.
        Weight::from_parts(715_479_508, 0)
            // Standard Error: 81_747
            .saturating_add(Weight::from_parts(92_273_923, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 699_382_000 picoseconds.
        Weight::from_parts(713_406_025, 0)
            // Standard Error: 582
            .saturating_add(Weight::from_parts(150_034, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_324_594_000 picoseconds.
        Weight::from_parts(2_351_528_744, 0)
            // Standard Error: 165_810
            .saturating_add(Weight::from_parts(121_605_056, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_437_066_000 picoseconds.
        Weight::from_parts(2_382_984_712, 0)
            // Standard Error: 6_463
            .saturating_add(Weight::from_parts(13_586_421, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 66_498_000 picoseconds.
        Weight::from_parts(80_965_772, 0)
            // Standard Error: 79_503
            .saturating_add(Weight::from_parts(96_988_657, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 123_615_000 picoseconds.
        Weight::from_parts(124_686_000, 0)
            // Standard Error: 60_975
            .saturating_add(Weight::from_parts(25_956_010, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_026_000 picoseconds.
        Weight::from_parts(80_408_202, 0)
            // Standard Error: 68_045
            .saturating_add(Weight::from_parts(73_582_256, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_385_000 picoseconds.
        Weight::from_parts(107_007_000, 0)
            // Standard Error: 1_821_525
            .saturating_add(Weight::from_parts(294_563_800, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 76_652_000 picoseconds.
        Weight::from_parts(70_732_297, 0)
            // Standard Error: 251_504
            .saturating_add(Weight::from_parts(326_308_772, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 45_028_255_000 picoseconds.
        Weight::from_parts(45_056_030_000, 0)
            // Standard Error: 257_577
            .saturating_add(Weight::from_parts(6_396_435, 0).saturating_mul(p.into()))
            // Standard Error: 257_564
            .saturating_add(Weight::from_parts(153_430_909, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 76_528_000 picoseconds.
        Weight::from_parts(69_297_593, 0)
            // Standard Error: 168_715
            .saturating_add(Weight::from_parts(330_199_040, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_764_282_000 picoseconds.
        Weight::from_parts(44_891_319_000, 0)
            // Standard Error: 261_677
            .saturating_add(Weight::from_parts(7_282_931, 0).saturating_mul(p.into()))
            // Standard Error: 261_664
            .saturating_add(Weight::from_parts(153_258_816, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 73_534_000 picoseconds.
        Weight::from_parts(107_829_188, 1131)
            // Standard Error: 15_080
            .saturating_add(Weight::from_parts(15_060_122, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 72_881_000 picoseconds.
        Weight::from_parts(75_027_000, 1131)
            // Standard Error: 35_858
            .saturating_add(Weight::from_parts(38_796_272, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 7_777_133_000 picoseconds.
        Weight::from_parts(7_492_491_772, 5069931)
            // Standard Error: 45_986
            .saturating_add(Weight::from_parts(40_376_041, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1820 + p * (65580 ±0)`
        //  Estimated: `1946 + p * (75482 ±0)`
        // Minimum execution time: 75_175_000 picoseconds.
        Weight::from_parts(77_486_000, 1946)
            // Standard Error: 46_694
            .saturating_add(Weight::from_parts(56_645_948, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 81_024_000 picoseconds.
        Weight::from_parts(80_313_380, 1131)
            // Standard Error: 71_825
            .saturating_add(Weight::from_parts(40_600_455, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 720_148_000 picoseconds.
        Weight::from_parts(719_296_174, 1496)
            // Standard Error: 103_167
            .saturating_add(Weight::from_parts(47_010_756, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_220_400_000 picoseconds.
        Weight::from_parts(1_221_292_006, 317931)
            // Standard Error: 141_505
            .saturating_add(Weight::from_parts(47_325_607, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_774_000 picoseconds.
        Weight::from_parts(9_461_855, 0)
            // Standard Error: 83_700
            .saturating_add(Weight::from_parts(88_598_198, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_530_160_000 picoseconds.
        Weight::from_parts(4_556_572_629, 0)
            // Standard Error: 13_069
            .saturating_add(Weight::from_parts(3_345_585, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_537_670_000 picoseconds.
        Weight::from_parts(4_572_330_399, 0)
            // Standard Error: 15_149
            .saturating_add(Weight::from_parts(3_348_768, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_889_815_000 picoseconds.
        Weight::from_parts(10_613_885_736, 0)
            // Standard Error: 179_309
            .saturating_add(Weight::from_parts(7_787_812, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_310_647_000 picoseconds.
        Weight::from_parts(10_770_521_945, 0)
            // Standard Error: 158_771
            .saturating_add(Weight::from_parts(8_048_666, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_126_000 picoseconds.
        Weight::from_parts(1_220_000, 0)
            // Standard Error: 11_428
            .saturating_add(Weight::from_parts(2_365_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_126_000 picoseconds.
        Weight::from_parts(1_200_000, 0)
            // Standard Error: 9_122
            .saturating_add(Weight::from_parts(2_171_849, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_078_000 picoseconds.
        Weight::from_parts(240_771, 0)
            // Standard Error: 2_467
            .saturating_add(Weight::from_parts(1_581_418, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_142_000 picoseconds.
        Weight::from_parts(1_181_000, 0)
            // Standard Error: 3_388
            .saturating_add(Weight::from_parts(1_863_856, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_094_000 picoseconds.
        Weight::from_parts(1_136_000, 0)
            // Standard Error: 20_209
            .saturating_add(Weight::from_parts(4_295_841, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_802_000 picoseconds.
        Weight::from_parts(4_962_809, 0)
            // Standard Error: 780
            .saturating_add(Weight::from_parts(48_563, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_119_000 picoseconds.
        Weight::from_parts(1_213_889, 0)
            // Standard Error: 5_725
            .saturating_add(Weight::from_parts(2_446_010, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_446_010 -
            2_307_395, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_154_000 picoseconds.
        Weight::from_parts(770_567, 0)
            // Standard Error: 11_838
            .saturating_add(Weight::from_parts(2_307_395, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_196_000 picoseconds.
        Weight::from_parts(1_217_000, 0)
            // Standard Error: 17_924
            .saturating_add(Weight::from_parts(7_740_891, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_842_000 picoseconds.
        Weight::from_parts(5_089_000, 0)
            // Standard Error: 5_516
            .saturating_add(Weight::from_parts(614_508, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_445_000 picoseconds.
        Weight::from_parts(2_647_502, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_543_000 picoseconds.
        Weight::from_parts(7_020_954, 0)
            // Standard Error: 3_170
            .saturating_add(Weight::from_parts(348_175, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_575_000 picoseconds.
        Weight::from_parts(7_166_208, 0)
            // Standard Error: 3_492
            .saturating_add(Weight::from_parts(745_654, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_571_000 picoseconds.
        Weight::from_parts(7_874_187, 0)
            // Standard Error: 3_854
            .saturating_add(Weight::from_parts(745_740, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_169_000 picoseconds.
        Weight::from_parts(5_308_653, 0)
            // Standard Error: 2_752
            .saturating_add(Weight::from_parts(336_903, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_120_000 picoseconds.
        Weight::from_parts(4_874_988, 0)
            // Standard Error: 3_897
            .saturating_add(Weight::from_parts(560_664, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_782_000 picoseconds.
        Weight::from_parts(7_930_046, 0)
            // Standard Error: 3_573
            .saturating_add(Weight::from_parts(5_550_905, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_111_000 picoseconds.
        Weight::from_parts(1_143_000, 0)
            // Standard Error: 4_964
            .saturating_add(Weight::from_parts(2_095_883, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_104_000 picoseconds.
        Weight::from_parts(1_195_000, 0)
            // Standard Error: 3_779
            .saturating_add(Weight::from_parts(1_996_114, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_081_000 picoseconds.
        Weight::from_parts(1_134_000, 0)
            // Standard Error: 18_210
            .saturating_add(Weight::from_parts(2_072_372, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_104_000 picoseconds.
        Weight::from_parts(13_738, 0)
            // Standard Error: 3_176
            .saturating_add(Weight::from_parts(1_906_210, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_142_000 picoseconds.
        Weight::from_parts(663_739, 0)
            // Standard Error: 2_520
            .saturating_add(Weight::from_parts(362_180, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_098_000 picoseconds.
        Weight::from_parts(1_410_317, 0)
            // Standard Error: 2_456
            .saturating_add(Weight::from_parts(254_308, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_127_000 picoseconds.
        Weight::from_parts(1_155_000, 0)
            // Standard Error: 3_251
            .saturating_add(Weight::from_parts(744_476, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_133_000 picoseconds.
        Weight::from_parts(1_157_000, 0)
            // Standard Error: 7_487
            .saturating_add(Weight::from_parts(658_824, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_091_000 picoseconds.
        Weight::from_parts(1_198_562, 0)
            // Standard Error: 2_721
            .saturating_add(Weight::from_parts(273_468, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_128_000 picoseconds.
        Weight::from_parts(1_177_000, 0)
            // Standard Error: 4_050
            .saturating_add(Weight::from_parts(337_533, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_125_000 picoseconds.
        Weight::from_parts(1_196_000, 0)
            // Standard Error: 5_317
            .saturating_add(Weight::from_parts(435_144, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_152_000 picoseconds.
        Weight::from_parts(1_179_000, 0)
            // Standard Error: 3_728
            .saturating_add(Weight::from_parts(409_837, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_088_000 picoseconds.
        Weight::from_parts(1_226_377, 0)
            // Standard Error: 4_452
            .saturating_add(Weight::from_parts(341_148, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_099_000 picoseconds.
        Weight::from_parts(1_132_000, 0)
            // Standard Error: 3_357
            .saturating_add(Weight::from_parts(311_634, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_125_000 picoseconds.
        Weight::from_parts(1_051_025, 0)
            // Standard Error: 1_914
            .saturating_add(Weight::from_parts(169_313, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_107_000 picoseconds.
        Weight::from_parts(796_609, 0)
            // Standard Error: 2_256
            .saturating_add(Weight::from_parts(196_419, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_126_000 picoseconds.
        Weight::from_parts(1_154_000, 0)
            // Standard Error: 12_522
            .saturating_add(Weight::from_parts(1_044_686, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_233_000 picoseconds.
        Weight::from_parts(1_267_000, 0)
            // Standard Error: 5_849
            .saturating_add(Weight::from_parts(667_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_160_000 picoseconds.
        Weight::from_parts(1_223_000, 0)
            // Standard Error: 9_193
            .saturating_add(Weight::from_parts(965_395, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_113_000 picoseconds.
        Weight::from_parts(1_144_000, 0)
            // Standard Error: 4_587
            .saturating_add(Weight::from_parts(629_111, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_164_000 picoseconds.
        Weight::from_parts(1_000_218, 0)
            // Standard Error: 4_373
            .saturating_add(Weight::from_parts(749_269, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_128_000 picoseconds.
        Weight::from_parts(1_504_342, 0)
            // Standard Error: 3_192
            .saturating_add(Weight::from_parts(492_011, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_142_000 picoseconds.
        Weight::from_parts(1_349_759, 0)
            // Standard Error: 3_938
            .saturating_add(Weight::from_parts(697_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_147_000 picoseconds.
        Weight::from_parts(1_179_027, 0)
            // Standard Error: 4_006
            .saturating_add(Weight::from_parts(522_999, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_150_000 picoseconds.
        Weight::from_parts(1_249_853, 0)
            // Standard Error: 3_961
            .saturating_add(Weight::from_parts(781_336, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_115_000 picoseconds.
        Weight::from_parts(1_951_540, 0)
            // Standard Error: 5_154
            .saturating_add(Weight::from_parts(505_007, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_218_000 picoseconds.
        Weight::from_parts(883_225, 0)
            // Standard Error: 4_551
            .saturating_add(Weight::from_parts(709_921, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_148_000 picoseconds.
        Weight::from_parts(860_376, 0)
            // Standard Error: 3_411
            .saturating_add(Weight::from_parts(504_252, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_167_000 picoseconds.
        Weight::from_parts(781_548, 0)
            // Standard Error: 4_134
            .saturating_add(Weight::from_parts(704_441, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_140_000 picoseconds.
        Weight::from_parts(1_410_879, 0)
            // Standard Error: 2_166
            .saturating_add(Weight::from_parts(480_265, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_112_000 picoseconds.
        Weight::from_parts(1_138_000, 0)
            // Standard Error: 3_636
            .saturating_add(Weight::from_parts(762_432, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_111_000 picoseconds.
        Weight::from_parts(1_447_033, 0)
            // Standard Error: 3_127
            .saturating_add(Weight::from_parts(487_888, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_128_000 picoseconds.
        Weight::from_parts(1_151_000, 0)
            // Standard Error: 4_684
            .saturating_add(Weight::from_parts(789_278, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_100_000 picoseconds.
        Weight::from_parts(1_205_796, 0)
            // Standard Error: 3_379
            .saturating_add(Weight::from_parts(519_603, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_112_000 picoseconds.
        Weight::from_parts(1_161_000, 0)
            // Standard Error: 6_316
            .saturating_add(Weight::from_parts(823_640, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_083_000 picoseconds.
        Weight::from_parts(1_167_000, 0)
            // Standard Error: 2_769
            .saturating_add(Weight::from_parts(567_051, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_139_000 picoseconds.
        Weight::from_parts(1_186_000, 0)
            // Standard Error: 7_767
            .saturating_add(Weight::from_parts(818_881, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_086_000 picoseconds.
        Weight::from_parts(290_633, 0)
            // Standard Error: 3_723
            .saturating_add(Weight::from_parts(447_063, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_089_000 picoseconds.
        Weight::from_parts(1_158_000, 0)
            // Standard Error: 6_330
            .saturating_add(Weight::from_parts(769_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_138_000 picoseconds.
        Weight::from_parts(222_233, 0)
            // Standard Error: 4_173
            .saturating_add(Weight::from_parts(468_176, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_096_000 picoseconds.
        Weight::from_parts(1_124_000, 0)
            // Standard Error: 8_345
            .saturating_add(Weight::from_parts(929_811, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_141_000 picoseconds.
        Weight::from_parts(1_174_000, 0)
            // Standard Error: 11_525
            .saturating_add(Weight::from_parts(977_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_122_000 picoseconds.
        Weight::from_parts(1_161_000, 0)
            // Standard Error: 5_209
            .saturating_add(Weight::from_parts(1_661_976, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_089_000 picoseconds.
        Weight::from_parts(344_417, 0)
            // Standard Error: 6_044
            .saturating_add(Weight::from_parts(1_336_323, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_087_000 picoseconds.
        Weight::from_parts(1_149_000, 0)
            // Standard Error: 6_773
            .saturating_add(Weight::from_parts(1_726_892, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_126_000 picoseconds.
        Weight::from_parts(1_168_000, 0)
            // Standard Error: 6_553
            .saturating_add(Weight::from_parts(1_372_685, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_092_000 picoseconds.
        Weight::from_parts(1_190_000, 0)
            // Standard Error: 56_540
            .saturating_add(Weight::from_parts(6_047_040, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_111_000 picoseconds.
        Weight::from_parts(1_138_000, 0)
            // Standard Error: 40_609
            .saturating_add(Weight::from_parts(3_890_058, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_074_000 picoseconds.
        Weight::from_parts(1_166_000, 0)
            // Standard Error: 6_517
            .saturating_add(Weight::from_parts(1_822_711, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_105_000 picoseconds.
        Weight::from_parts(1_147_000, 0)
            // Standard Error: 5_049
            .saturating_add(Weight::from_parts(1_261_297, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_135_000 picoseconds.
        Weight::from_parts(1_195_000, 0)
            // Standard Error: 4_980
            .saturating_add(Weight::from_parts(694_554, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_116_000 picoseconds.
        Weight::from_parts(1_132_000, 0)
            // Standard Error: 8_143
            .saturating_add(Weight::from_parts(576_761, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_113_000 picoseconds.
        Weight::from_parts(1_201_000, 0)
            // Standard Error: 6_605
            .saturating_add(Weight::from_parts(760_651, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_107_000 picoseconds.
        Weight::from_parts(304_083, 0)
            // Standard Error: 3_618
            .saturating_add(Weight::from_parts(417_302, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_097_000 picoseconds.
        Weight::from_parts(1_153_000, 0)
            // Standard Error: 5_235
            .saturating_add(Weight::from_parts(680_341, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_105_000 picoseconds.
        Weight::from_parts(72_522, 0)
            // Standard Error: 3_683
            .saturating_add(Weight::from_parts(432_029, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_145_000 picoseconds.
        Weight::from_parts(1_194_000, 0)
            // Standard Error: 4_302
            .saturating_add(Weight::from_parts(597_109, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_148_000 picoseconds.
        Weight::from_parts(1_029_675, 0)
            // Standard Error: 3_160
            .saturating_add(Weight::from_parts(369_697, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_173_000 picoseconds.
        Weight::from_parts(1_211_000, 0)
            // Standard Error: 4_421
            .saturating_add(Weight::from_parts(586_377, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_116_000 picoseconds.
        Weight::from_parts(734_716, 0)
            // Standard Error: 2_873
            .saturating_add(Weight::from_parts(385_085, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_090_000 picoseconds.
        Weight::from_parts(483_072, 0)
            // Standard Error: 3_841
            .saturating_add(Weight::from_parts(546_280, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_123_000 picoseconds.
        Weight::from_parts(503_906, 0)
            // Standard Error: 2_552
            .saturating_add(Weight::from_parts(376_314, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_111_000 picoseconds.
        Weight::from_parts(1_187_000, 0)
            // Standard Error: 9_321
            .saturating_add(Weight::from_parts(813_202, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_093_000 picoseconds.
        Weight::from_parts(1_626_471, 0)
            // Standard Error: 3_309
            .saturating_add(Weight::from_parts(347_852, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_125_000 picoseconds.
        Weight::from_parts(1_160_000, 0)
            // Standard Error: 7_030
            .saturating_add(Weight::from_parts(600_455, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_131_000 picoseconds.
        Weight::from_parts(905_893, 0)
            // Standard Error: 5_600
            .saturating_add(Weight::from_parts(380_454, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1090`
        //  Estimated: `6196`
        // Minimum execution time: 79_480_000 picoseconds.
        Weight::from_parts(82_623_000, 6196)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `858`
        //  Estimated: `4323`
        // Minimum execution time: 48_573_000 picoseconds.
        Weight::from_parts(49_820_000, 4323)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1009`
        //  Estimated: `6196`
        // Minimum execution time: 93_112_000 picoseconds.
        Weight::from_parts(95_664_000, 6196)
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `694`
        //  Estimated: `4159`
        // Minimum execution time: 34_103_000 picoseconds.
        Weight::from_parts(35_066_000, 4159)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `937`
        //  Estimated: `4402`
        // Minimum execution time: 48_852_000 picoseconds.
        Weight::from_parts(51_545_000, 4402)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 4_819_000 picoseconds.
        Weight::from_parts(5_259_000, 3545)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1565`
        //  Estimated: `7505`
        // Minimum execution time: 130_277_000 picoseconds.
        Weight::from_parts(132_686_000, 7505)
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1294`
        //  Estimated: `7234`
        // Minimum execution time: 108_063_000 picoseconds.
        Weight::from_parts(109_917_000, 7234)
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_342_000 picoseconds.
        Weight::from_parts(64_412_476, 0)
            // Standard Error: 37_198
            .saturating_add(Weight::from_parts(22_480_174, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_181_000 picoseconds.
        Weight::from_parts(65_017_310, 0)
            // Standard Error: 36_580
            .saturating_add(Weight::from_parts(21_374_240, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_106_000 picoseconds.
        Weight::from_parts(66_213_602, 0)
            // Standard Error: 35_968
            .saturating_add(Weight::from_parts(21_336_676, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_420_000 picoseconds.
        Weight::from_parts(66_174_486, 0)
            // Standard Error: 33_932
            .saturating_add(Weight::from_parts(19_220_242, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 679_711_000 picoseconds.
        Weight::from_parts(686_647_364, 0)
            // Standard Error: 202_496
            .saturating_add(Weight::from_parts(25_865_578, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 676_851_000 picoseconds.
        Weight::from_parts(683_858_892, 0)
            // Standard Error: 208_774
            .saturating_add(Weight::from_parts(24_582_802, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 75_744_000 picoseconds.
        Weight::from_parts(78_778_146, 0)
            // Standard Error: 34_733
            .saturating_add(Weight::from_parts(8_253_250, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 75_716_000 picoseconds.
        Weight::from_parts(78_692_670, 0)
            // Standard Error: 33_977
            .saturating_add(Weight::from_parts(10_434_360, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_814_000 picoseconds.
        Weight::from_parts(65_958_624, 0)
            // Standard Error: 37_185
            .saturating_add(Weight::from_parts(24_122_888, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_397_000 picoseconds.
        Weight::from_parts(66_138_874, 0)
            // Standard Error: 37_401
            .saturating_add(Weight::from_parts(12_535_280, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_250_000 picoseconds.
        Weight::from_parts(66_354_572, 0)
            // Standard Error: 38_552
            .saturating_add(Weight::from_parts(11_429_924, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_441_000 picoseconds.
        Weight::from_parts(66_230_906, 0)
            // Standard Error: 40_644
            .saturating_add(Weight::from_parts(9_854_244, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_425_000 picoseconds.
        Weight::from_parts(64_358_910, 0)
            // Standard Error: 39_149
            .saturating_add(Weight::from_parts(11_603_952, 0).saturating_mul(r.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_032_000 picoseconds.
        Weight::from_parts(1_097_000, 0)
            // Standard Error: 735
            .saturating_add(Weight::from_parts(244_708, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_300_000 picoseconds.
        Weight::from_parts(3_348_000, 3610)
            // Standard Error: 1_194
            .saturating_add(Weight::from_parts(598_332, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 36_743_000 picoseconds.
        Weight::from_parts(33_527_526, 0)
            // Standard Error: 2_541
            .saturating_add(Weight::from_parts(262_101, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1321`
        //  Estimated: `8799`
        // Minimum execution time: 148_424_000 picoseconds.
        Weight::from_parts(150_944_000, 8799)
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `3578`
        // Minimum execution time: 93_872_000 picoseconds.
        Weight::from_parts(55_129_095, 3578)
            // Standard Error: 52_026
            .saturating_add(Weight::from_parts(62_834_666, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `991`
        //  Estimated: `4456`
        // Minimum execution time: 136_063_000 picoseconds.
        Weight::from_parts(166_171_405, 4456)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(2_211, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `379`
        //  Estimated: `3844`
        // Minimum execution time: 9_520_323_000 picoseconds.
        Weight::from_parts(189_144_225, 3844)
            // Standard Error: 108_336
            .saturating_add(Weight::from_parts(63_922_649, 0).saturating_mul(c.into()))
            // Standard Error: 6
            .saturating_add(Weight::from_parts(2_196, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `480`
        //  Estimated: `6196`
        // Minimum execution time: 112_954_000 picoseconds.
        Weight::from_parts(86_244_456, 6196)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(872, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1320`
        //  Estimated: `8799`
        // Minimum execution time: 179_997_000 picoseconds.
        Weight::from_parts(158_432_734, 8799)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(894, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3682 + c * (1075 ±0)`
        // Minimum execution time: 73_591_000 picoseconds.
        Weight::from_parts(74_592_000, 3682)
            // Standard Error: 32_473
            .saturating_add(Weight::from_parts(61_681_098, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1075).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 60_751_000 picoseconds.
        Weight::from_parts(62_010_000, 0)
            // Standard Error: 2_310_803
            .saturating_add(Weight::from_parts(766_730_622, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 633_685_000 picoseconds.
        Weight::from_parts(624_121_964, 0)
            // Standard Error: 8_001
            .saturating_add(Weight::from_parts(19_786_855, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 170_798_000 picoseconds.
        Weight::from_parts(181_217_129, 0)
            // Standard Error: 80_000
            .saturating_add(Weight::from_parts(50_247_135, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 170_433_000 picoseconds.
        Weight::from_parts(174_244_892, 0)
            // Standard Error: 81_902
            .saturating_add(Weight::from_parts(61_796_579, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 20]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 244_343_000 picoseconds.
        Weight::from_parts(235_677_178, 0)
            // Standard Error: 63_358
            .saturating_add(Weight::from_parts(5_068_497, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 69_497_000 picoseconds.
        Weight::from_parts(74_749_928, 0)
            // Standard Error: 2_996
            .saturating_add(Weight::from_parts(2_264_169, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_653_000 picoseconds.
        Weight::from_parts(111_587_457, 0)
            // Standard Error: 2_577
            .saturating_add(Weight::from_parts(1_946_607, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 67_392_000 picoseconds.
        Weight::from_parts(75_527_495, 0)
            // Standard Error: 51_371
            .saturating_add(Weight::from_parts(83_687_900, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 69_015_000 picoseconds.
        Weight::from_parts(79_535_915, 0)
            // Standard Error: 58_323
            .saturating_add(Weight::from_parts(74_120_288, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_214_000 picoseconds.
        Weight::from_parts(83_760_803, 0)
            // Standard Error: 61_738
            .saturating_add(Weight::from_parts(74_407_841, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_828_000 picoseconds.
        Weight::from_parts(79_341_090, 0)
            // Standard Error: 73_379
            .saturating_add(Weight::from_parts(74_459_591, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 67_410_000 picoseconds.
        Weight::from_parts(79_257_665, 0)
            // Standard Error: 63_445
            .saturating_add(Weight::from_parts(75_653_249, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_130_000 picoseconds.
        Weight::from_parts(83_513_741, 0)
            // Standard Error: 141_169
            .saturating_add(Weight::from_parts(77_429_525, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_219_000 picoseconds.
        Weight::from_parts(78_060_963, 0)
            // Standard Error: 62_385
            .saturating_add(Weight::from_parts(74_584_936, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_037_000 picoseconds.
        Weight::from_parts(77_311_416, 0)
            // Standard Error: 50_426
            .saturating_add(Weight::from_parts(74_154_750, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 687_056_000 picoseconds.
        Weight::from_parts(697_272_696, 0)
            // Standard Error: 73_395
            .saturating_add(Weight::from_parts(133_787_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 808_879_000 picoseconds.
        Weight::from_parts(811_176_000, 0)
            // Standard Error: 43_059
            .saturating_add(Weight::from_parts(12_863_384, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_097_000 picoseconds.
        Weight::from_parts(81_753_952, 0)
            // Standard Error: 82_839
            .saturating_add(Weight::from_parts(83_059_545, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_005_000 picoseconds.
        Weight::from_parts(78_697_921, 0)
            // Standard Error: 61_447
            .saturating_add(Weight::from_parts(74_073_235, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 67_415_000 picoseconds.
        Weight::from_parts(81_425_143, 0)
            // Standard Error: 64_294
            .saturating_add(Weight::from_parts(74_639_626, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_389_000 picoseconds.
        Weight::from_parts(81_010_935, 0)
            // Standard Error: 97_235
            .saturating_add(Weight::from_parts(150_937_218, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_836_000 picoseconds.
        Weight::from_parts(70_969_000, 0)
            // Standard Error: 4_152_446
            .saturating_add(Weight::from_parts(778_365_730, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 67_574_000 picoseconds.
        Weight::from_parts(71_936_420, 0)
            // Standard Error: 212_037
            .saturating_add(Weight::from_parts(255_400_805, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 307_086_000 picoseconds.
        Weight::from_parts(307_414_000, 0)
            // Standard Error: 43_199
            .saturating_add(Weight::from_parts(30_564_400, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_454_000 picoseconds.
        Weight::from_parts(57_375_960, 0)
            // Standard Error: 198_985
            .saturating_add(Weight::from_parts(260_137_877, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 308_715_000 picoseconds.
        Weight::from_parts(310_902_000, 0)
            // Standard Error: 58_509
            .saturating_add(Weight::from_parts(31_313_033, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 683_183_000 picoseconds.
        Weight::from_parts(672_780_370, 0)
            // Standard Error: 229_319
            .saturating_add(Weight::from_parts(248_804_244, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 709_153_000 picoseconds.
        Weight::from_parts(722_683_356, 0)
            // Standard Error: 252_066
            .saturating_add(Weight::from_parts(246_050_484, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_664_000 picoseconds.
        Weight::from_parts(73_974_737, 0)
            // Standard Error: 68_024
            .saturating_add(Weight::from_parts(82_760_592, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_700_982_000 picoseconds.
        Weight::from_parts(1_742_299_177, 0)
            // Standard Error: 311_881
            .saturating_add(Weight::from_parts(159_504_390, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 267_532_000 picoseconds.
        Weight::from_parts(269_048_000, 0)
            // Standard Error: 48_487
            .saturating_add(Weight::from_parts(31_080_042, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_705_674_000 picoseconds.
        Weight::from_parts(1_748_773_212, 0)
            // Standard Error: 226_752
            .saturating_add(Weight::from_parts(214_216_200, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_705_565_000 picoseconds.
        Weight::from_parts(1_756_578_453, 0)
            // Standard Error: 247_490
            .saturating_add(Weight::from_parts(213_728_846, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 136_827_000 picoseconds.
        Weight::from_parts(149_107_120, 0)
            // Standard Error: 162_336
            .saturating_add(Weight::from_parts(270_903_407, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 389_548_000 picoseconds.
        Weight::from_parts(394_392_000, 0)
            // Standard Error: 40_346
            .saturating_add(Weight::from_parts(30_864_290, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_757_355_000 picoseconds.
        Weight::from_parts(1_807_378_722, 0)
            // Standard Error: 299_698
            .saturating_add(Weight::from_parts(229_432_403, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_636_000 picoseconds.
        Weight::from_parts(74_249_170, 0)
            // Standard Error: 996
            .saturating_add(Weight::from_parts(577_961, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_145_000 picoseconds.
        Weight::from_parts(68_206_217, 0)
            // Standard Error: 1_139
            .saturating_add(Weight::from_parts(589_359, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 66_233_000 picoseconds.
        Weight::from_parts(91_930_574, 0)
            // Standard Error: 171_563
            .saturating_add(Weight::from_parts(135_673_513, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_518_000 picoseconds.
        Weight::from_parts(82_843_000, 0)
            // Standard Error: 2_285
            .saturating_add(Weight::from_parts(655_950, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_865_000 picoseconds.
        Weight::from_parts(76_214_329, 0)
            // Standard Error: 921
            .saturating_add(Weight::from_parts(584_512, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_269_000 picoseconds.
        Weight::from_parts(74_148_301, 0)
            // Standard Error: 929
            .saturating_add(Weight::from_parts(585_592, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_587_000 picoseconds.
        Weight::from_parts(81_997_972, 0)
            // Standard Error: 66_043
            .saturating_add(Weight::from_parts(76_020_043, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_696_000 picoseconds.
        Weight::from_parts(94_489_865, 0)
            // Standard Error: 197_083
            .saturating_add(Weight::from_parts(77_000_887, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 66_743_000 picoseconds.
        Weight::from_parts(89_719_238, 0)
            // Standard Error: 76_064
            .saturating_add(Weight::from_parts(75_316_833, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 690_846_000 picoseconds.
        Weight::from_parts(715_479_508, 0)
            // Standard Error: 81_747
            .saturating_add(Weight::from_parts(92_273_923, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 699_382_000 picoseconds.
        Weight::from_parts(713_406_025, 0)
            // Standard Error: 582
            .saturating_add(Weight::from_parts(150_034, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_324_594_000 picoseconds.
        Weight::from_parts(2_351_528_744, 0)
            // Standard Error: 165_810
            .saturating_add(Weight::from_parts(121_605_056, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_437_066_000 picoseconds.
        Weight::from_parts(2_382_984_712, 0)
            // Standard Error: 6_463
            .saturating_add(Weight::from_parts(13_586_421, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 66_498_000 picoseconds.
        Weight::from_parts(80_965_772, 0)
            // Standard Error: 79_503
            .saturating_add(Weight::from_parts(96_988_657, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 123_615_000 picoseconds.
        Weight::from_parts(124_686_000, 0)
            // Standard Error: 60_975
            .saturating_add(Weight::from_parts(25_956_010, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_026_000 picoseconds.
        Weight::from_parts(80_408_202, 0)
            // Standard Error: 68_045
            .saturating_add(Weight::from_parts(73_582_256, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_385_000 picoseconds.
        Weight::from_parts(107_007_000, 0)
            // Standard Error: 1_821_525
            .saturating_add(Weight::from_parts(294_563_800, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 76_652_000 picoseconds.
        Weight::from_parts(70_732_297, 0)
            // Standard Error: 251_504
            .saturating_add(Weight::from_parts(326_308_772, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 45_028_255_000 picoseconds.
        Weight::from_parts(45_056_030_000, 0)
            // Standard Error: 257_577
            .saturating_add(Weight::from_parts(6_396_435, 0).saturating_mul(p.into()))
            // Standard Error: 257_564
            .saturating_add(Weight::from_parts(153_430_909, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 76_528_000 picoseconds.
        Weight::from_parts(69_297_593, 0)
            // Standard Error: 168_715
            .saturating_add(Weight::from_parts(330_199_040, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_764_282_000 picoseconds.
        Weight::from_parts(44_891_319_000, 0)
            // Standard Error: 261_677
            .saturating_add(Weight::from_parts(7_282_931, 0).saturating_mul(p.into()))
            // Standard Error: 261_664
            .saturating_add(Weight::from_parts(153_258_816, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 73_534_000 picoseconds.
        Weight::from_parts(107_829_188, 1131)
            // Standard Error: 15_080
            .saturating_add(Weight::from_parts(15_060_122, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 72_881_000 picoseconds.
        Weight::from_parts(75_027_000, 1131)
            // Standard Error: 35_858
            .saturating_add(Weight::from_parts(38_796_272, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 7_777_133_000 picoseconds.
        Weight::from_parts(7_492_491_772, 5069931)
            // Standard Error: 45_986
            .saturating_add(Weight::from_parts(40_376_041, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1820 + p * (65580 ±0)`
        //  Estimated: `1946 + p * (75482 ±0)`
        // Minimum execution time: 75_175_000 picoseconds.
        Weight::from_parts(77_486_000, 1946)
            // Standard Error: 46_694
            .saturating_add(Weight::from_parts(56_645_948, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 81_024_000 picoseconds.
        Weight::from_parts(80_313_380, 1131)
            // Standard Error: 71_825
            .saturating_add(Weight::from_parts(40_600_455, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 720_148_000 picoseconds.
        Weight::from_parts(719_296_174, 1496)
            // Standard Error: 103_167
            .saturating_add(Weight::from_parts(47_010_756, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_220_400_000 picoseconds.
        Weight::from_parts(1_221_292_006, 317931)
            // Standard Error: 141_505
            .saturating_add(Weight::from_parts(47_325_607, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_774_000 picoseconds.
        Weight::from_parts(9_461_855, 0)
            // Standard Error: 83_700
            .saturating_add(Weight::from_parts(88_598_198, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_530_160_000 picoseconds.
        Weight::from_parts(4_556_572_629, 0)
            // Standard Error: 13_069
            .saturating_add(Weight::from_parts(3_345_585, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_537_670_000 picoseconds.
        Weight::from_parts(4_572_330_399, 0)
            // Standard Error: 15_149
            .saturating_add(Weight::from_parts(3_348_768, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_889_815_000 picoseconds.
        Weight::from_parts(10_613_885_736, 0)
            // Standard Error: 179_309
            .saturating_add(Weight::from_parts(7_787_812, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_310_647_000 picoseconds.
        Weight::from_parts(10_770_521_945, 0)
            // Standard Error: 158_771
            .saturating_add(Weight::from_parts(8_048_666, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_126_000 picoseconds.
        Weight::from_parts(1_220_000, 0)
            // Standard Error: 11_428
            .saturating_add(Weight::from_parts(2_365_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_126_000 picoseconds.
        Weight::from_parts(1_200_000, 0)
            // Standard Error: 9_122
            .saturating_add(Weight::from_parts(2_171_849, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_078_000 picoseconds.
        Weight::from_parts(240_771, 0)
            // Standard Error: 2_467
            .saturating_add(Weight::from_parts(1_581_418, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_142_000 picoseconds.
        Weight::from_parts(1_181_000, 0)
            // Standard Error: 3_388
            .saturating_add(Weight::from_parts(1_863_856, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_094_000 picoseconds.
        Weight::from_parts(1_136_000, 0)
            // Standard Error: 20_209
            .saturating_add(Weight::from_parts(4_295_841, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_802_000 picoseconds.
        Weight::from_parts(4_962_809, 0)
            // Standard Error: 780
            .saturating_add(Weight::from_parts(48_563, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_119_000 picoseconds.
        Weight::from_parts(1_213_889, 0)
            // Standard Error: 5_725
            .saturating_add(Weight::from_parts(2_446_010, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_446_010 -
            2_307_395, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_154_000 picoseconds.
        Weight::from_parts(770_567, 0)
            // Standard Error: 11_838
            .saturating_add(Weight::from_parts(2_307_395, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_196_000 picoseconds.
        Weight::from_parts(1_217_000, 0)
            // Standard Error: 17_924
            .saturating_add(Weight::from_parts(7_740_891, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_842_000 picoseconds.
        Weight::from_parts(5_089_000, 0)
            // Standard Error: 5_516
            .saturating_add(Weight::from_parts(614_508, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_445_000 picoseconds.
        Weight::from_parts(2_647_502, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_543_000 picoseconds.
        Weight::from_parts(7_020_954, 0)
            // Standard Error: 3_170
            .saturating_add(Weight::from_parts(348_175, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_575_000 picoseconds.
        Weight::from_parts(7_166_208, 0)
            // Standard Error: 3_492
            .saturating_add(Weight::from_parts(745_654, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_571_000 picoseconds.
        Weight::from_parts(7_874_187, 0)
            // Standard Error: 3_854
            .saturating_add(Weight::from_parts(745_740, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_169_000 picoseconds.
        Weight::from_parts(5_308_653, 0)
            // Standard Error: 2_752
            .saturating_add(Weight::from_parts(336_903, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_120_000 picoseconds.
        Weight::from_parts(4_874_988, 0)
            // Standard Error: 3_897
            .saturating_add(Weight::from_parts(560_664, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_782_000 picoseconds.
        Weight::from_parts(7_930_046, 0)
            // Standard Error: 3_573
            .saturating_add(Weight::from_parts(5_550_905, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_111_000 picoseconds.
        Weight::from_parts(1_143_000, 0)
            // Standard Error: 4_964
            .saturating_add(Weight::from_parts(2_095_883, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_104_000 picoseconds.
        Weight::from_parts(1_195_000, 0)
            // Standard Error: 3_779
            .saturating_add(Weight::from_parts(1_996_114, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_081_000 picoseconds.
        Weight::from_parts(1_134_000, 0)
            // Standard Error: 18_210
            .saturating_add(Weight::from_parts(2_072_372, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_104_000 picoseconds.
        Weight::from_parts(13_738, 0)
            // Standard Error: 3_176
            .saturating_add(Weight::from_parts(1_906_210, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_142_000 picoseconds.
        Weight::from_parts(663_739, 0)
            // Standard Error: 2_520
            .saturating_add(Weight::from_parts(362_180, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_098_000 picoseconds.
        Weight::from_parts(1_410_317, 0)
            // Standard Error: 2_456
            .saturating_add(Weight::from_parts(254_308, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_127_000 picoseconds.
        Weight::from_parts(1_155_000, 0)
            // Standard Error: 3_251
            .saturating_add(Weight::from_parts(744_476, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_133_000 picoseconds.
        Weight::from_parts(1_157_000, 0)
            // Standard Error: 7_487
            .saturating_add(Weight::from_parts(658_824, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_091_000 picoseconds.
        Weight::from_parts(1_198_562, 0)
            // Standard Error: 2_721
            .saturating_add(Weight::from_parts(273_468, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_128_000 picoseconds.
        Weight::from_parts(1_177_000, 0)
            // Standard Error: 4_050
            .saturating_add(Weight::from_parts(337_533, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_125_000 picoseconds.
        Weight::from_parts(1_196_000, 0)
            // Standard Error: 5_317
            .saturating_add(Weight::from_parts(435_144, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_152_000 picoseconds.
        Weight::from_parts(1_179_000, 0)
            // Standard Error: 3_728
            .saturating_add(Weight::from_parts(409_837, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_088_000 picoseconds.
        Weight::from_parts(1_226_377, 0)
            // Standard Error: 4_452
            .saturating_add(Weight::from_parts(341_148, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_099_000 picoseconds.
        Weight::from_parts(1_132_000, 0)
            // Standard Error: 3_357
            .saturating_add(Weight::from_parts(311_634, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_125_000 picoseconds.
        Weight::from_parts(1_051_025, 0)
            // Standard Error: 1_914
            .saturating_add(Weight::from_parts(169_313, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_107_000 picoseconds.
        Weight::from_parts(796_609, 0)
            // Standard Error: 2_256
            .saturating_add(Weight::from_parts(196_419, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_126_000 picoseconds.
        Weight::from_parts(1_154_000, 0)
            // Standard Error: 12_522
            .saturating_add(Weight::from_parts(1_044_686, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_233_000 picoseconds.
        Weight::from_parts(1_267_000, 0)
            // Standard Error: 5_849
            .saturating_add(Weight::from_parts(667_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_160_000 picoseconds.
        Weight::from_parts(1_223_000, 0)
            // Standard Error: 9_193
            .saturating_add(Weight::from_parts(965_395, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_113_000 picoseconds.
        Weight::from_parts(1_144_000, 0)
            // Standard Error: 4_587
            .saturating_add(Weight::from_parts(629_111, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_164_000 picoseconds.
        Weight::from_parts(1_000_218, 0)
            // Standard Error: 4_373
            .saturating_add(Weight::from_parts(749_269, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_128_000 picoseconds.
        Weight::from_parts(1_504_342, 0)
            // Standard Error: 3_192
            .saturating_add(Weight::from_parts(492_011, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_142_000 picoseconds.
        Weight::from_parts(1_349_759, 0)
            // Standard Error: 3_938
            .saturating_add(Weight::from_parts(697_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_147_000 picoseconds.
        Weight::from_parts(1_179_027, 0)
            // Standard Error: 4_006
            .saturating_add(Weight::from_parts(522_999, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_150_000 picoseconds.
        Weight::from_parts(1_249_853, 0)
            // Standard Error: 3_961
            .saturating_add(Weight::from_parts(781_336, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_115_000 picoseconds.
        Weight::from_parts(1_951_540, 0)
            // Standard Error: 5_154
            .saturating_add(Weight::from_parts(505_007, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_218_000 picoseconds.
        Weight::from_parts(883_225, 0)
            // Standard Error: 4_551
            .saturating_add(Weight::from_parts(709_921, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_148_000 picoseconds.
        Weight::from_parts(860_376, 0)
            // Standard Error: 3_411
            .saturating_add(Weight::from_parts(504_252, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_167_000 picoseconds.
        Weight::from_parts(781_548, 0)
            // Standard Error: 4_134
            .saturating_add(Weight::from_parts(704_441, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_140_000 picoseconds.
        Weight::from_parts(1_410_879, 0)
            // Standard Error: 2_166
            .saturating_add(Weight::from_parts(480_265, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_112_000 picoseconds.
        Weight::from_parts(1_138_000, 0)
            // Standard Error: 3_636
            .saturating_add(Weight::from_parts(762_432, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_111_000 picoseconds.
        Weight::from_parts(1_447_033, 0)
            // Standard Error: 3_127
            .saturating_add(Weight::from_parts(487_888, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_128_000 picoseconds.
        Weight::from_parts(1_151_000, 0)
            // Standard Error: 4_684
            .saturating_add(Weight::from_parts(789_278, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_100_000 picoseconds.
        Weight::from_parts(1_205_796, 0)
            // Standard Error: 3_379
            .saturating_add(Weight::from_parts(519_603, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_112_000 picoseconds.
        Weight::from_parts(1_161_000, 0)
            // Standard Error: 6_316
            .saturating_add(Weight::from_parts(823_640, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_083_000 picoseconds.
        Weight::from_parts(1_167_000, 0)
            // Standard Error: 2_769
            .saturating_add(Weight::from_parts(567_051, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_139_000 picoseconds.
        Weight::from_parts(1_186_000, 0)
            // Standard Error: 7_767
            .saturating_add(Weight::from_parts(818_881, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_086_000 picoseconds.
        Weight::from_parts(290_633, 0)
            // Standard Error: 3_723
            .saturating_add(Weight::from_parts(447_063, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_089_000 picoseconds.
        Weight::from_parts(1_158_000, 0)
            // Standard Error: 6_330
            .saturating_add(Weight::from_parts(769_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_138_000 picoseconds.
        Weight::from_parts(222_233, 0)
            // Standard Error: 4_173
            .saturating_add(Weight::from_parts(468_176, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_096_000 picoseconds.
        Weight::from_parts(1_124_000, 0)
            // Standard Error: 8_345
            .saturating_add(Weight::from_parts(929_811, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_141_000 picoseconds.
        Weight::from_parts(1_174_000, 0)
            // Standard Error: 11_525
            .saturating_add(Weight::from_parts(977_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_122_000 picoseconds.
        Weight::from_parts(1_161_000, 0)
            // Standard Error: 5_209
            .saturating_add(Weight::from_parts(1_661_976, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_089_000 picoseconds.
        Weight::from_parts(344_417, 0)
            // Standard Error: 6_044
            .saturating_add(Weight::from_parts(1_336_323, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_087_000 picoseconds.
        Weight::from_parts(1_149_000, 0)
            // Standard Error: 6_773
            .saturating_add(Weight::from_parts(1_726_892, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_126_000 picoseconds.
        Weight::from_parts(1_168_000, 0)
            // Standard Error: 6_553
            .saturating_add(Weight::from_parts(1_372_685, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_092_000 picoseconds.
        Weight::from_parts(1_190_000, 0)
            // Standard Error: 56_540
            .saturating_add(Weight::from_parts(6_047_040, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_111_000 picoseconds.
        Weight::from_parts(1_138_000, 0)
            // Standard Error: 40_609
            .saturating_add(Weight::from_parts(3_890_058, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_074_000 picoseconds.
        Weight::from_parts(1_166_000, 0)
            // Standard Error: 6_517
            .saturating_add(Weight::from_parts(1_822_711, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_105_000 picoseconds.
        Weight::from_parts(1_147_000, 0)
            // Standard Error: 5_049
            .saturating_add(Weight::from_parts(1_261_297, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_135_000 picoseconds.
        Weight::from_parts(1_195_000, 0)
            // Standard Error: 4_980
            .saturating_add(Weight::from_parts(694_554, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_116_000 picoseconds.
        Weight::from_parts(1_132_000, 0)
            // Standard Error: 8_143
            .saturating_add(Weight::from_parts(576_761, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_113_000 picoseconds.
        Weight::from_parts(1_201_000, 0)
            // Standard Error: 6_605
            .saturating_add(Weight::from_parts(760_651, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_107_000 picoseconds.
        Weight::from_parts(304_083, 0)
            // Standard Error: 3_618
            .saturating_add(Weight::from_parts(417_302, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_097_000 picoseconds.
        Weight::from_parts(1_153_000, 0)
            // Standard Error: 5_235
            .saturating_add(Weight::from_parts(680_341, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_105_000 picoseconds.
        Weight::from_parts(72_522, 0)
            // Standard Error: 3_683
            .saturating_add(Weight::from_parts(432_029, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_145_000 picoseconds.
        Weight::from_parts(1_194_000, 0)
            // Standard Error: 4_302
            .saturating_add(Weight::from_parts(597_109, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_148_000 picoseconds.
        Weight::from_parts(1_029_675, 0)
            // Standard Error: 3_160
            .saturating_add(Weight::from_parts(369_697, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_173_000 picoseconds.
        Weight::from_parts(1_211_000, 0)
            // Standard Error: 4_421
            .saturating_add(Weight::from_parts(586_377, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_116_000 picoseconds.
        Weight::from_parts(734_716, 0)
            // Standard Error: 2_873
            .saturating_add(Weight::from_parts(385_085, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_090_000 picoseconds.
        Weight::from_parts(483_072, 0)
            // Standard Error: 3_841
            .saturating_add(Weight::from_parts(546_280, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_123_000 picoseconds.
        Weight::from_parts(503_906, 0)
            // Standard Error: 2_552
            .saturating_add(Weight::from_parts(376_314, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_111_000 picoseconds.
        Weight::from_parts(1_187_000, 0)
            // Standard Error: 9_321
            .saturating_add(Weight::from_parts(813_202, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_093_000 picoseconds.
        Weight::from_parts(1_626_471, 0)
            // Standard Error: 3_309
            .saturating_add(Weight::from_parts(347_852, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_125_000 picoseconds.
        Weight::from_parts(1_160_000, 0)
            // Standard Error: 7_030
            .saturating_add(Weight::from_parts(600_455, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_131_000 picoseconds.
        Weight::from_parts(905_893, 0)
            // Standard Error: 5_600
            .saturating_add(Weight::from_parts(380_454, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1090`
        //  Estimated: `6196`
        // Minimum execution time: 79_480_000 picoseconds.
        Weight::from_parts(82_623_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `858`
        //  Estimated: `4323`
        // Minimum execution time: 48_573_000 picoseconds.
        Weight::from_parts(49_820_000, 4323)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1009`
        //  Estimated: `6196`
        // Minimum execution time: 93_112_000 picoseconds.
        Weight::from_parts(95_664_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `694`
        //  Estimated: `4159`
        // Minimum execution time: 34_103_000 picoseconds.
        Weight::from_parts(35_066_000, 4159)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `937`
        //  Estimated: `4402`
        // Minimum execution time: 48_852_000 picoseconds.
        Weight::from_parts(51_545_000, 4402)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 4_819_000 picoseconds.
        Weight::from_parts(5_259_000, 3545)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1565`
        //  Estimated: `7505`
        // Minimum execution time: 130_277_000 picoseconds.
        Weight::from_parts(132_686_000, 7505)
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1294`
        //  Estimated: `7234`
        // Minimum execution time: 108_063_000 picoseconds.
        Weight::from_parts(109_917_000, 7234)
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
}
