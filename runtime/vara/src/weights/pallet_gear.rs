// This file is part of Gear.

// Copyright (C) 2022-2024 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-04-29, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=alloc,claim_value,create_program,db_read_per_kb,db_write_per_kb,free,free_range,free_range_per_page,gr_block_height,gr_block_timestamp,gr_create_program,gr_create_program_per_kb,gr_create_program_wgas,gr_create_program_wgas_per_kb,gr_debug,gr_debug_per_kb,gr_env_vars,gr_gas_available,gr_message_id,gr_program_id,gr_random,gr_read,gr_read_per_kb,gr_reply_code,gr_reply_deposit,gr_reply_per_kb,gr_reply_push,gr_reply_push_input,gr_reply_push_input_per_kb,gr_reply_push_per_kb,gr_reply_to,gr_reply_wgas_per_kb,gr_reservation_reply_commit_per_kb,gr_reservation_reply_per_kb,gr_reservation_send,gr_reservation_send_commit,gr_reservation_send_per_kb,gr_reserve_gas,gr_send,gr_send_commit,gr_send_commit_wgas,gr_send_init,gr_send_input,gr_send_input_wgas,gr_send_per_kb,gr_send_push,gr_send_push_input,gr_send_push_input_per_kb,gr_send_push_per_kb,gr_send_wgas,gr_send_wgas_per_kb,gr_signal_code,gr_signal_from,gr_size,gr_source,gr_system_reserve_gas,gr_unreserve_gas,gr_value,gr_value_available,gr_wake,instantiate_module_per_kb,instr_br,instr_br_if,instr_br_table,instr_br_table_per_entry,instr_call,instr_call_const,instr_call_indirect,instr_call_indirect_per_param,instr_call_per_local,instr_global_get,instr_global_set,instr_i32add,instr_i32and,instr_i32clz,instr_i32ctz,instr_i32divs,instr_i32divu,instr_i32eq,instr_i32eqz,instr_i32extend16s,instr_i32extend8s,instr_i32ges,instr_i32geu,instr_i32gts,instr_i32gtu,instr_i32les,instr_i32leu,instr_i32load,instr_i32lts,instr_i32ltu,instr_i32mul,instr_i32ne,instr_i32or,instr_i32popcnt,instr_i32rems,instr_i32remu,instr_i32rotl,instr_i32rotr,instr_i32shl,instr_i32shrs,instr_i32shru,instr_i32store,instr_i32sub,instr_i32wrapi64,instr_i32xor,instr_i64add,instr_i64and,instr_i64clz,instr_i64ctz,instr_i64divs,instr_i64divu,instr_i64eq,instr_i64eqz,instr_i64extend16s,instr_i64extend32s,instr_i64extend8s,instr_i64extendsi32,instr_i64extendui32,instr_i64ges,instr_i64geu,instr_i64gts,instr_i64gtu,instr_i64les,instr_i64leu,instr_i64load,instr_i64lts,instr_i64ltu,instr_i64mul,instr_i64ne,instr_i64or,instr_i64popcnt,instr_i64rems,instr_i64remu,instr_i64rotl,instr_i64rotr,instr_i64shl,instr_i64shrs,instr_i64shru,instr_i64store,instr_i64sub,instr_i64xor,instr_if,instr_local_get,instr_local_set,instr_local_tee,instr_memory_current,instr_select,lazy_pages_host_func_read,lazy_pages_host_func_write,lazy_pages_host_func_write_after_read,lazy_pages_load_page_storage_data,lazy_pages_signal_read,lazy_pages_signal_write,lazy_pages_signal_write_after_read,mem_grow,mem_grow_per_page,reinstrument_per_kb,send_message,send_reply,tasks_remove_from_mailbox,tasks_remove_from_waitlist,tasks_remove_gas_reservation,tasks_send_dispatch,tasks_send_user_message,tasks_send_user_message_to_mailbox,tasks_wake_message,tasks_wake_message_no_wake,upload_code,upload_program --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn mem_grow_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn free_range(r: u32, ) -> Weight;
    fn free_range_per_page(p: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_env_vars(r: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn tasks_remove_gas_reservation() -> Weight;
    fn tasks_send_user_message_to_mailbox() -> Weight;
    fn tasks_send_user_message() -> Weight;
    fn tasks_send_dispatch() -> Weight;
    fn tasks_wake_message() -> Weight;
    fn tasks_wake_message_no_wake() -> Weight;
    fn tasks_remove_from_waitlist() -> Weight;
    fn tasks_remove_from_mailbox() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_710_000 picoseconds.
        Weight::from_parts(65_270_000, 0)
            // Standard Error: 44_310
            .saturating_add(Weight::from_parts(23_386_704, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_905_000 picoseconds.
        Weight::from_parts(66_193_728, 0)
            // Standard Error: 43_196
            .saturating_add(Weight::from_parts(22_493_056, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_457_000 picoseconds.
        Weight::from_parts(65_741_362, 0)
            // Standard Error: 43_914
            .saturating_add(Weight::from_parts(21_471_336, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_511_000 picoseconds.
        Weight::from_parts(65_815_634, 0)
            // Standard Error: 43_921
            .saturating_add(Weight::from_parts(21_687_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 606_343_000 picoseconds.
        Weight::from_parts(732_508_710, 0)
            // Standard Error: 1_036_076
            .saturating_add(Weight::from_parts(11_220_658, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 582_679_000 picoseconds.
        Weight::from_parts(722_210_346, 0)
            // Standard Error: 985_481
            .saturating_add(Weight::from_parts(55_725_388, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_665_000 picoseconds.
        Weight::from_parts(78_038_980, 0)
            // Standard Error: 49_424
            .saturating_add(Weight::from_parts(10_138_892, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 74_384_000 picoseconds.
        Weight::from_parts(78_534_974, 0)
            // Standard Error: 45_271
            .saturating_add(Weight::from_parts(7_627_564, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 60_484_000 picoseconds.
        Weight::from_parts(64_303_124, 0)
            // Standard Error: 47_702
            .saturating_add(Weight::from_parts(26_167_562, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_133_000 picoseconds.
        Weight::from_parts(64_052_858, 0)
            // Standard Error: 46_410
            .saturating_add(Weight::from_parts(14_672_752, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_826_000 picoseconds.
        Weight::from_parts(65_962_166, 0)
            // Standard Error: 45_309
            .saturating_add(Weight::from_parts(8_622_556, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_606_000 picoseconds.
        Weight::from_parts(67_001_416, 0)
            // Standard Error: 48_198
            .saturating_add(Weight::from_parts(8_595_760, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 60_349_000 picoseconds.
        Weight::from_parts(64_152_166, 0)
            // Standard Error: 44_877
            .saturating_add(Weight::from_parts(11_017_502, 0).saturating_mul(r.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 973_000 picoseconds.
        Weight::from_parts(1_046_000, 0)
            // Standard Error: 888
            .saturating_add(Weight::from_parts(217_205, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_311_000 picoseconds.
        Weight::from_parts(3_467_000, 3610)
            // Standard Error: 1_157
            .saturating_add(Weight::from_parts(662_724, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 35_816_000 picoseconds.
        Weight::from_parts(25_554_401, 0)
            // Standard Error: 4_261
            .saturating_add(Weight::from_parts(529_633, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1321`
        //  Estimated: `8799`
        // Minimum execution time: 146_168_000 picoseconds.
        Weight::from_parts(148_421_000, 8799)
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `3578`
        // Minimum execution time: 104_797_000 picoseconds.
        Weight::from_parts(41_041_694, 3578)
            // Standard Error: 68_528
            .saturating_add(Weight::from_parts(64_588_913, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `991`
        //  Estimated: `4456`
        // Minimum execution time: 134_702_000 picoseconds.
        Weight::from_parts(177_717_283, 4456)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(2_294, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `379`
        //  Estimated: `3844`
        // Minimum execution time: 9_813_919_000 picoseconds.
        Weight::from_parts(593_895_176, 3844)
            // Standard Error: 104_013
            .saturating_add(Weight::from_parts(64_783_241, 0).saturating_mul(c.into()))
            // Standard Error: 6
            .saturating_add(Weight::from_parts(2_225, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `480`
        //  Estimated: `6196`
        // Minimum execution time: 111_964_000 picoseconds.
        Weight::from_parts(43_966_944, 6196)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(1_029, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1320`
        //  Estimated: `8799`
        // Minimum execution time: 180_977_000 picoseconds.
        Weight::from_parts(117_815_700, 8799)
            // Standard Error: 4
            .saturating_add(Weight::from_parts(1_063, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3682 + c * (1075 ±0)`
        // Minimum execution time: 83_762_000 picoseconds.
        Weight::from_parts(84_169_000, 3682)
            // Standard Error: 29_611
            .saturating_add(Weight::from_parts(63_362_817, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1075).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_083_993_000 picoseconds.
        Weight::from_parts(1_044_580_989, 0)
            // Standard Error: 235_177
            .saturating_add(Weight::from_parts(120_505_280, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_135_000 picoseconds.
        Weight::from_parts(2_552_704, 0)
            // Standard Error: 343_827
            .saturating_add(Weight::from_parts(62_323_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 800]`.
    fn mem_grow_per_page(_p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_702_000 picoseconds.
        Weight::from_parts(69_264_099, 0)
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_179_296_000 picoseconds.
        Weight::from_parts(1_180_028_366, 0)
            // Standard Error: 371_824
            .saturating_add(Weight::from_parts(75_569_484, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_085_185_000 picoseconds.
        Weight::from_parts(1_076_144_483, 0)
            // Standard Error: 263_223
            .saturating_add(Weight::from_parts(76_457_118, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 700]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_082_829_000 picoseconds.
        Weight::from_parts(1_220_676_431, 0)
            // Standard Error: 8_182
            .saturating_add(Weight::from_parts(3_117_327, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_967_000 picoseconds.
        Weight::from_parts(74_190_731, 0)
            // Standard Error: 3_162
            .saturating_add(Weight::from_parts(2_224_275, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_125_000 picoseconds.
        Weight::from_parts(117_159_991, 0)
            // Standard Error: 3_105
            .saturating_add(Weight::from_parts(2_045_606, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_607_000 picoseconds.
        Weight::from_parts(77_937_987, 0)
            // Standard Error: 67_259
            .saturating_add(Weight::from_parts(91_997_545, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_807_000 picoseconds.
        Weight::from_parts(75_125_518, 0)
            // Standard Error: 68_764
            .saturating_add(Weight::from_parts(82_209_886, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_852_000 picoseconds.
        Weight::from_parts(78_866_130, 0)
            // Standard Error: 83_786
            .saturating_add(Weight::from_parts(76_485_784, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_356_000 picoseconds.
        Weight::from_parts(76_313_757, 0)
            // Standard Error: 89_528
            .saturating_add(Weight::from_parts(82_428_029, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_685_000 picoseconds.
        Weight::from_parts(74_111_869, 0)
            // Standard Error: 103_267
            .saturating_add(Weight::from_parts(76_791_046, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_209_000 picoseconds.
        Weight::from_parts(80_771_915, 0)
            // Standard Error: 77_617
            .saturating_add(Weight::from_parts(81_750_351, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_553_000 picoseconds.
        Weight::from_parts(76_539_801, 0)
            // Standard Error: 159_159
            .saturating_add(Weight::from_parts(76_333_698, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_970_000 picoseconds.
        Weight::from_parts(75_969_200, 0)
            // Standard Error: 129_754
            .saturating_add(Weight::from_parts(75_799_581, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 637_860_000 picoseconds.
        Weight::from_parts(729_622_687, 0)
            // Standard Error: 370_722
            .saturating_add(Weight::from_parts(145_354_295, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 886_275_000 picoseconds.
        Weight::from_parts(918_015_000, 0)
            // Standard Error: 64_704
            .saturating_add(Weight::from_parts(14_364_989, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_020_000 picoseconds.
        Weight::from_parts(81_947_501, 0)
            // Standard Error: 91_240
            .saturating_add(Weight::from_parts(88_229_866, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_439_000 picoseconds.
        Weight::from_parts(72_053_374, 0)
            // Standard Error: 242_185
            .saturating_add(Weight::from_parts(78_379_479, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_491_000 picoseconds.
        Weight::from_parts(89_513_795, 0)
            // Standard Error: 141_922
            .saturating_add(Weight::from_parts(75_736_557, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_929_000 picoseconds.
        Weight::from_parts(73_730_384, 0)
            // Standard Error: 88_263
            .saturating_add(Weight::from_parts(166_548_283, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_556_000 picoseconds.
        Weight::from_parts(67_150_000, 0)
            // Standard Error: 3_945_512
            .saturating_add(Weight::from_parts(763_149_970, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_673_000 picoseconds.
        Weight::from_parts(58_518_678, 0)
            // Standard Error: 208_691
            .saturating_add(Weight::from_parts(253_206_538, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 303_869_000 picoseconds.
        Weight::from_parts(307_516_000, 0)
            // Standard Error: 52_170
            .saturating_add(Weight::from_parts(35_521_355, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_377_000 picoseconds.
        Weight::from_parts(53_912_255, 0)
            // Standard Error: 200_398
            .saturating_add(Weight::from_parts(255_793_112, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 314_340_000 picoseconds.
        Weight::from_parts(318_511_000, 0)
            // Standard Error: 51_797
            .saturating_add(Weight::from_parts(35_165_493, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 655_563_000 picoseconds.
        Weight::from_parts(789_012_386, 0)
            // Standard Error: 374_436
            .saturating_add(Weight::from_parts(249_162_738, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 656_032_000 picoseconds.
        Weight::from_parts(801_933_687, 0)
            // Standard Error: 365_114
            .saturating_add(Weight::from_parts(246_157_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_523_000 picoseconds.
        Weight::from_parts(81_602_159, 0)
            // Standard Error: 153_467
            .saturating_add(Weight::from_parts(83_916_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_770_911_000 picoseconds.
        Weight::from_parts(1_799_121_768, 0)
            // Standard Error: 319_809
            .saturating_add(Weight::from_parts(163_788_238, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 284_932_000 picoseconds.
        Weight::from_parts(288_955_000, 0)
            // Standard Error: 55_902
            .saturating_add(Weight::from_parts(35_371_717, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_743_450_000 picoseconds.
        Weight::from_parts(1_783_711_675, 0)
            // Standard Error: 337_792
            .saturating_add(Weight::from_parts(211_913_102, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_732_487_000 picoseconds.
        Weight::from_parts(1_793_638_878, 0)
            // Standard Error: 502_066
            .saturating_add(Weight::from_parts(216_711_274, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 142_305_000 picoseconds.
        Weight::from_parts(141_022_667, 0)
            // Standard Error: 206_098
            .saturating_add(Weight::from_parts(272_664_697, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 398_140_000 picoseconds.
        Weight::from_parts(401_035_000, 0)
            // Standard Error: 58_746
            .saturating_add(Weight::from_parts(35_731_205, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_925_449_000 picoseconds.
        Weight::from_parts(1_883_548_014, 0)
            // Standard Error: 392_522
            .saturating_add(Weight::from_parts(227_612_386, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_667_000 picoseconds.
        Weight::from_parts(70_117_804, 0)
            // Standard Error: 1_442
            .saturating_add(Weight::from_parts(624_010, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_866_000 picoseconds.
        Weight::from_parts(61_250_884, 0)
            // Standard Error: 1_617
            .saturating_add(Weight::from_parts(640_108, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_470_000 picoseconds.
        Weight::from_parts(86_636_197, 0)
            // Standard Error: 99_322
            .saturating_add(Weight::from_parts(141_951_750, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_222_000 picoseconds.
        Weight::from_parts(81_086_000, 0)
            // Standard Error: 2_517
            .saturating_add(Weight::from_parts(747_944, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_513_000 picoseconds.
        Weight::from_parts(69_038_817, 0)
            // Standard Error: 1_471
            .saturating_add(Weight::from_parts(614_608, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_843_000 picoseconds.
        Weight::from_parts(80_949_007, 0)
            // Standard Error: 2_456
            .saturating_add(Weight::from_parts(623_777, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_715_000 picoseconds.
        Weight::from_parts(80_924_019, 0)
            // Standard Error: 151_969
            .saturating_add(Weight::from_parts(77_413_369, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 66_159_000 picoseconds.
        Weight::from_parts(82_182_702, 0)
            // Standard Error: 252_123
            .saturating_add(Weight::from_parts(76_869_998, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_942_000 picoseconds.
        Weight::from_parts(79_609_051, 0)
            // Standard Error: 126_275
            .saturating_add(Weight::from_parts(77_874_975, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 654_631_000 picoseconds.
        Weight::from_parts(777_613_805, 0)
            // Standard Error: 350_004
            .saturating_add(Weight::from_parts(94_814_224, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 615_346_000 picoseconds.
        Weight::from_parts(753_885_318, 0)
            // Standard Error: 3_283
            .saturating_add(Weight::from_parts(121_138, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_312_111_000 picoseconds.
        Weight::from_parts(2_472_069_807, 0)
            // Standard Error: 382_306
            .saturating_add(Weight::from_parts(124_294_775, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_471_984_000 picoseconds.
        Weight::from_parts(2_500_480_532, 0)
            // Standard Error: 13_186
            .saturating_add(Weight::from_parts(12_758_960, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_946_000 picoseconds.
        Weight::from_parts(84_204_857, 0)
            // Standard Error: 83_922
            .saturating_add(Weight::from_parts(104_682_200, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 132_643_000 picoseconds.
        Weight::from_parts(133_899_000, 0)
            // Standard Error: 58_643
            .saturating_add(Weight::from_parts(31_231_891, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_011_000 picoseconds.
        Weight::from_parts(80_297_865, 0)
            // Standard Error: 245_757
            .saturating_add(Weight::from_parts(77_207_633, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_352_000 picoseconds.
        Weight::from_parts(110_887_000, 0)
            // Standard Error: 3_207_238
            .saturating_add(Weight::from_parts(297_486_047, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 77_468_000 picoseconds.
        Weight::from_parts(67_616_517, 0)
            // Standard Error: 196_315
            .saturating_add(Weight::from_parts(322_455_185, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 54_796_090_000 picoseconds.
        Weight::from_parts(55_320_138_000, 0)
            // Standard Error: 320_461
            .saturating_add(Weight::from_parts(8_499_625, 0).saturating_mul(p.into()))
            // Standard Error: 320_446
            .saturating_add(Weight::from_parts(157_457_391, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_779_000 picoseconds.
        Weight::from_parts(61_126_487, 0)
            // Standard Error: 257_687
            .saturating_add(Weight::from_parts(330_944_549, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 54_165_959_000 picoseconds.
        Weight::from_parts(54_531_401_000, 0)
            // Standard Error: 321_878
            .saturating_add(Weight::from_parts(8_860_746, 0).saturating_mul(p.into()))
            // Standard Error: 321_862
            .saturating_add(Weight::from_parts(157_277_441, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 65_340_000 picoseconds.
        Weight::from_parts(129_223_708, 1131)
            // Standard Error: 19_005
            .saturating_add(Weight::from_parts(14_518_716, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 67_973_000 picoseconds.
        Weight::from_parts(69_772_000, 1131)
            // Standard Error: 32_270
            .saturating_add(Weight::from_parts(45_234_557, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 7_400_715_000 picoseconds.
        Weight::from_parts(7_455_013_411, 5069931)
            // Standard Error: 54_636
            .saturating_add(Weight::from_parts(44_416_745, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1820 + p * (65580 ±0)`
        //  Estimated: `1946 + p * (75482 ±0)`
        // Minimum execution time: 67_383_000 picoseconds.
        Weight::from_parts(75_018_997, 1946)
            // Standard Error: 55_242
            .saturating_add(Weight::from_parts(58_444_221, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 72_409_000 picoseconds.
        Weight::from_parts(71_833_789, 1131)
            // Standard Error: 60_322
            .saturating_add(Weight::from_parts(44_279_567, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 671_217_000 picoseconds.
        Weight::from_parts(773_425_650, 1496)
            // Standard Error: 322_160
            .saturating_add(Weight::from_parts(62_491_598, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_229_606_000 picoseconds.
        Weight::from_parts(1_339_862_061, 317931)
            // Standard Error: 277_163
            .saturating_add(Weight::from_parts(51_461_587, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_821_908_000 picoseconds.
        Weight::from_parts(5_020_619_762, 0)
            // Standard Error: 34_542
            .saturating_add(Weight::from_parts(2_498_725, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_578_437_000 picoseconds.
        Weight::from_parts(4_618_063_723, 0)
            // Standard Error: 13_981
            .saturating_add(Weight::from_parts(3_405_593, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_721_111_000 picoseconds.
        Weight::from_parts(13_160_485_184, 0)
            // Standard Error: 137_606
            .saturating_add(Weight::from_parts(7_376_567, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_103_329_000 picoseconds.
        Weight::from_parts(12_954_889_381, 0)
            // Standard Error: 191_145
            .saturating_add(Weight::from_parts(6_471_156, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_207_000 picoseconds.
        Weight::from_parts(1_285_000, 0)
            // Standard Error: 13_271
            .saturating_add(Weight::from_parts(4_366_797, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_211_000 picoseconds.
        Weight::from_parts(1_268_000, 0)
            // Standard Error: 16_794
            .saturating_add(Weight::from_parts(3_272_507, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_179_000 picoseconds.
        Weight::from_parts(1_228_000, 0)
            // Standard Error: 2_855
            .saturating_add(Weight::from_parts(1_687_208, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_198_000 picoseconds.
        Weight::from_parts(1_269_000, 0)
            // Standard Error: 9_861
            .saturating_add(Weight::from_parts(2_617_586, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_198_000 picoseconds.
        Weight::from_parts(1_245_000, 0)
            // Standard Error: 19_414
            .saturating_add(Weight::from_parts(5_991_068, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_930_000 picoseconds.
        Weight::from_parts(5_721_626, 0)
            // Standard Error: 968
            .saturating_add(Weight::from_parts(47_556, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_174_000 picoseconds.
        Weight::from_parts(1_255_884, 0)
            // Standard Error: 5_943
            .saturating_add(Weight::from_parts(2_468_290, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_468_290 -
            2_329_610, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_165_000 picoseconds.
        Weight::from_parts(797_912, 0)
            // Standard Error: 11_942
            .saturating_add(Weight::from_parts(2_329_610, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_259_000 picoseconds.
        Weight::from_parts(1_321_000, 0)
            // Standard Error: 36_860
            .saturating_add(Weight::from_parts(8_597_948, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_116_000 picoseconds.
        Weight::from_parts(5_424_000, 0)
            // Standard Error: 14_843
            .saturating_add(Weight::from_parts(1_258_304, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_407_000 picoseconds.
        Weight::from_parts(2_594_600, 0)
            // Standard Error: 19
            .saturating_add(Weight::from_parts(97, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_617_000 picoseconds.
        Weight::from_parts(3_996_606, 0)
            // Standard Error: 8_460
            .saturating_add(Weight::from_parts(654_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_577_000 picoseconds.
        Weight::from_parts(5_642_000, 0)
            // Standard Error: 11_616
            .saturating_add(Weight::from_parts(1_328_740, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_597_000 picoseconds.
        Weight::from_parts(5_652_000, 0)
            // Standard Error: 15_031
            .saturating_add(Weight::from_parts(1_651_137, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_222_000 picoseconds.
        Weight::from_parts(5_269_000, 0)
            // Standard Error: 13_994
            .saturating_add(Weight::from_parts(894_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_210_000 picoseconds.
        Weight::from_parts(5_258_000, 0)
            // Standard Error: 21_496
            .saturating_add(Weight::from_parts(1_720_301, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_672_000 picoseconds.
        Weight::from_parts(4_377_066, 0)
            // Standard Error: 5_234
            .saturating_add(Weight::from_parts(5_600_888, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_202_000 picoseconds.
        Weight::from_parts(1_216_000, 0)
            // Standard Error: 19_279
            .saturating_add(Weight::from_parts(3_061_460, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_197_000 picoseconds.
        Weight::from_parts(1_224_000, 0)
            // Standard Error: 27_864
            .saturating_add(Weight::from_parts(3_318_336, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_163_000 picoseconds.
        Weight::from_parts(1_235_000, 0)
            // Standard Error: 19_808
            .saturating_add(Weight::from_parts(3_471_032, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_203_000 picoseconds.
        Weight::from_parts(1_238_000, 0)
            // Standard Error: 17_762
            .saturating_add(Weight::from_parts(2_880_390, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_227_000 picoseconds.
        Weight::from_parts(1_255_000, 0)
            // Standard Error: 11_811
            .saturating_add(Weight::from_parts(1_197_381, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_177_000 picoseconds.
        Weight::from_parts(1_233_000, 0)
            // Standard Error: 10_038
            .saturating_add(Weight::from_parts(871_542, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_159_000 picoseconds.
        Weight::from_parts(1_254_000, 0)
            // Standard Error: 22_907
            .saturating_add(Weight::from_parts(2_082_379, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_195_000 picoseconds.
        Weight::from_parts(1_224_000, 0)
            // Standard Error: 24_578
            .saturating_add(Weight::from_parts(1_229_923, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_159_000 picoseconds.
        Weight::from_parts(1_222_000, 0)
            // Standard Error: 6_783
            .saturating_add(Weight::from_parts(812_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_207_000 picoseconds.
        Weight::from_parts(1_246_000, 0)
            // Standard Error: 9_310
            .saturating_add(Weight::from_parts(781_548, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_201_000 picoseconds.
        Weight::from_parts(1_253_000, 0)
            // Standard Error: 11_221
            .saturating_add(Weight::from_parts(1_095_571, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_162_000 picoseconds.
        Weight::from_parts(1_223_000, 0)
            // Standard Error: 8_868
            .saturating_add(Weight::from_parts(1_007_369, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_199_000 picoseconds.
        Weight::from_parts(1_238_000, 0)
            // Standard Error: 9_576
            .saturating_add(Weight::from_parts(975_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_152_000 picoseconds.
        Weight::from_parts(1_195_000, 0)
            // Standard Error: 6_818
            .saturating_add(Weight::from_parts(464_148, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_205_000 picoseconds.
        Weight::from_parts(1_246_000, 0)
            // Standard Error: 5_672
            .saturating_add(Weight::from_parts(504_062, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_164_000 picoseconds.
        Weight::from_parts(1_225_000, 0)
            // Standard Error: 5_604
            .saturating_add(Weight::from_parts(507_905, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_198_000 picoseconds.
        Weight::from_parts(1_236_000, 0)
            // Standard Error: 21_281
            .saturating_add(Weight::from_parts(2_574_479, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_120_000 picoseconds.
        Weight::from_parts(1_207_000, 0)
            // Standard Error: 16_126
            .saturating_add(Weight::from_parts(1_817_517, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_146_000 picoseconds.
        Weight::from_parts(1_174_000, 0)
            // Standard Error: 24_880
            .saturating_add(Weight::from_parts(2_646_089, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_125_000 picoseconds.
        Weight::from_parts(1_194_000, 0)
            // Standard Error: 20_755
            .saturating_add(Weight::from_parts(1_487_893, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_197_000 picoseconds.
        Weight::from_parts(1_261_000, 0)
            // Standard Error: 22_202
            .saturating_add(Weight::from_parts(2_473_795, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_176_000 picoseconds.
        Weight::from_parts(1_226_000, 0)
            // Standard Error: 15_830
            .saturating_add(Weight::from_parts(1_551_708, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_194_000 picoseconds.
        Weight::from_parts(1_231_000, 0)
            // Standard Error: 28_166
            .saturating_add(Weight::from_parts(2_564_467, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_206_000 picoseconds.
        Weight::from_parts(1_234_000, 0)
            // Standard Error: 17_346
            .saturating_add(Weight::from_parts(1_709_654, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_195_000 picoseconds.
        Weight::from_parts(1_210_000, 0)
            // Standard Error: 19_728
            .saturating_add(Weight::from_parts(1_883_385, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_176_000 picoseconds.
        Weight::from_parts(1_237_000, 0)
            // Standard Error: 20_423
            .saturating_add(Weight::from_parts(1_510_856, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_145_000 picoseconds.
        Weight::from_parts(1_210_000, 0)
            // Standard Error: 25_269
            .saturating_add(Weight::from_parts(2_180_063, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_196_000 picoseconds.
        Weight::from_parts(1_253_000, 0)
            // Standard Error: 18_882
            .saturating_add(Weight::from_parts(1_480_237, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_175_000 picoseconds.
        Weight::from_parts(1_215_000, 0)
            // Standard Error: 16_152
            .saturating_add(Weight::from_parts(2_534_898, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_208_000 picoseconds.
        Weight::from_parts(1_232_000, 0)
            // Standard Error: 16_808
            .saturating_add(Weight::from_parts(1_633_200, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_167_000 picoseconds.
        Weight::from_parts(1_203_000, 0)
            // Standard Error: 26_824
            .saturating_add(Weight::from_parts(2_066_714, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_195_000 picoseconds.
        Weight::from_parts(1_250_000, 0)
            // Standard Error: 18_197
            .saturating_add(Weight::from_parts(1_812_093, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_179_000 picoseconds.
        Weight::from_parts(1_267_000, 0)
            // Standard Error: 20_005
            .saturating_add(Weight::from_parts(2_628_454, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_147_000 picoseconds.
        Weight::from_parts(1_197_000, 0)
            // Standard Error: 18_913
            .saturating_add(Weight::from_parts(1_956_442, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_171_000 picoseconds.
        Weight::from_parts(1_264_000, 0)
            // Standard Error: 20_744
            .saturating_add(Weight::from_parts(2_783_247, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_182_000 picoseconds.
        Weight::from_parts(1_223_000, 0)
            // Standard Error: 14_866
            .saturating_add(Weight::from_parts(1_407_923, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_177_000 picoseconds.
        Weight::from_parts(1_244_000, 0)
            // Standard Error: 19_037
            .saturating_add(Weight::from_parts(2_086_074, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_221_000 picoseconds.
        Weight::from_parts(1_272_000, 0)
            // Standard Error: 10_440
            .saturating_add(Weight::from_parts(1_198_027, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_174_000 picoseconds.
        Weight::from_parts(1_212_000, 0)
            // Standard Error: 16_892
            .saturating_add(Weight::from_parts(2_067_757, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_179_000 picoseconds.
        Weight::from_parts(1_253_000, 0)
            // Standard Error: 10_967
            .saturating_add(Weight::from_parts(1_289_108, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_168_000 picoseconds.
        Weight::from_parts(1_203_000, 0)
            // Standard Error: 23_732
            .saturating_add(Weight::from_parts(2_522_270, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_147_000 picoseconds.
        Weight::from_parts(1_235_000, 0)
            // Standard Error: 22_853
            .saturating_add(Weight::from_parts(1_549_986, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_178_000 picoseconds.
        Weight::from_parts(1_209_000, 0)
            // Standard Error: 24_340
            .saturating_add(Weight::from_parts(3_279_069, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_184_000 picoseconds.
        Weight::from_parts(1_236_000, 0)
            // Standard Error: 19_620
            .saturating_add(Weight::from_parts(2_586_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_194_000 picoseconds.
        Weight::from_parts(1_222_000, 0)
            // Standard Error: 26_611
            .saturating_add(Weight::from_parts(3_770_828, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_196_000 picoseconds.
        Weight::from_parts(1_238_000, 0)
            // Standard Error: 25_454
            .saturating_add(Weight::from_parts(2_953_320, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_181_000 picoseconds.
        Weight::from_parts(1_240_000, 0)
            // Standard Error: 88_479
            .saturating_add(Weight::from_parts(9_403_927, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_210_000 picoseconds.
        Weight::from_parts(1_246_000, 0)
            // Standard Error: 52_509
            .saturating_add(Weight::from_parts(6_545_544, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_204_000 picoseconds.
        Weight::from_parts(1_236_000, 0)
            // Standard Error: 21_321
            .saturating_add(Weight::from_parts(3_617_908, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_157_000 picoseconds.
        Weight::from_parts(1_218_000, 0)
            // Standard Error: 25_504
            .saturating_add(Weight::from_parts(3_321_717, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_203_000 picoseconds.
        Weight::from_parts(1_239_000, 0)
            // Standard Error: 13_037
            .saturating_add(Weight::from_parts(2_082_675, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_165_000 picoseconds.
        Weight::from_parts(1_208_000, 0)
            // Standard Error: 11_464
            .saturating_add(Weight::from_parts(761_337, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_178_000 picoseconds.
        Weight::from_parts(1_198_000, 0)
            // Standard Error: 14_987
            .saturating_add(Weight::from_parts(2_019_396, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_174_000 picoseconds.
        Weight::from_parts(1_218_000, 0)
            // Standard Error: 10_584
            .saturating_add(Weight::from_parts(1_039_545, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_168_000 picoseconds.
        Weight::from_parts(1_201_000, 0)
            // Standard Error: 21_393
            .saturating_add(Weight::from_parts(2_123_782, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_140_000 picoseconds.
        Weight::from_parts(1_188_000, 0)
            // Standard Error: 11_919
            .saturating_add(Weight::from_parts(1_258_915, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_148_000 picoseconds.
        Weight::from_parts(1_215_000, 0)
            // Standard Error: 11_516
            .saturating_add(Weight::from_parts(1_524_812, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_127_000 picoseconds.
        Weight::from_parts(1_202_000, 0)
            // Standard Error: 14_898
            .saturating_add(Weight::from_parts(1_114_038, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_167_000 picoseconds.
        Weight::from_parts(1_212_000, 0)
            // Standard Error: 15_560
            .saturating_add(Weight::from_parts(1_708_694, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_196_000 picoseconds.
        Weight::from_parts(1_250_000, 0)
            // Standard Error: 10_335
            .saturating_add(Weight::from_parts(958_563, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_150_000 picoseconds.
        Weight::from_parts(1_184_000, 0)
            // Standard Error: 17_210
            .saturating_add(Weight::from_parts(1_888_552, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_186_000 picoseconds.
        Weight::from_parts(1_236_000, 0)
            // Standard Error: 10_290
            .saturating_add(Weight::from_parts(1_164_333, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_210_000 picoseconds.
        Weight::from_parts(1_240_000, 0)
            // Standard Error: 14_546
            .saturating_add(Weight::from_parts(1_578_945, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_163_000 picoseconds.
        Weight::from_parts(1_211_000, 0)
            // Standard Error: 12_387
            .saturating_add(Weight::from_parts(1_240_942, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_162_000 picoseconds.
        Weight::from_parts(1_246_000, 0)
            // Standard Error: 13_829
            .saturating_add(Weight::from_parts(1_789_001, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_159_000 picoseconds.
        Weight::from_parts(1_194_000, 0)
            // Standard Error: 11_582
            .saturating_add(Weight::from_parts(1_207_952, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1094`
        //  Estimated: `6196`
        // Minimum execution time: 88_369_000 picoseconds.
        Weight::from_parts(93_473_000, 6196)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `858`
        //  Estimated: `4323`
        // Minimum execution time: 53_461_000 picoseconds.
        Weight::from_parts(58_109_000, 4323)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1009`
        //  Estimated: `6196`
        // Minimum execution time: 102_695_000 picoseconds.
        Weight::from_parts(107_035_000, 6196)
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `694`
        //  Estimated: `4159`
        // Minimum execution time: 37_747_000 picoseconds.
        Weight::from_parts(41_165_000, 4159)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `937`
        //  Estimated: `4402`
        // Minimum execution time: 56_289_000 picoseconds.
        Weight::from_parts(62_487_000, 4402)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 5_219_000 picoseconds.
        Weight::from_parts(6_010_000, 3545)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1565`
        //  Estimated: `7505`
        // Minimum execution time: 145_245_000 picoseconds.
        Weight::from_parts(151_301_000, 7505)
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1294`
        //  Estimated: `7234`
        // Minimum execution time: 114_238_000 picoseconds.
        Weight::from_parts(119_548_000, 7234)
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_710_000 picoseconds.
        Weight::from_parts(65_270_000, 0)
            // Standard Error: 44_310
            .saturating_add(Weight::from_parts(23_386_704, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_905_000 picoseconds.
        Weight::from_parts(66_193_728, 0)
            // Standard Error: 43_196
            .saturating_add(Weight::from_parts(22_493_056, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_457_000 picoseconds.
        Weight::from_parts(65_741_362, 0)
            // Standard Error: 43_914
            .saturating_add(Weight::from_parts(21_471_336, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_511_000 picoseconds.
        Weight::from_parts(65_815_634, 0)
            // Standard Error: 43_921
            .saturating_add(Weight::from_parts(21_687_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 606_343_000 picoseconds.
        Weight::from_parts(732_508_710, 0)
            // Standard Error: 1_036_076
            .saturating_add(Weight::from_parts(11_220_658, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 582_679_000 picoseconds.
        Weight::from_parts(722_210_346, 0)
            // Standard Error: 985_481
            .saturating_add(Weight::from_parts(55_725_388, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_665_000 picoseconds.
        Weight::from_parts(78_038_980, 0)
            // Standard Error: 49_424
            .saturating_add(Weight::from_parts(10_138_892, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 74_384_000 picoseconds.
        Weight::from_parts(78_534_974, 0)
            // Standard Error: 45_271
            .saturating_add(Weight::from_parts(7_627_564, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 60_484_000 picoseconds.
        Weight::from_parts(64_303_124, 0)
            // Standard Error: 47_702
            .saturating_add(Weight::from_parts(26_167_562, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_133_000 picoseconds.
        Weight::from_parts(64_052_858, 0)
            // Standard Error: 46_410
            .saturating_add(Weight::from_parts(14_672_752, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_826_000 picoseconds.
        Weight::from_parts(65_962_166, 0)
            // Standard Error: 45_309
            .saturating_add(Weight::from_parts(8_622_556, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_606_000 picoseconds.
        Weight::from_parts(67_001_416, 0)
            // Standard Error: 48_198
            .saturating_add(Weight::from_parts(8_595_760, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 60_349_000 picoseconds.
        Weight::from_parts(64_152_166, 0)
            // Standard Error: 44_877
            .saturating_add(Weight::from_parts(11_017_502, 0).saturating_mul(r.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 973_000 picoseconds.
        Weight::from_parts(1_046_000, 0)
            // Standard Error: 888
            .saturating_add(Weight::from_parts(217_205, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_311_000 picoseconds.
        Weight::from_parts(3_467_000, 3610)
            // Standard Error: 1_157
            .saturating_add(Weight::from_parts(662_724, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 35_816_000 picoseconds.
        Weight::from_parts(25_554_401, 0)
            // Standard Error: 4_261
            .saturating_add(Weight::from_parts(529_633, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1321`
        //  Estimated: `8799`
        // Minimum execution time: 146_168_000 picoseconds.
        Weight::from_parts(148_421_000, 8799)
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `3578`
        // Minimum execution time: 104_797_000 picoseconds.
        Weight::from_parts(41_041_694, 3578)
            // Standard Error: 68_528
            .saturating_add(Weight::from_parts(64_588_913, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `991`
        //  Estimated: `4456`
        // Minimum execution time: 134_702_000 picoseconds.
        Weight::from_parts(177_717_283, 4456)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(2_294, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `379`
        //  Estimated: `3844`
        // Minimum execution time: 9_813_919_000 picoseconds.
        Weight::from_parts(593_895_176, 3844)
            // Standard Error: 104_013
            .saturating_add(Weight::from_parts(64_783_241, 0).saturating_mul(c.into()))
            // Standard Error: 6
            .saturating_add(Weight::from_parts(2_225, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `480`
        //  Estimated: `6196`
        // Minimum execution time: 111_964_000 picoseconds.
        Weight::from_parts(43_966_944, 6196)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(1_029, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1320`
        //  Estimated: `8799`
        // Minimum execution time: 180_977_000 picoseconds.
        Weight::from_parts(117_815_700, 8799)
            // Standard Error: 4
            .saturating_add(Weight::from_parts(1_063, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3682 + c * (1075 ±0)`
        // Minimum execution time: 83_762_000 picoseconds.
        Weight::from_parts(84_169_000, 3682)
            // Standard Error: 29_611
            .saturating_add(Weight::from_parts(63_362_817, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1075).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_083_993_000 picoseconds.
        Weight::from_parts(1_044_580_989, 0)
            // Standard Error: 235_177
            .saturating_add(Weight::from_parts(120_505_280, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_135_000 picoseconds.
        Weight::from_parts(2_552_704, 0)
            // Standard Error: 343_827
            .saturating_add(Weight::from_parts(62_323_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 800]`.
    fn mem_grow_per_page(_p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_702_000 picoseconds.
        Weight::from_parts(69_264_099, 0)
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_179_296_000 picoseconds.
        Weight::from_parts(1_180_028_366, 0)
            // Standard Error: 371_824
            .saturating_add(Weight::from_parts(75_569_484, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_085_185_000 picoseconds.
        Weight::from_parts(1_076_144_483, 0)
            // Standard Error: 263_223
            .saturating_add(Weight::from_parts(76_457_118, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 700]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_082_829_000 picoseconds.
        Weight::from_parts(1_220_676_431, 0)
            // Standard Error: 8_182
            .saturating_add(Weight::from_parts(3_117_327, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_967_000 picoseconds.
        Weight::from_parts(74_190_731, 0)
            // Standard Error: 3_162
            .saturating_add(Weight::from_parts(2_224_275, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_125_000 picoseconds.
        Weight::from_parts(117_159_991, 0)
            // Standard Error: 3_105
            .saturating_add(Weight::from_parts(2_045_606, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_607_000 picoseconds.
        Weight::from_parts(77_937_987, 0)
            // Standard Error: 67_259
            .saturating_add(Weight::from_parts(91_997_545, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_807_000 picoseconds.
        Weight::from_parts(75_125_518, 0)
            // Standard Error: 68_764
            .saturating_add(Weight::from_parts(82_209_886, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_852_000 picoseconds.
        Weight::from_parts(78_866_130, 0)
            // Standard Error: 83_786
            .saturating_add(Weight::from_parts(76_485_784, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_356_000 picoseconds.
        Weight::from_parts(76_313_757, 0)
            // Standard Error: 89_528
            .saturating_add(Weight::from_parts(82_428_029, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_685_000 picoseconds.
        Weight::from_parts(74_111_869, 0)
            // Standard Error: 103_267
            .saturating_add(Weight::from_parts(76_791_046, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_209_000 picoseconds.
        Weight::from_parts(80_771_915, 0)
            // Standard Error: 77_617
            .saturating_add(Weight::from_parts(81_750_351, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_553_000 picoseconds.
        Weight::from_parts(76_539_801, 0)
            // Standard Error: 159_159
            .saturating_add(Weight::from_parts(76_333_698, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_970_000 picoseconds.
        Weight::from_parts(75_969_200, 0)
            // Standard Error: 129_754
            .saturating_add(Weight::from_parts(75_799_581, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 637_860_000 picoseconds.
        Weight::from_parts(729_622_687, 0)
            // Standard Error: 370_722
            .saturating_add(Weight::from_parts(145_354_295, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 886_275_000 picoseconds.
        Weight::from_parts(918_015_000, 0)
            // Standard Error: 64_704
            .saturating_add(Weight::from_parts(14_364_989, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_020_000 picoseconds.
        Weight::from_parts(81_947_501, 0)
            // Standard Error: 91_240
            .saturating_add(Weight::from_parts(88_229_866, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_439_000 picoseconds.
        Weight::from_parts(72_053_374, 0)
            // Standard Error: 242_185
            .saturating_add(Weight::from_parts(78_379_479, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_491_000 picoseconds.
        Weight::from_parts(89_513_795, 0)
            // Standard Error: 141_922
            .saturating_add(Weight::from_parts(75_736_557, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_929_000 picoseconds.
        Weight::from_parts(73_730_384, 0)
            // Standard Error: 88_263
            .saturating_add(Weight::from_parts(166_548_283, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_556_000 picoseconds.
        Weight::from_parts(67_150_000, 0)
            // Standard Error: 3_945_512
            .saturating_add(Weight::from_parts(763_149_970, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_673_000 picoseconds.
        Weight::from_parts(58_518_678, 0)
            // Standard Error: 208_691
            .saturating_add(Weight::from_parts(253_206_538, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 303_869_000 picoseconds.
        Weight::from_parts(307_516_000, 0)
            // Standard Error: 52_170
            .saturating_add(Weight::from_parts(35_521_355, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_377_000 picoseconds.
        Weight::from_parts(53_912_255, 0)
            // Standard Error: 200_398
            .saturating_add(Weight::from_parts(255_793_112, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 314_340_000 picoseconds.
        Weight::from_parts(318_511_000, 0)
            // Standard Error: 51_797
            .saturating_add(Weight::from_parts(35_165_493, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 655_563_000 picoseconds.
        Weight::from_parts(789_012_386, 0)
            // Standard Error: 374_436
            .saturating_add(Weight::from_parts(249_162_738, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 656_032_000 picoseconds.
        Weight::from_parts(801_933_687, 0)
            // Standard Error: 365_114
            .saturating_add(Weight::from_parts(246_157_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_523_000 picoseconds.
        Weight::from_parts(81_602_159, 0)
            // Standard Error: 153_467
            .saturating_add(Weight::from_parts(83_916_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_770_911_000 picoseconds.
        Weight::from_parts(1_799_121_768, 0)
            // Standard Error: 319_809
            .saturating_add(Weight::from_parts(163_788_238, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 284_932_000 picoseconds.
        Weight::from_parts(288_955_000, 0)
            // Standard Error: 55_902
            .saturating_add(Weight::from_parts(35_371_717, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_743_450_000 picoseconds.
        Weight::from_parts(1_783_711_675, 0)
            // Standard Error: 337_792
            .saturating_add(Weight::from_parts(211_913_102, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_732_487_000 picoseconds.
        Weight::from_parts(1_793_638_878, 0)
            // Standard Error: 502_066
            .saturating_add(Weight::from_parts(216_711_274, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 142_305_000 picoseconds.
        Weight::from_parts(141_022_667, 0)
            // Standard Error: 206_098
            .saturating_add(Weight::from_parts(272_664_697, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 398_140_000 picoseconds.
        Weight::from_parts(401_035_000, 0)
            // Standard Error: 58_746
            .saturating_add(Weight::from_parts(35_731_205, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_925_449_000 picoseconds.
        Weight::from_parts(1_883_548_014, 0)
            // Standard Error: 392_522
            .saturating_add(Weight::from_parts(227_612_386, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_667_000 picoseconds.
        Weight::from_parts(70_117_804, 0)
            // Standard Error: 1_442
            .saturating_add(Weight::from_parts(624_010, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_866_000 picoseconds.
        Weight::from_parts(61_250_884, 0)
            // Standard Error: 1_617
            .saturating_add(Weight::from_parts(640_108, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_470_000 picoseconds.
        Weight::from_parts(86_636_197, 0)
            // Standard Error: 99_322
            .saturating_add(Weight::from_parts(141_951_750, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_222_000 picoseconds.
        Weight::from_parts(81_086_000, 0)
            // Standard Error: 2_517
            .saturating_add(Weight::from_parts(747_944, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_513_000 picoseconds.
        Weight::from_parts(69_038_817, 0)
            // Standard Error: 1_471
            .saturating_add(Weight::from_parts(614_608, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_843_000 picoseconds.
        Weight::from_parts(80_949_007, 0)
            // Standard Error: 2_456
            .saturating_add(Weight::from_parts(623_777, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_715_000 picoseconds.
        Weight::from_parts(80_924_019, 0)
            // Standard Error: 151_969
            .saturating_add(Weight::from_parts(77_413_369, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 66_159_000 picoseconds.
        Weight::from_parts(82_182_702, 0)
            // Standard Error: 252_123
            .saturating_add(Weight::from_parts(76_869_998, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_942_000 picoseconds.
        Weight::from_parts(79_609_051, 0)
            // Standard Error: 126_275
            .saturating_add(Weight::from_parts(77_874_975, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 654_631_000 picoseconds.
        Weight::from_parts(777_613_805, 0)
            // Standard Error: 350_004
            .saturating_add(Weight::from_parts(94_814_224, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 615_346_000 picoseconds.
        Weight::from_parts(753_885_318, 0)
            // Standard Error: 3_283
            .saturating_add(Weight::from_parts(121_138, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_312_111_000 picoseconds.
        Weight::from_parts(2_472_069_807, 0)
            // Standard Error: 382_306
            .saturating_add(Weight::from_parts(124_294_775, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_471_984_000 picoseconds.
        Weight::from_parts(2_500_480_532, 0)
            // Standard Error: 13_186
            .saturating_add(Weight::from_parts(12_758_960, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_946_000 picoseconds.
        Weight::from_parts(84_204_857, 0)
            // Standard Error: 83_922
            .saturating_add(Weight::from_parts(104_682_200, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 132_643_000 picoseconds.
        Weight::from_parts(133_899_000, 0)
            // Standard Error: 58_643
            .saturating_add(Weight::from_parts(31_231_891, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_011_000 picoseconds.
        Weight::from_parts(80_297_865, 0)
            // Standard Error: 245_757
            .saturating_add(Weight::from_parts(77_207_633, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_352_000 picoseconds.
        Weight::from_parts(110_887_000, 0)
            // Standard Error: 3_207_238
            .saturating_add(Weight::from_parts(297_486_047, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 77_468_000 picoseconds.
        Weight::from_parts(67_616_517, 0)
            // Standard Error: 196_315
            .saturating_add(Weight::from_parts(322_455_185, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 54_796_090_000 picoseconds.
        Weight::from_parts(55_320_138_000, 0)
            // Standard Error: 320_461
            .saturating_add(Weight::from_parts(8_499_625, 0).saturating_mul(p.into()))
            // Standard Error: 320_446
            .saturating_add(Weight::from_parts(157_457_391, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_779_000 picoseconds.
        Weight::from_parts(61_126_487, 0)
            // Standard Error: 257_687
            .saturating_add(Weight::from_parts(330_944_549, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 54_165_959_000 picoseconds.
        Weight::from_parts(54_531_401_000, 0)
            // Standard Error: 321_878
            .saturating_add(Weight::from_parts(8_860_746, 0).saturating_mul(p.into()))
            // Standard Error: 321_862
            .saturating_add(Weight::from_parts(157_277_441, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 65_340_000 picoseconds.
        Weight::from_parts(129_223_708, 1131)
            // Standard Error: 19_005
            .saturating_add(Weight::from_parts(14_518_716, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 67_973_000 picoseconds.
        Weight::from_parts(69_772_000, 1131)
            // Standard Error: 32_270
            .saturating_add(Weight::from_parts(45_234_557, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 7_400_715_000 picoseconds.
        Weight::from_parts(7_455_013_411, 5069931)
            // Standard Error: 54_636
            .saturating_add(Weight::from_parts(44_416_745, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1820 + p * (65580 ±0)`
        //  Estimated: `1946 + p * (75482 ±0)`
        // Minimum execution time: 67_383_000 picoseconds.
        Weight::from_parts(75_018_997, 1946)
            // Standard Error: 55_242
            .saturating_add(Weight::from_parts(58_444_221, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 72_409_000 picoseconds.
        Weight::from_parts(71_833_789, 1131)
            // Standard Error: 60_322
            .saturating_add(Weight::from_parts(44_279_567, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 671_217_000 picoseconds.
        Weight::from_parts(773_425_650, 1496)
            // Standard Error: 322_160
            .saturating_add(Weight::from_parts(62_491_598, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_229_606_000 picoseconds.
        Weight::from_parts(1_339_862_061, 317931)
            // Standard Error: 277_163
            .saturating_add(Weight::from_parts(51_461_587, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_821_908_000 picoseconds.
        Weight::from_parts(5_020_619_762, 0)
            // Standard Error: 34_542
            .saturating_add(Weight::from_parts(2_498_725, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_578_437_000 picoseconds.
        Weight::from_parts(4_618_063_723, 0)
            // Standard Error: 13_981
            .saturating_add(Weight::from_parts(3_405_593, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_721_111_000 picoseconds.
        Weight::from_parts(13_160_485_184, 0)
            // Standard Error: 137_606
            .saturating_add(Weight::from_parts(7_376_567, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_103_329_000 picoseconds.
        Weight::from_parts(12_954_889_381, 0)
            // Standard Error: 191_145
            .saturating_add(Weight::from_parts(6_471_156, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_207_000 picoseconds.
        Weight::from_parts(1_285_000, 0)
            // Standard Error: 13_271
            .saturating_add(Weight::from_parts(4_366_797, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_211_000 picoseconds.
        Weight::from_parts(1_268_000, 0)
            // Standard Error: 16_794
            .saturating_add(Weight::from_parts(3_272_507, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_179_000 picoseconds.
        Weight::from_parts(1_228_000, 0)
            // Standard Error: 2_855
            .saturating_add(Weight::from_parts(1_687_208, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_198_000 picoseconds.
        Weight::from_parts(1_269_000, 0)
            // Standard Error: 9_861
            .saturating_add(Weight::from_parts(2_617_586, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_198_000 picoseconds.
        Weight::from_parts(1_245_000, 0)
            // Standard Error: 19_414
            .saturating_add(Weight::from_parts(5_991_068, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_930_000 picoseconds.
        Weight::from_parts(5_721_626, 0)
            // Standard Error: 968
            .saturating_add(Weight::from_parts(47_556, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_174_000 picoseconds.
        Weight::from_parts(1_255_884, 0)
            // Standard Error: 5_943
            .saturating_add(Weight::from_parts(2_468_290, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_468_290 -
            2_329_610, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_165_000 picoseconds.
        Weight::from_parts(797_912, 0)
            // Standard Error: 11_942
            .saturating_add(Weight::from_parts(2_329_610, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_259_000 picoseconds.
        Weight::from_parts(1_321_000, 0)
            // Standard Error: 36_860
            .saturating_add(Weight::from_parts(8_597_948, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_116_000 picoseconds.
        Weight::from_parts(5_424_000, 0)
            // Standard Error: 14_843
            .saturating_add(Weight::from_parts(1_258_304, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_407_000 picoseconds.
        Weight::from_parts(2_594_600, 0)
            // Standard Error: 19
            .saturating_add(Weight::from_parts(97, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_617_000 picoseconds.
        Weight::from_parts(3_996_606, 0)
            // Standard Error: 8_460
            .saturating_add(Weight::from_parts(654_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_577_000 picoseconds.
        Weight::from_parts(5_642_000, 0)
            // Standard Error: 11_616
            .saturating_add(Weight::from_parts(1_328_740, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_597_000 picoseconds.
        Weight::from_parts(5_652_000, 0)
            // Standard Error: 15_031
            .saturating_add(Weight::from_parts(1_651_137, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_222_000 picoseconds.
        Weight::from_parts(5_269_000, 0)
            // Standard Error: 13_994
            .saturating_add(Weight::from_parts(894_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_210_000 picoseconds.
        Weight::from_parts(5_258_000, 0)
            // Standard Error: 21_496
            .saturating_add(Weight::from_parts(1_720_301, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_672_000 picoseconds.
        Weight::from_parts(4_377_066, 0)
            // Standard Error: 5_234
            .saturating_add(Weight::from_parts(5_600_888, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_202_000 picoseconds.
        Weight::from_parts(1_216_000, 0)
            // Standard Error: 19_279
            .saturating_add(Weight::from_parts(3_061_460, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_197_000 picoseconds.
        Weight::from_parts(1_224_000, 0)
            // Standard Error: 27_864
            .saturating_add(Weight::from_parts(3_318_336, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_163_000 picoseconds.
        Weight::from_parts(1_235_000, 0)
            // Standard Error: 19_808
            .saturating_add(Weight::from_parts(3_471_032, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_203_000 picoseconds.
        Weight::from_parts(1_238_000, 0)
            // Standard Error: 17_762
            .saturating_add(Weight::from_parts(2_880_390, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_227_000 picoseconds.
        Weight::from_parts(1_255_000, 0)
            // Standard Error: 11_811
            .saturating_add(Weight::from_parts(1_197_381, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_177_000 picoseconds.
        Weight::from_parts(1_233_000, 0)
            // Standard Error: 10_038
            .saturating_add(Weight::from_parts(871_542, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_159_000 picoseconds.
        Weight::from_parts(1_254_000, 0)
            // Standard Error: 22_907
            .saturating_add(Weight::from_parts(2_082_379, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_195_000 picoseconds.
        Weight::from_parts(1_224_000, 0)
            // Standard Error: 24_578
            .saturating_add(Weight::from_parts(1_229_923, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_159_000 picoseconds.
        Weight::from_parts(1_222_000, 0)
            // Standard Error: 6_783
            .saturating_add(Weight::from_parts(812_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_207_000 picoseconds.
        Weight::from_parts(1_246_000, 0)
            // Standard Error: 9_310
            .saturating_add(Weight::from_parts(781_548, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_201_000 picoseconds.
        Weight::from_parts(1_253_000, 0)
            // Standard Error: 11_221
            .saturating_add(Weight::from_parts(1_095_571, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_162_000 picoseconds.
        Weight::from_parts(1_223_000, 0)
            // Standard Error: 8_868
            .saturating_add(Weight::from_parts(1_007_369, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_199_000 picoseconds.
        Weight::from_parts(1_238_000, 0)
            // Standard Error: 9_576
            .saturating_add(Weight::from_parts(975_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_152_000 picoseconds.
        Weight::from_parts(1_195_000, 0)
            // Standard Error: 6_818
            .saturating_add(Weight::from_parts(464_148, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_205_000 picoseconds.
        Weight::from_parts(1_246_000, 0)
            // Standard Error: 5_672
            .saturating_add(Weight::from_parts(504_062, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_164_000 picoseconds.
        Weight::from_parts(1_225_000, 0)
            // Standard Error: 5_604
            .saturating_add(Weight::from_parts(507_905, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_198_000 picoseconds.
        Weight::from_parts(1_236_000, 0)
            // Standard Error: 21_281
            .saturating_add(Weight::from_parts(2_574_479, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_120_000 picoseconds.
        Weight::from_parts(1_207_000, 0)
            // Standard Error: 16_126
            .saturating_add(Weight::from_parts(1_817_517, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_146_000 picoseconds.
        Weight::from_parts(1_174_000, 0)
            // Standard Error: 24_880
            .saturating_add(Weight::from_parts(2_646_089, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_125_000 picoseconds.
        Weight::from_parts(1_194_000, 0)
            // Standard Error: 20_755
            .saturating_add(Weight::from_parts(1_487_893, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_197_000 picoseconds.
        Weight::from_parts(1_261_000, 0)
            // Standard Error: 22_202
            .saturating_add(Weight::from_parts(2_473_795, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_176_000 picoseconds.
        Weight::from_parts(1_226_000, 0)
            // Standard Error: 15_830
            .saturating_add(Weight::from_parts(1_551_708, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_194_000 picoseconds.
        Weight::from_parts(1_231_000, 0)
            // Standard Error: 28_166
            .saturating_add(Weight::from_parts(2_564_467, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_206_000 picoseconds.
        Weight::from_parts(1_234_000, 0)
            // Standard Error: 17_346
            .saturating_add(Weight::from_parts(1_709_654, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_195_000 picoseconds.
        Weight::from_parts(1_210_000, 0)
            // Standard Error: 19_728
            .saturating_add(Weight::from_parts(1_883_385, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_176_000 picoseconds.
        Weight::from_parts(1_237_000, 0)
            // Standard Error: 20_423
            .saturating_add(Weight::from_parts(1_510_856, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_145_000 picoseconds.
        Weight::from_parts(1_210_000, 0)
            // Standard Error: 25_269
            .saturating_add(Weight::from_parts(2_180_063, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_196_000 picoseconds.
        Weight::from_parts(1_253_000, 0)
            // Standard Error: 18_882
            .saturating_add(Weight::from_parts(1_480_237, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_175_000 picoseconds.
        Weight::from_parts(1_215_000, 0)
            // Standard Error: 16_152
            .saturating_add(Weight::from_parts(2_534_898, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_208_000 picoseconds.
        Weight::from_parts(1_232_000, 0)
            // Standard Error: 16_808
            .saturating_add(Weight::from_parts(1_633_200, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_167_000 picoseconds.
        Weight::from_parts(1_203_000, 0)
            // Standard Error: 26_824
            .saturating_add(Weight::from_parts(2_066_714, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_195_000 picoseconds.
        Weight::from_parts(1_250_000, 0)
            // Standard Error: 18_197
            .saturating_add(Weight::from_parts(1_812_093, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_179_000 picoseconds.
        Weight::from_parts(1_267_000, 0)
            // Standard Error: 20_005
            .saturating_add(Weight::from_parts(2_628_454, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_147_000 picoseconds.
        Weight::from_parts(1_197_000, 0)
            // Standard Error: 18_913
            .saturating_add(Weight::from_parts(1_956_442, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_171_000 picoseconds.
        Weight::from_parts(1_264_000, 0)
            // Standard Error: 20_744
            .saturating_add(Weight::from_parts(2_783_247, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_182_000 picoseconds.
        Weight::from_parts(1_223_000, 0)
            // Standard Error: 14_866
            .saturating_add(Weight::from_parts(1_407_923, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_177_000 picoseconds.
        Weight::from_parts(1_244_000, 0)
            // Standard Error: 19_037
            .saturating_add(Weight::from_parts(2_086_074, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_221_000 picoseconds.
        Weight::from_parts(1_272_000, 0)
            // Standard Error: 10_440
            .saturating_add(Weight::from_parts(1_198_027, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_174_000 picoseconds.
        Weight::from_parts(1_212_000, 0)
            // Standard Error: 16_892
            .saturating_add(Weight::from_parts(2_067_757, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_179_000 picoseconds.
        Weight::from_parts(1_253_000, 0)
            // Standard Error: 10_967
            .saturating_add(Weight::from_parts(1_289_108, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_168_000 picoseconds.
        Weight::from_parts(1_203_000, 0)
            // Standard Error: 23_732
            .saturating_add(Weight::from_parts(2_522_270, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_147_000 picoseconds.
        Weight::from_parts(1_235_000, 0)
            // Standard Error: 22_853
            .saturating_add(Weight::from_parts(1_549_986, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_178_000 picoseconds.
        Weight::from_parts(1_209_000, 0)
            // Standard Error: 24_340
            .saturating_add(Weight::from_parts(3_279_069, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_184_000 picoseconds.
        Weight::from_parts(1_236_000, 0)
            // Standard Error: 19_620
            .saturating_add(Weight::from_parts(2_586_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_194_000 picoseconds.
        Weight::from_parts(1_222_000, 0)
            // Standard Error: 26_611
            .saturating_add(Weight::from_parts(3_770_828, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_196_000 picoseconds.
        Weight::from_parts(1_238_000, 0)
            // Standard Error: 25_454
            .saturating_add(Weight::from_parts(2_953_320, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_181_000 picoseconds.
        Weight::from_parts(1_240_000, 0)
            // Standard Error: 88_479
            .saturating_add(Weight::from_parts(9_403_927, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_210_000 picoseconds.
        Weight::from_parts(1_246_000, 0)
            // Standard Error: 52_509
            .saturating_add(Weight::from_parts(6_545_544, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_204_000 picoseconds.
        Weight::from_parts(1_236_000, 0)
            // Standard Error: 21_321
            .saturating_add(Weight::from_parts(3_617_908, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_157_000 picoseconds.
        Weight::from_parts(1_218_000, 0)
            // Standard Error: 25_504
            .saturating_add(Weight::from_parts(3_321_717, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_203_000 picoseconds.
        Weight::from_parts(1_239_000, 0)
            // Standard Error: 13_037
            .saturating_add(Weight::from_parts(2_082_675, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_165_000 picoseconds.
        Weight::from_parts(1_208_000, 0)
            // Standard Error: 11_464
            .saturating_add(Weight::from_parts(761_337, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_178_000 picoseconds.
        Weight::from_parts(1_198_000, 0)
            // Standard Error: 14_987
            .saturating_add(Weight::from_parts(2_019_396, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_174_000 picoseconds.
        Weight::from_parts(1_218_000, 0)
            // Standard Error: 10_584
            .saturating_add(Weight::from_parts(1_039_545, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_168_000 picoseconds.
        Weight::from_parts(1_201_000, 0)
            // Standard Error: 21_393
            .saturating_add(Weight::from_parts(2_123_782, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_140_000 picoseconds.
        Weight::from_parts(1_188_000, 0)
            // Standard Error: 11_919
            .saturating_add(Weight::from_parts(1_258_915, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_148_000 picoseconds.
        Weight::from_parts(1_215_000, 0)
            // Standard Error: 11_516
            .saturating_add(Weight::from_parts(1_524_812, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_127_000 picoseconds.
        Weight::from_parts(1_202_000, 0)
            // Standard Error: 14_898
            .saturating_add(Weight::from_parts(1_114_038, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_167_000 picoseconds.
        Weight::from_parts(1_212_000, 0)
            // Standard Error: 15_560
            .saturating_add(Weight::from_parts(1_708_694, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_196_000 picoseconds.
        Weight::from_parts(1_250_000, 0)
            // Standard Error: 10_335
            .saturating_add(Weight::from_parts(958_563, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_150_000 picoseconds.
        Weight::from_parts(1_184_000, 0)
            // Standard Error: 17_210
            .saturating_add(Weight::from_parts(1_888_552, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_186_000 picoseconds.
        Weight::from_parts(1_236_000, 0)
            // Standard Error: 10_290
            .saturating_add(Weight::from_parts(1_164_333, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_210_000 picoseconds.
        Weight::from_parts(1_240_000, 0)
            // Standard Error: 14_546
            .saturating_add(Weight::from_parts(1_578_945, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_163_000 picoseconds.
        Weight::from_parts(1_211_000, 0)
            // Standard Error: 12_387
            .saturating_add(Weight::from_parts(1_240_942, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_162_000 picoseconds.
        Weight::from_parts(1_246_000, 0)
            // Standard Error: 13_829
            .saturating_add(Weight::from_parts(1_789_001, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_159_000 picoseconds.
        Weight::from_parts(1_194_000, 0)
            // Standard Error: 11_582
            .saturating_add(Weight::from_parts(1_207_952, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1094`
        //  Estimated: `6196`
        // Minimum execution time: 88_369_000 picoseconds.
        Weight::from_parts(93_473_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `858`
        //  Estimated: `4323`
        // Minimum execution time: 53_461_000 picoseconds.
        Weight::from_parts(58_109_000, 4323)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1009`
        //  Estimated: `6196`
        // Minimum execution time: 102_695_000 picoseconds.
        Weight::from_parts(107_035_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `694`
        //  Estimated: `4159`
        // Minimum execution time: 37_747_000 picoseconds.
        Weight::from_parts(41_165_000, 4159)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `937`
        //  Estimated: `4402`
        // Minimum execution time: 56_289_000 picoseconds.
        Weight::from_parts(62_487_000, 4402)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 5_219_000 picoseconds.
        Weight::from_parts(6_010_000, 3545)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1565`
        //  Estimated: `7505`
        // Minimum execution time: 145_245_000 picoseconds.
        Weight::from_parts(151_301_000, 7505)
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1294`
        //  Estimated: `7234`
        // Minimum execution time: 114_238_000 picoseconds.
        Weight::from_parts(119_548_000, 7234)
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
}
