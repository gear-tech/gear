// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-08-16, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_message_with_voucher(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn send_reply_with_voucher(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 967_000 picoseconds.
        Weight::from_parts(1_039_000, 0)
            // Standard Error: 782
            .saturating_add(Weight::from_parts(213_980, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3577 + c * (1024 ±0)`
        // Minimum execution time: 3_244_000 picoseconds.
        Weight::from_parts(3_344_000, 3577)
            // Standard Error: 1_251
            .saturating_add(Weight::from_parts(745_887, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_313_000 picoseconds.
        Weight::from_parts(94_855_597, 0)
            // Standard Error: 7_430
            .saturating_add(Weight::from_parts(2_251_128, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1050`
        //  Estimated: `42875`
        // Minimum execution time: 80_590_000 picoseconds.
        Weight::from_parts(82_680_000, 42875)
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `958`
        //  Estimated: `21477`
        // Minimum execution time: 54_119_000 picoseconds.
        Weight::from_parts(55_824_000, 21477)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `605`
        //  Estimated: `17354`
        // Minimum execution time: 28_512_000 picoseconds.
        Weight::from_parts(29_243_000, 17354)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 7_723_000 picoseconds.
        Weight::from_parts(2_171_636, 7640)
            // Standard Error: 35_767
            .saturating_add(Weight::from_parts(14_136_883, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1439 + c * (16389 ±0)`
        //  Estimated: `42034 + c * (131112 ±0)`
        // Minimum execution time: 67_944_000 picoseconds.
        Weight::from_parts(68_684_000, 42034)
            // Standard Error: 149_976
            .saturating_add(Weight::from_parts(53_802_805, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `5270`
        // Minimum execution time: 72_447_000 picoseconds.
        Weight::from_parts(55_121_533, 5270)
            // Standard Error: 41_373
            .saturating_add(Weight::from_parts(51_585_409, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `742`
        //  Estimated: `39419`
        // Minimum execution time: 64_415_000 picoseconds.
        Weight::from_parts(69_963_344, 39419)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_686, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `306`
        //  Estimated: `35235`
        // Minimum execution time: 11_278_086_000 picoseconds.
        Weight::from_parts(307_296_681, 35235)
            // Standard Error: 177_637
            .saturating_add(Weight::from_parts(51_810_470, 0).saturating_mul(c.into()))
            // Standard Error: 10
            .saturating_add(Weight::from_parts(2_593, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `349`
        //  Estimated: `23860`
        // Minimum execution time: 55_120_000 picoseconds.
        Weight::from_parts(37_119_536, 23860)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_093, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `452`
        //  Estimated: `27184`
        // Minimum execution time: 56_788_000 picoseconds.
        Weight::from_parts(40_845_798, 27184)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(1_078, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1049`
        //  Estimated: `42866`
        // Minimum execution time: 83_259_000 picoseconds.
        Weight::from_parts(64_909_573, 42866)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_093, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1152`
        //  Estimated: `46396`
        // Minimum execution time: 92_060_000 picoseconds.
        Weight::from_parts(58_878_446, 46396)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_123, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `85981`
        // Minimum execution time: 324_225_000 picoseconds.
        Weight::from_parts(340_166_637, 85981)
            .saturating_add(T::DbWeight::get().reads(29_u64))
            .saturating_add(T::DbWeight::get().writes(23_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `85905`
        // Minimum execution time: 332_778_000 picoseconds.
        Weight::from_parts(352_380_273, 85905)
            .saturating_add(T::DbWeight::get().reads(29_u64))
            .saturating_add(T::DbWeight::get().writes(23_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 55_251_000 picoseconds.
        Weight::from_parts(55_591_000, 3899)
            // Standard Error: 39_213
            .saturating_add(Weight::from_parts(51_195_837, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_187_000 picoseconds.
        Weight::from_parts(87_103_000, 0)
            // Standard Error: 4_215_607
            .saturating_add(Weight::from_parts(577_346_505, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 312_539_000 picoseconds.
        Weight::from_parts(236_649_937, 0)
            // Standard Error: 7_394
            .saturating_add(Weight::from_parts(32_185_186, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 148_070_000 picoseconds.
        Weight::from_parts(136_274_739, 0)
            // Standard Error: 297_809
            .saturating_add(Weight::from_parts(61_663_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_830_000 picoseconds.
        Weight::from_parts(93_803_472, 0)
            // Standard Error: 3_861
            .saturating_add(Weight::from_parts(2_303_052, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 133_741_000 picoseconds.
        Weight::from_parts(160_209_960, 0)
            // Standard Error: 23_133
            .saturating_add(Weight::from_parts(2_260_557, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_272_000 picoseconds.
        Weight::from_parts(104_923_168, 0)
            // Standard Error: 377_309
            .saturating_add(Weight::from_parts(91_832_976, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_254_000 picoseconds.
        Weight::from_parts(79_828_644, 0)
            // Standard Error: 323_418
            .saturating_add(Weight::from_parts(81_865_762, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_114_000 picoseconds.
        Weight::from_parts(72_163_900, 0)
            // Standard Error: 346_678
            .saturating_add(Weight::from_parts(82_779_246, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_816_000 picoseconds.
        Weight::from_parts(78_194_990, 0)
            // Standard Error: 334_941
            .saturating_add(Weight::from_parts(82_019_941, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_047_000 picoseconds.
        Weight::from_parts(74_478_079, 0)
            // Standard Error: 309_555
            .saturating_add(Weight::from_parts(81_590_967, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_039_000 picoseconds.
        Weight::from_parts(74_271_232, 0)
            // Standard Error: 326_232
            .saturating_add(Weight::from_parts(82_021_112, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_938_000 picoseconds.
        Weight::from_parts(70_312_049, 0)
            // Standard Error: 384_124
            .saturating_add(Weight::from_parts(82_987_701, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_864_000 picoseconds.
        Weight::from_parts(61_962_308, 0)
            // Standard Error: 323_190
            .saturating_add(Weight::from_parts(85_856_660, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 557_493_000 picoseconds.
        Weight::from_parts(592_801_368, 0)
            // Standard Error: 409_546
            .saturating_add(Weight::from_parts(144_795_778, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 679_874_000 picoseconds.
        Weight::from_parts(686_839_000, 0)
            // Standard Error: 58_790
            .saturating_add(Weight::from_parts(13_363_519, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_960_000 picoseconds.
        Weight::from_parts(72_773_569, 0)
            // Standard Error: 356_834
            .saturating_add(Weight::from_parts(82_299_373, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_164_000 picoseconds.
        Weight::from_parts(75_805_351, 0)
            // Standard Error: 354_476
            .saturating_add(Weight::from_parts(81_724_195, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_687_000 picoseconds.
        Weight::from_parts(84_215_616, 0)
            // Standard Error: 369_944
            .saturating_add(Weight::from_parts(167_377_282, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_125_000 picoseconds.
        Weight::from_parts(86_227_000, 0)
            // Standard Error: 3_772_315
            .saturating_add(Weight::from_parts(772_436_118, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_523_000 picoseconds.
        Weight::from_parts(143_906_288, 0)
            // Standard Error: 399_324
            .saturating_add(Weight::from_parts(252_149_899, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 326_110_000 picoseconds.
        Weight::from_parts(336_763_000, 0)
            // Standard Error: 56_534
            .saturating_add(Weight::from_parts(24_370_294, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_804_000 picoseconds.
        Weight::from_parts(143_563_341, 0)
            // Standard Error: 372_722
            .saturating_add(Weight::from_parts(261_225_569, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 343_892_000 picoseconds.
        Weight::from_parts(347_973_000, 0)
            // Standard Error: 60_565
            .saturating_add(Weight::from_parts(24_734_823, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 555_483_000 picoseconds.
        Weight::from_parts(614_510_597, 0)
            // Standard Error: 374_644
            .saturating_add(Weight::from_parts(271_025_900, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 553_655_000 picoseconds.
        Weight::from_parts(628_366_705, 0)
            // Standard Error: 387_921
            .saturating_add(Weight::from_parts(274_540_504, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_141_000 picoseconds.
        Weight::from_parts(66_893_152, 0)
            // Standard Error: 308_456
            .saturating_add(Weight::from_parts(98_325_209, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_880_067_000 picoseconds.
        Weight::from_parts(2_066_353_483, 0)
            // Standard Error: 317_517
            .saturating_add(Weight::from_parts(167_465_105, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 297_838_000 picoseconds.
        Weight::from_parts(304_033_000, 0)
            // Standard Error: 54_783
            .saturating_add(Weight::from_parts(34_389_849, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_926_644_000 picoseconds.
        Weight::from_parts(2_076_013_097, 0)
            // Standard Error: 378_620
            .saturating_add(Weight::from_parts(220_705_141, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_881_638_000 picoseconds.
        Weight::from_parts(2_064_826_094, 0)
            // Standard Error: 343_760
            .saturating_add(Weight::from_parts(223_342_781, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 248_316_000 picoseconds.
        Weight::from_parts(312_481_666, 0)
            // Standard Error: 342_211
            .saturating_add(Weight::from_parts(265_990_952, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 508_763_000 picoseconds.
        Weight::from_parts(519_832_000, 0)
            // Standard Error: 61_175
            .saturating_add(Weight::from_parts(24_850_360, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_110_463_000 picoseconds.
        Weight::from_parts(2_259_526_406, 0)
            // Standard Error: 387_329
            .saturating_add(Weight::from_parts(227_363_179, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_538_000 picoseconds.
        Weight::from_parts(88_730_893, 0)
            // Standard Error: 266_858
            .saturating_add(Weight::from_parts(19_471_406, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_307_000 picoseconds.
        Weight::from_parts(89_961_840, 0)
            // Standard Error: 1_045
            .saturating_add(Weight::from_parts(480_732, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_730_000 picoseconds.
        Weight::from_parts(87_487_687, 0)
            // Standard Error: 263_893
            .saturating_add(Weight::from_parts(20_782_112, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_503_000 picoseconds.
        Weight::from_parts(83_929_368, 0)
            // Standard Error: 1_069
            .saturating_add(Weight::from_parts(491_764, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_091_000 picoseconds.
        Weight::from_parts(85_862_885, 0)
            // Standard Error: 255_504
            .saturating_add(Weight::from_parts(16_845_914, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_254_000 picoseconds.
        Weight::from_parts(89_303_791, 0)
            // Standard Error: 262_276
            .saturating_add(Weight::from_parts(18_000_908, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_260_000 picoseconds.
        Weight::from_parts(122_665_501, 0)
            // Standard Error: 425_664
            .saturating_add(Weight::from_parts(140_859_574, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_965_000 picoseconds.
        Weight::from_parts(98_886_000, 0)
            // Standard Error: 2_996
            .saturating_add(Weight::from_parts(691_731, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 562_450_000 picoseconds.
        Weight::from_parts(627_879_022, 0)
            // Standard Error: 5_278_275
            .saturating_add(Weight::from_parts(1_354_877, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 562_047_000 picoseconds.
        Weight::from_parts(594_105_408, 0)
            // Standard Error: 3_815_594
            .saturating_add(Weight::from_parts(2_144_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_305_000 picoseconds.
        Weight::from_parts(96_372_979, 0)
            // Standard Error: 274_529
            .saturating_add(Weight::from_parts(9_077_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_202_000 picoseconds.
        Weight::from_parts(91_952_732, 0)
            // Standard Error: 989
            .saturating_add(Weight::from_parts(485_720, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_151_000 picoseconds.
        Weight::from_parts(96_391_212, 0)
            // Standard Error: 291_602
            .saturating_add(Weight::from_parts(7_343_687, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_067_000 picoseconds.
        Weight::from_parts(91_574_995, 0)
            // Standard Error: 1_070
            .saturating_add(Weight::from_parts(481_837, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_214_000 picoseconds.
        Weight::from_parts(77_804_771, 0)
            // Standard Error: 324_386
            .saturating_add(Weight::from_parts(82_634_840, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_894_000 picoseconds.
        Weight::from_parts(74_231_967, 0)
            // Standard Error: 349_538
            .saturating_add(Weight::from_parts(82_961_948, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 562_304_000 picoseconds.
        Weight::from_parts(581_544_735, 0)
            // Standard Error: 376_099
            .saturating_add(Weight::from_parts(101_522_089, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 571_109_000 picoseconds.
        Weight::from_parts(589_403_495, 0)
            // Standard Error: 1_309
            .saturating_add(Weight::from_parts(125_265, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_373_247_000 picoseconds.
        Weight::from_parts(2_567_544_576, 0)
            // Standard Error: 391_836
            .saturating_add(Weight::from_parts(126_075_022, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_478_119_000 picoseconds.
        Weight::from_parts(2_473_120_013, 0)
            // Standard Error: 14_784
            .saturating_add(Weight::from_parts(12_337_179, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_104_000 picoseconds.
        Weight::from_parts(96_622_110, 0)
            // Standard Error: 411_169
            .saturating_add(Weight::from_parts(111_401_076, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 141_642_000 picoseconds.
        Weight::from_parts(144_113_000, 0)
            // Standard Error: 47_995
            .saturating_add(Weight::from_parts(30_167_899, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_203_000 picoseconds.
        Weight::from_parts(73_832_343, 0)
            // Standard Error: 307_227
            .saturating_add(Weight::from_parts(82_074_834, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_554_000 picoseconds.
        Weight::from_parts(86_353_487, 0)
            // Standard Error: 302_443
            .saturating_add(Weight::from_parts(25_571_712, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_506_000 picoseconds.
        Weight::from_parts(88_899_926, 0)
            // Standard Error: 296_592
            .saturating_add(Weight::from_parts(11_084_273, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_688_000 picoseconds.
        Weight::from_parts(85_781_128, 0)
            // Standard Error: 314_220
            .saturating_add(Weight::from_parts(15_031_271, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_058_000 picoseconds.
        Weight::from_parts(85_840_973, 0)
            // Standard Error: 271_327
            .saturating_add(Weight::from_parts(16_054_526, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_350_000 picoseconds.
        Weight::from_parts(86_917_169, 0)
            // Standard Error: 272_504
            .saturating_add(Weight::from_parts(11_783_330, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 139_760_000 picoseconds.
        Weight::from_parts(184_032_037, 0)
            // Standard Error: 342_020
            .saturating_add(Weight::from_parts(152_562_880, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_544_000 picoseconds.
        Weight::from_parts(156_108_730, 0)
            // Standard Error: 400_610
            .saturating_add(Weight::from_parts(334_369_369, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 53_026_094_000 picoseconds.
        Weight::from_parts(53_161_797_000, 0)
            // Standard Error: 315_891
            .saturating_add(Weight::from_parts(7_779_046, 0).saturating_mul(p.into()))
            // Standard Error: 315_875
            .saturating_add(Weight::from_parts(181_054_530, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_653_000 picoseconds.
        Weight::from_parts(156_335_502, 0)
            // Standard Error: 396_970
            .saturating_add(Weight::from_parts(343_047_877, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_623_499_000 picoseconds.
        Weight::from_parts(50_725_267_000, 0)
            // Standard Error: 311_418
            .saturating_add(Weight::from_parts(8_941_920, 0).saturating_mul(p.into()))
            // Standard Error: 311_403
            .saturating_add(Weight::from_parts(182_199_722, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_721_000 picoseconds.
        Weight::from_parts(100_419_400, 0)
            // Standard Error: 26_675
            .saturating_add(Weight::from_parts(1_857_053, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 83_074_000 picoseconds.
        Weight::from_parts(116_589_268, 1131)
            // Standard Error: 6_936
            .saturating_add(Weight::from_parts(11_831_839, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 84_871_000 picoseconds.
        Weight::from_parts(85_366_000, 1131)
            // Standard Error: 31_005
            .saturating_add(Weight::from_parts(38_853_166, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_145_211_000 picoseconds.
        Weight::from_parts(5_930_116_758, 5069931)
            // Standard Error: 53_825
            .saturating_add(Weight::from_parts(38_512_312, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 85_691_000 picoseconds.
        Weight::from_parts(86_530_000, 1939)
            // Standard Error: 33_966
            .saturating_add(Weight::from_parts(47_135_339, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 89_518_000 picoseconds.
        Weight::from_parts(85_806_426, 1131)
            // Standard Error: 58_900
            .saturating_add(Weight::from_parts(40_263_960, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 592_073_000 picoseconds.
        Weight::from_parts(601_196_288, 1496)
            // Standard Error: 93_827
            .saturating_add(Weight::from_parts(44_185_772, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 969_135_000 picoseconds.
        Weight::from_parts(967_893_783, 317931)
            // Standard Error: 116_353
            .saturating_add(Weight::from_parts(45_166_698, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_641_000 picoseconds.
        Weight::from_parts(1_823_350, 0)
            // Standard Error: 14_164
            .saturating_add(Weight::from_parts(24_713_466, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_378_683_000 picoseconds.
        Weight::from_parts(4_083_121_449, 0)
            // Standard Error: 103_832
            .saturating_add(Weight::from_parts(5_179_553, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_377_993_000 picoseconds.
        Weight::from_parts(4_025_483_791, 0)
            // Standard Error: 140_024
            .saturating_add(Weight::from_parts(5_512_406, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_518_094_000 picoseconds.
        Weight::from_parts(11_215_128_820, 0)
            // Standard Error: 211_449
            .saturating_add(Weight::from_parts(12_460_480, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_111_151_000 picoseconds.
        Weight::from_parts(11_596_738_977, 0)
            // Standard Error: 207_038
            .saturating_add(Weight::from_parts(7_200_025, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_265_000 picoseconds.
        Weight::from_parts(2_342_000, 0)
            // Standard Error: 10_555
            .saturating_add(Weight::from_parts(3_738_814, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_241_000 picoseconds.
        Weight::from_parts(2_295_000, 0)
            // Standard Error: 4_951
            .saturating_add(Weight::from_parts(3_043_728, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_140_000 picoseconds.
        Weight::from_parts(3_301_568, 0)
            // Standard Error: 1_246
            .saturating_add(Weight::from_parts(1_581_512, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_207_000 picoseconds.
        Weight::from_parts(2_265_000, 0)
            // Standard Error: 8_823
            .saturating_add(Weight::from_parts(2_905_708, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_220_000 picoseconds.
        Weight::from_parts(2_292_000, 0)
            // Standard Error: 9_756
            .saturating_add(Weight::from_parts(5_234_386, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_879_000 picoseconds.
        Weight::from_parts(5_298_022, 0)
            // Standard Error: 1_687
            .saturating_add(Weight::from_parts(165_713, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_332_000 picoseconds.
        Weight::from_parts(4_910_182, 0)
            // Standard Error: 6_695
            .saturating_add(Weight::from_parts(2_568_472, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_568_472 -
            2_420_573, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_266_000 picoseconds.
        Weight::from_parts(4_026_517, 0)
            // Standard Error: 12_283
            .saturating_add(Weight::from_parts(2_420_573, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_651_000 picoseconds.
        Weight::from_parts(9_581_866, 0)
            // Standard Error: 20_124
            .saturating_add(Weight::from_parts(10_277_540, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_109_000 picoseconds.
        Weight::from_parts(352_883, 0)
            // Standard Error: 6_746
            .saturating_add(Weight::from_parts(1_300_164, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_326_000 picoseconds.
        Weight::from_parts(5_597_173, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_292_000 picoseconds.
        Weight::from_parts(1_862_512, 0)
            // Standard Error: 3_084
            .saturating_add(Weight::from_parts(252_652, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_194_000 picoseconds.
        Weight::from_parts(2_309_000, 0)
            // Standard Error: 5_178
            .saturating_add(Weight::from_parts(736_915, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_298_000 picoseconds.
        Weight::from_parts(2_386_000, 0)
            // Standard Error: 4_820
            .saturating_add(Weight::from_parts(702_638, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_297_000 picoseconds.
        Weight::from_parts(3_670_960, 0)
            // Standard Error: 9_754
            .saturating_add(Weight::from_parts(572_416, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_408_000 picoseconds.
        Weight::from_parts(6_454_000, 0)
            // Standard Error: 10_675
            .saturating_add(Weight::from_parts(1_242_112, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_938_000 picoseconds.
        Weight::from_parts(486_150, 0)
            // Standard Error: 12_514
            .saturating_add(Weight::from_parts(7_067_395, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_192_000 picoseconds.
        Weight::from_parts(2_312_000, 0)
            // Standard Error: 9_092
            .saturating_add(Weight::from_parts(3_329_844, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_214_000 picoseconds.
        Weight::from_parts(2_293_000, 0)
            // Standard Error: 7_337
            .saturating_add(Weight::from_parts(3_125_507, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_207_000 picoseconds.
        Weight::from_parts(2_284_000, 0)
            // Standard Error: 7_730
            .saturating_add(Weight::from_parts(3_108_232, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_326_000 picoseconds.
        Weight::from_parts(2_363_000, 0)
            // Standard Error: 4_681
            .saturating_add(Weight::from_parts(2_645_727, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_247_000 picoseconds.
        Weight::from_parts(2_309_000, 0)
            // Standard Error: 4_683
            .saturating_add(Weight::from_parts(487_883, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_160_000 picoseconds.
        Weight::from_parts(1_027_808, 0)
            // Standard Error: 3_691
            .saturating_add(Weight::from_parts(416_497, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_227_000 picoseconds.
        Weight::from_parts(2_304_000, 0)
            // Standard Error: 11_967
            .saturating_add(Weight::from_parts(1_897_186, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_192_000 picoseconds.
        Weight::from_parts(2_278_000, 0)
            // Standard Error: 9_816
            .saturating_add(Weight::from_parts(1_135_169, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_247_000 picoseconds.
        Weight::from_parts(1_169_125, 0)
            // Standard Error: 4_946
            .saturating_add(Weight::from_parts(398_916, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_219_000 picoseconds.
        Weight::from_parts(1_342_109, 0)
            // Standard Error: 3_827
            .saturating_add(Weight::from_parts(381_406, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_255_000 picoseconds.
        Weight::from_parts(220_461, 0)
            // Standard Error: 6_114
            .saturating_add(Weight::from_parts(554_425, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_264_000 picoseconds.
        Weight::from_parts(2_283_000, 0)
            // Standard Error: 4_020
            .saturating_add(Weight::from_parts(468_759, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_181_000 picoseconds.
        Weight::from_parts(338_492, 0)
            // Standard Error: 5_253
            .saturating_add(Weight::from_parts(494_019, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_240_000 picoseconds.
        Weight::from_parts(1_294_690, 0)
            // Standard Error: 3_753
            .saturating_add(Weight::from_parts(324_712, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_233_000 picoseconds.
        Weight::from_parts(2_444_584, 0)
            // Standard Error: 1_889
            .saturating_add(Weight::from_parts(165_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_157_000 picoseconds.
        Weight::from_parts(2_914_860, 0)
            // Standard Error: 1_514
            .saturating_add(Weight::from_parts(142_579, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_213_000 picoseconds.
        Weight::from_parts(2_289_000, 0)
            // Standard Error: 11_911
            .saturating_add(Weight::from_parts(1_826_162, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_259_000 picoseconds.
        Weight::from_parts(2_326_000, 0)
            // Standard Error: 9_286
            .saturating_add(Weight::from_parts(1_108_028, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_241_000 picoseconds.
        Weight::from_parts(2_284_000, 0)
            // Standard Error: 10_968
            .saturating_add(Weight::from_parts(1_805_516, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_269_000 picoseconds.
        Weight::from_parts(2_309_000, 0)
            // Standard Error: 7_672
            .saturating_add(Weight::from_parts(1_119_152, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_139_000 picoseconds.
        Weight::from_parts(2_309_000, 0)
            // Standard Error: 12_365
            .saturating_add(Weight::from_parts(1_894_307, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_287_000 picoseconds.
        Weight::from_parts(2_343_000, 0)
            // Standard Error: 8_362
            .saturating_add(Weight::from_parts(1_152_531, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_235_000 picoseconds.
        Weight::from_parts(2_286_000, 0)
            // Standard Error: 13_370
            .saturating_add(Weight::from_parts(1_873_731, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_282_000 picoseconds.
        Weight::from_parts(2_359_000, 0)
            // Standard Error: 8_277
            .saturating_add(Weight::from_parts(1_113_737, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_262_000 picoseconds.
        Weight::from_parts(2_307_000, 0)
            // Standard Error: 10_920
            .saturating_add(Weight::from_parts(1_832_750, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_239_000 picoseconds.
        Weight::from_parts(2_288_000, 0)
            // Standard Error: 8_108
            .saturating_add(Weight::from_parts(1_170_296, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_245_000 picoseconds.
        Weight::from_parts(2_346_000, 0)
            // Standard Error: 11_824
            .saturating_add(Weight::from_parts(1_881_649, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_229_000 picoseconds.
        Weight::from_parts(2_300_000, 0)
            // Standard Error: 10_640
            .saturating_add(Weight::from_parts(1_081_803, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_224_000 picoseconds.
        Weight::from_parts(2_263_000, 0)
            // Standard Error: 13_992
            .saturating_add(Weight::from_parts(1_858_415, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_236_000 picoseconds.
        Weight::from_parts(2_280_000, 0)
            // Standard Error: 6_791
            .saturating_add(Weight::from_parts(1_122_206, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_226_000 picoseconds.
        Weight::from_parts(2_274_000, 0)
            // Standard Error: 13_811
            .saturating_add(Weight::from_parts(1_868_457, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_264_000 picoseconds.
        Weight::from_parts(2_296_000, 0)
            // Standard Error: 10_387
            .saturating_add(Weight::from_parts(1_119_568, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_235_000 picoseconds.
        Weight::from_parts(2_306_000, 0)
            // Standard Error: 14_082
            .saturating_add(Weight::from_parts(1_900_634, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_203_000 picoseconds.
        Weight::from_parts(2_271_000, 0)
            // Standard Error: 10_364
            .saturating_add(Weight::from_parts(1_096_144, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_247_000 picoseconds.
        Weight::from_parts(2_267_000, 0)
            // Standard Error: 17_157
            .saturating_add(Weight::from_parts(1_841_087, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_244_000 picoseconds.
        Weight::from_parts(2_319_000, 0)
            // Standard Error: 10_797
            .saturating_add(Weight::from_parts(1_125_737, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_189_000 picoseconds.
        Weight::from_parts(2_243_000, 0)
            // Standard Error: 11_172
            .saturating_add(Weight::from_parts(1_291_053, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(2_301_000, 0)
            // Standard Error: 5_972
            .saturating_add(Weight::from_parts(601_333, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_216_000 picoseconds.
        Weight::from_parts(2_284_000, 0)
            // Standard Error: 12_255
            .saturating_add(Weight::from_parts(1_285_454, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_173_000 picoseconds.
        Weight::from_parts(2_244_000, 0)
            // Standard Error: 4_739
            .saturating_add(Weight::from_parts(599_935, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_180_000 picoseconds.
        Weight::from_parts(2_261_000, 0)
            // Standard Error: 17_781
            .saturating_add(Weight::from_parts(1_748_160, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_216_000 picoseconds.
        Weight::from_parts(2_246_000, 0)
            // Standard Error: 11_298
            .saturating_add(Weight::from_parts(1_170_366, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_173_000 picoseconds.
        Weight::from_parts(2_239_000, 0)
            // Standard Error: 12_852
            .saturating_add(Weight::from_parts(2_723_978, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_238_000 picoseconds.
        Weight::from_parts(2_322_000, 0)
            // Standard Error: 11_134
            .saturating_add(Weight::from_parts(2_293_399, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_275_000 picoseconds.
        Weight::from_parts(2_351_000, 0)
            // Standard Error: 13_315
            .saturating_add(Weight::from_parts(2_908_035, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_225_000 picoseconds.
        Weight::from_parts(2_310_000, 0)
            // Standard Error: 10_006
            .saturating_add(Weight::from_parts(2_469_406, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_215_000 picoseconds.
        Weight::from_parts(2_257_000, 0)
            // Standard Error: 14_832
            .saturating_add(Weight::from_parts(9_559_183, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_273_000 picoseconds.
        Weight::from_parts(2_331_000, 0)
            // Standard Error: 25_676
            .saturating_add(Weight::from_parts(7_444_515, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_293_000 picoseconds.
        Weight::from_parts(2_325_000, 0)
            // Standard Error: 11_846
            .saturating_add(Weight::from_parts(2_928_591, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_217_000 picoseconds.
        Weight::from_parts(2_280_000, 0)
            // Standard Error: 11_925
            .saturating_add(Weight::from_parts(2_422_363, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_246_000 picoseconds.
        Weight::from_parts(2_352_000, 0)
            // Standard Error: 8_653
            .saturating_add(Weight::from_parts(1_275_691, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_179_000 picoseconds.
        Weight::from_parts(2_256_000, 0)
            // Standard Error: 5_064
            .saturating_add(Weight::from_parts(635_259, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_210_000 picoseconds.
        Weight::from_parts(2_278_000, 0)
            // Standard Error: 8_124
            .saturating_add(Weight::from_parts(1_229_921, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_279_000 picoseconds.
        Weight::from_parts(2_359_000, 0)
            // Standard Error: 4_409
            .saturating_add(Weight::from_parts(601_235, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_253_000 picoseconds.
        Weight::from_parts(2_342_000, 0)
            // Standard Error: 10_099
            .saturating_add(Weight::from_parts(1_213_730, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_202_000 picoseconds.
        Weight::from_parts(2_286_000, 0)
            // Standard Error: 5_197
            .saturating_add(Weight::from_parts(621_245, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_221_000 picoseconds.
        Weight::from_parts(2_307_000, 0)
            // Standard Error: 8_363
            .saturating_add(Weight::from_parts(1_067_941, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_184_000 picoseconds.
        Weight::from_parts(100_329, 0)
            // Standard Error: 5_293
            .saturating_add(Weight::from_parts(610_090, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_202_000 picoseconds.
        Weight::from_parts(2_248_000, 0)
            // Standard Error: 9_088
            .saturating_add(Weight::from_parts(995_484, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_174_000 picoseconds.
        Weight::from_parts(2_281_000, 0)
            // Standard Error: 3_905
            .saturating_add(Weight::from_parts(510_399, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_181_000 picoseconds.
        Weight::from_parts(2_295_000, 0)
            // Standard Error: 8_379
            .saturating_add(Weight::from_parts(1_008_913, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_227_000 picoseconds.
        Weight::from_parts(2_305_000, 0)
            // Standard Error: 4_351
            .saturating_add(Weight::from_parts(529_257, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_224_000 picoseconds.
        Weight::from_parts(2_286_000, 0)
            // Standard Error: 7_825
            .saturating_add(Weight::from_parts(1_002_818, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_240_000 picoseconds.
        Weight::from_parts(2_283_000, 0)
            // Standard Error: 3_954
            .saturating_add(Weight::from_parts(513_324, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_209_000 picoseconds.
        Weight::from_parts(2_293_000, 0)
            // Standard Error: 8_429
            .saturating_add(Weight::from_parts(1_018_896, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_345_000 picoseconds.
        Weight::from_parts(2_415_000, 0)
            // Standard Error: 4_473
            .saturating_add(Weight::from_parts(533_512, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 967_000 picoseconds.
        Weight::from_parts(1_039_000, 0)
            // Standard Error: 782
            .saturating_add(Weight::from_parts(213_980, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3577 + c * (1024 ±0)`
        // Minimum execution time: 3_244_000 picoseconds.
        Weight::from_parts(3_344_000, 3577)
            // Standard Error: 1_251
            .saturating_add(Weight::from_parts(745_887, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_313_000 picoseconds.
        Weight::from_parts(94_855_597, 0)
            // Standard Error: 7_430
            .saturating_add(Weight::from_parts(2_251_128, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1050`
        //  Estimated: `42875`
        // Minimum execution time: 80_590_000 picoseconds.
        Weight::from_parts(82_680_000, 42875)
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `958`
        //  Estimated: `21477`
        // Minimum execution time: 54_119_000 picoseconds.
        Weight::from_parts(55_824_000, 21477)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `605`
        //  Estimated: `17354`
        // Minimum execution time: 28_512_000 picoseconds.
        Weight::from_parts(29_243_000, 17354)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 7_723_000 picoseconds.
        Weight::from_parts(2_171_636, 7640)
            // Standard Error: 35_767
            .saturating_add(Weight::from_parts(14_136_883, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1439 + c * (16389 ±0)`
        //  Estimated: `42034 + c * (131112 ±0)`
        // Minimum execution time: 67_944_000 picoseconds.
        Weight::from_parts(68_684_000, 42034)
            // Standard Error: 149_976
            .saturating_add(Weight::from_parts(53_802_805, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `5270`
        // Minimum execution time: 72_447_000 picoseconds.
        Weight::from_parts(55_121_533, 5270)
            // Standard Error: 41_373
            .saturating_add(Weight::from_parts(51_585_409, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `742`
        //  Estimated: `39419`
        // Minimum execution time: 64_415_000 picoseconds.
        Weight::from_parts(69_963_344, 39419)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_686, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `306`
        //  Estimated: `35235`
        // Minimum execution time: 11_278_086_000 picoseconds.
        Weight::from_parts(307_296_681, 35235)
            // Standard Error: 177_637
            .saturating_add(Weight::from_parts(51_810_470, 0).saturating_mul(c.into()))
            // Standard Error: 10
            .saturating_add(Weight::from_parts(2_593, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `349`
        //  Estimated: `23860`
        // Minimum execution time: 55_120_000 picoseconds.
        Weight::from_parts(37_119_536, 23860)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_093, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `452`
        //  Estimated: `27184`
        // Minimum execution time: 56_788_000 picoseconds.
        Weight::from_parts(40_845_798, 27184)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(1_078, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1049`
        //  Estimated: `42866`
        // Minimum execution time: 83_259_000 picoseconds.
        Weight::from_parts(64_909_573, 42866)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_093, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1152`
        //  Estimated: `46396`
        // Minimum execution time: 92_060_000 picoseconds.
        Weight::from_parts(58_878_446, 46396)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_123, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `85981`
        // Minimum execution time: 324_225_000 picoseconds.
        Weight::from_parts(340_166_637, 85981)
            .saturating_add(RocksDbWeight::get().reads(29_u64))
            .saturating_add(RocksDbWeight::get().writes(23_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `85905`
        // Minimum execution time: 332_778_000 picoseconds.
        Weight::from_parts(352_380_273, 85905)
            .saturating_add(RocksDbWeight::get().reads(29_u64))
            .saturating_add(RocksDbWeight::get().writes(23_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 55_251_000 picoseconds.
        Weight::from_parts(55_591_000, 3899)
            // Standard Error: 39_213
            .saturating_add(Weight::from_parts(51_195_837, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_187_000 picoseconds.
        Weight::from_parts(87_103_000, 0)
            // Standard Error: 4_215_607
            .saturating_add(Weight::from_parts(577_346_505, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 312_539_000 picoseconds.
        Weight::from_parts(236_649_937, 0)
            // Standard Error: 7_394
            .saturating_add(Weight::from_parts(32_185_186, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 148_070_000 picoseconds.
        Weight::from_parts(136_274_739, 0)
            // Standard Error: 297_809
            .saturating_add(Weight::from_parts(61_663_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_830_000 picoseconds.
        Weight::from_parts(93_803_472, 0)
            // Standard Error: 3_861
            .saturating_add(Weight::from_parts(2_303_052, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 133_741_000 picoseconds.
        Weight::from_parts(160_209_960, 0)
            // Standard Error: 23_133
            .saturating_add(Weight::from_parts(2_260_557, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_272_000 picoseconds.
        Weight::from_parts(104_923_168, 0)
            // Standard Error: 377_309
            .saturating_add(Weight::from_parts(91_832_976, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_254_000 picoseconds.
        Weight::from_parts(79_828_644, 0)
            // Standard Error: 323_418
            .saturating_add(Weight::from_parts(81_865_762, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_114_000 picoseconds.
        Weight::from_parts(72_163_900, 0)
            // Standard Error: 346_678
            .saturating_add(Weight::from_parts(82_779_246, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_816_000 picoseconds.
        Weight::from_parts(78_194_990, 0)
            // Standard Error: 334_941
            .saturating_add(Weight::from_parts(82_019_941, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_047_000 picoseconds.
        Weight::from_parts(74_478_079, 0)
            // Standard Error: 309_555
            .saturating_add(Weight::from_parts(81_590_967, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_039_000 picoseconds.
        Weight::from_parts(74_271_232, 0)
            // Standard Error: 326_232
            .saturating_add(Weight::from_parts(82_021_112, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_938_000 picoseconds.
        Weight::from_parts(70_312_049, 0)
            // Standard Error: 384_124
            .saturating_add(Weight::from_parts(82_987_701, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_864_000 picoseconds.
        Weight::from_parts(61_962_308, 0)
            // Standard Error: 323_190
            .saturating_add(Weight::from_parts(85_856_660, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 557_493_000 picoseconds.
        Weight::from_parts(592_801_368, 0)
            // Standard Error: 409_546
            .saturating_add(Weight::from_parts(144_795_778, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 679_874_000 picoseconds.
        Weight::from_parts(686_839_000, 0)
            // Standard Error: 58_790
            .saturating_add(Weight::from_parts(13_363_519, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_960_000 picoseconds.
        Weight::from_parts(72_773_569, 0)
            // Standard Error: 356_834
            .saturating_add(Weight::from_parts(82_299_373, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_164_000 picoseconds.
        Weight::from_parts(75_805_351, 0)
            // Standard Error: 354_476
            .saturating_add(Weight::from_parts(81_724_195, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_687_000 picoseconds.
        Weight::from_parts(84_215_616, 0)
            // Standard Error: 369_944
            .saturating_add(Weight::from_parts(167_377_282, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_125_000 picoseconds.
        Weight::from_parts(86_227_000, 0)
            // Standard Error: 3_772_315
            .saturating_add(Weight::from_parts(772_436_118, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_523_000 picoseconds.
        Weight::from_parts(143_906_288, 0)
            // Standard Error: 399_324
            .saturating_add(Weight::from_parts(252_149_899, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 326_110_000 picoseconds.
        Weight::from_parts(336_763_000, 0)
            // Standard Error: 56_534
            .saturating_add(Weight::from_parts(24_370_294, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_804_000 picoseconds.
        Weight::from_parts(143_563_341, 0)
            // Standard Error: 372_722
            .saturating_add(Weight::from_parts(261_225_569, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 343_892_000 picoseconds.
        Weight::from_parts(347_973_000, 0)
            // Standard Error: 60_565
            .saturating_add(Weight::from_parts(24_734_823, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 555_483_000 picoseconds.
        Weight::from_parts(614_510_597, 0)
            // Standard Error: 374_644
            .saturating_add(Weight::from_parts(271_025_900, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 553_655_000 picoseconds.
        Weight::from_parts(628_366_705, 0)
            // Standard Error: 387_921
            .saturating_add(Weight::from_parts(274_540_504, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_141_000 picoseconds.
        Weight::from_parts(66_893_152, 0)
            // Standard Error: 308_456
            .saturating_add(Weight::from_parts(98_325_209, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_880_067_000 picoseconds.
        Weight::from_parts(2_066_353_483, 0)
            // Standard Error: 317_517
            .saturating_add(Weight::from_parts(167_465_105, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 297_838_000 picoseconds.
        Weight::from_parts(304_033_000, 0)
            // Standard Error: 54_783
            .saturating_add(Weight::from_parts(34_389_849, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_926_644_000 picoseconds.
        Weight::from_parts(2_076_013_097, 0)
            // Standard Error: 378_620
            .saturating_add(Weight::from_parts(220_705_141, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_881_638_000 picoseconds.
        Weight::from_parts(2_064_826_094, 0)
            // Standard Error: 343_760
            .saturating_add(Weight::from_parts(223_342_781, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 248_316_000 picoseconds.
        Weight::from_parts(312_481_666, 0)
            // Standard Error: 342_211
            .saturating_add(Weight::from_parts(265_990_952, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 508_763_000 picoseconds.
        Weight::from_parts(519_832_000, 0)
            // Standard Error: 61_175
            .saturating_add(Weight::from_parts(24_850_360, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_110_463_000 picoseconds.
        Weight::from_parts(2_259_526_406, 0)
            // Standard Error: 387_329
            .saturating_add(Weight::from_parts(227_363_179, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_538_000 picoseconds.
        Weight::from_parts(88_730_893, 0)
            // Standard Error: 266_858
            .saturating_add(Weight::from_parts(19_471_406, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_307_000 picoseconds.
        Weight::from_parts(89_961_840, 0)
            // Standard Error: 1_045
            .saturating_add(Weight::from_parts(480_732, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_730_000 picoseconds.
        Weight::from_parts(87_487_687, 0)
            // Standard Error: 263_893
            .saturating_add(Weight::from_parts(20_782_112, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_503_000 picoseconds.
        Weight::from_parts(83_929_368, 0)
            // Standard Error: 1_069
            .saturating_add(Weight::from_parts(491_764, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_091_000 picoseconds.
        Weight::from_parts(85_862_885, 0)
            // Standard Error: 255_504
            .saturating_add(Weight::from_parts(16_845_914, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_254_000 picoseconds.
        Weight::from_parts(89_303_791, 0)
            // Standard Error: 262_276
            .saturating_add(Weight::from_parts(18_000_908, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_260_000 picoseconds.
        Weight::from_parts(122_665_501, 0)
            // Standard Error: 425_664
            .saturating_add(Weight::from_parts(140_859_574, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_965_000 picoseconds.
        Weight::from_parts(98_886_000, 0)
            // Standard Error: 2_996
            .saturating_add(Weight::from_parts(691_731, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 562_450_000 picoseconds.
        Weight::from_parts(627_879_022, 0)
            // Standard Error: 5_278_275
            .saturating_add(Weight::from_parts(1_354_877, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 562_047_000 picoseconds.
        Weight::from_parts(594_105_408, 0)
            // Standard Error: 3_815_594
            .saturating_add(Weight::from_parts(2_144_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_305_000 picoseconds.
        Weight::from_parts(96_372_979, 0)
            // Standard Error: 274_529
            .saturating_add(Weight::from_parts(9_077_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_202_000 picoseconds.
        Weight::from_parts(91_952_732, 0)
            // Standard Error: 989
            .saturating_add(Weight::from_parts(485_720, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_151_000 picoseconds.
        Weight::from_parts(96_391_212, 0)
            // Standard Error: 291_602
            .saturating_add(Weight::from_parts(7_343_687, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_067_000 picoseconds.
        Weight::from_parts(91_574_995, 0)
            // Standard Error: 1_070
            .saturating_add(Weight::from_parts(481_837, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_214_000 picoseconds.
        Weight::from_parts(77_804_771, 0)
            // Standard Error: 324_386
            .saturating_add(Weight::from_parts(82_634_840, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_894_000 picoseconds.
        Weight::from_parts(74_231_967, 0)
            // Standard Error: 349_538
            .saturating_add(Weight::from_parts(82_961_948, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 562_304_000 picoseconds.
        Weight::from_parts(581_544_735, 0)
            // Standard Error: 376_099
            .saturating_add(Weight::from_parts(101_522_089, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 571_109_000 picoseconds.
        Weight::from_parts(589_403_495, 0)
            // Standard Error: 1_309
            .saturating_add(Weight::from_parts(125_265, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_373_247_000 picoseconds.
        Weight::from_parts(2_567_544_576, 0)
            // Standard Error: 391_836
            .saturating_add(Weight::from_parts(126_075_022, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_478_119_000 picoseconds.
        Weight::from_parts(2_473_120_013, 0)
            // Standard Error: 14_784
            .saturating_add(Weight::from_parts(12_337_179, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_104_000 picoseconds.
        Weight::from_parts(96_622_110, 0)
            // Standard Error: 411_169
            .saturating_add(Weight::from_parts(111_401_076, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 141_642_000 picoseconds.
        Weight::from_parts(144_113_000, 0)
            // Standard Error: 47_995
            .saturating_add(Weight::from_parts(30_167_899, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_203_000 picoseconds.
        Weight::from_parts(73_832_343, 0)
            // Standard Error: 307_227
            .saturating_add(Weight::from_parts(82_074_834, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_554_000 picoseconds.
        Weight::from_parts(86_353_487, 0)
            // Standard Error: 302_443
            .saturating_add(Weight::from_parts(25_571_712, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_506_000 picoseconds.
        Weight::from_parts(88_899_926, 0)
            // Standard Error: 296_592
            .saturating_add(Weight::from_parts(11_084_273, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_688_000 picoseconds.
        Weight::from_parts(85_781_128, 0)
            // Standard Error: 314_220
            .saturating_add(Weight::from_parts(15_031_271, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_058_000 picoseconds.
        Weight::from_parts(85_840_973, 0)
            // Standard Error: 271_327
            .saturating_add(Weight::from_parts(16_054_526, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_350_000 picoseconds.
        Weight::from_parts(86_917_169, 0)
            // Standard Error: 272_504
            .saturating_add(Weight::from_parts(11_783_330, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 139_760_000 picoseconds.
        Weight::from_parts(184_032_037, 0)
            // Standard Error: 342_020
            .saturating_add(Weight::from_parts(152_562_880, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_544_000 picoseconds.
        Weight::from_parts(156_108_730, 0)
            // Standard Error: 400_610
            .saturating_add(Weight::from_parts(334_369_369, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 53_026_094_000 picoseconds.
        Weight::from_parts(53_161_797_000, 0)
            // Standard Error: 315_891
            .saturating_add(Weight::from_parts(7_779_046, 0).saturating_mul(p.into()))
            // Standard Error: 315_875
            .saturating_add(Weight::from_parts(181_054_530, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_653_000 picoseconds.
        Weight::from_parts(156_335_502, 0)
            // Standard Error: 396_970
            .saturating_add(Weight::from_parts(343_047_877, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_623_499_000 picoseconds.
        Weight::from_parts(50_725_267_000, 0)
            // Standard Error: 311_418
            .saturating_add(Weight::from_parts(8_941_920, 0).saturating_mul(p.into()))
            // Standard Error: 311_403
            .saturating_add(Weight::from_parts(182_199_722, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_721_000 picoseconds.
        Weight::from_parts(100_419_400, 0)
            // Standard Error: 26_675
            .saturating_add(Weight::from_parts(1_857_053, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 83_074_000 picoseconds.
        Weight::from_parts(116_589_268, 1131)
            // Standard Error: 6_936
            .saturating_add(Weight::from_parts(11_831_839, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 84_871_000 picoseconds.
        Weight::from_parts(85_366_000, 1131)
            // Standard Error: 31_005
            .saturating_add(Weight::from_parts(38_853_166, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_145_211_000 picoseconds.
        Weight::from_parts(5_930_116_758, 5069931)
            // Standard Error: 53_825
            .saturating_add(Weight::from_parts(38_512_312, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 85_691_000 picoseconds.
        Weight::from_parts(86_530_000, 1939)
            // Standard Error: 33_966
            .saturating_add(Weight::from_parts(47_135_339, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 89_518_000 picoseconds.
        Weight::from_parts(85_806_426, 1131)
            // Standard Error: 58_900
            .saturating_add(Weight::from_parts(40_263_960, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 592_073_000 picoseconds.
        Weight::from_parts(601_196_288, 1496)
            // Standard Error: 93_827
            .saturating_add(Weight::from_parts(44_185_772, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 969_135_000 picoseconds.
        Weight::from_parts(967_893_783, 317931)
            // Standard Error: 116_353
            .saturating_add(Weight::from_parts(45_166_698, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_641_000 picoseconds.
        Weight::from_parts(1_823_350, 0)
            // Standard Error: 14_164
            .saturating_add(Weight::from_parts(24_713_466, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_378_683_000 picoseconds.
        Weight::from_parts(4_083_121_449, 0)
            // Standard Error: 103_832
            .saturating_add(Weight::from_parts(5_179_553, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_377_993_000 picoseconds.
        Weight::from_parts(4_025_483_791, 0)
            // Standard Error: 140_024
            .saturating_add(Weight::from_parts(5_512_406, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_518_094_000 picoseconds.
        Weight::from_parts(11_215_128_820, 0)
            // Standard Error: 211_449
            .saturating_add(Weight::from_parts(12_460_480, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_111_151_000 picoseconds.
        Weight::from_parts(11_596_738_977, 0)
            // Standard Error: 207_038
            .saturating_add(Weight::from_parts(7_200_025, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_265_000 picoseconds.
        Weight::from_parts(2_342_000, 0)
            // Standard Error: 10_555
            .saturating_add(Weight::from_parts(3_738_814, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_241_000 picoseconds.
        Weight::from_parts(2_295_000, 0)
            // Standard Error: 4_951
            .saturating_add(Weight::from_parts(3_043_728, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_140_000 picoseconds.
        Weight::from_parts(3_301_568, 0)
            // Standard Error: 1_246
            .saturating_add(Weight::from_parts(1_581_512, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_207_000 picoseconds.
        Weight::from_parts(2_265_000, 0)
            // Standard Error: 8_823
            .saturating_add(Weight::from_parts(2_905_708, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_220_000 picoseconds.
        Weight::from_parts(2_292_000, 0)
            // Standard Error: 9_756
            .saturating_add(Weight::from_parts(5_234_386, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_879_000 picoseconds.
        Weight::from_parts(5_298_022, 0)
            // Standard Error: 1_687
            .saturating_add(Weight::from_parts(165_713, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_332_000 picoseconds.
        Weight::from_parts(4_910_182, 0)
            // Standard Error: 6_695
            .saturating_add(Weight::from_parts(2_568_472, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_568_472 -
            2_420_573, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_266_000 picoseconds.
        Weight::from_parts(4_026_517, 0)
            // Standard Error: 12_283
            .saturating_add(Weight::from_parts(2_420_573, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_651_000 picoseconds.
        Weight::from_parts(9_581_866, 0)
            // Standard Error: 20_124
            .saturating_add(Weight::from_parts(10_277_540, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_109_000 picoseconds.
        Weight::from_parts(352_883, 0)
            // Standard Error: 6_746
            .saturating_add(Weight::from_parts(1_300_164, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_326_000 picoseconds.
        Weight::from_parts(5_597_173, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_292_000 picoseconds.
        Weight::from_parts(1_862_512, 0)
            // Standard Error: 3_084
            .saturating_add(Weight::from_parts(252_652, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_194_000 picoseconds.
        Weight::from_parts(2_309_000, 0)
            // Standard Error: 5_178
            .saturating_add(Weight::from_parts(736_915, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_298_000 picoseconds.
        Weight::from_parts(2_386_000, 0)
            // Standard Error: 4_820
            .saturating_add(Weight::from_parts(702_638, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_297_000 picoseconds.
        Weight::from_parts(3_670_960, 0)
            // Standard Error: 9_754
            .saturating_add(Weight::from_parts(572_416, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_408_000 picoseconds.
        Weight::from_parts(6_454_000, 0)
            // Standard Error: 10_675
            .saturating_add(Weight::from_parts(1_242_112, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_938_000 picoseconds.
        Weight::from_parts(486_150, 0)
            // Standard Error: 12_514
            .saturating_add(Weight::from_parts(7_067_395, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_192_000 picoseconds.
        Weight::from_parts(2_312_000, 0)
            // Standard Error: 9_092
            .saturating_add(Weight::from_parts(3_329_844, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_214_000 picoseconds.
        Weight::from_parts(2_293_000, 0)
            // Standard Error: 7_337
            .saturating_add(Weight::from_parts(3_125_507, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_207_000 picoseconds.
        Weight::from_parts(2_284_000, 0)
            // Standard Error: 7_730
            .saturating_add(Weight::from_parts(3_108_232, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_326_000 picoseconds.
        Weight::from_parts(2_363_000, 0)
            // Standard Error: 4_681
            .saturating_add(Weight::from_parts(2_645_727, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_247_000 picoseconds.
        Weight::from_parts(2_309_000, 0)
            // Standard Error: 4_683
            .saturating_add(Weight::from_parts(487_883, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_160_000 picoseconds.
        Weight::from_parts(1_027_808, 0)
            // Standard Error: 3_691
            .saturating_add(Weight::from_parts(416_497, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_227_000 picoseconds.
        Weight::from_parts(2_304_000, 0)
            // Standard Error: 11_967
            .saturating_add(Weight::from_parts(1_897_186, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_192_000 picoseconds.
        Weight::from_parts(2_278_000, 0)
            // Standard Error: 9_816
            .saturating_add(Weight::from_parts(1_135_169, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_247_000 picoseconds.
        Weight::from_parts(1_169_125, 0)
            // Standard Error: 4_946
            .saturating_add(Weight::from_parts(398_916, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_219_000 picoseconds.
        Weight::from_parts(1_342_109, 0)
            // Standard Error: 3_827
            .saturating_add(Weight::from_parts(381_406, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_255_000 picoseconds.
        Weight::from_parts(220_461, 0)
            // Standard Error: 6_114
            .saturating_add(Weight::from_parts(554_425, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_264_000 picoseconds.
        Weight::from_parts(2_283_000, 0)
            // Standard Error: 4_020
            .saturating_add(Weight::from_parts(468_759, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_181_000 picoseconds.
        Weight::from_parts(338_492, 0)
            // Standard Error: 5_253
            .saturating_add(Weight::from_parts(494_019, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_240_000 picoseconds.
        Weight::from_parts(1_294_690, 0)
            // Standard Error: 3_753
            .saturating_add(Weight::from_parts(324_712, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_233_000 picoseconds.
        Weight::from_parts(2_444_584, 0)
            // Standard Error: 1_889
            .saturating_add(Weight::from_parts(165_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_157_000 picoseconds.
        Weight::from_parts(2_914_860, 0)
            // Standard Error: 1_514
            .saturating_add(Weight::from_parts(142_579, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_213_000 picoseconds.
        Weight::from_parts(2_289_000, 0)
            // Standard Error: 11_911
            .saturating_add(Weight::from_parts(1_826_162, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_259_000 picoseconds.
        Weight::from_parts(2_326_000, 0)
            // Standard Error: 9_286
            .saturating_add(Weight::from_parts(1_108_028, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_241_000 picoseconds.
        Weight::from_parts(2_284_000, 0)
            // Standard Error: 10_968
            .saturating_add(Weight::from_parts(1_805_516, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_269_000 picoseconds.
        Weight::from_parts(2_309_000, 0)
            // Standard Error: 7_672
            .saturating_add(Weight::from_parts(1_119_152, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_139_000 picoseconds.
        Weight::from_parts(2_309_000, 0)
            // Standard Error: 12_365
            .saturating_add(Weight::from_parts(1_894_307, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_287_000 picoseconds.
        Weight::from_parts(2_343_000, 0)
            // Standard Error: 8_362
            .saturating_add(Weight::from_parts(1_152_531, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_235_000 picoseconds.
        Weight::from_parts(2_286_000, 0)
            // Standard Error: 13_370
            .saturating_add(Weight::from_parts(1_873_731, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_282_000 picoseconds.
        Weight::from_parts(2_359_000, 0)
            // Standard Error: 8_277
            .saturating_add(Weight::from_parts(1_113_737, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_262_000 picoseconds.
        Weight::from_parts(2_307_000, 0)
            // Standard Error: 10_920
            .saturating_add(Weight::from_parts(1_832_750, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_239_000 picoseconds.
        Weight::from_parts(2_288_000, 0)
            // Standard Error: 8_108
            .saturating_add(Weight::from_parts(1_170_296, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_245_000 picoseconds.
        Weight::from_parts(2_346_000, 0)
            // Standard Error: 11_824
            .saturating_add(Weight::from_parts(1_881_649, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_229_000 picoseconds.
        Weight::from_parts(2_300_000, 0)
            // Standard Error: 10_640
            .saturating_add(Weight::from_parts(1_081_803, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_224_000 picoseconds.
        Weight::from_parts(2_263_000, 0)
            // Standard Error: 13_992
            .saturating_add(Weight::from_parts(1_858_415, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_236_000 picoseconds.
        Weight::from_parts(2_280_000, 0)
            // Standard Error: 6_791
            .saturating_add(Weight::from_parts(1_122_206, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_226_000 picoseconds.
        Weight::from_parts(2_274_000, 0)
            // Standard Error: 13_811
            .saturating_add(Weight::from_parts(1_868_457, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_264_000 picoseconds.
        Weight::from_parts(2_296_000, 0)
            // Standard Error: 10_387
            .saturating_add(Weight::from_parts(1_119_568, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_235_000 picoseconds.
        Weight::from_parts(2_306_000, 0)
            // Standard Error: 14_082
            .saturating_add(Weight::from_parts(1_900_634, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_203_000 picoseconds.
        Weight::from_parts(2_271_000, 0)
            // Standard Error: 10_364
            .saturating_add(Weight::from_parts(1_096_144, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_247_000 picoseconds.
        Weight::from_parts(2_267_000, 0)
            // Standard Error: 17_157
            .saturating_add(Weight::from_parts(1_841_087, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_244_000 picoseconds.
        Weight::from_parts(2_319_000, 0)
            // Standard Error: 10_797
            .saturating_add(Weight::from_parts(1_125_737, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_189_000 picoseconds.
        Weight::from_parts(2_243_000, 0)
            // Standard Error: 11_172
            .saturating_add(Weight::from_parts(1_291_053, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(2_301_000, 0)
            // Standard Error: 5_972
            .saturating_add(Weight::from_parts(601_333, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_216_000 picoseconds.
        Weight::from_parts(2_284_000, 0)
            // Standard Error: 12_255
            .saturating_add(Weight::from_parts(1_285_454, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_173_000 picoseconds.
        Weight::from_parts(2_244_000, 0)
            // Standard Error: 4_739
            .saturating_add(Weight::from_parts(599_935, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_180_000 picoseconds.
        Weight::from_parts(2_261_000, 0)
            // Standard Error: 17_781
            .saturating_add(Weight::from_parts(1_748_160, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_216_000 picoseconds.
        Weight::from_parts(2_246_000, 0)
            // Standard Error: 11_298
            .saturating_add(Weight::from_parts(1_170_366, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_173_000 picoseconds.
        Weight::from_parts(2_239_000, 0)
            // Standard Error: 12_852
            .saturating_add(Weight::from_parts(2_723_978, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_238_000 picoseconds.
        Weight::from_parts(2_322_000, 0)
            // Standard Error: 11_134
            .saturating_add(Weight::from_parts(2_293_399, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_275_000 picoseconds.
        Weight::from_parts(2_351_000, 0)
            // Standard Error: 13_315
            .saturating_add(Weight::from_parts(2_908_035, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_225_000 picoseconds.
        Weight::from_parts(2_310_000, 0)
            // Standard Error: 10_006
            .saturating_add(Weight::from_parts(2_469_406, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_215_000 picoseconds.
        Weight::from_parts(2_257_000, 0)
            // Standard Error: 14_832
            .saturating_add(Weight::from_parts(9_559_183, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_273_000 picoseconds.
        Weight::from_parts(2_331_000, 0)
            // Standard Error: 25_676
            .saturating_add(Weight::from_parts(7_444_515, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_293_000 picoseconds.
        Weight::from_parts(2_325_000, 0)
            // Standard Error: 11_846
            .saturating_add(Weight::from_parts(2_928_591, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_217_000 picoseconds.
        Weight::from_parts(2_280_000, 0)
            // Standard Error: 11_925
            .saturating_add(Weight::from_parts(2_422_363, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_246_000 picoseconds.
        Weight::from_parts(2_352_000, 0)
            // Standard Error: 8_653
            .saturating_add(Weight::from_parts(1_275_691, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_179_000 picoseconds.
        Weight::from_parts(2_256_000, 0)
            // Standard Error: 5_064
            .saturating_add(Weight::from_parts(635_259, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_210_000 picoseconds.
        Weight::from_parts(2_278_000, 0)
            // Standard Error: 8_124
            .saturating_add(Weight::from_parts(1_229_921, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_279_000 picoseconds.
        Weight::from_parts(2_359_000, 0)
            // Standard Error: 4_409
            .saturating_add(Weight::from_parts(601_235, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_253_000 picoseconds.
        Weight::from_parts(2_342_000, 0)
            // Standard Error: 10_099
            .saturating_add(Weight::from_parts(1_213_730, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_202_000 picoseconds.
        Weight::from_parts(2_286_000, 0)
            // Standard Error: 5_197
            .saturating_add(Weight::from_parts(621_245, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_221_000 picoseconds.
        Weight::from_parts(2_307_000, 0)
            // Standard Error: 8_363
            .saturating_add(Weight::from_parts(1_067_941, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_184_000 picoseconds.
        Weight::from_parts(100_329, 0)
            // Standard Error: 5_293
            .saturating_add(Weight::from_parts(610_090, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_202_000 picoseconds.
        Weight::from_parts(2_248_000, 0)
            // Standard Error: 9_088
            .saturating_add(Weight::from_parts(995_484, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_174_000 picoseconds.
        Weight::from_parts(2_281_000, 0)
            // Standard Error: 3_905
            .saturating_add(Weight::from_parts(510_399, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_181_000 picoseconds.
        Weight::from_parts(2_295_000, 0)
            // Standard Error: 8_379
            .saturating_add(Weight::from_parts(1_008_913, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_227_000 picoseconds.
        Weight::from_parts(2_305_000, 0)
            // Standard Error: 4_351
            .saturating_add(Weight::from_parts(529_257, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_224_000 picoseconds.
        Weight::from_parts(2_286_000, 0)
            // Standard Error: 7_825
            .saturating_add(Weight::from_parts(1_002_818, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_240_000 picoseconds.
        Weight::from_parts(2_283_000, 0)
            // Standard Error: 3_954
            .saturating_add(Weight::from_parts(513_324, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_209_000 picoseconds.
        Weight::from_parts(2_293_000, 0)
            // Standard Error: 8_429
            .saturating_add(Weight::from_parts(1_018_896, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_345_000 picoseconds.
        Weight::from_parts(2_415_000, 0)
            // Standard Error: 4_473
            .saturating_add(Weight::from_parts(533_512, 0).saturating_mul(r.into()))
    }
}
