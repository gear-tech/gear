// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-14, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-20-193.us-west-1.compute.internal`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_error(r: u32, ) -> Weight;
    fn gr_status_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_127 nanoseconds.
        Weight::from_ref_time(1_187_000)
            // Standard Error: 504
            .saturating_add(Weight::from_ref_time(205_180).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `145 + c * (1024 ±0)`
        //  Estimated: `2617 + c * (1024 ±0)`
        // Minimum execution time: 3_382 nanoseconds.
        Weight::from_parts(3_482_000, 2617)
            // Standard Error: 987
            .saturating_add(Weight::from_ref_time(734_320).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 56_661 nanoseconds.
        Weight::from_ref_time(69_330_630)
            // Standard Error: 8_007
            .saturating_add(Weight::from_ref_time(2_810_092).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `918`
        //  Estimated: `17301`
        // Minimum execution time: 58_679 nanoseconds.
        Weight::from_parts(61_047_000, 17301)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3290`
        // Minimum execution time: 62_660 nanoseconds.
        Weight::from_parts(63_770_000, 3290)
            // Standard Error: 35_620
            .saturating_add(Weight::from_ref_time(55_021_971).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `648`
        //  Estimated: `18066`
        // Minimum execution time: 53_254 nanoseconds.
        Weight::from_parts(34_260_955, 18066)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(2_386).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `126`
        //  Estimated: `14142`
        // Minimum execution time: 9_465_268 nanoseconds.
        Weight::from_parts(9_549_057_000, 14142)
            // Standard Error: 458_257
            .saturating_add(Weight::from_ref_time(31_375_667).saturating_mul(c.into()))
            // Standard Error: 27
            .saturating_add(Weight::from_ref_time(863).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `423`
        //  Estimated: `15053`
        // Minimum execution time: 56_165 nanoseconds.
        Weight::from_parts(57_522_000, 15053)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(1_245).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1161`
        //  Estimated: `31831`
        // Minimum execution time: 83_580 nanoseconds.
        Weight::from_parts(18_997_582, 31831)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(1_324).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `819`
        //  Estimated: `42666`
        // Minimum execution time: 320_815 nanoseconds.
        Weight::from_parts(335_940_777, 42666)
            .saturating_add(T::DbWeight::get().reads(24_u64))
            .saturating_add(T::DbWeight::get().writes(21_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `819`
        //  Estimated: `42561`
        // Minimum execution time: 341_306 nanoseconds.
        Weight::from_parts(353_139_398, 42561)
            // Standard Error: 1_079
            .saturating_add(Weight::from_ref_time(776).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(24_u64))
            .saturating_add(T::DbWeight::get().writes(21_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `213 + c * (1075 ±0)`
        //  Estimated: `2913 + c * (2150 ±0)`
        // Minimum execution time: 48_682 nanoseconds.
        Weight::from_parts(49_036_000, 2913)
            // Standard Error: 36_444
            .saturating_add(Weight::from_ref_time(54_145_734).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_proof_size(2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_613 nanoseconds.
        Weight::from_ref_time(98_336_142)
            // Standard Error: 74_567
            .saturating_add(Weight::from_ref_time(155_489_225).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 251_294 nanoseconds.
        Weight::from_ref_time(247_740_005)
            // Standard Error: 112_026
            .saturating_add(Weight::from_ref_time(156_443_692).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 94_075 nanoseconds.
        Weight::from_parts(96_787_000, 2616)
            // Standard Error: 1_018_945
            .saturating_add(Weight::from_ref_time(421_752_219).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1619 + r * (410 ±5)`
        // Minimum execution time: 93_756 nanoseconds.
        Weight::from_parts(127_672_853, 1619)
            // Standard Error: 148_411
            .saturating_add(Weight::from_ref_time(366_678_037).saturating_mul(r.into()))
            .saturating_add(Weight::from_proof_size(410).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_694 nanoseconds.
        Weight::from_parts(134_729_767, 2616)
            // Standard Error: 126_066
            .saturating_add(Weight::from_ref_time(244_919_047).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_273 nanoseconds.
        Weight::from_parts(119_941_723, 2616)
            // Standard Error: 118_491
            .saturating_add(Weight::from_ref_time(241_757_929).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 91_562 nanoseconds.
        Weight::from_parts(118_606_451, 2616)
            // Standard Error: 114_940
            .saturating_add(Weight::from_ref_time(241_053_784).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_382 nanoseconds.
        Weight::from_parts(120_263_779, 2616)
            // Standard Error: 103_591
            .saturating_add(Weight::from_ref_time(239_283_304).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 93_650 nanoseconds.
        Weight::from_parts(126_216_181, 2616)
            // Standard Error: 114_222
            .saturating_add(Weight::from_ref_time(238_337_281).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 93_638 nanoseconds.
        Weight::from_parts(122_543_232, 2616)
            // Standard Error: 109_462
            .saturating_add(Weight::from_ref_time(238_588_899).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 93_258 nanoseconds.
        Weight::from_parts(125_140_966, 2616)
            // Standard Error: 108_485
            .saturating_add(Weight::from_ref_time(238_480_313).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 93_541 nanoseconds.
        Weight::from_parts(119_078_571, 2616)
            // Standard Error: 115_990
            .saturating_add(Weight::from_ref_time(241_386_372).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 93_214 nanoseconds.
        Weight::from_parts(123_757_335, 2616)
            // Standard Error: 120_383
            .saturating_add(Weight::from_ref_time(238_858_543).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 94_222 nanoseconds.
        Weight::from_parts(141_265_140, 2616)
            // Standard Error: 159_564
            .saturating_add(Weight::from_ref_time(336_214_930).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `633741`
        // Minimum execution time: 5_107_530 nanoseconds.
        Weight::from_parts(2_338_543_299, 633741)
            // Standard Error: 74_162
            .saturating_add(Weight::from_ref_time(17_683_388).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(256_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_895 nanoseconds.
        Weight::from_parts(129_562_765, 2616)
            // Standard Error: 110_831
            .saturating_add(Weight::from_ref_time(238_236_171).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_849 nanoseconds.
        Weight::from_parts(123_835_119, 2616)
            // Standard Error: 111_495
            .saturating_add(Weight::from_ref_time(238_118_454).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 91_721 nanoseconds.
        Weight::from_parts(131_433_882, 2616)
            // Standard Error: 135_860
            .saturating_add(Weight::from_ref_time(307_208_249).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 93_221 nanoseconds.
        Weight::from_parts(117_868_449, 2616)
            // Standard Error: 102_414
            .saturating_add(Weight::from_ref_time(248_020_168).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 93_702 nanoseconds.
        Weight::from_parts(122_907_881, 2616)
            // Standard Error: 183_579
            .saturating_add(Weight::from_ref_time(608_978_282).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1539 + n * (155 ±0)`
        // Minimum execution time: 708_972 nanoseconds.
        Weight::from_parts(722_150_000, 1539)
            // Standard Error: 57_096
            .saturating_add(Weight::from_ref_time(35_368_150).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 103_818 nanoseconds.
        Weight::from_parts(146_843_225, 2616)
            // Standard Error: 221_183
            .saturating_add(Weight::from_ref_time(450_524_275).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1539 + n * (155 ±0)`
        // Minimum execution time: 576_045 nanoseconds.
        Weight::from_parts(577_890_000, 1539)
            // Standard Error: 70_947
            .saturating_add(Weight::from_ref_time(26_259_499).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1458 + r * (1004 ±5)`
        // Minimum execution time: 93_403 nanoseconds.
        Weight::from_parts(133_722_967, 1458)
            // Standard Error: 254_648
            .saturating_add(Weight::from_ref_time(488_871_129).saturating_mul(r.into()))
            .saturating_add(Weight::from_proof_size(1004).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2378 + n * (155 ±0)`
        // Minimum execution time: 617_294 nanoseconds.
        Weight::from_parts(626_100_000, 2378)
            // Standard Error: 70_080
            .saturating_add(Weight::from_ref_time(26_123_099).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `1308 + r * (1308 ±0)`
        // Minimum execution time: 91_922 nanoseconds.
        Weight::from_parts(97_756_289, 1308)
            // Standard Error: 365_896
            .saturating_add(Weight::from_ref_time(39_792_010).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
            .saturating_add(Weight::from_proof_size(1308).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1539 + n * (155 ±0)`
        // Minimum execution time: 131_882 nanoseconds.
        Weight::from_parts(120_297_693, 1539)
            // Standard Error: 724
            .saturating_add(Weight::from_ref_time(588_750).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 93_437 nanoseconds.
        Weight::from_parts(141_232_508, 2616)
            // Standard Error: 180_280
            .saturating_add(Weight::from_ref_time(336_302_633).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1449 + n * (155 ±0)`
        // Minimum execution time: 129_624 nanoseconds.
        Weight::from_parts(133_010_000, 1449)
            // Standard Error: 1_603
            .saturating_add(Weight::from_ref_time(761_242).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `1308 + r * (1308 ±0)`
        // Minimum execution time: 92_173 nanoseconds.
        Weight::from_parts(97_762_489, 1308)
            // Standard Error: 328_275
            .saturating_add(Weight::from_ref_time(53_985_710).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
            .saturating_add(Weight::from_proof_size(1308).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1539 + n * (155 ±0)`
        // Minimum execution time: 147_167 nanoseconds.
        Weight::from_parts(129_079_809, 1539)
            // Standard Error: 1_836
            .saturating_add(Weight::from_ref_time(610_908).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 93_242 nanoseconds.
        Weight::from_parts(124_417_019, 2616)
            // Standard Error: 110_640
            .saturating_add(Weight::from_ref_time(239_806_275).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5091`
        // Minimum execution time: 93_507 nanoseconds.
        Weight::from_parts(136_378_842, 5091)
            // Standard Error: 132_349
            .saturating_add(Weight::from_ref_time(253_928_604).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_773 nanoseconds.
        Weight::from_parts(134_108_827, 2616)
            // Standard Error: 119_034
            .saturating_add(Weight::from_ref_time(254_675_402).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 127_260 nanoseconds.
        Weight::from_parts(39_112_009, 2616)
            // Standard Error: 1_094
            .saturating_add(Weight::from_ref_time(753_640).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 94_949 nanoseconds.
        Weight::from_parts(127_866_593, 2616)
            // Standard Error: 188_662
            .saturating_add(Weight::from_ref_time(520_348_483).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 630_945 nanoseconds.
        Weight::from_parts(819_384_447, 2616)
            // Standard Error: 15_264
            .saturating_add(Weight::from_ref_time(33_448_853).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 93_096 nanoseconds.
        Weight::from_parts(125_023_429, 2616)
            // Standard Error: 132_744
            .saturating_add(Weight::from_ref_time(240_938_448).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `633741`
        // Minimum execution time: 3_074_915 nanoseconds.
        Weight::from_parts(412_811_445, 633741)
            // Standard Error: 74_239
            .saturating_add(Weight::from_ref_time(33_172_588).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(256_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 94_993 nanoseconds.
        Weight::from_parts(139_733_870, 2616)
            // Standard Error: 147_270
            .saturating_add(Weight::from_ref_time(577_602_873).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 94_526 nanoseconds.
        Weight::from_parts(123_571_519, 2616)
            // Standard Error: 108_964
            .saturating_add(Weight::from_ref_time(241_692_920).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `1308 + r * (1308 ±0)`
        // Minimum execution time: 91_761 nanoseconds.
        Weight::from_parts(97_210_189, 1308)
            // Standard Error: 342_727
            .saturating_add(Weight::from_ref_time(35_835_310).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
            .saturating_add(Weight::from_proof_size(1308).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_210 nanoseconds.
        Weight::from_ref_time(97_711_618)
            // Standard Error: 352_536
            .saturating_add(Weight::from_ref_time(19_273_381).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_307 nanoseconds.
        Weight::from_ref_time(97_288_293)
            // Standard Error: 343_653
            .saturating_add(Weight::from_ref_time(20_794_206).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_569 nanoseconds.
        Weight::from_ref_time(97_595_575)
            // Standard Error: 330_684
            .saturating_add(Weight::from_ref_time(20_673_324).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_115 nanoseconds.
        Weight::from_ref_time(98_330_430)
            // Standard Error: 330_773
            .saturating_add(Weight::from_ref_time(21_006_769).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1619 + r * (410 ±5)`
        // Minimum execution time: 94_498 nanoseconds.
        Weight::from_parts(124_288_430, 1619)
            // Standard Error: 148_394
            .saturating_add(Weight::from_ref_time(358_210_049).saturating_mul(r.into()))
            .saturating_add(Weight::from_proof_size(410).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 107_036 nanoseconds.
        Weight::from_parts(129_057_494, 2616)
            // Standard Error: 232_683
            .saturating_add(Weight::from_ref_time(532_655_004).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `4495 + p * (155 ±0) + s * (154 ±0)`
        // Minimum execution time: 56_000_922 nanoseconds.
        Weight::from_parts(56_210_207_000, 4495)
            // Standard Error: 368_826
            .saturating_add(Weight::from_ref_time(10_033_947).saturating_mul(p.into()))
            // Standard Error: 368_808
            .saturating_add(Weight::from_ref_time(157_990_042).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(p.into()))
            .saturating_add(Weight::from_proof_size(154).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 91_854 nanoseconds.
        Weight::from_parts(95_743_299, 141)
            // Standard Error: 11_065
            .saturating_add(Weight::from_ref_time(42_571_995).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 92_038 nanoseconds.
        Weight::from_parts(93_487_000, 141)
            // Standard Error: 68_593
            .saturating_add(Weight::from_ref_time(67_254_875).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5068941`
        // Minimum execution time: 21_834_868 nanoseconds.
        Weight::from_parts(21_785_086_913, 5068941)
            // Standard Error: 69_775
            .saturating_add(Weight::from_ref_time(71_447_204).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1136 + p * (66182 ±0)`
        //  Estimated: `967 + p * (105783 ±0)`
        // Minimum execution time: 90_410 nanoseconds.
        Weight::from_parts(94_336_000, 967)
            // Standard Error: 41_840
            .saturating_add(Weight::from_ref_time(91_101_467).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((16_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(105783).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `506 + p * (9883 ±2)`
        // Minimum execution time: 109_759 nanoseconds.
        Weight::from_parts(104_893_452, 506)
            // Standard Error: 45_552
            .saturating_add(Weight::from_ref_time(44_353_336).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `506 + p * (9883 ±2)`
        // Minimum execution time: 685_790 nanoseconds.
        Weight::from_parts(730_582_431, 506)
            // Standard Error: 297_398
            .saturating_add(Weight::from_ref_time(70_291_695).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `633741`
        // Minimum execution time: 3_576_435 nanoseconds.
        Weight::from_parts(3_623_975_026, 633741)
            // Standard Error: 279_431
            .saturating_add(Weight::from_ref_time(75_025_797).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(256_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_046_992 nanoseconds.
        Weight::from_ref_time(3_504_336_639)
            // Standard Error: 64_817
            .saturating_add(Weight::from_ref_time(9_574_626).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_461_132 nanoseconds.
        Weight::from_ref_time(10_998_835_841)
            // Standard Error: 180_069
            .saturating_add(Weight::from_ref_time(17_689_937).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_677 nanoseconds.
        Weight::from_ref_time(2_747_000)
            // Standard Error: 7_511
            .saturating_add(Weight::from_ref_time(3_926_369).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_664 nanoseconds.
        Weight::from_ref_time(903_983)
            // Standard Error: 10_872
            .saturating_add(Weight::from_ref_time(3_261_193).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_766 nanoseconds.
        Weight::from_ref_time(3_499_009)
            // Standard Error: 1_201
            .saturating_add(Weight::from_ref_time(1_611_806).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_667 nanoseconds.
        Weight::from_ref_time(2_788_000)
            // Standard Error: 8_788
            .saturating_add(Weight::from_ref_time(3_040_276).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_662 nanoseconds.
        Weight::from_ref_time(9_631_797)
            // Standard Error: 21_715
            .saturating_add(Weight::from_ref_time(4_862_786).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_315 nanoseconds.
        Weight::from_ref_time(6_332_091)
            // Standard Error: 1_071
            .saturating_add(Weight::from_ref_time(182_222).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_868 nanoseconds.
        Weight::from_ref_time(5_631_160)
            // Standard Error: 8_880
            .saturating_add(Weight::from_ref_time(2_647_039).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(2_647_039 -
            2_436_134).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_766 nanoseconds.
        Weight::from_ref_time(6_000_906)
            // Standard Error: 12_998
            .saturating_add(Weight::from_ref_time(2_436_134).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_156 nanoseconds.
        Weight::from_ref_time(23_975_953)
            // Standard Error: 31_586
            .saturating_add(Weight::from_ref_time(9_891_168).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_982 nanoseconds.
        Weight::from_ref_time(8_097_211)
            // Standard Error: 5_521
            .saturating_add(Weight::from_ref_time(1_208_501).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_327 nanoseconds.
        Weight::from_ref_time(5_670_304)
            // Standard Error: 13
            .saturating_add(Weight::from_ref_time(7).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_684 nanoseconds.
        Weight::from_ref_time(2_530_741)
            // Standard Error: 2_872
            .saturating_add(Weight::from_ref_time(283_121).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_744 nanoseconds.
        Weight::from_ref_time(2_896_000)
            // Standard Error: 6_180
            .saturating_add(Weight::from_ref_time(871_437).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_711 nanoseconds.
        Weight::from_ref_time(2_822_000)
            // Standard Error: 6_563
            .saturating_add(Weight::from_ref_time(902_856).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_508 nanoseconds.
        Weight::from_ref_time(7_102_388)
            // Standard Error: 8_473
            .saturating_add(Weight::from_ref_time(978_861).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_435 nanoseconds.
        Weight::from_ref_time(4_003_210)
            // Standard Error: 11_374
            .saturating_add(Weight::from_ref_time(1_844_462).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_641 nanoseconds.
        Weight::from_ref_time(588_056)
            // Standard Error: 11_155
            .saturating_add(Weight::from_ref_time(7_241_555).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_719 nanoseconds.
        Weight::from_ref_time(67_231)
            // Standard Error: 10_837
            .saturating_add(Weight::from_ref_time(3_566_797).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_683 nanoseconds.
        Weight::from_ref_time(2_820_000)
            // Standard Error: 5_085
            .saturating_add(Weight::from_ref_time(3_240_316).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_736 nanoseconds.
        Weight::from_ref_time(2_851_000)
            // Standard Error: 5_577
            .saturating_add(Weight::from_ref_time(695_884).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_747 nanoseconds.
        Weight::from_ref_time(2_799_000)
            // Standard Error: 9_372
            .saturating_add(Weight::from_ref_time(2_002_973).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_762 nanoseconds.
        Weight::from_ref_time(1_889_064)
            // Standard Error: 3_444
            .saturating_add(Weight::from_ref_time(408_480).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_762 nanoseconds.
        Weight::from_ref_time(1_889_064)
            // Standard Error: 3_444
            .saturating_add(Weight::from_ref_time(408_480).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_737 nanoseconds.
        Weight::from_ref_time(2_970_564)
            // Standard Error: 2_838
            .saturating_add(Weight::from_ref_time(231_677).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_725 nanoseconds.
        Weight::from_ref_time(2_813_000)
            // Standard Error: 9_475
            .saturating_add(Weight::from_ref_time(2_013_142).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_703 nanoseconds.
        Weight::from_ref_time(2_746_000)
            // Standard Error: 8_298
            .saturating_add(Weight::from_ref_time(1_996_246).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_750 nanoseconds.
        Weight::from_ref_time(2_828_000)
            // Standard Error: 8_692
            .saturating_add(Weight::from_ref_time(2_008_409).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_637 nanoseconds.
        Weight::from_ref_time(2_736_000)
            // Standard Error: 9_234
            .saturating_add(Weight::from_ref_time(2_011_697).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_693 nanoseconds.
        Weight::from_ref_time(2_780_000)
            // Standard Error: 9_429
            .saturating_add(Weight::from_ref_time(2_006_657).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_732 nanoseconds.
        Weight::from_ref_time(2_838_000)
            // Standard Error: 9_073
            .saturating_add(Weight::from_ref_time(2_026_713).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_710 nanoseconds.
        Weight::from_ref_time(2_829_000)
            // Standard Error: 8_880
            .saturating_add(Weight::from_ref_time(2_008_327).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_654 nanoseconds.
        Weight::from_ref_time(2_830_000)
            // Standard Error: 9_128
            .saturating_add(Weight::from_ref_time(2_028_658).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_731 nanoseconds.
        Weight::from_ref_time(2_871_000)
            // Standard Error: 8_785
            .saturating_add(Weight::from_ref_time(2_013_485).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_636 nanoseconds.
        Weight::from_ref_time(2_814_000)
            // Standard Error: 9_088
            .saturating_add(Weight::from_ref_time(2_007_318).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_659 nanoseconds.
        Weight::from_ref_time(2_760_000)
            // Standard Error: 9_009
            .saturating_add(Weight::from_ref_time(1_495_607).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_753 nanoseconds.
        Weight::from_ref_time(2_888_000)
            // Standard Error: 9_696
            .saturating_add(Weight::from_ref_time(1_489_325).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_697 nanoseconds.
        Weight::from_ref_time(2_818_000)
            // Standard Error: 8_585
            .saturating_add(Weight::from_ref_time(1_959_712).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_703 nanoseconds.
        Weight::from_ref_time(12_910_650)
            // Standard Error: 25_317
            .saturating_add(Weight::from_ref_time(1_980_177).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_739 nanoseconds.
        Weight::from_ref_time(12_198_821)
            // Standard Error: 25_184
            .saturating_add(Weight::from_ref_time(2_152_466).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_646 nanoseconds.
        Weight::from_ref_time(13_523_843)
            // Standard Error: 43_647
            .saturating_add(Weight::from_ref_time(8_571_151).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_745 nanoseconds.
        Weight::from_ref_time(14_580_741)
            // Standard Error: 28_133
            .saturating_add(Weight::from_ref_time(2_221_041).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_711 nanoseconds.
        Weight::from_ref_time(2_853_000)
            // Standard Error: 9_684
            .saturating_add(Weight::from_ref_time(1_510_333).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_657 nanoseconds.
        Weight::from_ref_time(2_755_000)
            // Standard Error: 8_878
            .saturating_add(Weight::from_ref_time(1_497_154).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_653 nanoseconds.
        Weight::from_ref_time(2_771_000)
            // Standard Error: 8_050
            .saturating_add(Weight::from_ref_time(1_504_083).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_768 nanoseconds.
        Weight::from_ref_time(2_917_000)
            // Standard Error: 9_382
            .saturating_add(Weight::from_ref_time(1_276_439).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_700 nanoseconds.
        Weight::from_ref_time(2_797_000)
            // Standard Error: 8_133
            .saturating_add(Weight::from_ref_time(1_261_848).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_701 nanoseconds.
        Weight::from_ref_time(2_807_000)
            // Standard Error: 8_880
            .saturating_add(Weight::from_ref_time(1_264_980).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_655 nanoseconds.
        Weight::from_ref_time(2_787_000)
            // Standard Error: 8_528
            .saturating_add(Weight::from_ref_time(1_279_533).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_678 nanoseconds.
        Weight::from_ref_time(2_761_000)
            // Standard Error: 8_485
            .saturating_add(Weight::from_ref_time(1_292_461).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_127 nanoseconds.
        Weight::from_ref_time(1_187_000)
            // Standard Error: 504
            .saturating_add(Weight::from_ref_time(205_180).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `145 + c * (1024 ±0)`
        //  Estimated: `2617 + c * (1024 ±0)`
        // Minimum execution time: 3_382 nanoseconds.
        Weight::from_parts(3_482_000, 2617)
            // Standard Error: 987
            .saturating_add(Weight::from_ref_time(734_320).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 56_661 nanoseconds.
        Weight::from_ref_time(69_330_630)
            // Standard Error: 8_007
            .saturating_add(Weight::from_ref_time(2_810_092).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `918`
        //  Estimated: `17301`
        // Minimum execution time: 58_679 nanoseconds.
        Weight::from_parts(61_047_000, 17301)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3290`
        // Minimum execution time: 62_660 nanoseconds.
        Weight::from_parts(63_770_000, 3290)
            // Standard Error: 35_620
            .saturating_add(Weight::from_ref_time(55_021_971).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `648`
        //  Estimated: `18066`
        // Minimum execution time: 53_254 nanoseconds.
        Weight::from_parts(34_260_955, 18066)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(2_386).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `126`
        //  Estimated: `14142`
        // Minimum execution time: 9_465_268 nanoseconds.
        Weight::from_parts(9_549_057_000, 14142)
            // Standard Error: 458_257
            .saturating_add(Weight::from_ref_time(31_375_667).saturating_mul(c.into()))
            // Standard Error: 27
            .saturating_add(Weight::from_ref_time(863).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `423`
        //  Estimated: `15053`
        // Minimum execution time: 56_165 nanoseconds.
        Weight::from_parts(57_522_000, 15053)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(1_245).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1161`
        //  Estimated: `31831`
        // Minimum execution time: 83_580 nanoseconds.
        Weight::from_parts(18_997_582, 31831)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(1_324).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `819`
        //  Estimated: `42666`
        // Minimum execution time: 320_815 nanoseconds.
        Weight::from_parts(335_940_777, 42666)
            .saturating_add(RocksDbWeight::get().reads(24_u64))
            .saturating_add(RocksDbWeight::get().writes(21_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `819`
        //  Estimated: `42561`
        // Minimum execution time: 341_306 nanoseconds.
        Weight::from_parts(353_139_398, 42561)
            // Standard Error: 1_079
            .saturating_add(Weight::from_ref_time(776).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(24_u64))
            .saturating_add(RocksDbWeight::get().writes(21_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `213 + c * (1075 ±0)`
        //  Estimated: `2913 + c * (2150 ±0)`
        // Minimum execution time: 48_682 nanoseconds.
        Weight::from_parts(49_036_000, 2913)
            // Standard Error: 36_444
            .saturating_add(Weight::from_ref_time(54_145_734).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_proof_size(2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_613 nanoseconds.
        Weight::from_ref_time(98_336_142)
            // Standard Error: 74_567
            .saturating_add(Weight::from_ref_time(155_489_225).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 251_294 nanoseconds.
        Weight::from_ref_time(247_740_005)
            // Standard Error: 112_026
            .saturating_add(Weight::from_ref_time(156_443_692).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 94_075 nanoseconds.
        Weight::from_parts(96_787_000, 2616)
            // Standard Error: 1_018_945
            .saturating_add(Weight::from_ref_time(421_752_219).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1619 + r * (410 ±5)`
        // Minimum execution time: 93_756 nanoseconds.
        Weight::from_parts(127_672_853, 1619)
            // Standard Error: 148_411
            .saturating_add(Weight::from_ref_time(366_678_037).saturating_mul(r.into()))
            .saturating_add(Weight::from_proof_size(410).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_694 nanoseconds.
        Weight::from_parts(134_729_767, 2616)
            // Standard Error: 126_066
            .saturating_add(Weight::from_ref_time(244_919_047).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_273 nanoseconds.
        Weight::from_parts(119_941_723, 2616)
            // Standard Error: 118_491
            .saturating_add(Weight::from_ref_time(241_757_929).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 91_562 nanoseconds.
        Weight::from_parts(118_606_451, 2616)
            // Standard Error: 114_940
            .saturating_add(Weight::from_ref_time(241_053_784).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_382 nanoseconds.
        Weight::from_parts(120_263_779, 2616)
            // Standard Error: 103_591
            .saturating_add(Weight::from_ref_time(239_283_304).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 93_650 nanoseconds.
        Weight::from_parts(126_216_181, 2616)
            // Standard Error: 114_222
            .saturating_add(Weight::from_ref_time(238_337_281).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 93_638 nanoseconds.
        Weight::from_parts(122_543_232, 2616)
            // Standard Error: 109_462
            .saturating_add(Weight::from_ref_time(238_588_899).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 93_258 nanoseconds.
        Weight::from_parts(125_140_966, 2616)
            // Standard Error: 108_485
            .saturating_add(Weight::from_ref_time(238_480_313).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 93_541 nanoseconds.
        Weight::from_parts(119_078_571, 2616)
            // Standard Error: 115_990
            .saturating_add(Weight::from_ref_time(241_386_372).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 93_214 nanoseconds.
        Weight::from_parts(123_757_335, 2616)
            // Standard Error: 120_383
            .saturating_add(Weight::from_ref_time(238_858_543).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 94_222 nanoseconds.
        Weight::from_parts(141_265_140, 2616)
            // Standard Error: 159_564
            .saturating_add(Weight::from_ref_time(336_214_930).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `633741`
        // Minimum execution time: 5_107_530 nanoseconds.
        Weight::from_parts(2_338_543_299, 633741)
            // Standard Error: 74_162
            .saturating_add(Weight::from_ref_time(17_683_388).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(256_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_895 nanoseconds.
        Weight::from_parts(129_562_765, 2616)
            // Standard Error: 110_831
            .saturating_add(Weight::from_ref_time(238_236_171).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_849 nanoseconds.
        Weight::from_parts(123_835_119, 2616)
            // Standard Error: 111_495
            .saturating_add(Weight::from_ref_time(238_118_454).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 91_721 nanoseconds.
        Weight::from_parts(131_433_882, 2616)
            // Standard Error: 135_860
            .saturating_add(Weight::from_ref_time(307_208_249).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 93_221 nanoseconds.
        Weight::from_parts(117_868_449, 2616)
            // Standard Error: 102_414
            .saturating_add(Weight::from_ref_time(248_020_168).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 93_702 nanoseconds.
        Weight::from_parts(122_907_881, 2616)
            // Standard Error: 183_579
            .saturating_add(Weight::from_ref_time(608_978_282).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1539 + n * (155 ±0)`
        // Minimum execution time: 708_972 nanoseconds.
        Weight::from_parts(722_150_000, 1539)
            // Standard Error: 57_096
            .saturating_add(Weight::from_ref_time(35_368_150).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 103_818 nanoseconds.
        Weight::from_parts(146_843_225, 2616)
            // Standard Error: 221_183
            .saturating_add(Weight::from_ref_time(450_524_275).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1539 + n * (155 ±0)`
        // Minimum execution time: 576_045 nanoseconds.
        Weight::from_parts(577_890_000, 1539)
            // Standard Error: 70_947
            .saturating_add(Weight::from_ref_time(26_259_499).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1458 + r * (1004 ±5)`
        // Minimum execution time: 93_403 nanoseconds.
        Weight::from_parts(133_722_967, 1458)
            // Standard Error: 254_648
            .saturating_add(Weight::from_ref_time(488_871_129).saturating_mul(r.into()))
            .saturating_add(Weight::from_proof_size(1004).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2378 + n * (155 ±0)`
        // Minimum execution time: 617_294 nanoseconds.
        Weight::from_parts(626_100_000, 2378)
            // Standard Error: 70_080
            .saturating_add(Weight::from_ref_time(26_123_099).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `1308 + r * (1308 ±0)`
        // Minimum execution time: 91_922 nanoseconds.
        Weight::from_parts(97_756_289, 1308)
            // Standard Error: 365_896
            .saturating_add(Weight::from_ref_time(39_792_010).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
            .saturating_add(Weight::from_proof_size(1308).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1539 + n * (155 ±0)`
        // Minimum execution time: 131_882 nanoseconds.
        Weight::from_parts(120_297_693, 1539)
            // Standard Error: 724
            .saturating_add(Weight::from_ref_time(588_750).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 93_437 nanoseconds.
        Weight::from_parts(141_232_508, 2616)
            // Standard Error: 180_280
            .saturating_add(Weight::from_ref_time(336_302_633).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1449 + n * (155 ±0)`
        // Minimum execution time: 129_624 nanoseconds.
        Weight::from_parts(133_010_000, 1449)
            // Standard Error: 1_603
            .saturating_add(Weight::from_ref_time(761_242).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `1308 + r * (1308 ±0)`
        // Minimum execution time: 92_173 nanoseconds.
        Weight::from_parts(97_762_489, 1308)
            // Standard Error: 328_275
            .saturating_add(Weight::from_ref_time(53_985_710).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
            .saturating_add(Weight::from_proof_size(1308).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1539 + n * (155 ±0)`
        // Minimum execution time: 147_167 nanoseconds.
        Weight::from_parts(129_079_809, 1539)
            // Standard Error: 1_836
            .saturating_add(Weight::from_ref_time(610_908).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 93_242 nanoseconds.
        Weight::from_parts(124_417_019, 2616)
            // Standard Error: 110_640
            .saturating_add(Weight::from_ref_time(239_806_275).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5091`
        // Minimum execution time: 93_507 nanoseconds.
        Weight::from_parts(136_378_842, 5091)
            // Standard Error: 132_349
            .saturating_add(Weight::from_ref_time(253_928_604).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_773 nanoseconds.
        Weight::from_parts(134_108_827, 2616)
            // Standard Error: 119_034
            .saturating_add(Weight::from_ref_time(254_675_402).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 127_260 nanoseconds.
        Weight::from_parts(39_112_009, 2616)
            // Standard Error: 1_094
            .saturating_add(Weight::from_ref_time(753_640).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 94_949 nanoseconds.
        Weight::from_parts(127_866_593, 2616)
            // Standard Error: 188_662
            .saturating_add(Weight::from_ref_time(520_348_483).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 630_945 nanoseconds.
        Weight::from_parts(819_384_447, 2616)
            // Standard Error: 15_264
            .saturating_add(Weight::from_ref_time(33_448_853).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 93_096 nanoseconds.
        Weight::from_parts(125_023_429, 2616)
            // Standard Error: 132_744
            .saturating_add(Weight::from_ref_time(240_938_448).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `633741`
        // Minimum execution time: 3_074_915 nanoseconds.
        Weight::from_parts(412_811_445, 633741)
            // Standard Error: 74_239
            .saturating_add(Weight::from_ref_time(33_172_588).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(256_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 94_993 nanoseconds.
        Weight::from_parts(139_733_870, 2616)
            // Standard Error: 147_270
            .saturating_add(Weight::from_ref_time(577_602_873).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 94_526 nanoseconds.
        Weight::from_parts(123_571_519, 2616)
            // Standard Error: 108_964
            .saturating_add(Weight::from_ref_time(241_692_920).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `1308 + r * (1308 ±0)`
        // Minimum execution time: 91_761 nanoseconds.
        Weight::from_parts(97_210_189, 1308)
            // Standard Error: 342_727
            .saturating_add(Weight::from_ref_time(35_835_310).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
            .saturating_add(Weight::from_proof_size(1308).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_210 nanoseconds.
        Weight::from_ref_time(97_711_618)
            // Standard Error: 352_536
            .saturating_add(Weight::from_ref_time(19_273_381).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_307 nanoseconds.
        Weight::from_ref_time(97_288_293)
            // Standard Error: 343_653
            .saturating_add(Weight::from_ref_time(20_794_206).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_569 nanoseconds.
        Weight::from_ref_time(97_595_575)
            // Standard Error: 330_684
            .saturating_add(Weight::from_ref_time(20_673_324).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_115 nanoseconds.
        Weight::from_ref_time(98_330_430)
            // Standard Error: 330_773
            .saturating_add(Weight::from_ref_time(21_006_769).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1619 + r * (410 ±5)`
        // Minimum execution time: 94_498 nanoseconds.
        Weight::from_parts(124_288_430, 1619)
            // Standard Error: 148_394
            .saturating_add(Weight::from_ref_time(358_210_049).saturating_mul(r.into()))
            .saturating_add(Weight::from_proof_size(410).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 107_036 nanoseconds.
        Weight::from_parts(129_057_494, 2616)
            // Standard Error: 232_683
            .saturating_add(Weight::from_ref_time(532_655_004).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `4495 + p * (155 ±0) + s * (154 ±0)`
        // Minimum execution time: 56_000_922 nanoseconds.
        Weight::from_parts(56_210_207_000, 4495)
            // Standard Error: 368_826
            .saturating_add(Weight::from_ref_time(10_033_947).saturating_mul(p.into()))
            // Standard Error: 368_808
            .saturating_add(Weight::from_ref_time(157_990_042).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(p.into()))
            .saturating_add(Weight::from_proof_size(154).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 91_854 nanoseconds.
        Weight::from_parts(95_743_299, 141)
            // Standard Error: 11_065
            .saturating_add(Weight::from_ref_time(42_571_995).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 92_038 nanoseconds.
        Weight::from_parts(93_487_000, 141)
            // Standard Error: 68_593
            .saturating_add(Weight::from_ref_time(67_254_875).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5068941`
        // Minimum execution time: 21_834_868 nanoseconds.
        Weight::from_parts(21_785_086_913, 5068941)
            // Standard Error: 69_775
            .saturating_add(Weight::from_ref_time(71_447_204).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1136 + p * (66182 ±0)`
        //  Estimated: `967 + p * (105783 ±0)`
        // Minimum execution time: 90_410 nanoseconds.
        Weight::from_parts(94_336_000, 967)
            // Standard Error: 41_840
            .saturating_add(Weight::from_ref_time(91_101_467).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((16_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(105783).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `506 + p * (9883 ±2)`
        // Minimum execution time: 109_759 nanoseconds.
        Weight::from_parts(104_893_452, 506)
            // Standard Error: 45_552
            .saturating_add(Weight::from_ref_time(44_353_336).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `506 + p * (9883 ±2)`
        // Minimum execution time: 685_790 nanoseconds.
        Weight::from_parts(730_582_431, 506)
            // Standard Error: 297_398
            .saturating_add(Weight::from_ref_time(70_291_695).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `633741`
        // Minimum execution time: 3_576_435 nanoseconds.
        Weight::from_parts(3_623_975_026, 633741)
            // Standard Error: 279_431
            .saturating_add(Weight::from_ref_time(75_025_797).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(256_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_046_992 nanoseconds.
        Weight::from_ref_time(3_504_336_639)
            // Standard Error: 64_817
            .saturating_add(Weight::from_ref_time(9_574_626).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_461_132 nanoseconds.
        Weight::from_ref_time(10_998_835_841)
            // Standard Error: 180_069
            .saturating_add(Weight::from_ref_time(17_689_937).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_677 nanoseconds.
        Weight::from_ref_time(2_747_000)
            // Standard Error: 7_511
            .saturating_add(Weight::from_ref_time(3_926_369).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_664 nanoseconds.
        Weight::from_ref_time(903_983)
            // Standard Error: 10_872
            .saturating_add(Weight::from_ref_time(3_261_193).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_766 nanoseconds.
        Weight::from_ref_time(3_499_009)
            // Standard Error: 1_201
            .saturating_add(Weight::from_ref_time(1_611_806).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_667 nanoseconds.
        Weight::from_ref_time(2_788_000)
            // Standard Error: 8_788
            .saturating_add(Weight::from_ref_time(3_040_276).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_662 nanoseconds.
        Weight::from_ref_time(9_631_797)
            // Standard Error: 21_715
            .saturating_add(Weight::from_ref_time(4_862_786).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_315 nanoseconds.
        Weight::from_ref_time(6_332_091)
            // Standard Error: 1_071
            .saturating_add(Weight::from_ref_time(182_222).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_868 nanoseconds.
        Weight::from_ref_time(5_631_160)
            // Standard Error: 8_880
            .saturating_add(Weight::from_ref_time(2_647_039).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(2_647_039 -
            2_436_134).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_766 nanoseconds.
        Weight::from_ref_time(6_000_906)
            // Standard Error: 12_998
            .saturating_add(Weight::from_ref_time(2_436_134).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_156 nanoseconds.
        Weight::from_ref_time(23_975_953)
            // Standard Error: 31_586
            .saturating_add(Weight::from_ref_time(9_891_168).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_982 nanoseconds.
        Weight::from_ref_time(8_097_211)
            // Standard Error: 5_521
            .saturating_add(Weight::from_ref_time(1_208_501).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_327 nanoseconds.
        Weight::from_ref_time(5_670_304)
            // Standard Error: 13
            .saturating_add(Weight::from_ref_time(7).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_684 nanoseconds.
        Weight::from_ref_time(2_530_741)
            // Standard Error: 2_872
            .saturating_add(Weight::from_ref_time(283_121).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_744 nanoseconds.
        Weight::from_ref_time(2_896_000)
            // Standard Error: 6_180
            .saturating_add(Weight::from_ref_time(871_437).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_711 nanoseconds.
        Weight::from_ref_time(2_822_000)
            // Standard Error: 6_563
            .saturating_add(Weight::from_ref_time(902_856).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_508 nanoseconds.
        Weight::from_ref_time(7_102_388)
            // Standard Error: 8_473
            .saturating_add(Weight::from_ref_time(978_861).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_435 nanoseconds.
        Weight::from_ref_time(4_003_210)
            // Standard Error: 11_374
            .saturating_add(Weight::from_ref_time(1_844_462).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_641 nanoseconds.
        Weight::from_ref_time(588_056)
            // Standard Error: 11_155
            .saturating_add(Weight::from_ref_time(7_241_555).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_719 nanoseconds.
        Weight::from_ref_time(67_231)
            // Standard Error: 10_837
            .saturating_add(Weight::from_ref_time(3_566_797).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_683 nanoseconds.
        Weight::from_ref_time(2_820_000)
            // Standard Error: 5_085
            .saturating_add(Weight::from_ref_time(3_240_316).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_736 nanoseconds.
        Weight::from_ref_time(2_851_000)
            // Standard Error: 5_577
            .saturating_add(Weight::from_ref_time(695_884).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_747 nanoseconds.
        Weight::from_ref_time(2_799_000)
            // Standard Error: 9_372
            .saturating_add(Weight::from_ref_time(2_002_973).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_762 nanoseconds.
        Weight::from_ref_time(1_889_064)
            // Standard Error: 3_444
            .saturating_add(Weight::from_ref_time(408_480).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_762 nanoseconds.
        Weight::from_ref_time(1_889_064)
            // Standard Error: 3_444
            .saturating_add(Weight::from_ref_time(408_480).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_737 nanoseconds.
        Weight::from_ref_time(2_970_564)
            // Standard Error: 2_838
            .saturating_add(Weight::from_ref_time(231_677).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_725 nanoseconds.
        Weight::from_ref_time(2_813_000)
            // Standard Error: 9_475
            .saturating_add(Weight::from_ref_time(2_013_142).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_703 nanoseconds.
        Weight::from_ref_time(2_746_000)
            // Standard Error: 8_298
            .saturating_add(Weight::from_ref_time(1_996_246).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_750 nanoseconds.
        Weight::from_ref_time(2_828_000)
            // Standard Error: 8_692
            .saturating_add(Weight::from_ref_time(2_008_409).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_637 nanoseconds.
        Weight::from_ref_time(2_736_000)
            // Standard Error: 9_234
            .saturating_add(Weight::from_ref_time(2_011_697).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_693 nanoseconds.
        Weight::from_ref_time(2_780_000)
            // Standard Error: 9_429
            .saturating_add(Weight::from_ref_time(2_006_657).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_732 nanoseconds.
        Weight::from_ref_time(2_838_000)
            // Standard Error: 9_073
            .saturating_add(Weight::from_ref_time(2_026_713).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_710 nanoseconds.
        Weight::from_ref_time(2_829_000)
            // Standard Error: 8_880
            .saturating_add(Weight::from_ref_time(2_008_327).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_654 nanoseconds.
        Weight::from_ref_time(2_830_000)
            // Standard Error: 9_128
            .saturating_add(Weight::from_ref_time(2_028_658).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_731 nanoseconds.
        Weight::from_ref_time(2_871_000)
            // Standard Error: 8_785
            .saturating_add(Weight::from_ref_time(2_013_485).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_636 nanoseconds.
        Weight::from_ref_time(2_814_000)
            // Standard Error: 9_088
            .saturating_add(Weight::from_ref_time(2_007_318).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_659 nanoseconds.
        Weight::from_ref_time(2_760_000)
            // Standard Error: 9_009
            .saturating_add(Weight::from_ref_time(1_495_607).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_753 nanoseconds.
        Weight::from_ref_time(2_888_000)
            // Standard Error: 9_696
            .saturating_add(Weight::from_ref_time(1_489_325).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_697 nanoseconds.
        Weight::from_ref_time(2_818_000)
            // Standard Error: 8_585
            .saturating_add(Weight::from_ref_time(1_959_712).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_703 nanoseconds.
        Weight::from_ref_time(12_910_650)
            // Standard Error: 25_317
            .saturating_add(Weight::from_ref_time(1_980_177).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_739 nanoseconds.
        Weight::from_ref_time(12_198_821)
            // Standard Error: 25_184
            .saturating_add(Weight::from_ref_time(2_152_466).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_646 nanoseconds.
        Weight::from_ref_time(13_523_843)
            // Standard Error: 43_647
            .saturating_add(Weight::from_ref_time(8_571_151).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_745 nanoseconds.
        Weight::from_ref_time(14_580_741)
            // Standard Error: 28_133
            .saturating_add(Weight::from_ref_time(2_221_041).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_711 nanoseconds.
        Weight::from_ref_time(2_853_000)
            // Standard Error: 9_684
            .saturating_add(Weight::from_ref_time(1_510_333).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_657 nanoseconds.
        Weight::from_ref_time(2_755_000)
            // Standard Error: 8_878
            .saturating_add(Weight::from_ref_time(1_497_154).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_653 nanoseconds.
        Weight::from_ref_time(2_771_000)
            // Standard Error: 8_050
            .saturating_add(Weight::from_ref_time(1_504_083).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_768 nanoseconds.
        Weight::from_ref_time(2_917_000)
            // Standard Error: 9_382
            .saturating_add(Weight::from_ref_time(1_276_439).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_700 nanoseconds.
        Weight::from_ref_time(2_797_000)
            // Standard Error: 8_133
            .saturating_add(Weight::from_ref_time(1_261_848).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_701 nanoseconds.
        Weight::from_ref_time(2_807_000)
            // Standard Error: 8_880
            .saturating_add(Weight::from_ref_time(1_264_980).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_655 nanoseconds.
        Weight::from_ref_time(2_787_000)
            // Standard Error: 8_528
            .saturating_add(Weight::from_ref_time(1_279_533).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_678 nanoseconds.
        Weight::from_ref_time(2_761_000)
            // Standard Error: 8_485
            .saturating_add(Weight::from_ref_time(1_292_461).saturating_mul(r.into()))
    }
}
