// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-12, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-20-193.us-west-1.compute.internal`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_error(r: u32, ) -> Weight;
    fn gr_status_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_read_access(p: u32, ) -> Weight;
    fn lazy_pages_write_access(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_245 nanoseconds.
		Weight::from_ref_time(1_302_000)
			// Standard Error: 493
			.saturating_add(Weight::from_ref_time(206_948).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `74 + c * (1024 ±0)`
		//  Estimated: `2546 + c * (1024 ±0)`
		// Minimum execution time: 3_004 nanoseconds.
		Weight::from_parts(3_077_000, 2546)
			// Standard Error: 1_028
			.saturating_add(Weight::from_ref_time(729_180).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_proof_size(1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 57_098 nanoseconds.
		Weight::from_ref_time(88_823_630)
			// Standard Error: 4_382
			.saturating_add(Weight::from_ref_time(2_148_427).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `847`
		//  Estimated: `17017`
		// Minimum execution time: 58_248 nanoseconds.
		Weight::from_parts(61_285_000, 17017)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10`
		//  Estimated: `3010`
		// Minimum execution time: 63_349 nanoseconds.
		Weight::from_parts(34_073_674, 3010)
			// Standard Error: 59_026
			.saturating_add(Weight::from_ref_time(52_499_507).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `577`
		//  Estimated: `17498`
		// Minimum execution time: 54_803 nanoseconds.
		Weight::from_parts(73_160_615, 17498)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(2_344).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `55`
		//  Estimated: `13432`
		// Minimum execution time: 9_225_509 nanoseconds.
		Weight::from_parts(9_318_464_000, 13432)
			// Standard Error: 452_329
			.saturating_add(Weight::from_ref_time(29_110_026).saturating_mul(c.into()))
			// Standard Error: 26
			.saturating_add(Weight::from_ref_time(848).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_message(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `422`
		//  Estimated: `15047`
		// Minimum execution time: 58_339 nanoseconds.
		Weight::from_parts(46_284_564, 15047)
			// Standard Error: 1
			.saturating_add(Weight::from_ref_time(1_181).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_reply(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1090`
		//  Estimated: `31263`
		// Minimum execution time: 82_459 nanoseconds.
		Weight::from_parts(78_078_389, 31263)
			// Standard Error: 1
			.saturating_add(Weight::from_ref_time(1_188).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `545`
		//  Estimated: `37736`
		// Minimum execution time: 203_303 nanoseconds.
		Weight::from_parts(212_003_287, 37736)
			.saturating_add(T::DbWeight::get().reads(22_u64))
			.saturating_add(T::DbWeight::get().writes(21_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `545`
		//  Estimated: `37586`
		// Minimum execution time: 212_790 nanoseconds.
		Weight::from_parts(223_314_444, 37586)
			.saturating_add(T::DbWeight::get().reads(22_u64))
			.saturating_add(T::DbWeight::get().writes(21_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `213 + c * (1075 ±0)`
		//  Estimated: `2913 + c * (2150 ±0)`
		// Minimum execution time: 48_737 nanoseconds.
		Weight::from_parts(48_946_000, 2913)
			// Standard Error: 32_078
			.saturating_add(Weight::from_ref_time(52_157_081).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_proof_size(2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 93_362 nanoseconds.
		Weight::from_ref_time(95_998_692)
			// Standard Error: 72_938
			.saturating_add(Weight::from_ref_time(150_601_583).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 245_758 nanoseconds.
		Weight::from_ref_time(240_389_962)
			// Standard Error: 95_250
			.saturating_add(Weight::from_ref_time(149_273_760).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 93_459 nanoseconds.
		Weight::from_parts(96_186_000, 10041)
			// Standard Error: 1_021_495
			.saturating_add(Weight::from_ref_time(446_061_432).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `6052 + r * (1642 ±23)`
		// Minimum execution time: 94_771 nanoseconds.
		Weight::from_parts(142_538_030, 6052)
			// Standard Error: 168_929
			.saturating_add(Weight::from_ref_time(386_175_376).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(1642).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_221 nanoseconds.
		Weight::from_parts(138_456_715, 10041)
			// Standard Error: 160_687
			.saturating_add(Weight::from_ref_time(267_465_463).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_101 nanoseconds.
		Weight::from_parts(108_426_667, 10041)
			// Standard Error: 111_359
			.saturating_add(Weight::from_ref_time(264_647_076).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 91_818 nanoseconds.
		Weight::from_parts(112_776_157, 10041)
			// Standard Error: 91_367
			.saturating_add(Weight::from_ref_time(264_642_000).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_711 nanoseconds.
		Weight::from_parts(110_866_644, 10041)
			// Standard Error: 108_712
			.saturating_add(Weight::from_ref_time(264_836_393).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_259 nanoseconds.
		Weight::from_parts(111_700_237, 10041)
			// Standard Error: 104_503
			.saturating_add(Weight::from_ref_time(264_466_089).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 91_291 nanoseconds.
		Weight::from_parts(112_978_856, 10041)
			// Standard Error: 92_228
			.saturating_add(Weight::from_ref_time(264_285_928).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 93_462 nanoseconds.
		Weight::from_parts(111_747_936, 10041)
			// Standard Error: 90_493
			.saturating_add(Weight::from_ref_time(263_570_153).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 90_638 nanoseconds.
		Weight::from_parts(112_517_220, 10041)
			// Standard Error: 106_497
			.saturating_add(Weight::from_ref_time(263_960_786).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_333 nanoseconds.
		Weight::from_parts(111_712_503, 10041)
			// Standard Error: 95_121
			.saturating_add(Weight::from_ref_time(263_823_663).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 93_558 nanoseconds.
		Weight::from_parts(148_929_514, 10041)
			// Standard Error: 180_516
			.saturating_add(Weight::from_ref_time(373_404_038).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5456 + n * (619 ±0)`
		// Minimum execution time: 487_486 nanoseconds.
		Weight::from_parts(493_160_000, 5456)
			// Standard Error: 89_293
			.saturating_add(Weight::from_ref_time(13_059_074).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 91_601 nanoseconds.
		Weight::from_parts(102_925_244, 10041)
			// Standard Error: 129_211
			.saturating_add(Weight::from_ref_time(265_437_395).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 91_480 nanoseconds.
		Weight::from_parts(108_521_993, 10041)
			// Standard Error: 85_936
			.saturating_add(Weight::from_ref_time(264_224_293).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 91_180 nanoseconds.
		Weight::from_parts(130_532_268, 10041)
			// Standard Error: 168_330
			.saturating_add(Weight::from_ref_time(328_472_858).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 93_502 nanoseconds.
		Weight::from_parts(113_074_816, 10041)
			// Standard Error: 100_578
			.saturating_add(Weight::from_ref_time(272_722_738).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_760 nanoseconds.
		Weight::from_parts(159_573_617, 10041)
			// Standard Error: 219_355
			.saturating_add(Weight::from_ref_time(655_125_828).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5456 + n * (619 ±0)`
		// Minimum execution time: 761_677 nanoseconds.
		Weight::from_parts(766_626_000, 5456)
			// Standard Error: 80_926
			.saturating_add(Weight::from_ref_time(32_039_282).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 102_215 nanoseconds.
		Weight::from_parts(153_745_728, 10041)
			// Standard Error: 221_994
			.saturating_add(Weight::from_ref_time(474_417_835).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5456 + n * (619 ±0)`
		// Minimum execution time: 595_657 nanoseconds.
		Weight::from_parts(598_151_000, 5456)
			// Standard Error: 75_148
			.saturating_add(Weight::from_ref_time(21_795_898).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5407 + r * (4014 ±22)`
		// Minimum execution time: 93_620 nanoseconds.
		Weight::from_parts(151_829_209, 5407)
			// Standard Error: 253_271
			.saturating_add(Weight::from_ref_time(500_871_227).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(4014).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `8600 + n * (620 ±0)`
		// Minimum execution time: 629_435 nanoseconds.
		Weight::from_parts(636_454_000, 8600)
			// Standard Error: 69_864
			.saturating_add(Weight::from_ref_time(21_893_431).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(Weight::from_proof_size(620).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + r * (141 ±0)`
		//  Estimated: `5020 + r * (5021 ±0)`
		// Minimum execution time: 90_711 nanoseconds.
		Weight::from_parts(95_782_948, 5020)
			// Standard Error: 367_568
			.saturating_add(Weight::from_ref_time(39_505_551).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(5021).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 93_277 nanoseconds.
		Weight::from_parts(136_785_270, 10041)
			// Standard Error: 173_070
			.saturating_add(Weight::from_ref_time(368_483_888).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5374 + n * (619 ±0)`
		// Minimum execution time: 129_442 nanoseconds.
		Weight::from_parts(136_709_436, 5374)
			// Standard Error: 811
			.saturating_add(Weight::from_ref_time(818_667).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + r * (141 ±0)`
		//  Estimated: `5020 + r * (5021 ±0)`
		// Minimum execution time: 92_527 nanoseconds.
		Weight::from_parts(97_840_022, 5020)
			// Standard Error: 383_632
			.saturating_add(Weight::from_ref_time(51_177_977).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(5021).saturating_mul(r.into()))
    }
	/// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5374 + n * (619 ±0)`
		// Minimum execution time: 129_442 nanoseconds.
		Weight::from_parts(136_709_436, 5374)
			// Standard Error: 811
			.saturating_add(Weight::from_ref_time(818_667).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_756 nanoseconds.
		Weight::from_parts(118_430_114, 10041)
			// Standard Error: 112_403
			.saturating_add(Weight::from_ref_time(265_243_155).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `19941`
		// Minimum execution time: 92_199 nanoseconds.
		Weight::from_parts(133_650_247, 19941)
			// Standard Error: 144_943
			.saturating_add(Weight::from_ref_time(271_817_579).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 93_745 nanoseconds.
		Weight::from_parts(140_816_930, 10041)
			// Standard Error: 157_246
			.saturating_add(Weight::from_ref_time(277_345_646).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 126_723 nanoseconds.
		Weight::from_parts(128_015_000, 10041)
			// Standard Error: 1_323
			.saturating_add(Weight::from_ref_time(671_555).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 94_465 nanoseconds.
		Weight::from_parts(154_145_058, 10041)
			// Standard Error: 182_318
			.saturating_add(Weight::from_ref_time(571_899_285).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 686_908 nanoseconds.
		Weight::from_parts(268_256_479, 10041)
			// Standard Error: 40_395
			.saturating_add(Weight::from_ref_time(33_770_958).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `2616`
		// Minimum execution time: 93_489 nanoseconds.
		Weight::from_parts(116_537_710, 2616)
			// Standard Error: 126_483
			.saturating_add(Weight::from_ref_time(249_824_322).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `1885 + n * (618 ±0)`
		// Minimum execution time: 328_222 nanoseconds.
		Weight::from_parts(331_573_000, 1885)
			// Standard Error: 67_545
			.saturating_add(Weight::from_ref_time(28_374_657).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_proof_size(618).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 95_041 nanoseconds.
		Weight::from_parts(151_049_839, 10041)
			// Standard Error: 216_449
			.saturating_add(Weight::from_ref_time(630_682_006).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_577 nanoseconds.
		Weight::from_parts(111_651_528, 10041)
			// Standard Error: 120_964
			.saturating_add(Weight::from_ref_time(265_282_251).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + r * (141 ±0)`
		//  Estimated: `1308 + r * (1308 ±0)`
		// Minimum execution time: 91_530 nanoseconds.
		Weight::from_parts(96_157_910, 1308)
			// Standard Error: 381_911
			.saturating_add(Weight::from_ref_time(34_751_689).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(1308).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 90_238 nanoseconds.
		Weight::from_ref_time(95_230_120)
			// Standard Error: 343_071
			.saturating_add(Weight::from_ref_time(22_587_579).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 90_604 nanoseconds.
		Weight::from_ref_time(95_333_806)
			// Standard Error: 312_476
			.saturating_add(Weight::from_ref_time(20_586_593).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 91_126 nanoseconds.
		Weight::from_ref_time(96_155_573)
			// Standard Error: 330_314
			.saturating_add(Weight::from_ref_time(20_608_926).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 90_941 nanoseconds.
		Weight::from_ref_time(96_786_412)
			// Standard Error: 341_564
			.saturating_add(Weight::from_ref_time(22_337_087).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `6052 + r * (1642 ±23)`
		// Minimum execution time: 94_853 nanoseconds.
		Weight::from_parts(141_171_620, 6052)
			// Standard Error: 152_952
			.saturating_add(Weight::from_ref_time(389_666_412).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(1642).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 104_880 nanoseconds.
		Weight::from_parts(147_045_479, 10041)
			// Standard Error: 241_714
			.saturating_add(Weight::from_ref_time(550_260_579).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `p` is `[0, 1024]`.
    /// The range of component `s` is `[1, 1024]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5388 + p * (619 ±0) + s * (617 ±0)`
		// Minimum execution time: 24_722_421 nanoseconds.
		Weight::from_parts(25_107_963_000, 5388)
			// Standard Error: 305_738
			.saturating_add(Weight::from_ref_time(8_456_943).saturating_mul(p.into()))
			// Standard Error: 305_708
			.saturating_add(Weight::from_ref_time(155_348_073).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(p.into()))
			.saturating_add(Weight::from_proof_size(617).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_read_access(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (39600 ±0)`
        // Minimum execution time: 95_159 nanoseconds.
        Weight::from_parts(104_398_142, 141)
            // Standard Error: 19_377
            .saturating_add(Weight::from_ref_time(54_532_007).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((16_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(39600).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_write_access(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `20275341`
        // Minimum execution time: 27_862_124 nanoseconds.
        Weight::from_parts(28_175_112_268, 20275341)
            // Standard Error: 108_591
            .saturating_add(Weight::from_ref_time(73_552_506).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(8192_u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_935_170 nanoseconds.
        Weight::from_ref_time(11_430_592_698)
            // Standard Error: 530_978
            .saturating_add(Weight::from_ref_time(9_185_585).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_082_462 nanoseconds.
        Weight::from_ref_time(11_531_133_132)
            // Standard Error: 524_842
            .saturating_add(Weight::from_ref_time(8_717_349).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_711 nanoseconds.
        Weight::from_ref_time(215_411)
            // Standard Error: 15_436
            .saturating_add(Weight::from_ref_time(4_199_350).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_741 nanoseconds.
        Weight::from_ref_time(1_356_742)
            // Standard Error: 16_499
            .saturating_add(Weight::from_ref_time(4_395_951).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_756 nanoseconds.
        Weight::from_ref_time(7_808_506)
            // Standard Error: 6_185
            .saturating_add(Weight::from_ref_time(1_681_482).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_654 nanoseconds.
        Weight::from_ref_time(3_849_393)
            // Standard Error: 7_441
            .saturating_add(Weight::from_ref_time(2_707_131).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_783 nanoseconds.
        Weight::from_ref_time(11_289_121)
            // Standard Error: 19_819
            .saturating_add(Weight::from_ref_time(6_170_695).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_566 nanoseconds.
        Weight::from_ref_time(5_508_216)
            // Standard Error: 1_833
            .saturating_add(Weight::from_ref_time(215_049).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_850 nanoseconds.
        Weight::from_ref_time(5_828_714)
            // Standard Error: 10_448
            .saturating_add(Weight::from_ref_time(2_734_130).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(2_734_130 -
            2_581_720).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_774 nanoseconds.
        Weight::from_ref_time(5_382_814)
            // Standard Error: 12_644
            .saturating_add(Weight::from_ref_time(2_581_720).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_223 nanoseconds.
        Weight::from_ref_time(14_961_366)
            // Standard Error: 66_630
            .saturating_add(Weight::from_ref_time(10_882_522).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 13_168 nanoseconds.
        Weight::from_ref_time(15_330_910)
            // Standard Error: 9_319
            .saturating_add(Weight::from_ref_time(1_207_441).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_306 nanoseconds.
        Weight::from_ref_time(5_724_653)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_723 nanoseconds.
        Weight::from_ref_time(1_869_106)
            // Standard Error: 5_081
            .saturating_add(Weight::from_ref_time(372_327).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_770 nanoseconds.
        Weight::from_ref_time(2_896_000)
            // Standard Error: 8_364
            .saturating_add(Weight::from_ref_time(1_136_268).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_798 nanoseconds.
        Weight::from_ref_time(2_889_000)
            // Standard Error: 7_978
            .saturating_add(Weight::from_ref_time(1_183_723).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_531 nanoseconds.
        Weight::from_ref_time(5_261_386)
            // Standard Error: 12_956
            .saturating_add(Weight::from_ref_time(1_288_485).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_506 nanoseconds.
        Weight::from_ref_time(3_496_286)
            // Standard Error: 14_462
            .saturating_add(Weight::from_ref_time(2_213_457).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_781 nanoseconds.
        Weight::from_ref_time(1_635_002)
            // Standard Error: 10_681
            .saturating_add(Weight::from_ref_time(7_188_840).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_677 nanoseconds.
        Weight::from_ref_time(2_326_993)
            // Standard Error: 18_464
            .saturating_add(Weight::from_ref_time(3_782_909).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_845 nanoseconds.
        Weight::from_ref_time(778_768)
            // Standard Error: 14_887
            .saturating_add(Weight::from_ref_time(3_601_052).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_754 nanoseconds.
        Weight::from_ref_time(2_842_000)
            // Standard Error: 6_489
            .saturating_add(Weight::from_ref_time(887_881).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_807 nanoseconds.
        Weight::from_ref_time(2_918_000)
            // Standard Error: 13_205
            .saturating_add(Weight::from_ref_time(2_436_376).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_773 nanoseconds.
        Weight::from_ref_time(422_870)
            // Standard Error: 6_543
            .saturating_add(Weight::from_ref_time(608_019).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_699 nanoseconds.
        Weight::from_ref_time(1_811_318)
            // Standard Error: 3_902
            .saturating_add(Weight::from_ref_time(368_305).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_759 nanoseconds.
        Weight::from_ref_time(2_611_938)
            // Standard Error: 4_398
            .saturating_add(Weight::from_ref_time(349_350).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_735 nanoseconds.
        Weight::from_ref_time(2_833_000)
            // Standard Error: 10_847
            .saturating_add(Weight::from_ref_time(2_372_206).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_706 nanoseconds.
        Weight::from_ref_time(2_776_000)
            // Standard Error: 10_634
            .saturating_add(Weight::from_ref_time(2_381_079).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_692 nanoseconds.
        Weight::from_ref_time(2_775_000)
            // Standard Error: 10_248
            .saturating_add(Weight::from_ref_time(2_339_022).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_686 nanoseconds.
        Weight::from_ref_time(2_798_000)
            // Standard Error: 9_849
            .saturating_add(Weight::from_ref_time(2_343_493).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_757 nanoseconds.
        Weight::from_ref_time(2_837_000)
            // Standard Error: 10_212
            .saturating_add(Weight::from_ref_time(2_336_789).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_708 nanoseconds.
        Weight::from_ref_time(2_796_000)
            // Standard Error: 10_742
            .saturating_add(Weight::from_ref_time(2_378_200).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_725 nanoseconds.
        Weight::from_ref_time(2_830_000)
            // Standard Error: 9_603
            .saturating_add(Weight::from_ref_time(2_336_904).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_673 nanoseconds.
        Weight::from_ref_time(2_803_000)
            // Standard Error: 9_827
            .saturating_add(Weight::from_ref_time(2_355_232).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_667 nanoseconds.
        Weight::from_ref_time(2_767_000)
            // Standard Error: 10_957
            .saturating_add(Weight::from_ref_time(2_394_567).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_625 nanoseconds.
        Weight::from_ref_time(2_747_000)
            // Standard Error: 9_800
            .saturating_add(Weight::from_ref_time(2_314_834).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_685 nanoseconds.
        Weight::from_ref_time(2_829_000)
            // Standard Error: 9_738
            .saturating_add(Weight::from_ref_time(1_807_320).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_680 nanoseconds.
        Weight::from_ref_time(2_778_000)
            // Standard Error: 9_263
            .saturating_add(Weight::from_ref_time(1_833_657).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_632 nanoseconds.
        Weight::from_ref_time(2_725_000)
            // Standard Error: 9_551
            .saturating_add(Weight::from_ref_time(2_231_366).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_719 nanoseconds.
        Weight::from_ref_time(14_124_334)
            // Standard Error: 21_684
            .saturating_add(Weight::from_ref_time(1_988_009).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_871 nanoseconds.
        Weight::from_ref_time(12_457_359)
            // Standard Error: 21_621
            .saturating_add(Weight::from_ref_time(2_285_568).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_795 nanoseconds.
        Weight::from_ref_time(2_906_000)
            // Standard Error: 28_649
            .saturating_add(Weight::from_ref_time(10_002_971).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_747 nanoseconds.
        Weight::from_ref_time(14_647_403)
            // Standard Error: 22_647
            .saturating_add(Weight::from_ref_time(2_284_896).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_709 nanoseconds.
        Weight::from_ref_time(2_817_000)
            // Standard Error: 10_151
            .saturating_add(Weight::from_ref_time(1_760_939).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_728 nanoseconds.
        Weight::from_ref_time(2_878_000)
            // Standard Error: 10_098
            .saturating_add(Weight::from_ref_time(1_750_445).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_662 nanoseconds.
        Weight::from_ref_time(2_729_000)
            // Standard Error: 8_803
            .saturating_add(Weight::from_ref_time(1_760_571).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_687 nanoseconds.
        Weight::from_ref_time(2_826_000)
            // Standard Error: 9_133
            .saturating_add(Weight::from_ref_time(1_552_748).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_707 nanoseconds.
        Weight::from_ref_time(2_783_000)
            // Standard Error: 9_797
            .saturating_add(Weight::from_ref_time(1_541_911).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_683 nanoseconds.
        Weight::from_ref_time(2_761_000)
            // Standard Error: 9_127
            .saturating_add(Weight::from_ref_time(1_538_159).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_694 nanoseconds.
        Weight::from_ref_time(2_837_000)
            // Standard Error: 9_183
            .saturating_add(Weight::from_ref_time(1_554_373).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_695 nanoseconds.
        Weight::from_ref_time(2_803_000)
            // Standard Error: 9_039
            .saturating_add(Weight::from_ref_time(1_571_100).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_245 nanoseconds.
		Weight::from_ref_time(1_302_000)
			// Standard Error: 493
			.saturating_add(Weight::from_ref_time(206_948).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `74 + c * (1024 ±0)`
		//  Estimated: `2546 + c * (1024 ±0)`
		// Minimum execution time: 3_004 nanoseconds.
		Weight::from_parts(3_077_000, 2546)
			// Standard Error: 1_028
			.saturating_add(Weight::from_ref_time(729_180).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_proof_size(1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 57_098 nanoseconds.
		Weight::from_ref_time(88_823_630)
			// Standard Error: 4_382
			.saturating_add(Weight::from_ref_time(2_148_427).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `847`
		//  Estimated: `17017`
		// Minimum execution time: 58_248 nanoseconds.
		Weight::from_parts(61_285_000, 17017)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10`
		//  Estimated: `3010`
		// Minimum execution time: 63_349 nanoseconds.
		Weight::from_parts(34_073_674, 3010)
			// Standard Error: 59_026
			.saturating_add(Weight::from_ref_time(52_499_507).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `577`
		//  Estimated: `17498`
		// Minimum execution time: 54_803 nanoseconds.
		Weight::from_parts(73_160_615, 17498)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(2_344).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `55`
		//  Estimated: `13432`
		// Minimum execution time: 9_225_509 nanoseconds.
		Weight::from_parts(9_318_464_000, 13432)
			// Standard Error: 452_329
			.saturating_add(Weight::from_ref_time(29_110_026).saturating_mul(c.into()))
			// Standard Error: 26
			.saturating_add(Weight::from_ref_time(848).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_message(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `422`
		//  Estimated: `15047`
		// Minimum execution time: 58_339 nanoseconds.
		Weight::from_parts(46_284_564, 15047)
			// Standard Error: 1
			.saturating_add(Weight::from_ref_time(1_181).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_reply(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1090`
		//  Estimated: `31263`
		// Minimum execution time: 82_459 nanoseconds.
		Weight::from_parts(78_078_389, 31263)
			// Standard Error: 1
			.saturating_add(Weight::from_ref_time(1_188).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `545`
		//  Estimated: `37736`
		// Minimum execution time: 203_303 nanoseconds.
		Weight::from_parts(212_003_287, 37736)
			.saturating_add(RocksDbWeight::get().reads(22_u64))
			.saturating_add(RocksDbWeight::get().writes(21_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `545`
		//  Estimated: `37586`
		// Minimum execution time: 212_790 nanoseconds.
		Weight::from_parts(223_314_444, 37586)
			.saturating_add(RocksDbWeight::get().reads(22_u64))
			.saturating_add(RocksDbWeight::get().writes(21_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `213 + c * (1075 ±0)`
		//  Estimated: `2913 + c * (2150 ±0)`
		// Minimum execution time: 48_737 nanoseconds.
		Weight::from_parts(48_946_000, 2913)
			// Standard Error: 32_078
			.saturating_add(Weight::from_ref_time(52_157_081).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_proof_size(2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 93_362 nanoseconds.
		Weight::from_ref_time(95_998_692)
			// Standard Error: 72_938
			.saturating_add(Weight::from_ref_time(150_601_583).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 245_758 nanoseconds.
		Weight::from_ref_time(240_389_962)
			// Standard Error: 95_250
			.saturating_add(Weight::from_ref_time(149_273_760).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 93_459 nanoseconds.
		Weight::from_parts(96_186_000, 10041)
			// Standard Error: 1_021_495
			.saturating_add(Weight::from_ref_time(446_061_432).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `6052 + r * (1642 ±23)`
		// Minimum execution time: 94_771 nanoseconds.
		Weight::from_parts(142_538_030, 6052)
			// Standard Error: 168_929
			.saturating_add(Weight::from_ref_time(386_175_376).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(1642).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_221 nanoseconds.
		Weight::from_parts(138_456_715, 10041)
			// Standard Error: 160_687
			.saturating_add(Weight::from_ref_time(267_465_463).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_101 nanoseconds.
		Weight::from_parts(108_426_667, 10041)
			// Standard Error: 111_359
			.saturating_add(Weight::from_ref_time(264_647_076).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 91_818 nanoseconds.
		Weight::from_parts(112_776_157, 10041)
			// Standard Error: 91_367
			.saturating_add(Weight::from_ref_time(264_642_000).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_711 nanoseconds.
		Weight::from_parts(110_866_644, 10041)
			// Standard Error: 108_712
			.saturating_add(Weight::from_ref_time(264_836_393).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_259 nanoseconds.
		Weight::from_parts(111_700_237, 10041)
			// Standard Error: 104_503
			.saturating_add(Weight::from_ref_time(264_466_089).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 91_291 nanoseconds.
		Weight::from_parts(112_978_856, 10041)
			// Standard Error: 92_228
			.saturating_add(Weight::from_ref_time(264_285_928).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 93_462 nanoseconds.
		Weight::from_parts(111_747_936, 10041)
			// Standard Error: 90_493
			.saturating_add(Weight::from_ref_time(263_570_153).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 90_638 nanoseconds.
		Weight::from_parts(112_517_220, 10041)
			// Standard Error: 106_497
			.saturating_add(Weight::from_ref_time(263_960_786).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_333 nanoseconds.
		Weight::from_parts(111_712_503, 10041)
			// Standard Error: 95_121
			.saturating_add(Weight::from_ref_time(263_823_663).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 93_558 nanoseconds.
		Weight::from_parts(148_929_514, 10041)
			// Standard Error: 180_516
			.saturating_add(Weight::from_ref_time(373_404_038).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5456 + n * (619 ±0)`
		// Minimum execution time: 487_486 nanoseconds.
		Weight::from_parts(493_160_000, 5456)
			// Standard Error: 89_293
			.saturating_add(Weight::from_ref_time(13_059_074).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 91_601 nanoseconds.
		Weight::from_parts(102_925_244, 10041)
			// Standard Error: 129_211
			.saturating_add(Weight::from_ref_time(265_437_395).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 91_480 nanoseconds.
		Weight::from_parts(108_521_993, 10041)
			// Standard Error: 85_936
			.saturating_add(Weight::from_ref_time(264_224_293).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 91_180 nanoseconds.
		Weight::from_parts(130_532_268, 10041)
			// Standard Error: 168_330
			.saturating_add(Weight::from_ref_time(328_472_858).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 93_502 nanoseconds.
		Weight::from_parts(113_074_816, 10041)
			// Standard Error: 100_578
			.saturating_add(Weight::from_ref_time(272_722_738).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_760 nanoseconds.
		Weight::from_parts(159_573_617, 10041)
			// Standard Error: 219_355
			.saturating_add(Weight::from_ref_time(655_125_828).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5456 + n * (619 ±0)`
		// Minimum execution time: 761_677 nanoseconds.
		Weight::from_parts(766_626_000, 5456)
			// Standard Error: 80_926
			.saturating_add(Weight::from_ref_time(32_039_282).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 102_215 nanoseconds.
		Weight::from_parts(153_745_728, 10041)
			// Standard Error: 221_994
			.saturating_add(Weight::from_ref_time(474_417_835).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5456 + n * (619 ±0)`
		// Minimum execution time: 595_657 nanoseconds.
		Weight::from_parts(598_151_000, 5456)
			// Standard Error: 75_148
			.saturating_add(Weight::from_ref_time(21_795_898).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5407 + r * (4014 ±22)`
		// Minimum execution time: 93_620 nanoseconds.
		Weight::from_parts(151_829_209, 5407)
			// Standard Error: 253_271
			.saturating_add(Weight::from_ref_time(500_871_227).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(4014).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `8600 + n * (620 ±0)`
		// Minimum execution time: 629_435 nanoseconds.
		Weight::from_parts(636_454_000, 8600)
			// Standard Error: 69_864
			.saturating_add(Weight::from_ref_time(21_893_431).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(Weight::from_proof_size(620).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + r * (141 ±0)`
		//  Estimated: `5020 + r * (5021 ±0)`
		// Minimum execution time: 90_711 nanoseconds.
		Weight::from_parts(95_782_948, 5020)
			// Standard Error: 367_568
			.saturating_add(Weight::from_ref_time(39_505_551).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(5021).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 93_277 nanoseconds.
		Weight::from_parts(136_785_270, 10041)
			// Standard Error: 173_070
			.saturating_add(Weight::from_ref_time(368_483_888).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5374 + n * (619 ±0)`
		// Minimum execution time: 129_442 nanoseconds.
		Weight::from_parts(136_709_436, 5374)
			// Standard Error: 811
			.saturating_add(Weight::from_ref_time(818_667).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + r * (141 ±0)`
		//  Estimated: `5020 + r * (5021 ±0)`
		// Minimum execution time: 92_527 nanoseconds.
		Weight::from_parts(97_840_022, 5020)
			// Standard Error: 383_632
			.saturating_add(Weight::from_ref_time(51_177_977).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(5021).saturating_mul(r.into()))
    }
	/// The range of component `n` is `[0, 1024]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `6169 + n * (618 ±0)`
		// Minimum execution time: 130_000 nanoseconds.
		Weight::from_parts(132_111_439, 6169)
			// Standard Error: 2_003
			.saturating_add(Weight::from_ref_time(360_003).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(618).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_756 nanoseconds.
		Weight::from_parts(118_430_114, 10041)
			// Standard Error: 112_403
			.saturating_add(Weight::from_ref_time(265_243_155).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `19941`
		// Minimum execution time: 92_199 nanoseconds.
		Weight::from_parts(133_650_247, 19941)
			// Standard Error: 144_943
			.saturating_add(Weight::from_ref_time(271_817_579).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 93_745 nanoseconds.
		Weight::from_parts(140_816_930, 10041)
			// Standard Error: 157_246
			.saturating_add(Weight::from_ref_time(277_345_646).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 126_723 nanoseconds.
		Weight::from_parts(128_015_000, 10041)
			// Standard Error: 1_323
			.saturating_add(Weight::from_ref_time(671_555).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 94_465 nanoseconds.
		Weight::from_parts(154_145_058, 10041)
			// Standard Error: 182_318
			.saturating_add(Weight::from_ref_time(571_899_285).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 686_908 nanoseconds.
		Weight::from_parts(268_256_479, 10041)
			// Standard Error: 40_395
			.saturating_add(Weight::from_ref_time(33_770_958).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `2616`
		// Minimum execution time: 93_489 nanoseconds.
		Weight::from_parts(116_537_710, 2616)
			// Standard Error: 126_483
			.saturating_add(Weight::from_ref_time(249_824_322).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `1885 + n * (618 ±0)`
		// Minimum execution time: 328_222 nanoseconds.
		Weight::from_parts(331_573_000, 1885)
			// Standard Error: 67_545
			.saturating_add(Weight::from_ref_time(28_374_657).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_proof_size(618).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 95_041 nanoseconds.
		Weight::from_parts(151_049_839, 10041)
			// Standard Error: 216_449
			.saturating_add(Weight::from_ref_time(630_682_006).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_577 nanoseconds.
		Weight::from_parts(111_651_528, 10041)
			// Standard Error: 120_964
			.saturating_add(Weight::from_ref_time(265_282_251).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + r * (141 ±0)`
		//  Estimated: `1308 + r * (1308 ±0)`
		// Minimum execution time: 91_530 nanoseconds.
		Weight::from_parts(96_157_910, 1308)
			// Standard Error: 381_911
			.saturating_add(Weight::from_ref_time(34_751_689).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(1308).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 90_238 nanoseconds.
		Weight::from_ref_time(95_230_120)
			// Standard Error: 343_071
			.saturating_add(Weight::from_ref_time(22_587_579).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 90_604 nanoseconds.
		Weight::from_ref_time(95_333_806)
			// Standard Error: 312_476
			.saturating_add(Weight::from_ref_time(20_586_593).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 91_126 nanoseconds.
		Weight::from_ref_time(96_155_573)
			// Standard Error: 330_314
			.saturating_add(Weight::from_ref_time(20_608_926).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 90_941 nanoseconds.
		Weight::from_ref_time(96_786_412)
			// Standard Error: 341_564
			.saturating_add(Weight::from_ref_time(22_337_087).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `6052 + r * (1642 ±23)`
		// Minimum execution time: 94_853 nanoseconds.
		Weight::from_parts(141_171_620, 6052)
			// Standard Error: 152_952
			.saturating_add(Weight::from_ref_time(389_666_412).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(1642).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 104_880 nanoseconds.
		Weight::from_parts(147_045_479, 10041)
			// Standard Error: 241_714
			.saturating_add(Weight::from_ref_time(550_260_579).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `p` is `[0, 1024]`.
    /// The range of component `s` is `[1, 1024]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5388 + p * (619 ±0) + s * (617 ±0)`
		// Minimum execution time: 24_722_421 nanoseconds.
		Weight::from_parts(25_107_963_000, 5388)
			// Standard Error: 305_738
			.saturating_add(Weight::from_ref_time(8_456_943).saturating_mul(p.into()))
			// Standard Error: 305_708
			.saturating_add(Weight::from_ref_time(155_348_073).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(p.into()))
			.saturating_add(Weight::from_proof_size(617).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_read_access(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (39600 ±0)`
        // Minimum execution time: 95_159 nanoseconds.
        Weight::from_parts(104_398_142, 141)
            // Standard Error: 19_377
            .saturating_add(Weight::from_ref_time(54_532_007).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((16_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(39600).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_write_access(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `20275341`
        // Minimum execution time: 27_862_124 nanoseconds.
        Weight::from_parts(28_175_112_268, 20275341)
            // Standard Error: 108_591
            .saturating_add(Weight::from_ref_time(73_552_506).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(8192_u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_935_170 nanoseconds.
        Weight::from_ref_time(11_430_592_698)
            // Standard Error: 530_978
            .saturating_add(Weight::from_ref_time(9_185_585).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_082_462 nanoseconds.
        Weight::from_ref_time(11_531_133_132)
            // Standard Error: 524_842
            .saturating_add(Weight::from_ref_time(8_717_349).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_711 nanoseconds.
        Weight::from_ref_time(215_411)
            // Standard Error: 15_436
            .saturating_add(Weight::from_ref_time(4_199_350).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_741 nanoseconds.
        Weight::from_ref_time(1_356_742)
            // Standard Error: 16_499
            .saturating_add(Weight::from_ref_time(4_395_951).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_756 nanoseconds.
        Weight::from_ref_time(7_808_506)
            // Standard Error: 6_185
            .saturating_add(Weight::from_ref_time(1_681_482).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_654 nanoseconds.
        Weight::from_ref_time(3_849_393)
            // Standard Error: 7_441
            .saturating_add(Weight::from_ref_time(2_707_131).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_783 nanoseconds.
        Weight::from_ref_time(11_289_121)
            // Standard Error: 19_819
            .saturating_add(Weight::from_ref_time(6_170_695).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_566 nanoseconds.
        Weight::from_ref_time(5_508_216)
            // Standard Error: 1_833
            .saturating_add(Weight::from_ref_time(215_049).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_850 nanoseconds.
        Weight::from_ref_time(5_828_714)
            // Standard Error: 10_448
            .saturating_add(Weight::from_ref_time(2_734_130).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(2_734_130 -
            2_581_720).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_774 nanoseconds.
        Weight::from_ref_time(5_382_814)
            // Standard Error: 12_644
            .saturating_add(Weight::from_ref_time(2_581_720).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_223 nanoseconds.
        Weight::from_ref_time(14_961_366)
            // Standard Error: 66_630
            .saturating_add(Weight::from_ref_time(10_882_522).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 13_168 nanoseconds.
        Weight::from_ref_time(15_330_910)
            // Standard Error: 9_319
            .saturating_add(Weight::from_ref_time(1_207_441).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_306 nanoseconds.
        Weight::from_ref_time(5_724_653)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_723 nanoseconds.
        Weight::from_ref_time(1_869_106)
            // Standard Error: 5_081
            .saturating_add(Weight::from_ref_time(372_327).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_770 nanoseconds.
        Weight::from_ref_time(2_896_000)
            // Standard Error: 8_364
            .saturating_add(Weight::from_ref_time(1_136_268).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_798 nanoseconds.
        Weight::from_ref_time(2_889_000)
            // Standard Error: 7_978
            .saturating_add(Weight::from_ref_time(1_183_723).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_531 nanoseconds.
        Weight::from_ref_time(5_261_386)
            // Standard Error: 12_956
            .saturating_add(Weight::from_ref_time(1_288_485).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_506 nanoseconds.
        Weight::from_ref_time(3_496_286)
            // Standard Error: 14_462
            .saturating_add(Weight::from_ref_time(2_213_457).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_781 nanoseconds.
        Weight::from_ref_time(1_635_002)
            // Standard Error: 10_681
            .saturating_add(Weight::from_ref_time(7_188_840).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_677 nanoseconds.
        Weight::from_ref_time(2_326_993)
            // Standard Error: 18_464
            .saturating_add(Weight::from_ref_time(3_782_909).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_845 nanoseconds.
        Weight::from_ref_time(778_768)
            // Standard Error: 14_887
            .saturating_add(Weight::from_ref_time(3_601_052).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_754 nanoseconds.
        Weight::from_ref_time(2_842_000)
            // Standard Error: 6_489
            .saturating_add(Weight::from_ref_time(887_881).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_807 nanoseconds.
        Weight::from_ref_time(2_918_000)
            // Standard Error: 13_205
            .saturating_add(Weight::from_ref_time(2_436_376).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_773 nanoseconds.
        Weight::from_ref_time(422_870)
            // Standard Error: 6_543
            .saturating_add(Weight::from_ref_time(608_019).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_699 nanoseconds.
        Weight::from_ref_time(1_811_318)
            // Standard Error: 3_902
            .saturating_add(Weight::from_ref_time(368_305).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_759 nanoseconds.
        Weight::from_ref_time(2_611_938)
            // Standard Error: 4_398
            .saturating_add(Weight::from_ref_time(349_350).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_735 nanoseconds.
        Weight::from_ref_time(2_833_000)
            // Standard Error: 10_847
            .saturating_add(Weight::from_ref_time(2_372_206).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_706 nanoseconds.
        Weight::from_ref_time(2_776_000)
            // Standard Error: 10_634
            .saturating_add(Weight::from_ref_time(2_381_079).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_692 nanoseconds.
        Weight::from_ref_time(2_775_000)
            // Standard Error: 10_248
            .saturating_add(Weight::from_ref_time(2_339_022).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_686 nanoseconds.
        Weight::from_ref_time(2_798_000)
            // Standard Error: 9_849
            .saturating_add(Weight::from_ref_time(2_343_493).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_757 nanoseconds.
        Weight::from_ref_time(2_837_000)
            // Standard Error: 10_212
            .saturating_add(Weight::from_ref_time(2_336_789).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_708 nanoseconds.
        Weight::from_ref_time(2_796_000)
            // Standard Error: 10_742
            .saturating_add(Weight::from_ref_time(2_378_200).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_725 nanoseconds.
        Weight::from_ref_time(2_830_000)
            // Standard Error: 9_603
            .saturating_add(Weight::from_ref_time(2_336_904).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_673 nanoseconds.
        Weight::from_ref_time(2_803_000)
            // Standard Error: 9_827
            .saturating_add(Weight::from_ref_time(2_355_232).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_667 nanoseconds.
        Weight::from_ref_time(2_767_000)
            // Standard Error: 10_957
            .saturating_add(Weight::from_ref_time(2_394_567).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_625 nanoseconds.
        Weight::from_ref_time(2_747_000)
            // Standard Error: 9_800
            .saturating_add(Weight::from_ref_time(2_314_834).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_685 nanoseconds.
        Weight::from_ref_time(2_829_000)
            // Standard Error: 9_738
            .saturating_add(Weight::from_ref_time(1_807_320).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_680 nanoseconds.
        Weight::from_ref_time(2_778_000)
            // Standard Error: 9_263
            .saturating_add(Weight::from_ref_time(1_833_657).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_632 nanoseconds.
        Weight::from_ref_time(2_725_000)
            // Standard Error: 9_551
            .saturating_add(Weight::from_ref_time(2_231_366).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_719 nanoseconds.
        Weight::from_ref_time(14_124_334)
            // Standard Error: 21_684
            .saturating_add(Weight::from_ref_time(1_988_009).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_871 nanoseconds.
        Weight::from_ref_time(12_457_359)
            // Standard Error: 21_621
            .saturating_add(Weight::from_ref_time(2_285_568).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_795 nanoseconds.
        Weight::from_ref_time(2_906_000)
            // Standard Error: 28_649
            .saturating_add(Weight::from_ref_time(10_002_971).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_747 nanoseconds.
        Weight::from_ref_time(14_647_403)
            // Standard Error: 22_647
            .saturating_add(Weight::from_ref_time(2_284_896).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_709 nanoseconds.
        Weight::from_ref_time(2_817_000)
            // Standard Error: 10_151
            .saturating_add(Weight::from_ref_time(1_760_939).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_728 nanoseconds.
        Weight::from_ref_time(2_878_000)
            // Standard Error: 10_098
            .saturating_add(Weight::from_ref_time(1_750_445).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_662 nanoseconds.
        Weight::from_ref_time(2_729_000)
            // Standard Error: 8_803
            .saturating_add(Weight::from_ref_time(1_760_571).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_687 nanoseconds.
        Weight::from_ref_time(2_826_000)
            // Standard Error: 9_133
            .saturating_add(Weight::from_ref_time(1_552_748).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_707 nanoseconds.
        Weight::from_ref_time(2_783_000)
            // Standard Error: 9_797
            .saturating_add(Weight::from_ref_time(1_541_911).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_683 nanoseconds.
        Weight::from_ref_time(2_761_000)
            // Standard Error: 9_127
            .saturating_add(Weight::from_ref_time(1_538_159).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_694 nanoseconds.
        Weight::from_ref_time(2_837_000)
            // Standard Error: 9_183
            .saturating_add(Weight::from_ref_time(1_554_373).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_695 nanoseconds.
        Weight::from_ref_time(2_803_000)
            // Standard Error: 9_039
            .saturating_add(Weight::from_ref_time(1_571_100).saturating_mul(r.into()))
    }
}
