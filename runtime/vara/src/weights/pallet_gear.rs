// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-12, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 934_000 picoseconds.
        Weight::from_parts(1_009_000, 0)
            // Standard Error: 778
            .saturating_add(Weight::from_parts(210_258, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_338_000 picoseconds.
        Weight::from_parts(3_437_000, 3610)
            // Standard Error: 1_131
            .saturating_add(Weight::from_parts(745_083, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_562_000 picoseconds.
        Weight::from_parts(118_976_663, 0)
            // Standard Error: 11_507
            .saturating_add(Weight::from_parts(2_683_837, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1372`
        //  Estimated: `51905`
        // Minimum execution time: 110_067_000 picoseconds.
        Weight::from_parts(112_851_000, 51905)
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `992`
        //  Estimated: `21579`
        // Minimum execution time: 57_350_000 picoseconds.
        Weight::from_parts(58_762_000, 21579)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `638`
        //  Estimated: `17486`
        // Minimum execution time: 30_567_000 picoseconds.
        Weight::from_parts(31_330_000, 17486)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_234_000 picoseconds.
        Weight::from_parts(7_033_414, 7640)
            // Standard Error: 47_613
            .saturating_add(Weight::from_parts(14_524_944, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1593 + c * (16389 ±0)`
        //  Estimated: `43266 + c * (131112 ±0)`
        // Minimum execution time: 72_868_000 picoseconds.
        Weight::from_parts(73_149_000, 43266)
            // Standard Error: 152_564
            .saturating_add(Weight::from_parts(53_584_937, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `5402`
        // Minimum execution time: 86_866_000 picoseconds.
        Weight::from_parts(27_948_103, 5402)
            // Standard Error: 68_902
            .saturating_add(Weight::from_parts(59_280_308, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1111`
        //  Estimated: `50600`
        // Minimum execution time: 95_704_000 picoseconds.
        Weight::from_parts(123_561_172, 50600)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(2_646, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `521`
        //  Estimated: `45152`
        // Minimum execution time: 11_185_682_000 picoseconds.
        Weight::from_parts(407_283_700, 45152)
            // Standard Error: 190_926
            .saturating_add(Weight::from_parts(59_385_554, 0).saturating_mul(c.into()))
            // Standard Error: 11
            .saturating_add(Weight::from_parts(2_589, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `531`
        //  Estimated: `31266`
        // Minimum execution time: 75_416_000 picoseconds.
        Weight::from_parts(54_792_112, 31266)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_103, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1371`
        //  Estimated: `54435`
        // Minimum execution time: 124_438_000 picoseconds.
        Weight::from_parts(104_600_331, 54435)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_125, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1893`
        //  Estimated: `114612`
        // Minimum execution time: 373_668_000 picoseconds.
        Weight::from_parts(393_330_664, 114612)
            .saturating_add(T::DbWeight::get().reads(33_u64))
            .saturating_add(T::DbWeight::get().writes(26_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1893`
        //  Estimated: `114612`
        // Minimum execution time: 389_488_000 picoseconds.
        Weight::from_parts(409_610_608, 114612)
            // Standard Error: 1_834
            .saturating_add(Weight::from_parts(8_917, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(33_u64))
            .saturating_add(T::DbWeight::get().writes(26_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 67_457_000 picoseconds.
        Weight::from_parts(67_906_000, 3899)
            // Standard Error: 52_330
            .saturating_add(Weight::from_parts(59_621_002, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_881_000 picoseconds.
        Weight::from_parts(95_523_000, 0)
            // Standard Error: 3_608_688
            .saturating_add(Weight::from_parts(697_882_824, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 491_501_000 picoseconds.
        Weight::from_parts(435_537_304, 0)
            // Standard Error: 8_334
            .saturating_add(Weight::from_parts(28_331_426, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 211_233_000 picoseconds.
        Weight::from_parts(217_993_666, 0)
            // Standard Error: 206_467
            .saturating_add(Weight::from_parts(62_527_576, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_156_000 picoseconds.
        Weight::from_parts(111_450_341, 0)
            // Standard Error: 4_133
            .saturating_add(Weight::from_parts(2_447_713, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 184_565_000 picoseconds.
        Weight::from_parts(225_242_728, 0)
            // Standard Error: 13_937
            .saturating_add(Weight::from_parts(2_137_994, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_321_000 picoseconds.
        Weight::from_parts(122_453_035, 0)
            // Standard Error: 377_395
            .saturating_add(Weight::from_parts(107_302_100, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_325_000 picoseconds.
        Weight::from_parts(82_420_213, 0)
            // Standard Error: 332_485
            .saturating_add(Weight::from_parts(96_487_239, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_306_000 picoseconds.
        Weight::from_parts(80_181_189, 0)
            // Standard Error: 356_057
            .saturating_add(Weight::from_parts(95_564_553, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_543_000 picoseconds.
        Weight::from_parts(88_221_387, 0)
            // Standard Error: 328_398
            .saturating_add(Weight::from_parts(96_048_785, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_176_000 picoseconds.
        Weight::from_parts(82_987_141, 0)
            // Standard Error: 342_487
            .saturating_add(Weight::from_parts(95_113_214, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_336_000 picoseconds.
        Weight::from_parts(81_881_778, 0)
            // Standard Error: 328_695
            .saturating_add(Weight::from_parts(94_651_327, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_213_000 picoseconds.
        Weight::from_parts(76_956_469, 0)
            // Standard Error: 326_117
            .saturating_add(Weight::from_parts(95_599_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_889_000 picoseconds.
        Weight::from_parts(81_923_727, 0)
            // Standard Error: 350_033
            .saturating_add(Weight::from_parts(95_441_041, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 626_134_000 picoseconds.
        Weight::from_parts(723_901_225, 0)
            // Standard Error: 385_796
            .saturating_add(Weight::from_parts(149_985_385, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 783_529_000 picoseconds.
        Weight::from_parts(800_759_000, 0)
            // Standard Error: 64_051
            .saturating_add(Weight::from_parts(13_605_592, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_294_000 picoseconds.
        Weight::from_parts(83_532_015, 0)
            // Standard Error: 297_859
            .saturating_add(Weight::from_parts(95_697_412, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_221_000 picoseconds.
        Weight::from_parts(80_175_190, 0)
            // Standard Error: 345_619
            .saturating_add(Weight::from_parts(94_704_670, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_963_000 picoseconds.
        Weight::from_parts(98_855_775, 0)
            // Standard Error: 387_052
            .saturating_add(Weight::from_parts(173_279_539, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_010_000 picoseconds.
        Weight::from_parts(103_368_000, 0)
            // Standard Error: 4_257_933
            .saturating_add(Weight::from_parts(834_495_199, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_061_000 picoseconds.
        Weight::from_parts(165_336_833, 0)
            // Standard Error: 401_638
            .saturating_add(Weight::from_parts(262_725_488, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 358_452_000 picoseconds.
        Weight::from_parts(363_240_000, 0)
            // Standard Error: 67_345
            .saturating_add(Weight::from_parts(25_426_996, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_614_000 picoseconds.
        Weight::from_parts(171_425_217, 0)
            // Standard Error: 381_671
            .saturating_add(Weight::from_parts(263_139_198, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 363_781_000 picoseconds.
        Weight::from_parts(368_717_000, 0)
            // Standard Error: 62_324
            .saturating_add(Weight::from_parts(25_477_470, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 643_300_000 picoseconds.
        Weight::from_parts(804_885_147, 0)
            // Standard Error: 554_627
            .saturating_add(Weight::from_parts(281_415_379, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 621_069_000 picoseconds.
        Weight::from_parts(653_949_716, 0)
            // Standard Error: 450_680
            .saturating_add(Weight::from_parts(300_421_578, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_844_000 picoseconds.
        Weight::from_parts(85_505_959, 0)
            // Standard Error: 309_095
            .saturating_add(Weight::from_parts(101_834_799, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_022_422_000 picoseconds.
        Weight::from_parts(2_129_021_428, 0)
            // Standard Error: 292_779
            .saturating_add(Weight::from_parts(169_155_183, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 334_162_000 picoseconds.
        Weight::from_parts(339_314_000, 0)
            // Standard Error: 51_940
            .saturating_add(Weight::from_parts(34_464_502, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_005_079_000 picoseconds.
        Weight::from_parts(2_119_337_425, 0)
            // Standard Error: 283_626
            .saturating_add(Weight::from_parts(221_127_137, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_010_339_000 picoseconds.
        Weight::from_parts(2_133_769_704, 0)
            // Standard Error: 350_324
            .saturating_add(Weight::from_parts(226_273_686, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 255_476_000 picoseconds.
        Weight::from_parts(329_063_119, 0)
            // Standard Error: 677_492
            .saturating_add(Weight::from_parts(288_138_547, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 546_375_000 picoseconds.
        Weight::from_parts(559_006_000, 0)
            // Standard Error: 46_920
            .saturating_add(Weight::from_parts(24_935_517, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_135_758_000 picoseconds.
        Weight::from_parts(2_271_204_319, 0)
            // Standard Error: 354_578
            .saturating_add(Weight::from_parts(244_423_447, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_374_000 picoseconds.
        Weight::from_parts(101_438_053, 0)
            // Standard Error: 450_640
            .saturating_add(Weight::from_parts(23_328_146, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 118_268_000 picoseconds.
        Weight::from_parts(111_844_396, 0)
            // Standard Error: 966
            .saturating_add(Weight::from_parts(485_997, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_283_000 picoseconds.
        Weight::from_parts(101_492_014, 0)
            // Standard Error: 441_269
            .saturating_add(Weight::from_parts(21_249_185, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 119_098_000 picoseconds.
        Weight::from_parts(104_926_576, 0)
            // Standard Error: 1_015
            .saturating_add(Weight::from_parts(492_494, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_576_000 picoseconds.
        Weight::from_parts(102_261_508, 0)
            // Standard Error: 472_121
            .saturating_add(Weight::from_parts(18_072_691, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_580_000 picoseconds.
        Weight::from_parts(99_638_461, 0)
            // Standard Error: 424_299
            .saturating_add(Weight::from_parts(20_169_838, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_543_000 picoseconds.
        Weight::from_parts(143_407_012, 0)
            // Standard Error: 438_443
            .saturating_add(Weight::from_parts(154_762_913, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 116_260_000 picoseconds.
        Weight::from_parts(118_465_000, 0)
            // Standard Error: 2_452
            .saturating_add(Weight::from_parts(677_516, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 565_243_000 picoseconds.
        Weight::from_parts(591_709_365, 0)
            // Standard Error: 2_633_787
            .saturating_add(Weight::from_parts(9_397_034, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 563_690_000 picoseconds.
        Weight::from_parts(587_530_712, 0)
            // Standard Error: 2_851_715
            .saturating_add(Weight::from_parts(12_193_787, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_693_000 picoseconds.
        Weight::from_parts(112_203_932, 0)
            // Standard Error: 453_215
            .saturating_add(Weight::from_parts(7_087_667, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 118_767_000 picoseconds.
        Weight::from_parts(108_911_053, 0)
            // Standard Error: 898
            .saturating_add(Weight::from_parts(485_016, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_213_000 picoseconds.
        Weight::from_parts(111_607_483, 0)
            // Standard Error: 461_565
            .saturating_add(Weight::from_parts(12_068_816, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 119_750_000 picoseconds.
        Weight::from_parts(102_048_359, 0)
            // Standard Error: 1_120
            .saturating_add(Weight::from_parts(491_425, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_481_000 picoseconds.
        Weight::from_parts(80_173_720, 0)
            // Standard Error: 332_491
            .saturating_add(Weight::from_parts(97_566_781, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_358_000 picoseconds.
        Weight::from_parts(100_093_298, 0)
            // Standard Error: 22_715
            .saturating_add(Weight::from_parts(3_086_339, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_787_000 picoseconds.
        Weight::from_parts(99_722_448, 0)
            // Standard Error: 20_664
            .saturating_add(Weight::from_parts(3_093_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 570_565_000 picoseconds.
        Weight::from_parts(622_298_279, 0)
            // Standard Error: 433_982
            .saturating_add(Weight::from_parts(114_852_714, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 587_283_000 picoseconds.
        Weight::from_parts(606_466_422, 0)
            // Standard Error: 1_634
            .saturating_add(Weight::from_parts(122_082, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_470_320_000 picoseconds.
        Weight::from_parts(2_659_620_438, 0)
            // Standard Error: 558_347
            .saturating_add(Weight::from_parts(131_708_833, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_597_085_000 picoseconds.
        Weight::from_parts(2_405_990_575, 0)
            // Standard Error: 16_599
            .saturating_add(Weight::from_parts(12_423_295, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_611_000 picoseconds.
        Weight::from_parts(119_997_529, 0)
            // Standard Error: 367_602
            .saturating_add(Weight::from_parts(113_576_138, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 160_153_000 picoseconds.
        Weight::from_parts(162_615_000, 0)
            // Standard Error: 56_922
            .saturating_add(Weight::from_parts(30_446_751, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_648_000 picoseconds.
        Weight::from_parts(81_448_415, 0)
            // Standard Error: 326_095
            .saturating_add(Weight::from_parts(93_900_832, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_186_000 picoseconds.
        Weight::from_parts(100_856_024, 0)
            // Standard Error: 442_255
            .saturating_add(Weight::from_parts(23_673_075, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_391_000 picoseconds.
        Weight::from_parts(102_089_728, 0)
            // Standard Error: 440_387
            .saturating_add(Weight::from_parts(17_820_271, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_818_000 picoseconds.
        Weight::from_parts(102_176_446, 0)
            // Standard Error: 494_572
            .saturating_add(Weight::from_parts(15_980_953, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_725_000 picoseconds.
        Weight::from_parts(101_139_400, 0)
            // Standard Error: 464_794
            .saturating_add(Weight::from_parts(14_447_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_009_000 picoseconds.
        Weight::from_parts(100_765_548, 0)
            // Standard Error: 469_944
            .saturating_add(Weight::from_parts(15_333_051, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 148_240_000 picoseconds.
        Weight::from_parts(231_522_967, 0)
            // Standard Error: 229_229
            .saturating_add(Weight::from_parts(160_602_189, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_010_000 picoseconds.
        Weight::from_parts(180_847_533, 0)
            // Standard Error: 392_577
            .saturating_add(Weight::from_parts(346_829_521, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_366_666_000 picoseconds.
        Weight::from_parts(50_491_840_000, 0)
            // Standard Error: 301_931
            .saturating_add(Weight::from_parts(9_559_087, 0).saturating_mul(p.into()))
            // Standard Error: 301_917
            .saturating_add(Weight::from_parts(179_634_659, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_513_000 picoseconds.
        Weight::from_parts(176_499_542, 0)
            // Standard Error: 346_078
            .saturating_add(Weight::from_parts(352_475_537, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 53_153_464_000 picoseconds.
        Weight::from_parts(53_346_203_000, 0)
            // Standard Error: 344_548
            .saturating_add(Weight::from_parts(8_841_641, 0).saturating_mul(p.into()))
            // Standard Error: 344_531
            .saturating_add(Weight::from_parts(178_765_266, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_526_000 picoseconds.
        Weight::from_parts(114_029_675, 0)
            // Standard Error: 36_051
            .saturating_add(Weight::from_parts(2_102_350, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 92_945_000 picoseconds.
        Weight::from_parts(89_153_421, 1131)
            // Standard Error: 19_621
            .saturating_add(Weight::from_parts(16_209_214, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 92_666_000 picoseconds.
        Weight::from_parts(94_724_000, 1131)
            // Standard Error: 46_723
            .saturating_add(Weight::from_parts(43_625_238, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_042_235_000 picoseconds.
        Weight::from_parts(8_201_262_850, 5069931)
            // Standard Error: 64_877
            .saturating_add(Weight::from_parts(42_510_312, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 97_329_000 picoseconds.
        Weight::from_parts(99_837_000, 1939)
            // Standard Error: 101_696
            .saturating_add(Weight::from_parts(55_597_646, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 97_855_000 picoseconds.
        Weight::from_parts(108_667_208, 1131)
            // Standard Error: 68_977
            .saturating_add(Weight::from_parts(42_691_307, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 612_433_000 picoseconds.
        Weight::from_parts(604_959_792, 1496)
            // Standard Error: 267_843
            .saturating_add(Weight::from_parts(52_154_607, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_116_449_000 picoseconds.
        Weight::from_parts(1_149_705_736, 317931)
            // Standard Error: 174_740
            .saturating_add(Weight::from_parts(51_435_674, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_549_000 picoseconds.
        Weight::from_parts(7_701_088, 0)
            // Standard Error: 319_466
            .saturating_add(Weight::from_parts(74_620_336, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_424_710_000 picoseconds.
        Weight::from_parts(4_210_866_475, 0)
            // Standard Error: 71_866
            .saturating_add(Weight::from_parts(5_451_180, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_408_046_000 picoseconds.
        Weight::from_parts(4_225_548_079, 0)
            // Standard Error: 77_886
            .saturating_add(Weight::from_parts(5_434_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_148_028_000 picoseconds.
        Weight::from_parts(11_489_166_190, 0)
            // Standard Error: 231_245
            .saturating_add(Weight::from_parts(10_674_672, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_836_694_000 picoseconds.
        Weight::from_parts(11_649_184_831, 0)
            // Standard Error: 191_595
            .saturating_add(Weight::from_parts(9_290_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_453_000 picoseconds.
        Weight::from_parts(2_509_000, 0)
            // Standard Error: 9_442
            .saturating_add(Weight::from_parts(3_806_814, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_476_000 picoseconds.
        Weight::from_parts(2_538_000, 0)
            // Standard Error: 5_737
            .saturating_add(Weight::from_parts(3_080_935, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_426_000 picoseconds.
        Weight::from_parts(3_093_309, 0)
            // Standard Error: 7_440
            .saturating_add(Weight::from_parts(1_597_176, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_393_000 picoseconds.
        Weight::from_parts(2_504_000, 0)
            // Standard Error: 9_079
            .saturating_add(Weight::from_parts(2_886_272, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_448_000 picoseconds.
        Weight::from_parts(1_267_345, 0)
            // Standard Error: 14_704
            .saturating_add(Weight::from_parts(5_154_623, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_141_000 picoseconds.
        Weight::from_parts(6_725_395, 0)
            // Standard Error: 1_756
            .saturating_add(Weight::from_parts(107_149, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_536_000 picoseconds.
        Weight::from_parts(4_053_835, 0)
            // Standard Error: 5_941
            .saturating_add(Weight::from_parts(2_579_253, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_579_253 -
            2_418_557, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_444_000 picoseconds.
        Weight::from_parts(4_268_875, 0)
            // Standard Error: 12_209
            .saturating_add(Weight::from_parts(2_418_557, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_826_000 picoseconds.
        Weight::from_parts(12_347_808, 0)
            // Standard Error: 24_672
            .saturating_add(Weight::from_parts(10_107_071, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_185_000 picoseconds.
        Weight::from_parts(13_181_000, 0)
            // Standard Error: 6_735
            .saturating_add(Weight::from_parts(1_098_863, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_487_000 picoseconds.
        Weight::from_parts(5_775_413, 0)
            // Standard Error: 13
            .saturating_add(Weight::from_parts(14, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_100_000 picoseconds.
        Weight::from_parts(5_773_427, 0)
            // Standard Error: 2_602
            .saturating_add(Weight::from_parts(393_871, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_076_000 picoseconds.
        Weight::from_parts(4_015_115, 0)
            // Standard Error: 6_342
            .saturating_add(Weight::from_parts(979_041, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_953_000 picoseconds.
        Weight::from_parts(4_210_143, 0)
            // Standard Error: 5_708
            .saturating_add(Weight::from_parts(994_209, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_436_000 picoseconds.
        Weight::from_parts(2_991_203, 0)
            // Standard Error: 8_505
            .saturating_add(Weight::from_parts(765_914, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_530_000 picoseconds.
        Weight::from_parts(6_681_000, 0)
            // Standard Error: 8_482
            .saturating_add(Weight::from_parts(1_346_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_536_000 picoseconds.
        Weight::from_parts(624_081, 0)
            // Standard Error: 12_896
            .saturating_add(Weight::from_parts(7_255_925, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_376_000 picoseconds.
        Weight::from_parts(2_480_000, 0)
            // Standard Error: 7_649
            .saturating_add(Weight::from_parts(3_371_261, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_475_000 picoseconds.
        Weight::from_parts(2_538_000, 0)
            // Standard Error: 7_977
            .saturating_add(Weight::from_parts(3_092_914, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_318_000 picoseconds.
        Weight::from_parts(2_466_000, 0)
            // Standard Error: 6_725
            .saturating_add(Weight::from_parts(3_134_184, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_482_000 picoseconds.
        Weight::from_parts(2_528_000, 0)
            // Standard Error: 4_957
            .saturating_add(Weight::from_parts(2_637_643, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_401_000 picoseconds.
        Weight::from_parts(2_521_000, 0)
            // Standard Error: 4_161
            .saturating_add(Weight::from_parts(576_227, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_404_000 picoseconds.
        Weight::from_parts(1_597_494, 0)
            // Standard Error: 4_378
            .saturating_add(Weight::from_parts(387_728, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_443_000 picoseconds.
        Weight::from_parts(2_573_000, 0)
            // Standard Error: 12_195
            .saturating_add(Weight::from_parts(1_874_801, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_478_000 picoseconds.
        Weight::from_parts(2_567_000, 0)
            // Standard Error: 9_231
            .saturating_add(Weight::from_parts(1_340_556, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_497_000 picoseconds.
        Weight::from_parts(736_487, 0)
            // Standard Error: 4_831
            .saturating_add(Weight::from_parts(488_417, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_414_000 picoseconds.
        Weight::from_parts(821_077, 0)
            // Standard Error: 4_817
            .saturating_add(Weight::from_parts(489_681, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_431_000 picoseconds.
        Weight::from_parts(2_508_000, 0)
            // Standard Error: 4_598
            .saturating_add(Weight::from_parts(593_522, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_379_000 picoseconds.
        Weight::from_parts(2_447_000, 0)
            // Standard Error: 4_636
            .saturating_add(Weight::from_parts(611_579, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_380_000 picoseconds.
        Weight::from_parts(2_529_000, 0)
            // Standard Error: 5_027
            .saturating_add(Weight::from_parts(557_814, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_422_000 picoseconds.
        Weight::from_parts(1_496_977, 0)
            // Standard Error: 3_958
            .saturating_add(Weight::from_parts(379_852, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_398_000 picoseconds.
        Weight::from_parts(2_711_200, 0)
            // Standard Error: 2_145
            .saturating_add(Weight::from_parts(193_678, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_435_000 picoseconds.
        Weight::from_parts(2_731_744, 0)
            // Standard Error: 2_619
            .saturating_add(Weight::from_parts(200_971, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_433_000 picoseconds.
        Weight::from_parts(2_508_000, 0)
            // Standard Error: 17_543
            .saturating_add(Weight::from_parts(2_133_112, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_381_000 picoseconds.
        Weight::from_parts(2_518_000, 0)
            // Standard Error: 12_154
            .saturating_add(Weight::from_parts(1_476_485, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_392_000 picoseconds.
        Weight::from_parts(2_518_000, 0)
            // Standard Error: 7_059
            .saturating_add(Weight::from_parts(2_159_206, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_487_000 picoseconds.
        Weight::from_parts(2_597_000, 0)
            // Standard Error: 7_916
            .saturating_add(Weight::from_parts(1_343_952, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_475_000 picoseconds.
        Weight::from_parts(2_536_000, 0)
            // Standard Error: 10_384
            .saturating_add(Weight::from_parts(2_083_298, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_405_000 picoseconds.
        Weight::from_parts(2_449_000, 0)
            // Standard Error: 8_386
            .saturating_add(Weight::from_parts(1_351_334, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_413_000 picoseconds.
        Weight::from_parts(2_485_000, 0)
            // Standard Error: 9_936
            .saturating_add(Weight::from_parts(2_055_839, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_481_000 picoseconds.
        Weight::from_parts(2_523_000, 0)
            // Standard Error: 8_977
            .saturating_add(Weight::from_parts(1_378_769, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_379_000 picoseconds.
        Weight::from_parts(2_465_000, 0)
            // Standard Error: 10_396
            .saturating_add(Weight::from_parts(2_076_548, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_435_000 picoseconds.
        Weight::from_parts(2_516_000, 0)
            // Standard Error: 8_342
            .saturating_add(Weight::from_parts(1_341_338, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_423_000 picoseconds.
        Weight::from_parts(2_506_000, 0)
            // Standard Error: 9_583
            .saturating_add(Weight::from_parts(2_075_331, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_410_000 picoseconds.
        Weight::from_parts(2_497_000, 0)
            // Standard Error: 13_439
            .saturating_add(Weight::from_parts(1_551_125, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_435_000 picoseconds.
        Weight::from_parts(2_507_000, 0)
            // Standard Error: 8_885
            .saturating_add(Weight::from_parts(1_997_656, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_365_000 picoseconds.
        Weight::from_parts(2_442_000, 0)
            // Standard Error: 8_249
            .saturating_add(Weight::from_parts(1_158_437, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_347_000 picoseconds.
        Weight::from_parts(2_451_000, 0)
            // Standard Error: 12_926
            .saturating_add(Weight::from_parts(1_923_796, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_456_000 picoseconds.
        Weight::from_parts(2_518_000, 0)
            // Standard Error: 10_247
            .saturating_add(Weight::from_parts(1_141_969, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_426_000 picoseconds.
        Weight::from_parts(2_458_000, 0)
            // Standard Error: 12_252
            .saturating_add(Weight::from_parts(1_935_177, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_514_000 picoseconds.
        Weight::from_parts(2_619_000, 0)
            // Standard Error: 14_990
            .saturating_add(Weight::from_parts(1_684_378, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_468_000 picoseconds.
        Weight::from_parts(2_500_000, 0)
            // Standard Error: 19_087
            .saturating_add(Weight::from_parts(2_336_173, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_473_000 picoseconds.
        Weight::from_parts(2_531_000, 0)
            // Standard Error: 12_303
            .saturating_add(Weight::from_parts(1_623_449, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_380_000 picoseconds.
        Weight::from_parts(2_483_000, 0)
            // Standard Error: 7_129
            .saturating_add(Weight::from_parts(1_456_399, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_380_000 picoseconds.
        Weight::from_parts(2_489_000, 0)
            // Standard Error: 3_916
            .saturating_add(Weight::from_parts(643_079, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_473_000 picoseconds.
        Weight::from_parts(2_508_000, 0)
            // Standard Error: 9_875
            .saturating_add(Weight::from_parts(1_319_115, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_387_000 picoseconds.
        Weight::from_parts(2_488_000, 0)
            // Standard Error: 4_461
            .saturating_add(Weight::from_parts(633_370, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_451_000 picoseconds.
        Weight::from_parts(2_512_000, 0)
            // Standard Error: 13_733
            .saturating_add(Weight::from_parts(1_853_732, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_435_000 picoseconds.
        Weight::from_parts(2_499_000, 0)
            // Standard Error: 8_560
            .saturating_add(Weight::from_parts(1_256_398, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_398_000 picoseconds.
        Weight::from_parts(2_500_000, 0)
            // Standard Error: 8_969
            .saturating_add(Weight::from_parts(2_752_371, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_467_000 picoseconds.
        Weight::from_parts(2_558_000, 0)
            // Standard Error: 7_371
            .saturating_add(Weight::from_parts(2_449_354, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_481_000 picoseconds.
        Weight::from_parts(2_553_000, 0)
            // Standard Error: 10_796
            .saturating_add(Weight::from_parts(2_977_282, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_429_000 picoseconds.
        Weight::from_parts(2_511_000, 0)
            // Standard Error: 10_666
            .saturating_add(Weight::from_parts(2_483_088, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_387_000 picoseconds.
        Weight::from_parts(2_495_000, 0)
            // Standard Error: 15_593
            .saturating_add(Weight::from_parts(9_415_186, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_405_000 picoseconds.
        Weight::from_parts(2_492_000, 0)
            // Standard Error: 24_727
            .saturating_add(Weight::from_parts(7_511_201, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_370_000 picoseconds.
        Weight::from_parts(1_366_085, 0)
            // Standard Error: 16_737
            .saturating_add(Weight::from_parts(3_021_269, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_471_000 picoseconds.
        Weight::from_parts(2_577_000, 0)
            // Standard Error: 7_450
            .saturating_add(Weight::from_parts(2_509_585, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_445_000 picoseconds.
        Weight::from_parts(2_486_000, 0)
            // Standard Error: 10_582
            .saturating_add(Weight::from_parts(1_260_828, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_420_000 picoseconds.
        Weight::from_parts(2_486_000, 0)
            // Standard Error: 5_156
            .saturating_add(Weight::from_parts(636_089, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(2_446_000, 0)
            // Standard Error: 11_307
            .saturating_add(Weight::from_parts(1_296_900, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(2_481_000, 0)
            // Standard Error: 5_573
            .saturating_add(Weight::from_parts(625_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_400_000 picoseconds.
        Weight::from_parts(2_506_000, 0)
            // Standard Error: 9_353
            .saturating_add(Weight::from_parts(1_284_322, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_424_000 picoseconds.
        Weight::from_parts(2_487_000, 0)
            // Standard Error: 5_249
            .saturating_add(Weight::from_parts(635_535, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_400_000 picoseconds.
        Weight::from_parts(2_507_000, 0)
            // Standard Error: 8_007
            .saturating_add(Weight::from_parts(1_100_558, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_451_000 picoseconds.
        Weight::from_parts(2_510_000, 0)
            // Standard Error: 4_669
            .saturating_add(Weight::from_parts(571_797, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_418_000 picoseconds.
        Weight::from_parts(2_510_000, 0)
            // Standard Error: 8_392
            .saturating_add(Weight::from_parts(1_088_453, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_496_000 picoseconds.
        Weight::from_parts(2_555_000, 0)
            // Standard Error: 5_142
            .saturating_add(Weight::from_parts(568_114, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_445_000 picoseconds.
        Weight::from_parts(2_523_000, 0)
            // Standard Error: 7_691
            .saturating_add(Weight::from_parts(1_078_926, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_405_000 picoseconds.
        Weight::from_parts(2_463_000, 0)
            // Standard Error: 4_297
            .saturating_add(Weight::from_parts(580_611, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_417_000 picoseconds.
        Weight::from_parts(2_498_000, 0)
            // Standard Error: 9_567
            .saturating_add(Weight::from_parts(1_086_852, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_507_000 picoseconds.
        Weight::from_parts(2_523_000, 0)
            // Standard Error: 4_669
            .saturating_add(Weight::from_parts(542_863, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_483_000 picoseconds.
        Weight::from_parts(2_573_000, 0)
            // Standard Error: 7_084
            .saturating_add(Weight::from_parts(1_088_880, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_458_000 picoseconds.
        Weight::from_parts(2_553_000, 0)
            // Standard Error: 4_359
            .saturating_add(Weight::from_parts(576_728, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 934_000 picoseconds.
        Weight::from_parts(1_009_000, 0)
            // Standard Error: 778
            .saturating_add(Weight::from_parts(210_258, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_338_000 picoseconds.
        Weight::from_parts(3_437_000, 3610)
            // Standard Error: 1_131
            .saturating_add(Weight::from_parts(745_083, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_562_000 picoseconds.
        Weight::from_parts(118_976_663, 0)
            // Standard Error: 11_507
            .saturating_add(Weight::from_parts(2_683_837, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1372`
        //  Estimated: `51905`
        // Minimum execution time: 110_067_000 picoseconds.
        Weight::from_parts(112_851_000, 51905)
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `992`
        //  Estimated: `21579`
        // Minimum execution time: 57_350_000 picoseconds.
        Weight::from_parts(58_762_000, 21579)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `638`
        //  Estimated: `17486`
        // Minimum execution time: 30_567_000 picoseconds.
        Weight::from_parts(31_330_000, 17486)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_234_000 picoseconds.
        Weight::from_parts(7_033_414, 7640)
            // Standard Error: 47_613
            .saturating_add(Weight::from_parts(14_524_944, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1593 + c * (16389 ±0)`
        //  Estimated: `43266 + c * (131112 ±0)`
        // Minimum execution time: 72_868_000 picoseconds.
        Weight::from_parts(73_149_000, 43266)
            // Standard Error: 152_564
            .saturating_add(Weight::from_parts(53_584_937, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `5402`
        // Minimum execution time: 86_866_000 picoseconds.
        Weight::from_parts(27_948_103, 5402)
            // Standard Error: 68_902
            .saturating_add(Weight::from_parts(59_280_308, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1111`
        //  Estimated: `50600`
        // Minimum execution time: 95_704_000 picoseconds.
        Weight::from_parts(123_561_172, 50600)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(2_646, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `521`
        //  Estimated: `45152`
        // Minimum execution time: 11_185_682_000 picoseconds.
        Weight::from_parts(407_283_700, 45152)
            // Standard Error: 190_926
            .saturating_add(Weight::from_parts(59_385_554, 0).saturating_mul(c.into()))
            // Standard Error: 11
            .saturating_add(Weight::from_parts(2_589, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `531`
        //  Estimated: `31266`
        // Minimum execution time: 75_416_000 picoseconds.
        Weight::from_parts(54_792_112, 31266)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_103, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1371`
        //  Estimated: `54435`
        // Minimum execution time: 124_438_000 picoseconds.
        Weight::from_parts(104_600_331, 54435)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_125, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1893`
        //  Estimated: `114612`
        // Minimum execution time: 373_668_000 picoseconds.
        Weight::from_parts(393_330_664, 114612)
            .saturating_add(RocksDbWeight::get().reads(33_u64))
            .saturating_add(RocksDbWeight::get().writes(26_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1893`
        //  Estimated: `114612`
        // Minimum execution time: 389_488_000 picoseconds.
        Weight::from_parts(409_610_608, 114612)
            // Standard Error: 1_834
            .saturating_add(Weight::from_parts(8_917, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(33_u64))
            .saturating_add(RocksDbWeight::get().writes(26_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 67_457_000 picoseconds.
        Weight::from_parts(67_906_000, 3899)
            // Standard Error: 52_330
            .saturating_add(Weight::from_parts(59_621_002, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_881_000 picoseconds.
        Weight::from_parts(95_523_000, 0)
            // Standard Error: 3_608_688
            .saturating_add(Weight::from_parts(697_882_824, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 491_501_000 picoseconds.
        Weight::from_parts(435_537_304, 0)
            // Standard Error: 8_334
            .saturating_add(Weight::from_parts(28_331_426, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 211_233_000 picoseconds.
        Weight::from_parts(217_993_666, 0)
            // Standard Error: 206_467
            .saturating_add(Weight::from_parts(62_527_576, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_156_000 picoseconds.
        Weight::from_parts(111_450_341, 0)
            // Standard Error: 4_133
            .saturating_add(Weight::from_parts(2_447_713, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 184_565_000 picoseconds.
        Weight::from_parts(225_242_728, 0)
            // Standard Error: 13_937
            .saturating_add(Weight::from_parts(2_137_994, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_321_000 picoseconds.
        Weight::from_parts(122_453_035, 0)
            // Standard Error: 377_395
            .saturating_add(Weight::from_parts(107_302_100, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_325_000 picoseconds.
        Weight::from_parts(82_420_213, 0)
            // Standard Error: 332_485
            .saturating_add(Weight::from_parts(96_487_239, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_306_000 picoseconds.
        Weight::from_parts(80_181_189, 0)
            // Standard Error: 356_057
            .saturating_add(Weight::from_parts(95_564_553, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_543_000 picoseconds.
        Weight::from_parts(88_221_387, 0)
            // Standard Error: 328_398
            .saturating_add(Weight::from_parts(96_048_785, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_176_000 picoseconds.
        Weight::from_parts(82_987_141, 0)
            // Standard Error: 342_487
            .saturating_add(Weight::from_parts(95_113_214, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_336_000 picoseconds.
        Weight::from_parts(81_881_778, 0)
            // Standard Error: 328_695
            .saturating_add(Weight::from_parts(94_651_327, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_213_000 picoseconds.
        Weight::from_parts(76_956_469, 0)
            // Standard Error: 326_117
            .saturating_add(Weight::from_parts(95_599_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_889_000 picoseconds.
        Weight::from_parts(81_923_727, 0)
            // Standard Error: 350_033
            .saturating_add(Weight::from_parts(95_441_041, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 626_134_000 picoseconds.
        Weight::from_parts(723_901_225, 0)
            // Standard Error: 385_796
            .saturating_add(Weight::from_parts(149_985_385, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 783_529_000 picoseconds.
        Weight::from_parts(800_759_000, 0)
            // Standard Error: 64_051
            .saturating_add(Weight::from_parts(13_605_592, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_294_000 picoseconds.
        Weight::from_parts(83_532_015, 0)
            // Standard Error: 297_859
            .saturating_add(Weight::from_parts(95_697_412, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_221_000 picoseconds.
        Weight::from_parts(80_175_190, 0)
            // Standard Error: 345_619
            .saturating_add(Weight::from_parts(94_704_670, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_963_000 picoseconds.
        Weight::from_parts(98_855_775, 0)
            // Standard Error: 387_052
            .saturating_add(Weight::from_parts(173_279_539, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_010_000 picoseconds.
        Weight::from_parts(103_368_000, 0)
            // Standard Error: 4_257_933
            .saturating_add(Weight::from_parts(834_495_199, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_061_000 picoseconds.
        Weight::from_parts(165_336_833, 0)
            // Standard Error: 401_638
            .saturating_add(Weight::from_parts(262_725_488, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 358_452_000 picoseconds.
        Weight::from_parts(363_240_000, 0)
            // Standard Error: 67_345
            .saturating_add(Weight::from_parts(25_426_996, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_614_000 picoseconds.
        Weight::from_parts(171_425_217, 0)
            // Standard Error: 381_671
            .saturating_add(Weight::from_parts(263_139_198, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 363_781_000 picoseconds.
        Weight::from_parts(368_717_000, 0)
            // Standard Error: 62_324
            .saturating_add(Weight::from_parts(25_477_470, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 643_300_000 picoseconds.
        Weight::from_parts(804_885_147, 0)
            // Standard Error: 554_627
            .saturating_add(Weight::from_parts(281_415_379, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 621_069_000 picoseconds.
        Weight::from_parts(653_949_716, 0)
            // Standard Error: 450_680
            .saturating_add(Weight::from_parts(300_421_578, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_844_000 picoseconds.
        Weight::from_parts(85_505_959, 0)
            // Standard Error: 309_095
            .saturating_add(Weight::from_parts(101_834_799, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_022_422_000 picoseconds.
        Weight::from_parts(2_129_021_428, 0)
            // Standard Error: 292_779
            .saturating_add(Weight::from_parts(169_155_183, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 334_162_000 picoseconds.
        Weight::from_parts(339_314_000, 0)
            // Standard Error: 51_940
            .saturating_add(Weight::from_parts(34_464_502, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_005_079_000 picoseconds.
        Weight::from_parts(2_119_337_425, 0)
            // Standard Error: 283_626
            .saturating_add(Weight::from_parts(221_127_137, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_010_339_000 picoseconds.
        Weight::from_parts(2_133_769_704, 0)
            // Standard Error: 350_324
            .saturating_add(Weight::from_parts(226_273_686, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 255_476_000 picoseconds.
        Weight::from_parts(329_063_119, 0)
            // Standard Error: 677_492
            .saturating_add(Weight::from_parts(288_138_547, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 546_375_000 picoseconds.
        Weight::from_parts(559_006_000, 0)
            // Standard Error: 46_920
            .saturating_add(Weight::from_parts(24_935_517, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_135_758_000 picoseconds.
        Weight::from_parts(2_271_204_319, 0)
            // Standard Error: 354_578
            .saturating_add(Weight::from_parts(244_423_447, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_374_000 picoseconds.
        Weight::from_parts(101_438_053, 0)
            // Standard Error: 450_640
            .saturating_add(Weight::from_parts(23_328_146, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 118_268_000 picoseconds.
        Weight::from_parts(111_844_396, 0)
            // Standard Error: 966
            .saturating_add(Weight::from_parts(485_997, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_283_000 picoseconds.
        Weight::from_parts(101_492_014, 0)
            // Standard Error: 441_269
            .saturating_add(Weight::from_parts(21_249_185, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 119_098_000 picoseconds.
        Weight::from_parts(104_926_576, 0)
            // Standard Error: 1_015
            .saturating_add(Weight::from_parts(492_494, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_576_000 picoseconds.
        Weight::from_parts(102_261_508, 0)
            // Standard Error: 472_121
            .saturating_add(Weight::from_parts(18_072_691, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_580_000 picoseconds.
        Weight::from_parts(99_638_461, 0)
            // Standard Error: 424_299
            .saturating_add(Weight::from_parts(20_169_838, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_543_000 picoseconds.
        Weight::from_parts(143_407_012, 0)
            // Standard Error: 438_443
            .saturating_add(Weight::from_parts(154_762_913, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 116_260_000 picoseconds.
        Weight::from_parts(118_465_000, 0)
            // Standard Error: 2_452
            .saturating_add(Weight::from_parts(677_516, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 565_243_000 picoseconds.
        Weight::from_parts(591_709_365, 0)
            // Standard Error: 2_633_787
            .saturating_add(Weight::from_parts(9_397_034, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 563_690_000 picoseconds.
        Weight::from_parts(587_530_712, 0)
            // Standard Error: 2_851_715
            .saturating_add(Weight::from_parts(12_193_787, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_693_000 picoseconds.
        Weight::from_parts(112_203_932, 0)
            // Standard Error: 453_215
            .saturating_add(Weight::from_parts(7_087_667, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 118_767_000 picoseconds.
        Weight::from_parts(108_911_053, 0)
            // Standard Error: 898
            .saturating_add(Weight::from_parts(485_016, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_213_000 picoseconds.
        Weight::from_parts(111_607_483, 0)
            // Standard Error: 461_565
            .saturating_add(Weight::from_parts(12_068_816, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 119_750_000 picoseconds.
        Weight::from_parts(102_048_359, 0)
            // Standard Error: 1_120
            .saturating_add(Weight::from_parts(491_425, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_481_000 picoseconds.
        Weight::from_parts(80_173_720, 0)
            // Standard Error: 332_491
            .saturating_add(Weight::from_parts(97_566_781, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_358_000 picoseconds.
        Weight::from_parts(100_093_298, 0)
            // Standard Error: 22_715
            .saturating_add(Weight::from_parts(3_086_339, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_787_000 picoseconds.
        Weight::from_parts(99_722_448, 0)
            // Standard Error: 20_664
            .saturating_add(Weight::from_parts(3_093_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 570_565_000 picoseconds.
        Weight::from_parts(622_298_279, 0)
            // Standard Error: 433_982
            .saturating_add(Weight::from_parts(114_852_714, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 587_283_000 picoseconds.
        Weight::from_parts(606_466_422, 0)
            // Standard Error: 1_634
            .saturating_add(Weight::from_parts(122_082, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_470_320_000 picoseconds.
        Weight::from_parts(2_659_620_438, 0)
            // Standard Error: 558_347
            .saturating_add(Weight::from_parts(131_708_833, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_597_085_000 picoseconds.
        Weight::from_parts(2_405_990_575, 0)
            // Standard Error: 16_599
            .saturating_add(Weight::from_parts(12_423_295, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_611_000 picoseconds.
        Weight::from_parts(119_997_529, 0)
            // Standard Error: 367_602
            .saturating_add(Weight::from_parts(113_576_138, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 160_153_000 picoseconds.
        Weight::from_parts(162_615_000, 0)
            // Standard Error: 56_922
            .saturating_add(Weight::from_parts(30_446_751, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_648_000 picoseconds.
        Weight::from_parts(81_448_415, 0)
            // Standard Error: 326_095
            .saturating_add(Weight::from_parts(93_900_832, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_186_000 picoseconds.
        Weight::from_parts(100_856_024, 0)
            // Standard Error: 442_255
            .saturating_add(Weight::from_parts(23_673_075, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_391_000 picoseconds.
        Weight::from_parts(102_089_728, 0)
            // Standard Error: 440_387
            .saturating_add(Weight::from_parts(17_820_271, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_818_000 picoseconds.
        Weight::from_parts(102_176_446, 0)
            // Standard Error: 494_572
            .saturating_add(Weight::from_parts(15_980_953, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_725_000 picoseconds.
        Weight::from_parts(101_139_400, 0)
            // Standard Error: 464_794
            .saturating_add(Weight::from_parts(14_447_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_009_000 picoseconds.
        Weight::from_parts(100_765_548, 0)
            // Standard Error: 469_944
            .saturating_add(Weight::from_parts(15_333_051, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 148_240_000 picoseconds.
        Weight::from_parts(231_522_967, 0)
            // Standard Error: 229_229
            .saturating_add(Weight::from_parts(160_602_189, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_010_000 picoseconds.
        Weight::from_parts(180_847_533, 0)
            // Standard Error: 392_577
            .saturating_add(Weight::from_parts(346_829_521, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_366_666_000 picoseconds.
        Weight::from_parts(50_491_840_000, 0)
            // Standard Error: 301_931
            .saturating_add(Weight::from_parts(9_559_087, 0).saturating_mul(p.into()))
            // Standard Error: 301_917
            .saturating_add(Weight::from_parts(179_634_659, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_513_000 picoseconds.
        Weight::from_parts(176_499_542, 0)
            // Standard Error: 346_078
            .saturating_add(Weight::from_parts(352_475_537, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 53_153_464_000 picoseconds.
        Weight::from_parts(53_346_203_000, 0)
            // Standard Error: 344_548
            .saturating_add(Weight::from_parts(8_841_641, 0).saturating_mul(p.into()))
            // Standard Error: 344_531
            .saturating_add(Weight::from_parts(178_765_266, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_526_000 picoseconds.
        Weight::from_parts(114_029_675, 0)
            // Standard Error: 36_051
            .saturating_add(Weight::from_parts(2_102_350, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 92_945_000 picoseconds.
        Weight::from_parts(89_153_421, 1131)
            // Standard Error: 19_621
            .saturating_add(Weight::from_parts(16_209_214, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 92_666_000 picoseconds.
        Weight::from_parts(94_724_000, 1131)
            // Standard Error: 46_723
            .saturating_add(Weight::from_parts(43_625_238, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_042_235_000 picoseconds.
        Weight::from_parts(8_201_262_850, 5069931)
            // Standard Error: 64_877
            .saturating_add(Weight::from_parts(42_510_312, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 97_329_000 picoseconds.
        Weight::from_parts(99_837_000, 1939)
            // Standard Error: 101_696
            .saturating_add(Weight::from_parts(55_597_646, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 97_855_000 picoseconds.
        Weight::from_parts(108_667_208, 1131)
            // Standard Error: 68_977
            .saturating_add(Weight::from_parts(42_691_307, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 612_433_000 picoseconds.
        Weight::from_parts(604_959_792, 1496)
            // Standard Error: 267_843
            .saturating_add(Weight::from_parts(52_154_607, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_116_449_000 picoseconds.
        Weight::from_parts(1_149_705_736, 317931)
            // Standard Error: 174_740
            .saturating_add(Weight::from_parts(51_435_674, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_549_000 picoseconds.
        Weight::from_parts(7_701_088, 0)
            // Standard Error: 319_466
            .saturating_add(Weight::from_parts(74_620_336, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_424_710_000 picoseconds.
        Weight::from_parts(4_210_866_475, 0)
            // Standard Error: 71_866
            .saturating_add(Weight::from_parts(5_451_180, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_408_046_000 picoseconds.
        Weight::from_parts(4_225_548_079, 0)
            // Standard Error: 77_886
            .saturating_add(Weight::from_parts(5_434_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_148_028_000 picoseconds.
        Weight::from_parts(11_489_166_190, 0)
            // Standard Error: 231_245
            .saturating_add(Weight::from_parts(10_674_672, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_836_694_000 picoseconds.
        Weight::from_parts(11_649_184_831, 0)
            // Standard Error: 191_595
            .saturating_add(Weight::from_parts(9_290_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_453_000 picoseconds.
        Weight::from_parts(2_509_000, 0)
            // Standard Error: 9_442
            .saturating_add(Weight::from_parts(3_806_814, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_476_000 picoseconds.
        Weight::from_parts(2_538_000, 0)
            // Standard Error: 5_737
            .saturating_add(Weight::from_parts(3_080_935, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_426_000 picoseconds.
        Weight::from_parts(3_093_309, 0)
            // Standard Error: 7_440
            .saturating_add(Weight::from_parts(1_597_176, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_393_000 picoseconds.
        Weight::from_parts(2_504_000, 0)
            // Standard Error: 9_079
            .saturating_add(Weight::from_parts(2_886_272, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_448_000 picoseconds.
        Weight::from_parts(1_267_345, 0)
            // Standard Error: 14_704
            .saturating_add(Weight::from_parts(5_154_623, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_141_000 picoseconds.
        Weight::from_parts(6_725_395, 0)
            // Standard Error: 1_756
            .saturating_add(Weight::from_parts(107_149, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_536_000 picoseconds.
        Weight::from_parts(4_053_835, 0)
            // Standard Error: 5_941
            .saturating_add(Weight::from_parts(2_579_253, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_579_253 -
            2_418_557, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_444_000 picoseconds.
        Weight::from_parts(4_268_875, 0)
            // Standard Error: 12_209
            .saturating_add(Weight::from_parts(2_418_557, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_826_000 picoseconds.
        Weight::from_parts(12_347_808, 0)
            // Standard Error: 24_672
            .saturating_add(Weight::from_parts(10_107_071, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_185_000 picoseconds.
        Weight::from_parts(13_181_000, 0)
            // Standard Error: 6_735
            .saturating_add(Weight::from_parts(1_098_863, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_487_000 picoseconds.
        Weight::from_parts(5_775_413, 0)
            // Standard Error: 13
            .saturating_add(Weight::from_parts(14, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_100_000 picoseconds.
        Weight::from_parts(5_773_427, 0)
            // Standard Error: 2_602
            .saturating_add(Weight::from_parts(393_871, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_076_000 picoseconds.
        Weight::from_parts(4_015_115, 0)
            // Standard Error: 6_342
            .saturating_add(Weight::from_parts(979_041, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_953_000 picoseconds.
        Weight::from_parts(4_210_143, 0)
            // Standard Error: 5_708
            .saturating_add(Weight::from_parts(994_209, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_436_000 picoseconds.
        Weight::from_parts(2_991_203, 0)
            // Standard Error: 8_505
            .saturating_add(Weight::from_parts(765_914, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_530_000 picoseconds.
        Weight::from_parts(6_681_000, 0)
            // Standard Error: 8_482
            .saturating_add(Weight::from_parts(1_346_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_536_000 picoseconds.
        Weight::from_parts(624_081, 0)
            // Standard Error: 12_896
            .saturating_add(Weight::from_parts(7_255_925, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_376_000 picoseconds.
        Weight::from_parts(2_480_000, 0)
            // Standard Error: 7_649
            .saturating_add(Weight::from_parts(3_371_261, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_475_000 picoseconds.
        Weight::from_parts(2_538_000, 0)
            // Standard Error: 7_977
            .saturating_add(Weight::from_parts(3_092_914, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_318_000 picoseconds.
        Weight::from_parts(2_466_000, 0)
            // Standard Error: 6_725
            .saturating_add(Weight::from_parts(3_134_184, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_482_000 picoseconds.
        Weight::from_parts(2_528_000, 0)
            // Standard Error: 4_957
            .saturating_add(Weight::from_parts(2_637_643, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_401_000 picoseconds.
        Weight::from_parts(2_521_000, 0)
            // Standard Error: 4_161
            .saturating_add(Weight::from_parts(576_227, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_404_000 picoseconds.
        Weight::from_parts(1_597_494, 0)
            // Standard Error: 4_378
            .saturating_add(Weight::from_parts(387_728, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_443_000 picoseconds.
        Weight::from_parts(2_573_000, 0)
            // Standard Error: 12_195
            .saturating_add(Weight::from_parts(1_874_801, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_478_000 picoseconds.
        Weight::from_parts(2_567_000, 0)
            // Standard Error: 9_231
            .saturating_add(Weight::from_parts(1_340_556, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_497_000 picoseconds.
        Weight::from_parts(736_487, 0)
            // Standard Error: 4_831
            .saturating_add(Weight::from_parts(488_417, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_414_000 picoseconds.
        Weight::from_parts(821_077, 0)
            // Standard Error: 4_817
            .saturating_add(Weight::from_parts(489_681, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_431_000 picoseconds.
        Weight::from_parts(2_508_000, 0)
            // Standard Error: 4_598
            .saturating_add(Weight::from_parts(593_522, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_379_000 picoseconds.
        Weight::from_parts(2_447_000, 0)
            // Standard Error: 4_636
            .saturating_add(Weight::from_parts(611_579, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_380_000 picoseconds.
        Weight::from_parts(2_529_000, 0)
            // Standard Error: 5_027
            .saturating_add(Weight::from_parts(557_814, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_422_000 picoseconds.
        Weight::from_parts(1_496_977, 0)
            // Standard Error: 3_958
            .saturating_add(Weight::from_parts(379_852, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_398_000 picoseconds.
        Weight::from_parts(2_711_200, 0)
            // Standard Error: 2_145
            .saturating_add(Weight::from_parts(193_678, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_435_000 picoseconds.
        Weight::from_parts(2_731_744, 0)
            // Standard Error: 2_619
            .saturating_add(Weight::from_parts(200_971, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_433_000 picoseconds.
        Weight::from_parts(2_508_000, 0)
            // Standard Error: 17_543
            .saturating_add(Weight::from_parts(2_133_112, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_381_000 picoseconds.
        Weight::from_parts(2_518_000, 0)
            // Standard Error: 12_154
            .saturating_add(Weight::from_parts(1_476_485, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_392_000 picoseconds.
        Weight::from_parts(2_518_000, 0)
            // Standard Error: 7_059
            .saturating_add(Weight::from_parts(2_159_206, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_487_000 picoseconds.
        Weight::from_parts(2_597_000, 0)
            // Standard Error: 7_916
            .saturating_add(Weight::from_parts(1_343_952, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_475_000 picoseconds.
        Weight::from_parts(2_536_000, 0)
            // Standard Error: 10_384
            .saturating_add(Weight::from_parts(2_083_298, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_405_000 picoseconds.
        Weight::from_parts(2_449_000, 0)
            // Standard Error: 8_386
            .saturating_add(Weight::from_parts(1_351_334, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_413_000 picoseconds.
        Weight::from_parts(2_485_000, 0)
            // Standard Error: 9_936
            .saturating_add(Weight::from_parts(2_055_839, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_481_000 picoseconds.
        Weight::from_parts(2_523_000, 0)
            // Standard Error: 8_977
            .saturating_add(Weight::from_parts(1_378_769, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_379_000 picoseconds.
        Weight::from_parts(2_465_000, 0)
            // Standard Error: 10_396
            .saturating_add(Weight::from_parts(2_076_548, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_435_000 picoseconds.
        Weight::from_parts(2_516_000, 0)
            // Standard Error: 8_342
            .saturating_add(Weight::from_parts(1_341_338, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_423_000 picoseconds.
        Weight::from_parts(2_506_000, 0)
            // Standard Error: 9_583
            .saturating_add(Weight::from_parts(2_075_331, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_410_000 picoseconds.
        Weight::from_parts(2_497_000, 0)
            // Standard Error: 13_439
            .saturating_add(Weight::from_parts(1_551_125, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_435_000 picoseconds.
        Weight::from_parts(2_507_000, 0)
            // Standard Error: 8_885
            .saturating_add(Weight::from_parts(1_997_656, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_365_000 picoseconds.
        Weight::from_parts(2_442_000, 0)
            // Standard Error: 8_249
            .saturating_add(Weight::from_parts(1_158_437, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_347_000 picoseconds.
        Weight::from_parts(2_451_000, 0)
            // Standard Error: 12_926
            .saturating_add(Weight::from_parts(1_923_796, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_456_000 picoseconds.
        Weight::from_parts(2_518_000, 0)
            // Standard Error: 10_247
            .saturating_add(Weight::from_parts(1_141_969, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_426_000 picoseconds.
        Weight::from_parts(2_458_000, 0)
            // Standard Error: 12_252
            .saturating_add(Weight::from_parts(1_935_177, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_514_000 picoseconds.
        Weight::from_parts(2_619_000, 0)
            // Standard Error: 14_990
            .saturating_add(Weight::from_parts(1_684_378, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_468_000 picoseconds.
        Weight::from_parts(2_500_000, 0)
            // Standard Error: 19_087
            .saturating_add(Weight::from_parts(2_336_173, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_473_000 picoseconds.
        Weight::from_parts(2_531_000, 0)
            // Standard Error: 12_303
            .saturating_add(Weight::from_parts(1_623_449, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_380_000 picoseconds.
        Weight::from_parts(2_483_000, 0)
            // Standard Error: 7_129
            .saturating_add(Weight::from_parts(1_456_399, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_380_000 picoseconds.
        Weight::from_parts(2_489_000, 0)
            // Standard Error: 3_916
            .saturating_add(Weight::from_parts(643_079, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_473_000 picoseconds.
        Weight::from_parts(2_508_000, 0)
            // Standard Error: 9_875
            .saturating_add(Weight::from_parts(1_319_115, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_387_000 picoseconds.
        Weight::from_parts(2_488_000, 0)
            // Standard Error: 4_461
            .saturating_add(Weight::from_parts(633_370, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_451_000 picoseconds.
        Weight::from_parts(2_512_000, 0)
            // Standard Error: 13_733
            .saturating_add(Weight::from_parts(1_853_732, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_435_000 picoseconds.
        Weight::from_parts(2_499_000, 0)
            // Standard Error: 8_560
            .saturating_add(Weight::from_parts(1_256_398, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_398_000 picoseconds.
        Weight::from_parts(2_500_000, 0)
            // Standard Error: 8_969
            .saturating_add(Weight::from_parts(2_752_371, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_467_000 picoseconds.
        Weight::from_parts(2_558_000, 0)
            // Standard Error: 7_371
            .saturating_add(Weight::from_parts(2_449_354, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_481_000 picoseconds.
        Weight::from_parts(2_553_000, 0)
            // Standard Error: 10_796
            .saturating_add(Weight::from_parts(2_977_282, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_429_000 picoseconds.
        Weight::from_parts(2_511_000, 0)
            // Standard Error: 10_666
            .saturating_add(Weight::from_parts(2_483_088, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_387_000 picoseconds.
        Weight::from_parts(2_495_000, 0)
            // Standard Error: 15_593
            .saturating_add(Weight::from_parts(9_415_186, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_405_000 picoseconds.
        Weight::from_parts(2_492_000, 0)
            // Standard Error: 24_727
            .saturating_add(Weight::from_parts(7_511_201, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_370_000 picoseconds.
        Weight::from_parts(1_366_085, 0)
            // Standard Error: 16_737
            .saturating_add(Weight::from_parts(3_021_269, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_471_000 picoseconds.
        Weight::from_parts(2_577_000, 0)
            // Standard Error: 7_450
            .saturating_add(Weight::from_parts(2_509_585, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_445_000 picoseconds.
        Weight::from_parts(2_486_000, 0)
            // Standard Error: 10_582
            .saturating_add(Weight::from_parts(1_260_828, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_420_000 picoseconds.
        Weight::from_parts(2_486_000, 0)
            // Standard Error: 5_156
            .saturating_add(Weight::from_parts(636_089, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(2_446_000, 0)
            // Standard Error: 11_307
            .saturating_add(Weight::from_parts(1_296_900, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(2_481_000, 0)
            // Standard Error: 5_573
            .saturating_add(Weight::from_parts(625_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_400_000 picoseconds.
        Weight::from_parts(2_506_000, 0)
            // Standard Error: 9_353
            .saturating_add(Weight::from_parts(1_284_322, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_424_000 picoseconds.
        Weight::from_parts(2_487_000, 0)
            // Standard Error: 5_249
            .saturating_add(Weight::from_parts(635_535, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_400_000 picoseconds.
        Weight::from_parts(2_507_000, 0)
            // Standard Error: 8_007
            .saturating_add(Weight::from_parts(1_100_558, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_451_000 picoseconds.
        Weight::from_parts(2_510_000, 0)
            // Standard Error: 4_669
            .saturating_add(Weight::from_parts(571_797, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_418_000 picoseconds.
        Weight::from_parts(2_510_000, 0)
            // Standard Error: 8_392
            .saturating_add(Weight::from_parts(1_088_453, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_496_000 picoseconds.
        Weight::from_parts(2_555_000, 0)
            // Standard Error: 5_142
            .saturating_add(Weight::from_parts(568_114, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_445_000 picoseconds.
        Weight::from_parts(2_523_000, 0)
            // Standard Error: 7_691
            .saturating_add(Weight::from_parts(1_078_926, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_405_000 picoseconds.
        Weight::from_parts(2_463_000, 0)
            // Standard Error: 4_297
            .saturating_add(Weight::from_parts(580_611, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_417_000 picoseconds.
        Weight::from_parts(2_498_000, 0)
            // Standard Error: 9_567
            .saturating_add(Weight::from_parts(1_086_852, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_507_000 picoseconds.
        Weight::from_parts(2_523_000, 0)
            // Standard Error: 4_669
            .saturating_add(Weight::from_parts(542_863, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_483_000 picoseconds.
        Weight::from_parts(2_573_000, 0)
            // Standard Error: 7_084
            .saturating_add(Weight::from_parts(1_088_880, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_458_000 picoseconds.
        Weight::from_parts(2_553_000, 0)
            // Standard Error: 4_359
            .saturating_add(Weight::from_parts(576_728, 0).saturating_mul(r.into()))
    }
}
