// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-08-07, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_017_000 picoseconds.
        Weight::from_parts(1_119_000, 0)
            // Standard Error: 761
            .saturating_add(Weight::from_parts(209_074, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3577 + c * (1024 ±0)`
        // Minimum execution time: 3_299_000 picoseconds.
        Weight::from_parts(3_409_000, 3577)
            // Standard Error: 809
            .saturating_add(Weight::from_parts(667_635, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_278_000 picoseconds.
        Weight::from_parts(73_427_731, 0)
            // Standard Error: 6_473
            .saturating_add(Weight::from_parts(2_331_768, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1050`
        //  Estimated: `42875`
        // Minimum execution time: 81_857_000 picoseconds.
        Weight::from_parts(83_494_000, 42875)
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `958`
        //  Estimated: `21477`
        // Minimum execution time: 53_880_000 picoseconds.
        Weight::from_parts(55_703_000, 21477)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `605`
        //  Estimated: `17354`
        // Minimum execution time: 28_976_000 picoseconds.
        Weight::from_parts(30_055_000, 17354)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 7_954_000 picoseconds.
        Weight::from_parts(9_206_629, 7640)
            // Standard Error: 40_915
            .saturating_add(Weight::from_parts(13_218_946, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1439 + c * (16389 ±0)`
        //  Estimated: `42034 + c * (131112 ±0)`
        // Minimum execution time: 69_036_000 picoseconds.
        Weight::from_parts(70_072_000, 42034)
            // Standard Error: 149_794
            .saturating_add(Weight::from_parts(52_674_750, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `5270`
        // Minimum execution time: 61_042_000 picoseconds.
        Weight::from_parts(42_647_149, 5270)
            // Standard Error: 41_151
            .saturating_add(Weight::from_parts(51_906_843, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `742`
        //  Estimated: `39419`
        // Minimum execution time: 62_956_000 picoseconds.
        Weight::from_parts(74_593_794, 39419)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_594, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `306`
        //  Estimated: `35235`
        // Minimum execution time: 10_939_548_000 picoseconds.
        Weight::from_parts(505_483_291, 35235)
            // Standard Error: 158_935
            .saturating_add(Weight::from_parts(51_999_053, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_500, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `349`
        //  Estimated: `23860`
        // Minimum execution time: 54_714_000 picoseconds.
        Weight::from_parts(39_682_905, 23860)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(1_012, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1049`
        //  Estimated: `42866`
        // Minimum execution time: 82_073_000 picoseconds.
        Weight::from_parts(66_860_069, 42866)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_035, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `85981`
        // Minimum execution time: 316_122_000 picoseconds.
        Weight::from_parts(330_387_653, 85981)
            // Standard Error: 1_030
            .saturating_add(Weight::from_parts(2_167, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(29_u64))
            .saturating_add(T::DbWeight::get().writes(23_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `85905`
        // Minimum execution time: 327_296_000 picoseconds.
        Weight::from_parts(344_778_587, 85905)
            .saturating_add(T::DbWeight::get().reads(29_u64))
            .saturating_add(T::DbWeight::get().writes(23_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 45_031_000 picoseconds.
        Weight::from_parts(45_572_000, 3899)
            // Standard Error: 24_669
            .saturating_add(Weight::from_parts(50_090_777, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_663_000 picoseconds.
        Weight::from_parts(84_983_000, 0)
            // Standard Error: 4_066_232
            .saturating_add(Weight::from_parts(564_447_416, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 311_448_000 picoseconds.
        Weight::from_parts(245_631_815, 0)
            // Standard Error: 7_937
            .saturating_add(Weight::from_parts(30_896_737, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 149_067_000 picoseconds.
        Weight::from_parts(130_181_921, 0)
            // Standard Error: 294_281
            .saturating_add(Weight::from_parts(60_998_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_222_000 picoseconds.
        Weight::from_parts(94_195_714, 0)
            // Standard Error: 3_616
            .saturating_add(Weight::from_parts(2_672_494, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 139_429_000 picoseconds.
        Weight::from_parts(171_049_360, 0)
            // Standard Error: 31_588
            .saturating_add(Weight::from_parts(2_923_269, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_992_000 picoseconds.
        Weight::from_parts(115_936_976, 0)
            // Standard Error: 414_340
            .saturating_add(Weight::from_parts(116_785_346, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_790_000 picoseconds.
        Weight::from_parts(90_746_200, 0)
            // Standard Error: 270_835
            .saturating_add(Weight::from_parts(107_416_174, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_210_000 picoseconds.
        Weight::from_parts(91_082_335, 0)
            // Standard Error: 211_867
            .saturating_add(Weight::from_parts(104_318_383, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_806_000 picoseconds.
        Weight::from_parts(85_438_969, 0)
            // Standard Error: 248_652
            .saturating_add(Weight::from_parts(105_330_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_654_000 picoseconds.
        Weight::from_parts(82_257_210, 0)
            // Standard Error: 336_548
            .saturating_add(Weight::from_parts(106_454_200, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_452_000 picoseconds.
        Weight::from_parts(82_661_045, 0)
            // Standard Error: 286_452
            .saturating_add(Weight::from_parts(105_467_642, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_893_000 picoseconds.
        Weight::from_parts(81_216_834, 0)
            // Standard Error: 315_266
            .saturating_add(Weight::from_parts(107_016_702, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_282_000 picoseconds.
        Weight::from_parts(82_548_887, 0)
            // Standard Error: 341_172
            .saturating_add(Weight::from_parts(105_504_622, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 556_352_000 picoseconds.
        Weight::from_parts(607_493_748, 0)
            // Standard Error: 448_674
            .saturating_add(Weight::from_parts(184_670_390, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 714_496_000 picoseconds.
        Weight::from_parts(722_520_000, 0)
            // Standard Error: 46_538
            .saturating_add(Weight::from_parts(13_033_234, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_627_000 picoseconds.
        Weight::from_parts(85_563_243, 0)
            // Standard Error: 311_752
            .saturating_add(Weight::from_parts(105_877_332, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_852_000 picoseconds.
        Weight::from_parts(84_860_381, 0)
            // Standard Error: 321_988
            .saturating_add(Weight::from_parts(105_008_310, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_396_000 picoseconds.
        Weight::from_parts(89_972_413, 0)
            // Standard Error: 338_324
            .saturating_add(Weight::from_parts(184_316_536, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_385_000 picoseconds.
        Weight::from_parts(90_760_000, 0)
            // Standard Error: 4_378_367
            .saturating_add(Weight::from_parts(914_427_461, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_060_000 picoseconds.
        Weight::from_parts(138_647_807, 0)
            // Standard Error: 449_220
            .saturating_add(Weight::from_parts(301_188_566, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 391_797_000 picoseconds.
        Weight::from_parts(394_943_000, 0)
            // Standard Error: 58_663
            .saturating_add(Weight::from_parts(21_187_774, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_418_000 picoseconds.
        Weight::from_parts(149_848_797, 0)
            // Standard Error: 459_492
            .saturating_add(Weight::from_parts(308_230_219, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 390_635_000 picoseconds.
        Weight::from_parts(395_782_000, 0)
            // Standard Error: 61_326
            .saturating_add(Weight::from_parts(20_818_419, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 561_280_000 picoseconds.
        Weight::from_parts(634_390_717, 0)
            // Standard Error: 473_236
            .saturating_add(Weight::from_parts(316_661_157, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 559_804_000 picoseconds.
        Weight::from_parts(650_695_494, 0)
            // Standard Error: 489_218
            .saturating_add(Weight::from_parts(321_789_584, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_345_000 picoseconds.
        Weight::from_parts(74_080_057, 0)
            // Standard Error: 328_119
            .saturating_add(Weight::from_parts(116_742_827, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_307_192_000 picoseconds.
        Weight::from_parts(2_419_334_440, 0)
            // Standard Error: 484_032
            .saturating_add(Weight::from_parts(211_293_866, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 346_160_000 picoseconds.
        Weight::from_parts(348_777_000, 0)
            // Standard Error: 58_661
            .saturating_add(Weight::from_parts(29_434_095, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_292_607_000 picoseconds.
        Weight::from_parts(2_434_102_108, 0)
            // Standard Error: 502_502
            .saturating_add(Weight::from_parts(264_859_383, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_289_426_000 picoseconds.
        Weight::from_parts(2_437_443_919, 0)
            // Standard Error: 471_320
            .saturating_add(Weight::from_parts(268_510_540, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 242_827_000 picoseconds.
        Weight::from_parts(291_906_943, 0)
            // Standard Error: 419_132
            .saturating_add(Weight::from_parts(316_375_969, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 554_876_000 picoseconds.
        Weight::from_parts(559_277_000, 0)
            // Standard Error: 59_610
            .saturating_add(Weight::from_parts(21_490_976, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_443_317_000 picoseconds.
        Weight::from_parts(2_625_227_536, 0)
            // Standard Error: 511_289
            .saturating_add(Weight::from_parts(283_117_268, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_099_000 picoseconds.
        Weight::from_parts(88_574_604, 0)
            // Standard Error: 274_173
            .saturating_add(Weight::from_parts(20_834_495, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_246_000 picoseconds.
        Weight::from_parts(90_382_254, 0)
            // Standard Error: 1_257
            .saturating_add(Weight::from_parts(428_781, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_454_000 picoseconds.
        Weight::from_parts(90_235_951, 0)
            // Standard Error: 256_364
            .saturating_add(Weight::from_parts(14_555_548, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_189_000 picoseconds.
        Weight::from_parts(91_177_961, 0)
            // Standard Error: 1_127
            .saturating_add(Weight::from_parts(424_751, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_893_000 picoseconds.
        Weight::from_parts(88_684_789, 0)
            // Standard Error: 287_468
            .saturating_add(Weight::from_parts(16_661_810, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_534_000 picoseconds.
        Weight::from_parts(88_923_020, 0)
            // Standard Error: 249_896
            .saturating_add(Weight::from_parts(19_208_979, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_229_000 picoseconds.
        Weight::from_parts(120_908_395, 0)
            // Standard Error: 327_109
            .saturating_add(Weight::from_parts(190_143_835, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_549_000 picoseconds.
        Weight::from_parts(100_553_000, 0)
            // Standard Error: 2_727
            .saturating_add(Weight::from_parts(616_949, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 553_918_000 picoseconds.
        Weight::from_parts(572_988_848, 0)
            // Standard Error: 2_210_952
            .saturating_add(Weight::from_parts(30_333_551, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 552_664_000 picoseconds.
        Weight::from_parts(571_824_067, 0)
            // Standard Error: 1_981_598
            .saturating_add(Weight::from_parts(28_343_432, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_114_000 picoseconds.
        Weight::from_parts(99_799_695, 0)
            // Standard Error: 263_342
            .saturating_add(Weight::from_parts(5_959_704, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_595_000 picoseconds.
        Weight::from_parts(94_900_895, 0)
            // Standard Error: 1_221
            .saturating_add(Weight::from_parts(425_729, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_123_000 picoseconds.
        Weight::from_parts(99_068_002, 0)
            // Standard Error: 278_340
            .saturating_add(Weight::from_parts(6_056_397, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_148_000 picoseconds.
        Weight::from_parts(93_583_351, 0)
            // Standard Error: 1_048
            .saturating_add(Weight::from_parts(420_112, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_951_000 picoseconds.
        Weight::from_parts(80_983_069, 0)
            // Standard Error: 260_297
            .saturating_add(Weight::from_parts(114_164_207, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_991_000 picoseconds.
        Weight::from_parts(83_808_552, 0)
            // Standard Error: 291_596
            .saturating_add(Weight::from_parts(107_977_269, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 555_192_000 picoseconds.
        Weight::from_parts(637_741_196, 0)
            // Standard Error: 498_770
            .saturating_add(Weight::from_parts(126_311_515, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 567_642_000 picoseconds.
        Weight::from_parts(587_862_774, 0)
            // Standard Error: 1_100
            .saturating_add(Weight::from_parts(120_318, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_764_152_000 picoseconds.
        Weight::from_parts(2_885_803_691, 0)
            // Standard Error: 562_616
            .saturating_add(Weight::from_parts(154_883_526, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_942_765_000 picoseconds.
        Weight::from_parts(2_852_597_513, 0)
            // Standard Error: 14_069
            .saturating_add(Weight::from_parts(12_388_759, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_236_000 picoseconds.
        Weight::from_parts(108_121_903, 0)
            // Standard Error: 338_552
            .saturating_add(Weight::from_parts(130_391_399, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 143_555_000 picoseconds.
        Weight::from_parts(145_256_000, 0)
            // Standard Error: 61_456
            .saturating_add(Weight::from_parts(25_766_308, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_706_000 picoseconds.
        Weight::from_parts(82_734_112, 0)
            // Standard Error: 323_634
            .saturating_add(Weight::from_parts(107_133_410, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_050_000 picoseconds.
        Weight::from_parts(88_261_802, 0)
            // Standard Error: 247_640
            .saturating_add(Weight::from_parts(23_580_197, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_558_000 picoseconds.
        Weight::from_parts(90_338_028, 0)
            // Standard Error: 270_999
            .saturating_add(Weight::from_parts(15_249_771, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_250_000 picoseconds.
        Weight::from_parts(90_448_269, 0)
            // Standard Error: 274_039
            .saturating_add(Weight::from_parts(12_874_930, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_278_000 picoseconds.
        Weight::from_parts(88_025_842, 0)
            // Standard Error: 274_359
            .saturating_add(Weight::from_parts(11_610_357, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_849_000 picoseconds.
        Weight::from_parts(87_858_273, 0)
            // Standard Error: 263_624
            .saturating_add(Weight::from_parts(14_636_926, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_444_000 picoseconds.
        Weight::from_parts(198_654_906, 0)
            // Standard Error: 409_120
            .saturating_add(Weight::from_parts(200_669_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_737_000 picoseconds.
        Weight::from_parts(162_389_592, 0)
            // Standard Error: 437_002
            .saturating_add(Weight::from_parts(385_229_944, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_710_614_000 picoseconds.
        Weight::from_parts(44_848_530_000, 0)
            // Standard Error: 271_081
            .saturating_add(Weight::from_parts(7_518_236, 0).saturating_mul(p.into()))
            // Standard Error: 271_067
            .saturating_add(Weight::from_parts(176_484_363, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_935_000 picoseconds.
        Weight::from_parts(155_283_975, 0)
            // Standard Error: 398_331
            .saturating_add(Weight::from_parts(394_750_144, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_166_105_000 picoseconds.
        Weight::from_parts(43_210_411_000, 0)
            // Standard Error: 273_792
            .saturating_add(Weight::from_parts(7_685_961, 0).saturating_mul(p.into()))
            // Standard Error: 273_779
            .saturating_add(Weight::from_parts(177_206_473, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_385_000 picoseconds.
        Weight::from_parts(100_368_488, 0)
            // Standard Error: 25_882
            .saturating_add(Weight::from_parts(2_517_495, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 86_723_000 picoseconds.
        Weight::from_parts(112_959_650, 1131)
            // Standard Error: 5_171
            .saturating_add(Weight::from_parts(11_884_248, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 85_367_000 picoseconds.
        Weight::from_parts(86_968_000, 1131)
            // Standard Error: 35_935
            .saturating_add(Weight::from_parts(35_294_476, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_166_740_000 picoseconds.
        Weight::from_parts(5_878_966_706, 5069931)
            // Standard Error: 72_748
            .saturating_add(Weight::from_parts(35_598_278, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 84_509_000 picoseconds.
        Weight::from_parts(86_396_000, 1939)
            // Standard Error: 37_909
            .saturating_add(Weight::from_parts(46_229_201, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 89_570_000 picoseconds.
        Weight::from_parts(91_679_907, 1131)
            // Standard Error: 74_102
            .saturating_add(Weight::from_parts(36_034_356, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 581_516_000 picoseconds.
        Weight::from_parts(574_828_964, 1496)
            // Standard Error: 226_535
            .saturating_add(Weight::from_parts(44_029_625, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 984_554_000 picoseconds.
        Weight::from_parts(1_010_300_775, 317931)
            // Standard Error: 330_750
            .saturating_add(Weight::from_parts(45_768_209, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_399_000 picoseconds.
        Weight::from_parts(2_513_898, 0)
            // Standard Error: 22_468
            .saturating_add(Weight::from_parts(24_974_238, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_354_805_000 picoseconds.
        Weight::from_parts(4_247_725_842, 0)
            // Standard Error: 49_167
            .saturating_add(Weight::from_parts(4_375_644, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_344_769_000 picoseconds.
        Weight::from_parts(4_143_583_164, 0)
            // Standard Error: 64_865
            .saturating_add(Weight::from_parts(4_885_201, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_321_597_000 picoseconds.
        Weight::from_parts(10_856_474_625, 0)
            // Standard Error: 228_480
            .saturating_add(Weight::from_parts(13_648_467, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_444_861_000 picoseconds.
        Weight::from_parts(11_811_924_847, 0)
            // Standard Error: 220_732
            .saturating_add(Weight::from_parts(8_104_347, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_102_000 picoseconds.
        Weight::from_parts(2_199_000, 0)
            // Standard Error: 8_145
            .saturating_add(Weight::from_parts(3_817_860, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_084_000 picoseconds.
        Weight::from_parts(2_171_000, 0)
            // Standard Error: 5_734
            .saturating_add(Weight::from_parts(3_044_285, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_074_000 picoseconds.
        Weight::from_parts(3_341_361, 0)
            // Standard Error: 1_168
            .saturating_add(Weight::from_parts(1_569_364, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_189_000 picoseconds.
        Weight::from_parts(2_253_000, 0)
            // Standard Error: 7_562
            .saturating_add(Weight::from_parts(2_914_810, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_131_000 picoseconds.
        Weight::from_parts(99_037, 0)
            // Standard Error: 11_949
            .saturating_add(Weight::from_parts(5_173_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_992_000 picoseconds.
        Weight::from_parts(6_256_207, 0)
            // Standard Error: 1_332
            .saturating_add(Weight::from_parts(161_069, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_106_000 picoseconds.
        Weight::from_parts(4_233_365, 0)
            // Standard Error: 7_839
            .saturating_add(Weight::from_parts(2_631_387, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_631_387 -
            2_404_882, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_192_000 picoseconds.
        Weight::from_parts(4_830_171, 0)
            // Standard Error: 12_370
            .saturating_add(Weight::from_parts(2_404_882, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_413_000 picoseconds.
        Weight::from_parts(16_855_535, 0)
            // Standard Error: 25_880
            .saturating_add(Weight::from_parts(10_029_290, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_145_000 picoseconds.
        Weight::from_parts(4_520_615, 0)
            // Standard Error: 6_765
            .saturating_add(Weight::from_parts(1_202_471, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_133_000 picoseconds.
        Weight::from_parts(5_476_163, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_117_000 picoseconds.
        Weight::from_parts(1_458_597, 0)
            // Standard Error: 3_356
            .saturating_add(Weight::from_parts(265_574, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_135_000 picoseconds.
        Weight::from_parts(2_223_000, 0)
            // Standard Error: 5_214
            .saturating_add(Weight::from_parts(766_010, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_078_000 picoseconds.
        Weight::from_parts(2_218_000, 0)
            // Standard Error: 5_801
            .saturating_add(Weight::from_parts(743_573, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_226_000 picoseconds.
        Weight::from_parts(2_093_625, 0)
            // Standard Error: 7_678
            .saturating_add(Weight::from_parts(824_956, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_201_000 picoseconds.
        Weight::from_parts(154_770, 0)
            // Standard Error: 9_398
            .saturating_add(Weight::from_parts(1_480_245, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_989_000 picoseconds.
        Weight::from_parts(2_628_082, 0)
            // Standard Error: 12_268
            .saturating_add(Weight::from_parts(6_921_043, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_086_000 picoseconds.
        Weight::from_parts(2_156_000, 0)
            // Standard Error: 5_477
            .saturating_add(Weight::from_parts(3_348_027, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_102_000 picoseconds.
        Weight::from_parts(2_163_000, 0)
            // Standard Error: 6_833
            .saturating_add(Weight::from_parts(3_134_916, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_131_000 picoseconds.
        Weight::from_parts(2_209_000, 0)
            // Standard Error: 7_612
            .saturating_add(Weight::from_parts(3_170_404, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_124_000 picoseconds.
        Weight::from_parts(2_169_000, 0)
            // Standard Error: 4_823
            .saturating_add(Weight::from_parts(2_668_874, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_159_000 picoseconds.
        Weight::from_parts(2_240_000, 0)
            // Standard Error: 3_992
            .saturating_add(Weight::from_parts(559_604, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_127_000 picoseconds.
        Weight::from_parts(1_178_239, 0)
            // Standard Error: 3_346
            .saturating_add(Weight::from_parts(416_704, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_137_000 picoseconds.
        Weight::from_parts(2_192_000, 0)
            // Standard Error: 11_707
            .saturating_add(Weight::from_parts(1_918_501, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_131_000 picoseconds.
        Weight::from_parts(2_192_000, 0)
            // Standard Error: 7_593
            .saturating_add(Weight::from_parts(1_219_931, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_124_000 picoseconds.
        Weight::from_parts(726_401, 0)
            // Standard Error: 4_086
            .saturating_add(Weight::from_parts(424_161, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_107_000 picoseconds.
        Weight::from_parts(1_225_918, 0)
            // Standard Error: 3_748
            .saturating_add(Weight::from_parts(392_373, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_168_000 picoseconds.
        Weight::from_parts(11_174, 0)
            // Standard Error: 5_816
            .saturating_add(Weight::from_parts(594_467, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_138_000 picoseconds.
        Weight::from_parts(12_680, 0)
            // Standard Error: 5_830
            .saturating_add(Weight::from_parts(595_552, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_163_000 picoseconds.
        Weight::from_parts(172_344, 0)
            // Standard Error: 5_372
            .saturating_add(Weight::from_parts(537_510, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_171_000 picoseconds.
        Weight::from_parts(459_682, 0)
            // Standard Error: 5_533
            .saturating_add(Weight::from_parts(421_155, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_157_000 picoseconds.
        Weight::from_parts(2_640_857, 0)
            // Standard Error: 2_132
            .saturating_add(Weight::from_parts(175_772, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_149_000 picoseconds.
        Weight::from_parts(2_625_890, 0)
            // Standard Error: 2_246
            .saturating_add(Weight::from_parts(177_728, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_082_000 picoseconds.
        Weight::from_parts(2_193_000, 0)
            // Standard Error: 9_664
            .saturating_add(Weight::from_parts(1_832_396, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_029_000 picoseconds.
        Weight::from_parts(2_185_000, 0)
            // Standard Error: 7_691
            .saturating_add(Weight::from_parts(1_203_465, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_146_000 picoseconds.
        Weight::from_parts(2_198_000, 0)
            // Standard Error: 10_390
            .saturating_add(Weight::from_parts(1_868_795, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_082_000 picoseconds.
        Weight::from_parts(2_133_000, 0)
            // Standard Error: 8_282
            .saturating_add(Weight::from_parts(1_199_983, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_145_000 picoseconds.
        Weight::from_parts(2_178_000, 0)
            // Standard Error: 10_175
            .saturating_add(Weight::from_parts(1_943_386, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_094_000 picoseconds.
        Weight::from_parts(2_168_000, 0)
            // Standard Error: 6_923
            .saturating_add(Weight::from_parts(1_125_091, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_200_000 picoseconds.
        Weight::from_parts(2_250_000, 0)
            // Standard Error: 11_944
            .saturating_add(Weight::from_parts(1_852_545, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_077_000 picoseconds.
        Weight::from_parts(2_121_000, 0)
            // Standard Error: 7_914
            .saturating_add(Weight::from_parts(1_171_461, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_171_000 picoseconds.
        Weight::from_parts(2_278_000, 0)
            // Standard Error: 10_701
            .saturating_add(Weight::from_parts(1_859_283, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_167_000 picoseconds.
        Weight::from_parts(2_209_000, 0)
            // Standard Error: 7_361
            .saturating_add(Weight::from_parts(1_182_113, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_202_000 picoseconds.
        Weight::from_parts(2_239_000, 0)
            // Standard Error: 12_468
            .saturating_add(Weight::from_parts(1_847_236, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_072_000 picoseconds.
        Weight::from_parts(2_164_000, 0)
            // Standard Error: 8_208
            .saturating_add(Weight::from_parts(1_117_969, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_077_000 picoseconds.
        Weight::from_parts(2_155_000, 0)
            // Standard Error: 9_963
            .saturating_add(Weight::from_parts(1_877_035, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_189_000 picoseconds.
        Weight::from_parts(2_224_000, 0)
            // Standard Error: 7_561
            .saturating_add(Weight::from_parts(1_124_600, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_157_000 picoseconds.
        Weight::from_parts(2_210_000, 0)
            // Standard Error: 11_998
            .saturating_add(Weight::from_parts(1_829_852, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_098_000 picoseconds.
        Weight::from_parts(2_189_000, 0)
            // Standard Error: 8_286
            .saturating_add(Weight::from_parts(1_189_196, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_125_000 picoseconds.
        Weight::from_parts(2_198_000, 0)
            // Standard Error: 10_056
            .saturating_add(Weight::from_parts(1_829_185, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_065_000 picoseconds.
        Weight::from_parts(2_174_000, 0)
            // Standard Error: 8_171
            .saturating_add(Weight::from_parts(1_176_701, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_141_000 picoseconds.
        Weight::from_parts(2_220_000, 0)
            // Standard Error: 9_910
            .saturating_add(Weight::from_parts(1_871_442, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_024_000 picoseconds.
        Weight::from_parts(2_166_000, 0)
            // Standard Error: 7_933
            .saturating_add(Weight::from_parts(1_156_214, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_068_000 picoseconds.
        Weight::from_parts(2_169_000, 0)
            // Standard Error: 7_815
            .saturating_add(Weight::from_parts(1_353_927, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_157_000 picoseconds.
        Weight::from_parts(2_208_000, 0)
            // Standard Error: 4_587
            .saturating_add(Weight::from_parts(635_023, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_080_000 picoseconds.
        Weight::from_parts(2_140_000, 0)
            // Standard Error: 8_399
            .saturating_add(Weight::from_parts(1_278_782, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_069_000 picoseconds.
        Weight::from_parts(2_233_000, 0)
            // Standard Error: 6_395
            .saturating_add(Weight::from_parts(682_415, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_206_000 picoseconds.
        Weight::from_parts(2_224_000, 0)
            // Standard Error: 9_477
            .saturating_add(Weight::from_parts(1_819_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_095_000 picoseconds.
        Weight::from_parts(2_219_000, 0)
            // Standard Error: 7_615
            .saturating_add(Weight::from_parts(1_207_931, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_108_000 picoseconds.
        Weight::from_parts(1_363_438, 0)
            // Standard Error: 18_139
            .saturating_add(Weight::from_parts(2_743_512, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_197_000 picoseconds.
        Weight::from_parts(726_043, 0)
            // Standard Error: 12_539
            .saturating_add(Weight::from_parts(2_447_643, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_118_000 picoseconds.
        Weight::from_parts(1_113_814, 0)
            // Standard Error: 15_837
            .saturating_add(Weight::from_parts(2_939_546, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_121_000 picoseconds.
        Weight::from_parts(2_089_486, 0)
            // Standard Error: 15_833
            .saturating_add(Weight::from_parts(2_447_304, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_200_000 picoseconds.
        Weight::from_parts(2_235_000, 0)
            // Standard Error: 16_089
            .saturating_add(Weight::from_parts(9_370_736, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_191_000 picoseconds.
        Weight::from_parts(3_207_641, 0)
            // Standard Error: 45_758
            .saturating_add(Weight::from_parts(7_437_894, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_118_000 picoseconds.
        Weight::from_parts(588_160, 0)
            // Standard Error: 17_384
            .saturating_add(Weight::from_parts(2_989_240, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_135_000 picoseconds.
        Weight::from_parts(4_961_665, 0)
            // Standard Error: 26_016
            .saturating_add(Weight::from_parts(2_253_733, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_174_000 picoseconds.
        Weight::from_parts(2_198_000, 0)
            // Standard Error: 8_661
            .saturating_add(Weight::from_parts(1_328_375, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_168_000 picoseconds.
        Weight::from_parts(2_225_000, 0)
            // Standard Error: 4_778
            .saturating_add(Weight::from_parts(648_611, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_125_000 picoseconds.
        Weight::from_parts(2_219_000, 0)
            // Standard Error: 8_338
            .saturating_add(Weight::from_parts(1_260_241, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_153_000 picoseconds.
        Weight::from_parts(2_233_000, 0)
            // Standard Error: 5_007
            .saturating_add(Weight::from_parts(642_088, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_230_000 picoseconds.
        Weight::from_parts(2_267_000, 0)
            // Standard Error: 8_196
            .saturating_add(Weight::from_parts(1_328_828, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_135_000 picoseconds.
        Weight::from_parts(2_211_000, 0)
            // Standard Error: 5_376
            .saturating_add(Weight::from_parts(693_541, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_208_000 picoseconds.
        Weight::from_parts(2_224_000, 0)
            // Standard Error: 7_393
            .saturating_add(Weight::from_parts(1_144_418, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_161_000 picoseconds.
        Weight::from_parts(2_237_000, 0)
            // Standard Error: 3_890
            .saturating_add(Weight::from_parts(589_899, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_129_000 picoseconds.
        Weight::from_parts(2_219_000, 0)
            // Standard Error: 7_182
            .saturating_add(Weight::from_parts(1_101_585, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_038_000 picoseconds.
        Weight::from_parts(2_126_000, 0)
            // Standard Error: 3_865
            .saturating_add(Weight::from_parts(588_357, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_129_000 picoseconds.
        Weight::from_parts(2_215_000, 0)
            // Standard Error: 8_265
            .saturating_add(Weight::from_parts(1_152_496, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_103_000 picoseconds.
        Weight::from_parts(2_181_000, 0)
            // Standard Error: 3_989
            .saturating_add(Weight::from_parts(614_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_133_000 picoseconds.
        Weight::from_parts(2_175_000, 0)
            // Standard Error: 6_506
            .saturating_add(Weight::from_parts(1_096_748, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_088_000 picoseconds.
        Weight::from_parts(2_154_000, 0)
            // Standard Error: 4_053
            .saturating_add(Weight::from_parts(582_323, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_120_000 picoseconds.
        Weight::from_parts(2_213_000, 0)
            // Standard Error: 6_472
            .saturating_add(Weight::from_parts(1_056_569, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_097_000 picoseconds.
        Weight::from_parts(2_192_000, 0)
            // Standard Error: 3_800
            .saturating_add(Weight::from_parts(579_517, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_017_000 picoseconds.
        Weight::from_parts(1_119_000, 0)
            // Standard Error: 761
            .saturating_add(Weight::from_parts(209_074, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3577 + c * (1024 ±0)`
        // Minimum execution time: 3_299_000 picoseconds.
        Weight::from_parts(3_409_000, 3577)
            // Standard Error: 809
            .saturating_add(Weight::from_parts(667_635, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_278_000 picoseconds.
        Weight::from_parts(73_427_731, 0)
            // Standard Error: 6_473
            .saturating_add(Weight::from_parts(2_331_768, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1050`
        //  Estimated: `42875`
        // Minimum execution time: 81_857_000 picoseconds.
        Weight::from_parts(83_494_000, 42875)
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `958`
        //  Estimated: `21477`
        // Minimum execution time: 53_880_000 picoseconds.
        Weight::from_parts(55_703_000, 21477)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `605`
        //  Estimated: `17354`
        // Minimum execution time: 28_976_000 picoseconds.
        Weight::from_parts(30_055_000, 17354)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 7_954_000 picoseconds.
        Weight::from_parts(9_206_629, 7640)
            // Standard Error: 40_915
            .saturating_add(Weight::from_parts(13_218_946, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1439 + c * (16389 ±0)`
        //  Estimated: `42034 + c * (131112 ±0)`
        // Minimum execution time: 69_036_000 picoseconds.
        Weight::from_parts(70_072_000, 42034)
            // Standard Error: 149_794
            .saturating_add(Weight::from_parts(52_674_750, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `5270`
        // Minimum execution time: 61_042_000 picoseconds.
        Weight::from_parts(42_647_149, 5270)
            // Standard Error: 41_151
            .saturating_add(Weight::from_parts(51_906_843, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `742`
        //  Estimated: `39419`
        // Minimum execution time: 62_956_000 picoseconds.
        Weight::from_parts(74_593_794, 39419)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_594, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `306`
        //  Estimated: `35235`
        // Minimum execution time: 10_939_548_000 picoseconds.
        Weight::from_parts(505_483_291, 35235)
            // Standard Error: 158_935
            .saturating_add(Weight::from_parts(51_999_053, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_500, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `349`
        //  Estimated: `23860`
        // Minimum execution time: 54_714_000 picoseconds.
        Weight::from_parts(39_682_905, 23860)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(1_012, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1049`
        //  Estimated: `42866`
        // Minimum execution time: 82_073_000 picoseconds.
        Weight::from_parts(66_860_069, 42866)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_035, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `85981`
        // Minimum execution time: 316_122_000 picoseconds.
        Weight::from_parts(330_387_653, 85981)
            // Standard Error: 1_030
            .saturating_add(Weight::from_parts(2_167, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(29_u64))
            .saturating_add(RocksDbWeight::get().writes(23_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `85905`
        // Minimum execution time: 327_296_000 picoseconds.
        Weight::from_parts(344_778_587, 85905)
            .saturating_add(RocksDbWeight::get().reads(29_u64))
            .saturating_add(RocksDbWeight::get().writes(23_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 45_031_000 picoseconds.
        Weight::from_parts(45_572_000, 3899)
            // Standard Error: 24_669
            .saturating_add(Weight::from_parts(50_090_777, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_663_000 picoseconds.
        Weight::from_parts(84_983_000, 0)
            // Standard Error: 4_066_232
            .saturating_add(Weight::from_parts(564_447_416, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 311_448_000 picoseconds.
        Weight::from_parts(245_631_815, 0)
            // Standard Error: 7_937
            .saturating_add(Weight::from_parts(30_896_737, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 149_067_000 picoseconds.
        Weight::from_parts(130_181_921, 0)
            // Standard Error: 294_281
            .saturating_add(Weight::from_parts(60_998_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_222_000 picoseconds.
        Weight::from_parts(94_195_714, 0)
            // Standard Error: 3_616
            .saturating_add(Weight::from_parts(2_672_494, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 139_429_000 picoseconds.
        Weight::from_parts(171_049_360, 0)
            // Standard Error: 31_588
            .saturating_add(Weight::from_parts(2_923_269, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_992_000 picoseconds.
        Weight::from_parts(115_936_976, 0)
            // Standard Error: 414_340
            .saturating_add(Weight::from_parts(116_785_346, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_790_000 picoseconds.
        Weight::from_parts(90_746_200, 0)
            // Standard Error: 270_835
            .saturating_add(Weight::from_parts(107_416_174, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_210_000 picoseconds.
        Weight::from_parts(91_082_335, 0)
            // Standard Error: 211_867
            .saturating_add(Weight::from_parts(104_318_383, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_806_000 picoseconds.
        Weight::from_parts(85_438_969, 0)
            // Standard Error: 248_652
            .saturating_add(Weight::from_parts(105_330_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_654_000 picoseconds.
        Weight::from_parts(82_257_210, 0)
            // Standard Error: 336_548
            .saturating_add(Weight::from_parts(106_454_200, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_452_000 picoseconds.
        Weight::from_parts(82_661_045, 0)
            // Standard Error: 286_452
            .saturating_add(Weight::from_parts(105_467_642, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_893_000 picoseconds.
        Weight::from_parts(81_216_834, 0)
            // Standard Error: 315_266
            .saturating_add(Weight::from_parts(107_016_702, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_282_000 picoseconds.
        Weight::from_parts(82_548_887, 0)
            // Standard Error: 341_172
            .saturating_add(Weight::from_parts(105_504_622, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 556_352_000 picoseconds.
        Weight::from_parts(607_493_748, 0)
            // Standard Error: 448_674
            .saturating_add(Weight::from_parts(184_670_390, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 714_496_000 picoseconds.
        Weight::from_parts(722_520_000, 0)
            // Standard Error: 46_538
            .saturating_add(Weight::from_parts(13_033_234, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_627_000 picoseconds.
        Weight::from_parts(85_563_243, 0)
            // Standard Error: 311_752
            .saturating_add(Weight::from_parts(105_877_332, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_852_000 picoseconds.
        Weight::from_parts(84_860_381, 0)
            // Standard Error: 321_988
            .saturating_add(Weight::from_parts(105_008_310, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_396_000 picoseconds.
        Weight::from_parts(89_972_413, 0)
            // Standard Error: 338_324
            .saturating_add(Weight::from_parts(184_316_536, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_385_000 picoseconds.
        Weight::from_parts(90_760_000, 0)
            // Standard Error: 4_378_367
            .saturating_add(Weight::from_parts(914_427_461, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_060_000 picoseconds.
        Weight::from_parts(138_647_807, 0)
            // Standard Error: 449_220
            .saturating_add(Weight::from_parts(301_188_566, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 391_797_000 picoseconds.
        Weight::from_parts(394_943_000, 0)
            // Standard Error: 58_663
            .saturating_add(Weight::from_parts(21_187_774, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_418_000 picoseconds.
        Weight::from_parts(149_848_797, 0)
            // Standard Error: 459_492
            .saturating_add(Weight::from_parts(308_230_219, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 390_635_000 picoseconds.
        Weight::from_parts(395_782_000, 0)
            // Standard Error: 61_326
            .saturating_add(Weight::from_parts(20_818_419, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 561_280_000 picoseconds.
        Weight::from_parts(634_390_717, 0)
            // Standard Error: 473_236
            .saturating_add(Weight::from_parts(316_661_157, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 559_804_000 picoseconds.
        Weight::from_parts(650_695_494, 0)
            // Standard Error: 489_218
            .saturating_add(Weight::from_parts(321_789_584, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_345_000 picoseconds.
        Weight::from_parts(74_080_057, 0)
            // Standard Error: 328_119
            .saturating_add(Weight::from_parts(116_742_827, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_307_192_000 picoseconds.
        Weight::from_parts(2_419_334_440, 0)
            // Standard Error: 484_032
            .saturating_add(Weight::from_parts(211_293_866, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 346_160_000 picoseconds.
        Weight::from_parts(348_777_000, 0)
            // Standard Error: 58_661
            .saturating_add(Weight::from_parts(29_434_095, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_292_607_000 picoseconds.
        Weight::from_parts(2_434_102_108, 0)
            // Standard Error: 502_502
            .saturating_add(Weight::from_parts(264_859_383, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_289_426_000 picoseconds.
        Weight::from_parts(2_437_443_919, 0)
            // Standard Error: 471_320
            .saturating_add(Weight::from_parts(268_510_540, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 242_827_000 picoseconds.
        Weight::from_parts(291_906_943, 0)
            // Standard Error: 419_132
            .saturating_add(Weight::from_parts(316_375_969, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 554_876_000 picoseconds.
        Weight::from_parts(559_277_000, 0)
            // Standard Error: 59_610
            .saturating_add(Weight::from_parts(21_490_976, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_443_317_000 picoseconds.
        Weight::from_parts(2_625_227_536, 0)
            // Standard Error: 511_289
            .saturating_add(Weight::from_parts(283_117_268, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_099_000 picoseconds.
        Weight::from_parts(88_574_604, 0)
            // Standard Error: 274_173
            .saturating_add(Weight::from_parts(20_834_495, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_246_000 picoseconds.
        Weight::from_parts(90_382_254, 0)
            // Standard Error: 1_257
            .saturating_add(Weight::from_parts(428_781, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_454_000 picoseconds.
        Weight::from_parts(90_235_951, 0)
            // Standard Error: 256_364
            .saturating_add(Weight::from_parts(14_555_548, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_189_000 picoseconds.
        Weight::from_parts(91_177_961, 0)
            // Standard Error: 1_127
            .saturating_add(Weight::from_parts(424_751, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_893_000 picoseconds.
        Weight::from_parts(88_684_789, 0)
            // Standard Error: 287_468
            .saturating_add(Weight::from_parts(16_661_810, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_534_000 picoseconds.
        Weight::from_parts(88_923_020, 0)
            // Standard Error: 249_896
            .saturating_add(Weight::from_parts(19_208_979, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_229_000 picoseconds.
        Weight::from_parts(120_908_395, 0)
            // Standard Error: 327_109
            .saturating_add(Weight::from_parts(190_143_835, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_549_000 picoseconds.
        Weight::from_parts(100_553_000, 0)
            // Standard Error: 2_727
            .saturating_add(Weight::from_parts(616_949, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 553_918_000 picoseconds.
        Weight::from_parts(572_988_848, 0)
            // Standard Error: 2_210_952
            .saturating_add(Weight::from_parts(30_333_551, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 552_664_000 picoseconds.
        Weight::from_parts(571_824_067, 0)
            // Standard Error: 1_981_598
            .saturating_add(Weight::from_parts(28_343_432, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_114_000 picoseconds.
        Weight::from_parts(99_799_695, 0)
            // Standard Error: 263_342
            .saturating_add(Weight::from_parts(5_959_704, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_595_000 picoseconds.
        Weight::from_parts(94_900_895, 0)
            // Standard Error: 1_221
            .saturating_add(Weight::from_parts(425_729, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_123_000 picoseconds.
        Weight::from_parts(99_068_002, 0)
            // Standard Error: 278_340
            .saturating_add(Weight::from_parts(6_056_397, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_148_000 picoseconds.
        Weight::from_parts(93_583_351, 0)
            // Standard Error: 1_048
            .saturating_add(Weight::from_parts(420_112, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_951_000 picoseconds.
        Weight::from_parts(80_983_069, 0)
            // Standard Error: 260_297
            .saturating_add(Weight::from_parts(114_164_207, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_991_000 picoseconds.
        Weight::from_parts(83_808_552, 0)
            // Standard Error: 291_596
            .saturating_add(Weight::from_parts(107_977_269, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 555_192_000 picoseconds.
        Weight::from_parts(637_741_196, 0)
            // Standard Error: 498_770
            .saturating_add(Weight::from_parts(126_311_515, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 567_642_000 picoseconds.
        Weight::from_parts(587_862_774, 0)
            // Standard Error: 1_100
            .saturating_add(Weight::from_parts(120_318, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_764_152_000 picoseconds.
        Weight::from_parts(2_885_803_691, 0)
            // Standard Error: 562_616
            .saturating_add(Weight::from_parts(154_883_526, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_942_765_000 picoseconds.
        Weight::from_parts(2_852_597_513, 0)
            // Standard Error: 14_069
            .saturating_add(Weight::from_parts(12_388_759, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_236_000 picoseconds.
        Weight::from_parts(108_121_903, 0)
            // Standard Error: 338_552
            .saturating_add(Weight::from_parts(130_391_399, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 143_555_000 picoseconds.
        Weight::from_parts(145_256_000, 0)
            // Standard Error: 61_456
            .saturating_add(Weight::from_parts(25_766_308, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_706_000 picoseconds.
        Weight::from_parts(82_734_112, 0)
            // Standard Error: 323_634
            .saturating_add(Weight::from_parts(107_133_410, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_050_000 picoseconds.
        Weight::from_parts(88_261_802, 0)
            // Standard Error: 247_640
            .saturating_add(Weight::from_parts(23_580_197, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_558_000 picoseconds.
        Weight::from_parts(90_338_028, 0)
            // Standard Error: 270_999
            .saturating_add(Weight::from_parts(15_249_771, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_250_000 picoseconds.
        Weight::from_parts(90_448_269, 0)
            // Standard Error: 274_039
            .saturating_add(Weight::from_parts(12_874_930, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_278_000 picoseconds.
        Weight::from_parts(88_025_842, 0)
            // Standard Error: 274_359
            .saturating_add(Weight::from_parts(11_610_357, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_849_000 picoseconds.
        Weight::from_parts(87_858_273, 0)
            // Standard Error: 263_624
            .saturating_add(Weight::from_parts(14_636_926, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_444_000 picoseconds.
        Weight::from_parts(198_654_906, 0)
            // Standard Error: 409_120
            .saturating_add(Weight::from_parts(200_669_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_737_000 picoseconds.
        Weight::from_parts(162_389_592, 0)
            // Standard Error: 437_002
            .saturating_add(Weight::from_parts(385_229_944, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_710_614_000 picoseconds.
        Weight::from_parts(44_848_530_000, 0)
            // Standard Error: 271_081
            .saturating_add(Weight::from_parts(7_518_236, 0).saturating_mul(p.into()))
            // Standard Error: 271_067
            .saturating_add(Weight::from_parts(176_484_363, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_935_000 picoseconds.
        Weight::from_parts(155_283_975, 0)
            // Standard Error: 398_331
            .saturating_add(Weight::from_parts(394_750_144, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_166_105_000 picoseconds.
        Weight::from_parts(43_210_411_000, 0)
            // Standard Error: 273_792
            .saturating_add(Weight::from_parts(7_685_961, 0).saturating_mul(p.into()))
            // Standard Error: 273_779
            .saturating_add(Weight::from_parts(177_206_473, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_385_000 picoseconds.
        Weight::from_parts(100_368_488, 0)
            // Standard Error: 25_882
            .saturating_add(Weight::from_parts(2_517_495, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 86_723_000 picoseconds.
        Weight::from_parts(112_959_650, 1131)
            // Standard Error: 5_171
            .saturating_add(Weight::from_parts(11_884_248, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 85_367_000 picoseconds.
        Weight::from_parts(86_968_000, 1131)
            // Standard Error: 35_935
            .saturating_add(Weight::from_parts(35_294_476, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_166_740_000 picoseconds.
        Weight::from_parts(5_878_966_706, 5069931)
            // Standard Error: 72_748
            .saturating_add(Weight::from_parts(35_598_278, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 84_509_000 picoseconds.
        Weight::from_parts(86_396_000, 1939)
            // Standard Error: 37_909
            .saturating_add(Weight::from_parts(46_229_201, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 89_570_000 picoseconds.
        Weight::from_parts(91_679_907, 1131)
            // Standard Error: 74_102
            .saturating_add(Weight::from_parts(36_034_356, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 581_516_000 picoseconds.
        Weight::from_parts(574_828_964, 1496)
            // Standard Error: 226_535
            .saturating_add(Weight::from_parts(44_029_625, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 984_554_000 picoseconds.
        Weight::from_parts(1_010_300_775, 317931)
            // Standard Error: 330_750
            .saturating_add(Weight::from_parts(45_768_209, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_399_000 picoseconds.
        Weight::from_parts(2_513_898, 0)
            // Standard Error: 22_468
            .saturating_add(Weight::from_parts(24_974_238, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_354_805_000 picoseconds.
        Weight::from_parts(4_247_725_842, 0)
            // Standard Error: 49_167
            .saturating_add(Weight::from_parts(4_375_644, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_344_769_000 picoseconds.
        Weight::from_parts(4_143_583_164, 0)
            // Standard Error: 64_865
            .saturating_add(Weight::from_parts(4_885_201, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_321_597_000 picoseconds.
        Weight::from_parts(10_856_474_625, 0)
            // Standard Error: 228_480
            .saturating_add(Weight::from_parts(13_648_467, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_444_861_000 picoseconds.
        Weight::from_parts(11_811_924_847, 0)
            // Standard Error: 220_732
            .saturating_add(Weight::from_parts(8_104_347, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_102_000 picoseconds.
        Weight::from_parts(2_199_000, 0)
            // Standard Error: 8_145
            .saturating_add(Weight::from_parts(3_817_860, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_084_000 picoseconds.
        Weight::from_parts(2_171_000, 0)
            // Standard Error: 5_734
            .saturating_add(Weight::from_parts(3_044_285, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_074_000 picoseconds.
        Weight::from_parts(3_341_361, 0)
            // Standard Error: 1_168
            .saturating_add(Weight::from_parts(1_569_364, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_189_000 picoseconds.
        Weight::from_parts(2_253_000, 0)
            // Standard Error: 7_562
            .saturating_add(Weight::from_parts(2_914_810, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_131_000 picoseconds.
        Weight::from_parts(99_037, 0)
            // Standard Error: 11_949
            .saturating_add(Weight::from_parts(5_173_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_992_000 picoseconds.
        Weight::from_parts(6_256_207, 0)
            // Standard Error: 1_332
            .saturating_add(Weight::from_parts(161_069, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_106_000 picoseconds.
        Weight::from_parts(4_233_365, 0)
            // Standard Error: 7_839
            .saturating_add(Weight::from_parts(2_631_387, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_631_387 -
            2_404_882, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_192_000 picoseconds.
        Weight::from_parts(4_830_171, 0)
            // Standard Error: 12_370
            .saturating_add(Weight::from_parts(2_404_882, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_413_000 picoseconds.
        Weight::from_parts(16_855_535, 0)
            // Standard Error: 25_880
            .saturating_add(Weight::from_parts(10_029_290, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_145_000 picoseconds.
        Weight::from_parts(4_520_615, 0)
            // Standard Error: 6_765
            .saturating_add(Weight::from_parts(1_202_471, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_133_000 picoseconds.
        Weight::from_parts(5_476_163, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_117_000 picoseconds.
        Weight::from_parts(1_458_597, 0)
            // Standard Error: 3_356
            .saturating_add(Weight::from_parts(265_574, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_135_000 picoseconds.
        Weight::from_parts(2_223_000, 0)
            // Standard Error: 5_214
            .saturating_add(Weight::from_parts(766_010, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_078_000 picoseconds.
        Weight::from_parts(2_218_000, 0)
            // Standard Error: 5_801
            .saturating_add(Weight::from_parts(743_573, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_226_000 picoseconds.
        Weight::from_parts(2_093_625, 0)
            // Standard Error: 7_678
            .saturating_add(Weight::from_parts(824_956, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_201_000 picoseconds.
        Weight::from_parts(154_770, 0)
            // Standard Error: 9_398
            .saturating_add(Weight::from_parts(1_480_245, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_989_000 picoseconds.
        Weight::from_parts(2_628_082, 0)
            // Standard Error: 12_268
            .saturating_add(Weight::from_parts(6_921_043, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_086_000 picoseconds.
        Weight::from_parts(2_156_000, 0)
            // Standard Error: 5_477
            .saturating_add(Weight::from_parts(3_348_027, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_102_000 picoseconds.
        Weight::from_parts(2_163_000, 0)
            // Standard Error: 6_833
            .saturating_add(Weight::from_parts(3_134_916, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_131_000 picoseconds.
        Weight::from_parts(2_209_000, 0)
            // Standard Error: 7_612
            .saturating_add(Weight::from_parts(3_170_404, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_124_000 picoseconds.
        Weight::from_parts(2_169_000, 0)
            // Standard Error: 4_823
            .saturating_add(Weight::from_parts(2_668_874, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_159_000 picoseconds.
        Weight::from_parts(2_240_000, 0)
            // Standard Error: 3_992
            .saturating_add(Weight::from_parts(559_604, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_127_000 picoseconds.
        Weight::from_parts(1_178_239, 0)
            // Standard Error: 3_346
            .saturating_add(Weight::from_parts(416_704, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_137_000 picoseconds.
        Weight::from_parts(2_192_000, 0)
            // Standard Error: 11_707
            .saturating_add(Weight::from_parts(1_918_501, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_131_000 picoseconds.
        Weight::from_parts(2_192_000, 0)
            // Standard Error: 7_593
            .saturating_add(Weight::from_parts(1_219_931, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_124_000 picoseconds.
        Weight::from_parts(726_401, 0)
            // Standard Error: 4_086
            .saturating_add(Weight::from_parts(424_161, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_107_000 picoseconds.
        Weight::from_parts(1_225_918, 0)
            // Standard Error: 3_748
            .saturating_add(Weight::from_parts(392_373, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_168_000 picoseconds.
        Weight::from_parts(11_174, 0)
            // Standard Error: 5_816
            .saturating_add(Weight::from_parts(594_467, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_138_000 picoseconds.
        Weight::from_parts(12_680, 0)
            // Standard Error: 5_830
            .saturating_add(Weight::from_parts(595_552, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_163_000 picoseconds.
        Weight::from_parts(172_344, 0)
            // Standard Error: 5_372
            .saturating_add(Weight::from_parts(537_510, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_171_000 picoseconds.
        Weight::from_parts(459_682, 0)
            // Standard Error: 5_533
            .saturating_add(Weight::from_parts(421_155, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_157_000 picoseconds.
        Weight::from_parts(2_640_857, 0)
            // Standard Error: 2_132
            .saturating_add(Weight::from_parts(175_772, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_149_000 picoseconds.
        Weight::from_parts(2_625_890, 0)
            // Standard Error: 2_246
            .saturating_add(Weight::from_parts(177_728, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_082_000 picoseconds.
        Weight::from_parts(2_193_000, 0)
            // Standard Error: 9_664
            .saturating_add(Weight::from_parts(1_832_396, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_029_000 picoseconds.
        Weight::from_parts(2_185_000, 0)
            // Standard Error: 7_691
            .saturating_add(Weight::from_parts(1_203_465, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_146_000 picoseconds.
        Weight::from_parts(2_198_000, 0)
            // Standard Error: 10_390
            .saturating_add(Weight::from_parts(1_868_795, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_082_000 picoseconds.
        Weight::from_parts(2_133_000, 0)
            // Standard Error: 8_282
            .saturating_add(Weight::from_parts(1_199_983, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_145_000 picoseconds.
        Weight::from_parts(2_178_000, 0)
            // Standard Error: 10_175
            .saturating_add(Weight::from_parts(1_943_386, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_094_000 picoseconds.
        Weight::from_parts(2_168_000, 0)
            // Standard Error: 6_923
            .saturating_add(Weight::from_parts(1_125_091, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_200_000 picoseconds.
        Weight::from_parts(2_250_000, 0)
            // Standard Error: 11_944
            .saturating_add(Weight::from_parts(1_852_545, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_077_000 picoseconds.
        Weight::from_parts(2_121_000, 0)
            // Standard Error: 7_914
            .saturating_add(Weight::from_parts(1_171_461, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_171_000 picoseconds.
        Weight::from_parts(2_278_000, 0)
            // Standard Error: 10_701
            .saturating_add(Weight::from_parts(1_859_283, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_167_000 picoseconds.
        Weight::from_parts(2_209_000, 0)
            // Standard Error: 7_361
            .saturating_add(Weight::from_parts(1_182_113, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_202_000 picoseconds.
        Weight::from_parts(2_239_000, 0)
            // Standard Error: 12_468
            .saturating_add(Weight::from_parts(1_847_236, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_072_000 picoseconds.
        Weight::from_parts(2_164_000, 0)
            // Standard Error: 8_208
            .saturating_add(Weight::from_parts(1_117_969, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_077_000 picoseconds.
        Weight::from_parts(2_155_000, 0)
            // Standard Error: 9_963
            .saturating_add(Weight::from_parts(1_877_035, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_189_000 picoseconds.
        Weight::from_parts(2_224_000, 0)
            // Standard Error: 7_561
            .saturating_add(Weight::from_parts(1_124_600, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_157_000 picoseconds.
        Weight::from_parts(2_210_000, 0)
            // Standard Error: 11_998
            .saturating_add(Weight::from_parts(1_829_852, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_098_000 picoseconds.
        Weight::from_parts(2_189_000, 0)
            // Standard Error: 8_286
            .saturating_add(Weight::from_parts(1_189_196, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_125_000 picoseconds.
        Weight::from_parts(2_198_000, 0)
            // Standard Error: 10_056
            .saturating_add(Weight::from_parts(1_829_185, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_065_000 picoseconds.
        Weight::from_parts(2_174_000, 0)
            // Standard Error: 8_171
            .saturating_add(Weight::from_parts(1_176_701, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_141_000 picoseconds.
        Weight::from_parts(2_220_000, 0)
            // Standard Error: 9_910
            .saturating_add(Weight::from_parts(1_871_442, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_024_000 picoseconds.
        Weight::from_parts(2_166_000, 0)
            // Standard Error: 7_933
            .saturating_add(Weight::from_parts(1_156_214, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_068_000 picoseconds.
        Weight::from_parts(2_169_000, 0)
            // Standard Error: 7_815
            .saturating_add(Weight::from_parts(1_353_927, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_157_000 picoseconds.
        Weight::from_parts(2_208_000, 0)
            // Standard Error: 4_587
            .saturating_add(Weight::from_parts(635_023, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_080_000 picoseconds.
        Weight::from_parts(2_140_000, 0)
            // Standard Error: 8_399
            .saturating_add(Weight::from_parts(1_278_782, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_069_000 picoseconds.
        Weight::from_parts(2_233_000, 0)
            // Standard Error: 6_395
            .saturating_add(Weight::from_parts(682_415, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_206_000 picoseconds.
        Weight::from_parts(2_224_000, 0)
            // Standard Error: 9_477
            .saturating_add(Weight::from_parts(1_819_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_095_000 picoseconds.
        Weight::from_parts(2_219_000, 0)
            // Standard Error: 7_615
            .saturating_add(Weight::from_parts(1_207_931, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_108_000 picoseconds.
        Weight::from_parts(1_363_438, 0)
            // Standard Error: 18_139
            .saturating_add(Weight::from_parts(2_743_512, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_197_000 picoseconds.
        Weight::from_parts(726_043, 0)
            // Standard Error: 12_539
            .saturating_add(Weight::from_parts(2_447_643, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_118_000 picoseconds.
        Weight::from_parts(1_113_814, 0)
            // Standard Error: 15_837
            .saturating_add(Weight::from_parts(2_939_546, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_121_000 picoseconds.
        Weight::from_parts(2_089_486, 0)
            // Standard Error: 15_833
            .saturating_add(Weight::from_parts(2_447_304, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_200_000 picoseconds.
        Weight::from_parts(2_235_000, 0)
            // Standard Error: 16_089
            .saturating_add(Weight::from_parts(9_370_736, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_191_000 picoseconds.
        Weight::from_parts(3_207_641, 0)
            // Standard Error: 45_758
            .saturating_add(Weight::from_parts(7_437_894, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_118_000 picoseconds.
        Weight::from_parts(588_160, 0)
            // Standard Error: 17_384
            .saturating_add(Weight::from_parts(2_989_240, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_135_000 picoseconds.
        Weight::from_parts(4_961_665, 0)
            // Standard Error: 26_016
            .saturating_add(Weight::from_parts(2_253_733, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_174_000 picoseconds.
        Weight::from_parts(2_198_000, 0)
            // Standard Error: 8_661
            .saturating_add(Weight::from_parts(1_328_375, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_168_000 picoseconds.
        Weight::from_parts(2_225_000, 0)
            // Standard Error: 4_778
            .saturating_add(Weight::from_parts(648_611, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_125_000 picoseconds.
        Weight::from_parts(2_219_000, 0)
            // Standard Error: 8_338
            .saturating_add(Weight::from_parts(1_260_241, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_153_000 picoseconds.
        Weight::from_parts(2_233_000, 0)
            // Standard Error: 5_007
            .saturating_add(Weight::from_parts(642_088, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_230_000 picoseconds.
        Weight::from_parts(2_267_000, 0)
            // Standard Error: 8_196
            .saturating_add(Weight::from_parts(1_328_828, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_135_000 picoseconds.
        Weight::from_parts(2_211_000, 0)
            // Standard Error: 5_376
            .saturating_add(Weight::from_parts(693_541, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_208_000 picoseconds.
        Weight::from_parts(2_224_000, 0)
            // Standard Error: 7_393
            .saturating_add(Weight::from_parts(1_144_418, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_161_000 picoseconds.
        Weight::from_parts(2_237_000, 0)
            // Standard Error: 3_890
            .saturating_add(Weight::from_parts(589_899, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_129_000 picoseconds.
        Weight::from_parts(2_219_000, 0)
            // Standard Error: 7_182
            .saturating_add(Weight::from_parts(1_101_585, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_038_000 picoseconds.
        Weight::from_parts(2_126_000, 0)
            // Standard Error: 3_865
            .saturating_add(Weight::from_parts(588_357, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_129_000 picoseconds.
        Weight::from_parts(2_215_000, 0)
            // Standard Error: 8_265
            .saturating_add(Weight::from_parts(1_152_496, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_103_000 picoseconds.
        Weight::from_parts(2_181_000, 0)
            // Standard Error: 3_989
            .saturating_add(Weight::from_parts(614_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_133_000 picoseconds.
        Weight::from_parts(2_175_000, 0)
            // Standard Error: 6_506
            .saturating_add(Weight::from_parts(1_096_748, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_088_000 picoseconds.
        Weight::from_parts(2_154_000, 0)
            // Standard Error: 4_053
            .saturating_add(Weight::from_parts(582_323, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_120_000 picoseconds.
        Weight::from_parts(2_213_000, 0)
            // Standard Error: 6_472
            .saturating_add(Weight::from_parts(1_056_569, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_097_000 picoseconds.
        Weight::from_parts(2_192_000, 0)
            // Standard Error: 3_800
            .saturating_add(Weight::from_parts(579_517, 0).saturating_mul(r.into()))
    }
}
