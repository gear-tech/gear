// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-06, STEPS: `51`, REPEAT: 200, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=51 --repeat=200 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=out.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_error(r: u32, ) -> Weight;
    fn gr_status_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn lazy_pages_read_access(p: u32, ) -> Weight;
    fn lazy_pages_write_access(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(1_219_000 as u64)
            // Standard Error: 152
            .saturating_add(Weight::from_ref_time(203_038 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(3_885_000 as u64)
            // Standard Error: 317
            .saturating_add(Weight::from_ref_time(726_918 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(46_791_000 as u64)
            // Standard Error: 1_190
            .saturating_add(Weight::from_ref_time(3_209_900 as u64).saturating_mul(c as u64))
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(70_966_000 as u64)
            .saturating_add(T::DbWeight::get().reads(7 as u64))
            .saturating_add(T::DbWeight::get().writes(5 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(66_042_000 as u64)
            // Standard Error: 9
            .saturating_add(Weight::from_ref_time(52_307 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(62_503_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_398 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(10_233_339_000 as u64)
            // Standard Error: 143
            .saturating_add(Weight::from_ref_time(28_768 as u64).saturating_mul(c as u64))
            // Standard Error: 8
            .saturating_add(Weight::from_ref_time(832 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(11 as u64))
            .saturating_add(T::DbWeight::get().writes(11 as u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(69_972_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_215 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(90_191_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_248 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(13 as u64))
            .saturating_add(T::DbWeight::get().writes(10 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        Weight::from_ref_time(203_100_000 as u64)
            // Standard Error: 127
            .saturating_add(Weight::from_ref_time(10_459 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(25 as u64))
            .saturating_add(T::DbWeight::get().writes(24 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(212_598_000 as u64)
            // Standard Error: 129
            .saturating_add(Weight::from_ref_time(10_986 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(25 as u64))
            .saturating_add(T::DbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument(c: u32, ) -> Weight {
        Weight::from_ref_time(47_969_000 as u64)
            // Standard Error: 8
            .saturating_add(Weight::from_ref_time(53_035 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(81_715_000 as u64)
            // Standard Error: 40_879
            .saturating_add(Weight::from_ref_time(199_657_529 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        Weight::from_ref_time(281_740_000 as u64)
            // Standard Error: 33_625
            .saturating_add(Weight::from_ref_time(185_133_564 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(95_895_000 as u64)
            // Standard Error: 136_995
            .saturating_add(Weight::from_ref_time(278_630_628 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(96_554_000 as u64)
            // Standard Error: 51_806
            .saturating_add(Weight::from_ref_time(209_192_053 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        Weight::from_ref_time(83_492_000 as u64)
            // Standard Error: 49_183
            .saturating_add(Weight::from_ref_time(197_074_849 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(83_810_000 as u64)
            // Standard Error: 49_006
            .saturating_add(Weight::from_ref_time(197_090_124 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(83_105_000 as u64)
            // Standard Error: 50_768
            .saturating_add(Weight::from_ref_time(196_221_338 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(83_369_000 as u64)
            // Standard Error: 30_063
            .saturating_add(Weight::from_ref_time(204_329_387 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(83_710_000 as u64)
            // Standard Error: 28_774
            .saturating_add(Weight::from_ref_time(205_240_924 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(83_147_000 as u64)
            // Standard Error: 32_122
            .saturating_add(Weight::from_ref_time(205_054_199 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(84_401_000 as u64)
            // Standard Error: 44_943
            .saturating_add(Weight::from_ref_time(171_244_610 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(83_464_000 as u64)
            // Standard Error: 42_361
            .saturating_add(Weight::from_ref_time(164_570_014 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(84_432_000 as u64)
            // Standard Error: 35_919
            .saturating_add(Weight::from_ref_time(187_615_834 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(271_125_000 as u64)
            // Standard Error: 184
            .saturating_add(Weight::from_ref_time(20_140 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(83_420_000 as u64)
            // Standard Error: 42_540
            .saturating_add(Weight::from_ref_time(164_090_612 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(83_671_000 as u64)
            // Standard Error: 41_162
            .saturating_add(Weight::from_ref_time(171_247_384 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_random(r: u32, ) -> Weight {
        Weight::from_ref_time(83_589_000 as u64)
            // Standard Error: 62_680
            .saturating_add(Weight::from_ref_time(287_536_496 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(83_924_000 as u64)
            // Standard Error: 42_638
            .saturating_add(Weight::from_ref_time(208_890_822 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(86_154_000 as u64)
            // Standard Error: 82_972
            .saturating_add(Weight::from_ref_time(428_692_058 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(522_491_000 as u64)
            // Standard Error: 26_004
            .saturating_add(Weight::from_ref_time(28_231_179 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(84_335_000 as u64)
            // Standard Error: 70_327
            .saturating_add(Weight::from_ref_time(308_373_193 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(412_780_000 as u64)
            // Standard Error: 21_010
            .saturating_add(Weight::from_ref_time(23_908_495 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(84_335_000 as u64)
            // Standard Error: 70_327
            .saturating_add(Weight::from_ref_time(308_373_193 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(412_780_000 as u64)
            // Standard Error: 21_010
            .saturating_add(Weight::from_ref_time(23_908_495 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(84_638_000 as u64)
            // Standard Error: 43_238
            .saturating_add(Weight::from_ref_time(222_450_327 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(84_638_000 as u64)
            // Standard Error: 43_238
            .saturating_add(Weight::from_ref_time(222_450_327 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(84_414_000 as u64)
            // Standard Error: 40_849
            .saturating_add(Weight::from_ref_time(223_081_261 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(286_567_000 as u64)
            // Standard Error: 26_584
            .saturating_add(Weight::from_ref_time(28_092_857 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(84_411_000 as u64)
            // Standard Error: 40_344
            .saturating_add(Weight::from_ref_time(202_390_188 as u64).saturating_mul(r as u64))
    }
    fn gr_reply_push_input(r: u32, ) -> Weight {
        Weight::from_ref_time(115_758_000 as u64)
            // Standard Error: 182_112
            .saturating_add(Weight::from_ref_time(327_416_867 as u64).saturating_mul(r as u64))
    }
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(439_004_000 as u64)
            // Standard Error: 116_967
            .saturating_add(Weight::from_ref_time(4_514_511 as u64).saturating_mul(n as u64))
    }
    fn gr_send_push_input(r: u32, ) -> Weight {
        Weight::from_ref_time(106_971_000 as u64)
            // Standard Error: 141_117
            .saturating_add(Weight::from_ref_time(646_013_969 as u64).saturating_mul(r as u64))
    }
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(786_597_000 as u64)
            // Standard Error: 92_912
            .saturating_add(Weight::from_ref_time(3_545_554 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(83_386_000 as u64)
            // Standard Error: 45_051
            .saturating_add(Weight::from_ref_time(214_826_471 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(281_078_000 as u64)
            // Standard Error: 20_776
            .saturating_add(Weight::from_ref_time(34_062_390 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        Weight::from_ref_time(100_491_000 as u64)
        // Standard Error: 115_586
            .saturating_add(Weight::from_ref_time(456_436_737 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        Weight::from_ref_time(84_126_000 as u64)
            // Standard Error: 39_089
            .saturating_add(Weight::from_ref_time(200_095_839 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(83_467_000 as u64)
            // Standard Error: 194_343
            .saturating_add(Weight::from_ref_time(56_194_060 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(82_644_000 as u64)
            // Standard Error: 185_950
            .saturating_add(Weight::from_ref_time(39_908_980 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(82_736_000 as u64)
            // Standard Error: 193_447
            .saturating_add(Weight::from_ref_time(43_128_940 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(83_733_000 as u64)
            // Standard Error: 191_654
            .saturating_add(Weight::from_ref_time(42_001_589 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        Weight::from_ref_time(83_090_000 as u64)
            // Standard Error: 194_795
            .saturating_add(Weight::from_ref_time(41_382_069 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(84_800_000 as u64)
            // Standard Error: 46_603
            .saturating_add(Weight::from_ref_time(219_083_520 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(98_764_000 as u64)
            // Standard Error: 52_017
            .saturating_add(Weight::from_ref_time(381_183_518 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 1024]`.
    /// The range of component `s` is `[0, 1024]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(26_850_602_000 as u64)
            // Standard Error: 92_191
            .saturating_add(Weight::from_ref_time(8_366_115 as u64).saturating_mul(p as u64))
            // Standard Error: 92_191
            .saturating_add(Weight::from_ref_time(196_730_758 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(257 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(_r: u32, ) -> Weight {
        Weight::from_ref_time(11_441_000_000 as u64)
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_read_access(p: u32, ) -> Weight {
        Weight::from_ref_time(82_129_000 as u64)
            // Standard Error: 6_491
            .saturating_add(Weight::from_ref_time(49_098_637 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads((16 as u64).saturating_mul(p as u64)))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_write_access(p: u32, ) -> Weight {
        Weight::from_ref_time(25_317_785_000 as u64)
            // Standard Error: 18_986
            .saturating_add(Weight::from_ref_time(69_601_626 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(8192 as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(11_639_583_000 as u64)
            // Standard Error: 121_168
            .saturating_add(Weight::from_ref_time(30_753_009 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(11_670_404_000 as u64)
            // Standard Error: 116_067
            .saturating_add(Weight::from_ref_time(42_656_030 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(2_427_000 as u64)
            // Standard Error: 4_311
            .saturating_add(Weight::from_ref_time(7_702_775 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(2_503_000 as u64)
            // Standard Error: 3_905
            .saturating_add(Weight::from_ref_time(5_986_064 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(2_490_000 as u64)
            // Standard Error: 437
            .saturating_add(Weight::from_ref_time(3_346_520 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(2_464_000 as u64)
            // Standard Error: 4_604
            .saturating_add(Weight::from_ref_time(6_305_175 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(2_487_000 as u64)
            // Standard Error: 4_620
            .saturating_add(Weight::from_ref_time(9_954_417 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(11_661_000 as u64)
            // Standard Error: 485
            .saturating_add(Weight::from_ref_time(435_174 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(2_552_000 as u64)
            // Standard Error: 4_133
            .saturating_add(Weight::from_ref_time(4_949_248 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        Weight::from_ref_time(2_609_000 as u64)
            // Standard Error: 2_457
            .saturating_add(Weight::from_ref_time(5_232_762 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(3_044_000 as u64)
            // Standard Error: 17_996
            .saturating_add(Weight::from_ref_time(22_176_176 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(22_983_000 as u64)
            // Standard Error: 1_743
            .saturating_add(Weight::from_ref_time(1_989_106 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(2_596_000 as u64)
            // Standard Error: 2_246
            .saturating_add(Weight::from_ref_time(856_365 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(2_589_000 as u64)
            // Standard Error: 2_965
            .saturating_add(Weight::from_ref_time(2_228_924 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(2_633_000 as u64)
            // Standard Error: 2_766
            .saturating_add(Weight::from_ref_time(2_270_390 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(10_266_000 as u64)
            // Standard Error: 2_585
            .saturating_add(Weight::from_ref_time(2_124_888 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(10_335_000 as u64)
            // Standard Error: 3_320
            .saturating_add(Weight::from_ref_time(3_186_859 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(5_867_000 as u64)
            // Standard Error: 2_877
            .saturating_add(Weight::from_ref_time(14_247_078 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(2_501_000 as u64)
            // Standard Error: 4_443
            .saturating_add(Weight::from_ref_time(6_360_220 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(2_454_000 as u64)
            // Standard Error: 4_357
            .saturating_add(Weight::from_ref_time(5_985_280 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(2_489_000 as u64)
            // Standard Error: 2_825
            .saturating_add(Weight::from_ref_time(1_892_940 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(2_462_000 as u64)
            // Standard Error: 4_599
            .saturating_add(Weight::from_ref_time(3_696_829 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(2_481_000 as u64)
            // Standard Error: 2_524
            .saturating_add(Weight::from_ref_time(1_201_994 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(2_505_000 as u64)
            // Standard Error: 1_005
            .saturating_add(Weight::from_ref_time(649_619 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(2_489_000 as u64)
            // Standard Error: 733
            .saturating_add(Weight::from_ref_time(658_072 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(2_467_000 as u64)
            // Standard Error: 4_431
            .saturating_add(Weight::from_ref_time(3_750_397 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(2_467_000 as u64)
            // Standard Error: 4_362
            .saturating_add(Weight::from_ref_time(3_737_272 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(2_486_000 as u64)
            // Standard Error: 4_273
            .saturating_add(Weight::from_ref_time(3_736_465 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_492_000 as u64)
            // Standard Error: 4_488
            .saturating_add(Weight::from_ref_time(3_735_444 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(2_453_000 as u64)
            // Standard Error: 4_383
            .saturating_add(Weight::from_ref_time(3_738_452 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_498_000 as u64)
            // Standard Error: 4_105
            .saturating_add(Weight::from_ref_time(3_738_889 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(2_472_000 as u64)
            // Standard Error: 4_434
            .saturating_add(Weight::from_ref_time(3_749_190 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_493_000 as u64)
            // Standard Error: 4_185
            .saturating_add(Weight::from_ref_time(3_753_694 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(2_491_000 as u64)
            // Standard Error: 4_406
            .saturating_add(Weight::from_ref_time(3_751_322 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_511_000 as u64)
            // Standard Error: 4_370
            .saturating_add(Weight::from_ref_time(3_719_932 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(2_475_000 as u64)
            // Standard Error: 3_523
            .saturating_add(Weight::from_ref_time(3_045_504 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(2_460_000 as u64)
            // Standard Error: 3_453
            .saturating_add(Weight::from_ref_time(3_041_874 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(2_504_000 as u64)
            // Standard Error: 4_166
            .saturating_add(Weight::from_ref_time(3_646_804 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(2_455_000 as u64)
            // Standard Error: 5_577
            .saturating_add(Weight::from_ref_time(4_397_439 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_520_000 as u64)
            // Standard Error: 6_200
            .saturating_add(Weight::from_ref_time(4_753_735 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(2_464_000 as u64)
            // Standard Error: 26_543
            .saturating_add(Weight::from_ref_time(21_618_212 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_448_000 as u64)
            // Standard Error: 6_524
            .saturating_add(Weight::from_ref_time(4_828_604 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(2_481_000 as u64)
            // Standard Error: 3_620
            .saturating_add(Weight::from_ref_time(3_058_069 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(2_454_000 as u64)
            // Standard Error: 3_679
            .saturating_add(Weight::from_ref_time(3_041_454 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(2_499_000 as u64)
            // Standard Error: 3_539
            .saturating_add(Weight::from_ref_time(3_037_538 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(2_485_000 as u64)
            // Standard Error: 3_001
            .saturating_add(Weight::from_ref_time(2_759_459 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(2_521_000 as u64)
            // Standard Error: 3_044
            .saturating_add(Weight::from_ref_time(2_778_354 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(2_463_000 as u64)
            // Standard Error: 3_012
            .saturating_add(Weight::from_ref_time(2_791_416 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(2_443_000 as u64)
            // Standard Error: 3_075
            .saturating_add(Weight::from_ref_time(2_794_419 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(2_516_000 as u64)
            // Standard Error: 3_180
            .saturating_add(Weight::from_ref_time(2_780_646 as u64).saturating_mul(r as u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(1_219_000 as u64)
            // Standard Error: 152
            .saturating_add(Weight::from_ref_time(203_038 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(3_885_000 as u64)
            // Standard Error: 317
            .saturating_add(Weight::from_ref_time(726_918 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(46_791_000 as u64)
            // Standard Error: 1_190
            .saturating_add(Weight::from_ref_time(3_209_900 as u64).saturating_mul(c as u64))
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(70_966_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(7 as u64))
            .saturating_add(RocksDbWeight::get().writes(5 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(66_042_000 as u64)
            // Standard Error: 9
            .saturating_add(Weight::from_ref_time(52_307 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().writes(3 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(62_503_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_398 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(10_233_339_000 as u64)
            // Standard Error: 143
            .saturating_add(Weight::from_ref_time(28_768 as u64).saturating_mul(c as u64))
            // Standard Error: 8
            .saturating_add(Weight::from_ref_time(832 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(11 as u64))
            .saturating_add(RocksDbWeight::get().writes(11 as u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(69_972_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_215 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(90_191_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_248 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(13 as u64))
            .saturating_add(RocksDbWeight::get().writes(10 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        Weight::from_ref_time(203_100_000 as u64)
            // Standard Error: 127
            .saturating_add(Weight::from_ref_time(10_459 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(25 as u64))
            .saturating_add(RocksDbWeight::get().writes(24 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(212_598_000 as u64)
            // Standard Error: 129
            .saturating_add(Weight::from_ref_time(10_986 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(25 as u64))
            .saturating_add(RocksDbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument(c: u32, ) -> Weight {
        Weight::from_ref_time(47_969_000 as u64)
            // Standard Error: 8
            .saturating_add(Weight::from_ref_time(53_035 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(81_715_000 as u64)
            // Standard Error: 40_879
            .saturating_add(Weight::from_ref_time(199_657_529 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        Weight::from_ref_time(281_740_000 as u64)
            // Standard Error: 33_625
            .saturating_add(Weight::from_ref_time(185_133_564 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(95_895_000 as u64)
            // Standard Error: 136_995
            .saturating_add(Weight::from_ref_time(278_630_628 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(96_554_000 as u64)
            // Standard Error: 51_806
            .saturating_add(Weight::from_ref_time(209_192_053 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        Weight::from_ref_time(83_492_000 as u64)
            // Standard Error: 49_183
            .saturating_add(Weight::from_ref_time(197_074_849 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(83_810_000 as u64)
            // Standard Error: 49_006
            .saturating_add(Weight::from_ref_time(197_090_124 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(83_105_000 as u64)
            // Standard Error: 50_768
            .saturating_add(Weight::from_ref_time(196_221_338 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(83_369_000 as u64)
            // Standard Error: 30_063
            .saturating_add(Weight::from_ref_time(204_329_387 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(83_710_000 as u64)
            // Standard Error: 28_774
            .saturating_add(Weight::from_ref_time(205_240_924 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(83_147_000 as u64)
            // Standard Error: 32_122
            .saturating_add(Weight::from_ref_time(205_054_199 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(84_401_000 as u64)
            // Standard Error: 44_943
            .saturating_add(Weight::from_ref_time(171_244_610 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(83_464_000 as u64)
            // Standard Error: 42_361
            .saturating_add(Weight::from_ref_time(164_570_014 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(84_432_000 as u64)
            // Standard Error: 35_919
            .saturating_add(Weight::from_ref_time(187_615_834 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(271_125_000 as u64)
            // Standard Error: 184
            .saturating_add(Weight::from_ref_time(20_140 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(83_420_000 as u64)
            // Standard Error: 42_540
            .saturating_add(Weight::from_ref_time(164_090_612 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(83_671_000 as u64)
            // Standard Error: 41_162
            .saturating_add(Weight::from_ref_time(171_247_384 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_random(r: u32, ) -> Weight {
        Weight::from_ref_time(83_589_000 as u64)
            // Standard Error: 62_680
            .saturating_add(Weight::from_ref_time(287_536_496 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(83_924_000 as u64)
            // Standard Error: 42_638
            .saturating_add(Weight::from_ref_time(208_890_822 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(86_154_000 as u64)
            // Standard Error: 82_972
            .saturating_add(Weight::from_ref_time(428_692_058 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(522_491_000 as u64)
            // Standard Error: 26_004
            .saturating_add(Weight::from_ref_time(28_231_179 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(84_335_000 as u64)
            // Standard Error: 70_327
            .saturating_add(Weight::from_ref_time(308_373_193 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(412_780_000 as u64)
            // Standard Error: 21_010
            .saturating_add(Weight::from_ref_time(23_908_495 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(84_335_000 as u64)
            // Standard Error: 70_327
            .saturating_add(Weight::from_ref_time(308_373_193 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(412_780_000 as u64)
            // Standard Error: 21_010
            .saturating_add(Weight::from_ref_time(23_908_495 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(84_638_000 as u64)
            // Standard Error: 43_238
            .saturating_add(Weight::from_ref_time(222_450_327 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(84_638_000 as u64)
            // Standard Error: 43_238
            .saturating_add(Weight::from_ref_time(222_450_327 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(84_414_000 as u64)
            // Standard Error: 40_849
            .saturating_add(Weight::from_ref_time(223_081_261 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(286_567_000 as u64)
            // Standard Error: 26_584
            .saturating_add(Weight::from_ref_time(28_092_857 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(84_411_000 as u64)
            // Standard Error: 40_344
            .saturating_add(Weight::from_ref_time(202_390_188 as u64).saturating_mul(r as u64))
    }
    fn gr_reply_push_input(r: u32, ) -> Weight {
        Weight::from_ref_time(115_758_000 as u64)
            // Standard Error: 182_112
            .saturating_add(Weight::from_ref_time(327_416_867 as u64).saturating_mul(r as u64))
    }
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(439_004_000 as u64)
            // Standard Error: 116_967
            .saturating_add(Weight::from_ref_time(4_514_511 as u64).saturating_mul(n as u64))
    }
    fn gr_send_push_input(r: u32, ) -> Weight {
        Weight::from_ref_time(106_971_000 as u64)
            // Standard Error: 141_117
            .saturating_add(Weight::from_ref_time(646_013_969 as u64).saturating_mul(r as u64))
    }
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(786_597_000 as u64)
            // Standard Error: 92_912
            .saturating_add(Weight::from_ref_time(3_545_554 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(83_386_000 as u64)
            // Standard Error: 45_051
            .saturating_add(Weight::from_ref_time(214_826_471 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(281_078_000 as u64)
            // Standard Error: 20_776
            .saturating_add(Weight::from_ref_time(34_062_390 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        Weight::from_ref_time(100_491_000 as u64)
        // Standard Error: 115_586
            .saturating_add(Weight::from_ref_time(456_436_737 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        Weight::from_ref_time(84_126_000 as u64)
            // Standard Error: 39_089
            .saturating_add(Weight::from_ref_time(200_095_839 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(83_467_000 as u64)
            // Standard Error: 194_343
            .saturating_add(Weight::from_ref_time(56_194_060 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(82_644_000 as u64)
            // Standard Error: 185_950
            .saturating_add(Weight::from_ref_time(39_908_980 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(82_736_000 as u64)
            // Standard Error: 193_447
            .saturating_add(Weight::from_ref_time(43_128_940 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(83_733_000 as u64)
            // Standard Error: 191_654
            .saturating_add(Weight::from_ref_time(42_001_589 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        Weight::from_ref_time(83_090_000 as u64)
            // Standard Error: 194_795
            .saturating_add(Weight::from_ref_time(41_382_069 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(84_800_000 as u64)
            // Standard Error: 46_603
            .saturating_add(Weight::from_ref_time(219_083_520 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(98_764_000 as u64)
            // Standard Error: 52_017
            .saturating_add(Weight::from_ref_time(381_183_518 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 1024]`.
    /// The range of component `s` is `[0, 1024]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(26_850_602_000 as u64)
            // Standard Error: 92_191
            .saturating_add(Weight::from_ref_time(8_366_115 as u64).saturating_mul(p as u64))
            // Standard Error: 92_191
            .saturating_add(Weight::from_ref_time(196_730_758 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(257 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(_r: u32, ) -> Weight {
        Weight::from_ref_time(11_441_000_000 as u64)
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_read_access(p: u32, ) -> Weight {
        Weight::from_ref_time(82_129_000 as u64)
            // Standard Error: 6_491
            .saturating_add(Weight::from_ref_time(49_098_637 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads((16 as u64).saturating_mul(p as u64)))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_write_access(p: u32, ) -> Weight {
        Weight::from_ref_time(25_317_785_000 as u64)
            // Standard Error: 18_986
            .saturating_add(Weight::from_ref_time(69_601_626 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(8192 as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(11_639_583_000 as u64)
            // Standard Error: 121_168
            .saturating_add(Weight::from_ref_time(30_753_009 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(11_670_404_000 as u64)
            // Standard Error: 116_067
            .saturating_add(Weight::from_ref_time(42_656_030 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(2_427_000 as u64)
            // Standard Error: 4_311
            .saturating_add(Weight::from_ref_time(7_702_775 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(2_503_000 as u64)
            // Standard Error: 3_905
            .saturating_add(Weight::from_ref_time(5_986_064 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(2_490_000 as u64)
            // Standard Error: 437
            .saturating_add(Weight::from_ref_time(3_346_520 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(2_464_000 as u64)
            // Standard Error: 4_604
            .saturating_add(Weight::from_ref_time(6_305_175 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(2_487_000 as u64)
            // Standard Error: 4_620
            .saturating_add(Weight::from_ref_time(9_954_417 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(11_661_000 as u64)
            // Standard Error: 485
            .saturating_add(Weight::from_ref_time(435_174 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(2_552_000 as u64)
            // Standard Error: 4_133
            .saturating_add(Weight::from_ref_time(4_949_248 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        Weight::from_ref_time(2_609_000 as u64)
            // Standard Error: 2_457
            .saturating_add(Weight::from_ref_time(5_232_762 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(3_044_000 as u64)
            // Standard Error: 17_996
            .saturating_add(Weight::from_ref_time(22_176_176 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(22_983_000 as u64)
            // Standard Error: 1_743
            .saturating_add(Weight::from_ref_time(1_989_106 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(2_596_000 as u64)
            // Standard Error: 2_246
            .saturating_add(Weight::from_ref_time(856_365 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(2_589_000 as u64)
            // Standard Error: 2_965
            .saturating_add(Weight::from_ref_time(2_228_924 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(2_633_000 as u64)
            // Standard Error: 2_766
            .saturating_add(Weight::from_ref_time(2_270_390 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(10_266_000 as u64)
            // Standard Error: 2_585
            .saturating_add(Weight::from_ref_time(2_124_888 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(10_335_000 as u64)
            // Standard Error: 3_320
            .saturating_add(Weight::from_ref_time(3_186_859 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(5_867_000 as u64)
            // Standard Error: 2_877
            .saturating_add(Weight::from_ref_time(14_247_078 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(2_501_000 as u64)
            // Standard Error: 4_443
            .saturating_add(Weight::from_ref_time(6_360_220 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(2_454_000 as u64)
            // Standard Error: 4_357
            .saturating_add(Weight::from_ref_time(5_985_280 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(2_489_000 as u64)
            // Standard Error: 2_825
            .saturating_add(Weight::from_ref_time(1_892_940 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(2_462_000 as u64)
            // Standard Error: 4_599
            .saturating_add(Weight::from_ref_time(3_696_829 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(2_481_000 as u64)
            // Standard Error: 2_524
            .saturating_add(Weight::from_ref_time(1_201_994 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(2_505_000 as u64)
            // Standard Error: 1_005
            .saturating_add(Weight::from_ref_time(649_619 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(2_489_000 as u64)
            // Standard Error: 733
            .saturating_add(Weight::from_ref_time(658_072 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(2_467_000 as u64)
            // Standard Error: 4_431
            .saturating_add(Weight::from_ref_time(3_750_397 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(2_467_000 as u64)
            // Standard Error: 4_362
            .saturating_add(Weight::from_ref_time(3_737_272 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(2_486_000 as u64)
            // Standard Error: 4_273
            .saturating_add(Weight::from_ref_time(3_736_465 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_492_000 as u64)
            // Standard Error: 4_488
            .saturating_add(Weight::from_ref_time(3_735_444 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(2_453_000 as u64)
            // Standard Error: 4_383
            .saturating_add(Weight::from_ref_time(3_738_452 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_498_000 as u64)
            // Standard Error: 4_105
            .saturating_add(Weight::from_ref_time(3_738_889 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(2_472_000 as u64)
            // Standard Error: 4_434
            .saturating_add(Weight::from_ref_time(3_749_190 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_493_000 as u64)
            // Standard Error: 4_185
            .saturating_add(Weight::from_ref_time(3_753_694 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(2_491_000 as u64)
            // Standard Error: 4_406
            .saturating_add(Weight::from_ref_time(3_751_322 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_511_000 as u64)
            // Standard Error: 4_370
            .saturating_add(Weight::from_ref_time(3_719_932 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(2_475_000 as u64)
            // Standard Error: 3_523
            .saturating_add(Weight::from_ref_time(3_045_504 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(2_460_000 as u64)
            // Standard Error: 3_453
            .saturating_add(Weight::from_ref_time(3_041_874 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(2_504_000 as u64)
            // Standard Error: 4_166
            .saturating_add(Weight::from_ref_time(3_646_804 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(2_455_000 as u64)
            // Standard Error: 5_577
            .saturating_add(Weight::from_ref_time(4_397_439 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_520_000 as u64)
            // Standard Error: 6_200
            .saturating_add(Weight::from_ref_time(4_753_735 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(2_464_000 as u64)
            // Standard Error: 26_543
            .saturating_add(Weight::from_ref_time(21_618_212 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_448_000 as u64)
            // Standard Error: 6_524
            .saturating_add(Weight::from_ref_time(4_828_604 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(2_481_000 as u64)
            // Standard Error: 3_620
            .saturating_add(Weight::from_ref_time(3_058_069 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(2_454_000 as u64)
            // Standard Error: 3_679
            .saturating_add(Weight::from_ref_time(3_041_454 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(2_499_000 as u64)
            // Standard Error: 3_539
            .saturating_add(Weight::from_ref_time(3_037_538 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(2_485_000 as u64)
            // Standard Error: 3_001
            .saturating_add(Weight::from_ref_time(2_759_459 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(2_521_000 as u64)
            // Standard Error: 3_044
            .saturating_add(Weight::from_ref_time(2_778_354 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(2_463_000 as u64)
            // Standard Error: 3_012
            .saturating_add(Weight::from_ref_time(2_791_416 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(2_443_000 as u64)
            // Standard Error: 3_075
            .saturating_add(Weight::from_ref_time(2_794_419 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(2_516_000 as u64)
            // Standard Error: 3_180
            .saturating_add(Weight::from_ref_time(2_780_646 as u64).saturating_mul(r as u64))
    }
}
