// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-17, STEPS: `20`, REPEAT: `40`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --pallet=pallet_gear --steps=20 --repeat=40 --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=5000 --template=.maintain/frame-weight-template.hbs --output=vara.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_error(r: u32, ) -> Weight;
    fn gr_status_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 908_000 picoseconds.
        Weight::from_parts(967_000, 0)
            // Standard Error: 1_387
            .saturating_add(Weight::from_parts(259_409, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3576 + c * (1024 ±0)`
        // Minimum execution time: 3_206_000 picoseconds.
        Weight::from_parts(3_307_000, 3576)
            // Standard Error: 1_291
            .saturating_add(Weight::from_parts(686_703, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 52_904_000 picoseconds.
        Weight::from_parts(96_897_154, 0)
            // Standard Error: 6_653
            .saturating_add(Weight::from_parts(2_322_545, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `791`
        //  Estimated: `22733`
        // Minimum execution time: 57_799_000 picoseconds.
        Weight::from_parts(59_326_000, 22733)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `5270`
        // Minimum execution time: 62_525_000 picoseconds.
        Weight::from_parts(32_683_629, 5270)
            // Standard Error: 54_034
            .saturating_add(Weight::from_parts(51_162_783, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `643`
        //  Estimated: `27926`
        // Minimum execution time: 52_406_000 picoseconds.
        Weight::from_parts(76_121_263, 27926)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_331, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `126`
        //  Estimated: `24042`
        // Minimum execution time: 9_536_187_000 picoseconds.
        Weight::from_parts(9_575_319_000, 24042)
            // Standard Error: 503_500
            .saturating_add(Weight::from_parts(27_878_606, 0).saturating_mul(c.into()))
            // Standard Error: 29
            .saturating_add(Weight::from_parts(819, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `311`
        //  Estimated: `23291`
        // Minimum execution time: 55_098_000 picoseconds.
        Weight::from_parts(33_254_956, 23291)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_172, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `954`
        //  Estimated: `41065`
        // Minimum execution time: 79_408_000 picoseconds.
        Weight::from_parts(58_032_539, 41065)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_205, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `886`
        //  Estimated: `70076`
        // Minimum execution time: 302_626_000 picoseconds.
        Weight::from_parts(315_795_007, 70076)
            // Standard Error: 1_283
            .saturating_add(Weight::from_parts(192, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(26_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `886`
        //  Estimated: `70076`
        // Minimum execution time: 317_189_000 picoseconds.
        Weight::from_parts(327_603_586, 70076)
            // Standard Error: 1_079
            .saturating_add(Weight::from_parts(1_180, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(26_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3923 + c * (2150 ±0)`
        // Minimum execution time: 45_576_000 picoseconds.
        Weight::from_parts(46_086_000, 3923)
            // Standard Error: 29_998
            .saturating_add(Weight::from_parts(49_915_681, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_835_000 picoseconds.
        Weight::from_parts(72_122_227, 0)
            // Standard Error: 511_081
            .saturating_add(Weight::from_parts(157_748_027, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 241_432_000 picoseconds.
        Weight::from_parts(233_541_722, 0)
            // Standard Error: 561_326
            .saturating_add(Weight::from_parts(160_087_807, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_021_000 picoseconds.
        Weight::from_parts(84_680_463, 0)
            // Standard Error: 15_444
            .saturating_add(Weight::from_parts(4_183_150, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 141_407_000 picoseconds.
        Weight::from_parts(189_791_979, 0)
            // Standard Error: 37_760
            .saturating_add(Weight::from_parts(4_283_595, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_381_000 picoseconds.
        Weight::from_parts(113_593_912, 0)
            // Standard Error: 529_496
            .saturating_add(Weight::from_parts(217_549_589, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_210_000 picoseconds.
        Weight::from_parts(78_042_349, 0)
            // Standard Error: 387_610
            .saturating_add(Weight::from_parts(217_997_528, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_969_000 picoseconds.
        Weight::from_parts(82_727_948, 0)
            // Standard Error: 357_805
            .saturating_add(Weight::from_parts(217_647_151, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_943_000 picoseconds.
        Weight::from_parts(89_614_618, 0)
            // Standard Error: 401_017
            .saturating_add(Weight::from_parts(216_431_938, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_709_000 picoseconds.
        Weight::from_parts(85_508_290, 0)
            // Standard Error: 431_851
            .saturating_add(Weight::from_parts(217_432_158, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_157_000 picoseconds.
        Weight::from_parts(86_472_737, 0)
            // Standard Error: 381_461
            .saturating_add(Weight::from_parts(215_569_798, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_241_000 picoseconds.
        Weight::from_parts(90_797_503, 0)
            // Standard Error: 403_546
            .saturating_add(Weight::from_parts(215_554_219, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_954_000 picoseconds.
        Weight::from_parts(89_194_219, 0)
            // Standard Error: 349_771
            .saturating_add(Weight::from_parts(215_105_010, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_454_000 picoseconds.
        Weight::from_parts(102_681_237, 0)
            // Standard Error: 484_254
            .saturating_add(Weight::from_parts(214_478_523, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 712_299_000 picoseconds.
        Weight::from_parts(791_999_074, 0)
            // Standard Error: 615_098
            .saturating_add(Weight::from_parts(291_339_107, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_010_023_000 picoseconds.
        Weight::from_parts(1_013_975_000, 0)
            // Standard Error: 50_770
            .saturating_add(Weight::from_parts(13_375_286, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_236_000 picoseconds.
        Weight::from_parts(90_569_680, 0)
            // Standard Error: 361_459
            .saturating_add(Weight::from_parts(216_339_441, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_994_000 picoseconds.
        Weight::from_parts(74_900_019, 0)
            // Standard Error: 447_941
            .saturating_add(Weight::from_parts(217_106_216, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_233_000 picoseconds.
        Weight::from_parts(108_363_504, 0)
            // Standard Error: 480_076
            .saturating_add(Weight::from_parts(280_458_241, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_540_000 picoseconds.
        Weight::from_parts(155_108_800, 0)
            // Standard Error: 686_733
            .saturating_add(Weight::from_parts(417_342_732, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 510_952_000 picoseconds.
        Weight::from_parts(515_415_000, 0)
            // Standard Error: 62_579
            .saturating_add(Weight::from_parts(21_708_270, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_857_000 picoseconds.
        Weight::from_parts(153_555_012, 0)
            // Standard Error: 620_938
            .saturating_add(Weight::from_parts(422_040_548, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 513_605_000 picoseconds.
        Weight::from_parts(519_112_000, 0)
            // Standard Error: 59_972
            .saturating_add(Weight::from_parts(21_193_682, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 706_061_000 picoseconds.
        Weight::from_parts(786_850_191, 0)
            // Standard Error: 650_388
            .saturating_add(Weight::from_parts(430_265_112, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 708_057_000 picoseconds.
        Weight::from_parts(767_063_198, 0)
            // Standard Error: 575_043
            .saturating_add(Weight::from_parts(441_013_988, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_150_000 picoseconds.
        Weight::from_parts(85_474_476, 0)
            // Standard Error: 431_096
            .saturating_add(Weight::from_parts(224_255_863, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_493_303_000 picoseconds.
        Weight::from_parts(4_568_675_537, 0)
            // Standard Error: 660_713
            .saturating_add(Weight::from_parts(318_901_419, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 622_965_000 picoseconds.
        Weight::from_parts(629_762_000, 0)
            // Standard Error: 47_212
            .saturating_add(Weight::from_parts(31_596_531, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_441_712_000 picoseconds.
        Weight::from_parts(4_580_830_141, 0)
            // Standard Error: 585_724
            .saturating_add(Weight::from_parts(370_457_359, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_471_187_000 picoseconds.
        Weight::from_parts(4_632_779_963, 0)
            // Standard Error: 708_798
            .saturating_add(Weight::from_parts(377_025_774, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 242_963_000 picoseconds.
        Weight::from_parts(317_425_116, 0)
            // Standard Error: 625_562
            .saturating_add(Weight::from_parts(433_649_578, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 681_969_000 picoseconds.
        Weight::from_parts(689_726_000, 0)
            // Standard Error: 65_541
            .saturating_add(Weight::from_parts(22_000_313, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_619_791_000 picoseconds.
        Weight::from_parts(4_735_916_428, 0)
            // Standard Error: 823_719
            .saturating_add(Weight::from_parts(388_619_688, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_692_000 picoseconds.
        Weight::from_parts(89_093_350, 0)
            // Standard Error: 175_723
            .saturating_add(Weight::from_parts(20_404_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_823_000 picoseconds.
        Weight::from_parts(98_251_754, 0)
            // Standard Error: 635
            .saturating_add(Weight::from_parts(412_730, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_336_000 picoseconds.
        Weight::from_parts(88_724_528, 0)
            // Standard Error: 168_361
            .saturating_add(Weight::from_parts(20_483_971, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_591_000 picoseconds.
        Weight::from_parts(98_069_828, 0)
            // Standard Error: 658
            .saturating_add(Weight::from_parts(413_373, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_621_000 picoseconds.
        Weight::from_parts(88_999_573, 0)
            // Standard Error: 159_559
            .saturating_add(Weight::from_parts(19_876_826, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_002_000 picoseconds.
        Weight::from_parts(89_428_592, 0)
            // Standard Error: 160_890
            .saturating_add(Weight::from_parts(20_872_907, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_410_000 picoseconds.
        Weight::from_parts(126_679_167, 0)
            // Standard Error: 439_766
            .saturating_add(Weight::from_parts(301_080_657, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_503_000 picoseconds.
        Weight::from_parts(105_349_000, 0)
            // Standard Error: 2_559
            .saturating_add(Weight::from_parts(634_949, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 703_876_000 picoseconds.
        Weight::from_parts(723_209_205, 0)
            // Standard Error: 1_300_320
            .saturating_add(Weight::from_parts(15_435_344, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 707_900_000 picoseconds.
        Weight::from_parts(724_383_307, 0)
            // Standard Error: 1_254_384
            .saturating_add(Weight::from_parts(26_428_492, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_547_000 picoseconds.
        Weight::from_parts(98_205_381, 0)
            // Standard Error: 183_655
            .saturating_add(Weight::from_parts(13_999_368, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_774_000 picoseconds.
        Weight::from_parts(99_985_773, 0)
            // Standard Error: 713
            .saturating_add(Weight::from_parts(419_090, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_790_000 picoseconds.
        Weight::from_parts(98_551_881, 0)
            // Standard Error: 186_253
            .saturating_add(Weight::from_parts(12_929_318, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_912_000 picoseconds.
        Weight::from_parts(98_818_745, 0)
            // Standard Error: 731
            .saturating_add(Weight::from_parts(415_209, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_823_000 picoseconds.
        Weight::from_parts(82_574_327, 0)
            // Standard Error: 402_266
            .saturating_add(Weight::from_parts(216_632_895, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_337_000 picoseconds.
        Weight::from_parts(89_816_907, 0)
            // Standard Error: 367_384
            .saturating_add(Weight::from_parts(215_227_574, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 708_833_000 picoseconds.
        Weight::from_parts(748_469_208, 0)
            // Standard Error: 575_476
            .saturating_add(Weight::from_parts(228_381_226, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 722_157_000 picoseconds.
        Weight::from_parts(740_440_019, 0)
            // Standard Error: 755
            .saturating_add(Weight::from_parts(151_634, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_101_488_000 picoseconds.
        Weight::from_parts(5_263_855_634, 0)
            // Standard Error: 702_108
            .saturating_add(Weight::from_parts(243_456_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_451_484_000 picoseconds.
        Weight::from_parts(5_463_802_199, 0)
            // Standard Error: 12_295
            .saturating_add(Weight::from_parts(13_603_271, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_669_000 picoseconds.
        Weight::from_parts(113_259_821, 0)
            // Standard Error: 624_972
            .saturating_add(Weight::from_parts(232_334_897, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 306_195_000 picoseconds.
        Weight::from_parts(308_545_000, 0)
            // Standard Error: 50_209
            .saturating_add(Weight::from_parts(25_711_894, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_921_000 picoseconds.
        Weight::from_parts(107_659_529, 0)
            // Standard Error: 502_061
            .saturating_add(Weight::from_parts(282_481_079, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_985_000 picoseconds.
        Weight::from_parts(87_580_657, 0)
            // Standard Error: 436_080
            .saturating_add(Weight::from_parts(215_631_084, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_731_000 picoseconds.
        Weight::from_parts(88_954_594, 0)
            // Standard Error: 177_777
            .saturating_add(Weight::from_parts(25_939_905, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_319_000 picoseconds.
        Weight::from_parts(88_504_189, 0)
            // Standard Error: 171_785
            .saturating_add(Weight::from_parts(15_805_760, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_292_000 picoseconds.
        Weight::from_parts(88_566_271, 0)
            // Standard Error: 176_481
            .saturating_add(Weight::from_parts(15_680_678, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_635_000 picoseconds.
        Weight::from_parts(88_795_102, 0)
            // Standard Error: 159_355
            .saturating_add(Weight::from_parts(16_970_547, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_360_000 picoseconds.
        Weight::from_parts(88_759_468, 0)
            // Standard Error: 166_198
            .saturating_add(Weight::from_parts(15_268_481, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 136_827_000 picoseconds.
        Weight::from_parts(215_292_365, 0)
            // Standard Error: 549_071
            .saturating_add(Weight::from_parts(313_312_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_230_000 picoseconds.
        Weight::from_parts(147_525_672, 0)
            // Standard Error: 540_853
            .saturating_add(Weight::from_parts(503_729_568, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_665_369_000 picoseconds.
        Weight::from_parts(43_910_822_000, 0)
            // Standard Error: 307_937
            .saturating_add(Weight::from_parts(7_669_664, 0).saturating_mul(p.into()))
            // Standard Error: 307_920
            .saturating_add(Weight::from_parts(158_701_667, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_542_000 picoseconds.
        Weight::from_parts(183_785_095, 0)
            // Standard Error: 632_087
            .saturating_add(Weight::from_parts(504_885_126, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_813_259_000 picoseconds.
        Weight::from_parts(43_955_068_000, 0)
            // Standard Error: 296_293
            .saturating_add(Weight::from_parts(7_433_911, 0).saturating_mul(p.into()))
            // Standard Error: 296_276
            .saturating_add(Weight::from_parts(158_560_082, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 84_928_000 picoseconds.
        Weight::from_parts(123_659_294, 1131)
            // Standard Error: 7_001
            .saturating_add(Weight::from_parts(11_770_477, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 88_795_000 picoseconds.
        Weight::from_parts(89_689_000, 1131)
            // Standard Error: 33_055
            .saturating_add(Weight::from_parts(34_858_236, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_090_485_000 picoseconds.
        Weight::from_parts(5_856_803_118, 5069931)
            // Standard Error: 94_090
            .saturating_add(Weight::from_parts(36_882_567, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `2002 + p * (75482 ±0)`
        // Minimum execution time: 85_960_000 picoseconds.
        Weight::from_parts(87_720_000, 2002)
            // Standard Error: 37_859
            .saturating_add(Weight::from_parts(45_753_240, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1574 + p * (9879 ±2)`
        // Minimum execution time: 100_674_000 picoseconds.
        Weight::from_parts(95_351_221, 1574)
            // Standard Error: 45_506
            .saturating_add(Weight::from_parts(35_265_027, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1574 + p * (9879 ±2)`
        // Minimum execution time: 743_048_000 picoseconds.
        Weight::from_parts(725_135_005, 1574)
            // Standard Error: 159_819
            .saturating_add(Weight::from_parts(42_191_169, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_121_965_000 picoseconds.
        Weight::from_parts(1_120_343_686, 317931)
            // Standard Error: 160_824
            .saturating_add(Weight::from_parts(43_605_767, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_229_498_000 picoseconds.
        Weight::from_parts(4_218_502_512, 0)
            // Standard Error: 13_816
            .saturating_add(Weight::from_parts(3_354_379, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_231_680_000 picoseconds.
        Weight::from_parts(4_221_685_613, 0)
            // Standard Error: 14_254
            .saturating_add(Weight::from_parts(3_381_420, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_715_792_000 picoseconds.
        Weight::from_parts(9_740_791_807, 0)
            // Standard Error: 148_774
            .saturating_add(Weight::from_parts(13_905_810, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_467_307_000 picoseconds.
        Weight::from_parts(9_976_839_290, 0)
            // Standard Error: 173_693
            .saturating_add(Weight::from_parts(9_799_683, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_095_000 picoseconds.
        Weight::from_parts(2_151_000, 0)
            // Standard Error: 9_229
            .saturating_add(Weight::from_parts(3_814_710, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_132_000 picoseconds.
        Weight::from_parts(2_199_000, 0)
            // Standard Error: 4_375
            .saturating_add(Weight::from_parts(3_090_415, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_065_000 picoseconds.
        Weight::from_parts(3_179_370, 0)
            // Standard Error: 1_104
            .saturating_add(Weight::from_parts(1_567_441, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_123_000 picoseconds.
        Weight::from_parts(2_211_000, 0)
            // Standard Error: 5_543
            .saturating_add(Weight::from_parts(3_030_952, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_143_000 picoseconds.
        Weight::from_parts(1_585_542, 0)
            // Standard Error: 19_908
            .saturating_add(Weight::from_parts(5_126_360, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_567_000 picoseconds.
        Weight::from_parts(5_644_175, 0)
            // Standard Error: 2_101
            .saturating_add(Weight::from_parts(146_629, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_189_000 picoseconds.
        Weight::from_parts(4_119_453, 0)
            // Standard Error: 7_630
            .saturating_add(Weight::from_parts(2_575_950, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(2_575_950 -
            2_492_574).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_146_000 picoseconds.
        Weight::from_parts(2_853_808, 0)
            // Standard Error: 12_864
            .saturating_add(Weight::from_parts(2_492_574, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_493_000 picoseconds.
        Weight::from_parts(16_778_523, 0)
            // Standard Error: 28_001
            .saturating_add(Weight::from_parts(9_809_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_050_000 picoseconds.
        Weight::from_parts(3_601_207, 0)
            // Standard Error: 5_182
            .saturating_add(Weight::from_parts(1_173_216, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_197_000 picoseconds.
        Weight::from_parts(5_451_070, 0)
            // Standard Error: 10
            .saturating_add(Weight::from_parts(51, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_106_000 picoseconds.
        Weight::from_parts(1_554_710, 0)
            // Standard Error: 3_418
            .saturating_add(Weight::from_parts(273_972, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_182_000 picoseconds.
        Weight::from_parts(2_273_000, 0)
            // Standard Error: 5_343
            .saturating_add(Weight::from_parts(782_134, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_095_000 picoseconds.
        Weight::from_parts(2_183_000, 0)
            // Standard Error: 6_058
            .saturating_add(Weight::from_parts(782_802, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_053_000 picoseconds.
        Weight::from_parts(2_228_906, 0)
            // Standard Error: 7_743
            .saturating_add(Weight::from_parts(805_346, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_011_000 picoseconds.
        Weight::from_parts(46_566, 0)
            // Standard Error: 10_197
            .saturating_add(Weight::from_parts(1_510_957, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_101_000 picoseconds.
        Weight::from_parts(1_491_842, 0)
            // Standard Error: 15_437
            .saturating_add(Weight::from_parts(6_786_203, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_114_000 picoseconds.
        Weight::from_parts(2_170_000, 0)
            // Standard Error: 6_624
            .saturating_add(Weight::from_parts(3_279_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_201_000 picoseconds.
        Weight::from_parts(2_242_000, 0)
            // Standard Error: 7_929
            .saturating_add(Weight::from_parts(3_108_987, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_104_000 picoseconds.
        Weight::from_parts(2_173_000, 0)
            // Standard Error: 7_733
            .saturating_add(Weight::from_parts(3_160_934, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_106_000 picoseconds.
        Weight::from_parts(2_182_000, 0)
            // Standard Error: 5_264
            .saturating_add(Weight::from_parts(2_632_985, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_102_000 picoseconds.
        Weight::from_parts(2_171_000, 0)
            // Standard Error: 4_041
            .saturating_add(Weight::from_parts(569_517, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_134_000 picoseconds.
        Weight::from_parts(1_389_400, 0)
            // Standard Error: 3_400
            .saturating_add(Weight::from_parts(401_834, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_067_000 picoseconds.
        Weight::from_parts(2_176_000, 0)
            // Standard Error: 11_275
            .saturating_add(Weight::from_parts(1_905_996, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_101_000 picoseconds.
        Weight::from_parts(2_167_000, 0)
            // Standard Error: 8_930
            .saturating_add(Weight::from_parts(1_191_568, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_093_000 picoseconds.
        Weight::from_parts(1_488_119, 0)
            // Standard Error: 4_132
            .saturating_add(Weight::from_parts(354_945, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_053_000 picoseconds.
        Weight::from_parts(2_680_840, 0)
            // Standard Error: 1_643
            .saturating_add(Weight::from_parts(165_947, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_146_000 picoseconds.
        Weight::from_parts(2_745_000, 0)
            // Standard Error: 1_822
            .saturating_add(Weight::from_parts(160_056, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_062_000 picoseconds.
        Weight::from_parts(2_170_000, 0)
            // Standard Error: 10_568
            .saturating_add(Weight::from_parts(1_817_189, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_073_000 picoseconds.
        Weight::from_parts(2_143_000, 0)
            // Standard Error: 9_045
            .saturating_add(Weight::from_parts(1_159_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_069_000 picoseconds.
        Weight::from_parts(2_124_000, 0)
            // Standard Error: 11_199
            .saturating_add(Weight::from_parts(1_866_025, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_089_000 picoseconds.
        Weight::from_parts(2_160_000, 0)
            // Standard Error: 8_216
            .saturating_add(Weight::from_parts(1_198_901, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_089_000 picoseconds.
        Weight::from_parts(2_166_000, 0)
            // Standard Error: 10_381
            .saturating_add(Weight::from_parts(1_836_969, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_090_000 picoseconds.
        Weight::from_parts(2_183_000, 0)
            // Standard Error: 8_009
            .saturating_add(Weight::from_parts(1_148_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_125_000 picoseconds.
        Weight::from_parts(2_194_000, 0)
            // Standard Error: 10_648
            .saturating_add(Weight::from_parts(1_847_065, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_074_000 picoseconds.
        Weight::from_parts(2_171_000, 0)
            // Standard Error: 8_516
            .saturating_add(Weight::from_parts(1_155_493, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_087_000 picoseconds.
        Weight::from_parts(2_148_000, 0)
            // Standard Error: 11_536
            .saturating_add(Weight::from_parts(1_839_252, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_094_000 picoseconds.
        Weight::from_parts(2_172_000, 0)
            // Standard Error: 8_353
            .saturating_add(Weight::from_parts(1_156_093, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_050_000 picoseconds.
        Weight::from_parts(2_174_000, 0)
            // Standard Error: 10_302
            .saturating_add(Weight::from_parts(1_819_839, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_135_000 picoseconds.
        Weight::from_parts(2_219_000, 0)
            // Standard Error: 7_737
            .saturating_add(Weight::from_parts(1_153_282, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_125_000 picoseconds.
        Weight::from_parts(2_177_000, 0)
            // Standard Error: 9_876
            .saturating_add(Weight::from_parts(1_839_526, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_022_000 picoseconds.
        Weight::from_parts(2_125_000, 0)
            // Standard Error: 8_916
            .saturating_add(Weight::from_parts(1_171_038, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_101_000 picoseconds.
        Weight::from_parts(2_154_000, 0)
            // Standard Error: 10_611
            .saturating_add(Weight::from_parts(1_848_728, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_114_000 picoseconds.
        Weight::from_parts(2_189_000, 0)
            // Standard Error: 8_300
            .saturating_add(Weight::from_parts(1_166_048, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_065_000 picoseconds.
        Weight::from_parts(2_137_000, 0)
            // Standard Error: 10_400
            .saturating_add(Weight::from_parts(1_933_208, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_089_000 picoseconds.
        Weight::from_parts(2_133_000, 0)
            // Standard Error: 8_654
            .saturating_add(Weight::from_parts(1_235_581, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_058_000 picoseconds.
        Weight::from_parts(2_150_000, 0)
            // Standard Error: 10_662
            .saturating_add(Weight::from_parts(1_954_369, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_126_000 picoseconds.
        Weight::from_parts(2_186_000, 0)
            // Standard Error: 9_401
            .saturating_add(Weight::from_parts(1_227_124, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_075_000 picoseconds.
        Weight::from_parts(2_165_000, 0)
            // Standard Error: 9_187
            .saturating_add(Weight::from_parts(1_331_172, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_136_000 picoseconds.
        Weight::from_parts(2_220_000, 0)
            // Standard Error: 5_370
            .saturating_add(Weight::from_parts(680_349, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_095_000 picoseconds.
        Weight::from_parts(2_182_000, 0)
            // Standard Error: 9_779
            .saturating_add(Weight::from_parts(1_323_547, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_103_000 picoseconds.
        Weight::from_parts(2_165_000, 0)
            // Standard Error: 4_708
            .saturating_add(Weight::from_parts(633_044, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_124_000 picoseconds.
        Weight::from_parts(2_207_000, 0)
            // Standard Error: 10_497
            .saturating_add(Weight::from_parts(1_764_631, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_095_000 picoseconds.
        Weight::from_parts(2_187_000, 0)
            // Standard Error: 8_962
            .saturating_add(Weight::from_parts(1_199_758, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_080_000 picoseconds.
        Weight::from_parts(4_319_462, 0)
            // Standard Error: 13_549
            .saturating_add(Weight::from_parts(2_559_333, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_145_000 picoseconds.
        Weight::from_parts(2_947_184, 0)
            // Standard Error: 10_275
            .saturating_add(Weight::from_parts(2_393_101, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_105_000 picoseconds.
        Weight::from_parts(1_256_332, 0)
            // Standard Error: 12_268
            .saturating_add(Weight::from_parts(2_951_687, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_131_000 picoseconds.
        Weight::from_parts(1_824_581, 0)
            // Standard Error: 10_150
            .saturating_add(Weight::from_parts(2_439_990, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_072_000 picoseconds.
        Weight::from_parts(389_059, 0)
            // Standard Error: 27_130
            .saturating_add(Weight::from_parts(9_476_608, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_151_000 picoseconds.
        Weight::from_parts(1_055_452, 0)
            // Standard Error: 47_658
            .saturating_add(Weight::from_parts(7_753_865, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_101_000 picoseconds.
        Weight::from_parts(2_825_957, 0)
            // Standard Error: 11_629
            .saturating_add(Weight::from_parts(2_894_424, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_143_000 picoseconds.
        Weight::from_parts(1_133_722, 0)
            // Standard Error: 10_100
            .saturating_add(Weight::from_parts(2_419_081, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_075_000 picoseconds.
        Weight::from_parts(2_132_000, 0)
            // Standard Error: 9_535
            .saturating_add(Weight::from_parts(1_275_434, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_145_000 picoseconds.
        Weight::from_parts(2_191_000, 0)
            // Standard Error: 4_973
            .saturating_add(Weight::from_parts(631_605, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_154_000 picoseconds.
        Weight::from_parts(2_211_000, 0)
            // Standard Error: 9_295
            .saturating_add(Weight::from_parts(1_270_711, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_154_000 picoseconds.
        Weight::from_parts(2_210_000, 0)
            // Standard Error: 4_545
            .saturating_add(Weight::from_parts(627_979, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_110_000 picoseconds.
        Weight::from_parts(2_181_000, 0)
            // Standard Error: 8_467
            .saturating_add(Weight::from_parts(1_292_360, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_110_000 picoseconds.
        Weight::from_parts(2_163_000, 0)
            // Standard Error: 4_974
            .saturating_add(Weight::from_parts(642_371, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_055_000 picoseconds.
        Weight::from_parts(2_127_000, 0)
            // Standard Error: 8_423
            .saturating_add(Weight::from_parts(1_155_055, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_078_000 picoseconds.
        Weight::from_parts(2_156_000, 0)
            // Standard Error: 4_113
            .saturating_add(Weight::from_parts(598_316, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_172_000 picoseconds.
        Weight::from_parts(2_221_000, 0)
            // Standard Error: 8_128
            .saturating_add(Weight::from_parts(1_087_800, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_036_000 picoseconds.
        Weight::from_parts(2_132_000, 0)
            // Standard Error: 4_349
            .saturating_add(Weight::from_parts(577_035, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_115_000 picoseconds.
        Weight::from_parts(2_177_000, 0)
            // Standard Error: 8_377
            .saturating_add(Weight::from_parts(1_078_445, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_051_000 picoseconds.
        Weight::from_parts(2_176_000, 0)
            // Standard Error: 3_796
            .saturating_add(Weight::from_parts(567_603, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_140_000 picoseconds.
        Weight::from_parts(2_178_000, 0)
            // Standard Error: 7_294
            .saturating_add(Weight::from_parts(1_069_928, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_171_000 picoseconds.
        Weight::from_parts(2_196_000, 0)
            // Standard Error: 4_239
            .saturating_add(Weight::from_parts(571_640, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_106_000 picoseconds.
        Weight::from_parts(2_173_000, 0)
            // Standard Error: 7_203
            .saturating_add(Weight::from_parts(1_069_540, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_129_000 picoseconds.
        Weight::from_parts(2_199_000, 0)
            // Standard Error: 5_128
            .saturating_add(Weight::from_parts(574_709, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 908_000 picoseconds.
        Weight::from_parts(967_000, 0)
            // Standard Error: 1_387
            .saturating_add(Weight::from_parts(259_409, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3576 + c * (1024 ±0)`
        // Minimum execution time: 3_206_000 picoseconds.
        Weight::from_parts(3_307_000, 3576)
            // Standard Error: 1_291
            .saturating_add(Weight::from_parts(686_703, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 52_904_000 picoseconds.
        Weight::from_parts(96_897_154, 0)
            // Standard Error: 6_653
            .saturating_add(Weight::from_parts(2_322_545, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `791`
        //  Estimated: `22733`
        // Minimum execution time: 57_799_000 picoseconds.
        Weight::from_parts(59_326_000, 22733)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `5270`
        // Minimum execution time: 62_525_000 picoseconds.
        Weight::from_parts(32_683_629, 5270)
            // Standard Error: 54_034
            .saturating_add(Weight::from_parts(51_162_783, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `643`
        //  Estimated: `27926`
        // Minimum execution time: 52_406_000 picoseconds.
        Weight::from_parts(76_121_263, 27926)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_331, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `126`
        //  Estimated: `24042`
        // Minimum execution time: 9_536_187_000 picoseconds.
        Weight::from_parts(9_575_319_000, 24042)
            // Standard Error: 503_500
            .saturating_add(Weight::from_parts(27_878_606, 0).saturating_mul(c.into()))
            // Standard Error: 29
            .saturating_add(Weight::from_parts(819, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `311`
        //  Estimated: `23291`
        // Minimum execution time: 55_098_000 picoseconds.
        Weight::from_parts(33_254_956, 23291)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_172, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `954`
        //  Estimated: `41065`
        // Minimum execution time: 79_408_000 picoseconds.
        Weight::from_parts(58_032_539, 41065)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_205, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `886`
        //  Estimated: `70076`
        // Minimum execution time: 302_626_000 picoseconds.
        Weight::from_parts(315_795_007, 70076)
            // Standard Error: 1_283
            .saturating_add(Weight::from_parts(192, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(26_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `886`
        //  Estimated: `70076`
        // Minimum execution time: 317_189_000 picoseconds.
        Weight::from_parts(327_603_586, 70076)
            // Standard Error: 1_079
            .saturating_add(Weight::from_parts(1_180, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(26_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3923 + c * (2150 ±0)`
        // Minimum execution time: 45_576_000 picoseconds.
        Weight::from_parts(46_086_000, 3923)
            // Standard Error: 29_998
            .saturating_add(Weight::from_parts(49_915_681, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_835_000 picoseconds.
        Weight::from_parts(72_122_227, 0)
            // Standard Error: 511_081
            .saturating_add(Weight::from_parts(157_748_027, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 241_432_000 picoseconds.
        Weight::from_parts(233_541_722, 0)
            // Standard Error: 561_326
            .saturating_add(Weight::from_parts(160_087_807, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_021_000 picoseconds.
        Weight::from_parts(84_680_463, 0)
            // Standard Error: 15_444
            .saturating_add(Weight::from_parts(4_183_150, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 141_407_000 picoseconds.
        Weight::from_parts(189_791_979, 0)
            // Standard Error: 37_760
            .saturating_add(Weight::from_parts(4_283_595, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_381_000 picoseconds.
        Weight::from_parts(113_593_912, 0)
            // Standard Error: 529_496
            .saturating_add(Weight::from_parts(217_549_589, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_210_000 picoseconds.
        Weight::from_parts(78_042_349, 0)
            // Standard Error: 387_610
            .saturating_add(Weight::from_parts(217_997_528, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_969_000 picoseconds.
        Weight::from_parts(82_727_948, 0)
            // Standard Error: 357_805
            .saturating_add(Weight::from_parts(217_647_151, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_943_000 picoseconds.
        Weight::from_parts(89_614_618, 0)
            // Standard Error: 401_017
            .saturating_add(Weight::from_parts(216_431_938, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_709_000 picoseconds.
        Weight::from_parts(85_508_290, 0)
            // Standard Error: 431_851
            .saturating_add(Weight::from_parts(217_432_158, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_157_000 picoseconds.
        Weight::from_parts(86_472_737, 0)
            // Standard Error: 381_461
            .saturating_add(Weight::from_parts(215_569_798, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_241_000 picoseconds.
        Weight::from_parts(90_797_503, 0)
            // Standard Error: 403_546
            .saturating_add(Weight::from_parts(215_554_219, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_954_000 picoseconds.
        Weight::from_parts(89_194_219, 0)
            // Standard Error: 349_771
            .saturating_add(Weight::from_parts(215_105_010, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_454_000 picoseconds.
        Weight::from_parts(102_681_237, 0)
            // Standard Error: 484_254
            .saturating_add(Weight::from_parts(214_478_523, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 712_299_000 picoseconds.
        Weight::from_parts(791_999_074, 0)
            // Standard Error: 615_098
            .saturating_add(Weight::from_parts(291_339_107, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_010_023_000 picoseconds.
        Weight::from_parts(1_013_975_000, 0)
            // Standard Error: 50_770
            .saturating_add(Weight::from_parts(13_375_286, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_236_000 picoseconds.
        Weight::from_parts(90_569_680, 0)
            // Standard Error: 361_459
            .saturating_add(Weight::from_parts(216_339_441, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_994_000 picoseconds.
        Weight::from_parts(74_900_019, 0)
            // Standard Error: 447_941
            .saturating_add(Weight::from_parts(217_106_216, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_233_000 picoseconds.
        Weight::from_parts(108_363_504, 0)
            // Standard Error: 480_076
            .saturating_add(Weight::from_parts(280_458_241, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_540_000 picoseconds.
        Weight::from_parts(155_108_800, 0)
            // Standard Error: 686_733
            .saturating_add(Weight::from_parts(417_342_732, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 510_952_000 picoseconds.
        Weight::from_parts(515_415_000, 0)
            // Standard Error: 62_579
            .saturating_add(Weight::from_parts(21_708_270, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_857_000 picoseconds.
        Weight::from_parts(153_555_012, 0)
            // Standard Error: 620_938
            .saturating_add(Weight::from_parts(422_040_548, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 513_605_000 picoseconds.
        Weight::from_parts(519_112_000, 0)
            // Standard Error: 59_972
            .saturating_add(Weight::from_parts(21_193_682, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 706_061_000 picoseconds.
        Weight::from_parts(786_850_191, 0)
            // Standard Error: 650_388
            .saturating_add(Weight::from_parts(430_265_112, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 708_057_000 picoseconds.
        Weight::from_parts(767_063_198, 0)
            // Standard Error: 575_043
            .saturating_add(Weight::from_parts(441_013_988, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_150_000 picoseconds.
        Weight::from_parts(85_474_476, 0)
            // Standard Error: 431_096
            .saturating_add(Weight::from_parts(224_255_863, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_493_303_000 picoseconds.
        Weight::from_parts(4_568_675_537, 0)
            // Standard Error: 660_713
            .saturating_add(Weight::from_parts(318_901_419, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 622_965_000 picoseconds.
        Weight::from_parts(629_762_000, 0)
            // Standard Error: 47_212
            .saturating_add(Weight::from_parts(31_596_531, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_441_712_000 picoseconds.
        Weight::from_parts(4_580_830_141, 0)
            // Standard Error: 585_724
            .saturating_add(Weight::from_parts(370_457_359, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_471_187_000 picoseconds.
        Weight::from_parts(4_632_779_963, 0)
            // Standard Error: 708_798
            .saturating_add(Weight::from_parts(377_025_774, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 242_963_000 picoseconds.
        Weight::from_parts(317_425_116, 0)
            // Standard Error: 625_562
            .saturating_add(Weight::from_parts(433_649_578, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 681_969_000 picoseconds.
        Weight::from_parts(689_726_000, 0)
            // Standard Error: 65_541
            .saturating_add(Weight::from_parts(22_000_313, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_619_791_000 picoseconds.
        Weight::from_parts(4_735_916_428, 0)
            // Standard Error: 823_719
            .saturating_add(Weight::from_parts(388_619_688, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_692_000 picoseconds.
        Weight::from_parts(89_093_350, 0)
            // Standard Error: 175_723
            .saturating_add(Weight::from_parts(20_404_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_823_000 picoseconds.
        Weight::from_parts(98_251_754, 0)
            // Standard Error: 635
            .saturating_add(Weight::from_parts(412_730, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_336_000 picoseconds.
        Weight::from_parts(88_724_528, 0)
            // Standard Error: 168_361
            .saturating_add(Weight::from_parts(20_483_971, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_591_000 picoseconds.
        Weight::from_parts(98_069_828, 0)
            // Standard Error: 658
            .saturating_add(Weight::from_parts(413_373, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_621_000 picoseconds.
        Weight::from_parts(88_999_573, 0)
            // Standard Error: 159_559
            .saturating_add(Weight::from_parts(19_876_826, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_002_000 picoseconds.
        Weight::from_parts(89_428_592, 0)
            // Standard Error: 160_890
            .saturating_add(Weight::from_parts(20_872_907, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_410_000 picoseconds.
        Weight::from_parts(126_679_167, 0)
            // Standard Error: 439_766
            .saturating_add(Weight::from_parts(301_080_657, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_503_000 picoseconds.
        Weight::from_parts(105_349_000, 0)
            // Standard Error: 2_559
            .saturating_add(Weight::from_parts(634_949, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 703_876_000 picoseconds.
        Weight::from_parts(723_209_205, 0)
            // Standard Error: 1_300_320
            .saturating_add(Weight::from_parts(15_435_344, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 707_900_000 picoseconds.
        Weight::from_parts(724_383_307, 0)
            // Standard Error: 1_254_384
            .saturating_add(Weight::from_parts(26_428_492, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_547_000 picoseconds.
        Weight::from_parts(98_205_381, 0)
            // Standard Error: 183_655
            .saturating_add(Weight::from_parts(13_999_368, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_774_000 picoseconds.
        Weight::from_parts(99_985_773, 0)
            // Standard Error: 713
            .saturating_add(Weight::from_parts(419_090, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_790_000 picoseconds.
        Weight::from_parts(98_551_881, 0)
            // Standard Error: 186_253
            .saturating_add(Weight::from_parts(12_929_318, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_912_000 picoseconds.
        Weight::from_parts(98_818_745, 0)
            // Standard Error: 731
            .saturating_add(Weight::from_parts(415_209, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_823_000 picoseconds.
        Weight::from_parts(82_574_327, 0)
            // Standard Error: 402_266
            .saturating_add(Weight::from_parts(216_632_895, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_337_000 picoseconds.
        Weight::from_parts(89_816_907, 0)
            // Standard Error: 367_384
            .saturating_add(Weight::from_parts(215_227_574, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 708_833_000 picoseconds.
        Weight::from_parts(748_469_208, 0)
            // Standard Error: 575_476
            .saturating_add(Weight::from_parts(228_381_226, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 722_157_000 picoseconds.
        Weight::from_parts(740_440_019, 0)
            // Standard Error: 755
            .saturating_add(Weight::from_parts(151_634, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_101_488_000 picoseconds.
        Weight::from_parts(5_263_855_634, 0)
            // Standard Error: 702_108
            .saturating_add(Weight::from_parts(243_456_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_451_484_000 picoseconds.
        Weight::from_parts(5_463_802_199, 0)
            // Standard Error: 12_295
            .saturating_add(Weight::from_parts(13_603_271, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_669_000 picoseconds.
        Weight::from_parts(113_259_821, 0)
            // Standard Error: 624_972
            .saturating_add(Weight::from_parts(232_334_897, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 306_195_000 picoseconds.
        Weight::from_parts(308_545_000, 0)
            // Standard Error: 50_209
            .saturating_add(Weight::from_parts(25_711_894, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_921_000 picoseconds.
        Weight::from_parts(107_659_529, 0)
            // Standard Error: 502_061
            .saturating_add(Weight::from_parts(282_481_079, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_985_000 picoseconds.
        Weight::from_parts(87_580_657, 0)
            // Standard Error: 436_080
            .saturating_add(Weight::from_parts(215_631_084, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_731_000 picoseconds.
        Weight::from_parts(88_954_594, 0)
            // Standard Error: 177_777
            .saturating_add(Weight::from_parts(25_939_905, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_319_000 picoseconds.
        Weight::from_parts(88_504_189, 0)
            // Standard Error: 171_785
            .saturating_add(Weight::from_parts(15_805_760, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_292_000 picoseconds.
        Weight::from_parts(88_566_271, 0)
            // Standard Error: 176_481
            .saturating_add(Weight::from_parts(15_680_678, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_635_000 picoseconds.
        Weight::from_parts(88_795_102, 0)
            // Standard Error: 159_355
            .saturating_add(Weight::from_parts(16_970_547, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_360_000 picoseconds.
        Weight::from_parts(88_759_468, 0)
            // Standard Error: 166_198
            .saturating_add(Weight::from_parts(15_268_481, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 136_827_000 picoseconds.
        Weight::from_parts(215_292_365, 0)
            // Standard Error: 549_071
            .saturating_add(Weight::from_parts(313_312_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_230_000 picoseconds.
        Weight::from_parts(147_525_672, 0)
            // Standard Error: 540_853
            .saturating_add(Weight::from_parts(503_729_568, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_665_369_000 picoseconds.
        Weight::from_parts(43_910_822_000, 0)
            // Standard Error: 307_937
            .saturating_add(Weight::from_parts(7_669_664, 0).saturating_mul(p.into()))
            // Standard Error: 307_920
            .saturating_add(Weight::from_parts(158_701_667, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_542_000 picoseconds.
        Weight::from_parts(183_785_095, 0)
            // Standard Error: 632_087
            .saturating_add(Weight::from_parts(504_885_126, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_813_259_000 picoseconds.
        Weight::from_parts(43_955_068_000, 0)
            // Standard Error: 296_293
            .saturating_add(Weight::from_parts(7_433_911, 0).saturating_mul(p.into()))
            // Standard Error: 296_276
            .saturating_add(Weight::from_parts(158_560_082, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 84_928_000 picoseconds.
        Weight::from_parts(123_659_294, 1131)
            // Standard Error: 7_001
            .saturating_add(Weight::from_parts(11_770_477, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 88_795_000 picoseconds.
        Weight::from_parts(89_689_000, 1131)
            // Standard Error: 33_055
            .saturating_add(Weight::from_parts(34_858_236, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_090_485_000 picoseconds.
        Weight::from_parts(5_856_803_118, 5069931)
            // Standard Error: 94_090
            .saturating_add(Weight::from_parts(36_882_567, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `2002 + p * (75482 ±0)`
        // Minimum execution time: 85_960_000 picoseconds.
        Weight::from_parts(87_720_000, 2002)
            // Standard Error: 37_859
            .saturating_add(Weight::from_parts(45_753_240, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1574 + p * (9879 ±2)`
        // Minimum execution time: 100_674_000 picoseconds.
        Weight::from_parts(95_351_221, 1574)
            // Standard Error: 45_506
            .saturating_add(Weight::from_parts(35_265_027, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1574 + p * (9879 ±2)`
        // Minimum execution time: 743_048_000 picoseconds.
        Weight::from_parts(725_135_005, 1574)
            // Standard Error: 159_819
            .saturating_add(Weight::from_parts(42_191_169, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_121_965_000 picoseconds.
        Weight::from_parts(1_120_343_686, 317931)
            // Standard Error: 160_824
            .saturating_add(Weight::from_parts(43_605_767, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_229_498_000 picoseconds.
        Weight::from_parts(4_218_502_512, 0)
            // Standard Error: 13_816
            .saturating_add(Weight::from_parts(3_354_379, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_231_680_000 picoseconds.
        Weight::from_parts(4_221_685_613, 0)
            // Standard Error: 14_254
            .saturating_add(Weight::from_parts(3_381_420, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_715_792_000 picoseconds.
        Weight::from_parts(9_740_791_807, 0)
            // Standard Error: 148_774
            .saturating_add(Weight::from_parts(13_905_810, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_467_307_000 picoseconds.
        Weight::from_parts(9_976_839_290, 0)
            // Standard Error: 173_693
            .saturating_add(Weight::from_parts(9_799_683, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_095_000 picoseconds.
        Weight::from_parts(2_151_000, 0)
            // Standard Error: 9_229
            .saturating_add(Weight::from_parts(3_814_710, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_132_000 picoseconds.
        Weight::from_parts(2_199_000, 0)
            // Standard Error: 4_375
            .saturating_add(Weight::from_parts(3_090_415, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_065_000 picoseconds.
        Weight::from_parts(3_179_370, 0)
            // Standard Error: 1_104
            .saturating_add(Weight::from_parts(1_567_441, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_123_000 picoseconds.
        Weight::from_parts(2_211_000, 0)
            // Standard Error: 5_543
            .saturating_add(Weight::from_parts(3_030_952, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_143_000 picoseconds.
        Weight::from_parts(1_585_542, 0)
            // Standard Error: 19_908
            .saturating_add(Weight::from_parts(5_126_360, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_567_000 picoseconds.
        Weight::from_parts(5_644_175, 0)
            // Standard Error: 2_101
            .saturating_add(Weight::from_parts(146_629, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_189_000 picoseconds.
        Weight::from_parts(4_119_453, 0)
            // Standard Error: 7_630
            .saturating_add(Weight::from_parts(2_575_950, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(2_575_950 -
            2_492_574).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_146_000 picoseconds.
        Weight::from_parts(2_853_808, 0)
            // Standard Error: 12_864
            .saturating_add(Weight::from_parts(2_492_574, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_493_000 picoseconds.
        Weight::from_parts(16_778_523, 0)
            // Standard Error: 28_001
            .saturating_add(Weight::from_parts(9_809_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_050_000 picoseconds.
        Weight::from_parts(3_601_207, 0)
            // Standard Error: 5_182
            .saturating_add(Weight::from_parts(1_173_216, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_197_000 picoseconds.
        Weight::from_parts(5_451_070, 0)
            // Standard Error: 10
            .saturating_add(Weight::from_parts(51, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_106_000 picoseconds.
        Weight::from_parts(1_554_710, 0)
            // Standard Error: 3_418
            .saturating_add(Weight::from_parts(273_972, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_182_000 picoseconds.
        Weight::from_parts(2_273_000, 0)
            // Standard Error: 5_343
            .saturating_add(Weight::from_parts(782_134, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_095_000 picoseconds.
        Weight::from_parts(2_183_000, 0)
            // Standard Error: 6_058
            .saturating_add(Weight::from_parts(782_802, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_053_000 picoseconds.
        Weight::from_parts(2_228_906, 0)
            // Standard Error: 7_743
            .saturating_add(Weight::from_parts(805_346, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_011_000 picoseconds.
        Weight::from_parts(46_566, 0)
            // Standard Error: 10_197
            .saturating_add(Weight::from_parts(1_510_957, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_101_000 picoseconds.
        Weight::from_parts(1_491_842, 0)
            // Standard Error: 15_437
            .saturating_add(Weight::from_parts(6_786_203, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_114_000 picoseconds.
        Weight::from_parts(2_170_000, 0)
            // Standard Error: 6_624
            .saturating_add(Weight::from_parts(3_279_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_201_000 picoseconds.
        Weight::from_parts(2_242_000, 0)
            // Standard Error: 7_929
            .saturating_add(Weight::from_parts(3_108_987, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_104_000 picoseconds.
        Weight::from_parts(2_173_000, 0)
            // Standard Error: 7_733
            .saturating_add(Weight::from_parts(3_160_934, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_106_000 picoseconds.
        Weight::from_parts(2_182_000, 0)
            // Standard Error: 5_264
            .saturating_add(Weight::from_parts(2_632_985, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_102_000 picoseconds.
        Weight::from_parts(2_171_000, 0)
            // Standard Error: 4_041
            .saturating_add(Weight::from_parts(569_517, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_134_000 picoseconds.
        Weight::from_parts(1_389_400, 0)
            // Standard Error: 3_400
            .saturating_add(Weight::from_parts(401_834, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_067_000 picoseconds.
        Weight::from_parts(2_176_000, 0)
            // Standard Error: 11_275
            .saturating_add(Weight::from_parts(1_905_996, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_101_000 picoseconds.
        Weight::from_parts(2_167_000, 0)
            // Standard Error: 8_930
            .saturating_add(Weight::from_parts(1_191_568, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_093_000 picoseconds.
        Weight::from_parts(1_488_119, 0)
            // Standard Error: 4_132
            .saturating_add(Weight::from_parts(354_945, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_053_000 picoseconds.
        Weight::from_parts(2_680_840, 0)
            // Standard Error: 1_643
            .saturating_add(Weight::from_parts(165_947, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_146_000 picoseconds.
        Weight::from_parts(2_745_000, 0)
            // Standard Error: 1_822
            .saturating_add(Weight::from_parts(160_056, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_062_000 picoseconds.
        Weight::from_parts(2_170_000, 0)
            // Standard Error: 10_568
            .saturating_add(Weight::from_parts(1_817_189, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_073_000 picoseconds.
        Weight::from_parts(2_143_000, 0)
            // Standard Error: 9_045
            .saturating_add(Weight::from_parts(1_159_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_069_000 picoseconds.
        Weight::from_parts(2_124_000, 0)
            // Standard Error: 11_199
            .saturating_add(Weight::from_parts(1_866_025, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_089_000 picoseconds.
        Weight::from_parts(2_160_000, 0)
            // Standard Error: 8_216
            .saturating_add(Weight::from_parts(1_198_901, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_089_000 picoseconds.
        Weight::from_parts(2_166_000, 0)
            // Standard Error: 10_381
            .saturating_add(Weight::from_parts(1_836_969, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_090_000 picoseconds.
        Weight::from_parts(2_183_000, 0)
            // Standard Error: 8_009
            .saturating_add(Weight::from_parts(1_148_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_125_000 picoseconds.
        Weight::from_parts(2_194_000, 0)
            // Standard Error: 10_648
            .saturating_add(Weight::from_parts(1_847_065, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_074_000 picoseconds.
        Weight::from_parts(2_171_000, 0)
            // Standard Error: 8_516
            .saturating_add(Weight::from_parts(1_155_493, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_087_000 picoseconds.
        Weight::from_parts(2_148_000, 0)
            // Standard Error: 11_536
            .saturating_add(Weight::from_parts(1_839_252, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_094_000 picoseconds.
        Weight::from_parts(2_172_000, 0)
            // Standard Error: 8_353
            .saturating_add(Weight::from_parts(1_156_093, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_050_000 picoseconds.
        Weight::from_parts(2_174_000, 0)
            // Standard Error: 10_302
            .saturating_add(Weight::from_parts(1_819_839, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_135_000 picoseconds.
        Weight::from_parts(2_219_000, 0)
            // Standard Error: 7_737
            .saturating_add(Weight::from_parts(1_153_282, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_125_000 picoseconds.
        Weight::from_parts(2_177_000, 0)
            // Standard Error: 9_876
            .saturating_add(Weight::from_parts(1_839_526, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_022_000 picoseconds.
        Weight::from_parts(2_125_000, 0)
            // Standard Error: 8_916
            .saturating_add(Weight::from_parts(1_171_038, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_101_000 picoseconds.
        Weight::from_parts(2_154_000, 0)
            // Standard Error: 10_611
            .saturating_add(Weight::from_parts(1_848_728, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_114_000 picoseconds.
        Weight::from_parts(2_189_000, 0)
            // Standard Error: 8_300
            .saturating_add(Weight::from_parts(1_166_048, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_065_000 picoseconds.
        Weight::from_parts(2_137_000, 0)
            // Standard Error: 10_400
            .saturating_add(Weight::from_parts(1_933_208, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_089_000 picoseconds.
        Weight::from_parts(2_133_000, 0)
            // Standard Error: 8_654
            .saturating_add(Weight::from_parts(1_235_581, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_058_000 picoseconds.
        Weight::from_parts(2_150_000, 0)
            // Standard Error: 10_662
            .saturating_add(Weight::from_parts(1_954_369, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_126_000 picoseconds.
        Weight::from_parts(2_186_000, 0)
            // Standard Error: 9_401
            .saturating_add(Weight::from_parts(1_227_124, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_075_000 picoseconds.
        Weight::from_parts(2_165_000, 0)
            // Standard Error: 9_187
            .saturating_add(Weight::from_parts(1_331_172, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_136_000 picoseconds.
        Weight::from_parts(2_220_000, 0)
            // Standard Error: 5_370
            .saturating_add(Weight::from_parts(680_349, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_095_000 picoseconds.
        Weight::from_parts(2_182_000, 0)
            // Standard Error: 9_779
            .saturating_add(Weight::from_parts(1_323_547, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_103_000 picoseconds.
        Weight::from_parts(2_165_000, 0)
            // Standard Error: 4_708
            .saturating_add(Weight::from_parts(633_044, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_124_000 picoseconds.
        Weight::from_parts(2_207_000, 0)
            // Standard Error: 10_497
            .saturating_add(Weight::from_parts(1_764_631, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_095_000 picoseconds.
        Weight::from_parts(2_187_000, 0)
            // Standard Error: 8_962
            .saturating_add(Weight::from_parts(1_199_758, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_080_000 picoseconds.
        Weight::from_parts(4_319_462, 0)
            // Standard Error: 13_549
            .saturating_add(Weight::from_parts(2_559_333, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_145_000 picoseconds.
        Weight::from_parts(2_947_184, 0)
            // Standard Error: 10_275
            .saturating_add(Weight::from_parts(2_393_101, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_105_000 picoseconds.
        Weight::from_parts(1_256_332, 0)
            // Standard Error: 12_268
            .saturating_add(Weight::from_parts(2_951_687, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_131_000 picoseconds.
        Weight::from_parts(1_824_581, 0)
            // Standard Error: 10_150
            .saturating_add(Weight::from_parts(2_439_990, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_072_000 picoseconds.
        Weight::from_parts(389_059, 0)
            // Standard Error: 27_130
            .saturating_add(Weight::from_parts(9_476_608, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_151_000 picoseconds.
        Weight::from_parts(1_055_452, 0)
            // Standard Error: 47_658
            .saturating_add(Weight::from_parts(7_753_865, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_101_000 picoseconds.
        Weight::from_parts(2_825_957, 0)
            // Standard Error: 11_629
            .saturating_add(Weight::from_parts(2_894_424, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_143_000 picoseconds.
        Weight::from_parts(1_133_722, 0)
            // Standard Error: 10_100
            .saturating_add(Weight::from_parts(2_419_081, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_075_000 picoseconds.
        Weight::from_parts(2_132_000, 0)
            // Standard Error: 9_535
            .saturating_add(Weight::from_parts(1_275_434, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_145_000 picoseconds.
        Weight::from_parts(2_191_000, 0)
            // Standard Error: 4_973
            .saturating_add(Weight::from_parts(631_605, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_154_000 picoseconds.
        Weight::from_parts(2_211_000, 0)
            // Standard Error: 9_295
            .saturating_add(Weight::from_parts(1_270_711, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_154_000 picoseconds.
        Weight::from_parts(2_210_000, 0)
            // Standard Error: 4_545
            .saturating_add(Weight::from_parts(627_979, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_110_000 picoseconds.
        Weight::from_parts(2_181_000, 0)
            // Standard Error: 8_467
            .saturating_add(Weight::from_parts(1_292_360, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_110_000 picoseconds.
        Weight::from_parts(2_163_000, 0)
            // Standard Error: 4_974
            .saturating_add(Weight::from_parts(642_371, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_055_000 picoseconds.
        Weight::from_parts(2_127_000, 0)
            // Standard Error: 8_423
            .saturating_add(Weight::from_parts(1_155_055, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_078_000 picoseconds.
        Weight::from_parts(2_156_000, 0)
            // Standard Error: 4_113
            .saturating_add(Weight::from_parts(598_316, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_172_000 picoseconds.
        Weight::from_parts(2_221_000, 0)
            // Standard Error: 8_128
            .saturating_add(Weight::from_parts(1_087_800, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_036_000 picoseconds.
        Weight::from_parts(2_132_000, 0)
            // Standard Error: 4_349
            .saturating_add(Weight::from_parts(577_035, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_115_000 picoseconds.
        Weight::from_parts(2_177_000, 0)
            // Standard Error: 8_377
            .saturating_add(Weight::from_parts(1_078_445, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_051_000 picoseconds.
        Weight::from_parts(2_176_000, 0)
            // Standard Error: 3_796
            .saturating_add(Weight::from_parts(567_603, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_140_000 picoseconds.
        Weight::from_parts(2_178_000, 0)
            // Standard Error: 7_294
            .saturating_add(Weight::from_parts(1_069_928, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_171_000 picoseconds.
        Weight::from_parts(2_196_000, 0)
            // Standard Error: 4_239
            .saturating_add(Weight::from_parts(571_640, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_106_000 picoseconds.
        Weight::from_parts(2_173_000, 0)
            // Standard Error: 7_203
            .saturating_add(Weight::from_parts(1_069_540, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_129_000 picoseconds.
        Weight::from_parts(2_199_000, 0)
            // Standard Error: 5_128
            .saturating_add(Weight::from_parts(574_709, 0).saturating_mul(r.into()))
    }
}
