// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-29, STEPS: `20`, REPEAT: `40`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=20 --repeat=40 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_error(r: u32, ) -> Weight;
    fn gr_status_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_056 nanoseconds.
        Weight::from_ref_time(1_134_000)
            // Standard Error: 579
            .saturating_add(Weight::from_ref_time(205_985).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `145 + c * (1024 ±0)`
        //  Estimated: `2612 + c * (1024 ±0)`
        // Minimum execution time: 3_292 nanoseconds.
        Weight::from_parts(3_392_000, 2612)
            // Standard Error: 1_237
            .saturating_add(Weight::from_ref_time(677_699).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 55_815 nanoseconds.
        Weight::from_ref_time(100_410_445)
            // Standard Error: 5_974
            .saturating_add(Weight::from_ref_time(2_228_842).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `918`
        //  Estimated: `17301`
        // Minimum execution time: 56_155 nanoseconds.
        Weight::from_parts(58_026_000, 17301)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3290`
        // Minimum execution time: 57_098 nanoseconds.
        Weight::from_parts(6_333_992, 3290)
            // Standard Error: 57_742
            .saturating_add(Weight::from_ref_time(53_126_338).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `675`
        //  Estimated: `18282`
        // Minimum execution time: 53_788 nanoseconds.
        Weight::from_parts(66_488_425, 18282)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_279).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `126`
        //  Estimated: `14142`
        // Minimum execution time: 9_294_600 nanoseconds.
        Weight::from_parts(9_425_520_000, 14142)
            // Standard Error: 509_015
            .saturating_add(Weight::from_ref_time(30_255_518).saturating_mul(c.into()))
            // Standard Error: 30
            .saturating_add(Weight::from_ref_time(828).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `375`
        //  Estimated: `14765`
        // Minimum execution time: 54_098 nanoseconds.
        Weight::from_parts(27_747_854, 14765)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(1_152).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1113`
        //  Estimated: `31447`
        // Minimum execution time: 78_026 nanoseconds.
        Weight::from_parts(56_972_489, 31447)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(1_148).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `982`
        //  Estimated: `48842`
        // Minimum execution time: 310_725 nanoseconds.
        Weight::from_parts(322_116_929, 48842)
            // Standard Error: 1_093
            .saturating_add(Weight::from_ref_time(2_840).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(26_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `982`
        //  Estimated: `48842`
        // Minimum execution time: 327_013 nanoseconds.
        Weight::from_parts(337_196_755, 48842)
            // Standard Error: 1_059
            .saturating_add(Weight::from_ref_time(1_295).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(26_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `243 + c * (1075 ±0)`
        //  Estimated: `2997 + c * (2150 ±0)`
        // Minimum execution time: 41_732 nanoseconds.
        Weight::from_parts(42_566_000, 2997)
            // Standard Error: 28_987
            .saturating_add(Weight::from_ref_time(53_204_697).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_proof_size(2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_825 nanoseconds.
        Weight::from_ref_time(94_480_461)
            // Standard Error: 80_431
            .saturating_add(Weight::from_ref_time(151_553_694).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 246_223 nanoseconds.
        Weight::from_ref_time(244_559_014)
            // Standard Error: 88_953
            .saturating_add(Weight::from_ref_time(151_061_304).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_004 nanoseconds.
        Weight::from_ref_time(93_110_000)
            // Standard Error: 1_172_959
            .saturating_add(Weight::from_ref_time(387_355_328).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 169_436 nanoseconds.
        Weight::from_ref_time(209_409_586)
            // Standard Error: 174_714
            .saturating_add(Weight::from_ref_time(313_429_551).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_547 nanoseconds.
        Weight::from_ref_time(115_509_411)
            // Standard Error: 136_112
            .saturating_add(Weight::from_ref_time(213_317_912).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_127 nanoseconds.
        Weight::from_ref_time(97_207_446)
            // Standard Error: 115_714
            .saturating_add(Weight::from_ref_time(212_064_162).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_038 nanoseconds.
        Weight::from_ref_time(104_713_207)
            // Standard Error: 131_344
            .saturating_add(Weight::from_ref_time(211_516_422).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_597 nanoseconds.
        Weight::from_ref_time(105_805_867)
            // Standard Error: 108_940
            .saturating_add(Weight::from_ref_time(211_424_529).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_076 nanoseconds.
        Weight::from_ref_time(100_681_282)
            // Standard Error: 81_910
            .saturating_add(Weight::from_ref_time(212_590_436).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_558 nanoseconds.
        Weight::from_ref_time(101_029_301)
            // Standard Error: 82_896
            .saturating_add(Weight::from_ref_time(212_002_968).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_019 nanoseconds.
        Weight::from_ref_time(101_667_477)
            // Standard Error: 94_559
            .saturating_add(Weight::from_ref_time(210_941_958).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_647 nanoseconds.
        Weight::from_ref_time(101_256_619)
            // Standard Error: 130_129
            .saturating_add(Weight::from_ref_time(210_851_307).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_358 nanoseconds.
        Weight::from_ref_time(101_552_545)
            // Standard Error: 71_276
            .saturating_add(Weight::from_ref_time(211_795_996).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 613_091 nanoseconds.
        Weight::from_ref_time(671_820_278)
            // Standard Error: 268_568
            .saturating_add(Weight::from_ref_time(289_691_403).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 912_689 nanoseconds.
        Weight::from_ref_time(952_375_000)
            // Standard Error: 58_935
            .saturating_add(Weight::from_ref_time(12_814_496).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_629 nanoseconds.
        Weight::from_ref_time(105_594_275)
            // Standard Error: 121_087
            .saturating_add(Weight::from_ref_time(209_642_945).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_859 nanoseconds.
        Weight::from_ref_time(98_242_838)
            // Standard Error: 99_363
            .saturating_add(Weight::from_ref_time(211_325_545).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_497 nanoseconds.
        Weight::from_ref_time(110_032_347)
            // Standard Error: 115_131
            .saturating_add(Weight::from_ref_time(267_562_125).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_209 nanoseconds.
        Weight::from_ref_time(99_019_080)
            // Standard Error: 111_128
            .saturating_add(Weight::from_ref_time(217_931_946).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_359_748 nanoseconds.
        Weight::from_ref_time(4_466_614_242)
            // Standard Error: 181_110
            .saturating_add(Weight::from_ref_time(306_646_888).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 608_477 nanoseconds.
        Weight::from_ref_time(618_015_000)
            // Standard Error: 64_521
            .saturating_add(Weight::from_ref_time(29_163_154).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_273 nanoseconds.
        Weight::from_ref_time(126_376_955)
            // Standard Error: 242_481
            .saturating_add(Weight::from_ref_time(399_647_221).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 496_760 nanoseconds.
        Weight::from_ref_time(500_438_000)
            // Standard Error: 70_261
            .saturating_add(Weight::from_ref_time(20_809_654).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 257_784 nanoseconds.
        Weight::from_ref_time(285_332_434)
            // Standard Error: 233_292
            .saturating_add(Weight::from_ref_time(414_976_754).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 533_549 nanoseconds.
        Weight::from_ref_time(538_272_000)
            // Standard Error: 70_139
            .saturating_add(Weight::from_ref_time(20_881_858).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_071 nanoseconds.
        Weight::from_ref_time(95_341_828)
            // Standard Error: 241_909
            .saturating_add(Weight::from_ref_time(19_251_121).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 111_028 nanoseconds.
        Weight::from_ref_time(96_620_243)
            // Standard Error: 728
            .saturating_add(Weight::from_ref_time(406_526).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_873 nanoseconds.
        Weight::from_ref_time(125_937_450)
            // Standard Error: 146_278
            .saturating_add(Weight::from_ref_time(292_521_809).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_507 nanoseconds.
        Weight::from_ref_time(109_132_000)
            // Standard Error: 1_352
            .saturating_add(Weight::from_ref_time(548_942).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_133 nanoseconds.
        Weight::from_ref_time(103_110_842)
            // Standard Error: 242_189
            .saturating_add(Weight::from_ref_time(13_142_557).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 112_407 nanoseconds.
        Weight::from_ref_time(98_200_837)
            // Standard Error: 663
            .saturating_add(Weight::from_ref_time(404_906).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_871 nanoseconds.
        Weight::from_ref_time(100_457_456)
            // Standard Error: 77_025
            .saturating_add(Weight::from_ref_time(213_663_139).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_192 nanoseconds.
        Weight::from_ref_time(98_674_926)
            // Standard Error: 74_769
            .saturating_add(Weight::from_ref_time(214_933_365).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 612_199 nanoseconds.
        Weight::from_ref_time(701_471_258)
            // Standard Error: 293_506
            .saturating_add(Weight::from_ref_time(226_917_283).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 646_586 nanoseconds.
        Weight::from_ref_time(693_314_092)
            // Standard Error: 2_586
            .saturating_add(Weight::from_ref_time(114_030).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_961_573 nanoseconds.
        Weight::from_ref_time(5_074_319_670)
            // Standard Error: 245_408
            .saturating_add(Weight::from_ref_time(241_794_215).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_093_623 nanoseconds.
        Weight::from_ref_time(972_837_684)
            // Standard Error: 10_552
            .saturating_add(Weight::from_ref_time(12_258_624).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_355 nanoseconds.
        Weight::from_ref_time(114_874_864)
            // Standard Error: 126_386
            .saturating_add(Weight::from_ref_time(223_505_368).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 308_024 nanoseconds.
        Weight::from_ref_time(312_671_000)
            // Standard Error: 63_931
            .saturating_add(Weight::from_ref_time(24_945_887).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_151 nanoseconds.
        Weight::from_ref_time(115_926_860)
            // Standard Error: 101_629
            .saturating_add(Weight::from_ref_time(279_519_766).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_900 nanoseconds.
        Weight::from_ref_time(101_425_408)
            // Standard Error: 105_203
            .saturating_add(Weight::from_ref_time(210_842_789).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_229 nanoseconds.
        Weight::from_ref_time(95_124_134)
            // Standard Error: 241_268
            .saturating_add(Weight::from_ref_time(30_497_965).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_123 nanoseconds.
        Weight::from_ref_time(94_553_402)
            // Standard Error: 254_986
            .saturating_add(Weight::from_ref_time(22_962_347).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_710 nanoseconds.
        Weight::from_ref_time(94_783_823)
            // Standard Error: 237_060
            .saturating_add(Weight::from_ref_time(24_339_376).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_027 nanoseconds.
        Weight::from_ref_time(95_216_352)
            // Standard Error: 239_378
            .saturating_add(Weight::from_ref_time(22_544_397).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_483 nanoseconds.
        Weight::from_ref_time(95_030_647)
            // Standard Error: 259_162
            .saturating_add(Weight::from_ref_time(21_672_902).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 169_577 nanoseconds.
        Weight::from_ref_time(178_048_538)
            // Standard Error: 113_329
            .saturating_add(Weight::from_ref_time(305_700_620).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_874 nanoseconds.
        Weight::from_ref_time(115_398_451)
            // Standard Error: 249_664
            .saturating_add(Weight::from_ref_time(483_348_668).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_979_894 nanoseconds.
        Weight::from_ref_time(45_269_804_000)
            // Standard Error: 308_731
            .saturating_add(Weight::from_ref_time(7_480_701).saturating_mul(p.into()))
            // Standard Error: 308_713
            .saturating_add(Weight::from_ref_time(152_326_885).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 89_076 nanoseconds.
        Weight::from_parts(112_345_990, 141)
            // Standard Error: 4_967
            .saturating_add(Weight::from_ref_time(11_242_538).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 88_481 nanoseconds.
        Weight::from_parts(90_760_000, 141)
            // Standard Error: 54_906
            .saturating_add(Weight::from_ref_time(36_562_371).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5068941`
        // Minimum execution time: 5_824_962 nanoseconds.
        Weight::from_parts(5_643_150_521, 5068941)
            // Standard Error: 45_828
            .saturating_add(Weight::from_ref_time(38_619_011).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65704 ±0)`
        //  Estimated: `1012 + p * (75606 ±0)`
        // Minimum execution time: 89_950 nanoseconds.
        Weight::from_parts(92_966_292, 1012)
            // Standard Error: 32_515
            .saturating_add(Weight::from_ref_time(44_487_443).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(75606).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `584 + p * (9879 ±2)`
        // Minimum execution time: 105_110 nanoseconds.
        Weight::from_parts(96_011_230, 584)
            // Standard Error: 50_273
            .saturating_add(Weight::from_ref_time(35_355_607).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `584 + p * (9879 ±2)`
        // Minimum execution time: 687_918 nanoseconds.
        Weight::from_parts(662_886_319, 584)
            // Standard Error: 344_529
            .saturating_add(Weight::from_ref_time(46_797_143).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `316941`
        // Minimum execution time: 1_034_180 nanoseconds.
        Weight::from_parts(1_030_628_746, 316941)
            // Standard Error: 350_034
            .saturating_add(Weight::from_ref_time(49_491_137).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_032_850 nanoseconds.
        Weight::from_ref_time(3_404_479_505)
            // Standard Error: 72_149
            .saturating_add(Weight::from_ref_time(8_137_722).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_046_992 nanoseconds.
        Weight::from_ref_time(3_504_336_639)
            // Standard Error: 64_817
            .saturating_add(Weight::from_ref_time(9_574_626).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_775_871 nanoseconds.
        Weight::from_ref_time(10_406_122_961)
            // Standard Error: 144_965
            .saturating_add(Weight::from_ref_time(12_294_296).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_461_132 nanoseconds.
        Weight::from_ref_time(10_998_835_841)
            // Standard Error: 180_069
            .saturating_add(Weight::from_ref_time(17_689_937).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_858 nanoseconds.
        Weight::from_ref_time(2_925_000)
            // Standard Error: 6_152
            .saturating_add(Weight::from_ref_time(3_809_018).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_924 nanoseconds.
        Weight::from_ref_time(1_135_319)
            // Standard Error: 6_095
            .saturating_add(Weight::from_ref_time(3_161_538).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_806 nanoseconds.
        Weight::from_ref_time(3_676_997)
            // Standard Error: 1_036
            .saturating_add(Weight::from_ref_time(1_584_035).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_894 nanoseconds.
        Weight::from_ref_time(2_953_000)
            // Standard Error: 5_855
            .saturating_add(Weight::from_ref_time(3_052_982).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_833 nanoseconds.
        Weight::from_ref_time(3_156_571)
            // Standard Error: 16_763
            .saturating_add(Weight::from_ref_time(5_169_963).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_488 nanoseconds.
        Weight::from_ref_time(6_415_944)
            // Standard Error: 902
            .saturating_add(Weight::from_ref_time(161_372).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_930 nanoseconds.
        Weight::from_ref_time(5_972_255)
            // Standard Error: 9_610
            .saturating_add(Weight::from_ref_time(2_582_014).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(2_582_014 -
            2_483_902).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_914 nanoseconds.
        Weight::from_ref_time(5_123_826)
            // Standard Error: 13_493
            .saturating_add(Weight::from_ref_time(2_483_902).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_254 nanoseconds.
        Weight::from_ref_time(17_735_226)
            // Standard Error: 24_572
            .saturating_add(Weight::from_ref_time(10_095_278).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 13_195 nanoseconds.
        Weight::from_ref_time(5_955_858)
            // Standard Error: 5_065
            .saturating_add(Weight::from_ref_time(1_191_954).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_480 nanoseconds.
        Weight::from_ref_time(5_740_207)
            // Standard Error: 9
            .saturating_add(Weight::from_ref_time(72).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_888 nanoseconds.
        Weight::from_ref_time(2_801_148)
            // Standard Error: 2_900
            .saturating_add(Weight::from_ref_time(255_570).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_844 nanoseconds.
        Weight::from_ref_time(2_949_000)
            // Standard Error: 5_611
            .saturating_add(Weight::from_ref_time(794_138).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_871 nanoseconds.
        Weight::from_ref_time(3_006_000)
            // Standard Error: 5_987
            .saturating_add(Weight::from_ref_time(791_151).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_467 nanoseconds.
        Weight::from_ref_time(8_512_340)
            // Standard Error: 6_994
            .saturating_add(Weight::from_ref_time(850_032).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_595 nanoseconds.
        Weight::from_ref_time(6_032_837)
            // Standard Error: 9_903
            .saturating_add(Weight::from_ref_time(1_594_305).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_831 nanoseconds.
        Weight::from_ref_time(2_323_957)
            // Standard Error: 9_238
            .saturating_add(Weight::from_ref_time(6_994_300).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_902 nanoseconds.
        Weight::from_ref_time(2_937_000)
            // Standard Error: 5_303
            .saturating_add(Weight::from_ref_time(3_340_885).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_719 nanoseconds.
        Weight::from_ref_time(67_231)
            // Standard Error: 10_837
            .saturating_add(Weight::from_ref_time(3_566_797).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_838 nanoseconds.
        Weight::from_ref_time(2_934_000)
            // Standard Error: 6_173
            .saturating_add(Weight::from_ref_time(3_128_030).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_683 nanoseconds.
        Weight::from_ref_time(2_820_000)
            // Standard Error: 5_085
            .saturating_add(Weight::from_ref_time(3_240_316).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_854 nanoseconds.
        Weight::from_ref_time(463_797)
            // Standard Error: 6_739
            .saturating_add(Weight::from_ref_time(673_576).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_736 nanoseconds.
        Weight::from_ref_time(2_851_000)
            // Standard Error: 5_577
            .saturating_add(Weight::from_ref_time(695_884).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_867 nanoseconds.
        Weight::from_ref_time(2_948_000)
            // Standard Error: 10_759
            .saturating_add(Weight::from_ref_time(1_891_253).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_747 nanoseconds.
        Weight::from_ref_time(2_799_000)
            // Standard Error: 9_372
            .saturating_add(Weight::from_ref_time(2_002_973).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_870 nanoseconds.
        Weight::from_ref_time(2_783_131)
            // Standard Error: 3_014
            .saturating_add(Weight::from_ref_time(331_653).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_806 nanoseconds.
        Weight::from_ref_time(3_487_118)
            // Standard Error: 1_644
            .saturating_add(Weight::from_ref_time(168_707).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_817 nanoseconds.
        Weight::from_ref_time(3_309_906)
            // Standard Error: 1_965
            .saturating_add(Weight::from_ref_time(188_865).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_776 nanoseconds.
        Weight::from_ref_time(2_922_000)
            // Standard Error: 10_951
            .saturating_add(Weight::from_ref_time(1_890_539).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_725 nanoseconds.
        Weight::from_ref_time(2_813_000)
            // Standard Error: 9_475
            .saturating_add(Weight::from_ref_time(2_013_142).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_819 nanoseconds.
        Weight::from_ref_time(2_943_000)
            // Standard Error: 10_749
            .saturating_add(Weight::from_ref_time(1_894_442).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_703 nanoseconds.
        Weight::from_ref_time(2_746_000)
            // Standard Error: 8_298
            .saturating_add(Weight::from_ref_time(1_996_246).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_826 nanoseconds.
        Weight::from_ref_time(2_930_000)
            // Standard Error: 10_220
            .saturating_add(Weight::from_ref_time(1_888_490).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_750 nanoseconds.
        Weight::from_ref_time(2_828_000)
            // Standard Error: 8_692
            .saturating_add(Weight::from_ref_time(2_008_409).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_775 nanoseconds.
        Weight::from_ref_time(2_938_000)
            // Standard Error: 9_633
            .saturating_add(Weight::from_ref_time(1_870_543).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_637 nanoseconds.
        Weight::from_ref_time(2_736_000)
            // Standard Error: 9_234
            .saturating_add(Weight::from_ref_time(2_011_697).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_822 nanoseconds.
        Weight::from_ref_time(2_918_000)
            // Standard Error: 9_557
            .saturating_add(Weight::from_ref_time(1_864_720).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_693 nanoseconds.
        Weight::from_ref_time(2_780_000)
            // Standard Error: 9_429
            .saturating_add(Weight::from_ref_time(2_006_657).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_825 nanoseconds.
        Weight::from_ref_time(2_928_000)
            // Standard Error: 11_007
            .saturating_add(Weight::from_ref_time(1_901_063).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_732 nanoseconds.
        Weight::from_ref_time(2_838_000)
            // Standard Error: 9_073
            .saturating_add(Weight::from_ref_time(2_026_713).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_793 nanoseconds.
        Weight::from_ref_time(2_958_000)
            // Standard Error: 10_302
            .saturating_add(Weight::from_ref_time(1_879_107).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_710 nanoseconds.
        Weight::from_ref_time(2_829_000)
            // Standard Error: 8_880
            .saturating_add(Weight::from_ref_time(2_008_327).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_831 nanoseconds.
        Weight::from_ref_time(3_007_000)
            // Standard Error: 9_521
            .saturating_add(Weight::from_ref_time(1_869_586).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_654 nanoseconds.
        Weight::from_ref_time(2_830_000)
            // Standard Error: 9_128
            .saturating_add(Weight::from_ref_time(2_028_658).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_863 nanoseconds.
        Weight::from_ref_time(2_966_000)
            // Standard Error: 10_222
            .saturating_add(Weight::from_ref_time(1_884_496).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_731 nanoseconds.
        Weight::from_ref_time(2_871_000)
            // Standard Error: 8_785
            .saturating_add(Weight::from_ref_time(2_013_485).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_798 nanoseconds.
        Weight::from_ref_time(2_905_000)
            // Standard Error: 9_992
            .saturating_add(Weight::from_ref_time(1_894_940).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_636 nanoseconds.
        Weight::from_ref_time(2_814_000)
            // Standard Error: 9_088
            .saturating_add(Weight::from_ref_time(2_007_318).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_839 nanoseconds.
        Weight::from_ref_time(2_934_000)
            // Standard Error: 9_452
            .saturating_add(Weight::from_ref_time(1_366_245).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_659 nanoseconds.
        Weight::from_ref_time(2_760_000)
            // Standard Error: 9_009
            .saturating_add(Weight::from_ref_time(1_495_607).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_879 nanoseconds.
        Weight::from_ref_time(2_976_000)
            // Standard Error: 9_374
            .saturating_add(Weight::from_ref_time(1_352_110).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_753 nanoseconds.
        Weight::from_ref_time(2_888_000)
            // Standard Error: 9_696
            .saturating_add(Weight::from_ref_time(1_489_325).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_877 nanoseconds.
        Weight::from_ref_time(2_938_000)
            // Standard Error: 10_062
            .saturating_add(Weight::from_ref_time(1_817_173).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_697 nanoseconds.
        Weight::from_ref_time(2_818_000)
            // Standard Error: 8_585
            .saturating_add(Weight::from_ref_time(1_959_712).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_862 nanoseconds.
        Weight::from_ref_time(10_926_979)
            // Standard Error: 29_754
            .saturating_add(Weight::from_ref_time(2_115_466).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_703 nanoseconds.
        Weight::from_ref_time(12_910_650)
            // Standard Error: 25_317
            .saturating_add(Weight::from_ref_time(1_980_177).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_841 nanoseconds.
        Weight::from_ref_time(5_974_376)
            // Standard Error: 18_162
            .saturating_add(Weight::from_ref_time(2_609_057).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_739 nanoseconds.
        Weight::from_ref_time(12_198_821)
            // Standard Error: 25_184
            .saturating_add(Weight::from_ref_time(2_152_466).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_822 nanoseconds.
        Weight::from_ref_time(5_090_768)
            // Standard Error: 43_184
            .saturating_add(Weight::from_ref_time(9_277_839).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_646 nanoseconds.
        Weight::from_ref_time(13_523_843)
            // Standard Error: 43_647
            .saturating_add(Weight::from_ref_time(8_571_151).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_802 nanoseconds.
        Weight::from_ref_time(10_457_848)
            // Standard Error: 27_974
            .saturating_add(Weight::from_ref_time(2_517_678).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_745 nanoseconds.
        Weight::from_ref_time(14_580_741)
            // Standard Error: 28_133
            .saturating_add(Weight::from_ref_time(2_221_041).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_852 nanoseconds.
        Weight::from_ref_time(2_967_000)
            // Standard Error: 9_044
            .saturating_add(Weight::from_ref_time(1_364_973).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_711 nanoseconds.
        Weight::from_ref_time(2_853_000)
            // Standard Error: 9_684
            .saturating_add(Weight::from_ref_time(1_510_333).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_782 nanoseconds.
        Weight::from_ref_time(2_950_000)
            // Standard Error: 9_300
            .saturating_add(Weight::from_ref_time(1_399_596).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_657 nanoseconds.
        Weight::from_ref_time(2_755_000)
            // Standard Error: 8_878
            .saturating_add(Weight::from_ref_time(1_497_154).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_825 nanoseconds.
        Weight::from_ref_time(2_904_000)
            // Standard Error: 9_433
            .saturating_add(Weight::from_ref_time(1_382_033).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_653 nanoseconds.
        Weight::from_ref_time(2_771_000)
            // Standard Error: 8_050
            .saturating_add(Weight::from_ref_time(1_504_083).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_903 nanoseconds.
        Weight::from_ref_time(3_020_000)
            // Standard Error: 8_944
            .saturating_add(Weight::from_ref_time(1_183_205).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_768 nanoseconds.
        Weight::from_ref_time(2_917_000)
            // Standard Error: 9_382
            .saturating_add(Weight::from_ref_time(1_276_439).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_865 nanoseconds.
        Weight::from_ref_time(2_971_000)
            // Standard Error: 9_344
            .saturating_add(Weight::from_ref_time(1_188_390).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_700 nanoseconds.
        Weight::from_ref_time(2_797_000)
            // Standard Error: 8_133
            .saturating_add(Weight::from_ref_time(1_261_848).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_873 nanoseconds.
        Weight::from_ref_time(2_982_000)
            // Standard Error: 8_780
            .saturating_add(Weight::from_ref_time(1_209_982).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_701 nanoseconds.
        Weight::from_ref_time(2_807_000)
            // Standard Error: 8_880
            .saturating_add(Weight::from_ref_time(1_264_980).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_849 nanoseconds.
        Weight::from_ref_time(2_957_000)
            // Standard Error: 9_052
            .saturating_add(Weight::from_ref_time(1_191_978).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_655 nanoseconds.
        Weight::from_ref_time(2_787_000)
            // Standard Error: 8_528
            .saturating_add(Weight::from_ref_time(1_279_533).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_866 nanoseconds.
        Weight::from_ref_time(2_995_000)
            // Standard Error: 8_774
            .saturating_add(Weight::from_ref_time(1_173_391).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_678 nanoseconds.
        Weight::from_ref_time(2_761_000)
            // Standard Error: 8_485
            .saturating_add(Weight::from_ref_time(1_292_461).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_056 nanoseconds.
        Weight::from_ref_time(1_134_000)
            // Standard Error: 579
            .saturating_add(Weight::from_ref_time(205_985).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `145 + c * (1024 ±0)`
        //  Estimated: `2612 + c * (1024 ±0)`
        // Minimum execution time: 3_292 nanoseconds.
        Weight::from_parts(3_392_000, 2612)
            // Standard Error: 1_237
            .saturating_add(Weight::from_ref_time(677_699).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 55_815 nanoseconds.
        Weight::from_ref_time(100_410_445)
            // Standard Error: 5_974
            .saturating_add(Weight::from_ref_time(2_228_842).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `918`
        //  Estimated: `17301`
        // Minimum execution time: 56_155 nanoseconds.
        Weight::from_parts(58_026_000, 17301)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3290`
        // Minimum execution time: 57_098 nanoseconds.
        Weight::from_parts(6_333_992, 3290)
            // Standard Error: 57_742
            .saturating_add(Weight::from_ref_time(53_126_338).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `675`
        //  Estimated: `18282`
        // Minimum execution time: 53_788 nanoseconds.
        Weight::from_parts(66_488_425, 18282)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_279).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `126`
        //  Estimated: `14142`
        // Minimum execution time: 9_294_600 nanoseconds.
        Weight::from_parts(9_425_520_000, 14142)
            // Standard Error: 509_015
            .saturating_add(Weight::from_ref_time(30_255_518).saturating_mul(c.into()))
            // Standard Error: 30
            .saturating_add(Weight::from_ref_time(828).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `375`
        //  Estimated: `14765`
        // Minimum execution time: 54_098 nanoseconds.
        Weight::from_parts(27_747_854, 14765)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(1_152).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1113`
        //  Estimated: `31447`
        // Minimum execution time: 78_026 nanoseconds.
        Weight::from_parts(56_972_489, 31447)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(1_148).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `982`
        //  Estimated: `48842`
        // Minimum execution time: 310_725 nanoseconds.
        Weight::from_parts(322_116_929, 48842)
            // Standard Error: 1_093
            .saturating_add(Weight::from_ref_time(2_840).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(26_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `982`
        //  Estimated: `48842`
        // Minimum execution time: 327_013 nanoseconds.
        Weight::from_parts(337_196_755, 48842)
            // Standard Error: 1_059
            .saturating_add(Weight::from_ref_time(1_295).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(26_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `243 + c * (1075 ±0)`
        //  Estimated: `2997 + c * (2150 ±0)`
        // Minimum execution time: 41_732 nanoseconds.
        Weight::from_parts(42_566_000, 2997)
            // Standard Error: 28_987
            .saturating_add(Weight::from_ref_time(53_204_697).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_proof_size(2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_825 nanoseconds.
        Weight::from_ref_time(94_480_461)
            // Standard Error: 80_431
            .saturating_add(Weight::from_ref_time(151_553_694).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 246_223 nanoseconds.
        Weight::from_ref_time(244_559_014)
            // Standard Error: 88_953
            .saturating_add(Weight::from_ref_time(151_061_304).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_004 nanoseconds.
        Weight::from_ref_time(93_110_000)
            // Standard Error: 1_172_959
            .saturating_add(Weight::from_ref_time(387_355_328).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 169_436 nanoseconds.
        Weight::from_ref_time(209_409_586)
            // Standard Error: 174_714
            .saturating_add(Weight::from_ref_time(313_429_551).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_547 nanoseconds.
        Weight::from_ref_time(115_509_411)
            // Standard Error: 136_112
            .saturating_add(Weight::from_ref_time(213_317_912).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_127 nanoseconds.
        Weight::from_ref_time(97_207_446)
            // Standard Error: 115_714
            .saturating_add(Weight::from_ref_time(212_064_162).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_038 nanoseconds.
        Weight::from_ref_time(104_713_207)
            // Standard Error: 131_344
            .saturating_add(Weight::from_ref_time(211_516_422).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_597 nanoseconds.
        Weight::from_ref_time(105_805_867)
            // Standard Error: 108_940
            .saturating_add(Weight::from_ref_time(211_424_529).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_076 nanoseconds.
        Weight::from_ref_time(100_681_282)
            // Standard Error: 81_910
            .saturating_add(Weight::from_ref_time(212_590_436).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_558 nanoseconds.
        Weight::from_ref_time(101_029_301)
            // Standard Error: 82_896
            .saturating_add(Weight::from_ref_time(212_002_968).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_019 nanoseconds.
        Weight::from_ref_time(101_667_477)
            // Standard Error: 94_559
            .saturating_add(Weight::from_ref_time(210_941_958).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_647 nanoseconds.
        Weight::from_ref_time(101_256_619)
            // Standard Error: 130_129
            .saturating_add(Weight::from_ref_time(210_851_307).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_358 nanoseconds.
        Weight::from_ref_time(101_552_545)
            // Standard Error: 71_276
            .saturating_add(Weight::from_ref_time(211_795_996).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 613_091 nanoseconds.
        Weight::from_ref_time(671_820_278)
            // Standard Error: 268_568
            .saturating_add(Weight::from_ref_time(289_691_403).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 912_689 nanoseconds.
        Weight::from_ref_time(952_375_000)
            // Standard Error: 58_935
            .saturating_add(Weight::from_ref_time(12_814_496).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_629 nanoseconds.
        Weight::from_ref_time(105_594_275)
            // Standard Error: 121_087
            .saturating_add(Weight::from_ref_time(209_642_945).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_859 nanoseconds.
        Weight::from_ref_time(98_242_838)
            // Standard Error: 99_363
            .saturating_add(Weight::from_ref_time(211_325_545).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_497 nanoseconds.
        Weight::from_ref_time(110_032_347)
            // Standard Error: 115_131
            .saturating_add(Weight::from_ref_time(267_562_125).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_209 nanoseconds.
        Weight::from_ref_time(99_019_080)
            // Standard Error: 111_128
            .saturating_add(Weight::from_ref_time(217_931_946).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_359_748 nanoseconds.
        Weight::from_ref_time(4_466_614_242)
            // Standard Error: 181_110
            .saturating_add(Weight::from_ref_time(306_646_888).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 608_477 nanoseconds.
        Weight::from_ref_time(618_015_000)
            // Standard Error: 64_521
            .saturating_add(Weight::from_ref_time(29_163_154).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_273 nanoseconds.
        Weight::from_ref_time(126_376_955)
            // Standard Error: 242_481
            .saturating_add(Weight::from_ref_time(399_647_221).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 496_760 nanoseconds.
        Weight::from_ref_time(500_438_000)
            // Standard Error: 70_261
            .saturating_add(Weight::from_ref_time(20_809_654).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 257_784 nanoseconds.
        Weight::from_ref_time(285_332_434)
            // Standard Error: 233_292
            .saturating_add(Weight::from_ref_time(414_976_754).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 533_549 nanoseconds.
        Weight::from_ref_time(538_272_000)
            // Standard Error: 70_139
            .saturating_add(Weight::from_ref_time(20_881_858).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_071 nanoseconds.
        Weight::from_ref_time(95_341_828)
            // Standard Error: 241_909
            .saturating_add(Weight::from_ref_time(19_251_121).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 111_028 nanoseconds.
        Weight::from_ref_time(96_620_243)
            // Standard Error: 728
            .saturating_add(Weight::from_ref_time(406_526).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_873 nanoseconds.
        Weight::from_ref_time(125_937_450)
            // Standard Error: 146_278
            .saturating_add(Weight::from_ref_time(292_521_809).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_507 nanoseconds.
        Weight::from_ref_time(109_132_000)
            // Standard Error: 1_352
            .saturating_add(Weight::from_ref_time(548_942).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_133 nanoseconds.
        Weight::from_ref_time(103_110_842)
            // Standard Error: 242_189
            .saturating_add(Weight::from_ref_time(13_142_557).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 112_407 nanoseconds.
        Weight::from_ref_time(98_200_837)
            // Standard Error: 663
            .saturating_add(Weight::from_ref_time(404_906).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_871 nanoseconds.
        Weight::from_ref_time(100_457_456)
            // Standard Error: 77_025
            .saturating_add(Weight::from_ref_time(213_663_139).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_192 nanoseconds.
        Weight::from_ref_time(98_674_926)
            // Standard Error: 74_769
            .saturating_add(Weight::from_ref_time(214_933_365).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 612_199 nanoseconds.
        Weight::from_ref_time(701_471_258)
            // Standard Error: 293_506
            .saturating_add(Weight::from_ref_time(226_917_283).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 646_586 nanoseconds.
        Weight::from_ref_time(693_314_092)
            // Standard Error: 2_586
            .saturating_add(Weight::from_ref_time(114_030).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_961_573 nanoseconds.
        Weight::from_ref_time(5_074_319_670)
            // Standard Error: 245_408
            .saturating_add(Weight::from_ref_time(241_794_215).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_093_623 nanoseconds.
        Weight::from_ref_time(972_837_684)
            // Standard Error: 10_552
            .saturating_add(Weight::from_ref_time(12_258_624).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_355 nanoseconds.
        Weight::from_ref_time(114_874_864)
            // Standard Error: 126_386
            .saturating_add(Weight::from_ref_time(223_505_368).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 308_024 nanoseconds.
        Weight::from_ref_time(312_671_000)
            // Standard Error: 63_931
            .saturating_add(Weight::from_ref_time(24_945_887).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_151 nanoseconds.
        Weight::from_ref_time(115_926_860)
            // Standard Error: 101_629
            .saturating_add(Weight::from_ref_time(279_519_766).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_900 nanoseconds.
        Weight::from_ref_time(101_425_408)
            // Standard Error: 105_203
            .saturating_add(Weight::from_ref_time(210_842_789).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_229 nanoseconds.
        Weight::from_ref_time(95_124_134)
            // Standard Error: 241_268
            .saturating_add(Weight::from_ref_time(30_497_965).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_123 nanoseconds.
        Weight::from_ref_time(94_553_402)
            // Standard Error: 254_986
            .saturating_add(Weight::from_ref_time(22_962_347).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_710 nanoseconds.
        Weight::from_ref_time(94_783_823)
            // Standard Error: 237_060
            .saturating_add(Weight::from_ref_time(24_339_376).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_027 nanoseconds.
        Weight::from_ref_time(95_216_352)
            // Standard Error: 239_378
            .saturating_add(Weight::from_ref_time(22_544_397).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_483 nanoseconds.
        Weight::from_ref_time(95_030_647)
            // Standard Error: 259_162
            .saturating_add(Weight::from_ref_time(21_672_902).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 169_577 nanoseconds.
        Weight::from_ref_time(178_048_538)
            // Standard Error: 113_329
            .saturating_add(Weight::from_ref_time(305_700_620).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_874 nanoseconds.
        Weight::from_ref_time(115_398_451)
            // Standard Error: 249_664
            .saturating_add(Weight::from_ref_time(483_348_668).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_979_894 nanoseconds.
        Weight::from_ref_time(45_269_804_000)
            // Standard Error: 308_731
            .saturating_add(Weight::from_ref_time(7_480_701).saturating_mul(p.into()))
            // Standard Error: 308_713
            .saturating_add(Weight::from_ref_time(152_326_885).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 89_076 nanoseconds.
        Weight::from_parts(112_345_990, 141)
            // Standard Error: 4_967
            .saturating_add(Weight::from_ref_time(11_242_538).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 88_481 nanoseconds.
        Weight::from_parts(90_760_000, 141)
            // Standard Error: 54_906
            .saturating_add(Weight::from_ref_time(36_562_371).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5068941`
        // Minimum execution time: 5_824_962 nanoseconds.
        Weight::from_parts(5_643_150_521, 5068941)
            // Standard Error: 45_828
            .saturating_add(Weight::from_ref_time(38_619_011).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65704 ±0)`
        //  Estimated: `1012 + p * (75606 ±0)`
        // Minimum execution time: 89_950 nanoseconds.
        Weight::from_parts(92_966_292, 1012)
            // Standard Error: 32_515
            .saturating_add(Weight::from_ref_time(44_487_443).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(75606).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `584 + p * (9879 ±2)`
        // Minimum execution time: 105_110 nanoseconds.
        Weight::from_parts(96_011_230, 584)
            // Standard Error: 50_273
            .saturating_add(Weight::from_ref_time(35_355_607).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `584 + p * (9879 ±2)`
        // Minimum execution time: 687_918 nanoseconds.
        Weight::from_parts(662_886_319, 584)
            // Standard Error: 344_529
            .saturating_add(Weight::from_ref_time(46_797_143).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `316941`
        // Minimum execution time: 1_034_180 nanoseconds.
        Weight::from_parts(1_030_628_746, 316941)
            // Standard Error: 350_034
            .saturating_add(Weight::from_ref_time(49_491_137).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_032_850 nanoseconds.
        Weight::from_ref_time(3_404_479_505)
            // Standard Error: 72_149
            .saturating_add(Weight::from_ref_time(8_137_722).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_046_992 nanoseconds.
        Weight::from_ref_time(3_504_336_639)
            // Standard Error: 64_817
            .saturating_add(Weight::from_ref_time(9_574_626).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_775_871 nanoseconds.
        Weight::from_ref_time(10_406_122_961)
            // Standard Error: 144_965
            .saturating_add(Weight::from_ref_time(12_294_296).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_461_132 nanoseconds.
        Weight::from_ref_time(10_998_835_841)
            // Standard Error: 180_069
            .saturating_add(Weight::from_ref_time(17_689_937).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_858 nanoseconds.
        Weight::from_ref_time(2_925_000)
            // Standard Error: 6_152
            .saturating_add(Weight::from_ref_time(3_809_018).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_924 nanoseconds.
        Weight::from_ref_time(1_135_319)
            // Standard Error: 6_095
            .saturating_add(Weight::from_ref_time(3_161_538).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_806 nanoseconds.
        Weight::from_ref_time(3_676_997)
            // Standard Error: 1_036
            .saturating_add(Weight::from_ref_time(1_584_035).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_894 nanoseconds.
        Weight::from_ref_time(2_953_000)
            // Standard Error: 5_855
            .saturating_add(Weight::from_ref_time(3_052_982).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_833 nanoseconds.
        Weight::from_ref_time(3_156_571)
            // Standard Error: 16_763
            .saturating_add(Weight::from_ref_time(5_169_963).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_488 nanoseconds.
        Weight::from_ref_time(6_415_944)
            // Standard Error: 902
            .saturating_add(Weight::from_ref_time(161_372).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_930 nanoseconds.
        Weight::from_ref_time(5_972_255)
            // Standard Error: 9_610
            .saturating_add(Weight::from_ref_time(2_582_014).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(2_582_014 -
            2_483_902).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_914 nanoseconds.
        Weight::from_ref_time(5_123_826)
            // Standard Error: 13_493
            .saturating_add(Weight::from_ref_time(2_483_902).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_254 nanoseconds.
        Weight::from_ref_time(17_735_226)
            // Standard Error: 24_572
            .saturating_add(Weight::from_ref_time(10_095_278).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 13_195 nanoseconds.
        Weight::from_ref_time(5_955_858)
            // Standard Error: 5_065
            .saturating_add(Weight::from_ref_time(1_191_954).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_480 nanoseconds.
        Weight::from_ref_time(5_740_207)
            // Standard Error: 9
            .saturating_add(Weight::from_ref_time(72).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_888 nanoseconds.
        Weight::from_ref_time(2_801_148)
            // Standard Error: 2_900
            .saturating_add(Weight::from_ref_time(255_570).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_844 nanoseconds.
        Weight::from_ref_time(2_949_000)
            // Standard Error: 5_611
            .saturating_add(Weight::from_ref_time(794_138).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_871 nanoseconds.
        Weight::from_ref_time(3_006_000)
            // Standard Error: 5_987
            .saturating_add(Weight::from_ref_time(791_151).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_467 nanoseconds.
        Weight::from_ref_time(8_512_340)
            // Standard Error: 6_994
            .saturating_add(Weight::from_ref_time(850_032).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_595 nanoseconds.
        Weight::from_ref_time(6_032_837)
            // Standard Error: 9_903
            .saturating_add(Weight::from_ref_time(1_594_305).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_831 nanoseconds.
        Weight::from_ref_time(2_323_957)
            // Standard Error: 9_238
            .saturating_add(Weight::from_ref_time(6_994_300).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_902 nanoseconds.
        Weight::from_ref_time(2_937_000)
            // Standard Error: 5_303
            .saturating_add(Weight::from_ref_time(3_340_885).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_719 nanoseconds.
        Weight::from_ref_time(67_231)
            // Standard Error: 10_837
            .saturating_add(Weight::from_ref_time(3_566_797).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_838 nanoseconds.
        Weight::from_ref_time(2_934_000)
            // Standard Error: 6_173
            .saturating_add(Weight::from_ref_time(3_128_030).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_683 nanoseconds.
        Weight::from_ref_time(2_820_000)
            // Standard Error: 5_085
            .saturating_add(Weight::from_ref_time(3_240_316).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_854 nanoseconds.
        Weight::from_ref_time(463_797)
            // Standard Error: 6_739
            .saturating_add(Weight::from_ref_time(673_576).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_736 nanoseconds.
        Weight::from_ref_time(2_851_000)
            // Standard Error: 5_577
            .saturating_add(Weight::from_ref_time(695_884).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_867 nanoseconds.
        Weight::from_ref_time(2_948_000)
            // Standard Error: 10_759
            .saturating_add(Weight::from_ref_time(1_891_253).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_747 nanoseconds.
        Weight::from_ref_time(2_799_000)
            // Standard Error: 9_372
            .saturating_add(Weight::from_ref_time(2_002_973).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_870 nanoseconds.
        Weight::from_ref_time(2_783_131)
            // Standard Error: 3_014
            .saturating_add(Weight::from_ref_time(331_653).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_806 nanoseconds.
        Weight::from_ref_time(3_487_118)
            // Standard Error: 1_644
            .saturating_add(Weight::from_ref_time(168_707).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_817 nanoseconds.
        Weight::from_ref_time(3_309_906)
            // Standard Error: 1_965
            .saturating_add(Weight::from_ref_time(188_865).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_776 nanoseconds.
        Weight::from_ref_time(2_922_000)
            // Standard Error: 10_951
            .saturating_add(Weight::from_ref_time(1_890_539).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_725 nanoseconds.
        Weight::from_ref_time(2_813_000)
            // Standard Error: 9_475
            .saturating_add(Weight::from_ref_time(2_013_142).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_819 nanoseconds.
        Weight::from_ref_time(2_943_000)
            // Standard Error: 10_749
            .saturating_add(Weight::from_ref_time(1_894_442).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_703 nanoseconds.
        Weight::from_ref_time(2_746_000)
            // Standard Error: 8_298
            .saturating_add(Weight::from_ref_time(1_996_246).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_826 nanoseconds.
        Weight::from_ref_time(2_930_000)
            // Standard Error: 10_220
            .saturating_add(Weight::from_ref_time(1_888_490).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_750 nanoseconds.
        Weight::from_ref_time(2_828_000)
            // Standard Error: 8_692
            .saturating_add(Weight::from_ref_time(2_008_409).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_775 nanoseconds.
        Weight::from_ref_time(2_938_000)
            // Standard Error: 9_633
            .saturating_add(Weight::from_ref_time(1_870_543).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_637 nanoseconds.
        Weight::from_ref_time(2_736_000)
            // Standard Error: 9_234
            .saturating_add(Weight::from_ref_time(2_011_697).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_822 nanoseconds.
        Weight::from_ref_time(2_918_000)
            // Standard Error: 9_557
            .saturating_add(Weight::from_ref_time(1_864_720).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_693 nanoseconds.
        Weight::from_ref_time(2_780_000)
            // Standard Error: 9_429
            .saturating_add(Weight::from_ref_time(2_006_657).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_825 nanoseconds.
        Weight::from_ref_time(2_928_000)
            // Standard Error: 11_007
            .saturating_add(Weight::from_ref_time(1_901_063).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_732 nanoseconds.
        Weight::from_ref_time(2_838_000)
            // Standard Error: 9_073
            .saturating_add(Weight::from_ref_time(2_026_713).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_793 nanoseconds.
        Weight::from_ref_time(2_958_000)
            // Standard Error: 10_302
            .saturating_add(Weight::from_ref_time(1_879_107).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_710 nanoseconds.
        Weight::from_ref_time(2_829_000)
            // Standard Error: 8_880
            .saturating_add(Weight::from_ref_time(2_008_327).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_831 nanoseconds.
        Weight::from_ref_time(3_007_000)
            // Standard Error: 9_521
            .saturating_add(Weight::from_ref_time(1_869_586).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_654 nanoseconds.
        Weight::from_ref_time(2_830_000)
            // Standard Error: 9_128
            .saturating_add(Weight::from_ref_time(2_028_658).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_863 nanoseconds.
        Weight::from_ref_time(2_966_000)
            // Standard Error: 10_222
            .saturating_add(Weight::from_ref_time(1_884_496).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_731 nanoseconds.
        Weight::from_ref_time(2_871_000)
            // Standard Error: 8_785
            .saturating_add(Weight::from_ref_time(2_013_485).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_798 nanoseconds.
        Weight::from_ref_time(2_905_000)
            // Standard Error: 9_992
            .saturating_add(Weight::from_ref_time(1_894_940).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_636 nanoseconds.
        Weight::from_ref_time(2_814_000)
            // Standard Error: 9_088
            .saturating_add(Weight::from_ref_time(2_007_318).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_839 nanoseconds.
        Weight::from_ref_time(2_934_000)
            // Standard Error: 9_452
            .saturating_add(Weight::from_ref_time(1_366_245).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_659 nanoseconds.
        Weight::from_ref_time(2_760_000)
            // Standard Error: 9_009
            .saturating_add(Weight::from_ref_time(1_495_607).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_879 nanoseconds.
        Weight::from_ref_time(2_976_000)
            // Standard Error: 9_374
            .saturating_add(Weight::from_ref_time(1_352_110).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_753 nanoseconds.
        Weight::from_ref_time(2_888_000)
            // Standard Error: 9_696
            .saturating_add(Weight::from_ref_time(1_489_325).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_877 nanoseconds.
        Weight::from_ref_time(2_938_000)
            // Standard Error: 10_062
            .saturating_add(Weight::from_ref_time(1_817_173).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_697 nanoseconds.
        Weight::from_ref_time(2_818_000)
            // Standard Error: 8_585
            .saturating_add(Weight::from_ref_time(1_959_712).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_862 nanoseconds.
        Weight::from_ref_time(10_926_979)
            // Standard Error: 29_754
            .saturating_add(Weight::from_ref_time(2_115_466).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_703 nanoseconds.
        Weight::from_ref_time(12_910_650)
            // Standard Error: 25_317
            .saturating_add(Weight::from_ref_time(1_980_177).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_841 nanoseconds.
        Weight::from_ref_time(5_974_376)
            // Standard Error: 18_162
            .saturating_add(Weight::from_ref_time(2_609_057).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_739 nanoseconds.
        Weight::from_ref_time(12_198_821)
            // Standard Error: 25_184
            .saturating_add(Weight::from_ref_time(2_152_466).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_822 nanoseconds.
        Weight::from_ref_time(5_090_768)
            // Standard Error: 43_184
            .saturating_add(Weight::from_ref_time(9_277_839).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_646 nanoseconds.
        Weight::from_ref_time(13_523_843)
            // Standard Error: 43_647
            .saturating_add(Weight::from_ref_time(8_571_151).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_802 nanoseconds.
        Weight::from_ref_time(10_457_848)
            // Standard Error: 27_974
            .saturating_add(Weight::from_ref_time(2_517_678).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_745 nanoseconds.
        Weight::from_ref_time(14_580_741)
            // Standard Error: 28_133
            .saturating_add(Weight::from_ref_time(2_221_041).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_852 nanoseconds.
        Weight::from_ref_time(2_967_000)
            // Standard Error: 9_044
            .saturating_add(Weight::from_ref_time(1_364_973).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_711 nanoseconds.
        Weight::from_ref_time(2_853_000)
            // Standard Error: 9_684
            .saturating_add(Weight::from_ref_time(1_510_333).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_782 nanoseconds.
        Weight::from_ref_time(2_950_000)
            // Standard Error: 9_300
            .saturating_add(Weight::from_ref_time(1_399_596).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_657 nanoseconds.
        Weight::from_ref_time(2_755_000)
            // Standard Error: 8_878
            .saturating_add(Weight::from_ref_time(1_497_154).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_825 nanoseconds.
        Weight::from_ref_time(2_904_000)
            // Standard Error: 9_433
            .saturating_add(Weight::from_ref_time(1_382_033).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_653 nanoseconds.
        Weight::from_ref_time(2_771_000)
            // Standard Error: 8_050
            .saturating_add(Weight::from_ref_time(1_504_083).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_903 nanoseconds.
        Weight::from_ref_time(3_020_000)
            // Standard Error: 8_944
            .saturating_add(Weight::from_ref_time(1_183_205).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_768 nanoseconds.
        Weight::from_ref_time(2_917_000)
            // Standard Error: 9_382
            .saturating_add(Weight::from_ref_time(1_276_439).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_865 nanoseconds.
        Weight::from_ref_time(2_971_000)
            // Standard Error: 9_344
            .saturating_add(Weight::from_ref_time(1_188_390).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_700 nanoseconds.
        Weight::from_ref_time(2_797_000)
            // Standard Error: 8_133
            .saturating_add(Weight::from_ref_time(1_261_848).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_873 nanoseconds.
        Weight::from_ref_time(2_982_000)
            // Standard Error: 8_780
            .saturating_add(Weight::from_ref_time(1_209_982).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_701 nanoseconds.
        Weight::from_ref_time(2_807_000)
            // Standard Error: 8_880
            .saturating_add(Weight::from_ref_time(1_264_980).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_849 nanoseconds.
        Weight::from_ref_time(2_957_000)
            // Standard Error: 9_052
            .saturating_add(Weight::from_ref_time(1_191_978).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_655 nanoseconds.
        Weight::from_ref_time(2_787_000)
            // Standard Error: 8_528
            .saturating_add(Weight::from_ref_time(1_279_533).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_866 nanoseconds.
        Weight::from_ref_time(2_995_000)
            // Standard Error: 8_774
            .saturating_add(Weight::from_ref_time(1_173_391).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_678 nanoseconds.
        Weight::from_ref_time(2_761_000)
            // Standard Error: 8_485
            .saturating_add(Weight::from_ref_time(1_292_461).saturating_mul(r.into()))
    }
}
