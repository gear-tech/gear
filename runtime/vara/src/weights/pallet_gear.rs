// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_error(r: u32, ) -> Weight;
    fn gr_status_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 981_000 picoseconds.
        Weight::from_parts(1_013_000, 0)
            // Standard Error: 751
            .saturating_add(Weight::from_parts(209_231, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3577 + c * (1024 ±0)`
        // Minimum execution time: 3_322_000 picoseconds.
        Weight::from_parts(3_418_000, 3577)
            // Standard Error: 880
            .saturating_add(Weight::from_parts(678_346, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 55_980_000 picoseconds.
        Weight::from_parts(86_717_427, 0)
            // Standard Error: 12_767
            .saturating_add(Weight::from_parts(2_469_634, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `853`
        //  Estimated: `23826`
        // Minimum execution time: 60_475_000 picoseconds.
        Weight::from_parts(61_639_000, 23826)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `679`
        //  Estimated: `15019`
        // Minimum execution time: 60_915 nanoseconds.
        Weight::from_parts(71_195_000, 15019)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `5270`
        // Minimum execution time: 63_787_000 picoseconds.
        Weight::from_parts(34_339_305, 5270)
            // Standard Error: 59_019
            .saturating_add(Weight::from_parts(55_174_509, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `790`
        //  Estimated: `39947`
        // Minimum execution time: 65_916_000 picoseconds.
        Weight::from_parts(102_671_006, 39947)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_322, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `273`
        //  Estimated: `34806`
        // Minimum execution time: 9_852_222_000 picoseconds.
        Weight::from_parts(9_894_905_000, 34806)
            // Standard Error: 457_371
            .saturating_add(Weight::from_parts(31_683_897, 0).saturating_mul(c.into()))
            // Standard Error: 27
            .saturating_add(Weight::from_parts(805, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `349`
        //  Estimated: `23860`
        // Minimum execution time: 55_276_000 picoseconds.
        Weight::from_parts(28_369_779, 23860)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_163, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1016`
        //  Estimated: `42569`
        // Minimum execution time: 84_431_000 picoseconds.
        Weight::from_parts(72_890_553, 42569)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_154, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1033`
        //  Estimated: `85373`
        // Minimum execution time: 316_805_000 picoseconds.
        Weight::from_parts(330_115_296, 85373)
            // Standard Error: 1_542
            .saturating_add(Weight::from_parts(3_925, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(29_u64))
            .saturating_add(T::DbWeight::get().writes(23_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1033`
        //  Estimated: `85240`
        // Minimum execution time: 330_460_000 picoseconds.
        Weight::from_parts(346_451_430, 85240)
            .saturating_add(T::DbWeight::get().reads(29_u64))
            .saturating_add(T::DbWeight::get().writes(23_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 46_517_000 picoseconds.
        Weight::from_parts(46_640_000, 3899)
            // Standard Error: 32_316
            .saturating_add(Weight::from_parts(53_384_285, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_419_000 picoseconds.
        Weight::from_parts(109_380_987, 0)
            // Standard Error: 431_241
            .saturating_add(Weight::from_parts(160_274_275, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 241_630_000 picoseconds.
        Weight::from_parts(272_441_534, 0)
            // Standard Error: 420_774
            .saturating_add(Weight::from_parts(152_177_283, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_045_000 picoseconds.
        Weight::from_parts(86_260_945, 0)
            // Standard Error: 10_486
            .saturating_add(Weight::from_parts(4_228_667, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_915_000 picoseconds.
        Weight::from_parts(170_299_047, 0)
            // Standard Error: 36_162
            .saturating_add(Weight::from_parts(4_399_981, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_598_000 picoseconds.
        Weight::from_parts(109_809_262, 0)
            // Standard Error: 473_361
            .saturating_add(Weight::from_parts(229_159_998, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_360_000 picoseconds.
        Weight::from_parts(84_377_996, 0)
            // Standard Error: 348_835
            .saturating_add(Weight::from_parts(224_888_079, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_069_000 picoseconds.
        Weight::from_parts(86_513_999, 0)
            // Standard Error: 355_980
            .saturating_add(Weight::from_parts(224_093_275, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 120_198 nanoseconds.
        Weight::from_parts(130_172_800, 0)
            // Standard Error: 2_420_191
            .saturating_add(Weight::from_parts(9_196_990, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_300_000 picoseconds.
        Weight::from_parts(86_742_372, 0)
            // Standard Error: 322_198
            .saturating_add(Weight::from_parts(224_271_639, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_925_000 picoseconds.
        Weight::from_parts(76_074_598, 0)
            // Standard Error: 315_763
            .saturating_add(Weight::from_parts(225_194_876, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_409_000 picoseconds.
        Weight::from_parts(90_613_610, 0)
            // Standard Error: 254_999
            .saturating_add(Weight::from_parts(221_179_479, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_741_000 picoseconds.
        Weight::from_parts(79_765_064, 0)
            // Standard Error: 341_210
            .saturating_add(Weight::from_parts(223_122_400, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_465_000 picoseconds.
        Weight::from_parts(76_786_157, 0)
            // Standard Error: 307_866
            .saturating_add(Weight::from_parts(223_727_778, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_582_000 picoseconds.
        Weight::from_parts(84_889_691, 0)
            // Standard Error: 356_806
            .saturating_add(Weight::from_parts(223_597_435, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 569_635_000 picoseconds.
        Weight::from_parts(685_561_770, 0)
            // Standard Error: 638_197
            .saturating_add(Weight::from_parts(306_428_964, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 879_746_000 picoseconds.
        Weight::from_parts(917_971_000, 0)
            // Standard Error: 55_521
            .saturating_add(Weight::from_parts(13_276_026, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_360_000 picoseconds.
        Weight::from_parts(81_741_657, 0)
            // Standard Error: 333_995
            .saturating_add(Weight::from_parts(224_554_844, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_444_000 picoseconds.
        Weight::from_parts(80_320_108, 0)
            // Standard Error: 319_504
            .saturating_add(Weight::from_parts(222_965_691, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_891_000 picoseconds.
        Weight::from_parts(109_626_758, 0)
            // Standard Error: 412_250
            .saturating_add(Weight::from_parts(287_999_600, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_421_000 picoseconds.
        Weight::from_parts(132_539_076, 0)
            // Standard Error: 482_870
            .saturating_add(Weight::from_parts(432_456_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 503_371_000 picoseconds.
        Weight::from_parts(510_272_000, 0)
            // Standard Error: 62_378
            .saturating_add(Weight::from_parts(21_249_413, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_883_000 picoseconds.
        Weight::from_parts(171_788_037, 0)
            // Standard Error: 507_760
            .saturating_add(Weight::from_parts(437_920_218, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 519_554_000 picoseconds.
        Weight::from_parts(523_631_000, 0)
            // Standard Error: 63_370
            .saturating_add(Weight::from_parts(21_403_291, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 588_687_000 picoseconds.
        Weight::from_parts(742_205_350, 0)
            // Standard Error: 690_348
            .saturating_add(Weight::from_parts(449_622_295, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 570_983_000 picoseconds.
        Weight::from_parts(607_326_481, 0)
            // Standard Error: 569_961
            .saturating_add(Weight::from_parts(462_500_209, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_580_000 picoseconds.
        Weight::from_parts(75_698_454, 0)
            // Standard Error: 365_242
            .saturating_add(Weight::from_parts(235_011_171, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_638_377_000 picoseconds.
        Weight::from_parts(4_775_930_299, 0)
            // Standard Error: 433_267
            .saturating_add(Weight::from_parts(331_239_792, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 574_795_000 picoseconds.
        Weight::from_parts(582_946_000, 0)
            // Standard Error: 57_716
            .saturating_add(Weight::from_parts(29_698_329, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_632_488_000 picoseconds.
        Weight::from_parts(4_771_768_003, 0)
            // Standard Error: 438_570
            .saturating_add(Weight::from_parts(382_746_466, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_638_297_000 picoseconds.
        Weight::from_parts(4_794_000_524, 0)
            // Standard Error: 460_590
            .saturating_add(Weight::from_parts(402_436_101, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 244_544_000 picoseconds.
        Weight::from_parts(310_647_038, 0)
            // Standard Error: 498_396
            .saturating_add(Weight::from_parts(460_390_962, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 682_542_000 picoseconds.
        Weight::from_parts(689_216_000, 0)
            // Standard Error: 51_388
            .saturating_add(Weight::from_parts(21_383_360, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_779_717_000 picoseconds.
        Weight::from_parts(4_902_199_682, 0)
            // Standard Error: 635_632
            .saturating_add(Weight::from_parts(409_413_098, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_168_000 picoseconds.
        Weight::from_parts(89_699_161, 0)
            // Standard Error: 279_678
            .saturating_add(Weight::from_parts(24_506_638, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_882_000 picoseconds.
        Weight::from_parts(95_807_567, 0)
            // Standard Error: 1_175
            .saturating_add(Weight::from_parts(422_501, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_269_000 picoseconds.
        Weight::from_parts(89_627_220, 0)
            // Standard Error: 296_986
            .saturating_add(Weight::from_parts(22_166_179, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_711_000 picoseconds.
        Weight::from_parts(93_626_614, 0)
            // Standard Error: 1_215
            .saturating_add(Weight::from_parts(429_822, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_641_000 picoseconds.
        Weight::from_parts(86_506_040, 0)
            // Standard Error: 269_493
            .saturating_add(Weight::from_parts(22_933_659, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_553_000 picoseconds.
        Weight::from_parts(90_759_904, 0)
            // Standard Error: 255_738
            .saturating_add(Weight::from_parts(18_335_095, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_105_000 picoseconds.
        Weight::from_parts(115_462_382, 0)
            // Standard Error: 433_539
            .saturating_add(Weight::from_parts(318_230_650, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_780_000 picoseconds.
        Weight::from_parts(104_452_000, 0)
            // Standard Error: 2_714
            .saturating_add(Weight::from_parts(624_933, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 557_561_000 picoseconds.
        Weight::from_parts(590_331_922, 0)
            // Standard Error: 4_052_956
            .saturating_add(Weight::from_parts(55_513_677, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 567_132_000 picoseconds.
        Weight::from_parts(626_716_369, 0)
            // Standard Error: 5_710_546
            .saturating_add(Weight::from_parts(88_062_030, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_088_000 picoseconds.
        Weight::from_parts(96_226_467, 0)
            // Standard Error: 281_252
            .saturating_add(Weight::from_parts(15_080_932, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_358_000 picoseconds.
        Weight::from_parts(99_496_987, 0)
            // Standard Error: 1_115
            .saturating_add(Weight::from_parts(426_287, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_491_000 picoseconds.
        Weight::from_parts(96_086_153, 0)
            // Standard Error: 299_339
            .saturating_add(Weight::from_parts(13_820_846, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_337_000 picoseconds.
        Weight::from_parts(96_749_954, 0)
            // Standard Error: 1_030
            .saturating_add(Weight::from_parts(424_510, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_998_000 picoseconds.
        Weight::from_parts(73_181_320, 0)
            // Standard Error: 375_384
            .saturating_add(Weight::from_parts(237_317_299, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_814_000 picoseconds.
        Weight::from_parts(86_891_366, 0)
            // Standard Error: 310_778
            .saturating_add(Weight::from_parts(230_134_253, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 568_453_000 picoseconds.
        Weight::from_parts(680_433_556, 0)
            // Standard Error: 693_860
            .saturating_add(Weight::from_parts(237_597_251, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 589_901_000 picoseconds.
        Weight::from_parts(643_765_417, 0)
            // Standard Error: 2_659
            .saturating_add(Weight::from_parts(116_538, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_139_466_000 picoseconds.
        Weight::from_parts(5_416_414_905, 0)
            // Standard Error: 636_343
            .saturating_add(Weight::from_parts(253_808_769, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_505_733_000 picoseconds.
        Weight::from_parts(5_426_398_291, 0)
            // Standard Error: 17_221
            .saturating_add(Weight::from_parts(12_434_481, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_839_000 picoseconds.
        Weight::from_parts(107_333_249, 0)
            // Standard Error: 422_073
            .saturating_add(Weight::from_parts(244_820_392, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 229_838_000 picoseconds.
        Weight::from_parts(240_574_000, 0)
            // Standard Error: 59_592
            .saturating_add(Weight::from_parts(25_937_460, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_315_000 picoseconds.
        Weight::from_parts(101_601_574, 0)
            // Standard Error: 431_362
            .saturating_add(Weight::from_parts(294_785_428, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_518_000 picoseconds.
        Weight::from_parts(81_598_221, 0)
            // Standard Error: 308_642
            .saturating_add(Weight::from_parts(223_184_207, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_921_000 picoseconds.
        Weight::from_parts(86_284_177, 0)
            // Standard Error: 273_838
            .saturating_add(Weight::from_parts(27_617_422, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_653_000 picoseconds.
        Weight::from_parts(87_667_530, 0)
            // Standard Error: 256_799
            .saturating_add(Weight::from_parts(13_917_369, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_966_000 picoseconds.
        Weight::from_parts(89_106_779, 0)
            // Standard Error: 264_204
            .saturating_add(Weight::from_parts(15_553_320, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_939_000 picoseconds.
        Weight::from_parts(87_032_008, 0)
            // Standard Error: 272_715
            .saturating_add(Weight::from_parts(17_365_291, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_251_000 picoseconds.
        Weight::from_parts(88_503_340, 0)
            // Standard Error: 260_903
            .saturating_add(Weight::from_parts(13_712_059, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 139_487_000 picoseconds.
        Weight::from_parts(218_956_675, 0)
            // Standard Error: 415_855
            .saturating_add(Weight::from_parts(320_539_757, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_154_000 picoseconds.
        Weight::from_parts(172_192_566, 0)
            // Standard Error: 524_987
            .saturating_add(Weight::from_parts(510_440_963, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 42_967_577_000 picoseconds.
        Weight::from_parts(43_504_682_000, 0)
            // Standard Error: 265_601
            .saturating_add(Weight::from_parts(7_899_776, 0).saturating_mul(p.into()))
            // Standard Error: 265_588
            .saturating_add(Weight::from_parts(156_933_586, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_337_000 picoseconds.
        Weight::from_parts(148_746_501, 0)
            // Standard Error: 474_728
            .saturating_add(Weight::from_parts(521_324_358, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 42_724_708_000 picoseconds.
        Weight::from_parts(42_962_282_000, 0)
            // Standard Error: 258_345
            .saturating_add(Weight::from_parts(7_913_397, 0).saturating_mul(p.into()))
            // Standard Error: 258_333
            .saturating_add(Weight::from_parts(157_141_692, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 84_852_000 picoseconds.
        Weight::from_parts(116_154_750, 1131)
            // Standard Error: 6_924
            .saturating_add(Weight::from_parts(12_172_679, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 83_500_000 picoseconds.
        Weight::from_parts(85_639_000, 1131)
            // Standard Error: 33_904
            .saturating_add(Weight::from_parts(36_117_977, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_289_136_000 picoseconds.
        Weight::from_parts(6_117_610_160, 5069931)
            // Standard Error: 70_198
            .saturating_add(Weight::from_parts(36_910_169, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 85_757_000 picoseconds.
        Weight::from_parts(87_041_000, 1939)
            // Standard Error: 43_800
            .saturating_add(Weight::from_parts(45_589_845, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 91_319_000 picoseconds.
        Weight::from_parts(89_608_920, 1131)
            // Standard Error: 65_029
            .saturating_add(Weight::from_parts(36_811_075, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 619_176_000 picoseconds.
        Weight::from_parts(659_759_418, 1496)
            // Standard Error: 275_641
            .saturating_add(Weight::from_parts(41_985_662, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_008_013_000 picoseconds.
        Weight::from_parts(1_069_168_518, 317931)
            // Standard Error: 434_740
            .saturating_add(Weight::from_parts(44_034_185, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_334_702_000 picoseconds.
        Weight::from_parts(4_355_177_432, 0)
            // Standard Error: 10_384
            .saturating_add(Weight::from_parts(3_316_579, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_334_598_000 picoseconds.
        Weight::from_parts(4_346_190_795, 0)
            // Standard Error: 10_916
            .saturating_add(Weight::from_parts(3_352_432, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_639_599_000 picoseconds.
        Weight::from_parts(10_982_158_874, 0)
            // Standard Error: 285_782
            .saturating_add(Weight::from_parts(15_078_796, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_690_372_000 picoseconds.
        Weight::from_parts(11_598_068_018, 0)
            // Standard Error: 212_820
            .saturating_add(Weight::from_parts(8_117_528, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_227_000 picoseconds.
        Weight::from_parts(2_381_000, 0)
            // Standard Error: 8_872
            .saturating_add(Weight::from_parts(3_807_792, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_246_000 picoseconds.
        Weight::from_parts(2_342_000, 0)
            // Standard Error: 4_404
            .saturating_add(Weight::from_parts(3_049_884, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_283_000 picoseconds.
        Weight::from_parts(3_430_938, 0)
            // Standard Error: 1_111
            .saturating_add(Weight::from_parts(1_568_303, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_218_000 picoseconds.
        Weight::from_parts(2_306_000, 0)
            // Standard Error: 9_129
            .saturating_add(Weight::from_parts(2_912_067, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_279_000 picoseconds.
        Weight::from_parts(4_822_541, 0)
            // Standard Error: 21_260
            .saturating_add(Weight::from_parts(4_972_566, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_011_000 picoseconds.
        Weight::from_parts(5_866_609, 0)
            // Standard Error: 1_459
            .saturating_add(Weight::from_parts(170_676, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_285_000 picoseconds.
        Weight::from_parts(5_087_022, 0)
            // Standard Error: 7_194
            .saturating_add(Weight::from_parts(2_577_459, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_577_459 -
            2_413_446, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_355_000 picoseconds.
        Weight::from_parts(4_089_537, 0)
            // Standard Error: 12_991
            .saturating_add(Weight::from_parts(2_413_446, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_693_000 picoseconds.
        Weight::from_parts(11_565_619, 0)
            // Standard Error: 22_328
            .saturating_add(Weight::from_parts(10_153_485, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_631_000 picoseconds.
        Weight::from_parts(2_801_902, 0)
            // Standard Error: 5_741
            .saturating_add(Weight::from_parts(1_228_396, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_388_000 picoseconds.
        Weight::from_parts(5_714_852, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_296_000 picoseconds.
        Weight::from_parts(1_812_942, 0)
            // Standard Error: 3_161
            .saturating_add(Weight::from_parts(275_912, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_274_000 picoseconds.
        Weight::from_parts(2_382_000, 0)
            // Standard Error: 5_474
            .saturating_add(Weight::from_parts(759_216, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_283_000 picoseconds.
        Weight::from_parts(2_364_000, 0)
            // Standard Error: 4_801
            .saturating_add(Weight::from_parts(739_328, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_061_000 picoseconds.
        Weight::from_parts(3_183_428, 0)
            // Standard Error: 6_023
            .saturating_add(Weight::from_parts(760_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_062_000 picoseconds.
        Weight::from_parts(6_304_000, 0)
            // Standard Error: 7_902
            .saturating_add(Weight::from_parts(1_351_046, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_551_000 picoseconds.
        Weight::from_parts(652_766, 0)
            // Standard Error: 14_218
            .saturating_add(Weight::from_parts(7_049_585, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(2_326_000, 0)
            // Standard Error: 7_569
            .saturating_add(Weight::from_parts(3_433_008, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_256_000 picoseconds.
        Weight::from_parts(2_322_000, 0)
            // Standard Error: 5_345
            .saturating_add(Weight::from_parts(3_061_912, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_207_000 picoseconds.
        Weight::from_parts(2_268_000, 0)
            // Standard Error: 5_403
            .saturating_add(Weight::from_parts(3_014_387, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_208_000 picoseconds.
        Weight::from_parts(2_317_000, 0)
            // Standard Error: 4_448
            .saturating_add(Weight::from_parts(2_632_440, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_234_000 picoseconds.
        Weight::from_parts(2_273_000, 0)
            // Standard Error: 3_656
            .saturating_add(Weight::from_parts(569_156, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_267_000 picoseconds.
        Weight::from_parts(973_794, 0)
            // Standard Error: 4_677
            .saturating_add(Weight::from_parts(454_729, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_235_000 picoseconds.
        Weight::from_parts(2_334_000, 0)
            // Standard Error: 10_668
            .saturating_add(Weight::from_parts(1_966_388, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_256_000 picoseconds.
        Weight::from_parts(2_322_000, 0)
            // Standard Error: 7_828
            .saturating_add(Weight::from_parts(1_227_330, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(2_054_734, 0)
            // Standard Error: 3_362
            .saturating_add(Weight::from_parts(383_169, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_300_000 picoseconds.
        Weight::from_parts(1_982_996, 0)
            // Standard Error: 3_047
            .saturating_add(Weight::from_parts(377_261, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_197_000 picoseconds.
        Weight::from_parts(524_773, 0)
            // Standard Error: 4_709
            .saturating_add(Weight::from_parts(550_879, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_279_000 picoseconds.
        Weight::from_parts(2_298_000, 0)
            // Standard Error: 5_473
            .saturating_add(Weight::from_parts(554_418, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_371_000 picoseconds.
        Weight::from_parts(619_523, 0)
            // Standard Error: 4_925
            .saturating_add(Weight::from_parts(520_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_233_000 picoseconds.
        Weight::from_parts(1_843_259, 0)
            // Standard Error: 2_881
            .saturating_add(Weight::from_parts(333_361, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_288_000 picoseconds.
        Weight::from_parts(2_749_468, 0)
            // Standard Error: 2_255
            .saturating_add(Weight::from_parts(178_726, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_247_000 picoseconds.
        Weight::from_parts(2_875_733, 0)
            // Standard Error: 3_014
            .saturating_add(Weight::from_parts(182_617, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_279_000 picoseconds.
        Weight::from_parts(2_339_000, 0)
            // Standard Error: 9_853
            .saturating_add(Weight::from_parts(1_818_658, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_189_000 picoseconds.
        Weight::from_parts(2_269_000, 0)
            // Standard Error: 7_948
            .saturating_add(Weight::from_parts(1_153_844, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_236_000 picoseconds.
        Weight::from_parts(2_367_000, 0)
            // Standard Error: 10_541
            .saturating_add(Weight::from_parts(1_856_372, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_290_000 picoseconds.
        Weight::from_parts(2_341_000, 0)
            // Standard Error: 7_324
            .saturating_add(Weight::from_parts(1_137_546, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_166_000 picoseconds.
        Weight::from_parts(2_277_000, 0)
            // Standard Error: 10_680
            .saturating_add(Weight::from_parts(1_874_424, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_296_000 picoseconds.
        Weight::from_parts(2_367_000, 0)
            // Standard Error: 8_243
            .saturating_add(Weight::from_parts(1_224_625, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_214_000 picoseconds.
        Weight::from_parts(2_311_000, 0)
            // Standard Error: 9_650
            .saturating_add(Weight::from_parts(1_829_792, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_235_000 picoseconds.
        Weight::from_parts(2_309_000, 0)
            // Standard Error: 7_486
            .saturating_add(Weight::from_parts(1_183_030, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_224_000 picoseconds.
        Weight::from_parts(2_268_000, 0)
            // Standard Error: 11_045
            .saturating_add(Weight::from_parts(1_846_485, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_202_000 picoseconds.
        Weight::from_parts(2_322_000, 0)
            // Standard Error: 7_745
            .saturating_add(Weight::from_parts(1_150_981, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_337_000 picoseconds.
        Weight::from_parts(2_426_000, 0)
            // Standard Error: 10_680
            .saturating_add(Weight::from_parts(1_849_795, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_221_000 picoseconds.
        Weight::from_parts(2_260_000, 0)
            // Standard Error: 7_261
            .saturating_add(Weight::from_parts(1_162_528, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_265_000 picoseconds.
        Weight::from_parts(2_347_000, 0)
            // Standard Error: 10_797
            .saturating_add(Weight::from_parts(1_897_567, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_333_000 picoseconds.
        Weight::from_parts(2_407_000, 0)
            // Standard Error: 7_055
            .saturating_add(Weight::from_parts(1_166_482, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_233_000 picoseconds.
        Weight::from_parts(2_296_000, 0)
            // Standard Error: 12_140
            .saturating_add(Weight::from_parts(1_891_942, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_341_000 picoseconds.
        Weight::from_parts(2_374_000, 0)
            // Standard Error: 7_838
            .saturating_add(Weight::from_parts(1_203_748, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_263_000 picoseconds.
        Weight::from_parts(2_330_000, 0)
            // Standard Error: 9_977
            .saturating_add(Weight::from_parts(1_869_294, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_305_000 picoseconds.
        Weight::from_parts(2_330_000, 0)
            // Standard Error: 7_997
            .saturating_add(Weight::from_parts(1_196_139, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_210_000 picoseconds.
        Weight::from_parts(2_258_000, 0)
            // Standard Error: 10_782
            .saturating_add(Weight::from_parts(1_880_966, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(2_360_000, 0)
            // Standard Error: 7_396
            .saturating_add(Weight::from_parts(1_148_126, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_280_000 picoseconds.
        Weight::from_parts(2_327_000, 0)
            // Standard Error: 9_083
            .saturating_add(Weight::from_parts(1_284_027, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_316_000 picoseconds.
        Weight::from_parts(2_406_000, 0)
            // Standard Error: 4_561
            .saturating_add(Weight::from_parts(675_292, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_228_000 picoseconds.
        Weight::from_parts(2_325_000, 0)
            // Standard Error: 8_779
            .saturating_add(Weight::from_parts(1_317_192, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_287_000 picoseconds.
        Weight::from_parts(2_365_000, 0)
            // Standard Error: 5_168
            .saturating_add(Weight::from_parts(674_174, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_286_000 picoseconds.
        Weight::from_parts(2_391_000, 0)
            // Standard Error: 9_745
            .saturating_add(Weight::from_parts(1_787_142, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_322_000 picoseconds.
        Weight::from_parts(2_403_000, 0)
            // Standard Error: 8_476
            .saturating_add(Weight::from_parts(1_239_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_271_000 picoseconds.
        Weight::from_parts(5_003_692, 0)
            // Standard Error: 20_458
            .saturating_add(Weight::from_parts(2_523_881, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_313_000 picoseconds.
        Weight::from_parts(1_768_515, 0)
            // Standard Error: 14_769
            .saturating_add(Weight::from_parts(2_419_201, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_215_000 picoseconds.
        Weight::from_parts(2_390_788, 0)
            // Standard Error: 20_316
            .saturating_add(Weight::from_parts(2_755_199, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_215_000 picoseconds.
        Weight::from_parts(1_615_746, 0)
            // Standard Error: 12_657
            .saturating_add(Weight::from_parts(2_524_983, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_278_000 picoseconds.
        Weight::from_parts(3_904_219, 0)
            // Standard Error: 38_589
            .saturating_add(Weight::from_parts(9_120_187, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_254_000 picoseconds.
        Weight::from_parts(4_953_508, 0)
            // Standard Error: 53_364
            .saturating_add(Weight::from_parts(7_233_731, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_210_000 picoseconds.
        Weight::from_parts(7_637_519, 0)
            // Standard Error: 29_233
            .saturating_add(Weight::from_parts(2_597_936, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_282_000 picoseconds.
        Weight::from_parts(1_810_885, 0)
            // Standard Error: 12_987
            .saturating_add(Weight::from_parts(2_450_152, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_248_000 picoseconds.
        Weight::from_parts(2_314_000, 0)
            // Standard Error: 9_029
            .saturating_add(Weight::from_parts(1_314_804, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_188_000 picoseconds.
        Weight::from_parts(2_276_000, 0)
            // Standard Error: 4_719
            .saturating_add(Weight::from_parts(658_310, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_272_000 picoseconds.
        Weight::from_parts(2_336_000, 0)
            // Standard Error: 8_458
            .saturating_add(Weight::from_parts(1_331_104, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_283_000 picoseconds.
        Weight::from_parts(2_367_000, 0)
            // Standard Error: 5_264
            .saturating_add(Weight::from_parts(679_011, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_296_000 picoseconds.
        Weight::from_parts(2_362_000, 0)
            // Standard Error: 10_382
            .saturating_add(Weight::from_parts(1_387_884, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_285_000 picoseconds.
        Weight::from_parts(2_335_000, 0)
            // Standard Error: 7_146
            .saturating_add(Weight::from_parts(737_922, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_280_000 picoseconds.
        Weight::from_parts(2_334_000, 0)
            // Standard Error: 7_102
            .saturating_add(Weight::from_parts(1_177_096, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_330_000 picoseconds.
        Weight::from_parts(2_401_000, 0)
            // Standard Error: 4_124
            .saturating_add(Weight::from_parts(597_091, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(2_316_000, 0)
            // Standard Error: 8_202
            .saturating_add(Weight::from_parts(1_099_372, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_299_000 picoseconds.
        Weight::from_parts(2_350_000, 0)
            // Standard Error: 3_749
            .saturating_add(Weight::from_parts(568_937, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_242_000 picoseconds.
        Weight::from_parts(2_309_000, 0)
            // Standard Error: 8_388
            .saturating_add(Weight::from_parts(1_128_352, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_306_000 picoseconds.
        Weight::from_parts(165_702, 0)
            // Standard Error: 6_911
            .saturating_add(Weight::from_parts(641_823, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_197_000 picoseconds.
        Weight::from_parts(2_313_000, 0)
            // Standard Error: 7_362
            .saturating_add(Weight::from_parts(1_103_534, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_306_000 picoseconds.
        Weight::from_parts(2_328_000, 0)
            // Standard Error: 5_022
            .saturating_add(Weight::from_parts(612_487, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_321_000 picoseconds.
        Weight::from_parts(2_408_000, 0)
            // Standard Error: 7_765
            .saturating_add(Weight::from_parts(1_150_429, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_215_000 picoseconds.
        Weight::from_parts(2_319_000, 0)
            // Standard Error: 4_261
            .saturating_add(Weight::from_parts(630_753, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 981_000 picoseconds.
        Weight::from_parts(1_013_000, 0)
            // Standard Error: 751
            .saturating_add(Weight::from_parts(209_231, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3577 + c * (1024 ±0)`
        // Minimum execution time: 3_322_000 picoseconds.
        Weight::from_parts(3_418_000, 3577)
            // Standard Error: 880
            .saturating_add(Weight::from_parts(678_346, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 55_980_000 picoseconds.
        Weight::from_parts(86_717_427, 0)
            // Standard Error: 12_767
            .saturating_add(Weight::from_parts(2_469_634, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `853`
        //  Estimated: `23826`
        // Minimum execution time: 60_475_000 picoseconds.
        Weight::from_parts(61_639_000, 23826)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `679`
        //  Estimated: `15019`
        // Minimum execution time: 60_915 nanoseconds.
        Weight::from_parts(71_195_000, 15019)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `5270`
        // Minimum execution time: 63_787_000 picoseconds.
        Weight::from_parts(34_339_305, 5270)
            // Standard Error: 59_019
            .saturating_add(Weight::from_parts(55_174_509, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `790`
        //  Estimated: `39947`
        // Minimum execution time: 65_916_000 picoseconds.
        Weight::from_parts(102_671_006, 39947)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_322, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `273`
        //  Estimated: `34806`
        // Minimum execution time: 9_852_222_000 picoseconds.
        Weight::from_parts(9_894_905_000, 34806)
            // Standard Error: 457_371
            .saturating_add(Weight::from_parts(31_683_897, 0).saturating_mul(c.into()))
            // Standard Error: 27
            .saturating_add(Weight::from_parts(805, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `349`
        //  Estimated: `23860`
        // Minimum execution time: 55_276_000 picoseconds.
        Weight::from_parts(28_369_779, 23860)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_163, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1016`
        //  Estimated: `42569`
        // Minimum execution time: 84_431_000 picoseconds.
        Weight::from_parts(72_890_553, 42569)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_154, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1033`
        //  Estimated: `85373`
        // Minimum execution time: 316_805_000 picoseconds.
        Weight::from_parts(330_115_296, 85373)
            // Standard Error: 1_542
            .saturating_add(Weight::from_parts(3_925, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(29_u64))
            .saturating_add(RocksDbWeight::get().writes(23_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1033`
        //  Estimated: `85240`
        // Minimum execution time: 330_460_000 picoseconds.
        Weight::from_parts(346_451_430, 85240)
            .saturating_add(RocksDbWeight::get().reads(29_u64))
            .saturating_add(RocksDbWeight::get().writes(23_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 46_517_000 picoseconds.
        Weight::from_parts(46_640_000, 3899)
            // Standard Error: 32_316
            .saturating_add(Weight::from_parts(53_384_285, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_419_000 picoseconds.
        Weight::from_parts(109_380_987, 0)
            // Standard Error: 431_241
            .saturating_add(Weight::from_parts(160_274_275, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 241_630_000 picoseconds.
        Weight::from_parts(272_441_534, 0)
            // Standard Error: 420_774
            .saturating_add(Weight::from_parts(152_177_283, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_045_000 picoseconds.
        Weight::from_parts(86_260_945, 0)
            // Standard Error: 10_486
            .saturating_add(Weight::from_parts(4_228_667, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_915_000 picoseconds.
        Weight::from_parts(170_299_047, 0)
            // Standard Error: 36_162
            .saturating_add(Weight::from_parts(4_399_981, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_598_000 picoseconds.
        Weight::from_parts(109_809_262, 0)
            // Standard Error: 473_361
            .saturating_add(Weight::from_parts(229_159_998, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_360_000 picoseconds.
        Weight::from_parts(84_377_996, 0)
            // Standard Error: 348_835
            .saturating_add(Weight::from_parts(224_888_079, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_069_000 picoseconds.
        Weight::from_parts(86_513_999, 0)
            // Standard Error: 355_980
            .saturating_add(Weight::from_parts(224_093_275, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 120_198 nanoseconds.
        Weight::from_parts(130_172_800, 0)
            // Standard Error: 2_420_191
            .saturating_add(Weight::from_parts(9_196_990, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_300_000 picoseconds.
        Weight::from_parts(86_742_372, 0)
            // Standard Error: 322_198
            .saturating_add(Weight::from_parts(224_271_639, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_925_000 picoseconds.
        Weight::from_parts(76_074_598, 0)
            // Standard Error: 315_763
            .saturating_add(Weight::from_parts(225_194_876, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_409_000 picoseconds.
        Weight::from_parts(90_613_610, 0)
            // Standard Error: 254_999
            .saturating_add(Weight::from_parts(221_179_479, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_741_000 picoseconds.
        Weight::from_parts(79_765_064, 0)
            // Standard Error: 341_210
            .saturating_add(Weight::from_parts(223_122_400, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_465_000 picoseconds.
        Weight::from_parts(76_786_157, 0)
            // Standard Error: 307_866
            .saturating_add(Weight::from_parts(223_727_778, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_582_000 picoseconds.
        Weight::from_parts(84_889_691, 0)
            // Standard Error: 356_806
            .saturating_add(Weight::from_parts(223_597_435, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 569_635_000 picoseconds.
        Weight::from_parts(685_561_770, 0)
            // Standard Error: 638_197
            .saturating_add(Weight::from_parts(306_428_964, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 879_746_000 picoseconds.
        Weight::from_parts(917_971_000, 0)
            // Standard Error: 55_521
            .saturating_add(Weight::from_parts(13_276_026, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_360_000 picoseconds.
        Weight::from_parts(81_741_657, 0)
            // Standard Error: 333_995
            .saturating_add(Weight::from_parts(224_554_844, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_444_000 picoseconds.
        Weight::from_parts(80_320_108, 0)
            // Standard Error: 319_504
            .saturating_add(Weight::from_parts(222_965_691, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_891_000 picoseconds.
        Weight::from_parts(109_626_758, 0)
            // Standard Error: 412_250
            .saturating_add(Weight::from_parts(287_999_600, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_421_000 picoseconds.
        Weight::from_parts(132_539_076, 0)
            // Standard Error: 482_870
            .saturating_add(Weight::from_parts(432_456_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 503_371_000 picoseconds.
        Weight::from_parts(510_272_000, 0)
            // Standard Error: 62_378
            .saturating_add(Weight::from_parts(21_249_413, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_883_000 picoseconds.
        Weight::from_parts(171_788_037, 0)
            // Standard Error: 507_760
            .saturating_add(Weight::from_parts(437_920_218, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 519_554_000 picoseconds.
        Weight::from_parts(523_631_000, 0)
            // Standard Error: 63_370
            .saturating_add(Weight::from_parts(21_403_291, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 588_687_000 picoseconds.
        Weight::from_parts(742_205_350, 0)
            // Standard Error: 690_348
            .saturating_add(Weight::from_parts(449_622_295, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 570_983_000 picoseconds.
        Weight::from_parts(607_326_481, 0)
            // Standard Error: 569_961
            .saturating_add(Weight::from_parts(462_500_209, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_580_000 picoseconds.
        Weight::from_parts(75_698_454, 0)
            // Standard Error: 365_242
            .saturating_add(Weight::from_parts(235_011_171, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_638_377_000 picoseconds.
        Weight::from_parts(4_775_930_299, 0)
            // Standard Error: 433_267
            .saturating_add(Weight::from_parts(331_239_792, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 574_795_000 picoseconds.
        Weight::from_parts(582_946_000, 0)
            // Standard Error: 57_716
            .saturating_add(Weight::from_parts(29_698_329, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_632_488_000 picoseconds.
        Weight::from_parts(4_771_768_003, 0)
            // Standard Error: 438_570
            .saturating_add(Weight::from_parts(382_746_466, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_638_297_000 picoseconds.
        Weight::from_parts(4_794_000_524, 0)
            // Standard Error: 460_590
            .saturating_add(Weight::from_parts(402_436_101, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 244_544_000 picoseconds.
        Weight::from_parts(310_647_038, 0)
            // Standard Error: 498_396
            .saturating_add(Weight::from_parts(460_390_962, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 682_542_000 picoseconds.
        Weight::from_parts(689_216_000, 0)
            // Standard Error: 51_388
            .saturating_add(Weight::from_parts(21_383_360, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_779_717_000 picoseconds.
        Weight::from_parts(4_902_199_682, 0)
            // Standard Error: 635_632
            .saturating_add(Weight::from_parts(409_413_098, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_168_000 picoseconds.
        Weight::from_parts(89_699_161, 0)
            // Standard Error: 279_678
            .saturating_add(Weight::from_parts(24_506_638, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_882_000 picoseconds.
        Weight::from_parts(95_807_567, 0)
            // Standard Error: 1_175
            .saturating_add(Weight::from_parts(422_501, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_269_000 picoseconds.
        Weight::from_parts(89_627_220, 0)
            // Standard Error: 296_986
            .saturating_add(Weight::from_parts(22_166_179, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_711_000 picoseconds.
        Weight::from_parts(93_626_614, 0)
            // Standard Error: 1_215
            .saturating_add(Weight::from_parts(429_822, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_641_000 picoseconds.
        Weight::from_parts(86_506_040, 0)
            // Standard Error: 269_493
            .saturating_add(Weight::from_parts(22_933_659, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_553_000 picoseconds.
        Weight::from_parts(90_759_904, 0)
            // Standard Error: 255_738
            .saturating_add(Weight::from_parts(18_335_095, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_105_000 picoseconds.
        Weight::from_parts(115_462_382, 0)
            // Standard Error: 433_539
            .saturating_add(Weight::from_parts(318_230_650, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_780_000 picoseconds.
        Weight::from_parts(104_452_000, 0)
            // Standard Error: 2_714
            .saturating_add(Weight::from_parts(624_933, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 557_561_000 picoseconds.
        Weight::from_parts(590_331_922, 0)
            // Standard Error: 4_052_956
            .saturating_add(Weight::from_parts(55_513_677, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 567_132_000 picoseconds.
        Weight::from_parts(626_716_369, 0)
            // Standard Error: 5_710_546
            .saturating_add(Weight::from_parts(88_062_030, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_088_000 picoseconds.
        Weight::from_parts(96_226_467, 0)
            // Standard Error: 281_252
            .saturating_add(Weight::from_parts(15_080_932, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_358_000 picoseconds.
        Weight::from_parts(99_496_987, 0)
            // Standard Error: 1_115
            .saturating_add(Weight::from_parts(426_287, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_491_000 picoseconds.
        Weight::from_parts(96_086_153, 0)
            // Standard Error: 299_339
            .saturating_add(Weight::from_parts(13_820_846, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_337_000 picoseconds.
        Weight::from_parts(96_749_954, 0)
            // Standard Error: 1_030
            .saturating_add(Weight::from_parts(424_510, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_998_000 picoseconds.
        Weight::from_parts(73_181_320, 0)
            // Standard Error: 375_384
            .saturating_add(Weight::from_parts(237_317_299, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_814_000 picoseconds.
        Weight::from_parts(86_891_366, 0)
            // Standard Error: 310_778
            .saturating_add(Weight::from_parts(230_134_253, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 568_453_000 picoseconds.
        Weight::from_parts(680_433_556, 0)
            // Standard Error: 693_860
            .saturating_add(Weight::from_parts(237_597_251, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 589_901_000 picoseconds.
        Weight::from_parts(643_765_417, 0)
            // Standard Error: 2_659
            .saturating_add(Weight::from_parts(116_538, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_139_466_000 picoseconds.
        Weight::from_parts(5_416_414_905, 0)
            // Standard Error: 636_343
            .saturating_add(Weight::from_parts(253_808_769, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_505_733_000 picoseconds.
        Weight::from_parts(5_426_398_291, 0)
            // Standard Error: 17_221
            .saturating_add(Weight::from_parts(12_434_481, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_839_000 picoseconds.
        Weight::from_parts(107_333_249, 0)
            // Standard Error: 422_073
            .saturating_add(Weight::from_parts(244_820_392, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 229_838_000 picoseconds.
        Weight::from_parts(240_574_000, 0)
            // Standard Error: 59_592
            .saturating_add(Weight::from_parts(25_937_460, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_315_000 picoseconds.
        Weight::from_parts(101_601_574, 0)
            // Standard Error: 431_362
            .saturating_add(Weight::from_parts(294_785_428, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_518_000 picoseconds.
        Weight::from_parts(81_598_221, 0)
            // Standard Error: 308_642
            .saturating_add(Weight::from_parts(223_184_207, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_921_000 picoseconds.
        Weight::from_parts(86_284_177, 0)
            // Standard Error: 273_838
            .saturating_add(Weight::from_parts(27_617_422, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_653_000 picoseconds.
        Weight::from_parts(87_667_530, 0)
            // Standard Error: 256_799
            .saturating_add(Weight::from_parts(13_917_369, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_966_000 picoseconds.
        Weight::from_parts(89_106_779, 0)
            // Standard Error: 264_204
            .saturating_add(Weight::from_parts(15_553_320, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_939_000 picoseconds.
        Weight::from_parts(87_032_008, 0)
            // Standard Error: 272_715
            .saturating_add(Weight::from_parts(17_365_291, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_251_000 picoseconds.
        Weight::from_parts(88_503_340, 0)
            // Standard Error: 260_903
            .saturating_add(Weight::from_parts(13_712_059, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 139_487_000 picoseconds.
        Weight::from_parts(218_956_675, 0)
            // Standard Error: 415_855
            .saturating_add(Weight::from_parts(320_539_757, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_154_000 picoseconds.
        Weight::from_parts(172_192_566, 0)
            // Standard Error: 524_987
            .saturating_add(Weight::from_parts(510_440_963, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 42_967_577_000 picoseconds.
        Weight::from_parts(43_504_682_000, 0)
            // Standard Error: 265_601
            .saturating_add(Weight::from_parts(7_899_776, 0).saturating_mul(p.into()))
            // Standard Error: 265_588
            .saturating_add(Weight::from_parts(156_933_586, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_337_000 picoseconds.
        Weight::from_parts(148_746_501, 0)
            // Standard Error: 474_728
            .saturating_add(Weight::from_parts(521_324_358, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 42_724_708_000 picoseconds.
        Weight::from_parts(42_962_282_000, 0)
            // Standard Error: 258_345
            .saturating_add(Weight::from_parts(7_913_397, 0).saturating_mul(p.into()))
            // Standard Error: 258_333
            .saturating_add(Weight::from_parts(157_141_692, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 84_852_000 picoseconds.
        Weight::from_parts(116_154_750, 1131)
            // Standard Error: 6_924
            .saturating_add(Weight::from_parts(12_172_679, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 83_500_000 picoseconds.
        Weight::from_parts(85_639_000, 1131)
            // Standard Error: 33_904
            .saturating_add(Weight::from_parts(36_117_977, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_289_136_000 picoseconds.
        Weight::from_parts(6_117_610_160, 5069931)
            // Standard Error: 70_198
            .saturating_add(Weight::from_parts(36_910_169, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 85_757_000 picoseconds.
        Weight::from_parts(87_041_000, 1939)
            // Standard Error: 43_800
            .saturating_add(Weight::from_parts(45_589_845, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 91_319_000 picoseconds.
        Weight::from_parts(89_608_920, 1131)
            // Standard Error: 65_029
            .saturating_add(Weight::from_parts(36_811_075, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 619_176_000 picoseconds.
        Weight::from_parts(659_759_418, 1496)
            // Standard Error: 275_641
            .saturating_add(Weight::from_parts(41_985_662, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_008_013_000 picoseconds.
        Weight::from_parts(1_069_168_518, 317931)
            // Standard Error: 434_740
            .saturating_add(Weight::from_parts(44_034_185, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_334_702_000 picoseconds.
        Weight::from_parts(4_355_177_432, 0)
            // Standard Error: 10_384
            .saturating_add(Weight::from_parts(3_316_579, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_334_598_000 picoseconds.
        Weight::from_parts(4_346_190_795, 0)
            // Standard Error: 10_916
            .saturating_add(Weight::from_parts(3_352_432, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_639_599_000 picoseconds.
        Weight::from_parts(10_982_158_874, 0)
            // Standard Error: 285_782
            .saturating_add(Weight::from_parts(15_078_796, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_690_372_000 picoseconds.
        Weight::from_parts(11_598_068_018, 0)
            // Standard Error: 212_820
            .saturating_add(Weight::from_parts(8_117_528, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_227_000 picoseconds.
        Weight::from_parts(2_381_000, 0)
            // Standard Error: 8_872
            .saturating_add(Weight::from_parts(3_807_792, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_246_000 picoseconds.
        Weight::from_parts(2_342_000, 0)
            // Standard Error: 4_404
            .saturating_add(Weight::from_parts(3_049_884, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_283_000 picoseconds.
        Weight::from_parts(3_430_938, 0)
            // Standard Error: 1_111
            .saturating_add(Weight::from_parts(1_568_303, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_218_000 picoseconds.
        Weight::from_parts(2_306_000, 0)
            // Standard Error: 9_129
            .saturating_add(Weight::from_parts(2_912_067, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_279_000 picoseconds.
        Weight::from_parts(4_822_541, 0)
            // Standard Error: 21_260
            .saturating_add(Weight::from_parts(4_972_566, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_011_000 picoseconds.
        Weight::from_parts(5_866_609, 0)
            // Standard Error: 1_459
            .saturating_add(Weight::from_parts(170_676, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_285_000 picoseconds.
        Weight::from_parts(5_087_022, 0)
            // Standard Error: 7_194
            .saturating_add(Weight::from_parts(2_577_459, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_577_459 -
            2_413_446, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_355_000 picoseconds.
        Weight::from_parts(4_089_537, 0)
            // Standard Error: 12_991
            .saturating_add(Weight::from_parts(2_413_446, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_693_000 picoseconds.
        Weight::from_parts(11_565_619, 0)
            // Standard Error: 22_328
            .saturating_add(Weight::from_parts(10_153_485, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_631_000 picoseconds.
        Weight::from_parts(2_801_902, 0)
            // Standard Error: 5_741
            .saturating_add(Weight::from_parts(1_228_396, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_388_000 picoseconds.
        Weight::from_parts(5_714_852, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_296_000 picoseconds.
        Weight::from_parts(1_812_942, 0)
            // Standard Error: 3_161
            .saturating_add(Weight::from_parts(275_912, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_274_000 picoseconds.
        Weight::from_parts(2_382_000, 0)
            // Standard Error: 5_474
            .saturating_add(Weight::from_parts(759_216, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_283_000 picoseconds.
        Weight::from_parts(2_364_000, 0)
            // Standard Error: 4_801
            .saturating_add(Weight::from_parts(739_328, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_061_000 picoseconds.
        Weight::from_parts(3_183_428, 0)
            // Standard Error: 6_023
            .saturating_add(Weight::from_parts(760_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_062_000 picoseconds.
        Weight::from_parts(6_304_000, 0)
            // Standard Error: 7_902
            .saturating_add(Weight::from_parts(1_351_046, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_551_000 picoseconds.
        Weight::from_parts(652_766, 0)
            // Standard Error: 14_218
            .saturating_add(Weight::from_parts(7_049_585, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(2_326_000, 0)
            // Standard Error: 7_569
            .saturating_add(Weight::from_parts(3_433_008, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_256_000 picoseconds.
        Weight::from_parts(2_322_000, 0)
            // Standard Error: 5_345
            .saturating_add(Weight::from_parts(3_061_912, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_207_000 picoseconds.
        Weight::from_parts(2_268_000, 0)
            // Standard Error: 5_403
            .saturating_add(Weight::from_parts(3_014_387, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_208_000 picoseconds.
        Weight::from_parts(2_317_000, 0)
            // Standard Error: 4_448
            .saturating_add(Weight::from_parts(2_632_440, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_234_000 picoseconds.
        Weight::from_parts(2_273_000, 0)
            // Standard Error: 3_656
            .saturating_add(Weight::from_parts(569_156, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_267_000 picoseconds.
        Weight::from_parts(973_794, 0)
            // Standard Error: 4_677
            .saturating_add(Weight::from_parts(454_729, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_235_000 picoseconds.
        Weight::from_parts(2_334_000, 0)
            // Standard Error: 10_668
            .saturating_add(Weight::from_parts(1_966_388, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_256_000 picoseconds.
        Weight::from_parts(2_322_000, 0)
            // Standard Error: 7_828
            .saturating_add(Weight::from_parts(1_227_330, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(2_054_734, 0)
            // Standard Error: 3_362
            .saturating_add(Weight::from_parts(383_169, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_300_000 picoseconds.
        Weight::from_parts(1_982_996, 0)
            // Standard Error: 3_047
            .saturating_add(Weight::from_parts(377_261, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_197_000 picoseconds.
        Weight::from_parts(524_773, 0)
            // Standard Error: 4_709
            .saturating_add(Weight::from_parts(550_879, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_279_000 picoseconds.
        Weight::from_parts(2_298_000, 0)
            // Standard Error: 5_473
            .saturating_add(Weight::from_parts(554_418, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_371_000 picoseconds.
        Weight::from_parts(619_523, 0)
            // Standard Error: 4_925
            .saturating_add(Weight::from_parts(520_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_233_000 picoseconds.
        Weight::from_parts(1_843_259, 0)
            // Standard Error: 2_881
            .saturating_add(Weight::from_parts(333_361, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_288_000 picoseconds.
        Weight::from_parts(2_749_468, 0)
            // Standard Error: 2_255
            .saturating_add(Weight::from_parts(178_726, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_247_000 picoseconds.
        Weight::from_parts(2_875_733, 0)
            // Standard Error: 3_014
            .saturating_add(Weight::from_parts(182_617, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_279_000 picoseconds.
        Weight::from_parts(2_339_000, 0)
            // Standard Error: 9_853
            .saturating_add(Weight::from_parts(1_818_658, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_189_000 picoseconds.
        Weight::from_parts(2_269_000, 0)
            // Standard Error: 7_948
            .saturating_add(Weight::from_parts(1_153_844, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_236_000 picoseconds.
        Weight::from_parts(2_367_000, 0)
            // Standard Error: 10_541
            .saturating_add(Weight::from_parts(1_856_372, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_290_000 picoseconds.
        Weight::from_parts(2_341_000, 0)
            // Standard Error: 7_324
            .saturating_add(Weight::from_parts(1_137_546, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_166_000 picoseconds.
        Weight::from_parts(2_277_000, 0)
            // Standard Error: 10_680
            .saturating_add(Weight::from_parts(1_874_424, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_296_000 picoseconds.
        Weight::from_parts(2_367_000, 0)
            // Standard Error: 8_243
            .saturating_add(Weight::from_parts(1_224_625, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_214_000 picoseconds.
        Weight::from_parts(2_311_000, 0)
            // Standard Error: 9_650
            .saturating_add(Weight::from_parts(1_829_792, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_235_000 picoseconds.
        Weight::from_parts(2_309_000, 0)
            // Standard Error: 7_486
            .saturating_add(Weight::from_parts(1_183_030, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_224_000 picoseconds.
        Weight::from_parts(2_268_000, 0)
            // Standard Error: 11_045
            .saturating_add(Weight::from_parts(1_846_485, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_202_000 picoseconds.
        Weight::from_parts(2_322_000, 0)
            // Standard Error: 7_745
            .saturating_add(Weight::from_parts(1_150_981, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_337_000 picoseconds.
        Weight::from_parts(2_426_000, 0)
            // Standard Error: 10_680
            .saturating_add(Weight::from_parts(1_849_795, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_221_000 picoseconds.
        Weight::from_parts(2_260_000, 0)
            // Standard Error: 7_261
            .saturating_add(Weight::from_parts(1_162_528, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_265_000 picoseconds.
        Weight::from_parts(2_347_000, 0)
            // Standard Error: 10_797
            .saturating_add(Weight::from_parts(1_897_567, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_333_000 picoseconds.
        Weight::from_parts(2_407_000, 0)
            // Standard Error: 7_055
            .saturating_add(Weight::from_parts(1_166_482, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_233_000 picoseconds.
        Weight::from_parts(2_296_000, 0)
            // Standard Error: 12_140
            .saturating_add(Weight::from_parts(1_891_942, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_341_000 picoseconds.
        Weight::from_parts(2_374_000, 0)
            // Standard Error: 7_838
            .saturating_add(Weight::from_parts(1_203_748, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_263_000 picoseconds.
        Weight::from_parts(2_330_000, 0)
            // Standard Error: 9_977
            .saturating_add(Weight::from_parts(1_869_294, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_305_000 picoseconds.
        Weight::from_parts(2_330_000, 0)
            // Standard Error: 7_997
            .saturating_add(Weight::from_parts(1_196_139, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_210_000 picoseconds.
        Weight::from_parts(2_258_000, 0)
            // Standard Error: 10_782
            .saturating_add(Weight::from_parts(1_880_966, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(2_360_000, 0)
            // Standard Error: 7_396
            .saturating_add(Weight::from_parts(1_148_126, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_280_000 picoseconds.
        Weight::from_parts(2_327_000, 0)
            // Standard Error: 9_083
            .saturating_add(Weight::from_parts(1_284_027, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_316_000 picoseconds.
        Weight::from_parts(2_406_000, 0)
            // Standard Error: 4_561
            .saturating_add(Weight::from_parts(675_292, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_228_000 picoseconds.
        Weight::from_parts(2_325_000, 0)
            // Standard Error: 8_779
            .saturating_add(Weight::from_parts(1_317_192, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_287_000 picoseconds.
        Weight::from_parts(2_365_000, 0)
            // Standard Error: 5_168
            .saturating_add(Weight::from_parts(674_174, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_286_000 picoseconds.
        Weight::from_parts(2_391_000, 0)
            // Standard Error: 9_745
            .saturating_add(Weight::from_parts(1_787_142, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_322_000 picoseconds.
        Weight::from_parts(2_403_000, 0)
            // Standard Error: 8_476
            .saturating_add(Weight::from_parts(1_239_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_271_000 picoseconds.
        Weight::from_parts(5_003_692, 0)
            // Standard Error: 20_458
            .saturating_add(Weight::from_parts(2_523_881, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_313_000 picoseconds.
        Weight::from_parts(1_768_515, 0)
            // Standard Error: 14_769
            .saturating_add(Weight::from_parts(2_419_201, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_215_000 picoseconds.
        Weight::from_parts(2_390_788, 0)
            // Standard Error: 20_316
            .saturating_add(Weight::from_parts(2_755_199, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_215_000 picoseconds.
        Weight::from_parts(1_615_746, 0)
            // Standard Error: 12_657
            .saturating_add(Weight::from_parts(2_524_983, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_278_000 picoseconds.
        Weight::from_parts(3_904_219, 0)
            // Standard Error: 38_589
            .saturating_add(Weight::from_parts(9_120_187, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_254_000 picoseconds.
        Weight::from_parts(4_953_508, 0)
            // Standard Error: 53_364
            .saturating_add(Weight::from_parts(7_233_731, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_210_000 picoseconds.
        Weight::from_parts(7_637_519, 0)
            // Standard Error: 29_233
            .saturating_add(Weight::from_parts(2_597_936, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_282_000 picoseconds.
        Weight::from_parts(1_810_885, 0)
            // Standard Error: 12_987
            .saturating_add(Weight::from_parts(2_450_152, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_248_000 picoseconds.
        Weight::from_parts(2_314_000, 0)
            // Standard Error: 9_029
            .saturating_add(Weight::from_parts(1_314_804, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_188_000 picoseconds.
        Weight::from_parts(2_276_000, 0)
            // Standard Error: 4_719
            .saturating_add(Weight::from_parts(658_310, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_272_000 picoseconds.
        Weight::from_parts(2_336_000, 0)
            // Standard Error: 8_458
            .saturating_add(Weight::from_parts(1_331_104, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_283_000 picoseconds.
        Weight::from_parts(2_367_000, 0)
            // Standard Error: 5_264
            .saturating_add(Weight::from_parts(679_011, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_296_000 picoseconds.
        Weight::from_parts(2_362_000, 0)
            // Standard Error: 10_382
            .saturating_add(Weight::from_parts(1_387_884, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_285_000 picoseconds.
        Weight::from_parts(2_335_000, 0)
            // Standard Error: 7_146
            .saturating_add(Weight::from_parts(737_922, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_280_000 picoseconds.
        Weight::from_parts(2_334_000, 0)
            // Standard Error: 7_102
            .saturating_add(Weight::from_parts(1_177_096, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_330_000 picoseconds.
        Weight::from_parts(2_401_000, 0)
            // Standard Error: 4_124
            .saturating_add(Weight::from_parts(597_091, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(2_316_000, 0)
            // Standard Error: 8_202
            .saturating_add(Weight::from_parts(1_099_372, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_299_000 picoseconds.
        Weight::from_parts(2_350_000, 0)
            // Standard Error: 3_749
            .saturating_add(Weight::from_parts(568_937, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_242_000 picoseconds.
        Weight::from_parts(2_309_000, 0)
            // Standard Error: 8_388
            .saturating_add(Weight::from_parts(1_128_352, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_306_000 picoseconds.
        Weight::from_parts(165_702, 0)
            // Standard Error: 6_911
            .saturating_add(Weight::from_parts(641_823, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_197_000 picoseconds.
        Weight::from_parts(2_313_000, 0)
            // Standard Error: 7_362
            .saturating_add(Weight::from_parts(1_103_534, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_306_000 picoseconds.
        Weight::from_parts(2_328_000, 0)
            // Standard Error: 5_022
            .saturating_add(Weight::from_parts(612_487, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_321_000 picoseconds.
        Weight::from_parts(2_408_000, 0)
            // Standard Error: 7_765
            .saturating_add(Weight::from_parts(1_150_429, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_215_000 picoseconds.
        Weight::from_parts(2_319_000, 0)
            // Standard Error: 4_261
            .saturating_add(Weight::from_parts(630_753, 0).saturating_mul(r.into()))
    }
}
