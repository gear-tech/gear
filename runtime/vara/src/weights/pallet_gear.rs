// This file is part of Gear.

// Copyright (C) 2022-2025 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-07-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --runtime=./target/production/wbuild/vara-runtime/vara_runtime.compact.compressed.wasm --genesis-builder=runtime --genesis-builder-preset=development --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=alloc,claim_value,claim_value_to_inheritor,create_program,db_read_per_kb,db_write_per_kb,free,free_range,free_range_per_page,gr_block_height,gr_block_timestamp,gr_create_program,gr_create_program_per_kb,gr_create_program_wgas,gr_create_program_wgas_per_kb,gr_debug,gr_debug_per_kb,gr_env_vars,gr_gas_available,gr_message_id,gr_program_id,gr_random,gr_read,gr_read_per_kb,gr_reply_code,gr_reply_deposit,gr_reply_per_kb,gr_reply_push,gr_reply_push_input,gr_reply_push_input_per_kb,gr_reply_push_per_kb,gr_reply_to,gr_reply_wgas_per_kb,gr_reservation_reply_commit_per_kb,gr_reservation_reply_per_kb,gr_reservation_send,gr_reservation_send_commit,gr_reservation_send_per_kb,gr_reserve_gas,gr_send,gr_send_commit,gr_send_commit_wgas,gr_send_init,gr_send_input,gr_send_input_wgas,gr_send_per_kb,gr_send_push,gr_send_push_input,gr_send_push_input_per_kb,gr_send_push_per_kb,gr_send_wgas,gr_send_wgas_per_kb,gr_signal_code,gr_signal_from,gr_size,gr_source,gr_system_reserve_gas,gr_unreserve_gas,gr_value,gr_value_available,gr_wake,instantiate_module_code_section_per_kb,instantiate_module_data_section_per_kb,instantiate_module_element_section_per_kb,instantiate_module_global_section_per_kb,instantiate_module_table_section_per_kb,instantiate_module_type_section_per_kb,instr_br,instr_br_if,instr_br_table,instr_br_table_per_entry,instr_call,instr_call_const,instr_call_indirect,instr_call_indirect_per_param,instr_call_per_local,instr_global_get,instr_global_set,instr_i32add,instr_i32and,instr_i32clz,instr_i32ctz,instr_i32divs,instr_i32divu,instr_i32eq,instr_i32eqz,instr_i32extend16s,instr_i32extend8s,instr_i32ges,instr_i32geu,instr_i32gts,instr_i32gtu,instr_i32les,instr_i32leu,instr_i32load,instr_i32lts,instr_i32ltu,instr_i32mul,instr_i32ne,instr_i32or,instr_i32popcnt,instr_i32rems,instr_i32remu,instr_i32rotl,instr_i32rotr,instr_i32shl,instr_i32shrs,instr_i32shru,instr_i32store,instr_i32sub,instr_i32wrapi64,instr_i32xor,instr_i64add,instr_i64and,instr_i64clz,instr_i64ctz,instr_i64divs,instr_i64divu,instr_i64eq,instr_i64eqz,instr_i64extend16s,instr_i64extend32s,instr_i64extend8s,instr_i64extendsi32,instr_i64extendui32,instr_i64ges,instr_i64geu,instr_i64gts,instr_i64gtu,instr_i64les,instr_i64leu,instr_i64load,instr_i64lts,instr_i64ltu,instr_i64mul,instr_i64ne,instr_i64or,instr_i64popcnt,instr_i64rems,instr_i64remu,instr_i64rotl,instr_i64rotr,instr_i64shl,instr_i64shrs,instr_i64shru,instr_i64store,instr_i64sub,instr_i64xor,instr_if,instr_local_get,instr_local_set,instr_local_tee,instr_memory_current,instr_select,lazy_pages_host_func_read,lazy_pages_host_func_write,lazy_pages_host_func_write_after_read,lazy_pages_load_page_storage_data,lazy_pages_signal_read,lazy_pages_signal_write,lazy_pages_signal_write_after_read,load_allocations_per_interval,mem_grow,mem_grow_per_page,reinstrument_per_kb,send_message,send_reply,tasks_remove_from_mailbox,tasks_remove_from_waitlist,tasks_remove_gas_reservation,tasks_send_dispatch,tasks_send_user_message,tasks_send_user_message_to_mailbox,tasks_wake_message,tasks_wake_message_no_wake,upload_code,upload_program --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_code_section_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_data_section_per_kb(d: u32, ) -> Weight;
    fn instantiate_module_global_section_per_kb(g: u32, ) -> Weight;
    fn instantiate_module_table_section_per_kb(t: u32, ) -> Weight;
    fn instantiate_module_element_section_per_kb(e: u32, ) -> Weight;
    fn instantiate_module_type_section_per_kb(t: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn claim_value_to_inheritor(d: u32, ) -> Weight;
    fn reinstrument_per_kb(e: u32, ) -> Weight;
    fn load_allocations_per_interval(a: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn mem_grow_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn free_range(r: u32, ) -> Weight;
    fn free_range_per_page(p: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_env_vars(r: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn tasks_remove_gas_reservation() -> Weight;
    fn tasks_send_user_message_to_mailbox() -> Weight;
    fn tasks_send_user_message() -> Weight;
    fn tasks_send_dispatch() -> Weight;
    fn tasks_wake_message() -> Weight;
    fn tasks_wake_message_no_wake() -> Weight;
    fn tasks_remove_from_waitlist() -> Weight;
    fn tasks_remove_from_mailbox() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_291_000 picoseconds.
        Weight::from_parts(87_650_234, 0)
            // Standard Error: 91_523
            .saturating_add(Weight::from_parts(14_982_002, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_503_000 picoseconds.
        Weight::from_parts(88_209_288, 0)
            // Standard Error: 87_571
            .saturating_add(Weight::from_parts(13_378_528, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_909_000 picoseconds.
        Weight::from_parts(86_216_230, 0)
            // Standard Error: 85_622
            .saturating_add(Weight::from_parts(12_578_360, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_765_000 picoseconds.
        Weight::from_parts(86_343_420, 0)
            // Standard Error: 89_518
            .saturating_add(Weight::from_parts(13_002_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_988_000 picoseconds.
        Weight::from_parts(90_457_316, 0)
            // Standard Error: 87_749
            .saturating_add(Weight::from_parts(13_147_006, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_252_000 picoseconds.
        Weight::from_parts(90_246_386, 0)
            // Standard Error: 82_142
            .saturating_add(Weight::from_parts(14_588_786, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_901_000 picoseconds.
        Weight::from_parts(89_573_644, 0)
            // Standard Error: 89_135
            .saturating_add(Weight::from_parts(9_802_148, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_062_000 picoseconds.
        Weight::from_parts(89_271_272, 0)
            // Standard Error: 87_043
            .saturating_add(Weight::from_parts(9_264_888, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_962_000 picoseconds.
        Weight::from_parts(85_543_226, 0)
            // Standard Error: 77_404
            .saturating_add(Weight::from_parts(21_378_752, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_614_000 picoseconds.
        Weight::from_parts(85_875_558, 0)
            // Standard Error: 88_075
            .saturating_add(Weight::from_parts(16_097_686, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_861_000 picoseconds.
        Weight::from_parts(85_586_828, 0)
            // Standard Error: 88_114
            .saturating_add(Weight::from_parts(15_756_598, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_852_000 picoseconds.
        Weight::from_parts(85_243_230, 0)
            // Standard Error: 82_956
            .saturating_add(Weight::from_parts(14_917_930, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_194_000 picoseconds.
        Weight::from_parts(86_011_638, 0)
            // Standard Error: 81_027
            .saturating_add(Weight::from_parts(15_682_964, 0).saturating_mul(r.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_338_000 picoseconds.
        Weight::from_parts(1_410_000, 0)
            // Standard Error: 417
            .saturating_add(Weight::from_parts(235_381, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3577 + c * (1024 ±0)`
        // Minimum execution time: 6_432_000 picoseconds.
        Weight::from_parts(6_478_000, 3577)
            // Standard Error: 18_869
            .saturating_add(Weight::from_parts(2_258_512, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_code_section_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 49_685_000 picoseconds.
        Weight::from_parts(52_084_000, 0)
            // Standard Error: 34_353
            .saturating_add(Weight::from_parts(3_010_583, 0).saturating_mul(c.into()))
    }
    /// The range of component `d` is `[0, 512]`.
    fn instantiate_module_data_section_per_kb(d: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_970_000 picoseconds.
        Weight::from_parts(104_612_859, 0)
            // Standard Error: 2_608
            .saturating_add(Weight::from_parts(657_138, 0).saturating_mul(d.into()))
    }
    /// The range of component `g` is `[0, 512]`.
    fn instantiate_module_global_section_per_kb(g: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_226_000 picoseconds.
        Weight::from_parts(51_535_000, 0)
            // Standard Error: 36_110
            .saturating_add(Weight::from_parts(2_977_316, 0).saturating_mul(g.into()))
    }
    /// The range of component `t` is `[0, 9765]`.
    fn instantiate_module_table_section_per_kb(t: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 52_211_000 picoseconds.
        Weight::from_parts(690_190_591, 0)
            // Standard Error: 27_538
            .saturating_add(Weight::from_parts(618_377, 0).saturating_mul(t.into()))
    }
    /// The range of component `e` is `[0, 512]`.
    fn instantiate_module_element_section_per_kb(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 286_978_000 picoseconds.
        Weight::from_parts(469_572_970, 0)
            // Standard Error: 145_949
            .saturating_add(Weight::from_parts(2_872_717, 0).saturating_mul(e.into()))
    }
    /// The range of component `t` is `[0, 512]`.
    fn instantiate_module_type_section_per_kb(t: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_431_000 picoseconds.
        Weight::from_parts(54_732_577, 0)
            // Standard Error: 296
            .saturating_add(Weight::from_parts(1_449, 0).saturating_mul(t.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1335`
        //  Estimated: `8799`
        // Minimum execution time: 181_372_000 picoseconds.
        Weight::from_parts(184_431_000, 8799)
            .saturating_add(T::DbWeight::get().reads(18_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4`
        //  Estimated: `3469`
        // Minimum execution time: 95_473_000 picoseconds.
        Weight::from_parts(42_881_855, 3469)
            // Standard Error: 41_472
            .saturating_add(Weight::from_parts(93_668_398, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `669`
        //  Estimated: `6196`
        // Minimum execution time: 198_859_000 picoseconds.
        Weight::from_parts(201_140_000, 6196)
            // Standard Error: 146
            .saturating_add(Weight::from_parts(14_602, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(_c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `461`
        //  Estimated: `6196`
        // Minimum execution time: 23_353_715_000 picoseconds.
        Weight::from_parts(23_392_763_000, 6196)
            // Standard Error: 103
            .saturating_add(Weight::from_parts(15_881, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(15_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `531`
        //  Estimated: `6196`
        // Minimum execution time: 127_514_000 picoseconds.
        Weight::from_parts(129_008_000, 6196)
            // Standard Error: 75
            .saturating_add(Weight::from_parts(7_351, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(12_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1334`
        //  Estimated: `8799`
        // Minimum execution time: 211_202_000 picoseconds.
        Weight::from_parts(214_023_000, 8799)
            // Standard Error: 74
            .saturating_add(Weight::from_parts(7_333, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(19_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `d` is `[1, 1024]`.
    fn claim_value_to_inheritor(d: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + d * (207 ±0)`
        //  Estimated: `3593 + d * (2683 ±0)`
        // Minimum execution time: 69_340_000 picoseconds.
        Weight::from_parts(69_994_000, 3593)
            // Standard Error: 43_427
            .saturating_add(Weight::from_parts(54_288_495, 0).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
            .saturating_add(Weight::from_parts(0, 2683).saturating_mul(d.into()))
    }
    /// The range of component `e` is `[0, 512]`.
    fn reinstrument_per_kb(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `296 + e * (1024 ±0)`
        //  Estimated: `3760 + e * (1024 ±0)`
        // Minimum execution time: 83_947_000 picoseconds.
        Weight::from_parts(142_783_651, 3760)
            // Standard Error: 286_233
            .saturating_add(Weight::from_parts(716_700_987, 0).saturating_mul(e.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(e.into()))
    }
    /// The range of component `a` is `[0, 32767]`.
    fn load_allocations_per_interval(a: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101 + a * (8 ±0)`
        //  Estimated: `3566 + a * (8 ±0)`
        // Minimum execution time: 6_683_000 picoseconds.
        Weight::from_parts(12_329_638, 3566)
            // Standard Error: 35
            .saturating_add(Weight::from_parts(23_381, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 8).saturating_mul(a.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 248_720_000 picoseconds.
        Weight::from_parts(158_184_649, 0)
            // Standard Error: 345_263
            .saturating_add(Weight::from_parts(150_948_032, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 188_000 picoseconds.
        Weight::from_parts(877_325, 0)
            // Standard Error: 15_053
            .saturating_add(Weight::from_parts(58_401_984, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 819]`.
    fn mem_grow_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 58_507_000 picoseconds.
        Weight::from_parts(60_150_200, 0)
            // Standard Error: 53
            .saturating_add(Weight::from_parts(318, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 184_972_000 picoseconds.
        Weight::from_parts(149_411_271, 0)
            // Standard Error: 417_200
            .saturating_add(Weight::from_parts(82_779_052, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 189_134_000 picoseconds.
        Weight::from_parts(150_897_126, 0)
            // Standard Error: 366_968
            .saturating_add(Weight::from_parts(85_329_781, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 700]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 194_360_000 picoseconds.
        Weight::from_parts(325_156_184, 0)
            // Standard Error: 8_846
            .saturating_add(Weight::from_parts(4_271_038, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_897_000 picoseconds.
        Weight::from_parts(80_169_108, 0)
            // Standard Error: 4_341
            .saturating_add(Weight::from_parts(2_599_146, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 148_507_000 picoseconds.
        Weight::from_parts(175_053_177, 0)
            // Standard Error: 4_868
            .saturating_add(Weight::from_parts(2_593_118, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_274_000 picoseconds.
        Weight::from_parts(87_028_441, 0)
            // Standard Error: 299_888
            .saturating_add(Weight::from_parts(104_745_152, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_539_000 picoseconds.
        Weight::from_parts(74_630_889, 0)
            // Standard Error: 290_449
            .saturating_add(Weight::from_parts(100_550_216, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_481_000 picoseconds.
        Weight::from_parts(77_934_790, 0)
            // Standard Error: 291_251
            .saturating_add(Weight::from_parts(99_724_534, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_161_000 picoseconds.
        Weight::from_parts(77_590_084, 0)
            // Standard Error: 293_841
            .saturating_add(Weight::from_parts(100_386_480, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_120_000 picoseconds.
        Weight::from_parts(74_751_770, 0)
            // Standard Error: 244_287
            .saturating_add(Weight::from_parts(106_239_978, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_739_000 picoseconds.
        Weight::from_parts(76_114_724, 0)
            // Standard Error: 275_028
            .saturating_add(Weight::from_parts(102_010_008, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_330_000 picoseconds.
        Weight::from_parts(80_273_897, 0)
            // Standard Error: 274_628
            .saturating_add(Weight::from_parts(100_981_892, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_696_000 picoseconds.
        Weight::from_parts(74_721_481, 0)
            // Standard Error: 276_256
            .saturating_add(Weight::from_parts(101_761_258, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_934_000 picoseconds.
        Weight::from_parts(116_174_579, 0)
            // Standard Error: 308_905
            .saturating_add(Weight::from_parts(153_792_171, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 220_974_000 picoseconds.
        Weight::from_parts(223_800_000, 0)
            // Standard Error: 122_536
            .saturating_add(Weight::from_parts(17_751_192, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_424_000 picoseconds.
        Weight::from_parts(89_251_877, 0)
            // Standard Error: 318_003
            .saturating_add(Weight::from_parts(104_985_740, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_973_000 picoseconds.
        Weight::from_parts(76_158_432, 0)
            // Standard Error: 292_786
            .saturating_add(Weight::from_parts(100_486_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_115_000 picoseconds.
        Weight::from_parts(82_008_237, 0)
            // Standard Error: 239_951
            .saturating_add(Weight::from_parts(108_584_274, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_356_000 picoseconds.
        Weight::from_parts(84_240_473, 0)
            // Standard Error: 329_677
            .saturating_add(Weight::from_parts(179_183_391, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_349_000 picoseconds.
        Weight::from_parts(87_366_000, 0)
            // Standard Error: 3_208_586
            .saturating_add(Weight::from_parts(714_102_046, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_874_000 picoseconds.
        Weight::from_parts(140_024_365, 0)
            // Standard Error: 316_000
            .saturating_add(Weight::from_parts(254_092_096, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 324_036_000 picoseconds.
        Weight::from_parts(327_265_000, 0)
            // Standard Error: 272_185
            .saturating_add(Weight::from_parts(42_992_485, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_565_000 picoseconds.
        Weight::from_parts(141_075_604, 0)
            // Standard Error: 319_613
            .saturating_add(Weight::from_parts(256_068_220, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 328_147_000 picoseconds.
        Weight::from_parts(330_912_000, 0)
            // Standard Error: 273_001
            .saturating_add(Weight::from_parts(42_935_772, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_174_000 picoseconds.
        Weight::from_parts(119_838_350, 0)
            // Standard Error: 269_589
            .saturating_add(Weight::from_parts(261_343_412, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_564_000 picoseconds.
        Weight::from_parts(131_271_138, 0)
            // Standard Error: 295_680
            .saturating_add(Weight::from_parts(249_894_091, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_152_000 picoseconds.
        Weight::from_parts(74_946_014, 0)
            // Standard Error: 227_488
            .saturating_add(Weight::from_parts(112_789_896, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_237_765_000 picoseconds.
        Weight::from_parts(2_337_422_812, 0)
            // Standard Error: 189_764
            .saturating_add(Weight::from_parts(174_594_185, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 323_667_000 picoseconds.
        Weight::from_parts(326_643_000, 0)
            // Standard Error: 269_964
            .saturating_add(Weight::from_parts(42_817_370, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_238_855_000 picoseconds.
        Weight::from_parts(2_340_206_706, 0)
            // Standard Error: 262_295
            .saturating_add(Weight::from_parts(213_115_884, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_231_516_000 picoseconds.
        Weight::from_parts(2_323_071_987, 0)
            // Standard Error: 337_552
            .saturating_add(Weight::from_parts(213_365_769, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 202_941_000 picoseconds.
        Weight::from_parts(229_176_891, 0)
            // Standard Error: 260_525
            .saturating_add(Weight::from_parts(307_715_475, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 489_624_000 picoseconds.
        Weight::from_parts(496_052_000, 0)
            // Standard Error: 259_838
            .saturating_add(Weight::from_parts(43_683_062, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_345_217_000 picoseconds.
        Weight::from_parts(2_419_140_925, 0)
            // Standard Error: 416_181
            .saturating_add(Weight::from_parts(266_918_691, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_022_000 picoseconds.
        Weight::from_parts(15_514_676, 0)
            // Standard Error: 3_987
            .saturating_add(Weight::from_parts(789_287, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_887_000 picoseconds.
        Weight::from_parts(15_971_547, 0)
            // Standard Error: 3_989
            .saturating_add(Weight::from_parts(789_806, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_103_000 picoseconds.
        Weight::from_parts(118_028_684, 0)
            // Standard Error: 304_682
            .saturating_add(Weight::from_parts(161_516_989, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_943_000 picoseconds.
        Weight::from_parts(110_803_329, 0)
            // Standard Error: 1_044
            .saturating_add(Weight::from_parts(730_935, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_773_000 picoseconds.
        Weight::from_parts(14_815_030, 0)
            // Standard Error: 4_112
            .saturating_add(Weight::from_parts(779_267, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_204_000 picoseconds.
        Weight::from_parts(14_293_627, 0)
            // Standard Error: 4_121
            .saturating_add(Weight::from_parts(792_426, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_365_000 picoseconds.
        Weight::from_parts(76_418_882, 0)
            // Standard Error: 258_531
            .saturating_add(Weight::from_parts(102_869_166, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_828_000 picoseconds.
        Weight::from_parts(75_032_708, 0)
            // Standard Error: 256_669
            .saturating_add(Weight::from_parts(100_722_602, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_820_000 picoseconds.
        Weight::from_parts(76_190_825, 0)
            // Standard Error: 251_207
            .saturating_add(Weight::from_parts(102_898_537, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_960_000 picoseconds.
        Weight::from_parts(108_275_204, 0)
            // Standard Error: 321_679
            .saturating_add(Weight::from_parts(114_024_090, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_326_000 picoseconds.
        Weight::from_parts(105_719_615, 0)
            // Standard Error: 286
            .saturating_add(Weight::from_parts(132_086, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_227_602_000 picoseconds.
        Weight::from_parts(2_348_618_320, 0)
            // Standard Error: 311_439
            .saturating_add(Weight::from_parts(143_082_383, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_411_572_000 picoseconds.
        Weight::from_parts(2_101_053_209, 0)
            // Standard Error: 12_901
            .saturating_add(Weight::from_parts(13_120_372, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_613_000 picoseconds.
        Weight::from_parts(101_888_937, 0)
            // Standard Error: 315_874
            .saturating_add(Weight::from_parts(114_314_270, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 148_191_000 picoseconds.
        Weight::from_parts(149_766_000, 0)
            // Standard Error: 273_722
            .saturating_add(Weight::from_parts(40_140_709, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_459_000 picoseconds.
        Weight::from_parts(81_169_730, 0)
            // Standard Error: 281_221
            .saturating_add(Weight::from_parts(99_900_132, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 151_702_000 picoseconds.
        Weight::from_parts(156_110_000, 0)
            // Standard Error: 1_134_888
            .saturating_add(Weight::from_parts(264_623_877, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_839_000 picoseconds.
        Weight::from_parts(121_601_365, 0)
            // Standard Error: 271_985
            .saturating_add(Weight::from_parts(339_578_496, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 66_241_123_000 picoseconds.
        Weight::from_parts(66_282_748_000, 0)
            // Standard Error: 454_564
            .saturating_add(Weight::from_parts(10_355_288, 0).saturating_mul(p.into()))
            // Standard Error: 454_542
            .saturating_add(Weight::from_parts(134_198_631, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_613_000 picoseconds.
        Weight::from_parts(128_823_646, 0)
            // Standard Error: 265_308
            .saturating_add(Weight::from_parts(331_883_574, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 66_178_576_000 picoseconds.
        Weight::from_parts(66_239_115_000, 0)
            // Standard Error: 471_573
            .saturating_add(Weight::from_parts(10_407_432, 0).saturating_mul(p.into()))
            // Standard Error: 471_550
            .saturating_add(Weight::from_parts(134_205_518, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `1098 + p * (9900 ±0)`
        // Minimum execution time: 84_619_000 picoseconds.
        Weight::from_parts(104_785_698, 1098)
            // Standard Error: 8_830
            .saturating_add(Weight::from_parts(16_567_789, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `1098 + p * (9900 ±0)`
        // Minimum execution time: 83_764_000 picoseconds.
        Weight::from_parts(86_034_000, 1098)
            // Standard Error: 27_114
            .saturating_add(Weight::from_parts(43_741_624, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `5069898`
        // Minimum execution time: 8_567_811_000 picoseconds.
        Weight::from_parts(8_480_062_936, 5069898)
            // Standard Error: 24_970
            .saturating_add(Weight::from_parts(42_581_447, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1787 + p * (65580 ±0)`
        //  Estimated: `1913 + p * (75482 ±0)`
        // Minimum execution time: 84_113_000 picoseconds.
        Weight::from_parts(86_823_000, 1913)
            // Standard Error: 46_791
            .saturating_add(Weight::from_parts(59_568_368, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `1098 + p * (9900 ±0)`
        // Minimum execution time: 91_463_000 picoseconds.
        Weight::from_parts(27_863_637, 1098)
            // Standard Error: 250_740
            .saturating_add(Weight::from_parts(54_307_470, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `1463 + p * (9883 ±2)`
        // Minimum execution time: 117_602_000 picoseconds.
        Weight::from_parts(11_153_822, 1463)
            // Standard Error: 369_262
            .saturating_add(Weight::from_parts(64_056_886, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `317898`
        // Minimum execution time: 654_946_000 picoseconds.
        Weight::from_parts(556_791_511, 317898)
            // Standard Error: 361_600
            .saturating_add(Weight::from_parts(62_761_771, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_330_713_000 picoseconds.
        Weight::from_parts(5_339_389_767, 0)
            // Standard Error: 40_001
            .saturating_add(Weight::from_parts(2_677_002 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_321_425_000 picoseconds.
        Weight::from_parts(5_395_279_579, 0)
            // Standard Error: 38_651
            .saturating_add(Weight::from_parts(2_445_964 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_726_513_000 picoseconds.
        Weight::from_parts(11_304_725_235, 0)
            // Standard Error: 57_364
            .saturating_add(Weight::from_parts(5_019_216 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_696_582_000 picoseconds.
        Weight::from_parts(11_292_661_340, 0)
            // Standard Error: 58_886
            .saturating_add(Weight::from_parts(4_919_282 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_407_000 picoseconds.
        Weight::from_parts(1_484_000, 0)
            // Standard Error: 10_604
            .saturating_add(Weight::from_parts(3_412_855 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_477_000 picoseconds.
        Weight::from_parts(1_510_000, 0)
            // Standard Error: 4_521
            .saturating_add(Weight::from_parts(2_451_881 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_379_000 picoseconds.
        Weight::from_parts(2_135_861, 0)
            // Standard Error: 525
            .saturating_add(Weight::from_parts(1_747_335 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_427_000 picoseconds.
        Weight::from_parts(1_471_000, 0)
            // Standard Error: 8_507
            .saturating_add(Weight::from_parts(2_954_251 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_402_000 picoseconds.
        Weight::from_parts(1_458_000, 0)
            // Standard Error: 31_782
            .saturating_add(Weight::from_parts(5_223_872 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_898_000 picoseconds.
        Weight::from_parts(6_775_053, 0)
            // Standard Error: 415
            .saturating_add(Weight::from_parts(70_860 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_376_000 picoseconds.
        Weight::from_parts(1_769_965, 0)
            // Standard Error: 6_362
            .saturating_add(Weight::from_parts(2_827_776 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts((2_827_776 -
            2_646_444) * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_351_000 picoseconds.
        Weight::from_parts(2_072_355, 0)
            // Standard Error: 13_555
            .saturating_add(Weight::from_parts(2_646_444 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_576_000 picoseconds.
        Weight::from_parts(1_616_000, 0)
            // Standard Error: 21_789
            .saturating_add(Weight::from_parts(11_509_432 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_795_000 picoseconds.
        Weight::from_parts(11_882_000, 0)
            // Standard Error: 11_019
            .saturating_add(Weight::from_parts(683_346 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_256_000 picoseconds.
        Weight::from_parts(4_561_483, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_130_000 picoseconds.
        Weight::from_parts(10_053_881, 0)
            // Standard Error: 2_672
            .saturating_add(Weight::from_parts(304_813 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_122_000 picoseconds.
        Weight::from_parts(10_299_372, 0)
            // Standard Error: 2_624
            .saturating_add(Weight::from_parts(745_669 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_048_000 picoseconds.
        Weight::from_parts(10_443_092, 0)
            // Standard Error: 3_078
            .saturating_add(Weight::from_parts(743_473 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_595_000 picoseconds.
        Weight::from_parts(1_120_284, 0)
            // Standard Error: 1_699
            .saturating_add(Weight::from_parts(332_405 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_511_000 picoseconds.
        Weight::from_parts(1_624_000, 0)
            // Standard Error: 3_192
            .saturating_add(Weight::from_parts(594_427 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_599_000 picoseconds.
        Weight::from_parts(222_642, 0)
            // Standard Error: 7_858
            .saturating_add(Weight::from_parts(6_679_357 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_417_000 picoseconds.
        Weight::from_parts(761_126, 0)
            // Standard Error: 6_063
            .saturating_add(Weight::from_parts(338_916 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_317_000 picoseconds.
        Weight::from_parts(1_704_086, 0)
            // Standard Error: 1_546
            .saturating_add(Weight::from_parts(208_323 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_359_000 picoseconds.
        Weight::from_parts(1_399_000, 0)
            // Standard Error: 5_044
            .saturating_add(Weight::from_parts(369_512 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_450_000 picoseconds.
        Weight::from_parts(1_783_185, 0)
            // Standard Error: 479
            .saturating_add(Weight::from_parts(200_764 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_432_000 picoseconds.
        Weight::from_parts(1_135_166, 0)
            // Standard Error: 5_901
            .saturating_add(Weight::from_parts(316_239 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_413_000 picoseconds.
        Weight::from_parts(1_164_720, 0)
            // Standard Error: 5_939
            .saturating_add(Weight::from_parts(260_960 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_429_000 picoseconds.
        Weight::from_parts(1_505_000, 0)
            // Standard Error: 7_437
            .saturating_add(Weight::from_parts(905_532 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_409_000 picoseconds.
        Weight::from_parts(1_452_000, 0)
            // Standard Error: 6_373
            .saturating_add(Weight::from_parts(558_956 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_409_000 picoseconds.
        Weight::from_parts(1_153_345, 0)
            // Standard Error: 4_952
            .saturating_add(Weight::from_parts(230_958 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_440_000 picoseconds.
        Weight::from_parts(1_588_847, 0)
            // Standard Error: 721
            .saturating_add(Weight::from_parts(198_800 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_398_000 picoseconds.
        Weight::from_parts(1_406_761, 0)
            // Standard Error: 947
            .saturating_add(Weight::from_parts(265_846 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_416_000 picoseconds.
        Weight::from_parts(999_020, 0)
            // Standard Error: 6_451
            .saturating_add(Weight::from_parts(298_427 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_406_000 picoseconds.
        Weight::from_parts(1_420_528, 0)
            // Standard Error: 3_104
            .saturating_add(Weight::from_parts(251_365 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_402_000 picoseconds.
        Weight::from_parts(1_538_378, 0)
            // Standard Error: 2_545
            .saturating_add(Weight::from_parts(190_228 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_421_000 picoseconds.
        Weight::from_parts(1_768_472, 0)
            // Standard Error: 1_597
            .saturating_add(Weight::from_parts(109_481 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_366_000 picoseconds.
        Weight::from_parts(1_902_383, 0)
            // Standard Error: 523
            .saturating_add(Weight::from_parts(103_271 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_394_000 picoseconds.
        Weight::from_parts(1_485_000, 0)
            // Standard Error: 12_761
            .saturating_add(Weight::from_parts(1_006_063 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_369_000 picoseconds.
        Weight::from_parts(1_462_000, 0)
            // Standard Error: 10_603
            .saturating_add(Weight::from_parts(622_630 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_448_000 picoseconds.
        Weight::from_parts(1_480_000, 0)
            // Standard Error: 7_650
            .saturating_add(Weight::from_parts(923_228 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_362_000 picoseconds.
        Weight::from_parts(1_416_000, 0)
            // Standard Error: 8_020
            .saturating_add(Weight::from_parts(576_123 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_410_000 picoseconds.
        Weight::from_parts(1_469_000, 0)
            // Standard Error: 8_061
            .saturating_add(Weight::from_parts(953_094 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_391_000 picoseconds.
        Weight::from_parts(1_455_000, 0)
            // Standard Error: 3_172
            .saturating_add(Weight::from_parts(539_209 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_382_000 picoseconds.
        Weight::from_parts(1_523_000, 0)
            // Standard Error: 8_948
            .saturating_add(Weight::from_parts(963_929 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_402_000 picoseconds.
        Weight::from_parts(1_448_000, 0)
            // Standard Error: 2_543
            .saturating_add(Weight::from_parts(531_454 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_418_000 picoseconds.
        Weight::from_parts(1_447_000, 0)
            // Standard Error: 8_288
            .saturating_add(Weight::from_parts(938_451 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_465_000 picoseconds.
        Weight::from_parts(1_538_000, 0)
            // Standard Error: 2_749
            .saturating_add(Weight::from_parts(531_029 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_386_000 picoseconds.
        Weight::from_parts(1_480_000, 0)
            // Standard Error: 8_415
            .saturating_add(Weight::from_parts(937_820 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_427_000 picoseconds.
        Weight::from_parts(1_507_000, 0)
            // Standard Error: 2_796
            .saturating_add(Weight::from_parts(536_033 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_411_000 picoseconds.
        Weight::from_parts(1_531_000, 0)
            // Standard Error: 16_484
            .saturating_add(Weight::from_parts(1_107_812 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_395_000 picoseconds.
        Weight::from_parts(122_194, 0)
            // Standard Error: 10_910
            .saturating_add(Weight::from_parts(592_529 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_381_000 picoseconds.
        Weight::from_parts(1_466_000, 0)
            // Standard Error: 7_570
            .saturating_add(Weight::from_parts(922_930 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_392_000 picoseconds.
        Weight::from_parts(1_454_000, 0)
            // Standard Error: 10_165
            .saturating_add(Weight::from_parts(637_576 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_418_000 picoseconds.
        Weight::from_parts(1_505_000, 0)
            // Standard Error: 8_580
            .saturating_add(Weight::from_parts(955_296 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_412_000 picoseconds.
        Weight::from_parts(1_512_000, 0)
            // Standard Error: 2_959
            .saturating_add(Weight::from_parts(536_919 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_463_000 picoseconds.
        Weight::from_parts(1_538_000, 0)
            // Standard Error: 13_102
            .saturating_add(Weight::from_parts(1_007_273 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_354_000 picoseconds.
        Weight::from_parts(1_481_000, 0)
            // Standard Error: 3_485
            .saturating_add(Weight::from_parts(546_454 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_388_000 picoseconds.
        Weight::from_parts(1_445_000, 0)
            // Standard Error: 5_714
            .saturating_add(Weight::from_parts(614_978 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_446_000 picoseconds.
        Weight::from_parts(125_372, 0)
            // Standard Error: 9_930
            .saturating_add(Weight::from_parts(387_703 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_390_000 picoseconds.
        Weight::from_parts(1_484_000, 0)
            // Standard Error: 3_613
            .saturating_add(Weight::from_parts(598_589 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_371_000 picoseconds.
        Weight::from_parts(1_171_333, 0)
            // Standard Error: 1_635
            .saturating_add(Weight::from_parts(321_071 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_348_000 picoseconds.
        Weight::from_parts(1_439_000, 0)
            // Standard Error: 7_726
            .saturating_add(Weight::from_parts(906_854 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_443_000 picoseconds.
        Weight::from_parts(1_485_000, 0)
            // Standard Error: 3_775
            .saturating_add(Weight::from_parts(583_395 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_470_000 picoseconds.
        Weight::from_parts(1_077_880, 0)
            // Standard Error: 7_691
            .saturating_add(Weight::from_parts(1_857_785 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_466_000 picoseconds.
        Weight::from_parts(30_798, 0)
            // Standard Error: 13_693
            .saturating_add(Weight::from_parts(1_349_592 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_427_000 picoseconds.
        Weight::from_parts(227_834, 0)
            // Standard Error: 16_293
            .saturating_add(Weight::from_parts(1_922_288 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_428_000 picoseconds.
        Weight::from_parts(98_499, 0)
            // Standard Error: 26_258
            .saturating_add(Weight::from_parts(1_395_678 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_413_000 picoseconds.
        Weight::from_parts(1_443_000, 0)
            // Standard Error: 37_554
            .saturating_add(Weight::from_parts(9_868_869 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_400_000 picoseconds.
        Weight::from_parts(1_466_000, 0)
            // Standard Error: 48_242
            .saturating_add(Weight::from_parts(8_160_634 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_430_000 picoseconds.
        Weight::from_parts(1_298_543, 0)
            // Standard Error: 8_468
            .saturating_add(Weight::from_parts(1_840_960 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_393_000 picoseconds.
        Weight::from_parts(1_484_000, 0)
            // Standard Error: 14_029
            .saturating_add(Weight::from_parts(1_392_316 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_363_000 picoseconds.
        Weight::from_parts(1_424_000, 0)
            // Standard Error: 4_723
            .saturating_add(Weight::from_parts(606_995 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_399_000 picoseconds.
        Weight::from_parts(1_203_524, 0)
            // Standard Error: 1_820
            .saturating_add(Weight::from_parts(321_831 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_436_000 picoseconds.
        Weight::from_parts(1_531_000, 0)
            // Standard Error: 8_312
            .saturating_add(Weight::from_parts(675_730 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_428_000 picoseconds.
        Weight::from_parts(1_154_128, 0)
            // Standard Error: 1_518
            .saturating_add(Weight::from_parts(322_692 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_472_000 picoseconds.
        Weight::from_parts(1_493_000, 0)
            // Standard Error: 5_340
            .saturating_add(Weight::from_parts(626_978 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_326_000 picoseconds.
        Weight::from_parts(90_973, 0)
            // Standard Error: 8_969
            .saturating_add(Weight::from_parts(391_692 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_344_000 picoseconds.
        Weight::from_parts(1_468_000, 0)
            // Standard Error: 5_350
            .saturating_add(Weight::from_parts(536_084 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_420_000 picoseconds.
        Weight::from_parts(1_460_644, 0)
            // Standard Error: 1_434
            .saturating_add(Weight::from_parts(290_148 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_416_000 picoseconds.
        Weight::from_parts(1_491_000, 0)
            // Standard Error: 6_028
            .saturating_add(Weight::from_parts(547_034 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_429_000 picoseconds.
        Weight::from_parts(1_367_762, 0)
            // Standard Error: 1_160
            .saturating_add(Weight::from_parts(292_373 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_350_000 picoseconds.
        Weight::from_parts(1_439_000, 0)
            // Standard Error: 6_149
            .saturating_add(Weight::from_parts(562_034 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_428_000 picoseconds.
        Weight::from_parts(1_057_838, 0)
            // Standard Error: 5_889
            .saturating_add(Weight::from_parts(318_319 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_441_000 picoseconds.
        Weight::from_parts(1_467_000, 0)
            // Standard Error: 3_206
            .saturating_add(Weight::from_parts(525_201 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_433_000 picoseconds.
        Weight::from_parts(1_387_671, 0)
            // Standard Error: 3_423
            .saturating_add(Weight::from_parts(298_752 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_491_000 picoseconds.
        Weight::from_parts(1_510_000, 0)
            // Standard Error: 10_230
            .saturating_add(Weight::from_parts(599_173 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_385_000 picoseconds.
        Weight::from_parts(1_269_317, 0)
            // Standard Error: 1_724
            .saturating_add(Weight::from_parts(296_601 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1134`
        //  Estimated: `6196`
        // Minimum execution time: 102_519_000 picoseconds.
        Weight::from_parts(104_310_000, 6196)
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `825`
        //  Estimated: `4290`
        // Minimum execution time: 57_942_000 picoseconds.
        Weight::from_parts(59_925_000, 4290)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1096`
        //  Estimated: `6196`
        // Minimum execution time: 118_917_000 picoseconds.
        Weight::from_parts(120_895_000, 6196)
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `661`
        //  Estimated: `4126`
        // Minimum execution time: 39_355_000 picoseconds.
        Weight::from_parts(40_457_000, 4126)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `906`
        //  Estimated: `4371`
        // Minimum execution time: 56_206_000 picoseconds.
        Weight::from_parts(57_469_000, 4371)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 6_570_000 picoseconds.
        Weight::from_parts(6_851_000, 3545)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1658`
        //  Estimated: `7598`
        // Minimum execution time: 159_437_000 picoseconds.
        Weight::from_parts(161_646_000, 7598)
            .saturating_add(T::DbWeight::get().reads(18_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1381`
        //  Estimated: `7321`
        // Minimum execution time: 136_692_000 picoseconds.
        Weight::from_parts(139_710_000, 7321)
            .saturating_add(T::DbWeight::get().reads(17_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_291_000 picoseconds.
        Weight::from_parts(87_650_234, 0)
            // Standard Error: 91_523
            .saturating_add(Weight::from_parts(14_982_002, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_503_000 picoseconds.
        Weight::from_parts(88_209_288, 0)
            // Standard Error: 87_571
            .saturating_add(Weight::from_parts(13_378_528, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_909_000 picoseconds.
        Weight::from_parts(86_216_230, 0)
            // Standard Error: 85_622
            .saturating_add(Weight::from_parts(12_578_360, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_765_000 picoseconds.
        Weight::from_parts(86_343_420, 0)
            // Standard Error: 89_518
            .saturating_add(Weight::from_parts(13_002_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_988_000 picoseconds.
        Weight::from_parts(90_457_316, 0)
            // Standard Error: 87_749
            .saturating_add(Weight::from_parts(13_147_006, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_252_000 picoseconds.
        Weight::from_parts(90_246_386, 0)
            // Standard Error: 82_142
            .saturating_add(Weight::from_parts(14_588_786, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_901_000 picoseconds.
        Weight::from_parts(89_573_644, 0)
            // Standard Error: 89_135
            .saturating_add(Weight::from_parts(9_802_148, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_062_000 picoseconds.
        Weight::from_parts(89_271_272, 0)
            // Standard Error: 87_043
            .saturating_add(Weight::from_parts(9_264_888, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_962_000 picoseconds.
        Weight::from_parts(85_543_226, 0)
            // Standard Error: 77_404
            .saturating_add(Weight::from_parts(21_378_752, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_614_000 picoseconds.
        Weight::from_parts(85_875_558, 0)
            // Standard Error: 88_075
            .saturating_add(Weight::from_parts(16_097_686, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_861_000 picoseconds.
        Weight::from_parts(85_586_828, 0)
            // Standard Error: 88_114
            .saturating_add(Weight::from_parts(15_756_598, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_852_000 picoseconds.
        Weight::from_parts(85_243_230, 0)
            // Standard Error: 82_956
            .saturating_add(Weight::from_parts(14_917_930, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_194_000 picoseconds.
        Weight::from_parts(86_011_638, 0)
            // Standard Error: 81_027
            .saturating_add(Weight::from_parts(15_682_964, 0).saturating_mul(r.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_338_000 picoseconds.
        Weight::from_parts(1_410_000, 0)
            // Standard Error: 417
            .saturating_add(Weight::from_parts(235_381, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3577 + c * (1024 ±0)`
        // Minimum execution time: 6_432_000 picoseconds.
        Weight::from_parts(6_478_000, 3577)
            // Standard Error: 18_869
            .saturating_add(Weight::from_parts(2_258_512, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_code_section_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 49_685_000 picoseconds.
        Weight::from_parts(52_084_000, 0)
            // Standard Error: 34_353
            .saturating_add(Weight::from_parts(3_010_583, 0).saturating_mul(c.into()))
    }
    /// The range of component `d` is `[0, 512]`.
    fn instantiate_module_data_section_per_kb(d: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 73_970_000 picoseconds.
        Weight::from_parts(104_612_859, 0)
            // Standard Error: 2_608
            .saturating_add(Weight::from_parts(657_138, 0).saturating_mul(d.into()))
    }
    /// The range of component `g` is `[0, 512]`.
    fn instantiate_module_global_section_per_kb(g: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_226_000 picoseconds.
        Weight::from_parts(51_535_000, 0)
            // Standard Error: 36_110
            .saturating_add(Weight::from_parts(2_977_316, 0).saturating_mul(g.into()))
    }
    /// The range of component `t` is `[0, 9765]`.
    fn instantiate_module_table_section_per_kb(t: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 52_211_000 picoseconds.
        Weight::from_parts(690_190_591, 0)
            // Standard Error: 27_538
            .saturating_add(Weight::from_parts(618_377, 0).saturating_mul(t.into()))
    }
    /// The range of component `e` is `[0, 512]`.
    fn instantiate_module_element_section_per_kb(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 286_978_000 picoseconds.
        Weight::from_parts(469_572_970, 0)
            // Standard Error: 145_949
            .saturating_add(Weight::from_parts(2_872_717, 0).saturating_mul(e.into()))
    }
    /// The range of component `t` is `[0, 512]`.
    fn instantiate_module_type_section_per_kb(t: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_431_000 picoseconds.
        Weight::from_parts(54_732_577, 0)
            // Standard Error: 296
            .saturating_add(Weight::from_parts(1_449, 0).saturating_mul(t.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1335`
        //  Estimated: `8799`
        // Minimum execution time: 181_372_000 picoseconds.
        Weight::from_parts(184_431_000, 8799)
            .saturating_add(RocksDbWeight::get().reads(18_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4`
        //  Estimated: `3469`
        // Minimum execution time: 95_473_000 picoseconds.
        Weight::from_parts(42_881_855, 3469)
            // Standard Error: 41_472
            .saturating_add(Weight::from_parts(93_668_398, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `669`
        //  Estimated: `6196`
        // Minimum execution time: 198_859_000 picoseconds.
        Weight::from_parts(201_140_000, 6196)
            // Standard Error: 146
            .saturating_add(Weight::from_parts(14_602, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(_c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `461`
        //  Estimated: `6196`
        // Minimum execution time: 23_353_715_000 picoseconds.
        Weight::from_parts(23_392_763_000, 6196)
            // Standard Error: 103
            .saturating_add(Weight::from_parts(15_881, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(15_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `531`
        //  Estimated: `6196`
        // Minimum execution time: 127_514_000 picoseconds.
        Weight::from_parts(129_008_000, 6196)
            // Standard Error: 75
            .saturating_add(Weight::from_parts(7_351, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(12_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1334`
        //  Estimated: `8799`
        // Minimum execution time: 211_202_000 picoseconds.
        Weight::from_parts(214_023_000, 8799)
            // Standard Error: 74
            .saturating_add(Weight::from_parts(7_333, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(19_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `d` is `[1, 1024]`.
    fn claim_value_to_inheritor(d: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + d * (207 ±0)`
        //  Estimated: `3593 + d * (2683 ±0)`
        // Minimum execution time: 69_340_000 picoseconds.
        Weight::from_parts(69_994_000, 3593)
            // Standard Error: 43_427
            .saturating_add(Weight::from_parts(54_288_495, 0).saturating_mul(d.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(d.into())))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(d.into())))
            .saturating_add(Weight::from_parts(0, 2683).saturating_mul(d.into()))
    }
    /// The range of component `e` is `[0, 512]`.
    fn reinstrument_per_kb(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `296 + e * (1024 ±0)`
        //  Estimated: `3760 + e * (1024 ±0)`
        // Minimum execution time: 83_947_000 picoseconds.
        Weight::from_parts(142_783_651, 3760)
            // Standard Error: 286_233
            .saturating_add(Weight::from_parts(716_700_987, 0).saturating_mul(e.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(e.into()))
    }
    /// The range of component `a` is `[0, 32767]`.
    fn load_allocations_per_interval(a: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101 + a * (8 ±0)`
        //  Estimated: `3566 + a * (8 ±0)`
        // Minimum execution time: 6_683_000 picoseconds.
        Weight::from_parts(12_329_638, 3566)
            // Standard Error: 35
            .saturating_add(Weight::from_parts(23_381, 0).saturating_mul(a.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 8).saturating_mul(a.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 248_720_000 picoseconds.
        Weight::from_parts(158_184_649, 0)
            // Standard Error: 345_263
            .saturating_add(Weight::from_parts(150_948_032, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 188_000 picoseconds.
        Weight::from_parts(877_325, 0)
            // Standard Error: 15_053
            .saturating_add(Weight::from_parts(58_401_984, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 819]`.
    fn mem_grow_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 58_507_000 picoseconds.
        Weight::from_parts(60_150_200, 0)
            // Standard Error: 53
            .saturating_add(Weight::from_parts(318, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 184_972_000 picoseconds.
        Weight::from_parts(149_411_271, 0)
            // Standard Error: 417_200
            .saturating_add(Weight::from_parts(82_779_052, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 189_134_000 picoseconds.
        Weight::from_parts(150_897_126, 0)
            // Standard Error: 366_968
            .saturating_add(Weight::from_parts(85_329_781, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 700]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 194_360_000 picoseconds.
        Weight::from_parts(325_156_184, 0)
            // Standard Error: 8_846
            .saturating_add(Weight::from_parts(4_271_038, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_897_000 picoseconds.
        Weight::from_parts(80_169_108, 0)
            // Standard Error: 4_341
            .saturating_add(Weight::from_parts(2_599_146, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 148_507_000 picoseconds.
        Weight::from_parts(175_053_177, 0)
            // Standard Error: 4_868
            .saturating_add(Weight::from_parts(2_593_118, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_274_000 picoseconds.
        Weight::from_parts(87_028_441, 0)
            // Standard Error: 299_888
            .saturating_add(Weight::from_parts(104_745_152, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_539_000 picoseconds.
        Weight::from_parts(74_630_889, 0)
            // Standard Error: 290_449
            .saturating_add(Weight::from_parts(100_550_216, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_481_000 picoseconds.
        Weight::from_parts(77_934_790, 0)
            // Standard Error: 291_251
            .saturating_add(Weight::from_parts(99_724_534, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_161_000 picoseconds.
        Weight::from_parts(77_590_084, 0)
            // Standard Error: 293_841
            .saturating_add(Weight::from_parts(100_386_480, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_120_000 picoseconds.
        Weight::from_parts(74_751_770, 0)
            // Standard Error: 244_287
            .saturating_add(Weight::from_parts(106_239_978, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_739_000 picoseconds.
        Weight::from_parts(76_114_724, 0)
            // Standard Error: 275_028
            .saturating_add(Weight::from_parts(102_010_008, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_330_000 picoseconds.
        Weight::from_parts(80_273_897, 0)
            // Standard Error: 274_628
            .saturating_add(Weight::from_parts(100_981_892, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_696_000 picoseconds.
        Weight::from_parts(74_721_481, 0)
            // Standard Error: 276_256
            .saturating_add(Weight::from_parts(101_761_258, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_934_000 picoseconds.
        Weight::from_parts(116_174_579, 0)
            // Standard Error: 308_905
            .saturating_add(Weight::from_parts(153_792_171, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 220_974_000 picoseconds.
        Weight::from_parts(223_800_000, 0)
            // Standard Error: 122_536
            .saturating_add(Weight::from_parts(17_751_192, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_424_000 picoseconds.
        Weight::from_parts(89_251_877, 0)
            // Standard Error: 318_003
            .saturating_add(Weight::from_parts(104_985_740, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_973_000 picoseconds.
        Weight::from_parts(76_158_432, 0)
            // Standard Error: 292_786
            .saturating_add(Weight::from_parts(100_486_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_115_000 picoseconds.
        Weight::from_parts(82_008_237, 0)
            // Standard Error: 239_951
            .saturating_add(Weight::from_parts(108_584_274, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_356_000 picoseconds.
        Weight::from_parts(84_240_473, 0)
            // Standard Error: 329_677
            .saturating_add(Weight::from_parts(179_183_391, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_349_000 picoseconds.
        Weight::from_parts(87_366_000, 0)
            // Standard Error: 3_208_586
            .saturating_add(Weight::from_parts(714_102_046, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_874_000 picoseconds.
        Weight::from_parts(140_024_365, 0)
            // Standard Error: 316_000
            .saturating_add(Weight::from_parts(254_092_096, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 324_036_000 picoseconds.
        Weight::from_parts(327_265_000, 0)
            // Standard Error: 272_185
            .saturating_add(Weight::from_parts(42_992_485, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_565_000 picoseconds.
        Weight::from_parts(141_075_604, 0)
            // Standard Error: 319_613
            .saturating_add(Weight::from_parts(256_068_220, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 328_147_000 picoseconds.
        Weight::from_parts(330_912_000, 0)
            // Standard Error: 273_001
            .saturating_add(Weight::from_parts(42_935_772, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_174_000 picoseconds.
        Weight::from_parts(119_838_350, 0)
            // Standard Error: 269_589
            .saturating_add(Weight::from_parts(261_343_412, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_564_000 picoseconds.
        Weight::from_parts(131_271_138, 0)
            // Standard Error: 295_680
            .saturating_add(Weight::from_parts(249_894_091, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_152_000 picoseconds.
        Weight::from_parts(74_946_014, 0)
            // Standard Error: 227_488
            .saturating_add(Weight::from_parts(112_789_896, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_237_765_000 picoseconds.
        Weight::from_parts(2_337_422_812, 0)
            // Standard Error: 189_764
            .saturating_add(Weight::from_parts(174_594_185, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 323_667_000 picoseconds.
        Weight::from_parts(326_643_000, 0)
            // Standard Error: 269_964
            .saturating_add(Weight::from_parts(42_817_370, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_238_855_000 picoseconds.
        Weight::from_parts(2_340_206_706, 0)
            // Standard Error: 262_295
            .saturating_add(Weight::from_parts(213_115_884, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_231_516_000 picoseconds.
        Weight::from_parts(2_323_071_987, 0)
            // Standard Error: 337_552
            .saturating_add(Weight::from_parts(213_365_769, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 202_941_000 picoseconds.
        Weight::from_parts(229_176_891, 0)
            // Standard Error: 260_525
            .saturating_add(Weight::from_parts(307_715_475, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 489_624_000 picoseconds.
        Weight::from_parts(496_052_000, 0)
            // Standard Error: 259_838
            .saturating_add(Weight::from_parts(43_683_062, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_345_217_000 picoseconds.
        Weight::from_parts(2_419_140_925, 0)
            // Standard Error: 416_181
            .saturating_add(Weight::from_parts(266_918_691, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_022_000 picoseconds.
        Weight::from_parts(15_514_676, 0)
            // Standard Error: 3_987
            .saturating_add(Weight::from_parts(789_287, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_887_000 picoseconds.
        Weight::from_parts(15_971_547, 0)
            // Standard Error: 3_989
            .saturating_add(Weight::from_parts(789_806, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_103_000 picoseconds.
        Weight::from_parts(118_028_684, 0)
            // Standard Error: 304_682
            .saturating_add(Weight::from_parts(161_516_989, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_943_000 picoseconds.
        Weight::from_parts(110_803_329, 0)
            // Standard Error: 1_044
            .saturating_add(Weight::from_parts(730_935, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_773_000 picoseconds.
        Weight::from_parts(14_815_030, 0)
            // Standard Error: 4_112
            .saturating_add(Weight::from_parts(779_267, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_204_000 picoseconds.
        Weight::from_parts(14_293_627, 0)
            // Standard Error: 4_121
            .saturating_add(Weight::from_parts(792_426, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_365_000 picoseconds.
        Weight::from_parts(76_418_882, 0)
            // Standard Error: 258_531
            .saturating_add(Weight::from_parts(102_869_166, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_828_000 picoseconds.
        Weight::from_parts(75_032_708, 0)
            // Standard Error: 256_669
            .saturating_add(Weight::from_parts(100_722_602, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_820_000 picoseconds.
        Weight::from_parts(76_190_825, 0)
            // Standard Error: 251_207
            .saturating_add(Weight::from_parts(102_898_537, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_960_000 picoseconds.
        Weight::from_parts(108_275_204, 0)
            // Standard Error: 321_679
            .saturating_add(Weight::from_parts(114_024_090, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_326_000 picoseconds.
        Weight::from_parts(105_719_615, 0)
            // Standard Error: 286
            .saturating_add(Weight::from_parts(132_086, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_227_602_000 picoseconds.
        Weight::from_parts(2_348_618_320, 0)
            // Standard Error: 311_439
            .saturating_add(Weight::from_parts(143_082_383, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_411_572_000 picoseconds.
        Weight::from_parts(2_101_053_209, 0)
            // Standard Error: 12_901
            .saturating_add(Weight::from_parts(13_120_372, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_613_000 picoseconds.
        Weight::from_parts(101_888_937, 0)
            // Standard Error: 315_874
            .saturating_add(Weight::from_parts(114_314_270, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 148_191_000 picoseconds.
        Weight::from_parts(149_766_000, 0)
            // Standard Error: 273_722
            .saturating_add(Weight::from_parts(40_140_709, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_459_000 picoseconds.
        Weight::from_parts(81_169_730, 0)
            // Standard Error: 281_221
            .saturating_add(Weight::from_parts(99_900_132, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 151_702_000 picoseconds.
        Weight::from_parts(156_110_000, 0)
            // Standard Error: 1_134_888
            .saturating_add(Weight::from_parts(264_623_877, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_839_000 picoseconds.
        Weight::from_parts(121_601_365, 0)
            // Standard Error: 271_985
            .saturating_add(Weight::from_parts(339_578_496, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 66_241_123_000 picoseconds.
        Weight::from_parts(66_282_748_000, 0)
            // Standard Error: 454_564
            .saturating_add(Weight::from_parts(10_355_288, 0).saturating_mul(p.into()))
            // Standard Error: 454_542
            .saturating_add(Weight::from_parts(134_198_631, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_613_000 picoseconds.
        Weight::from_parts(128_823_646, 0)
            // Standard Error: 265_308
            .saturating_add(Weight::from_parts(331_883_574, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 66_178_576_000 picoseconds.
        Weight::from_parts(66_239_115_000, 0)
            // Standard Error: 471_573
            .saturating_add(Weight::from_parts(10_407_432, 0).saturating_mul(p.into()))
            // Standard Error: 471_550
            .saturating_add(Weight::from_parts(134_205_518, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `1098 + p * (9900 ±0)`
        // Minimum execution time: 84_619_000 picoseconds.
        Weight::from_parts(104_785_698, 1098)
            // Standard Error: 8_830
            .saturating_add(Weight::from_parts(16_567_789, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `1098 + p * (9900 ±0)`
        // Minimum execution time: 83_764_000 picoseconds.
        Weight::from_parts(86_034_000, 1098)
            // Standard Error: 27_114
            .saturating_add(Weight::from_parts(43_741_624, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `5069898`
        // Minimum execution time: 8_567_811_000 picoseconds.
        Weight::from_parts(8_480_062_936, 5069898)
            // Standard Error: 24_970
            .saturating_add(Weight::from_parts(42_581_447, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1787 + p * (65580 ±0)`
        //  Estimated: `1913 + p * (75482 ±0)`
        // Minimum execution time: 84_113_000 picoseconds.
        Weight::from_parts(86_823_000, 1913)
            // Standard Error: 46_791
            .saturating_add(Weight::from_parts(59_568_368, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `1098 + p * (9900 ±0)`
        // Minimum execution time: 91_463_000 picoseconds.
        Weight::from_parts(27_863_637, 1098)
            // Standard Error: 250_740
            .saturating_add(Weight::from_parts(54_307_470, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `1463 + p * (9883 ±2)`
        // Minimum execution time: 117_602_000 picoseconds.
        Weight::from_parts(11_153_822, 1463)
            // Standard Error: 369_262
            .saturating_add(Weight::from_parts(64_056_886, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `108`
        //  Estimated: `317898`
        // Minimum execution time: 654_946_000 picoseconds.
        Weight::from_parts(556_791_511, 317898)
            // Standard Error: 361_600
            .saturating_add(Weight::from_parts(62_761_771, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_330_713_000 picoseconds.
        Weight::from_parts(5_339_389_767, 0)
            // Standard Error: 40_001
            .saturating_add(Weight::from_parts(2_677_002 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_321_425_000 picoseconds.
        Weight::from_parts(5_395_279_579, 0)
            // Standard Error: 38_651
            .saturating_add(Weight::from_parts(2_445_964 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_726_513_000 picoseconds.
        Weight::from_parts(11_304_725_235, 0)
            // Standard Error: 57_364
            .saturating_add(Weight::from_parts(5_019_216 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_696_582_000 picoseconds.
        Weight::from_parts(11_292_661_340, 0)
            // Standard Error: 58_886
            .saturating_add(Weight::from_parts(4_919_282 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_407_000 picoseconds.
        Weight::from_parts(1_484_000, 0)
            // Standard Error: 10_604
            .saturating_add(Weight::from_parts(3_412_855 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_477_000 picoseconds.
        Weight::from_parts(1_510_000, 0)
            // Standard Error: 4_521
            .saturating_add(Weight::from_parts(2_451_881 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_379_000 picoseconds.
        Weight::from_parts(2_135_861, 0)
            // Standard Error: 525
            .saturating_add(Weight::from_parts(1_747_335 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_427_000 picoseconds.
        Weight::from_parts(1_471_000, 0)
            // Standard Error: 8_507
            .saturating_add(Weight::from_parts(2_954_251 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_402_000 picoseconds.
        Weight::from_parts(1_458_000, 0)
            // Standard Error: 31_782
            .saturating_add(Weight::from_parts(5_223_872 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_898_000 picoseconds.
        Weight::from_parts(6_775_053, 0)
            // Standard Error: 415
            .saturating_add(Weight::from_parts(70_860 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_376_000 picoseconds.
        Weight::from_parts(1_769_965, 0)
            // Standard Error: 6_362
            .saturating_add(Weight::from_parts(2_827_776 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts((2_827_776 -
            2_646_444) * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_351_000 picoseconds.
        Weight::from_parts(2_072_355, 0)
            // Standard Error: 13_555
            .saturating_add(Weight::from_parts(2_646_444 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_576_000 picoseconds.
        Weight::from_parts(1_616_000, 0)
            // Standard Error: 21_789
            .saturating_add(Weight::from_parts(11_509_432 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_795_000 picoseconds.
        Weight::from_parts(11_882_000, 0)
            // Standard Error: 11_019
            .saturating_add(Weight::from_parts(683_346 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_256_000 picoseconds.
        Weight::from_parts(4_561_483, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_130_000 picoseconds.
        Weight::from_parts(10_053_881, 0)
            // Standard Error: 2_672
            .saturating_add(Weight::from_parts(304_813 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_122_000 picoseconds.
        Weight::from_parts(10_299_372, 0)
            // Standard Error: 2_624
            .saturating_add(Weight::from_parts(745_669 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_048_000 picoseconds.
        Weight::from_parts(10_443_092, 0)
            // Standard Error: 3_078
            .saturating_add(Weight::from_parts(743_473 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_595_000 picoseconds.
        Weight::from_parts(1_120_284, 0)
            // Standard Error: 1_699
            .saturating_add(Weight::from_parts(332_405 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_511_000 picoseconds.
        Weight::from_parts(1_624_000, 0)
            // Standard Error: 3_192
            .saturating_add(Weight::from_parts(594_427 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_599_000 picoseconds.
        Weight::from_parts(222_642, 0)
            // Standard Error: 7_858
            .saturating_add(Weight::from_parts(6_679_357 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_417_000 picoseconds.
        Weight::from_parts(761_126, 0)
            // Standard Error: 6_063
            .saturating_add(Weight::from_parts(338_916 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_317_000 picoseconds.
        Weight::from_parts(1_704_086, 0)
            // Standard Error: 1_546
            .saturating_add(Weight::from_parts(208_323 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_359_000 picoseconds.
        Weight::from_parts(1_399_000, 0)
            // Standard Error: 5_044
            .saturating_add(Weight::from_parts(369_512 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_450_000 picoseconds.
        Weight::from_parts(1_783_185, 0)
            // Standard Error: 479
            .saturating_add(Weight::from_parts(200_764 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_432_000 picoseconds.
        Weight::from_parts(1_135_166, 0)
            // Standard Error: 5_901
            .saturating_add(Weight::from_parts(316_239 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_413_000 picoseconds.
        Weight::from_parts(1_164_720, 0)
            // Standard Error: 5_939
            .saturating_add(Weight::from_parts(260_960 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_429_000 picoseconds.
        Weight::from_parts(1_505_000, 0)
            // Standard Error: 7_437
            .saturating_add(Weight::from_parts(905_532 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_409_000 picoseconds.
        Weight::from_parts(1_452_000, 0)
            // Standard Error: 6_373
            .saturating_add(Weight::from_parts(558_956 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_409_000 picoseconds.
        Weight::from_parts(1_153_345, 0)
            // Standard Error: 4_952
            .saturating_add(Weight::from_parts(230_958 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_440_000 picoseconds.
        Weight::from_parts(1_588_847, 0)
            // Standard Error: 721
            .saturating_add(Weight::from_parts(198_800 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_398_000 picoseconds.
        Weight::from_parts(1_406_761, 0)
            // Standard Error: 947
            .saturating_add(Weight::from_parts(265_846 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_416_000 picoseconds.
        Weight::from_parts(999_020, 0)
            // Standard Error: 6_451
            .saturating_add(Weight::from_parts(298_427 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_406_000 picoseconds.
        Weight::from_parts(1_420_528, 0)
            // Standard Error: 3_104
            .saturating_add(Weight::from_parts(251_365 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_402_000 picoseconds.
        Weight::from_parts(1_538_378, 0)
            // Standard Error: 2_545
            .saturating_add(Weight::from_parts(190_228 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_421_000 picoseconds.
        Weight::from_parts(1_768_472, 0)
            // Standard Error: 1_597
            .saturating_add(Weight::from_parts(109_481 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_366_000 picoseconds.
        Weight::from_parts(1_902_383, 0)
            // Standard Error: 523
            .saturating_add(Weight::from_parts(103_271 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_394_000 picoseconds.
        Weight::from_parts(1_485_000, 0)
            // Standard Error: 12_761
            .saturating_add(Weight::from_parts(1_006_063 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_369_000 picoseconds.
        Weight::from_parts(1_462_000, 0)
            // Standard Error: 10_603
            .saturating_add(Weight::from_parts(622_630 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_448_000 picoseconds.
        Weight::from_parts(1_480_000, 0)
            // Standard Error: 7_650
            .saturating_add(Weight::from_parts(923_228 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_362_000 picoseconds.
        Weight::from_parts(1_416_000, 0)
            // Standard Error: 8_020
            .saturating_add(Weight::from_parts(576_123 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_410_000 picoseconds.
        Weight::from_parts(1_469_000, 0)
            // Standard Error: 8_061
            .saturating_add(Weight::from_parts(953_094 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_391_000 picoseconds.
        Weight::from_parts(1_455_000, 0)
            // Standard Error: 3_172
            .saturating_add(Weight::from_parts(539_209 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_382_000 picoseconds.
        Weight::from_parts(1_523_000, 0)
            // Standard Error: 8_948
            .saturating_add(Weight::from_parts(963_929 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_402_000 picoseconds.
        Weight::from_parts(1_448_000, 0)
            // Standard Error: 2_543
            .saturating_add(Weight::from_parts(531_454 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_418_000 picoseconds.
        Weight::from_parts(1_447_000, 0)
            // Standard Error: 8_288
            .saturating_add(Weight::from_parts(938_451 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_465_000 picoseconds.
        Weight::from_parts(1_538_000, 0)
            // Standard Error: 2_749
            .saturating_add(Weight::from_parts(531_029 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_386_000 picoseconds.
        Weight::from_parts(1_480_000, 0)
            // Standard Error: 8_415
            .saturating_add(Weight::from_parts(937_820 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_427_000 picoseconds.
        Weight::from_parts(1_507_000, 0)
            // Standard Error: 2_796
            .saturating_add(Weight::from_parts(536_033 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_411_000 picoseconds.
        Weight::from_parts(1_531_000, 0)
            // Standard Error: 16_484
            .saturating_add(Weight::from_parts(1_107_812 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_395_000 picoseconds.
        Weight::from_parts(122_194, 0)
            // Standard Error: 10_910
            .saturating_add(Weight::from_parts(592_529 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_381_000 picoseconds.
        Weight::from_parts(1_466_000, 0)
            // Standard Error: 7_570
            .saturating_add(Weight::from_parts(922_930 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_392_000 picoseconds.
        Weight::from_parts(1_454_000, 0)
            // Standard Error: 10_165
            .saturating_add(Weight::from_parts(637_576 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_418_000 picoseconds.
        Weight::from_parts(1_505_000, 0)
            // Standard Error: 8_580
            .saturating_add(Weight::from_parts(955_296 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_412_000 picoseconds.
        Weight::from_parts(1_512_000, 0)
            // Standard Error: 2_959
            .saturating_add(Weight::from_parts(536_919 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_463_000 picoseconds.
        Weight::from_parts(1_538_000, 0)
            // Standard Error: 13_102
            .saturating_add(Weight::from_parts(1_007_273 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_354_000 picoseconds.
        Weight::from_parts(1_481_000, 0)
            // Standard Error: 3_485
            .saturating_add(Weight::from_parts(546_454 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_388_000 picoseconds.
        Weight::from_parts(1_445_000, 0)
            // Standard Error: 5_714
            .saturating_add(Weight::from_parts(614_978 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_446_000 picoseconds.
        Weight::from_parts(125_372, 0)
            // Standard Error: 9_930
            .saturating_add(Weight::from_parts(387_703 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_390_000 picoseconds.
        Weight::from_parts(1_484_000, 0)
            // Standard Error: 3_613
            .saturating_add(Weight::from_parts(598_589 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_371_000 picoseconds.
        Weight::from_parts(1_171_333, 0)
            // Standard Error: 1_635
            .saturating_add(Weight::from_parts(321_071 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_348_000 picoseconds.
        Weight::from_parts(1_439_000, 0)
            // Standard Error: 7_726
            .saturating_add(Weight::from_parts(906_854 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_443_000 picoseconds.
        Weight::from_parts(1_485_000, 0)
            // Standard Error: 3_775
            .saturating_add(Weight::from_parts(583_395 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_470_000 picoseconds.
        Weight::from_parts(1_077_880, 0)
            // Standard Error: 7_691
            .saturating_add(Weight::from_parts(1_857_785 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_466_000 picoseconds.
        Weight::from_parts(30_798, 0)
            // Standard Error: 13_693
            .saturating_add(Weight::from_parts(1_349_592 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_427_000 picoseconds.
        Weight::from_parts(227_834, 0)
            // Standard Error: 16_293
            .saturating_add(Weight::from_parts(1_922_288 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_428_000 picoseconds.
        Weight::from_parts(98_499, 0)
            // Standard Error: 26_258
            .saturating_add(Weight::from_parts(1_395_678 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_413_000 picoseconds.
        Weight::from_parts(1_443_000, 0)
            // Standard Error: 37_554
            .saturating_add(Weight::from_parts(9_868_869 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_400_000 picoseconds.
        Weight::from_parts(1_466_000, 0)
            // Standard Error: 48_242
            .saturating_add(Weight::from_parts(8_160_634 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_430_000 picoseconds.
        Weight::from_parts(1_298_543, 0)
            // Standard Error: 8_468
            .saturating_add(Weight::from_parts(1_840_960 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_393_000 picoseconds.
        Weight::from_parts(1_484_000, 0)
            // Standard Error: 14_029
            .saturating_add(Weight::from_parts(1_392_316 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_363_000 picoseconds.
        Weight::from_parts(1_424_000, 0)
            // Standard Error: 4_723
            .saturating_add(Weight::from_parts(606_995 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_399_000 picoseconds.
        Weight::from_parts(1_203_524, 0)
            // Standard Error: 1_820
            .saturating_add(Weight::from_parts(321_831 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_436_000 picoseconds.
        Weight::from_parts(1_531_000, 0)
            // Standard Error: 8_312
            .saturating_add(Weight::from_parts(675_730 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_428_000 picoseconds.
        Weight::from_parts(1_154_128, 0)
            // Standard Error: 1_518
            .saturating_add(Weight::from_parts(322_692 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_472_000 picoseconds.
        Weight::from_parts(1_493_000, 0)
            // Standard Error: 5_340
            .saturating_add(Weight::from_parts(626_978 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_326_000 picoseconds.
        Weight::from_parts(90_973, 0)
            // Standard Error: 8_969
            .saturating_add(Weight::from_parts(391_692 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_344_000 picoseconds.
        Weight::from_parts(1_468_000, 0)
            // Standard Error: 5_350
            .saturating_add(Weight::from_parts(536_084 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_420_000 picoseconds.
        Weight::from_parts(1_460_644, 0)
            // Standard Error: 1_434
            .saturating_add(Weight::from_parts(290_148 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_416_000 picoseconds.
        Weight::from_parts(1_491_000, 0)
            // Standard Error: 6_028
            .saturating_add(Weight::from_parts(547_034 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_429_000 picoseconds.
        Weight::from_parts(1_367_762, 0)
            // Standard Error: 1_160
            .saturating_add(Weight::from_parts(292_373 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_350_000 picoseconds.
        Weight::from_parts(1_439_000, 0)
            // Standard Error: 6_149
            .saturating_add(Weight::from_parts(562_034 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_428_000 picoseconds.
        Weight::from_parts(1_057_838, 0)
            // Standard Error: 5_889
            .saturating_add(Weight::from_parts(318_319 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_441_000 picoseconds.
        Weight::from_parts(1_467_000, 0)
            // Standard Error: 3_206
            .saturating_add(Weight::from_parts(525_201 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_433_000 picoseconds.
        Weight::from_parts(1_387_671, 0)
            // Standard Error: 3_423
            .saturating_add(Weight::from_parts(298_752 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_491_000 picoseconds.
        Weight::from_parts(1_510_000, 0)
            // Standard Error: 10_230
            .saturating_add(Weight::from_parts(599_173 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_385_000 picoseconds.
        Weight::from_parts(1_269_317, 0)
            // Standard Error: 1_724
            .saturating_add(Weight::from_parts(296_601 * 110 / 100 /* Adjust slope weight by 10 percent (Patched by script) */, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1134`
        //  Estimated: `6196`
        // Minimum execution time: 102_519_000 picoseconds.
        Weight::from_parts(104_310_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `825`
        //  Estimated: `4290`
        // Minimum execution time: 57_942_000 picoseconds.
        Weight::from_parts(59_925_000, 4290)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1096`
        //  Estimated: `6196`
        // Minimum execution time: 118_917_000 picoseconds.
        Weight::from_parts(120_895_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `661`
        //  Estimated: `4126`
        // Minimum execution time: 39_355_000 picoseconds.
        Weight::from_parts(40_457_000, 4126)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `906`
        //  Estimated: `4371`
        // Minimum execution time: 56_206_000 picoseconds.
        Weight::from_parts(57_469_000, 4371)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 6_570_000 picoseconds.
        Weight::from_parts(6_851_000, 3545)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1658`
        //  Estimated: `7598`
        // Minimum execution time: 159_437_000 picoseconds.
        Weight::from_parts(161_646_000, 7598)
            .saturating_add(RocksDbWeight::get().reads(18_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1381`
        //  Estimated: `7321`
        // Minimum execution time: 136_692_000 picoseconds.
        Weight::from_parts(139_710_000, 7321)
            .saturating_add(RocksDbWeight::get().reads(17_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
}
