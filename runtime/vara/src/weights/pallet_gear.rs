// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-03, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_error(r: u32, ) -> Weight;
    fn gr_status_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 961_000 picoseconds.
        Weight::from_parts(1_023_000, 0)
            // Standard Error: 918
            .saturating_add(Weight::from_parts(217_763, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3577 + c * (1024 ±0)`
        // Minimum execution time: 3_216_000 picoseconds.
        Weight::from_parts(3_309_000, 3577)
            // Standard Error: 818
            .saturating_add(Weight::from_parts(735_947, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_180_000 picoseconds.
        Weight::from_parts(86_253_996, 0)
            // Standard Error: 6_436
            .saturating_add(Weight::from_parts(2_192_523, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `791`
        //  Estimated: `22733`
        // Minimum execution time: 57_583_000 picoseconds.
        Weight::from_parts(59_917_000, 22733)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `679`
        //  Estimated: `15019`
        // Minimum execution time: 60_915 nanoseconds.
        Weight::from_parts(71_195_000, 15019)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `5270`
        // Minimum execution time: 74_940_000 picoseconds.
        Weight::from_parts(81_907_597, 5270)
            // Standard Error: 37_897
            .saturating_add(Weight::from_parts(54_593_958, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `752`
        //  Estimated: `38041`
        // Minimum execution time: 63_896_000 picoseconds.
        Weight::from_parts(93_063_704, 38041)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_359, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `235`
        //  Estimated: `33858`
        // Minimum execution time: 10_027_368_000 picoseconds.
        Weight::from_parts(361_854_159, 33858)
            // Standard Error: 155_642
            .saturating_add(Weight::from_parts(53_162_779, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_316, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `311`
        //  Estimated: `23291`
        // Minimum execution time: 54_933_000 picoseconds.
        Weight::from_parts(45_193_844, 23291)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_196, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `954`
        //  Estimated: `41065`
        // Minimum execution time: 80_508_000 picoseconds.
        Weight::from_parts(73_414_404, 41065)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_227, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `995`
        //  Estimated: `82655`
        // Minimum execution time: 321_827_000 picoseconds.
        Weight::from_parts(335_664_416, 82655)
            // Standard Error: 1_326
            .saturating_add(Weight::from_parts(7_106, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(29_u64))
            .saturating_add(T::DbWeight::get().writes(23_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `995`
        //  Estimated: `82536`
        // Minimum execution time: 337_428_000 picoseconds.
        Weight::from_parts(352_266_852, 82536)
            .saturating_add(T::DbWeight::get().reads(29_u64))
            .saturating_add(T::DbWeight::get().writes(23_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 56_148_000 picoseconds.
        Weight::from_parts(56_453_000, 3899)
            // Standard Error: 23_341
            .saturating_add(Weight::from_parts(52_852_757, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_995_000 picoseconds.
        Weight::from_parts(116_749_019, 0)
            // Standard Error: 462_464
            .saturating_add(Weight::from_parts(160_737_989, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 246_044_000 picoseconds.
        Weight::from_parts(280_113_340, 0)
            // Standard Error: 372_314
            .saturating_add(Weight::from_parts(150_482_259, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_750_000 picoseconds.
        Weight::from_parts(91_504_643, 0)
            // Standard Error: 4_325
            .saturating_add(Weight::from_parts(4_031_016, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 141_279_000 picoseconds.
        Weight::from_parts(188_704_138, 0)
            // Standard Error: 33_077
            .saturating_add(Weight::from_parts(4_172_120, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_238_000 picoseconds.
        Weight::from_parts(126_548_129, 0)
            // Standard Error: 398_461
            .saturating_add(Weight::from_parts(214_070_697, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_814_000 picoseconds.
        Weight::from_parts(105_645_352, 0)
            // Standard Error: 269_227
            .saturating_add(Weight::from_parts(209_173_937, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_311_000 picoseconds.
        Weight::from_parts(100_643_661, 0)
            // Standard Error: 291_755
            .saturating_add(Weight::from_parts(210_028_622, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 120_198 nanoseconds.
        Weight::from_parts(130_172_800, 0)
            // Standard Error: 2_420_191
            .saturating_add(Weight::from_parts(9_196_990, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_488_000 picoseconds.
        Weight::from_parts(91_436_593, 0)
            // Standard Error: 355_961
            .saturating_add(Weight::from_parts(216_404_444, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_335_000 picoseconds.
        Weight::from_parts(87_778_189, 0)
            // Standard Error: 337_983
            .saturating_add(Weight::from_parts(218_075_827, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_748_000 picoseconds.
        Weight::from_parts(90_285_461, 0)
            // Standard Error: 248_183
            .saturating_add(Weight::from_parts(214_852_752, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_156_000 picoseconds.
        Weight::from_parts(87_719_339, 0)
            // Standard Error: 323_733
            .saturating_add(Weight::from_parts(215_863_644, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_961_000 picoseconds.
        Weight::from_parts(98_506_332, 0)
            // Standard Error: 281_545
            .saturating_add(Weight::from_parts(211_195_696, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_742_000 picoseconds.
        Weight::from_parts(83_903_981, 0)
            // Standard Error: 357_532
            .saturating_add(Weight::from_parts(218_050_731, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 560_566_000 picoseconds.
        Weight::from_parts(613_416_071, 0)
            // Standard Error: 488_571
            .saturating_add(Weight::from_parts(295_080_340, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 878_096_000 picoseconds.
        Weight::from_parts(887_221_000, 0)
            // Standard Error: 55_705
            .saturating_add(Weight::from_parts(13_308_062, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_478_000 picoseconds.
        Weight::from_parts(89_557_800, 0)
            // Standard Error: 281_118
            .saturating_add(Weight::from_parts(213_568_633, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_708_000 picoseconds.
        Weight::from_parts(92_909_601, 0)
            // Standard Error: 283_271
            .saturating_add(Weight::from_parts(212_404_224, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_109_000 picoseconds.
        Weight::from_parts(108_066_196, 0)
            // Standard Error: 372_136
            .saturating_add(Weight::from_parts(281_502_558, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_860_000 picoseconds.
        Weight::from_parts(134_693_785, 0)
            // Standard Error: 467_460
            .saturating_add(Weight::from_parts(416_934_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 500_282_000 picoseconds.
        Weight::from_parts(504_600_000, 0)
            // Standard Error: 61_599
            .saturating_add(Weight::from_parts(24_653_253, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_958_000 picoseconds.
        Weight::from_parts(157_729_239, 0)
            // Standard Error: 529_504
            .saturating_add(Weight::from_parts(413_536_117, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 511_325_000 picoseconds.
        Weight::from_parts(513_346_000, 0)
            // Standard Error: 59_327
            .saturating_add(Weight::from_parts(24_806_476, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 558_912_000 picoseconds.
        Weight::from_parts(654_915_206, 0)
            // Standard Error: 508_952
            .saturating_add(Weight::from_parts(428_652_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 559_914_000 picoseconds.
        Weight::from_parts(645_582_480, 0)
            // Standard Error: 479_246
            .saturating_add(Weight::from_parts(425_951_963, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_265_000 picoseconds.
        Weight::from_parts(91_617_674, 0)
            // Standard Error: 294_625
            .saturating_add(Weight::from_parts(221_263_316, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_270_564_000 picoseconds.
        Weight::from_parts(4_522_156_449, 0)
            // Standard Error: 573_020
            .saturating_add(Weight::from_parts(308_804_671, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 617_546_000 picoseconds.
        Weight::from_parts(631_784_000, 0)
            // Standard Error: 61_231
            .saturating_add(Weight::from_parts(34_368_141, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_318_681_000 picoseconds.
        Weight::from_parts(4_525_679_151, 0)
            // Standard Error: 570_582
            .saturating_add(Weight::from_parts(360_527_912, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_299_213_000 picoseconds.
        Weight::from_parts(4_533_411_352, 0)
            // Standard Error: 564_352
            .saturating_add(Weight::from_parts(370_641_251, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 226_687_000 picoseconds.
        Weight::from_parts(305_424_081, 0)
            // Standard Error: 436_936
            .saturating_add(Weight::from_parts(433_265_446, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 683_630_000 picoseconds.
        Weight::from_parts(693_424_000, 0)
            // Standard Error: 66_381
            .saturating_add(Weight::from_parts(24_881_310, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_460_735_000 picoseconds.
        Weight::from_parts(4_618_154_970, 0)
            // Standard Error: 605_004
            .saturating_add(Weight::from_parts(386_156_083, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_632_000 picoseconds.
        Weight::from_parts(84_737_297, 0)
            // Standard Error: 263_113
            .saturating_add(Weight::from_parts(21_592_402, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_906_000 picoseconds.
        Weight::from_parts(94_875_815, 0)
            // Standard Error: 971
            .saturating_add(Weight::from_parts(483_751, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_726_000 picoseconds.
        Weight::from_parts(87_712_642, 0)
            // Standard Error: 365_908
            .saturating_add(Weight::from_parts(27_267_257, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_725_000 picoseconds.
        Weight::from_parts(91_549_632, 0)
            // Standard Error: 1_167
            .saturating_add(Weight::from_parts(489_197, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_988_000 picoseconds.
        Weight::from_parts(84_581_793, 0)
            // Standard Error: 253_746
            .saturating_add(Weight::from_parts(24_102_506, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_021_000 picoseconds.
        Weight::from_parts(87_356_693, 0)
            // Standard Error: 284_219
            .saturating_add(Weight::from_parts(23_702_506, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_563_000 picoseconds.
        Weight::from_parts(122_588_537, 0)
            // Standard Error: 395_042
            .saturating_add(Weight::from_parts(298_122_325, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_982_000 picoseconds.
        Weight::from_parts(103_422_000, 0)
            // Standard Error: 2_397
            .saturating_add(Weight::from_parts(671_126, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 558_225_000 picoseconds.
        Weight::from_parts(573_721_697, 0)
            // Standard Error: 1_638_864
            .saturating_add(Weight::from_parts(36_999_802, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 558_586_000 picoseconds.
        Weight::from_parts(576_558_310, 0)
            // Standard Error: 1_446_853
            .saturating_add(Weight::from_parts(14_845_389, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_788_000 picoseconds.
        Weight::from_parts(99_301_748, 0)
            // Standard Error: 298_002
            .saturating_add(Weight::from_parts(12_751_251, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_771_000 picoseconds.
        Weight::from_parts(97_347_869, 0)
            // Standard Error: 942
            .saturating_add(Weight::from_parts(486_819, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_688_000 picoseconds.
        Weight::from_parts(97_221_053, 0)
            // Standard Error: 360_529
            .saturating_add(Weight::from_parts(17_032_946, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_278_000 picoseconds.
        Weight::from_parts(92_725_782, 0)
            // Standard Error: 1_151
            .saturating_add(Weight::from_parts(486_729, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_062_000 picoseconds.
        Weight::from_parts(106_465_230, 0)
            // Standard Error: 331_443
            .saturating_add(Weight::from_parts(212_774_524, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_550_000 picoseconds.
        Weight::from_parts(99_402_512, 0)
            // Standard Error: 292_944
            .saturating_add(Weight::from_parts(214_111_089, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 571_684_000 picoseconds.
        Weight::from_parts(654_973_743, 0)
            // Standard Error: 476_883
            .saturating_add(Weight::from_parts(222_318_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 587_260_000 picoseconds.
        Weight::from_parts(604_145_388, 0)
            // Standard Error: 1_063
            .saturating_add(Weight::from_parts(109_521, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_807_754_000 picoseconds.
        Weight::from_parts(5_043_216_004, 0)
            // Standard Error: 507_445
            .saturating_add(Weight::from_parts(238_180_007, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_208_563_000 picoseconds.
        Weight::from_parts(4_920_165_485, 0)
            // Standard Error: 14_111
            .saturating_add(Weight::from_parts(12_298_071, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_706_000 picoseconds.
        Weight::from_parts(116_039_867, 0)
            // Standard Error: 309_628
            .saturating_add(Weight::from_parts(221_820_130, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 297_355_000 picoseconds.
        Weight::from_parts(304_294_000, 0)
            // Standard Error: 52_556
            .saturating_add(Weight::from_parts(30_640_741, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_390_000 picoseconds.
        Weight::from_parts(136_472_332, 0)
            // Standard Error: 446_093
            .saturating_add(Weight::from_parts(278_567_834, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_877_000 picoseconds.
        Weight::from_parts(99_383_043, 0)
            // Standard Error: 324_111
            .saturating_add(Weight::from_parts(210_187_195, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_680_000 picoseconds.
        Weight::from_parts(85_291_763, 0)
            // Standard Error: 290_608
            .saturating_add(Weight::from_parts(28_222_036, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_340_000 picoseconds.
        Weight::from_parts(84_969_367, 0)
            // Standard Error: 256_496
            .saturating_add(Weight::from_parts(15_215_232, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_972_000 picoseconds.
        Weight::from_parts(86_031_973, 0)
            // Standard Error: 352_625
            .saturating_add(Weight::from_parts(17_276_226, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_308_000 picoseconds.
        Weight::from_parts(87_107_326, 0)
            // Standard Error: 287_749
            .saturating_add(Weight::from_parts(17_223_373, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_980_000 picoseconds.
        Weight::from_parts(88_643_522, 0)
            // Standard Error: 284_883
            .saturating_add(Weight::from_parts(12_710_577, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 135_848_000 picoseconds.
        Weight::from_parts(227_613_909, 0)
            // Standard Error: 428_049
            .saturating_add(Weight::from_parts(303_309_382, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_995_000 picoseconds.
        Weight::from_parts(159_470_644, 0)
            // Standard Error: 483_324
            .saturating_add(Weight::from_parts(501_689_316, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 53_574_942_000 picoseconds.
        Weight::from_parts(53_772_266_000, 0)
            // Standard Error: 324_668
            .saturating_add(Weight::from_parts(8_365_699, 0).saturating_mul(p.into()))
            // Standard Error: 324_652
            .saturating_add(Weight::from_parts(157_111_940, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_142_000 picoseconds.
        Weight::from_parts(143_035_266, 0)
            // Standard Error: 468_164
            .saturating_add(Weight::from_parts(507_773_974, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_304_588_000 picoseconds.
        Weight::from_parts(51_361_161_000, 0)
            // Standard Error: 308_275
            .saturating_add(Weight::from_parts(9_048_412, 0).saturating_mul(p.into()))
            // Standard Error: 308_259
            .saturating_add(Weight::from_parts(157_883_861, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 82_597_000 picoseconds.
        Weight::from_parts(115_612_231, 1131)
            // Standard Error: 6_805
            .saturating_add(Weight::from_parts(12_092_685, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 81_376_000 picoseconds.
        Weight::from_parts(83_645_000, 1131)
            // Standard Error: 22_330
            .saturating_add(Weight::from_parts(38_251_978, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_242_464_000 picoseconds.
        Weight::from_parts(6_100_710_067, 5069931)
            // Standard Error: 47_813
            .saturating_add(Weight::from_parts(38_107_585, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 81_600_000 picoseconds.
        Weight::from_parts(83_416_000, 1939)
            // Standard Error: 38_703
            .saturating_add(Weight::from_parts(46_042_384, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 99_364_000 picoseconds.
        Weight::from_parts(91_094_107, 1496)
            // Standard Error: 81_610
            .saturating_add(Weight::from_parts(40_251_563, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 600_156_000 picoseconds.
        Weight::from_parts(611_330_021, 1496)
            // Standard Error: 126_468
            .saturating_add(Weight::from_parts(44_935_488, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 990_384_000 picoseconds.
        Weight::from_parts(997_789_835, 317931)
            // Standard Error: 147_718
            .saturating_add(Weight::from_parts(45_577_525, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_316_442_000 picoseconds.
        Weight::from_parts(4_317_405_930, 0)
            // Standard Error: 9_716
            .saturating_add(Weight::from_parts(3_347_795, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_318_454_000 picoseconds.
        Weight::from_parts(4_315_608_048, 0)
            // Standard Error: 9_912
            .saturating_add(Weight::from_parts(3_378_977, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_070_547_000 picoseconds.
        Weight::from_parts(9_590_615_725, 0)
            // Standard Error: 215_837
            .saturating_add(Weight::from_parts(18_387_733, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_629_844_000 picoseconds.
        Weight::from_parts(9_793_584_499, 0)
            // Standard Error: 273_859
            .saturating_add(Weight::from_parts(13_011_679, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_130_000 picoseconds.
        Weight::from_parts(2_229_000, 0)
            // Standard Error: 12_968
            .saturating_add(Weight::from_parts(3_848_557, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_218_000 picoseconds.
        Weight::from_parts(2_269_000, 0)
            // Standard Error: 10_580
            .saturating_add(Weight::from_parts(3_074_365, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_106_000 picoseconds.
        Weight::from_parts(3_617_268, 0)
            // Standard Error: 1_126
            .saturating_add(Weight::from_parts(1_561_237, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_133_000 picoseconds.
        Weight::from_parts(2_226_000, 0)
            // Standard Error: 9_890
            .saturating_add(Weight::from_parts(2_860_741, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_161_000 picoseconds.
        Weight::from_parts(2_298_000, 0)
            // Standard Error: 12_857
            .saturating_add(Weight::from_parts(5_267_762, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_983_000 picoseconds.
        Weight::from_parts(6_735_296, 0)
            // Standard Error: 2_196
            .saturating_add(Weight::from_parts(96_108, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_214_000 picoseconds.
        Weight::from_parts(3_996_341, 0)
            // Standard Error: 5_503
            .saturating_add(Weight::from_parts(2_553_537, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_553_537 -
            2_403_224, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_239_000 picoseconds.
        Weight::from_parts(3_910_521, 0)
            // Standard Error: 12_216
            .saturating_add(Weight::from_parts(2_403_224, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_507_000 picoseconds.
        Weight::from_parts(6_126_043, 0)
            // Standard Error: 27_234
            .saturating_add(Weight::from_parts(10_384_131, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_765_000 picoseconds.
        Weight::from_parts(12_223_000, 0)
            // Standard Error: 11_025
            .saturating_add(Weight::from_parts(1_009_872, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_207_000 picoseconds.
        Weight::from_parts(5_582_381, 0)
            // Standard Error: 14
            .saturating_add(Weight::from_parts(110, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_226_000 picoseconds.
        Weight::from_parts(1_950_343, 0)
            // Standard Error: 4_400
            .saturating_add(Weight::from_parts(219_814, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_171_000 picoseconds.
        Weight::from_parts(2_272_000, 0)
            // Standard Error: 7_636
            .saturating_add(Weight::from_parts(586_004, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_190_000 picoseconds.
        Weight::from_parts(2_278_000, 0)
            // Standard Error: 7_009
            .saturating_add(Weight::from_parts(705_547, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_946_000 picoseconds.
        Weight::from_parts(4_249_641, 0)
            // Standard Error: 11_794
            .saturating_add(Weight::from_parts(543_524, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_047_000 picoseconds.
        Weight::from_parts(6_110_000, 0)
            // Standard Error: 15_733
            .saturating_add(Weight::from_parts(1_162_132, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_829_000 picoseconds.
        Weight::from_parts(1_514_670, 0)
            // Standard Error: 10_932
            .saturating_add(Weight::from_parts(6_812_009, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_151_000 picoseconds.
        Weight::from_parts(2_264_000, 0)
            // Standard Error: 13_901
            .saturating_add(Weight::from_parts(3_146_437, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_107_000 picoseconds.
        Weight::from_parts(2_211_000, 0)
            // Standard Error: 13_649
            .saturating_add(Weight::from_parts(3_046_121, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_144_000 picoseconds.
        Weight::from_parts(2_263_000, 0)
            // Standard Error: 13_257
            .saturating_add(Weight::from_parts(2_957_715, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_236_000 picoseconds.
        Weight::from_parts(2_315_000, 0)
            // Standard Error: 8_113
            .saturating_add(Weight::from_parts(2_541_622, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_191_000 picoseconds.
        Weight::from_parts(2_245_000, 0)
            // Standard Error: 4_865
            .saturating_add(Weight::from_parts(519_484, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_200_000 picoseconds.
        Weight::from_parts(1_801_463, 0)
            // Standard Error: 5_255
            .saturating_add(Weight::from_parts(356_551, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_210_000 picoseconds.
        Weight::from_parts(2_254_000, 0)
            // Standard Error: 17_095
            .saturating_add(Weight::from_parts(1_606_148, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_232_000 picoseconds.
        Weight::from_parts(2_290_000, 0)
            // Standard Error: 10_795
            .saturating_add(Weight::from_parts(961_467, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_176_000 picoseconds.
        Weight::from_parts(1_371_331, 0)
            // Standard Error: 5_284
            .saturating_add(Weight::from_parts(318_799, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_125_000 picoseconds.
        Weight::from_parts(2_874_005, 0)
            // Standard Error: 2_073
            .saturating_add(Weight::from_parts(143_464, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_205_000 picoseconds.
        Weight::from_parts(2_570_915, 0)
            // Standard Error: 2_412
            .saturating_add(Weight::from_parts(162_320, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_259_000 picoseconds.
        Weight::from_parts(2_300_000, 0)
            // Standard Error: 19_181
            .saturating_add(Weight::from_parts(1_842_093, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_208_000 picoseconds.
        Weight::from_parts(2_286_000, 0)
            // Standard Error: 12_555
            .saturating_add(Weight::from_parts(1_123_312, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_176_000 picoseconds.
        Weight::from_parts(2_259_000, 0)
            // Standard Error: 19_259
            .saturating_add(Weight::from_parts(1_836_261, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_188_000 picoseconds.
        Weight::from_parts(2_260_000, 0)
            // Standard Error: 11_726
            .saturating_add(Weight::from_parts(1_117_530, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_175_000 picoseconds.
        Weight::from_parts(2_263_000, 0)
            // Standard Error: 17_310
            .saturating_add(Weight::from_parts(1_922_073, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_220_000 picoseconds.
        Weight::from_parts(2_286_000, 0)
            // Standard Error: 11_711
            .saturating_add(Weight::from_parts(1_058_676, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_190_000 picoseconds.
        Weight::from_parts(2_271_000, 0)
            // Standard Error: 19_598
            .saturating_add(Weight::from_parts(1_862_707, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_132_000 picoseconds.
        Weight::from_parts(2_223_000, 0)
            // Standard Error: 10_697
            .saturating_add(Weight::from_parts(1_125_703, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_198_000 picoseconds.
        Weight::from_parts(2_293_000, 0)
            // Standard Error: 18_945
            .saturating_add(Weight::from_parts(1_841_455, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_172_000 picoseconds.
        Weight::from_parts(2_286_000, 0)
            // Standard Error: 13_371
            .saturating_add(Weight::from_parts(1_112_601, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_145_000 picoseconds.
        Weight::from_parts(2_237_000, 0)
            // Standard Error: 18_267
            .saturating_add(Weight::from_parts(1_934_922, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_183_000 picoseconds.
        Weight::from_parts(2_291_000, 0)
            // Standard Error: 12_191
            .saturating_add(Weight::from_parts(1_101_260, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_134_000 picoseconds.
        Weight::from_parts(2_256_000, 0)
            // Standard Error: 17_992
            .saturating_add(Weight::from_parts(1_794_738, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_239_000 picoseconds.
        Weight::from_parts(2_346_000, 0)
            // Standard Error: 12_095
            .saturating_add(Weight::from_parts(1_058_294, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_239_000 picoseconds.
        Weight::from_parts(2_304_000, 0)
            // Standard Error: 18_191
            .saturating_add(Weight::from_parts(1_889_421, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_193_000 picoseconds.
        Weight::from_parts(2_292_000, 0)
            // Standard Error: 12_903
            .saturating_add(Weight::from_parts(1_135_942, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_152_000 picoseconds.
        Weight::from_parts(2_213_000, 0)
            // Standard Error: 18_739
            .saturating_add(Weight::from_parts(1_845_150, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_169_000 picoseconds.
        Weight::from_parts(2_308_000, 0)
            // Standard Error: 12_087
            .saturating_add(Weight::from_parts(1_108_475, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_116_000 picoseconds.
        Weight::from_parts(2_241_000, 0)
            // Standard Error: 18_613
            .saturating_add(Weight::from_parts(1_861_437, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_118_000 picoseconds.
        Weight::from_parts(2_267_000, 0)
            // Standard Error: 12_392
            .saturating_add(Weight::from_parts(1_111_588, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_174_000 picoseconds.
        Weight::from_parts(2_204_000, 0)
            // Standard Error: 13_785
            .saturating_add(Weight::from_parts(1_298_681, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_216_000 picoseconds.
        Weight::from_parts(2_273_000, 0)
            // Standard Error: 6_667
            .saturating_add(Weight::from_parts(603_786, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_166_000 picoseconds.
        Weight::from_parts(2_239_000, 0)
            // Standard Error: 12_755
            .saturating_add(Weight::from_parts(1_277_230, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_186_000 picoseconds.
        Weight::from_parts(2_280_000, 0)
            // Standard Error: 6_268
            .saturating_add(Weight::from_parts(613_123, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_270_000 picoseconds.
        Weight::from_parts(2_298_000, 0)
            // Standard Error: 16_257
            .saturating_add(Weight::from_parts(1_725_723, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_166_000 picoseconds.
        Weight::from_parts(2_229_000, 0)
            // Standard Error: 11_888
            .saturating_add(Weight::from_parts(1_139_556, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_162_000 picoseconds.
        Weight::from_parts(2_276_000, 0)
            // Standard Error: 12_299
            .saturating_add(Weight::from_parts(2_801_994, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_130_000 picoseconds.
        Weight::from_parts(2_276_000, 0)
            // Standard Error: 14_684
            .saturating_add(Weight::from_parts(2_361_452, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_225_000 picoseconds.
        Weight::from_parts(2_269_000, 0)
            // Standard Error: 14_431
            .saturating_add(Weight::from_parts(3_030_827, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_222_000 picoseconds.
        Weight::from_parts(2_322_000, 0)
            // Standard Error: 16_348
            .saturating_add(Weight::from_parts(2_329_721, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_129_000 picoseconds.
        Weight::from_parts(2_225_000, 0)
            // Standard Error: 19_857
            .saturating_add(Weight::from_parts(9_811_686, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_193_000 picoseconds.
        Weight::from_parts(2_264_000, 0)
            // Standard Error: 24_861
            .saturating_add(Weight::from_parts(7_645_791, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_188_000 picoseconds.
        Weight::from_parts(2_241_000, 0)
            // Standard Error: 14_846
            .saturating_add(Weight::from_parts(3_007_757, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_218_000 picoseconds.
        Weight::from_parts(2_251_000, 0)
            // Standard Error: 14_942
            .saturating_add(Weight::from_parts(2_402_177, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_141_000 picoseconds.
        Weight::from_parts(2_247_000, 0)
            // Standard Error: 14_690
            .saturating_add(Weight::from_parts(1_300_311, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_198_000 picoseconds.
        Weight::from_parts(2_261_000, 0)
            // Standard Error: 6_351
            .saturating_add(Weight::from_parts(595_170, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_161_000 picoseconds.
        Weight::from_parts(2_246_000, 0)
            // Standard Error: 12_821
            .saturating_add(Weight::from_parts(1_230_301, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_141_000 picoseconds.
        Weight::from_parts(2_204_000, 0)
            // Standard Error: 6_193
            .saturating_add(Weight::from_parts(566_187, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_128_000 picoseconds.
        Weight::from_parts(2_193_000, 0)
            // Standard Error: 13_205
            .saturating_add(Weight::from_parts(1_260_476, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_155_000 picoseconds.
        Weight::from_parts(2_240_000, 0)
            // Standard Error: 7_011
            .saturating_add(Weight::from_parts(628_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_213_000 picoseconds.
        Weight::from_parts(2_299_000, 0)
            // Standard Error: 11_248
            .saturating_add(Weight::from_parts(1_018_803, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_133_000 picoseconds.
        Weight::from_parts(2_261_000, 0)
            // Standard Error: 6_466
            .saturating_add(Weight::from_parts(542_873, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_114_000 picoseconds.
        Weight::from_parts(2_221_000, 0)
            // Standard Error: 10_505
            .saturating_add(Weight::from_parts(1_044_447, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_139_000 picoseconds.
        Weight::from_parts(2_229_000, 0)
            // Standard Error: 5_641
            .saturating_add(Weight::from_parts(525_534, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_214_000 picoseconds.
        Weight::from_parts(2_263_000, 0)
            // Standard Error: 11_946
            .saturating_add(Weight::from_parts(1_040_094, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_188_000 picoseconds.
        Weight::from_parts(2_284_000, 0)
            // Standard Error: 6_013
            .saturating_add(Weight::from_parts(538_796, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_203_000 picoseconds.
        Weight::from_parts(2_266_000, 0)
            // Standard Error: 10_747
            .saturating_add(Weight::from_parts(1_089_155, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_176_000 picoseconds.
        Weight::from_parts(2_242_000, 0)
            // Standard Error: 5_246
            .saturating_add(Weight::from_parts(524_502, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_195_000 picoseconds.
        Weight::from_parts(2_260_000, 0)
            // Standard Error: 9_493
            .saturating_add(Weight::from_parts(993_175, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_194_000 picoseconds.
        Weight::from_parts(598_929, 0)
            // Standard Error: 9_758
            .saturating_add(Weight::from_parts(516_687, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 961_000 picoseconds.
        Weight::from_parts(1_023_000, 0)
            // Standard Error: 918
            .saturating_add(Weight::from_parts(217_763, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3577 + c * (1024 ±0)`
        // Minimum execution time: 3_216_000 picoseconds.
        Weight::from_parts(3_309_000, 3577)
            // Standard Error: 818
            .saturating_add(Weight::from_parts(735_947, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_180_000 picoseconds.
        Weight::from_parts(86_253_996, 0)
            // Standard Error: 6_436
            .saturating_add(Weight::from_parts(2_192_523, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `791`
        //  Estimated: `22733`
        // Minimum execution time: 57_583_000 picoseconds.
        Weight::from_parts(59_917_000, 22733)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `679`
        //  Estimated: `15019`
        // Minimum execution time: 60_915 nanoseconds.
        Weight::from_parts(71_195_000, 15019)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `5270`
        // Minimum execution time: 74_940_000 picoseconds.
        Weight::from_parts(81_907_597, 5270)
            // Standard Error: 37_897
            .saturating_add(Weight::from_parts(54_593_958, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `752`
        //  Estimated: `38041`
        // Minimum execution time: 63_896_000 picoseconds.
        Weight::from_parts(93_063_704, 38041)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_359, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `235`
        //  Estimated: `33858`
        // Minimum execution time: 10_027_368_000 picoseconds.
        Weight::from_parts(361_854_159, 33858)
            // Standard Error: 155_642
            .saturating_add(Weight::from_parts(53_162_779, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_316, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `311`
        //  Estimated: `23291`
        // Minimum execution time: 54_933_000 picoseconds.
        Weight::from_parts(45_193_844, 23291)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_196, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `954`
        //  Estimated: `41065`
        // Minimum execution time: 80_508_000 picoseconds.
        Weight::from_parts(73_414_404, 41065)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_227, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `995`
        //  Estimated: `82655`
        // Minimum execution time: 321_827_000 picoseconds.
        Weight::from_parts(335_664_416, 82655)
            // Standard Error: 1_326
            .saturating_add(Weight::from_parts(7_106, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(29_u64))
            .saturating_add(RocksDbWeight::get().writes(23_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `995`
        //  Estimated: `82536`
        // Minimum execution time: 337_428_000 picoseconds.
        Weight::from_parts(352_266_852, 82536)
            .saturating_add(RocksDbWeight::get().reads(29_u64))
            .saturating_add(RocksDbWeight::get().writes(23_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 56_148_000 picoseconds.
        Weight::from_parts(56_453_000, 3899)
            // Standard Error: 23_341
            .saturating_add(Weight::from_parts(52_852_757, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_995_000 picoseconds.
        Weight::from_parts(116_749_019, 0)
            // Standard Error: 462_464
            .saturating_add(Weight::from_parts(160_737_989, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 246_044_000 picoseconds.
        Weight::from_parts(280_113_340, 0)
            // Standard Error: 372_314
            .saturating_add(Weight::from_parts(150_482_259, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_750_000 picoseconds.
        Weight::from_parts(91_504_643, 0)
            // Standard Error: 4_325
            .saturating_add(Weight::from_parts(4_031_016, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 141_279_000 picoseconds.
        Weight::from_parts(188_704_138, 0)
            // Standard Error: 33_077
            .saturating_add(Weight::from_parts(4_172_120, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_238_000 picoseconds.
        Weight::from_parts(126_548_129, 0)
            // Standard Error: 398_461
            .saturating_add(Weight::from_parts(214_070_697, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_814_000 picoseconds.
        Weight::from_parts(105_645_352, 0)
            // Standard Error: 269_227
            .saturating_add(Weight::from_parts(209_173_937, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_311_000 picoseconds.
        Weight::from_parts(100_643_661, 0)
            // Standard Error: 291_755
            .saturating_add(Weight::from_parts(210_028_622, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 120_198 nanoseconds.
        Weight::from_parts(130_172_800, 0)
            // Standard Error: 2_420_191
            .saturating_add(Weight::from_parts(9_196_990, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_488_000 picoseconds.
        Weight::from_parts(91_436_593, 0)
            // Standard Error: 355_961
            .saturating_add(Weight::from_parts(216_404_444, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_335_000 picoseconds.
        Weight::from_parts(87_778_189, 0)
            // Standard Error: 337_983
            .saturating_add(Weight::from_parts(218_075_827, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_748_000 picoseconds.
        Weight::from_parts(90_285_461, 0)
            // Standard Error: 248_183
            .saturating_add(Weight::from_parts(214_852_752, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_156_000 picoseconds.
        Weight::from_parts(87_719_339, 0)
            // Standard Error: 323_733
            .saturating_add(Weight::from_parts(215_863_644, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_961_000 picoseconds.
        Weight::from_parts(98_506_332, 0)
            // Standard Error: 281_545
            .saturating_add(Weight::from_parts(211_195_696, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_742_000 picoseconds.
        Weight::from_parts(83_903_981, 0)
            // Standard Error: 357_532
            .saturating_add(Weight::from_parts(218_050_731, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 560_566_000 picoseconds.
        Weight::from_parts(613_416_071, 0)
            // Standard Error: 488_571
            .saturating_add(Weight::from_parts(295_080_340, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 878_096_000 picoseconds.
        Weight::from_parts(887_221_000, 0)
            // Standard Error: 55_705
            .saturating_add(Weight::from_parts(13_308_062, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_478_000 picoseconds.
        Weight::from_parts(89_557_800, 0)
            // Standard Error: 281_118
            .saturating_add(Weight::from_parts(213_568_633, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_708_000 picoseconds.
        Weight::from_parts(92_909_601, 0)
            // Standard Error: 283_271
            .saturating_add(Weight::from_parts(212_404_224, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_109_000 picoseconds.
        Weight::from_parts(108_066_196, 0)
            // Standard Error: 372_136
            .saturating_add(Weight::from_parts(281_502_558, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_860_000 picoseconds.
        Weight::from_parts(134_693_785, 0)
            // Standard Error: 467_460
            .saturating_add(Weight::from_parts(416_934_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 500_282_000 picoseconds.
        Weight::from_parts(504_600_000, 0)
            // Standard Error: 61_599
            .saturating_add(Weight::from_parts(24_653_253, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_958_000 picoseconds.
        Weight::from_parts(157_729_239, 0)
            // Standard Error: 529_504
            .saturating_add(Weight::from_parts(413_536_117, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 511_325_000 picoseconds.
        Weight::from_parts(513_346_000, 0)
            // Standard Error: 59_327
            .saturating_add(Weight::from_parts(24_806_476, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 558_912_000 picoseconds.
        Weight::from_parts(654_915_206, 0)
            // Standard Error: 508_952
            .saturating_add(Weight::from_parts(428_652_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 559_914_000 picoseconds.
        Weight::from_parts(645_582_480, 0)
            // Standard Error: 479_246
            .saturating_add(Weight::from_parts(425_951_963, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_265_000 picoseconds.
        Weight::from_parts(91_617_674, 0)
            // Standard Error: 294_625
            .saturating_add(Weight::from_parts(221_263_316, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_270_564_000 picoseconds.
        Weight::from_parts(4_522_156_449, 0)
            // Standard Error: 573_020
            .saturating_add(Weight::from_parts(308_804_671, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 617_546_000 picoseconds.
        Weight::from_parts(631_784_000, 0)
            // Standard Error: 61_231
            .saturating_add(Weight::from_parts(34_368_141, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_318_681_000 picoseconds.
        Weight::from_parts(4_525_679_151, 0)
            // Standard Error: 570_582
            .saturating_add(Weight::from_parts(360_527_912, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_299_213_000 picoseconds.
        Weight::from_parts(4_533_411_352, 0)
            // Standard Error: 564_352
            .saturating_add(Weight::from_parts(370_641_251, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 226_687_000 picoseconds.
        Weight::from_parts(305_424_081, 0)
            // Standard Error: 436_936
            .saturating_add(Weight::from_parts(433_265_446, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 683_630_000 picoseconds.
        Weight::from_parts(693_424_000, 0)
            // Standard Error: 66_381
            .saturating_add(Weight::from_parts(24_881_310, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_460_735_000 picoseconds.
        Weight::from_parts(4_618_154_970, 0)
            // Standard Error: 605_004
            .saturating_add(Weight::from_parts(386_156_083, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_632_000 picoseconds.
        Weight::from_parts(84_737_297, 0)
            // Standard Error: 263_113
            .saturating_add(Weight::from_parts(21_592_402, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_906_000 picoseconds.
        Weight::from_parts(94_875_815, 0)
            // Standard Error: 971
            .saturating_add(Weight::from_parts(483_751, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_726_000 picoseconds.
        Weight::from_parts(87_712_642, 0)
            // Standard Error: 365_908
            .saturating_add(Weight::from_parts(27_267_257, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_725_000 picoseconds.
        Weight::from_parts(91_549_632, 0)
            // Standard Error: 1_167
            .saturating_add(Weight::from_parts(489_197, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_988_000 picoseconds.
        Weight::from_parts(84_581_793, 0)
            // Standard Error: 253_746
            .saturating_add(Weight::from_parts(24_102_506, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_021_000 picoseconds.
        Weight::from_parts(87_356_693, 0)
            // Standard Error: 284_219
            .saturating_add(Weight::from_parts(23_702_506, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_563_000 picoseconds.
        Weight::from_parts(122_588_537, 0)
            // Standard Error: 395_042
            .saturating_add(Weight::from_parts(298_122_325, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_982_000 picoseconds.
        Weight::from_parts(103_422_000, 0)
            // Standard Error: 2_397
            .saturating_add(Weight::from_parts(671_126, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 558_225_000 picoseconds.
        Weight::from_parts(573_721_697, 0)
            // Standard Error: 1_638_864
            .saturating_add(Weight::from_parts(36_999_802, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 558_586_000 picoseconds.
        Weight::from_parts(576_558_310, 0)
            // Standard Error: 1_446_853
            .saturating_add(Weight::from_parts(14_845_389, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_788_000 picoseconds.
        Weight::from_parts(99_301_748, 0)
            // Standard Error: 298_002
            .saturating_add(Weight::from_parts(12_751_251, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_771_000 picoseconds.
        Weight::from_parts(97_347_869, 0)
            // Standard Error: 942
            .saturating_add(Weight::from_parts(486_819, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_688_000 picoseconds.
        Weight::from_parts(97_221_053, 0)
            // Standard Error: 360_529
            .saturating_add(Weight::from_parts(17_032_946, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_278_000 picoseconds.
        Weight::from_parts(92_725_782, 0)
            // Standard Error: 1_151
            .saturating_add(Weight::from_parts(486_729, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_062_000 picoseconds.
        Weight::from_parts(106_465_230, 0)
            // Standard Error: 331_443
            .saturating_add(Weight::from_parts(212_774_524, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_550_000 picoseconds.
        Weight::from_parts(99_402_512, 0)
            // Standard Error: 292_944
            .saturating_add(Weight::from_parts(214_111_089, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 571_684_000 picoseconds.
        Weight::from_parts(654_973_743, 0)
            // Standard Error: 476_883
            .saturating_add(Weight::from_parts(222_318_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 587_260_000 picoseconds.
        Weight::from_parts(604_145_388, 0)
            // Standard Error: 1_063
            .saturating_add(Weight::from_parts(109_521, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_807_754_000 picoseconds.
        Weight::from_parts(5_043_216_004, 0)
            // Standard Error: 507_445
            .saturating_add(Weight::from_parts(238_180_007, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_208_563_000 picoseconds.
        Weight::from_parts(4_920_165_485, 0)
            // Standard Error: 14_111
            .saturating_add(Weight::from_parts(12_298_071, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_706_000 picoseconds.
        Weight::from_parts(116_039_867, 0)
            // Standard Error: 309_628
            .saturating_add(Weight::from_parts(221_820_130, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 297_355_000 picoseconds.
        Weight::from_parts(304_294_000, 0)
            // Standard Error: 52_556
            .saturating_add(Weight::from_parts(30_640_741, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_390_000 picoseconds.
        Weight::from_parts(136_472_332, 0)
            // Standard Error: 446_093
            .saturating_add(Weight::from_parts(278_567_834, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_877_000 picoseconds.
        Weight::from_parts(99_383_043, 0)
            // Standard Error: 324_111
            .saturating_add(Weight::from_parts(210_187_195, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_680_000 picoseconds.
        Weight::from_parts(85_291_763, 0)
            // Standard Error: 290_608
            .saturating_add(Weight::from_parts(28_222_036, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_340_000 picoseconds.
        Weight::from_parts(84_969_367, 0)
            // Standard Error: 256_496
            .saturating_add(Weight::from_parts(15_215_232, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_972_000 picoseconds.
        Weight::from_parts(86_031_973, 0)
            // Standard Error: 352_625
            .saturating_add(Weight::from_parts(17_276_226, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_308_000 picoseconds.
        Weight::from_parts(87_107_326, 0)
            // Standard Error: 287_749
            .saturating_add(Weight::from_parts(17_223_373, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_980_000 picoseconds.
        Weight::from_parts(88_643_522, 0)
            // Standard Error: 284_883
            .saturating_add(Weight::from_parts(12_710_577, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 135_848_000 picoseconds.
        Weight::from_parts(227_613_909, 0)
            // Standard Error: 428_049
            .saturating_add(Weight::from_parts(303_309_382, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_995_000 picoseconds.
        Weight::from_parts(159_470_644, 0)
            // Standard Error: 483_324
            .saturating_add(Weight::from_parts(501_689_316, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 53_574_942_000 picoseconds.
        Weight::from_parts(53_772_266_000, 0)
            // Standard Error: 324_668
            .saturating_add(Weight::from_parts(8_365_699, 0).saturating_mul(p.into()))
            // Standard Error: 324_652
            .saturating_add(Weight::from_parts(157_111_940, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_142_000 picoseconds.
        Weight::from_parts(143_035_266, 0)
            // Standard Error: 468_164
            .saturating_add(Weight::from_parts(507_773_974, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_304_588_000 picoseconds.
        Weight::from_parts(51_361_161_000, 0)
            // Standard Error: 308_275
            .saturating_add(Weight::from_parts(9_048_412, 0).saturating_mul(p.into()))
            // Standard Error: 308_259
            .saturating_add(Weight::from_parts(157_883_861, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 82_597_000 picoseconds.
        Weight::from_parts(115_612_231, 1131)
            // Standard Error: 6_805
            .saturating_add(Weight::from_parts(12_092_685, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 81_376_000 picoseconds.
        Weight::from_parts(83_645_000, 1131)
            // Standard Error: 22_330
            .saturating_add(Weight::from_parts(38_251_978, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_242_464_000 picoseconds.
        Weight::from_parts(6_100_710_067, 5069931)
            // Standard Error: 47_813
            .saturating_add(Weight::from_parts(38_107_585, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 81_600_000 picoseconds.
        Weight::from_parts(83_416_000, 1939)
            // Standard Error: 38_703
            .saturating_add(Weight::from_parts(46_042_384, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 99_364_000 picoseconds.
        Weight::from_parts(91_094_107, 1496)
            // Standard Error: 81_610
            .saturating_add(Weight::from_parts(40_251_563, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 600_156_000 picoseconds.
        Weight::from_parts(611_330_021, 1496)
            // Standard Error: 126_468
            .saturating_add(Weight::from_parts(44_935_488, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 990_384_000 picoseconds.
        Weight::from_parts(997_789_835, 317931)
            // Standard Error: 147_718
            .saturating_add(Weight::from_parts(45_577_525, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_316_442_000 picoseconds.
        Weight::from_parts(4_317_405_930, 0)
            // Standard Error: 9_716
            .saturating_add(Weight::from_parts(3_347_795, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_318_454_000 picoseconds.
        Weight::from_parts(4_315_608_048, 0)
            // Standard Error: 9_912
            .saturating_add(Weight::from_parts(3_378_977, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_070_547_000 picoseconds.
        Weight::from_parts(9_590_615_725, 0)
            // Standard Error: 215_837
            .saturating_add(Weight::from_parts(18_387_733, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_629_844_000 picoseconds.
        Weight::from_parts(9_793_584_499, 0)
            // Standard Error: 273_859
            .saturating_add(Weight::from_parts(13_011_679, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_130_000 picoseconds.
        Weight::from_parts(2_229_000, 0)
            // Standard Error: 12_968
            .saturating_add(Weight::from_parts(3_848_557, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_218_000 picoseconds.
        Weight::from_parts(2_269_000, 0)
            // Standard Error: 10_580
            .saturating_add(Weight::from_parts(3_074_365, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_106_000 picoseconds.
        Weight::from_parts(3_617_268, 0)
            // Standard Error: 1_126
            .saturating_add(Weight::from_parts(1_561_237, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_133_000 picoseconds.
        Weight::from_parts(2_226_000, 0)
            // Standard Error: 9_890
            .saturating_add(Weight::from_parts(2_860_741, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_161_000 picoseconds.
        Weight::from_parts(2_298_000, 0)
            // Standard Error: 12_857
            .saturating_add(Weight::from_parts(5_267_762, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_983_000 picoseconds.
        Weight::from_parts(6_735_296, 0)
            // Standard Error: 2_196
            .saturating_add(Weight::from_parts(96_108, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_214_000 picoseconds.
        Weight::from_parts(3_996_341, 0)
            // Standard Error: 5_503
            .saturating_add(Weight::from_parts(2_553_537, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_553_537 -
            2_403_224, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_239_000 picoseconds.
        Weight::from_parts(3_910_521, 0)
            // Standard Error: 12_216
            .saturating_add(Weight::from_parts(2_403_224, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_507_000 picoseconds.
        Weight::from_parts(6_126_043, 0)
            // Standard Error: 27_234
            .saturating_add(Weight::from_parts(10_384_131, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_765_000 picoseconds.
        Weight::from_parts(12_223_000, 0)
            // Standard Error: 11_025
            .saturating_add(Weight::from_parts(1_009_872, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_207_000 picoseconds.
        Weight::from_parts(5_582_381, 0)
            // Standard Error: 14
            .saturating_add(Weight::from_parts(110, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_226_000 picoseconds.
        Weight::from_parts(1_950_343, 0)
            // Standard Error: 4_400
            .saturating_add(Weight::from_parts(219_814, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_171_000 picoseconds.
        Weight::from_parts(2_272_000, 0)
            // Standard Error: 7_636
            .saturating_add(Weight::from_parts(586_004, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_190_000 picoseconds.
        Weight::from_parts(2_278_000, 0)
            // Standard Error: 7_009
            .saturating_add(Weight::from_parts(705_547, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_946_000 picoseconds.
        Weight::from_parts(4_249_641, 0)
            // Standard Error: 11_794
            .saturating_add(Weight::from_parts(543_524, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_047_000 picoseconds.
        Weight::from_parts(6_110_000, 0)
            // Standard Error: 15_733
            .saturating_add(Weight::from_parts(1_162_132, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_829_000 picoseconds.
        Weight::from_parts(1_514_670, 0)
            // Standard Error: 10_932
            .saturating_add(Weight::from_parts(6_812_009, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_151_000 picoseconds.
        Weight::from_parts(2_264_000, 0)
            // Standard Error: 13_901
            .saturating_add(Weight::from_parts(3_146_437, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_107_000 picoseconds.
        Weight::from_parts(2_211_000, 0)
            // Standard Error: 13_649
            .saturating_add(Weight::from_parts(3_046_121, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_144_000 picoseconds.
        Weight::from_parts(2_263_000, 0)
            // Standard Error: 13_257
            .saturating_add(Weight::from_parts(2_957_715, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_236_000 picoseconds.
        Weight::from_parts(2_315_000, 0)
            // Standard Error: 8_113
            .saturating_add(Weight::from_parts(2_541_622, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_191_000 picoseconds.
        Weight::from_parts(2_245_000, 0)
            // Standard Error: 4_865
            .saturating_add(Weight::from_parts(519_484, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_200_000 picoseconds.
        Weight::from_parts(1_801_463, 0)
            // Standard Error: 5_255
            .saturating_add(Weight::from_parts(356_551, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_210_000 picoseconds.
        Weight::from_parts(2_254_000, 0)
            // Standard Error: 17_095
            .saturating_add(Weight::from_parts(1_606_148, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_232_000 picoseconds.
        Weight::from_parts(2_290_000, 0)
            // Standard Error: 10_795
            .saturating_add(Weight::from_parts(961_467, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_176_000 picoseconds.
        Weight::from_parts(1_371_331, 0)
            // Standard Error: 5_284
            .saturating_add(Weight::from_parts(318_799, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_125_000 picoseconds.
        Weight::from_parts(2_874_005, 0)
            // Standard Error: 2_073
            .saturating_add(Weight::from_parts(143_464, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_205_000 picoseconds.
        Weight::from_parts(2_570_915, 0)
            // Standard Error: 2_412
            .saturating_add(Weight::from_parts(162_320, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_259_000 picoseconds.
        Weight::from_parts(2_300_000, 0)
            // Standard Error: 19_181
            .saturating_add(Weight::from_parts(1_842_093, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_208_000 picoseconds.
        Weight::from_parts(2_286_000, 0)
            // Standard Error: 12_555
            .saturating_add(Weight::from_parts(1_123_312, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_176_000 picoseconds.
        Weight::from_parts(2_259_000, 0)
            // Standard Error: 19_259
            .saturating_add(Weight::from_parts(1_836_261, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_188_000 picoseconds.
        Weight::from_parts(2_260_000, 0)
            // Standard Error: 11_726
            .saturating_add(Weight::from_parts(1_117_530, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_175_000 picoseconds.
        Weight::from_parts(2_263_000, 0)
            // Standard Error: 17_310
            .saturating_add(Weight::from_parts(1_922_073, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_220_000 picoseconds.
        Weight::from_parts(2_286_000, 0)
            // Standard Error: 11_711
            .saturating_add(Weight::from_parts(1_058_676, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_190_000 picoseconds.
        Weight::from_parts(2_271_000, 0)
            // Standard Error: 19_598
            .saturating_add(Weight::from_parts(1_862_707, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_132_000 picoseconds.
        Weight::from_parts(2_223_000, 0)
            // Standard Error: 10_697
            .saturating_add(Weight::from_parts(1_125_703, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_198_000 picoseconds.
        Weight::from_parts(2_293_000, 0)
            // Standard Error: 18_945
            .saturating_add(Weight::from_parts(1_841_455, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_172_000 picoseconds.
        Weight::from_parts(2_286_000, 0)
            // Standard Error: 13_371
            .saturating_add(Weight::from_parts(1_112_601, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_145_000 picoseconds.
        Weight::from_parts(2_237_000, 0)
            // Standard Error: 18_267
            .saturating_add(Weight::from_parts(1_934_922, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_183_000 picoseconds.
        Weight::from_parts(2_291_000, 0)
            // Standard Error: 12_191
            .saturating_add(Weight::from_parts(1_101_260, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_134_000 picoseconds.
        Weight::from_parts(2_256_000, 0)
            // Standard Error: 17_992
            .saturating_add(Weight::from_parts(1_794_738, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_239_000 picoseconds.
        Weight::from_parts(2_346_000, 0)
            // Standard Error: 12_095
            .saturating_add(Weight::from_parts(1_058_294, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_239_000 picoseconds.
        Weight::from_parts(2_304_000, 0)
            // Standard Error: 18_191
            .saturating_add(Weight::from_parts(1_889_421, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_193_000 picoseconds.
        Weight::from_parts(2_292_000, 0)
            // Standard Error: 12_903
            .saturating_add(Weight::from_parts(1_135_942, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_152_000 picoseconds.
        Weight::from_parts(2_213_000, 0)
            // Standard Error: 18_739
            .saturating_add(Weight::from_parts(1_845_150, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_169_000 picoseconds.
        Weight::from_parts(2_308_000, 0)
            // Standard Error: 12_087
            .saturating_add(Weight::from_parts(1_108_475, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_116_000 picoseconds.
        Weight::from_parts(2_241_000, 0)
            // Standard Error: 18_613
            .saturating_add(Weight::from_parts(1_861_437, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_118_000 picoseconds.
        Weight::from_parts(2_267_000, 0)
            // Standard Error: 12_392
            .saturating_add(Weight::from_parts(1_111_588, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_174_000 picoseconds.
        Weight::from_parts(2_204_000, 0)
            // Standard Error: 13_785
            .saturating_add(Weight::from_parts(1_298_681, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_216_000 picoseconds.
        Weight::from_parts(2_273_000, 0)
            // Standard Error: 6_667
            .saturating_add(Weight::from_parts(603_786, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_166_000 picoseconds.
        Weight::from_parts(2_239_000, 0)
            // Standard Error: 12_755
            .saturating_add(Weight::from_parts(1_277_230, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_186_000 picoseconds.
        Weight::from_parts(2_280_000, 0)
            // Standard Error: 6_268
            .saturating_add(Weight::from_parts(613_123, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_270_000 picoseconds.
        Weight::from_parts(2_298_000, 0)
            // Standard Error: 16_257
            .saturating_add(Weight::from_parts(1_725_723, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_166_000 picoseconds.
        Weight::from_parts(2_229_000, 0)
            // Standard Error: 11_888
            .saturating_add(Weight::from_parts(1_139_556, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_162_000 picoseconds.
        Weight::from_parts(2_276_000, 0)
            // Standard Error: 12_299
            .saturating_add(Weight::from_parts(2_801_994, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_130_000 picoseconds.
        Weight::from_parts(2_276_000, 0)
            // Standard Error: 14_684
            .saturating_add(Weight::from_parts(2_361_452, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_225_000 picoseconds.
        Weight::from_parts(2_269_000, 0)
            // Standard Error: 14_431
            .saturating_add(Weight::from_parts(3_030_827, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_222_000 picoseconds.
        Weight::from_parts(2_322_000, 0)
            // Standard Error: 16_348
            .saturating_add(Weight::from_parts(2_329_721, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_129_000 picoseconds.
        Weight::from_parts(2_225_000, 0)
            // Standard Error: 19_857
            .saturating_add(Weight::from_parts(9_811_686, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_193_000 picoseconds.
        Weight::from_parts(2_264_000, 0)
            // Standard Error: 24_861
            .saturating_add(Weight::from_parts(7_645_791, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_188_000 picoseconds.
        Weight::from_parts(2_241_000, 0)
            // Standard Error: 14_846
            .saturating_add(Weight::from_parts(3_007_757, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_218_000 picoseconds.
        Weight::from_parts(2_251_000, 0)
            // Standard Error: 14_942
            .saturating_add(Weight::from_parts(2_402_177, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_141_000 picoseconds.
        Weight::from_parts(2_247_000, 0)
            // Standard Error: 14_690
            .saturating_add(Weight::from_parts(1_300_311, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_198_000 picoseconds.
        Weight::from_parts(2_261_000, 0)
            // Standard Error: 6_351
            .saturating_add(Weight::from_parts(595_170, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_161_000 picoseconds.
        Weight::from_parts(2_246_000, 0)
            // Standard Error: 12_821
            .saturating_add(Weight::from_parts(1_230_301, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_141_000 picoseconds.
        Weight::from_parts(2_204_000, 0)
            // Standard Error: 6_193
            .saturating_add(Weight::from_parts(566_187, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_128_000 picoseconds.
        Weight::from_parts(2_193_000, 0)
            // Standard Error: 13_205
            .saturating_add(Weight::from_parts(1_260_476, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_155_000 picoseconds.
        Weight::from_parts(2_240_000, 0)
            // Standard Error: 7_011
            .saturating_add(Weight::from_parts(628_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_213_000 picoseconds.
        Weight::from_parts(2_299_000, 0)
            // Standard Error: 11_248
            .saturating_add(Weight::from_parts(1_018_803, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_133_000 picoseconds.
        Weight::from_parts(2_261_000, 0)
            // Standard Error: 6_466
            .saturating_add(Weight::from_parts(542_873, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_114_000 picoseconds.
        Weight::from_parts(2_221_000, 0)
            // Standard Error: 10_505
            .saturating_add(Weight::from_parts(1_044_447, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_139_000 picoseconds.
        Weight::from_parts(2_229_000, 0)
            // Standard Error: 5_641
            .saturating_add(Weight::from_parts(525_534, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_214_000 picoseconds.
        Weight::from_parts(2_263_000, 0)
            // Standard Error: 11_946
            .saturating_add(Weight::from_parts(1_040_094, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_188_000 picoseconds.
        Weight::from_parts(2_284_000, 0)
            // Standard Error: 6_013
            .saturating_add(Weight::from_parts(538_796, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_203_000 picoseconds.
        Weight::from_parts(2_266_000, 0)
            // Standard Error: 10_747
            .saturating_add(Weight::from_parts(1_089_155, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_176_000 picoseconds.
        Weight::from_parts(2_242_000, 0)
            // Standard Error: 5_246
            .saturating_add(Weight::from_parts(524_502, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_195_000 picoseconds.
        Weight::from_parts(2_260_000, 0)
            // Standard Error: 9_493
            .saturating_add(Weight::from_parts(993_175, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_194_000 picoseconds.
        Weight::from_parts(598_929, 0)
            // Standard Error: 9_758
            .saturating_add(Weight::from_parts(516_687, 0).saturating_mul(r.into()))
    }
}
