// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-28, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=alloc,alloc_in_handle,alloc_per_page,claim_value,create_program,db_read_per_kb,db_write_per_kb,free,gr_block_height,gr_block_timestamp,gr_create_program,gr_create_program_per_kb,gr_create_program_wgas,gr_create_program_wgas_per_kb,gr_debug,gr_debug_per_kb,gr_gas_available,gr_message_id,gr_pay_program_rent,gr_program_id,gr_random,gr_read,gr_read_per_kb,gr_reply_code,gr_reply_deposit,gr_reply_per_kb,gr_reply_push,gr_reply_push_input,gr_reply_push_input_per_kb,gr_reply_push_per_kb,gr_reply_to,gr_reply_wgas_per_kb,gr_reservation_reply_commit_per_kb,gr_reservation_reply_per_kb,gr_reservation_send,gr_reservation_send_commit,gr_reservation_send_per_kb,gr_reserve_gas,gr_send,gr_send_commit,gr_send_commit_wgas,gr_send_init,gr_send_input,gr_send_input_wgas,gr_send_per_kb,gr_send_push,gr_send_push_input,gr_send_push_input_per_kb,gr_send_push_per_kb,gr_send_wgas,gr_send_wgas_per_kb,gr_signal_code,gr_signal_from,gr_size,gr_source,gr_system_reserve_gas,gr_unreserve_gas,gr_value,gr_value_available,gr_wake,initial_allocation,instantiate_module_per_kb,instr_br,instr_br_if,instr_br_table,instr_br_table_per_entry,instr_call,instr_call_const,instr_call_indirect,instr_call_indirect_per_param,instr_call_per_local,instr_global_get,instr_global_set,instr_i32add,instr_i32and,instr_i32clz,instr_i32ctz,instr_i32divs,instr_i32divu,instr_i32eq,instr_i32eqz,instr_i32extend16s,instr_i32extend8s,instr_i32ges,instr_i32geu,instr_i32gts,instr_i32gtu,instr_i32les,instr_i32leu,instr_i32load,instr_i32lts,instr_i32ltu,instr_i32mul,instr_i32ne,instr_i32or,instr_i32popcnt,instr_i32rems,instr_i32remu,instr_i32rotl,instr_i32rotr,instr_i32shl,instr_i32shrs,instr_i32shru,instr_i32store,instr_i32sub,instr_i32wrapi64,instr_i32xor,instr_i64add,instr_i64and,instr_i64clz,instr_i64ctz,instr_i64divs,instr_i64divu,instr_i64eq,instr_i64eqz,instr_i64extend16s,instr_i64extend32s,instr_i64extend8s,instr_i64extendsi32,instr_i64extendui32,instr_i64ges,instr_i64geu,instr_i64gts,instr_i64gtu,instr_i64les,instr_i64leu,instr_i64load,instr_i64lts,instr_i64ltu,instr_i64mul,instr_i64ne,instr_i64or,instr_i64popcnt,instr_i64rems,instr_i64remu,instr_i64rotl,instr_i64rotr,instr_i64shl,instr_i64shrs,instr_i64shru,instr_i64store,instr_i64sub,instr_i64xor,instr_if,instr_local_get,instr_local_set,instr_local_tee,instr_memory_current,instr_select,lazy_pages_host_func_read,lazy_pages_host_func_write,lazy_pages_host_func_write_after_read,lazy_pages_load_page_storage_data,lazy_pages_signal_read,lazy_pages_signal_write,lazy_pages_signal_write_after_read,mem_grow,pay_program_rent,reinstrument_per_kb,resume_session_commit,resume_session_init,resume_session_push,send_message,send_reply,tasks_pause_program,tasks_pause_program_uninited,tasks_remove_from_mailbox,tasks_remove_from_waitlist,tasks_remove_gas_reservation,tasks_remove_resume_session,tasks_send_dispatch,tasks_send_user_message,tasks_send_user_message_to_mailbox,tasks_wake_message,tasks_wake_message_no_wake,upload_code,upload_program --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn tasks_remove_resume_session() -> Weight;
    fn tasks_remove_gas_reservation() -> Weight;
    fn tasks_send_user_message_to_mailbox() -> Weight;
    fn tasks_send_user_message() -> Weight;
    fn tasks_send_dispatch() -> Weight;
    fn tasks_wake_message() -> Weight;
    fn tasks_wake_message_no_wake() -> Weight;
    fn tasks_remove_from_waitlist() -> Weight;
    fn tasks_remove_from_mailbox() -> Weight;
    fn tasks_pause_program(c: u32, ) -> Weight;
    fn tasks_pause_program_uninited(c: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
/// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_468_000 picoseconds.
        Weight::from_parts(103_922_510, 0)
            // Standard Error: 77_234
            .saturating_add(Weight::from_parts(17_036_662, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_801_000 picoseconds.
        Weight::from_parts(107_713_522, 0)
            // Standard Error: 80_800
            .saturating_add(Weight::from_parts(14_812_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_960_000 picoseconds.
        Weight::from_parts(105_526_464, 0)
            // Standard Error: 79_514
            .saturating_add(Weight::from_parts(19_497_700, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_070_000 picoseconds.
        Weight::from_parts(104_107_894, 0)
            // Standard Error: 82_421
            .saturating_add(Weight::from_parts(20_227_692, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 722_789_000 picoseconds.
        Weight::from_parts(739_784_980, 0)
            // Standard Error: 522_343
            .saturating_add(Weight::from_parts(26_742_460, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 712_570_000 picoseconds.
        Weight::from_parts(742_765_412, 0)
            // Standard Error: 494_026
            .saturating_add(Weight::from_parts(7_538_442, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_390_000 picoseconds.
        Weight::from_parts(118_500_474, 0)
            // Standard Error: 85_255
            .saturating_add(Weight::from_parts(3_018_292, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_095_000 picoseconds.
        Weight::from_parts(114_013_970, 0)
            // Standard Error: 77_083
            .saturating_add(Weight::from_parts(10_785_200, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_895_000 picoseconds.
        Weight::from_parts(102_593_046, 0)
            // Standard Error: 2_201_286
            .saturating_add(Weight::from_parts(546_751_252, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_826_000 picoseconds.
        Weight::from_parts(101_779_958, 0)
            // Standard Error: 2_257_570
            .saturating_add(Weight::from_parts(544_158_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_404_000 picoseconds.
        Weight::from_parts(103_227_904, 0)
            // Standard Error: 2_036_224
            .saturating_add(Weight::from_parts(510_665_058, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_288_000 picoseconds.
        Weight::from_parts(108_080_260, 0)
            // Standard Error: 2_275_072
            .saturating_add(Weight::from_parts(536_124_992, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_442_000 picoseconds.
        Weight::from_parts(102_859_592, 0)
            // Standard Error: 2_289_077
            .saturating_add(Weight::from_parts(550_682_358, 0).saturating_mul(r.into()))
    }
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_017_000 picoseconds.
        Weight::from_parts(1_056_000, 0)
            // Standard Error: 910
            .saturating_add(Weight::from_parts(247_114, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_568_000 picoseconds.
        Weight::from_parts(3_654_000, 3610)
            // Standard Error: 1_305
            .saturating_add(Weight::from_parts(681_579, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_112_000 picoseconds.
        Weight::from_parts(98_996_094, 0)
            // Standard Error: 5_230
            .saturating_add(Weight::from_parts(2_323_092, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1372`
        //  Estimated: `51905`
        // Minimum execution time: 108_663_000 picoseconds.
        Weight::from_parts(110_815_000, 51905)
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `992`
        //  Estimated: `21579`
        // Minimum execution time: 56_256_000 picoseconds.
        Weight::from_parts(57_657_000, 21579)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `638`
        //  Estimated: `17486`
        // Minimum execution time: 30_434_000 picoseconds.
        Weight::from_parts(31_342_000, 17486)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_089_000 picoseconds.
        Weight::from_parts(9_238_860, 7640)
            // Standard Error: 33_823
            .saturating_add(Weight::from_parts(13_722_797, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1593 + c * (16389 ±0)`
        //  Estimated: `43266 + c * (131112 ±0)`
        // Minimum execution time: 72_033_000 picoseconds.
        Weight::from_parts(72_673_000, 43266)
            // Standard Error: 160_040
            .saturating_add(Weight::from_parts(53_828_460, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `5402`
        // Minimum execution time: 78_723_000 picoseconds.
        Weight::from_parts(36_280_364, 5402)
            // Standard Error: 53_469
            .saturating_add(Weight::from_parts(59_665_936, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1111`
        //  Estimated: `50600`
        // Minimum execution time: 95_464_000 picoseconds.
        Weight::from_parts(134_019_634, 50600)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_565, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `521`
        //  Estimated: `45152`
        // Minimum execution time: 10_899_507_000 picoseconds.
        Weight::from_parts(250_736_393, 45152)
            // Standard Error: 181_397
            .saturating_add(Weight::from_parts(60_351_007, 0).saturating_mul(c.into()))
            // Standard Error: 10
            .saturating_add(Weight::from_parts(2_509, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `531`
        //  Estimated: `31266`
        // Minimum execution time: 75_586_000 picoseconds.
        Weight::from_parts(63_636_044, 31266)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(1_026, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1371`
        //  Estimated: `54435`
        // Minimum execution time: 126_165_000 picoseconds.
        Weight::from_parts(99_976_587, 54435)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_066, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `121468`
        // Minimum execution time: 374_312_000 picoseconds.
        Weight::from_parts(388_097_804, 121468)
            // Standard Error: 1_511
            .saturating_add(Weight::from_parts(7_609, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(35_u64))
            .saturating_add(T::DbWeight::get().writes(26_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `121468`
        // Minimum execution time: 388_636_000 picoseconds.
        Weight::from_parts(409_534_982, 121468)
            .saturating_add(T::DbWeight::get().reads(35_u64))
            .saturating_add(T::DbWeight::get().writes(26_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 59_452_000 picoseconds.
        Weight::from_parts(59_843_000, 3899)
            // Standard Error: 36_511
            .saturating_add(Weight::from_parts(59_608_367, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_805_000 picoseconds.
        Weight::from_parts(99_198_000, 0)
            // Standard Error: 3_810_234
            .saturating_add(Weight::from_parts(715_250_057, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 498_368_000 picoseconds.
        Weight::from_parts(435_538_467, 0)
            // Standard Error: 9_028
            .saturating_add(Weight::from_parts(29_150_009, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 217_973_000 picoseconds.
        Weight::from_parts(234_381_041, 0)
            // Standard Error: 268_277
            .saturating_add(Weight::from_parts(63_662_408, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_829_000 picoseconds.
        Weight::from_parts(109_821_356, 0)
            // Standard Error: 4_504
            .saturating_add(Weight::from_parts(2_418_993, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 156_024_000 picoseconds.
        Weight::from_parts(228_502_521, 0)
            // Standard Error: 17_189
            .saturating_add(Weight::from_parts(2_063_907, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_859_000 picoseconds.
        Weight::from_parts(122_991_194, 0)
            // Standard Error: 384_239
            .saturating_add(Weight::from_parts(94_861_341, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_683_000 picoseconds.
        Weight::from_parts(87_066_972, 0)
            // Standard Error: 353_912
            .saturating_add(Weight::from_parts(90_298_593, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_910_000 picoseconds.
        Weight::from_parts(87_656_506, 0)
            // Standard Error: 342_626
            .saturating_add(Weight::from_parts(88_970_290, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_597_000 picoseconds.
        Weight::from_parts(89_710_816, 0)
            // Standard Error: 281_069
            .saturating_add(Weight::from_parts(88_008_386, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_560_000 picoseconds.
        Weight::from_parts(88_014_449, 0)
            // Standard Error: 316_919
            .saturating_add(Weight::from_parts(85_138_799, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_992_000 picoseconds.
        Weight::from_parts(92_397_225, 0)
            // Standard Error: 337_030
            .saturating_add(Weight::from_parts(84_794_630, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_921_000 picoseconds.
        Weight::from_parts(87_324_893, 0)
            // Standard Error: 345_149
            .saturating_add(Weight::from_parts(85_742_010, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_704_000 picoseconds.
        Weight::from_parts(87_853_276, 0)
            // Standard Error: 306_032
            .saturating_add(Weight::from_parts(85_891_363, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 716_879_000 picoseconds.
        Weight::from_parts(771_292_269, 0)
            // Standard Error: 460_376
            .saturating_add(Weight::from_parts(138_445_965, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 853_498_000 picoseconds.
        Weight::from_parts(867_144_000, 0)
            // Standard Error: 61_398
            .saturating_add(Weight::from_parts(13_359_556, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_066_000 picoseconds.
        Weight::from_parts(88_159_863, 0)
            // Standard Error: 347_823
            .saturating_add(Weight::from_parts(86_509_164, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_135_000 picoseconds.
        Weight::from_parts(97_308_265, 0)
            // Standard Error: 338_132
            .saturating_add(Weight::from_parts(83_796_299, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_124_000 picoseconds.
        Weight::from_parts(109_487_023, 0)
            // Standard Error: 346_809
            .saturating_add(Weight::from_parts(168_417_663, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_339_000 picoseconds.
        Weight::from_parts(103_915_000, 0)
            // Standard Error: 3_569_082
            .saturating_add(Weight::from_parts(777_519_060, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_313_000 picoseconds.
        Weight::from_parts(165_209_436, 0)
            // Standard Error: 409_910
            .saturating_add(Weight::from_parts(260_010_701, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 362_008_000 picoseconds.
        Weight::from_parts(365_111_000, 0)
            // Standard Error: 58_095
            .saturating_add(Weight::from_parts(21_117_603, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_225_000 picoseconds.
        Weight::from_parts(178_694_796, 0)
            // Standard Error: 421_157
            .saturating_add(Weight::from_parts(261_857_183, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 354_852_000 picoseconds.
        Weight::from_parts(362_377_000, 0)
            // Standard Error: 61_721
            .saturating_add(Weight::from_parts(20_990_518, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 712_329_000 picoseconds.
        Weight::from_parts(799_841_687, 0)
            // Standard Error: 465_039
            .saturating_add(Weight::from_parts(277_194_729, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 720_883_000 picoseconds.
        Weight::from_parts(818_098_220, 0)
            // Standard Error: 419_582
            .saturating_add(Weight::from_parts(278_157_803, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_776_000 picoseconds.
        Weight::from_parts(86_789_786, 0)
            // Standard Error: 313_733
            .saturating_add(Weight::from_parts(91_133_214, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_830_185_000 picoseconds.
        Weight::from_parts(1_941_180_607, 0)
            // Standard Error: 339_595
            .saturating_add(Weight::from_parts(164_114_152, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 316_805_000 picoseconds.
        Weight::from_parts(319_081_000, 0)
            // Standard Error: 56_266
            .saturating_add(Weight::from_parts(30_907_656, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_827_616_000 picoseconds.
        Weight::from_parts(1_940_342_996, 0)
            // Standard Error: 345_078
            .saturating_add(Weight::from_parts(218_735_451, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_814_021_000 picoseconds.
        Weight::from_parts(1_940_915_228, 0)
            // Standard Error: 351_421
            .saturating_add(Weight::from_parts(223_256_421, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 252_748_000 picoseconds.
        Weight::from_parts(332_851_213, 0)
            // Standard Error: 342_689
            .saturating_add(Weight::from_parts(274_246_621, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 538_620_000 picoseconds.
        Weight::from_parts(548_677_000, 0)
            // Standard Error: 59_098
            .saturating_add(Weight::from_parts(21_206_678, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_984_974_000 picoseconds.
        Weight::from_parts(2_096_185_086, 0)
            // Standard Error: 447_389
            .saturating_add(Weight::from_parts(239_127_213, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 119_068_000 picoseconds.
        Weight::from_parts(111_806_245, 0)
            // Standard Error: 1_078
            .saturating_add(Weight::from_parts(425_024, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 115_080_000 picoseconds.
        Weight::from_parts(107_425_635, 0)
            // Standard Error: 1_099
            .saturating_add(Weight::from_parts(434_331, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_680_000 picoseconds.
        Weight::from_parts(142_601_242, 0)
            // Standard Error: 449_521
            .saturating_add(Weight::from_parts(149_279_284, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 112_218_000 picoseconds.
        Weight::from_parts(113_817_000, 0)
            // Standard Error: 2_226
            .saturating_add(Weight::from_parts(649_916, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 120_613_000 picoseconds.
        Weight::from_parts(110_193_742, 0)
            // Standard Error: 937
            .saturating_add(Weight::from_parts(428_822, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 114_497_000 picoseconds.
        Weight::from_parts(105_638_799, 0)
            // Standard Error: 1_252
            .saturating_add(Weight::from_parts(432_251, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_217_000 picoseconds.
        Weight::from_parts(92_630_057, 0)
            // Standard Error: 354_277
            .saturating_add(Weight::from_parts(86_060_216, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_093_000 picoseconds.
        Weight::from_parts(93_592_286, 0)
            // Standard Error: 331_794
            .saturating_add(Weight::from_parts(82_902_521, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_053_000 picoseconds.
        Weight::from_parts(89_700_469, 0)
            // Standard Error: 362_820
            .saturating_add(Weight::from_parts(87_420_305, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 716_864_000 picoseconds.
        Weight::from_parts(750_759_383, 0)
            // Standard Error: 445_696
            .saturating_add(Weight::from_parts(105_666_615, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 740_834_000 picoseconds.
        Weight::from_parts(760_551_430, 0)
            // Standard Error: 1_116
            .saturating_add(Weight::from_parts(149_609, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_460_258_000 picoseconds.
        Weight::from_parts(2_583_576_600, 0)
            // Standard Error: 470_462
            .saturating_add(Weight::from_parts(128_127_337, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_585_026_000 picoseconds.
        Weight::from_parts(2_542_215_331, 0)
            // Standard Error: 7_469
            .saturating_add(Weight::from_parts(13_659_923, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_449_000 picoseconds.
        Weight::from_parts(120_125_301, 0)
            // Standard Error: 375_409
            .saturating_add(Weight::from_parts(109_312_464, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 159_646_000 picoseconds.
        Weight::from_parts(162_584_000, 0)
            // Standard Error: 49_505
            .saturating_add(Weight::from_parts(25_683_545, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_691_000 picoseconds.
        Weight::from_parts(89_825_034, 0)
            // Standard Error: 350_481
            .saturating_add(Weight::from_parts(83_507_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 173_990_000 picoseconds.
        Weight::from_parts(245_812_485, 0)
            // Standard Error: 274_409
            .saturating_add(Weight::from_parts(158_779_325, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_628_000 picoseconds.
        Weight::from_parts(175_641_958, 0)
            // Standard Error: 363_919
            .saturating_add(Weight::from_parts(350_888_429, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 46_110_077_000 picoseconds.
        Weight::from_parts(46_272_673_000, 0)
            // Standard Error: 272_315
            .saturating_add(Weight::from_parts(7_081_983, 0).saturating_mul(p.into()))
            // Standard Error: 272_301
            .saturating_add(Weight::from_parts(175_013_370, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_639_000 picoseconds.
        Weight::from_parts(177_127_532, 0)
            // Standard Error: 385_608
            .saturating_add(Weight::from_parts(354_989_333, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 45_956_833_000 picoseconds.
        Weight::from_parts(46_117_144_000, 0)
            // Standard Error: 277_069
            .saturating_add(Weight::from_parts(6_827_941, 0).saturating_mul(p.into()))
            // Standard Error: 277_055
            .saturating_add(Weight::from_parts(175_212_549, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_995_000 picoseconds.
        Weight::from_parts(114_334_319, 0)
            // Standard Error: 33_060
            .saturating_add(Weight::from_parts(2_034_334, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 95_867_000 picoseconds.
        Weight::from_parts(128_140_008, 1131)
            // Standard Error: 15_122
            .saturating_add(Weight::from_parts(16_259_170, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 97_831_000 picoseconds.
        Weight::from_parts(101_256_000, 1131)
            // Standard Error: 33_706
            .saturating_add(Weight::from_parts(40_115_182, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_143_377_000 picoseconds.
        Weight::from_parts(8_059_320_728, 5069931)
            // Standard Error: 95_678
            .saturating_add(Weight::from_parts(41_330_492, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 97_006_000 picoseconds.
        Weight::from_parts(99_792_000, 1939)
            // Standard Error: 27_026
            .saturating_add(Weight::from_parts(53_075_109, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 103_389_000 picoseconds.
        Weight::from_parts(108_824_044, 1131)
            // Standard Error: 62_931
            .saturating_add(Weight::from_parts(39_298_132, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 758_131_000 picoseconds.
        Weight::from_parts(826_933_771, 1496)
            // Standard Error: 180_734
            .saturating_add(Weight::from_parts(42_885_638, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_210_916_000 picoseconds.
        Weight::from_parts(1_229_451_620, 317931)
            // Standard Error: 154_532
            .saturating_add(Weight::from_parts(45_772_027, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_194_000 picoseconds.
        Weight::from_parts(12_881_912, 0)
            // Standard Error: 305_600
            .saturating_add(Weight::from_parts(73_228_624, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_434_798_000 picoseconds.
        Weight::from_parts(4_212_071_671, 0)
            // Standard Error: 92_055
            .saturating_add(Weight::from_parts(5_032_696, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_443_027_000 picoseconds.
        Weight::from_parts(4_213_011_885, 0)
            // Standard Error: 86_942
            .saturating_add(Weight::from_parts(5_056_975, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_213_197_000 picoseconds.
        Weight::from_parts(11_891_256_955, 0)
            // Standard Error: 192_552
            .saturating_add(Weight::from_parts(12_227_755, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_247_159_000 picoseconds.
        Weight::from_parts(11_211_889_796, 0)
            // Standard Error: 202_010
            .saturating_add(Weight::from_parts(12_376_418, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_467_000 picoseconds.
        Weight::from_parts(2_504_000, 0)
            // Standard Error: 8_279
            .saturating_add(Weight::from_parts(3_808_114, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_497_000 picoseconds.
        Weight::from_parts(488_810, 0)
            // Standard Error: 8_478
            .saturating_add(Weight::from_parts(3_155_766, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_386_000 picoseconds.
        Weight::from_parts(3_648_716, 0)
            // Standard Error: 958
            .saturating_add(Weight::from_parts(1_561_444, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_441_000 picoseconds.
        Weight::from_parts(2_528_000, 0)
            // Standard Error: 9_169
            .saturating_add(Weight::from_parts(2_918_341, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_326_000 picoseconds.
        Weight::from_parts(1_820_146, 0)
            // Standard Error: 12_557
            .saturating_add(Weight::from_parts(5_177_693, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_103_000 picoseconds.
        Weight::from_parts(4_849_506, 0)
            // Standard Error: 1_969
            .saturating_add(Weight::from_parts(166_982, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_469_000 picoseconds.
        Weight::from_parts(4_561_062, 0)
            // Standard Error: 6_222
            .saturating_add(Weight::from_parts(2_572_927, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_572_927 -
            2_405_375, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_416_000 picoseconds.
        Weight::from_parts(4_288_403, 0)
            // Standard Error: 12_061
            .saturating_add(Weight::from_parts(2_405_375, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_866_000 picoseconds.
        Weight::from_parts(16_567_194, 0)
            // Standard Error: 27_895
            .saturating_add(Weight::from_parts(9_947_834, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_567_000 picoseconds.
        Weight::from_parts(2_460_507, 0)
            // Standard Error: 7_418
            .saturating_add(Weight::from_parts(1_215_450, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_351_000 picoseconds.
        Weight::from_parts(5_776_015, 0)
            // Standard Error: 16
            .saturating_add(Weight::from_parts(8, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_890_000 picoseconds.
        Weight::from_parts(5_159_995, 0)
            // Standard Error: 3_044
            .saturating_add(Weight::from_parts(415_740, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_969_000 picoseconds.
        Weight::from_parts(3_789_487, 0)
            // Standard Error: 5_623
            .saturating_add(Weight::from_parts(1_018_781, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_977_000 picoseconds.
        Weight::from_parts(5_879_595, 0)
            // Standard Error: 4_762
            .saturating_add(Weight::from_parts(963_136, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_511_000 picoseconds.
        Weight::from_parts(1_373_224, 0)
            // Standard Error: 10_459
            .saturating_add(Weight::from_parts(841_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_520_000 picoseconds.
        Weight::from_parts(6_626_000, 0)
            // Standard Error: 8_030
            .saturating_add(Weight::from_parts(1_366_299, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_230_000 picoseconds.
        Weight::from_parts(3_219_789, 0)
            // Standard Error: 11_999
            .saturating_add(Weight::from_parts(6_945_495, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_401_000 picoseconds.
        Weight::from_parts(2_429_000, 0)
            // Standard Error: 6_642
            .saturating_add(Weight::from_parts(3_355_458, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_411_000 picoseconds.
        Weight::from_parts(2_465_000, 0)
            // Standard Error: 5_677
            .saturating_add(Weight::from_parts(3_107_319, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_372_000 picoseconds.
        Weight::from_parts(2_515_000, 0)
            // Standard Error: 7_429
            .saturating_add(Weight::from_parts(3_110_198, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_345_000 picoseconds.
        Weight::from_parts(2_448_000, 0)
            // Standard Error: 4_579
            .saturating_add(Weight::from_parts(2_633_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_387_000 picoseconds.
        Weight::from_parts(2_453_000, 0)
            // Standard Error: 4_094
            .saturating_add(Weight::from_parts(586_143, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_467_000 picoseconds.
        Weight::from_parts(1_390_256, 0)
            // Standard Error: 3_520
            .saturating_add(Weight::from_parts(427_034, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_467_000 picoseconds.
        Weight::from_parts(2_502_000, 0)
            // Standard Error: 10_803
            .saturating_add(Weight::from_parts(1_907_805, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_415_000 picoseconds.
        Weight::from_parts(2_464_000, 0)
            // Standard Error: 7_955
            .saturating_add(Weight::from_parts(1_205_117, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_414_000 picoseconds.
        Weight::from_parts(1_337_270, 0)
            // Standard Error: 3_443
            .saturating_add(Weight::from_parts(406_991, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_403_000 picoseconds.
        Weight::from_parts(989_595, 0)
            // Standard Error: 4_009
            .saturating_add(Weight::from_parts(423_498, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_353_000 picoseconds.
        Weight::from_parts(355_414, 0)
            // Standard Error: 4_981
            .saturating_add(Weight::from_parts(596_078, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_309_000 picoseconds.
        Weight::from_parts(10_994, 0)
            // Standard Error: 6_421
            .saturating_add(Weight::from_parts(599_178, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_443_000 picoseconds.
        Weight::from_parts(565_770, 0)
            // Standard Error: 4_583
            .saturating_add(Weight::from_parts(539_797, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_457_000 picoseconds.
        Weight::from_parts(1_653_911, 0)
            // Standard Error: 3_343
            .saturating_add(Weight::from_parts(353_324, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_339_000 picoseconds.
        Weight::from_parts(2_533_942, 0)
            // Standard Error: 1_524
            .saturating_add(Weight::from_parts(180_117, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_394_000 picoseconds.
        Weight::from_parts(2_879_654, 0)
            // Standard Error: 1_640
            .saturating_add(Weight::from_parts(166_554, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_396_000 picoseconds.
        Weight::from_parts(2_457_000, 0)
            // Standard Error: 11_270
            .saturating_add(Weight::from_parts(1_899_730, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_422_000 picoseconds.
        Weight::from_parts(2_470_000, 0)
            // Standard Error: 6_456
            .saturating_add(Weight::from_parts(1_158_889, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_453_000 picoseconds.
        Weight::from_parts(2_486_000, 0)
            // Standard Error: 11_359
            .saturating_add(Weight::from_parts(1_872_539, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_386_000 picoseconds.
        Weight::from_parts(2_446_000, 0)
            // Standard Error: 7_212
            .saturating_add(Weight::from_parts(1_153_160, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_422_000 picoseconds.
        Weight::from_parts(2_497_000, 0)
            // Standard Error: 11_314
            .saturating_add(Weight::from_parts(1_852_748, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_468_000 picoseconds.
        Weight::from_parts(2_541_000, 0)
            // Standard Error: 7_953
            .saturating_add(Weight::from_parts(1_196_255, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_349_000 picoseconds.
        Weight::from_parts(2_433_000, 0)
            // Standard Error: 10_766
            .saturating_add(Weight::from_parts(1_845_657, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_409_000 picoseconds.
        Weight::from_parts(2_500_000, 0)
            // Standard Error: 7_514
            .saturating_add(Weight::from_parts(1_158_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_362_000 picoseconds.
        Weight::from_parts(2_501_000, 0)
            // Standard Error: 11_698
            .saturating_add(Weight::from_parts(1_832_829, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_431_000 picoseconds.
        Weight::from_parts(2_490_000, 0)
            // Standard Error: 6_808
            .saturating_add(Weight::from_parts(1_116_723, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_468_000 picoseconds.
        Weight::from_parts(2_484_000, 0)
            // Standard Error: 11_177
            .saturating_add(Weight::from_parts(1_856_355, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_412_000 picoseconds.
        Weight::from_parts(2_501_000, 0)
            // Standard Error: 7_837
            .saturating_add(Weight::from_parts(1_133_844, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_331_000 picoseconds.
        Weight::from_parts(2_407_000, 0)
            // Standard Error: 12_565
            .saturating_add(Weight::from_parts(1_895_662, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_388_000 picoseconds.
        Weight::from_parts(2_499_000, 0)
            // Standard Error: 8_239
            .saturating_add(Weight::from_parts(1_144_576, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_413_000 picoseconds.
        Weight::from_parts(2_501_000, 0)
            // Standard Error: 8_664
            .saturating_add(Weight::from_parts(1_908_331, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_429_000 picoseconds.
        Weight::from_parts(2_479_000, 0)
            // Standard Error: 7_205
            .saturating_add(Weight::from_parts(1_153_898, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_364_000 picoseconds.
        Weight::from_parts(2_477_000, 0)
            // Standard Error: 11_806
            .saturating_add(Weight::from_parts(1_824_720, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_453_000 picoseconds.
        Weight::from_parts(2_547_000, 0)
            // Standard Error: 8_672
            .saturating_add(Weight::from_parts(1_140_530, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_431_000 picoseconds.
        Weight::from_parts(2_511_000, 0)
            // Standard Error: 10_765
            .saturating_add(Weight::from_parts(1_889_665, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_385_000 picoseconds.
        Weight::from_parts(2_481_000, 0)
            // Standard Error: 9_181
            .saturating_add(Weight::from_parts(1_193_201, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_395_000 picoseconds.
        Weight::from_parts(2_504_000, 0)
            // Standard Error: 7_746
            .saturating_add(Weight::from_parts(1_354_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_375_000 picoseconds.
        Weight::from_parts(2_497_000, 0)
            // Standard Error: 4_791
            .saturating_add(Weight::from_parts(634_050, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_394_000 picoseconds.
        Weight::from_parts(2_484_000, 0)
            // Standard Error: 8_869
            .saturating_add(Weight::from_parts(1_249_860, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_431_000 picoseconds.
        Weight::from_parts(2_557_000, 0)
            // Standard Error: 4_519
            .saturating_add(Weight::from_parts(630_708, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_391_000 picoseconds.
        Weight::from_parts(2_502_000, 0)
            // Standard Error: 11_455
            .saturating_add(Weight::from_parts(1_815_926, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_405_000 picoseconds.
        Weight::from_parts(2_466_000, 0)
            // Standard Error: 8_787
            .saturating_add(Weight::from_parts(1_198_255, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_359_000 picoseconds.
        Weight::from_parts(2_454_000, 0)
            // Standard Error: 8_447
            .saturating_add(Weight::from_parts(2_611_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_433_000 picoseconds.
        Weight::from_parts(2_467_000, 0)
            // Standard Error: 7_115
            .saturating_add(Weight::from_parts(2_379_313, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_350_000 picoseconds.
        Weight::from_parts(1_932_276, 0)
            // Standard Error: 15_466
            .saturating_add(Weight::from_parts(2_924_777, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_396_000 picoseconds.
        Weight::from_parts(2_444_000, 0)
            // Standard Error: 6_809
            .saturating_add(Weight::from_parts(2_455_804, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_472_000 picoseconds.
        Weight::from_parts(2_555_000, 0)
            // Standard Error: 19_203
            .saturating_add(Weight::from_parts(9_064_512, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_354_000 picoseconds.
        Weight::from_parts(2_430_000, 0)
            // Standard Error: 24_440
            .saturating_add(Weight::from_parts(7_388_642, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_401_000 picoseconds.
        Weight::from_parts(2_434_763, 0)
            // Standard Error: 17_419
            .saturating_add(Weight::from_parts(2_921_970, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_404_000 picoseconds.
        Weight::from_parts(2_475_000, 0)
            // Standard Error: 6_939
            .saturating_add(Weight::from_parts(2_423_772, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_463_000 picoseconds.
        Weight::from_parts(2_539_000, 0)
            // Standard Error: 8_301
            .saturating_add(Weight::from_parts(1_250_600, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_353_000 picoseconds.
        Weight::from_parts(2_457_000, 0)
            // Standard Error: 4_211
            .saturating_add(Weight::from_parts(634_637, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_383_000 picoseconds.
        Weight::from_parts(2_437_000, 0)
            // Standard Error: 9_552
            .saturating_add(Weight::from_parts(1_260_059, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_380_000 picoseconds.
        Weight::from_parts(2_445_000, 0)
            // Standard Error: 4_633
            .saturating_add(Weight::from_parts(653_822, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_331_000 picoseconds.
        Weight::from_parts(2_490_000, 0)
            // Standard Error: 8_055
            .saturating_add(Weight::from_parts(1_253_044, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_415_000 picoseconds.
        Weight::from_parts(2_534_000, 0)
            // Standard Error: 4_042
            .saturating_add(Weight::from_parts(632_391, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_452_000 picoseconds.
        Weight::from_parts(2_489_000, 0)
            // Standard Error: 7_395
            .saturating_add(Weight::from_parts(1_059_185, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_468_000 picoseconds.
        Weight::from_parts(2_489_000, 0)
            // Standard Error: 4_182
            .saturating_add(Weight::from_parts(579_858, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_416_000 picoseconds.
        Weight::from_parts(2_483_000, 0)
            // Standard Error: 6_874
            .saturating_add(Weight::from_parts(1_090_290, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_498_000 picoseconds.
        Weight::from_parts(2_541_000, 0)
            // Standard Error: 3_704
            .saturating_add(Weight::from_parts(572_447, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_398_000 picoseconds.
        Weight::from_parts(2_460_000, 0)
            // Standard Error: 6_699
            .saturating_add(Weight::from_parts(1_070_022, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_411_000 picoseconds.
        Weight::from_parts(2_484_000, 0)
            // Standard Error: 4_376
            .saturating_add(Weight::from_parts(595_442, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_384_000 picoseconds.
        Weight::from_parts(2_419_000, 0)
            // Standard Error: 6_993
            .saturating_add(Weight::from_parts(1_073_753, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_250_000 picoseconds.
        Weight::from_parts(2_475_000, 0)
            // Standard Error: 4_440
            .saturating_add(Weight::from_parts(587_338, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_409_000 picoseconds.
        Weight::from_parts(2_527_000, 0)
            // Standard Error: 6_311
            .saturating_add(Weight::from_parts(1_052_285, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_358_000 picoseconds.
        Weight::from_parts(2_532_000, 0)
            // Standard Error: 3_753
            .saturating_add(Weight::from_parts(579_703, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_resume_session() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `352`
        //  Estimated: `4169`
        // Minimum execution time: 6_146_000 picoseconds.
        Weight::from_parts(6_404_000, 4169)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1107`
        //  Estimated: `24053`
        // Minimum execution time: 63_019_000 picoseconds.
        Weight::from_parts(64_381_000, 24053)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `888`
        //  Estimated: `22158`
        // Minimum execution time: 47_642_000 picoseconds.
        Weight::from_parts(49_120_000, 22158)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1010`
        //  Estimated: `34619`
        // Minimum execution time: 77_188_000 picoseconds.
        Weight::from_parts(78_878_000, 34619)
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `695`
        //  Estimated: `20509`
        // Minimum execution time: 32_804_000 picoseconds.
        Weight::from_parts(34_214_000, 20509)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `976`
        //  Estimated: `26636`
        // Minimum execution time: 46_785_000 picoseconds.
        Weight::from_parts(48_750_000, 26636)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_490_000 picoseconds.
        Weight::from_parts(3_693_000, 3545)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1626`
        //  Estimated: `58232`
        // Minimum execution time: 110_128_000 picoseconds.
        Weight::from_parts(112_307_000, 58232)
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1332`
        //  Estimated: `46962`
        // Minimum execution time: 92_602_000 picoseconds.
        Weight::from_parts(94_956_000, 46962)
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2303 + c * (16400 ±0)`
        //  Estimated: `19878 + c * (84480 ±0)`
        // Minimum execution time: 30_096_000 picoseconds.
        Weight::from_parts(30_378_000, 19878)
            // Standard Error: 76_598
            .saturating_add(Weight::from_parts(39_119_098, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 84480).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program_uninited(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3129 + c * (42 ±0)`
        //  Estimated: `60575 + c * (2947 ±0)`
        // Minimum execution time: 88_995_000 picoseconds.
        Weight::from_parts(74_471_031, 60575)
            // Standard Error: 1_987
            .saturating_add(Weight::from_parts(1_040_647, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2947).saturating_mul(c.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
/// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_468_000 picoseconds.
        Weight::from_parts(103_922_510, 0)
            // Standard Error: 77_234
            .saturating_add(Weight::from_parts(17_036_662, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_801_000 picoseconds.
        Weight::from_parts(107_713_522, 0)
            // Standard Error: 80_800
            .saturating_add(Weight::from_parts(14_812_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_960_000 picoseconds.
        Weight::from_parts(105_526_464, 0)
            // Standard Error: 79_514
            .saturating_add(Weight::from_parts(19_497_700, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_070_000 picoseconds.
        Weight::from_parts(104_107_894, 0)
            // Standard Error: 82_421
            .saturating_add(Weight::from_parts(20_227_692, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 722_789_000 picoseconds.
        Weight::from_parts(739_784_980, 0)
            // Standard Error: 522_343
            .saturating_add(Weight::from_parts(26_742_460, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 712_570_000 picoseconds.
        Weight::from_parts(742_765_412, 0)
            // Standard Error: 494_026
            .saturating_add(Weight::from_parts(7_538_442, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_390_000 picoseconds.
        Weight::from_parts(118_500_474, 0)
            // Standard Error: 85_255
            .saturating_add(Weight::from_parts(3_018_292, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_095_000 picoseconds.
        Weight::from_parts(114_013_970, 0)
            // Standard Error: 77_083
            .saturating_add(Weight::from_parts(10_785_200, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_895_000 picoseconds.
        Weight::from_parts(102_593_046, 0)
            // Standard Error: 2_201_286
            .saturating_add(Weight::from_parts(546_751_252, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_826_000 picoseconds.
        Weight::from_parts(101_779_958, 0)
            // Standard Error: 2_257_570
            .saturating_add(Weight::from_parts(544_158_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_404_000 picoseconds.
        Weight::from_parts(103_227_904, 0)
            // Standard Error: 2_036_224
            .saturating_add(Weight::from_parts(510_665_058, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_288_000 picoseconds.
        Weight::from_parts(108_080_260, 0)
            // Standard Error: 2_275_072
            .saturating_add(Weight::from_parts(536_124_992, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_442_000 picoseconds.
        Weight::from_parts(102_859_592, 0)
            // Standard Error: 2_289_077
            .saturating_add(Weight::from_parts(550_682_358, 0).saturating_mul(r.into()))
    }
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_017_000 picoseconds.
        Weight::from_parts(1_056_000, 0)
            // Standard Error: 910
            .saturating_add(Weight::from_parts(247_114, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_568_000 picoseconds.
        Weight::from_parts(3_654_000, 3610)
            // Standard Error: 1_305
            .saturating_add(Weight::from_parts(681_579, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_112_000 picoseconds.
        Weight::from_parts(98_996_094, 0)
            // Standard Error: 5_230
            .saturating_add(Weight::from_parts(2_323_092, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1372`
        //  Estimated: `51905`
        // Minimum execution time: 108_663_000 picoseconds.
        Weight::from_parts(110_815_000, 51905)
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `992`
        //  Estimated: `21579`
        // Minimum execution time: 56_256_000 picoseconds.
        Weight::from_parts(57_657_000, 21579)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `638`
        //  Estimated: `17486`
        // Minimum execution time: 30_434_000 picoseconds.
        Weight::from_parts(31_342_000, 17486)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_089_000 picoseconds.
        Weight::from_parts(9_238_860, 7640)
            // Standard Error: 33_823
            .saturating_add(Weight::from_parts(13_722_797, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1593 + c * (16389 ±0)`
        //  Estimated: `43266 + c * (131112 ±0)`
        // Minimum execution time: 72_033_000 picoseconds.
        Weight::from_parts(72_673_000, 43266)
            // Standard Error: 160_040
            .saturating_add(Weight::from_parts(53_828_460, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `5402`
        // Minimum execution time: 78_723_000 picoseconds.
        Weight::from_parts(36_280_364, 5402)
            // Standard Error: 53_469
            .saturating_add(Weight::from_parts(59_665_936, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1111`
        //  Estimated: `50600`
        // Minimum execution time: 95_464_000 picoseconds.
        Weight::from_parts(134_019_634, 50600)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_565, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `521`
        //  Estimated: `45152`
        // Minimum execution time: 10_899_507_000 picoseconds.
        Weight::from_parts(250_736_393, 45152)
            // Standard Error: 181_397
            .saturating_add(Weight::from_parts(60_351_007, 0).saturating_mul(c.into()))
            // Standard Error: 10
            .saturating_add(Weight::from_parts(2_509, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `531`
        //  Estimated: `31266`
        // Minimum execution time: 75_586_000 picoseconds.
        Weight::from_parts(63_636_044, 31266)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(1_026, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1371`
        //  Estimated: `54435`
        // Minimum execution time: 126_165_000 picoseconds.
        Weight::from_parts(99_976_587, 54435)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_066, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `121468`
        // Minimum execution time: 374_312_000 picoseconds.
        Weight::from_parts(388_097_804, 121468)
            // Standard Error: 1_511
            .saturating_add(Weight::from_parts(7_609, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(35_u64))
            .saturating_add(RocksDbWeight::get().writes(26_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `121468`
        // Minimum execution time: 388_636_000 picoseconds.
        Weight::from_parts(409_534_982, 121468)
            .saturating_add(RocksDbWeight::get().reads(35_u64))
            .saturating_add(RocksDbWeight::get().writes(26_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 59_452_000 picoseconds.
        Weight::from_parts(59_843_000, 3899)
            // Standard Error: 36_511
            .saturating_add(Weight::from_parts(59_608_367, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_805_000 picoseconds.
        Weight::from_parts(99_198_000, 0)
            // Standard Error: 3_810_234
            .saturating_add(Weight::from_parts(715_250_057, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 498_368_000 picoseconds.
        Weight::from_parts(435_538_467, 0)
            // Standard Error: 9_028
            .saturating_add(Weight::from_parts(29_150_009, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 217_973_000 picoseconds.
        Weight::from_parts(234_381_041, 0)
            // Standard Error: 268_277
            .saturating_add(Weight::from_parts(63_662_408, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_829_000 picoseconds.
        Weight::from_parts(109_821_356, 0)
            // Standard Error: 4_504
            .saturating_add(Weight::from_parts(2_418_993, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 156_024_000 picoseconds.
        Weight::from_parts(228_502_521, 0)
            // Standard Error: 17_189
            .saturating_add(Weight::from_parts(2_063_907, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_859_000 picoseconds.
        Weight::from_parts(122_991_194, 0)
            // Standard Error: 384_239
            .saturating_add(Weight::from_parts(94_861_341, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_683_000 picoseconds.
        Weight::from_parts(87_066_972, 0)
            // Standard Error: 353_912
            .saturating_add(Weight::from_parts(90_298_593, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_910_000 picoseconds.
        Weight::from_parts(87_656_506, 0)
            // Standard Error: 342_626
            .saturating_add(Weight::from_parts(88_970_290, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_597_000 picoseconds.
        Weight::from_parts(89_710_816, 0)
            // Standard Error: 281_069
            .saturating_add(Weight::from_parts(88_008_386, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_560_000 picoseconds.
        Weight::from_parts(88_014_449, 0)
            // Standard Error: 316_919
            .saturating_add(Weight::from_parts(85_138_799, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_992_000 picoseconds.
        Weight::from_parts(92_397_225, 0)
            // Standard Error: 337_030
            .saturating_add(Weight::from_parts(84_794_630, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_921_000 picoseconds.
        Weight::from_parts(87_324_893, 0)
            // Standard Error: 345_149
            .saturating_add(Weight::from_parts(85_742_010, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_704_000 picoseconds.
        Weight::from_parts(87_853_276, 0)
            // Standard Error: 306_032
            .saturating_add(Weight::from_parts(85_891_363, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 716_879_000 picoseconds.
        Weight::from_parts(771_292_269, 0)
            // Standard Error: 460_376
            .saturating_add(Weight::from_parts(138_445_965, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 853_498_000 picoseconds.
        Weight::from_parts(867_144_000, 0)
            // Standard Error: 61_398
            .saturating_add(Weight::from_parts(13_359_556, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_066_000 picoseconds.
        Weight::from_parts(88_159_863, 0)
            // Standard Error: 347_823
            .saturating_add(Weight::from_parts(86_509_164, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_135_000 picoseconds.
        Weight::from_parts(97_308_265, 0)
            // Standard Error: 338_132
            .saturating_add(Weight::from_parts(83_796_299, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_124_000 picoseconds.
        Weight::from_parts(109_487_023, 0)
            // Standard Error: 346_809
            .saturating_add(Weight::from_parts(168_417_663, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_339_000 picoseconds.
        Weight::from_parts(103_915_000, 0)
            // Standard Error: 3_569_082
            .saturating_add(Weight::from_parts(777_519_060, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_313_000 picoseconds.
        Weight::from_parts(165_209_436, 0)
            // Standard Error: 409_910
            .saturating_add(Weight::from_parts(260_010_701, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 362_008_000 picoseconds.
        Weight::from_parts(365_111_000, 0)
            // Standard Error: 58_095
            .saturating_add(Weight::from_parts(21_117_603, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_225_000 picoseconds.
        Weight::from_parts(178_694_796, 0)
            // Standard Error: 421_157
            .saturating_add(Weight::from_parts(261_857_183, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 354_852_000 picoseconds.
        Weight::from_parts(362_377_000, 0)
            // Standard Error: 61_721
            .saturating_add(Weight::from_parts(20_990_518, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 712_329_000 picoseconds.
        Weight::from_parts(799_841_687, 0)
            // Standard Error: 465_039
            .saturating_add(Weight::from_parts(277_194_729, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 720_883_000 picoseconds.
        Weight::from_parts(818_098_220, 0)
            // Standard Error: 419_582
            .saturating_add(Weight::from_parts(278_157_803, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_776_000 picoseconds.
        Weight::from_parts(86_789_786, 0)
            // Standard Error: 313_733
            .saturating_add(Weight::from_parts(91_133_214, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_830_185_000 picoseconds.
        Weight::from_parts(1_941_180_607, 0)
            // Standard Error: 339_595
            .saturating_add(Weight::from_parts(164_114_152, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 316_805_000 picoseconds.
        Weight::from_parts(319_081_000, 0)
            // Standard Error: 56_266
            .saturating_add(Weight::from_parts(30_907_656, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_827_616_000 picoseconds.
        Weight::from_parts(1_940_342_996, 0)
            // Standard Error: 345_078
            .saturating_add(Weight::from_parts(218_735_451, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_814_021_000 picoseconds.
        Weight::from_parts(1_940_915_228, 0)
            // Standard Error: 351_421
            .saturating_add(Weight::from_parts(223_256_421, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 252_748_000 picoseconds.
        Weight::from_parts(332_851_213, 0)
            // Standard Error: 342_689
            .saturating_add(Weight::from_parts(274_246_621, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 538_620_000 picoseconds.
        Weight::from_parts(548_677_000, 0)
            // Standard Error: 59_098
            .saturating_add(Weight::from_parts(21_206_678, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_984_974_000 picoseconds.
        Weight::from_parts(2_096_185_086, 0)
            // Standard Error: 447_389
            .saturating_add(Weight::from_parts(239_127_213, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 119_068_000 picoseconds.
        Weight::from_parts(111_806_245, 0)
            // Standard Error: 1_078
            .saturating_add(Weight::from_parts(425_024, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 115_080_000 picoseconds.
        Weight::from_parts(107_425_635, 0)
            // Standard Error: 1_099
            .saturating_add(Weight::from_parts(434_331, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_680_000 picoseconds.
        Weight::from_parts(142_601_242, 0)
            // Standard Error: 449_521
            .saturating_add(Weight::from_parts(149_279_284, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 112_218_000 picoseconds.
        Weight::from_parts(113_817_000, 0)
            // Standard Error: 2_226
            .saturating_add(Weight::from_parts(649_916, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 120_613_000 picoseconds.
        Weight::from_parts(110_193_742, 0)
            // Standard Error: 937
            .saturating_add(Weight::from_parts(428_822, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 114_497_000 picoseconds.
        Weight::from_parts(105_638_799, 0)
            // Standard Error: 1_252
            .saturating_add(Weight::from_parts(432_251, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_217_000 picoseconds.
        Weight::from_parts(92_630_057, 0)
            // Standard Error: 354_277
            .saturating_add(Weight::from_parts(86_060_216, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_093_000 picoseconds.
        Weight::from_parts(93_592_286, 0)
            // Standard Error: 331_794
            .saturating_add(Weight::from_parts(82_902_521, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_053_000 picoseconds.
        Weight::from_parts(89_700_469, 0)
            // Standard Error: 362_820
            .saturating_add(Weight::from_parts(87_420_305, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 716_864_000 picoseconds.
        Weight::from_parts(750_759_383, 0)
            // Standard Error: 445_696
            .saturating_add(Weight::from_parts(105_666_615, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 740_834_000 picoseconds.
        Weight::from_parts(760_551_430, 0)
            // Standard Error: 1_116
            .saturating_add(Weight::from_parts(149_609, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_460_258_000 picoseconds.
        Weight::from_parts(2_583_576_600, 0)
            // Standard Error: 470_462
            .saturating_add(Weight::from_parts(128_127_337, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_585_026_000 picoseconds.
        Weight::from_parts(2_542_215_331, 0)
            // Standard Error: 7_469
            .saturating_add(Weight::from_parts(13_659_923, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_449_000 picoseconds.
        Weight::from_parts(120_125_301, 0)
            // Standard Error: 375_409
            .saturating_add(Weight::from_parts(109_312_464, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 159_646_000 picoseconds.
        Weight::from_parts(162_584_000, 0)
            // Standard Error: 49_505
            .saturating_add(Weight::from_parts(25_683_545, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_691_000 picoseconds.
        Weight::from_parts(89_825_034, 0)
            // Standard Error: 350_481
            .saturating_add(Weight::from_parts(83_507_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 173_990_000 picoseconds.
        Weight::from_parts(245_812_485, 0)
            // Standard Error: 274_409
            .saturating_add(Weight::from_parts(158_779_325, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_628_000 picoseconds.
        Weight::from_parts(175_641_958, 0)
            // Standard Error: 363_919
            .saturating_add(Weight::from_parts(350_888_429, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 46_110_077_000 picoseconds.
        Weight::from_parts(46_272_673_000, 0)
            // Standard Error: 272_315
            .saturating_add(Weight::from_parts(7_081_983, 0).saturating_mul(p.into()))
            // Standard Error: 272_301
            .saturating_add(Weight::from_parts(175_013_370, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_639_000 picoseconds.
        Weight::from_parts(177_127_532, 0)
            // Standard Error: 385_608
            .saturating_add(Weight::from_parts(354_989_333, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 45_956_833_000 picoseconds.
        Weight::from_parts(46_117_144_000, 0)
            // Standard Error: 277_069
            .saturating_add(Weight::from_parts(6_827_941, 0).saturating_mul(p.into()))
            // Standard Error: 277_055
            .saturating_add(Weight::from_parts(175_212_549, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_995_000 picoseconds.
        Weight::from_parts(114_334_319, 0)
            // Standard Error: 33_060
            .saturating_add(Weight::from_parts(2_034_334, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 95_867_000 picoseconds.
        Weight::from_parts(128_140_008, 1131)
            // Standard Error: 15_122
            .saturating_add(Weight::from_parts(16_259_170, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 97_831_000 picoseconds.
        Weight::from_parts(101_256_000, 1131)
            // Standard Error: 33_706
            .saturating_add(Weight::from_parts(40_115_182, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_143_377_000 picoseconds.
        Weight::from_parts(8_059_320_728, 5069931)
            // Standard Error: 95_678
            .saturating_add(Weight::from_parts(41_330_492, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 97_006_000 picoseconds.
        Weight::from_parts(99_792_000, 1939)
            // Standard Error: 27_026
            .saturating_add(Weight::from_parts(53_075_109, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 103_389_000 picoseconds.
        Weight::from_parts(108_824_044, 1131)
            // Standard Error: 62_931
            .saturating_add(Weight::from_parts(39_298_132, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 758_131_000 picoseconds.
        Weight::from_parts(826_933_771, 1496)
            // Standard Error: 180_734
            .saturating_add(Weight::from_parts(42_885_638, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_210_916_000 picoseconds.
        Weight::from_parts(1_229_451_620, 317931)
            // Standard Error: 154_532
            .saturating_add(Weight::from_parts(45_772_027, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_194_000 picoseconds.
        Weight::from_parts(12_881_912, 0)
            // Standard Error: 305_600
            .saturating_add(Weight::from_parts(73_228_624, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_434_798_000 picoseconds.
        Weight::from_parts(4_212_071_671, 0)
            // Standard Error: 92_055
            .saturating_add(Weight::from_parts(5_032_696, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_443_027_000 picoseconds.
        Weight::from_parts(4_213_011_885, 0)
            // Standard Error: 86_942
            .saturating_add(Weight::from_parts(5_056_975, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_213_197_000 picoseconds.
        Weight::from_parts(11_891_256_955, 0)
            // Standard Error: 192_552
            .saturating_add(Weight::from_parts(12_227_755, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_247_159_000 picoseconds.
        Weight::from_parts(11_211_889_796, 0)
            // Standard Error: 202_010
            .saturating_add(Weight::from_parts(12_376_418, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_467_000 picoseconds.
        Weight::from_parts(2_504_000, 0)
            // Standard Error: 8_279
            .saturating_add(Weight::from_parts(3_808_114, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_497_000 picoseconds.
        Weight::from_parts(488_810, 0)
            // Standard Error: 8_478
            .saturating_add(Weight::from_parts(3_155_766, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_386_000 picoseconds.
        Weight::from_parts(3_648_716, 0)
            // Standard Error: 958
            .saturating_add(Weight::from_parts(1_561_444, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_441_000 picoseconds.
        Weight::from_parts(2_528_000, 0)
            // Standard Error: 9_169
            .saturating_add(Weight::from_parts(2_918_341, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_326_000 picoseconds.
        Weight::from_parts(1_820_146, 0)
            // Standard Error: 12_557
            .saturating_add(Weight::from_parts(5_177_693, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_103_000 picoseconds.
        Weight::from_parts(4_849_506, 0)
            // Standard Error: 1_969
            .saturating_add(Weight::from_parts(166_982, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_469_000 picoseconds.
        Weight::from_parts(4_561_062, 0)
            // Standard Error: 6_222
            .saturating_add(Weight::from_parts(2_572_927, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_572_927 -
            2_405_375, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_416_000 picoseconds.
        Weight::from_parts(4_288_403, 0)
            // Standard Error: 12_061
            .saturating_add(Weight::from_parts(2_405_375, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_866_000 picoseconds.
        Weight::from_parts(16_567_194, 0)
            // Standard Error: 27_895
            .saturating_add(Weight::from_parts(9_947_834, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_567_000 picoseconds.
        Weight::from_parts(2_460_507, 0)
            // Standard Error: 7_418
            .saturating_add(Weight::from_parts(1_215_450, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_351_000 picoseconds.
        Weight::from_parts(5_776_015, 0)
            // Standard Error: 16
            .saturating_add(Weight::from_parts(8, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_890_000 picoseconds.
        Weight::from_parts(5_159_995, 0)
            // Standard Error: 3_044
            .saturating_add(Weight::from_parts(415_740, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_969_000 picoseconds.
        Weight::from_parts(3_789_487, 0)
            // Standard Error: 5_623
            .saturating_add(Weight::from_parts(1_018_781, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_977_000 picoseconds.
        Weight::from_parts(5_879_595, 0)
            // Standard Error: 4_762
            .saturating_add(Weight::from_parts(963_136, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_511_000 picoseconds.
        Weight::from_parts(1_373_224, 0)
            // Standard Error: 10_459
            .saturating_add(Weight::from_parts(841_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_520_000 picoseconds.
        Weight::from_parts(6_626_000, 0)
            // Standard Error: 8_030
            .saturating_add(Weight::from_parts(1_366_299, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_230_000 picoseconds.
        Weight::from_parts(3_219_789, 0)
            // Standard Error: 11_999
            .saturating_add(Weight::from_parts(6_945_495, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_401_000 picoseconds.
        Weight::from_parts(2_429_000, 0)
            // Standard Error: 6_642
            .saturating_add(Weight::from_parts(3_355_458, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_411_000 picoseconds.
        Weight::from_parts(2_465_000, 0)
            // Standard Error: 5_677
            .saturating_add(Weight::from_parts(3_107_319, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_372_000 picoseconds.
        Weight::from_parts(2_515_000, 0)
            // Standard Error: 7_429
            .saturating_add(Weight::from_parts(3_110_198, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_345_000 picoseconds.
        Weight::from_parts(2_448_000, 0)
            // Standard Error: 4_579
            .saturating_add(Weight::from_parts(2_633_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_387_000 picoseconds.
        Weight::from_parts(2_453_000, 0)
            // Standard Error: 4_094
            .saturating_add(Weight::from_parts(586_143, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_467_000 picoseconds.
        Weight::from_parts(1_390_256, 0)
            // Standard Error: 3_520
            .saturating_add(Weight::from_parts(427_034, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_467_000 picoseconds.
        Weight::from_parts(2_502_000, 0)
            // Standard Error: 10_803
            .saturating_add(Weight::from_parts(1_907_805, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_415_000 picoseconds.
        Weight::from_parts(2_464_000, 0)
            // Standard Error: 7_955
            .saturating_add(Weight::from_parts(1_205_117, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_414_000 picoseconds.
        Weight::from_parts(1_337_270, 0)
            // Standard Error: 3_443
            .saturating_add(Weight::from_parts(406_991, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_403_000 picoseconds.
        Weight::from_parts(989_595, 0)
            // Standard Error: 4_009
            .saturating_add(Weight::from_parts(423_498, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_353_000 picoseconds.
        Weight::from_parts(355_414, 0)
            // Standard Error: 4_981
            .saturating_add(Weight::from_parts(596_078, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_309_000 picoseconds.
        Weight::from_parts(10_994, 0)
            // Standard Error: 6_421
            .saturating_add(Weight::from_parts(599_178, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_443_000 picoseconds.
        Weight::from_parts(565_770, 0)
            // Standard Error: 4_583
            .saturating_add(Weight::from_parts(539_797, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_457_000 picoseconds.
        Weight::from_parts(1_653_911, 0)
            // Standard Error: 3_343
            .saturating_add(Weight::from_parts(353_324, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_339_000 picoseconds.
        Weight::from_parts(2_533_942, 0)
            // Standard Error: 1_524
            .saturating_add(Weight::from_parts(180_117, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_394_000 picoseconds.
        Weight::from_parts(2_879_654, 0)
            // Standard Error: 1_640
            .saturating_add(Weight::from_parts(166_554, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_396_000 picoseconds.
        Weight::from_parts(2_457_000, 0)
            // Standard Error: 11_270
            .saturating_add(Weight::from_parts(1_899_730, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_422_000 picoseconds.
        Weight::from_parts(2_470_000, 0)
            // Standard Error: 6_456
            .saturating_add(Weight::from_parts(1_158_889, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_453_000 picoseconds.
        Weight::from_parts(2_486_000, 0)
            // Standard Error: 11_359
            .saturating_add(Weight::from_parts(1_872_539, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_386_000 picoseconds.
        Weight::from_parts(2_446_000, 0)
            // Standard Error: 7_212
            .saturating_add(Weight::from_parts(1_153_160, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_422_000 picoseconds.
        Weight::from_parts(2_497_000, 0)
            // Standard Error: 11_314
            .saturating_add(Weight::from_parts(1_852_748, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_468_000 picoseconds.
        Weight::from_parts(2_541_000, 0)
            // Standard Error: 7_953
            .saturating_add(Weight::from_parts(1_196_255, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_349_000 picoseconds.
        Weight::from_parts(2_433_000, 0)
            // Standard Error: 10_766
            .saturating_add(Weight::from_parts(1_845_657, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_409_000 picoseconds.
        Weight::from_parts(2_500_000, 0)
            // Standard Error: 7_514
            .saturating_add(Weight::from_parts(1_158_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_362_000 picoseconds.
        Weight::from_parts(2_501_000, 0)
            // Standard Error: 11_698
            .saturating_add(Weight::from_parts(1_832_829, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_431_000 picoseconds.
        Weight::from_parts(2_490_000, 0)
            // Standard Error: 6_808
            .saturating_add(Weight::from_parts(1_116_723, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_468_000 picoseconds.
        Weight::from_parts(2_484_000, 0)
            // Standard Error: 11_177
            .saturating_add(Weight::from_parts(1_856_355, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_412_000 picoseconds.
        Weight::from_parts(2_501_000, 0)
            // Standard Error: 7_837
            .saturating_add(Weight::from_parts(1_133_844, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_331_000 picoseconds.
        Weight::from_parts(2_407_000, 0)
            // Standard Error: 12_565
            .saturating_add(Weight::from_parts(1_895_662, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_388_000 picoseconds.
        Weight::from_parts(2_499_000, 0)
            // Standard Error: 8_239
            .saturating_add(Weight::from_parts(1_144_576, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_413_000 picoseconds.
        Weight::from_parts(2_501_000, 0)
            // Standard Error: 8_664
            .saturating_add(Weight::from_parts(1_908_331, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_429_000 picoseconds.
        Weight::from_parts(2_479_000, 0)
            // Standard Error: 7_205
            .saturating_add(Weight::from_parts(1_153_898, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_364_000 picoseconds.
        Weight::from_parts(2_477_000, 0)
            // Standard Error: 11_806
            .saturating_add(Weight::from_parts(1_824_720, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_453_000 picoseconds.
        Weight::from_parts(2_547_000, 0)
            // Standard Error: 8_672
            .saturating_add(Weight::from_parts(1_140_530, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_431_000 picoseconds.
        Weight::from_parts(2_511_000, 0)
            // Standard Error: 10_765
            .saturating_add(Weight::from_parts(1_889_665, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_385_000 picoseconds.
        Weight::from_parts(2_481_000, 0)
            // Standard Error: 9_181
            .saturating_add(Weight::from_parts(1_193_201, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_395_000 picoseconds.
        Weight::from_parts(2_504_000, 0)
            // Standard Error: 7_746
            .saturating_add(Weight::from_parts(1_354_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_375_000 picoseconds.
        Weight::from_parts(2_497_000, 0)
            // Standard Error: 4_791
            .saturating_add(Weight::from_parts(634_050, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_394_000 picoseconds.
        Weight::from_parts(2_484_000, 0)
            // Standard Error: 8_869
            .saturating_add(Weight::from_parts(1_249_860, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_431_000 picoseconds.
        Weight::from_parts(2_557_000, 0)
            // Standard Error: 4_519
            .saturating_add(Weight::from_parts(630_708, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_391_000 picoseconds.
        Weight::from_parts(2_502_000, 0)
            // Standard Error: 11_455
            .saturating_add(Weight::from_parts(1_815_926, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_405_000 picoseconds.
        Weight::from_parts(2_466_000, 0)
            // Standard Error: 8_787
            .saturating_add(Weight::from_parts(1_198_255, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_359_000 picoseconds.
        Weight::from_parts(2_454_000, 0)
            // Standard Error: 8_447
            .saturating_add(Weight::from_parts(2_611_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_433_000 picoseconds.
        Weight::from_parts(2_467_000, 0)
            // Standard Error: 7_115
            .saturating_add(Weight::from_parts(2_379_313, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_350_000 picoseconds.
        Weight::from_parts(1_932_276, 0)
            // Standard Error: 15_466
            .saturating_add(Weight::from_parts(2_924_777, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_396_000 picoseconds.
        Weight::from_parts(2_444_000, 0)
            // Standard Error: 6_809
            .saturating_add(Weight::from_parts(2_455_804, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_472_000 picoseconds.
        Weight::from_parts(2_555_000, 0)
            // Standard Error: 19_203
            .saturating_add(Weight::from_parts(9_064_512, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_354_000 picoseconds.
        Weight::from_parts(2_430_000, 0)
            // Standard Error: 24_440
            .saturating_add(Weight::from_parts(7_388_642, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_401_000 picoseconds.
        Weight::from_parts(2_434_763, 0)
            // Standard Error: 17_419
            .saturating_add(Weight::from_parts(2_921_970, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_404_000 picoseconds.
        Weight::from_parts(2_475_000, 0)
            // Standard Error: 6_939
            .saturating_add(Weight::from_parts(2_423_772, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_463_000 picoseconds.
        Weight::from_parts(2_539_000, 0)
            // Standard Error: 8_301
            .saturating_add(Weight::from_parts(1_250_600, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_353_000 picoseconds.
        Weight::from_parts(2_457_000, 0)
            // Standard Error: 4_211
            .saturating_add(Weight::from_parts(634_637, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_383_000 picoseconds.
        Weight::from_parts(2_437_000, 0)
            // Standard Error: 9_552
            .saturating_add(Weight::from_parts(1_260_059, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_380_000 picoseconds.
        Weight::from_parts(2_445_000, 0)
            // Standard Error: 4_633
            .saturating_add(Weight::from_parts(653_822, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_331_000 picoseconds.
        Weight::from_parts(2_490_000, 0)
            // Standard Error: 8_055
            .saturating_add(Weight::from_parts(1_253_044, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_415_000 picoseconds.
        Weight::from_parts(2_534_000, 0)
            // Standard Error: 4_042
            .saturating_add(Weight::from_parts(632_391, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_452_000 picoseconds.
        Weight::from_parts(2_489_000, 0)
            // Standard Error: 7_395
            .saturating_add(Weight::from_parts(1_059_185, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_468_000 picoseconds.
        Weight::from_parts(2_489_000, 0)
            // Standard Error: 4_182
            .saturating_add(Weight::from_parts(579_858, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_416_000 picoseconds.
        Weight::from_parts(2_483_000, 0)
            // Standard Error: 6_874
            .saturating_add(Weight::from_parts(1_090_290, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_498_000 picoseconds.
        Weight::from_parts(2_541_000, 0)
            // Standard Error: 3_704
            .saturating_add(Weight::from_parts(572_447, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_398_000 picoseconds.
        Weight::from_parts(2_460_000, 0)
            // Standard Error: 6_699
            .saturating_add(Weight::from_parts(1_070_022, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_411_000 picoseconds.
        Weight::from_parts(2_484_000, 0)
            // Standard Error: 4_376
            .saturating_add(Weight::from_parts(595_442, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_384_000 picoseconds.
        Weight::from_parts(2_419_000, 0)
            // Standard Error: 6_993
            .saturating_add(Weight::from_parts(1_073_753, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_250_000 picoseconds.
        Weight::from_parts(2_475_000, 0)
            // Standard Error: 4_440
            .saturating_add(Weight::from_parts(587_338, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_409_000 picoseconds.
        Weight::from_parts(2_527_000, 0)
            // Standard Error: 6_311
            .saturating_add(Weight::from_parts(1_052_285, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_358_000 picoseconds.
        Weight::from_parts(2_532_000, 0)
            // Standard Error: 3_753
            .saturating_add(Weight::from_parts(579_703, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_resume_session() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `352`
        //  Estimated: `4169`
        // Minimum execution time: 6_146_000 picoseconds.
        Weight::from_parts(6_404_000, 4169)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1107`
        //  Estimated: `24053`
        // Minimum execution time: 63_019_000 picoseconds.
        Weight::from_parts(64_381_000, 24053)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `888`
        //  Estimated: `22158`
        // Minimum execution time: 47_642_000 picoseconds.
        Weight::from_parts(49_120_000, 22158)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1010`
        //  Estimated: `34619`
        // Minimum execution time: 77_188_000 picoseconds.
        Weight::from_parts(78_878_000, 34619)
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `695`
        //  Estimated: `20509`
        // Minimum execution time: 32_804_000 picoseconds.
        Weight::from_parts(34_214_000, 20509)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `976`
        //  Estimated: `26636`
        // Minimum execution time: 46_785_000 picoseconds.
        Weight::from_parts(48_750_000, 26636)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_490_000 picoseconds.
        Weight::from_parts(3_693_000, 3545)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1626`
        //  Estimated: `58232`
        // Minimum execution time: 110_128_000 picoseconds.
        Weight::from_parts(112_307_000, 58232)
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1332`
        //  Estimated: `46962`
        // Minimum execution time: 92_602_000 picoseconds.
        Weight::from_parts(94_956_000, 46962)
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2303 + c * (16400 ±0)`
        //  Estimated: `19878 + c * (84480 ±0)`
        // Minimum execution time: 30_096_000 picoseconds.
        Weight::from_parts(30_378_000, 19878)
            // Standard Error: 76_598
            .saturating_add(Weight::from_parts(39_119_098, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 84480).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program_uninited(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3129 + c * (42 ±0)`
        //  Estimated: `60575 + c * (2947 ±0)`
        // Minimum execution time: 88_995_000 picoseconds.
        Weight::from_parts(74_471_031, 60575)
            // Standard Error: 1_987
            .saturating_add(Weight::from_parts(1_040_647, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2947).saturating_mul(c.into()))
    }
}
