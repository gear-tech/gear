// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-08, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-20-193.us-west-1.compute.internal`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_error(r: u32, ) -> Weight;
    fn gr_status_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_read_access(p: u32, ) -> Weight;
    fn lazy_pages_write_access(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_167 nanoseconds.
		Weight::from_ref_time(1_266_000)
			// Standard Error: 585
			.saturating_add(Weight::from_ref_time(245_889).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `145 + c * (1024 ±0)`
		//  Estimated: `2617 + c * (1024 ±0)`
		// Minimum execution time: 3_536 nanoseconds.
		Weight::from_parts(3_682_000, 2617)
			// Standard Error: 1_184
			.saturating_add(Weight::from_ref_time(685_180).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_proof_size(1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 57_193 nanoseconds.
		Weight::from_ref_time(109_088_694)
			// Standard Error: 6_118
			.saturating_add(Weight::from_ref_time(2_218_266).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `918`
		//  Estimated: `17301`
		// Minimum execution time: 59_378 nanoseconds.
		Weight::from_parts(62_087_000, 17301)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `80`
		//  Estimated: `3290`
		// Minimum execution time: 55_091 nanoseconds.
		Weight::from_parts(28_232_956, 3290)
			// Standard Error: 45_477
			.saturating_add(Weight::from_ref_time(53_824_949).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `648`
		//  Estimated: `18066`
		// Minimum execution time: 55_301 nanoseconds.
		Weight::from_parts(69_394_571, 18066)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(2_326).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `126`
		//  Estimated: `14142`
		// Minimum execution time: 9_076_876 nanoseconds.
		Weight::from_parts(9_133_484_000, 14142)
			// Standard Error: 442_821
			.saturating_add(Weight::from_ref_time(30_294_665).saturating_mul(c.into()))
			// Standard Error: 26
			.saturating_add(Weight::from_ref_time(816).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_message(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `423`
		//  Estimated: `15053`
		// Minimum execution time: 58_350 nanoseconds.
		Weight::from_parts(47_376_674, 15053)
			// Standard Error: 1
			.saturating_add(Weight::from_ref_time(1_137).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_reply(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1161`
		//  Estimated: `31831`
		// Minimum execution time: 84_089 nanoseconds.
		Weight::from_parts(81_423_304, 31831)
			// Standard Error: 1
			.saturating_add(Weight::from_ref_time(1_138).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `688`
		//  Estimated: `39671`
		// Minimum execution time: 205_838 nanoseconds.
		Weight::from_parts(215_131_655, 39671)
			// Standard Error: 893
			.saturating_add(Weight::from_ref_time(958).saturating_mul(q.into()))
			.saturating_add(T::DbWeight::get().reads(22_u64))
			.saturating_add(T::DbWeight::get().writes(21_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `688`
		//  Estimated: `39566`
		// Minimum execution time: 215_424 nanoseconds.
		Weight::from_parts(225_114_293, 39566)
			.saturating_add(T::DbWeight::get().reads(22_u64))
			.saturating_add(T::DbWeight::get().writes(21_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `213 + c * (1075 ±0)`
		//  Estimated: `2913 + c * (2150 ±0)`
		// Minimum execution time: 39_867 nanoseconds.
		Weight::from_parts(40_361_000, 2913)
			// Standard Error: 23_801
			.saturating_add(Weight::from_ref_time(53_061_276).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_proof_size(2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 92_273 nanoseconds.
		Weight::from_ref_time(103_616_007)
			// Standard Error: 157_422
			.saturating_add(Weight::from_ref_time(151_613_919).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 248_158 nanoseconds.
		Weight::from_ref_time(240_222_341)
			// Standard Error: 117_670
			.saturating_add(Weight::from_ref_time(150_461_275).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 93_769 nanoseconds.
		Weight::from_parts(95_758_000, 10041)
			// Standard Error: 1_018_974
			.saturating_add(Weight::from_ref_time(450_161_551).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `6052 + r * (1642 ±23)`
		// Minimum execution time: 93_653 nanoseconds.
		Weight::from_parts(140_819_029, 6052)
			// Standard Error: 176_640
			.saturating_add(Weight::from_ref_time(389_850_154).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(1642).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 93_304 nanoseconds.
		Weight::from_parts(141_273_242, 10041)
			// Standard Error: 169_260
			.saturating_add(Weight::from_ref_time(261_898_724).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_114 nanoseconds.
		Weight::from_parts(112_838_830, 10041)
			// Standard Error: 160_966
			.saturating_add(Weight::from_ref_time(261_629_904).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_161 nanoseconds.
		Weight::from_parts(111_918_331, 10041)
			// Standard Error: 158_827
			.saturating_add(Weight::from_ref_time(262_264_222).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 91_348 nanoseconds.
		Weight::from_parts(116_821_108, 10041)
			// Standard Error: 160_621
			.saturating_add(Weight::from_ref_time(261_921_959).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_477 nanoseconds.
		Weight::from_parts(110_580_659, 10041)
			// Standard Error: 168_543
			.saturating_add(Weight::from_ref_time(263_049_835).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_585 nanoseconds.
		Weight::from_parts(116_050_436, 10041)
			// Standard Error: 133_867
			.saturating_add(Weight::from_ref_time(262_003_855).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 91_924 nanoseconds.
		Weight::from_parts(110_919_634, 10041)
			// Standard Error: 131_870
			.saturating_add(Weight::from_ref_time(261_605_818).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 91_951 nanoseconds.
		Weight::from_parts(111_193_683, 10041)
			// Standard Error: 132_996
			.saturating_add(Weight::from_ref_time(262_243_193).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 93_531 nanoseconds.
		Weight::from_parts(118_455_310, 10041)
			// Standard Error: 129_882
			.saturating_add(Weight::from_ref_time(262_315_713).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_704 nanoseconds.
		Weight::from_parts(151_261_881, 10041)
			// Standard Error: 215_822
			.saturating_add(Weight::from_ref_time(371_758_541).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5456 + n * (619 ±0)`
		// Minimum execution time: 484_098 nanoseconds.
		Weight::from_parts(489_808_000, 5456)
			// Standard Error: 73_982
			.saturating_add(Weight::from_ref_time(12_676_322).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_460 nanoseconds.
		Weight::from_parts(119_083_860, 10041)
			// Standard Error: 148_192
			.saturating_add(Weight::from_ref_time(262_144_551).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 93_231 nanoseconds.
		Weight::from_parts(113_715_324, 10041)
			// Standard Error: 129_221
			.saturating_add(Weight::from_ref_time(262_031_896).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_221 nanoseconds.
		Weight::from_parts(129_126_824, 10041)
			// Standard Error: 188_515
			.saturating_add(Weight::from_ref_time(331_203_970).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 91_500 nanoseconds.
		Weight::from_parts(116_190_427, 10041)
			// Standard Error: 151_126
			.saturating_add(Weight::from_ref_time(270_631_871).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 93_644 nanoseconds.
		Weight::from_parts(155_767_746, 10041)
			// Standard Error: 222_879
			.saturating_add(Weight::from_ref_time(649_405_369).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5456 + n * (619 ±0)`
		// Minimum execution time: 752_465 nanoseconds.
		Weight::from_parts(761_346_000, 5456)
			// Standard Error: 59_356
			.saturating_add(Weight::from_ref_time(28_810_817).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 105_329 nanoseconds.
		Weight::from_parts(158_301_341, 10041)
			// Standard Error: 233_241
			.saturating_add(Weight::from_ref_time(478_298_390).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5456 + n * (619 ±0)`
		// Minimum execution time: 599_460 nanoseconds.
		Weight::from_parts(606_604_000, 5456)
			// Standard Error: 78_376
			.saturating_add(Weight::from_ref_time(18_269_426).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5407 + r * (4014 ±22)`
		// Minimum execution time: 94_046 nanoseconds.
		Weight::from_parts(161_556_431, 5407)
			// Standard Error: 274_175
			.saturating_add(Weight::from_ref_time(506_637_363).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(4014).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `8600 + n * (620 ±0)`
		// Minimum execution time: 649_625 nanoseconds.
		Weight::from_parts(654_358_000, 8600)
			// Standard Error: 79_722
			.saturating_add(Weight::from_ref_time(18_107_741).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(Weight::from_proof_size(620).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + r * (141 ±0)`
		//  Estimated: `5020 + r * (5021 ±0)`
		// Minimum execution time: 92_543 nanoseconds.
		Weight::from_parts(98_190_593, 5020)
			// Standard Error: 397_162
			.saturating_add(Weight::from_ref_time(37_720_206).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(5021).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 95_006 nanoseconds.
		Weight::from_parts(146_979_187, 10041)
			// Standard Error: 221_172
			.saturating_add(Weight::from_ref_time(359_519_310).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5374 + n * (619 ±0)`
		// Minimum execution time: 128_554 nanoseconds.
		Weight::from_parts(76_961_189, 5374)
			// Standard Error: 1_651
			.saturating_add(Weight::from_ref_time(821_810).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + r * (141 ±0)`
		//  Estimated: `5020 + r * (5021 ±0)`
		// Minimum execution time: 94_439 nanoseconds.
		Weight::from_parts(99_759_210, 5020)
			// Standard Error: 365_296
			.saturating_add(Weight::from_ref_time(50_862_489).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(5021).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 94_373 nanoseconds.
		Weight::from_parts(115_693_383, 10041)
			// Standard Error: 159_975
			.saturating_add(Weight::from_ref_time(263_127_924).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `19941`
		// Minimum execution time: 92_475 nanoseconds.
		Weight::from_parts(133_849_318, 19941)
			// Standard Error: 176_572
			.saturating_add(Weight::from_ref_time(267_913_457).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 94_050 nanoseconds.
		Weight::from_parts(143_627_233, 10041)
			// Standard Error: 195_502
			.saturating_add(Weight::from_ref_time(274_301_219).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 125_087 nanoseconds.
		Weight::from_parts(3_705_818, 10041)
			// Standard Error: 1_726
			.saturating_add(Weight::from_ref_time(765_660).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 95_065 nanoseconds.
		Weight::from_parts(158_311_662, 10041)
			// Standard Error: 248_070
			.saturating_add(Weight::from_ref_time(560_231_892).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 674_866 nanoseconds.
		Weight::from_parts(195_314_512, 10041)
			// Standard Error: 37_582
			.saturating_add(Weight::from_ref_time(34_057_792).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `2616`
		// Minimum execution time: 93_054 nanoseconds.
		Weight::from_parts(118_980_903, 2616)
			// Standard Error: 130_309
			.saturating_add(Weight::from_ref_time(246_828_989).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `1885 + n * (618 ±0)`
		// Minimum execution time: 340_585 nanoseconds.
		Weight::from_parts(345_463_000, 1885)
			// Standard Error: 63_900
			.saturating_add(Weight::from_ref_time(23_387_237).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_proof_size(618).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 94_522 nanoseconds.
		Weight::from_parts(140_885_266, 10041)
			// Standard Error: 414_929
			.saturating_add(Weight::from_ref_time(630_602_286).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 93_225 nanoseconds.
		Weight::from_parts(115_575_973, 10041)
			// Standard Error: 112_761
			.saturating_add(Weight::from_ref_time(265_900_446).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + r * (141 ±0)`
		//  Estimated: `1308 + r * (1308 ±0)`
		// Minimum execution time: 92_440 nanoseconds.
		Weight::from_parts(97_548_267, 1308)
			// Standard Error: 360_509
			.saturating_add(Weight::from_ref_time(35_123_132).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(1308).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 92_254 nanoseconds.
		Weight::from_ref_time(97_627_973)
			// Standard Error: 350_614
			.saturating_add(Weight::from_ref_time(19_250_326).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 92_905 nanoseconds.
		Weight::from_ref_time(97_557_306)
			// Standard Error: 347_834
			.saturating_add(Weight::from_ref_time(19_741_493).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 93_387 nanoseconds.
		Weight::from_ref_time(98_417_202)
			// Standard Error: 342_719
			.saturating_add(Weight::from_ref_time(19_658_797).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 92_982 nanoseconds.
		Weight::from_ref_time(98_635_679)
			// Standard Error: 349_655
			.saturating_add(Weight::from_ref_time(22_432_120).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `6052 + r * (1642 ±23)`
		// Minimum execution time: 95_542 nanoseconds.
		Weight::from_parts(155_807_431, 6052)
			// Standard Error: 177_203
			.saturating_add(Weight::from_ref_time(377_475_251).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(1642).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 105_076 nanoseconds.
		Weight::from_parts(154_866_882, 10041)
			// Standard Error: 302_328
			.saturating_add(Weight::from_ref_time(557_538_132).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
    }
    /// The range of component `p` is `[0, 1024]`.
    /// The range of component `s` is `[1, 1024]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5388 + p * (619 ±0) + s * (617 ±0)`
		// Minimum execution time: 21_104_676 nanoseconds.
		Weight::from_parts(21_240_134_000, 5388)
			// Standard Error: 241_206
			.saturating_add(Weight::from_ref_time(6_979_397).saturating_mul(p.into()))
			// Standard Error: 241_183
			.saturating_add(Weight::from_ref_time(154_539_245).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(p.into()))
			.saturating_add(Weight::from_proof_size(617).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_read_access(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `141 + p * (39600 ±0)`
		// Minimum execution time: 92_753 nanoseconds.
		Weight::from_parts(41_062_229, 141)
			// Standard Error: 26_916
			.saturating_add(Weight::from_ref_time(53_649_765).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads((16_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_proof_size(39600).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_write_access(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `20275341`
		// Minimum execution time: 27_339_183 nanoseconds.
		Weight::from_parts(27_226_190_357, 20275341)
			// Standard Error: 208_609
			.saturating_add(Weight::from_ref_time(68_978_239).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(8192_u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_324_227 nanoseconds.
		Weight::from_ref_time(8_737_645_105)
			// Standard Error: 1_509_229
			.saturating_add(Weight::from_ref_time(24_274_165).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_350_868 nanoseconds.
		Weight::from_ref_time(8_960_089_535)
			// Standard Error: 1_663_729
			.saturating_add(Weight::from_ref_time(20_412_701).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_672 nanoseconds.
		Weight::from_ref_time(3_116_723)
			// Standard Error: 3_459
			.saturating_add(Weight::from_ref_time(609_333).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_767 nanoseconds.
		Weight::from_ref_time(3_365_021)
			// Standard Error: 2_991
			.saturating_add(Weight::from_ref_time(513_637).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_714 nanoseconds.
		Weight::from_ref_time(2_968_680)
			// Standard Error: 435
			.saturating_add(Weight::from_ref_time(341_962).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_586 nanoseconds.
		Weight::from_ref_time(2_859_270)
			// Standard Error: 1_743
			.saturating_add(Weight::from_ref_time(512_718).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_662 nanoseconds.
		Weight::from_ref_time(3_455_285)
			// Standard Error: 3_966
			.saturating_add(Weight::from_ref_time(843_216).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_842 nanoseconds.
		Weight::from_ref_time(4_352_236)
			// Standard Error: 91
			.saturating_add(Weight::from_ref_time(10_695).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_792 nanoseconds.
		Weight::from_ref_time(3_516_162)
			// Standard Error: 1_519
			.saturating_add(Weight::from_ref_time(556_858).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
		Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(556_858 -
            535_469).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_753 nanoseconds.
		Weight::from_ref_time(3_211_824)
			// Standard Error: 2_530
			.saturating_add(Weight::from_ref_time(535_469).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_119 nanoseconds.
		Weight::from_ref_time(2_754_234)
			// Standard Error: 13_638
			.saturating_add(Weight::from_ref_time(2_205_144).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_332 nanoseconds.
		Weight::from_ref_time(5_304_713)
			// Standard Error: 1_510
			.saturating_add(Weight::from_ref_time(97_738).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_241 nanoseconds.
		Weight::from_ref_time(3_552_347)
			// Standard Error: 10
			.saturating_add(Weight::from_ref_time(22).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_727 nanoseconds.
		Weight::from_ref_time(2_881_633)
			// Standard Error: 684
			.saturating_add(Weight::from_ref_time(58_063).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_756 nanoseconds.
		Weight::from_ref_time(3_160_702)
			// Standard Error: 977
			.saturating_add(Weight::from_ref_time(88_056).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_789 nanoseconds.
		Weight::from_ref_time(3_206_377)
			// Standard Error: 1_001
			.saturating_add(Weight::from_ref_time(90_427).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_449 nanoseconds.
		Weight::from_ref_time(10_254_117)
			// Standard Error: 2_219
			.saturating_add(Weight::from_ref_time(159_676).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_441 nanoseconds.
		Weight::from_ref_time(11_155_840)
			// Standard Error: 2_561
			.saturating_add(Weight::from_ref_time(202_015).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_371 nanoseconds.
		Weight::from_ref_time(6_279_401)
			// Standard Error: 3_210
			.saturating_add(Weight::from_ref_time(1_347_460).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_712 nanoseconds.
		Weight::from_ref_time(2_332_785)
			// Standard Error: 2_489
			.saturating_add(Weight::from_ref_time(574_272).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_736 nanoseconds.
		Weight::from_ref_time(2_845_819)
			// Standard Error: 2_083
			.saturating_add(Weight::from_ref_time(518_479).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_757 nanoseconds.
		Weight::from_ref_time(2_863_274)
			// Standard Error: 993
			.saturating_add(Weight::from_ref_time(101_332).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_664 nanoseconds.
		Weight::from_ref_time(2_701_857)
			// Standard Error: 2_608
			.saturating_add(Weight::from_ref_time(173_624).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_640 nanoseconds.
		Weight::from_ref_time(2_977_375)
			// Standard Error: 727
			.saturating_add(Weight::from_ref_time(61_197).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_710 nanoseconds.
		Weight::from_ref_time(2_990_833)
			// Standard Error: 648
			.saturating_add(Weight::from_ref_time(49_809).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_628 nanoseconds.
		Weight::from_ref_time(2_923_772)
			// Standard Error: 690
			.saturating_add(Weight::from_ref_time(57_164).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_739 nanoseconds.
		Weight::from_ref_time(3_081_267)
			// Standard Error: 2_384
			.saturating_add(Weight::from_ref_time(169_306).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_724 nanoseconds.
		Weight::from_ref_time(3_299_246)
			// Standard Error: 2_230
			.saturating_add(Weight::from_ref_time(156_831).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_655 nanoseconds.
		Weight::from_ref_time(3_172_060)
			// Standard Error: 2_615
			.saturating_add(Weight::from_ref_time(154_468).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_664 nanoseconds.
		Weight::from_ref_time(2_704_129)
			// Standard Error: 2_491
			.saturating_add(Weight::from_ref_time(171_525).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_720 nanoseconds.
		Weight::from_ref_time(2_617_622)
			// Standard Error: 2_146
			.saturating_add(Weight::from_ref_time(195_112).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_718 nanoseconds.
		Weight::from_ref_time(3_259_674)
			// Standard Error: 2_360
			.saturating_add(Weight::from_ref_time(167_583).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_732 nanoseconds.
		Weight::from_ref_time(2_744_114)
			// Standard Error: 2_428
			.saturating_add(Weight::from_ref_time(185_728).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_793 nanoseconds.
		Weight::from_ref_time(2_772_467)
			// Standard Error: 2_260
			.saturating_add(Weight::from_ref_time(168_431).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_685 nanoseconds.
		Weight::from_ref_time(2_651_732)
			// Standard Error: 1_878
			.saturating_add(Weight::from_ref_time(204_158).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_645 nanoseconds.
		Weight::from_ref_time(2_834_683)
			// Standard Error: 1_570
			.saturating_add(Weight::from_ref_time(208_465).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_744 nanoseconds.
		Weight::from_ref_time(3_401_469)
			// Standard Error: 1_969
			.saturating_add(Weight::from_ref_time(114_999).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_727 nanoseconds.
		Weight::from_ref_time(3_417_558)
			// Standard Error: 1_554
			.saturating_add(Weight::from_ref_time(104_567).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_671 nanoseconds.
		Weight::from_ref_time(3_034_882)
			// Standard Error: 1_685
			.saturating_add(Weight::from_ref_time(147_824).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_608 nanoseconds.
		Weight::from_ref_time(2_684_534)
			// Standard Error: 4_026
			.saturating_add(Weight::from_ref_time(406_025).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_752 nanoseconds.
		Weight::from_ref_time(3_388_105)
			// Standard Error: 3_171
			.saturating_add(Weight::from_ref_time(368_388).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_629 nanoseconds.
		Weight::from_ref_time(2_782_000)
			// Standard Error: 16_590
			.saturating_add(Weight::from_ref_time(1_531_481).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_730 nanoseconds.
		Weight::from_ref_time(2_811_942)
			// Standard Error: 5_227
			.saturating_add(Weight::from_ref_time(447_485).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_689 nanoseconds.
		Weight::from_ref_time(2_930_748)
			// Standard Error: 1_512
			.saturating_add(Weight::from_ref_time(141_043).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_744 nanoseconds.
		Weight::from_ref_time(3_125_554)
			// Standard Error: 1_339
			.saturating_add(Weight::from_ref_time(117_568).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_725 nanoseconds.
		Weight::from_ref_time(3_245_168)
			// Standard Error: 1_602
			.saturating_add(Weight::from_ref_time(112_669).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_677 nanoseconds.
		Weight::from_ref_time(3_185_682)
			// Standard Error: 916
			.saturating_add(Weight::from_ref_time(101_582).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_707 nanoseconds.
		Weight::from_ref_time(3_192_923)
			// Standard Error: 1_659
			.saturating_add(Weight::from_ref_time(108_431).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_644 nanoseconds.
		Weight::from_ref_time(3_093_765)
			// Standard Error: 1_099
			.saturating_add(Weight::from_ref_time(108_537).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_761 nanoseconds.
		Weight::from_ref_time(3_175_887)
			// Standard Error: 1_515
			.saturating_add(Weight::from_ref_time(120_224).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_779 nanoseconds.
		Weight::from_ref_time(3_349_058)
			// Standard Error: 1_408
			.saturating_add(Weight::from_ref_time(101_720).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_167 nanoseconds.
		Weight::from_ref_time(1_266_000)
			// Standard Error: 585
			.saturating_add(Weight::from_ref_time(245_889).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `145 + c * (1024 ±0)`
		//  Estimated: `2617 + c * (1024 ±0)`
		// Minimum execution time: 3_536 nanoseconds.
		Weight::from_parts(3_682_000, 2617)
			// Standard Error: 1_184
			.saturating_add(Weight::from_ref_time(685_180).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_proof_size(1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 57_193 nanoseconds.
		Weight::from_ref_time(109_088_694)
			// Standard Error: 6_118
			.saturating_add(Weight::from_ref_time(2_218_266).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `918`
		//  Estimated: `17301`
		// Minimum execution time: 59_378 nanoseconds.
		Weight::from_parts(62_087_000, 17301)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `80`
		//  Estimated: `3290`
		// Minimum execution time: 55_091 nanoseconds.
		Weight::from_parts(28_232_956, 3290)
			// Standard Error: 45_477
			.saturating_add(Weight::from_ref_time(53_824_949).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `648`
		//  Estimated: `18066`
		// Minimum execution time: 55_301 nanoseconds.
		Weight::from_parts(69_394_571, 18066)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(2_326).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `126`
		//  Estimated: `14142`
		// Minimum execution time: 9_076_876 nanoseconds.
		Weight::from_parts(9_133_484_000, 14142)
			// Standard Error: 442_821
			.saturating_add(Weight::from_ref_time(30_294_665).saturating_mul(c.into()))
			// Standard Error: 26
			.saturating_add(Weight::from_ref_time(816).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_message(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `423`
		//  Estimated: `15053`
		// Minimum execution time: 58_350 nanoseconds.
		Weight::from_parts(47_376_674, 15053)
			// Standard Error: 1
			.saturating_add(Weight::from_ref_time(1_137).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_reply(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1161`
		//  Estimated: `31831`
		// Minimum execution time: 84_089 nanoseconds.
		Weight::from_parts(81_423_304, 31831)
			// Standard Error: 1
			.saturating_add(Weight::from_ref_time(1_138).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `688`
		//  Estimated: `39671`
		// Minimum execution time: 205_838 nanoseconds.
		Weight::from_parts(215_131_655, 39671)
			// Standard Error: 893
			.saturating_add(Weight::from_ref_time(958).saturating_mul(q.into()))
			.saturating_add(RocksDbWeight::get().reads(22_u64))
			.saturating_add(RocksDbWeight::get().writes(21_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `688`
		//  Estimated: `39566`
		// Minimum execution time: 215_424 nanoseconds.
		Weight::from_parts(225_114_293, 39566)
			.saturating_add(RocksDbWeight::get().reads(22_u64))
			.saturating_add(RocksDbWeight::get().writes(21_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `213 + c * (1075 ±0)`
		//  Estimated: `2913 + c * (2150 ±0)`
		// Minimum execution time: 39_867 nanoseconds.
		Weight::from_parts(40_361_000, 2913)
			// Standard Error: 23_801
			.saturating_add(Weight::from_ref_time(53_061_276).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_proof_size(2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 92_273 nanoseconds.
		Weight::from_ref_time(103_616_007)
			// Standard Error: 157_422
			.saturating_add(Weight::from_ref_time(151_613_919).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 248_158 nanoseconds.
		Weight::from_ref_time(240_222_341)
			// Standard Error: 117_670
			.saturating_add(Weight::from_ref_time(150_461_275).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 93_769 nanoseconds.
		Weight::from_parts(95_758_000, 10041)
			// Standard Error: 1_018_974
			.saturating_add(Weight::from_ref_time(450_161_551).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `6052 + r * (1642 ±23)`
		// Minimum execution time: 93_653 nanoseconds.
		Weight::from_parts(140_819_029, 6052)
			// Standard Error: 176_640
			.saturating_add(Weight::from_ref_time(389_850_154).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(1642).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 93_304 nanoseconds.
		Weight::from_parts(141_273_242, 10041)
			// Standard Error: 169_260
			.saturating_add(Weight::from_ref_time(261_898_724).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_114 nanoseconds.
		Weight::from_parts(112_838_830, 10041)
			// Standard Error: 160_966
			.saturating_add(Weight::from_ref_time(261_629_904).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_161 nanoseconds.
		Weight::from_parts(111_918_331, 10041)
			// Standard Error: 158_827
			.saturating_add(Weight::from_ref_time(262_264_222).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 91_348 nanoseconds.
		Weight::from_parts(116_821_108, 10041)
			// Standard Error: 160_621
			.saturating_add(Weight::from_ref_time(261_921_959).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_477 nanoseconds.
		Weight::from_parts(110_580_659, 10041)
			// Standard Error: 168_543
			.saturating_add(Weight::from_ref_time(263_049_835).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_585 nanoseconds.
		Weight::from_parts(116_050_436, 10041)
			// Standard Error: 133_867
			.saturating_add(Weight::from_ref_time(262_003_855).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 91_924 nanoseconds.
		Weight::from_parts(110_919_634, 10041)
			// Standard Error: 131_870
			.saturating_add(Weight::from_ref_time(261_605_818).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 91_951 nanoseconds.
		Weight::from_parts(111_193_683, 10041)
			// Standard Error: 132_996
			.saturating_add(Weight::from_ref_time(262_243_193).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 93_531 nanoseconds.
		Weight::from_parts(118_455_310, 10041)
			// Standard Error: 129_882
			.saturating_add(Weight::from_ref_time(262_315_713).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_704 nanoseconds.
		Weight::from_parts(151_261_881, 10041)
			// Standard Error: 215_822
			.saturating_add(Weight::from_ref_time(371_758_541).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5456 + n * (619 ±0)`
		// Minimum execution time: 484_098 nanoseconds.
		Weight::from_parts(489_808_000, 5456)
			// Standard Error: 73_982
			.saturating_add(Weight::from_ref_time(12_676_322).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_460 nanoseconds.
		Weight::from_parts(119_083_860, 10041)
			// Standard Error: 148_192
			.saturating_add(Weight::from_ref_time(262_144_551).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 93_231 nanoseconds.
		Weight::from_parts(113_715_324, 10041)
			// Standard Error: 129_221
			.saturating_add(Weight::from_ref_time(262_031_896).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 92_221 nanoseconds.
		Weight::from_parts(129_126_824, 10041)
			// Standard Error: 188_515
			.saturating_add(Weight::from_ref_time(331_203_970).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 91_500 nanoseconds.
		Weight::from_parts(116_190_427, 10041)
			// Standard Error: 151_126
			.saturating_add(Weight::from_ref_time(270_631_871).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 93_644 nanoseconds.
		Weight::from_parts(155_767_746, 10041)
			// Standard Error: 222_879
			.saturating_add(Weight::from_ref_time(649_405_369).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5456 + n * (619 ±0)`
		// Minimum execution time: 752_465 nanoseconds.
		Weight::from_parts(761_346_000, 5456)
			// Standard Error: 59_356
			.saturating_add(Weight::from_ref_time(28_810_817).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 105_329 nanoseconds.
		Weight::from_parts(158_301_341, 10041)
			// Standard Error: 233_241
			.saturating_add(Weight::from_ref_time(478_298_390).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5456 + n * (619 ±0)`
		// Minimum execution time: 599_460 nanoseconds.
		Weight::from_parts(606_604_000, 5456)
			// Standard Error: 78_376
			.saturating_add(Weight::from_ref_time(18_269_426).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5407 + r * (4014 ±22)`
		// Minimum execution time: 94_046 nanoseconds.
		Weight::from_parts(161_556_431, 5407)
			// Standard Error: 274_175
			.saturating_add(Weight::from_ref_time(506_637_363).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(4014).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `8600 + n * (620 ±0)`
		// Minimum execution time: 649_625 nanoseconds.
		Weight::from_parts(654_358_000, 8600)
			// Standard Error: 79_722
			.saturating_add(Weight::from_ref_time(18_107_741).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(Weight::from_proof_size(620).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + r * (141 ±0)`
		//  Estimated: `5020 + r * (5021 ±0)`
		// Minimum execution time: 92_543 nanoseconds.
		Weight::from_parts(98_190_593, 5020)
			// Standard Error: 397_162
			.saturating_add(Weight::from_ref_time(37_720_206).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(5021).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 95_006 nanoseconds.
		Weight::from_parts(146_979_187, 10041)
			// Standard Error: 221_172
			.saturating_add(Weight::from_ref_time(359_519_310).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5374 + n * (619 ±0)`
		// Minimum execution time: 128_554 nanoseconds.
		Weight::from_parts(76_961_189, 5374)
			// Standard Error: 1_651
			.saturating_add(Weight::from_ref_time(821_810).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + r * (141 ±0)`
		//  Estimated: `5020 + r * (5021 ±0)`
		// Minimum execution time: 94_439 nanoseconds.
		Weight::from_parts(99_759_210, 5020)
			// Standard Error: 365_296
			.saturating_add(Weight::from_ref_time(50_862_489).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(5021).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 94_373 nanoseconds.
		Weight::from_parts(115_693_383, 10041)
			// Standard Error: 159_975
			.saturating_add(Weight::from_ref_time(263_127_924).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `19941`
		// Minimum execution time: 92_475 nanoseconds.
		Weight::from_parts(133_849_318, 19941)
			// Standard Error: 176_572
			.saturating_add(Weight::from_ref_time(267_913_457).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 94_050 nanoseconds.
		Weight::from_parts(143_627_233, 10041)
			// Standard Error: 195_502
			.saturating_add(Weight::from_ref_time(274_301_219).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 125_087 nanoseconds.
		Weight::from_parts(3_705_818, 10041)
			// Standard Error: 1_726
			.saturating_add(Weight::from_ref_time(765_660).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 95_065 nanoseconds.
		Weight::from_parts(158_311_662, 10041)
			// Standard Error: 248_070
			.saturating_add(Weight::from_ref_time(560_231_892).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 674_866 nanoseconds.
		Weight::from_parts(195_314_512, 10041)
			// Standard Error: 37_582
			.saturating_add(Weight::from_ref_time(34_057_792).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `2616`
		// Minimum execution time: 93_054 nanoseconds.
		Weight::from_parts(118_980_903, 2616)
			// Standard Error: 130_309
			.saturating_add(Weight::from_ref_time(246_828_989).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `1885 + n * (618 ±0)`
		// Minimum execution time: 340_585 nanoseconds.
		Weight::from_parts(345_463_000, 1885)
			// Standard Error: 63_900
			.saturating_add(Weight::from_ref_time(23_387_237).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_proof_size(618).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 94_522 nanoseconds.
		Weight::from_parts(140_885_266, 10041)
			// Standard Error: 414_929
			.saturating_add(Weight::from_ref_time(630_602_286).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 93_225 nanoseconds.
		Weight::from_parts(115_575_973, 10041)
			// Standard Error: 112_761
			.saturating_add(Weight::from_ref_time(265_900_446).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + r * (141 ±0)`
		//  Estimated: `1308 + r * (1308 ±0)`
		// Minimum execution time: 92_440 nanoseconds.
		Weight::from_parts(97_548_267, 1308)
			// Standard Error: 360_509
			.saturating_add(Weight::from_ref_time(35_123_132).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(1308).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 92_254 nanoseconds.
		Weight::from_ref_time(97_627_973)
			// Standard Error: 350_614
			.saturating_add(Weight::from_ref_time(19_250_326).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 92_905 nanoseconds.
		Weight::from_ref_time(97_557_306)
			// Standard Error: 347_834
			.saturating_add(Weight::from_ref_time(19_741_493).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 93_387 nanoseconds.
		Weight::from_ref_time(98_417_202)
			// Standard Error: 342_719
			.saturating_add(Weight::from_ref_time(19_658_797).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 92_982 nanoseconds.
		Weight::from_ref_time(98_635_679)
			// Standard Error: 349_655
			.saturating_add(Weight::from_ref_time(22_432_120).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `6052 + r * (1642 ±23)`
		// Minimum execution time: 95_542 nanoseconds.
		Weight::from_parts(155_807_431, 6052)
			// Standard Error: 177_203
			.saturating_add(Weight::from_ref_time(377_475_251).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(1642).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `10041`
		// Minimum execution time: 105_076 nanoseconds.
		Weight::from_parts(154_866_882, 10041)
			// Standard Error: 302_328
			.saturating_add(Weight::from_ref_time(557_538_132).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
    }
    /// The range of component `p` is `[0, 1024]`.
    /// The range of component `s` is `[1, 1024]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `5388 + p * (619 ±0) + s * (617 ±0)`
		// Minimum execution time: 21_104_676 nanoseconds.
		Weight::from_parts(21_240_134_000, 5388)
			// Standard Error: 241_206
			.saturating_add(Weight::from_ref_time(6_979_397).saturating_mul(p.into()))
			// Standard Error: 241_183
			.saturating_add(Weight::from_ref_time(154_539_245).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(619).saturating_mul(p.into()))
			.saturating_add(Weight::from_proof_size(617).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_read_access(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `141 + p * (39600 ±0)`
		// Minimum execution time: 92_753 nanoseconds.
		Weight::from_parts(41_062_229, 141)
			// Standard Error: 26_916
			.saturating_add(Weight::from_ref_time(53_649_765).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads((16_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_proof_size(39600).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_write_access(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `20275341`
		// Minimum execution time: 27_339_183 nanoseconds.
		Weight::from_parts(27_226_190_357, 20275341)
			// Standard Error: 208_609
			.saturating_add(Weight::from_ref_time(68_978_239).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(8192_u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_324_227 nanoseconds.
		Weight::from_ref_time(8_737_645_105)
			// Standard Error: 1_509_229
			.saturating_add(Weight::from_ref_time(24_274_165).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_350_868 nanoseconds.
		Weight::from_ref_time(8_960_089_535)
			// Standard Error: 1_663_729
			.saturating_add(Weight::from_ref_time(20_412_701).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_672 nanoseconds.
		Weight::from_ref_time(3_116_723)
			// Standard Error: 3_459
			.saturating_add(Weight::from_ref_time(609_333).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_767 nanoseconds.
		Weight::from_ref_time(3_365_021)
			// Standard Error: 2_991
			.saturating_add(Weight::from_ref_time(513_637).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_714 nanoseconds.
		Weight::from_ref_time(2_968_680)
			// Standard Error: 435
			.saturating_add(Weight::from_ref_time(341_962).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_586 nanoseconds.
		Weight::from_ref_time(2_859_270)
			// Standard Error: 1_743
			.saturating_add(Weight::from_ref_time(512_718).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_662 nanoseconds.
		Weight::from_ref_time(3_455_285)
			// Standard Error: 3_966
			.saturating_add(Weight::from_ref_time(843_216).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_842 nanoseconds.
		Weight::from_ref_time(4_352_236)
			// Standard Error: 91
			.saturating_add(Weight::from_ref_time(10_695).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_792 nanoseconds.
		Weight::from_ref_time(3_516_162)
			// Standard Error: 1_519
			.saturating_add(Weight::from_ref_time(556_858).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
		Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(556_858 -
            535_469).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_753 nanoseconds.
		Weight::from_ref_time(3_211_824)
			// Standard Error: 2_530
			.saturating_add(Weight::from_ref_time(535_469).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_119 nanoseconds.
		Weight::from_ref_time(2_754_234)
			// Standard Error: 13_638
			.saturating_add(Weight::from_ref_time(2_205_144).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_332 nanoseconds.
		Weight::from_ref_time(5_304_713)
			// Standard Error: 1_510
			.saturating_add(Weight::from_ref_time(97_738).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_241 nanoseconds.
		Weight::from_ref_time(3_552_347)
			// Standard Error: 10
			.saturating_add(Weight::from_ref_time(22).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_727 nanoseconds.
		Weight::from_ref_time(2_881_633)
			// Standard Error: 684
			.saturating_add(Weight::from_ref_time(58_063).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_756 nanoseconds.
		Weight::from_ref_time(3_160_702)
			// Standard Error: 977
			.saturating_add(Weight::from_ref_time(88_056).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_789 nanoseconds.
		Weight::from_ref_time(3_206_377)
			// Standard Error: 1_001
			.saturating_add(Weight::from_ref_time(90_427).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_449 nanoseconds.
		Weight::from_ref_time(10_254_117)
			// Standard Error: 2_219
			.saturating_add(Weight::from_ref_time(159_676).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_441 nanoseconds.
		Weight::from_ref_time(11_155_840)
			// Standard Error: 2_561
			.saturating_add(Weight::from_ref_time(202_015).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_371 nanoseconds.
		Weight::from_ref_time(6_279_401)
			// Standard Error: 3_210
			.saturating_add(Weight::from_ref_time(1_347_460).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_712 nanoseconds.
		Weight::from_ref_time(2_332_785)
			// Standard Error: 2_489
			.saturating_add(Weight::from_ref_time(574_272).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_736 nanoseconds.
		Weight::from_ref_time(2_845_819)
			// Standard Error: 2_083
			.saturating_add(Weight::from_ref_time(518_479).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_757 nanoseconds.
		Weight::from_ref_time(2_863_274)
			// Standard Error: 993
			.saturating_add(Weight::from_ref_time(101_332).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_664 nanoseconds.
		Weight::from_ref_time(2_701_857)
			// Standard Error: 2_608
			.saturating_add(Weight::from_ref_time(173_624).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_640 nanoseconds.
		Weight::from_ref_time(2_977_375)
			// Standard Error: 727
			.saturating_add(Weight::from_ref_time(61_197).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_710 nanoseconds.
		Weight::from_ref_time(2_990_833)
			// Standard Error: 648
			.saturating_add(Weight::from_ref_time(49_809).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_628 nanoseconds.
		Weight::from_ref_time(2_923_772)
			// Standard Error: 690
			.saturating_add(Weight::from_ref_time(57_164).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_739 nanoseconds.
		Weight::from_ref_time(3_081_267)
			// Standard Error: 2_384
			.saturating_add(Weight::from_ref_time(169_306).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_724 nanoseconds.
		Weight::from_ref_time(3_299_246)
			// Standard Error: 2_230
			.saturating_add(Weight::from_ref_time(156_831).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_655 nanoseconds.
		Weight::from_ref_time(3_172_060)
			// Standard Error: 2_615
			.saturating_add(Weight::from_ref_time(154_468).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_664 nanoseconds.
		Weight::from_ref_time(2_704_129)
			// Standard Error: 2_491
			.saturating_add(Weight::from_ref_time(171_525).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_720 nanoseconds.
		Weight::from_ref_time(2_617_622)
			// Standard Error: 2_146
			.saturating_add(Weight::from_ref_time(195_112).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_718 nanoseconds.
		Weight::from_ref_time(3_259_674)
			// Standard Error: 2_360
			.saturating_add(Weight::from_ref_time(167_583).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_732 nanoseconds.
		Weight::from_ref_time(2_744_114)
			// Standard Error: 2_428
			.saturating_add(Weight::from_ref_time(185_728).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_793 nanoseconds.
		Weight::from_ref_time(2_772_467)
			// Standard Error: 2_260
			.saturating_add(Weight::from_ref_time(168_431).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_685 nanoseconds.
		Weight::from_ref_time(2_651_732)
			// Standard Error: 1_878
			.saturating_add(Weight::from_ref_time(204_158).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_645 nanoseconds.
		Weight::from_ref_time(2_834_683)
			// Standard Error: 1_570
			.saturating_add(Weight::from_ref_time(208_465).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_744 nanoseconds.
		Weight::from_ref_time(3_401_469)
			// Standard Error: 1_969
			.saturating_add(Weight::from_ref_time(114_999).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_727 nanoseconds.
		Weight::from_ref_time(3_417_558)
			// Standard Error: 1_554
			.saturating_add(Weight::from_ref_time(104_567).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_671 nanoseconds.
		Weight::from_ref_time(3_034_882)
			// Standard Error: 1_685
			.saturating_add(Weight::from_ref_time(147_824).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_608 nanoseconds.
		Weight::from_ref_time(2_684_534)
			// Standard Error: 4_026
			.saturating_add(Weight::from_ref_time(406_025).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_752 nanoseconds.
		Weight::from_ref_time(3_388_105)
			// Standard Error: 3_171
			.saturating_add(Weight::from_ref_time(368_388).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_629 nanoseconds.
		Weight::from_ref_time(2_782_000)
			// Standard Error: 16_590
			.saturating_add(Weight::from_ref_time(1_531_481).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_730 nanoseconds.
		Weight::from_ref_time(2_811_942)
			// Standard Error: 5_227
			.saturating_add(Weight::from_ref_time(447_485).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_689 nanoseconds.
		Weight::from_ref_time(2_930_748)
			// Standard Error: 1_512
			.saturating_add(Weight::from_ref_time(141_043).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_744 nanoseconds.
		Weight::from_ref_time(3_125_554)
			// Standard Error: 1_339
			.saturating_add(Weight::from_ref_time(117_568).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_725 nanoseconds.
		Weight::from_ref_time(3_245_168)
			// Standard Error: 1_602
			.saturating_add(Weight::from_ref_time(112_669).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_677 nanoseconds.
		Weight::from_ref_time(3_185_682)
			// Standard Error: 916
			.saturating_add(Weight::from_ref_time(101_582).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_707 nanoseconds.
		Weight::from_ref_time(3_192_923)
			// Standard Error: 1_659
			.saturating_add(Weight::from_ref_time(108_431).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_644 nanoseconds.
		Weight::from_ref_time(3_093_765)
			// Standard Error: 1_099
			.saturating_add(Weight::from_ref_time(108_537).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_761 nanoseconds.
		Weight::from_ref_time(3_175_887)
			// Standard Error: 1_515
			.saturating_add(Weight::from_ref_time(120_224).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_779 nanoseconds.
		Weight::from_ref_time(3_349_058)
			// Standard Error: 1_408
			.saturating_add(Weight::from_ref_time(101_720).saturating_mul(r.into()))
    }
}
