// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-07, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `epyc-runners-node.hetzner`, CPU: `AMD EPYC 7502P 32-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear-node benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instantiate_module(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn gas(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_msg_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_exit_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 256902]`.
    fn instantiate_module(c: u32, ) -> Weight {
        Weight::from_ref_time(78_838_000 as u64)
            // Standard Error: 27
            .saturating_add(Weight::from_ref_time(2_407 as u64).saturating_mul(c as u64))
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(107_365_000 as u64)
            .saturating_add(T::DbWeight::get().reads(8 as u64))
            .saturating_add(T::DbWeight::get().writes(6 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(52_084_000 as u64)
            // Standard Error: 498
            .saturating_add(Weight::from_ref_time(65_688 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(129_349_000 as u64)
            // Standard Error: 17
            .saturating_add(Weight::from_ref_time(2_759 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(10_832_032_000 as u64)
            // Standard Error: 594
            .saturating_add(Weight::from_ref_time(22_545 as u64).saturating_mul(c as u64))
            // Standard Error: 36
            .saturating_add(Weight::from_ref_time(1_256 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(11 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(88_958_000 as u64)
            // Standard Error: 14
            .saturating_add(Weight::from_ref_time(896 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(130_661_000 as u64)
            // Standard Error: 20
            .saturating_add(Weight::from_ref_time(1_315 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(14 as u64))
            .saturating_add(T::DbWeight::get().writes(11 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        Weight::from_ref_time(188_006_000 as u64)
            // Standard Error: 3_869
            .saturating_add(Weight::from_ref_time(33_615 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(25 as u64))
            .saturating_add(T::DbWeight::get().writes(23 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(297_826_000 as u64)
            // Standard Error: 3_457
            .saturating_add(Weight::from_ref_time(96_357 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(26 as u64))
            .saturating_add(T::DbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument(c: u32, ) -> Weight {
        Weight::from_ref_time(39_599_000 as u64)
            // Standard Error: 67
            .saturating_add(Weight::from_ref_time(51_189 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(84_750_000 as u64)
            // Standard Error: 57_421
            .saturating_add(Weight::from_ref_time(206_664_289 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gas(r: u32, ) -> Weight {
        Weight::from_ref_time(84_248_000 as u64)
            // Standard Error: 240_223
            .saturating_add(Weight::from_ref_time(68_172_870 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(96_934_000 as u64)
            // Standard Error: 260_853
            .saturating_add(Weight::from_ref_time(67_305_813 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_msg_id(r: u32, ) -> Weight {
        Weight::from_ref_time(95_311_000 as u64)
            // Standard Error: 333_569
            .saturating_add(Weight::from_ref_time(82_521_870 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(95_111_000 as u64)
            // Standard Error: 327_243
            .saturating_add(Weight::from_ref_time(82_225_499 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(94_249_000 as u64)
            // Standard Error: 354_736
            .saturating_add(Weight::from_ref_time(84_544_188 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(95_180_000 as u64)
            // Standard Error: 346_333
            .saturating_add(Weight::from_ref_time(83_077_189 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(94_309_000 as u64)
            // Standard Error: 322_154
            .saturating_add(Weight::from_ref_time(89_540_811 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(95_100_000 as u64)
            // Standard Error: 349_814
            .saturating_add(Weight::from_ref_time(90_907_258 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(84_228_000 as u64)
            // Standard Error: 240_832
            .saturating_add(Weight::from_ref_time(59_690_373 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(93_828_000 as u64)
            // Standard Error: 332_391
            .saturating_add(Weight::from_ref_time(82_997_587 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(182_686_000 as u64)
            // Standard Error: 15_536
            .saturating_add(Weight::from_ref_time(7_220_346 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(83_628_000 as u64)
            // Standard Error: 31_881
            .saturating_add(Weight::from_ref_time(54_201_455 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(84_108_000 as u64)
            // Standard Error: 23_733
            .saturating_add(Weight::from_ref_time(63_142_966 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(84_359_000 as u64)
            // Standard Error: 59_111
            .saturating_add(Weight::from_ref_time(93_170_868 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(87_194_000 as u64)
            // Standard Error: 70_024
            .saturating_add(Weight::from_ref_time(181_760_799 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(296_603_000 as u64)
            // Standard Error: 27_263
            .saturating_add(Weight::from_ref_time(50_766_443 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(93_998_000 as u64)
            // Standard Error: 41_963
            .saturating_add(Weight::from_ref_time(2_494_638 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(113_147_000 as u64)
            // Standard Error: 1_881
            .saturating_add(Weight::from_ref_time(42_237 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(94_108_000 as u64)
            // Standard Error: 82_257
            .saturating_add(Weight::from_ref_time(120_621_318 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(247_836_000 as u64)
            // Standard Error: 4_334
            .saturating_add(Weight::from_ref_time(144_689 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(94_769_000 as u64)
            // Standard Error: 34_164
            .saturating_add(Weight::from_ref_time(82_967_760 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(180_912_000 as u64)
            // Standard Error: 30_259
            .saturating_add(Weight::from_ref_time(51_254_569 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(84_619_000 as u64)
            // Standard Error: 63_306
            .saturating_add(Weight::from_ref_time(78_289_583 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(84_209_000 as u64)
            // Standard Error: 33_103
            .saturating_add(Weight::from_ref_time(76_534_425 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_exit_code(r: u32, ) -> Weight {
        Weight::from_ref_time(84_319_000 as u64)
            // Standard Error: 366_420
            .saturating_add(Weight::from_ref_time(64_765_630 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(119_499_000 as u64)
            // Standard Error: 5_503_793
            .saturating_add(Weight::from_ref_time(56_847_000 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(104_609_000 as u64)
            // Standard Error: 5_176_792
            .saturating_add(Weight::from_ref_time(43_751_900 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(91_233_000 as u64)
            // Standard Error: 3_733_527
            .saturating_add(Weight::from_ref_time(12_973_500 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(87_766_000 as u64)
            // Standard Error: 657_369
            .saturating_add(Weight::from_ref_time(34_581_500 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        Weight::from_ref_time(85_562_000 as u64)
            // Standard Error: 782_588
            .saturating_add(Weight::from_ref_time(36_598_599 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(88_467_000 as u64)
            // Standard Error: 591_471
            .saturating_add(Weight::from_ref_time(24_730_331 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(100_762_000 as u64)
            // Standard Error: 4_380_321
            .saturating_add(Weight::from_ref_time(43_719_200 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(123_777_000 as u64)
            // Standard Error: 31_296
            .saturating_add(Weight::from_ref_time(330_210 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(2_966_000 as u64)
            // Standard Error: 957
            .saturating_add(Weight::from_ref_time(19_979 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(10_571_000 as u64)
            // Standard Error: 15_023
            .saturating_add(Weight::from_ref_time(671_953 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(11_624_000 as u64)
            // Standard Error: 22_448
            .saturating_add(Weight::from_ref_time(1_480_668 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(2_985_000 as u64)
            // Standard Error: 1_299
            .saturating_add(Weight::from_ref_time(628_705 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(2_986_000 as u64)
            // Standard Error: 1_909
            .saturating_add(Weight::from_ref_time(644_295 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(2_956_000 as u64)
            // Standard Error: 4_768
            .saturating_add(Weight::from_ref_time(635_285 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_066_000 as u64)
            // Standard Error: 12_765
            .saturating_add(Weight::from_ref_time(764_635 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(2_936_000 as u64)
            // Standard Error: 8_139
            .saturating_add(Weight::from_ref_time(1_691_689 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(4_369_000 as u64)
            // Standard Error: 53
            .saturating_add(Weight::from_ref_time(8_675 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(3_226_000 as u64)
            // Standard Error: 1_938
            .saturating_add(Weight::from_ref_time(656_630 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(3_788_000 as u64)
            // Standard Error: 844
            .saturating_add(Weight::from_ref_time(1_493_506 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(5_170_000 as u64)
            // Standard Error: 216
            .saturating_add(Weight::from_ref_time(75_977 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 527
            .saturating_add(Weight::from_ref_time(35_035 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(3_136_000 as u64)
            // Standard Error: 3_978
            .saturating_add(Weight::from_ref_time(106_368 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(3_146_000 as u64)
            // Standard Error: 627
            .saturating_add(Weight::from_ref_time(65_146 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(14_719_000 as u64)
            // Standard Error: 513
            .saturating_add(Weight::from_ref_time(43_118 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(11_212_000 as u64)
            // Standard Error: 4_470
            .saturating_add(Weight::from_ref_time(212_003 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(10_201_000 as u64)
            // Standard Error: 786
            .saturating_add(Weight::from_ref_time(1_238_996 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(2_986_000 as u64)
            // Standard Error: 2_111
            .saturating_add(Weight::from_ref_time(792_194 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(2_966_000 as u64)
            // Standard Error: 2_132
            .saturating_add(Weight::from_ref_time(762_850 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(2_966_000 as u64)
            // Standard Error: 2_626
            .saturating_add(Weight::from_ref_time(76_505 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_166_000 as u64)
            // Standard Error: 408
            .saturating_add(Weight::from_ref_time(101_122 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(2_966_000 as u64)
            // Standard Error: 236
            .saturating_add(Weight::from_ref_time(38_116 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(2_976_000 as u64)
            // Standard Error: 222
            .saturating_add(Weight::from_ref_time(26_409 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(2_986_000 as u64)
            // Standard Error: 462
            .saturating_add(Weight::from_ref_time(29_428 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(2_906_000 as u64)
            // Standard Error: 454
            .saturating_add(Weight::from_ref_time(111_065 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(3_026_000 as u64)
            // Standard Error: 351
            .saturating_add(Weight::from_ref_time(104_584 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(2_966_000 as u64)
            // Standard Error: 450
            .saturating_add(Weight::from_ref_time(106_209 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_996_000 as u64)
            // Standard Error: 1_225
            .saturating_add(Weight::from_ref_time(118_057 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_036_000 as u64)
            // Standard Error: 3_639
            .saturating_add(Weight::from_ref_time(154_864 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 760
            .saturating_add(Weight::from_ref_time(113_617 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(2_946_000 as u64)
            // Standard Error: 434
            .saturating_add(Weight::from_ref_time(106_150 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_066_000 as u64)
            // Standard Error: 353
            .saturating_add(Weight::from_ref_time(104_950 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(3_026_000 as u64)
            // Standard Error: 356
            .saturating_add(Weight::from_ref_time(105_032 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_016_000 as u64)
            // Standard Error: 322
            .saturating_add(Weight::from_ref_time(103_246 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(2_966_000 as u64)
            // Standard Error: 642
            .saturating_add(Weight::from_ref_time(91_090 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(3_016_000 as u64)
            // Standard Error: 338
            .saturating_add(Weight::from_ref_time(90_878 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 895
            .saturating_add(Weight::from_ref_time(123_166 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_376_000 as u64)
            // Standard Error: 1_921
            .saturating_add(Weight::from_ref_time(487_211 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_117_000 as u64)
            // Standard Error: 1_343
            .saturating_add(Weight::from_ref_time(470_218 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 540
            .saturating_add(Weight::from_ref_time(827_913 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_946_000 as u64)
            // Standard Error: 612
            .saturating_add(Weight::from_ref_time(460_198 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(2_956_000 as u64)
            // Standard Error: 359
            .saturating_add(Weight::from_ref_time(91_556 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(2_956_000 as u64)
            // Standard Error: 431
            .saturating_add(Weight::from_ref_time(91_980 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(2_935_000 as u64)
            // Standard Error: 394
            .saturating_add(Weight::from_ref_time(92_391 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(2_976_000 as u64)
            // Standard Error: 291
            .saturating_add(Weight::from_ref_time(83_145 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(2_996_000 as u64)
            // Standard Error: 4_546
            .saturating_add(Weight::from_ref_time(146_581 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(3_236_000 as u64)
            // Standard Error: 4_125
            .saturating_add(Weight::from_ref_time(195_854 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_397_000 as u64)
            // Standard Error: 4_533
            .saturating_add(Weight::from_ref_time(186_838 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(3_788_000 as u64)
            // Standard Error: 2_378
            .saturating_add(Weight::from_ref_time(102_892 as u64).saturating_mul(r as u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 256902]`.
    fn instantiate_module(c: u32, ) -> Weight {
        Weight::from_ref_time(78_838_000 as u64)
            // Standard Error: 27
            .saturating_add(Weight::from_ref_time(2_407 as u64).saturating_mul(c as u64))
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(107_365_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(8 as u64))
            .saturating_add(RocksDbWeight::get().writes(6 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(52_084_000 as u64)
            // Standard Error: 498
            .saturating_add(Weight::from_ref_time(65_688 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
            .saturating_add(RocksDbWeight::get().writes(3 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(129_349_000 as u64)
            // Standard Error: 17
            .saturating_add(Weight::from_ref_time(2_759 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(10_832_032_000 as u64)
            // Standard Error: 594
            .saturating_add(Weight::from_ref_time(22_545 as u64).saturating_mul(c as u64))
            // Standard Error: 36
            .saturating_add(Weight::from_ref_time(1_256 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(11 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(88_958_000 as u64)
            // Standard Error: 14
            .saturating_add(Weight::from_ref_time(896 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(130_661_000 as u64)
            // Standard Error: 20
            .saturating_add(Weight::from_ref_time(1_315 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(14 as u64))
            .saturating_add(RocksDbWeight::get().writes(11 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        Weight::from_ref_time(188_006_000 as u64)
            // Standard Error: 3_869
            .saturating_add(Weight::from_ref_time(33_615 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(25 as u64))
            .saturating_add(RocksDbWeight::get().writes(23 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(297_826_000 as u64)
            // Standard Error: 3_457
            .saturating_add(Weight::from_ref_time(96_357 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(26 as u64))
            .saturating_add(RocksDbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument(c: u32, ) -> Weight {
        Weight::from_ref_time(39_599_000 as u64)
            // Standard Error: 67
            .saturating_add(Weight::from_ref_time(51_189 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(84_750_000 as u64)
            // Standard Error: 57_421
            .saturating_add(Weight::from_ref_time(206_664_289 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gas(r: u32, ) -> Weight {
        Weight::from_ref_time(84_248_000 as u64)
            // Standard Error: 240_223
            .saturating_add(Weight::from_ref_time(68_172_870 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(96_934_000 as u64)
            // Standard Error: 260_853
            .saturating_add(Weight::from_ref_time(67_305_813 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_msg_id(r: u32, ) -> Weight {
        Weight::from_ref_time(95_311_000 as u64)
            // Standard Error: 333_569
            .saturating_add(Weight::from_ref_time(82_521_870 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(95_111_000 as u64)
            // Standard Error: 327_243
            .saturating_add(Weight::from_ref_time(82_225_499 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(94_249_000 as u64)
            // Standard Error: 354_736
            .saturating_add(Weight::from_ref_time(84_544_188 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(95_180_000 as u64)
            // Standard Error: 346_333
            .saturating_add(Weight::from_ref_time(83_077_189 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(94_309_000 as u64)
            // Standard Error: 322_154
            .saturating_add(Weight::from_ref_time(89_540_811 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(95_100_000 as u64)
            // Standard Error: 349_814
            .saturating_add(Weight::from_ref_time(90_907_258 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(84_228_000 as u64)
            // Standard Error: 240_832
            .saturating_add(Weight::from_ref_time(59_690_373 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(93_828_000 as u64)
            // Standard Error: 332_391
            .saturating_add(Weight::from_ref_time(82_997_587 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(182_686_000 as u64)
            // Standard Error: 15_536
            .saturating_add(Weight::from_ref_time(7_220_346 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(83_628_000 as u64)
            // Standard Error: 31_881
            .saturating_add(Weight::from_ref_time(54_201_455 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(84_108_000 as u64)
            // Standard Error: 23_733
            .saturating_add(Weight::from_ref_time(63_142_966 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(84_359_000 as u64)
            // Standard Error: 59_111
            .saturating_add(Weight::from_ref_time(93_170_868 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(87_194_000 as u64)
            // Standard Error: 70_024
            .saturating_add(Weight::from_ref_time(181_760_799 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(296_603_000 as u64)
            // Standard Error: 27_263
            .saturating_add(Weight::from_ref_time(50_766_443 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(93_998_000 as u64)
            // Standard Error: 41_963
            .saturating_add(Weight::from_ref_time(2_494_638 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(113_147_000 as u64)
            // Standard Error: 1_881
            .saturating_add(Weight::from_ref_time(42_237 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(94_108_000 as u64)
            // Standard Error: 82_257
            .saturating_add(Weight::from_ref_time(120_621_318 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(247_836_000 as u64)
            // Standard Error: 4_334
            .saturating_add(Weight::from_ref_time(144_689 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(94_769_000 as u64)
            // Standard Error: 34_164
            .saturating_add(Weight::from_ref_time(82_967_760 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(180_912_000 as u64)
            // Standard Error: 30_259
            .saturating_add(Weight::from_ref_time(51_254_569 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(84_619_000 as u64)
            // Standard Error: 63_306
            .saturating_add(Weight::from_ref_time(78_289_583 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(84_209_000 as u64)
            // Standard Error: 33_103
            .saturating_add(Weight::from_ref_time(76_534_425 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_exit_code(r: u32, ) -> Weight {
        Weight::from_ref_time(84_319_000 as u64)
            // Standard Error: 366_420
            .saturating_add(Weight::from_ref_time(64_765_630 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(119_499_000 as u64)
            // Standard Error: 5_503_793
            .saturating_add(Weight::from_ref_time(56_847_000 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(104_609_000 as u64)
            // Standard Error: 5_176_792
            .saturating_add(Weight::from_ref_time(43_751_900 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(91_233_000 as u64)
            // Standard Error: 3_733_527
            .saturating_add(Weight::from_ref_time(12_973_500 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(87_766_000 as u64)
            // Standard Error: 657_369
            .saturating_add(Weight::from_ref_time(34_581_500 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        Weight::from_ref_time(85_562_000 as u64)
            // Standard Error: 782_588
            .saturating_add(Weight::from_ref_time(36_598_599 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(88_467_000 as u64)
            // Standard Error: 591_471
            .saturating_add(Weight::from_ref_time(24_730_331 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(100_762_000 as u64)
            // Standard Error: 4_380_321
            .saturating_add(Weight::from_ref_time(43_719_200 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(123_777_000 as u64)
            // Standard Error: 31_296
            .saturating_add(Weight::from_ref_time(330_210 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(2_966_000 as u64)
            // Standard Error: 957
            .saturating_add(Weight::from_ref_time(19_979 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(10_571_000 as u64)
            // Standard Error: 15_023
            .saturating_add(Weight::from_ref_time(671_953 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(11_624_000 as u64)
            // Standard Error: 22_448
            .saturating_add(Weight::from_ref_time(1_480_668 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(2_985_000 as u64)
            // Standard Error: 1_299
            .saturating_add(Weight::from_ref_time(628_705 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(2_986_000 as u64)
            // Standard Error: 1_909
            .saturating_add(Weight::from_ref_time(644_295 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(2_956_000 as u64)
            // Standard Error: 4_768
            .saturating_add(Weight::from_ref_time(635_285 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_066_000 as u64)
            // Standard Error: 12_765
            .saturating_add(Weight::from_ref_time(764_635 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(2_936_000 as u64)
            // Standard Error: 8_139
            .saturating_add(Weight::from_ref_time(1_691_689 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(4_369_000 as u64)
            // Standard Error: 53
            .saturating_add(Weight::from_ref_time(8_675 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(3_226_000 as u64)
            // Standard Error: 1_938
            .saturating_add(Weight::from_ref_time(656_630 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(3_788_000 as u64)
            // Standard Error: 844
            .saturating_add(Weight::from_ref_time(1_493_506 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(5_170_000 as u64)
            // Standard Error: 216
            .saturating_add(Weight::from_ref_time(75_977 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 527
            .saturating_add(Weight::from_ref_time(35_035 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(3_136_000 as u64)
            // Standard Error: 3_978
            .saturating_add(Weight::from_ref_time(106_368 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(3_146_000 as u64)
            // Standard Error: 627
            .saturating_add(Weight::from_ref_time(65_146 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(14_719_000 as u64)
            // Standard Error: 513
            .saturating_add(Weight::from_ref_time(43_118 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(11_212_000 as u64)
            // Standard Error: 4_470
            .saturating_add(Weight::from_ref_time(212_003 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(10_201_000 as u64)
            // Standard Error: 786
            .saturating_add(Weight::from_ref_time(1_238_996 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(2_986_000 as u64)
            // Standard Error: 2_111
            .saturating_add(Weight::from_ref_time(792_194 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(2_966_000 as u64)
            // Standard Error: 2_132
            .saturating_add(Weight::from_ref_time(762_850 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(2_966_000 as u64)
            // Standard Error: 2_626
            .saturating_add(Weight::from_ref_time(76_505 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_166_000 as u64)
            // Standard Error: 408
            .saturating_add(Weight::from_ref_time(101_122 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(2_966_000 as u64)
            // Standard Error: 236
            .saturating_add(Weight::from_ref_time(38_116 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(2_976_000 as u64)
            // Standard Error: 222
            .saturating_add(Weight::from_ref_time(26_409 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(2_986_000 as u64)
            // Standard Error: 462
            .saturating_add(Weight::from_ref_time(29_428 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(2_906_000 as u64)
            // Standard Error: 454
            .saturating_add(Weight::from_ref_time(111_065 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(3_026_000 as u64)
            // Standard Error: 351
            .saturating_add(Weight::from_ref_time(104_584 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(2_966_000 as u64)
            // Standard Error: 450
            .saturating_add(Weight::from_ref_time(106_209 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_996_000 as u64)
            // Standard Error: 1_225
            .saturating_add(Weight::from_ref_time(118_057 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_036_000 as u64)
            // Standard Error: 3_639
            .saturating_add(Weight::from_ref_time(154_864 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 760
            .saturating_add(Weight::from_ref_time(113_617 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(2_946_000 as u64)
            // Standard Error: 434
            .saturating_add(Weight::from_ref_time(106_150 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_066_000 as u64)
            // Standard Error: 353
            .saturating_add(Weight::from_ref_time(104_950 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(3_026_000 as u64)
            // Standard Error: 356
            .saturating_add(Weight::from_ref_time(105_032 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_016_000 as u64)
            // Standard Error: 322
            .saturating_add(Weight::from_ref_time(103_246 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(2_966_000 as u64)
            // Standard Error: 642
            .saturating_add(Weight::from_ref_time(91_090 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(3_016_000 as u64)
            // Standard Error: 338
            .saturating_add(Weight::from_ref_time(90_878 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 895
            .saturating_add(Weight::from_ref_time(123_166 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_376_000 as u64)
            // Standard Error: 1_921
            .saturating_add(Weight::from_ref_time(487_211 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_117_000 as u64)
            // Standard Error: 1_343
            .saturating_add(Weight::from_ref_time(470_218 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 540
            .saturating_add(Weight::from_ref_time(827_913 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_946_000 as u64)
            // Standard Error: 612
            .saturating_add(Weight::from_ref_time(460_198 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(2_956_000 as u64)
            // Standard Error: 359
            .saturating_add(Weight::from_ref_time(91_556 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(2_956_000 as u64)
            // Standard Error: 431
            .saturating_add(Weight::from_ref_time(91_980 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(2_935_000 as u64)
            // Standard Error: 394
            .saturating_add(Weight::from_ref_time(92_391 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(2_976_000 as u64)
            // Standard Error: 291
            .saturating_add(Weight::from_ref_time(83_145 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(2_996_000 as u64)
            // Standard Error: 4_546
            .saturating_add(Weight::from_ref_time(146_581 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(3_236_000 as u64)
            // Standard Error: 4_125
            .saturating_add(Weight::from_ref_time(195_854 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_397_000 as u64)
            // Standard Error: 4_533
            .saturating_add(Weight::from_ref_time(186_838 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(3_788_000 as u64)
            // Standard Error: 2_378
            .saturating_add(Weight::from_ref_time(102_892 as u64).saturating_mul(r as u64))
    }
}
