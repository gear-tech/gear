// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-21, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `epyc-runners-node.hetzner`, CPU: `AMD EPYC 7502P 32-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear-node benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn gas(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_msg_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_exit_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_no_more(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(123_788_000 as u64)
            .saturating_add(T::DbWeight::get().reads(8 as u64))
            .saturating_add(T::DbWeight::get().writes(6 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(59_719_000 as u64)
            // Standard Error: 26
            .saturating_add(Weight::from_ref_time(62_182 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(82_806_000 as u64)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(3_140 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(13_356_707_000 as u64)
            // Standard Error: 602
            .saturating_add(Weight::from_ref_time(29_054 as u64).saturating_mul(c as u64))
            // Standard Error: 36
            .saturating_add(Weight::from_ref_time(1_234 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(11 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(92_034_000 as u64)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(909 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(149_799_000 as u64)
            // Standard Error: 10
            .saturating_add(Weight::from_ref_time(1_120 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(14 as u64))
            .saturating_add(T::DbWeight::get().writes(11 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        Weight::from_ref_time(215_522_000 as u64)
            // Standard Error: 2_685
            .saturating_add(Weight::from_ref_time(7_576 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(25 as u64))
            .saturating_add(T::DbWeight::get().writes(23 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(346_213_000 as u64)
            // Standard Error: 610
            .saturating_add(Weight::from_ref_time(12_797 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(26 as u64))
            .saturating_add(T::DbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument(c: u32, ) -> Weight {
        Weight::from_ref_time(38_558_000 as u64)
            // Standard Error: 29
            .saturating_add(Weight::from_ref_time(64_190 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(96_954_000 as u64)
            // Standard Error: 37_908
            .saturating_add(Weight::from_ref_time(215_923_443 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gas(r: u32, ) -> Weight {
        Weight::from_ref_time(95_972_000 as u64)
            // Standard Error: 28_258
            .saturating_add(Weight::from_ref_time(74_273_020 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(96_192_000 as u64)
            // Standard Error: 266_619
            .saturating_add(Weight::from_ref_time(63_831_231 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_msg_id(r: u32, ) -> Weight {
        Weight::from_ref_time(97_385_000 as u64)
            // Standard Error: 64_428
            .saturating_add(Weight::from_ref_time(75_116_835 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(97_636_000 as u64)
            // Standard Error: 325_003
            .saturating_add(Weight::from_ref_time(86_158_115 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(108_848_000 as u64)
            // Standard Error: 73_308
            .saturating_add(Weight::from_ref_time(91_748_843 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(108_507_000 as u64)
            // Standard Error: 77_420
            .saturating_add(Weight::from_ref_time(90_701_097 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(108_356_000 as u64)
            // Standard Error: 74_842
            .saturating_add(Weight::from_ref_time(98_192_359 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(108_577_000 as u64)
            // Standard Error: 74_005
            .saturating_add(Weight::from_ref_time(98_945_743 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(95_070_000 as u64)
            // Standard Error: 23_875
            .saturating_add(Weight::from_ref_time(62_243_412 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(109_058_000 as u64)
            // Standard Error: 27_559
            .saturating_add(Weight::from_ref_time(98_667_501 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(212_715_000 as u64)
            // Standard Error: 27_429
            .saturating_add(Weight::from_ref_time(8_172_322 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(94_509_000 as u64)
            // Standard Error: 21_848
            .saturating_add(Weight::from_ref_time(61_857_267 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(94_950_000 as u64)
            // Standard Error: 21_587
            .saturating_add(Weight::from_ref_time(72_334_182 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(95_721_000 as u64)
            // Standard Error: 71_738
            .saturating_add(Weight::from_ref_time(111_355_886 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(98_367_000 as u64)
            // Standard Error: 81_408
            .saturating_add(Weight::from_ref_time(221_426_396 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(358_237_000 as u64)
            // Standard Error: 44_232
            .saturating_add(Weight::from_ref_time(55_164_911 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(110_271_000 as u64)
            // Standard Error: 78_556
            .saturating_add(Weight::from_ref_time(62_931_337 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(151_222_000 as u64)
            // Standard Error: 6_960
            .saturating_add(Weight::from_ref_time(1_183_099 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(98_587_000 as u64)
            // Standard Error: 106_225
            .saturating_add(Weight::from_ref_time(119_856_017 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(266_683_000 as u64)
            // Standard Error: 3_501
            .saturating_add(Weight::from_ref_time(144_324 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(109_910_000 as u64)
            // Standard Error: 31_498
            .saturating_add(Weight::from_ref_time(100_542_478 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(216_053_000 as u64)
            // Standard Error: 41_077
            .saturating_add(Weight::from_ref_time(58_589_983 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(95_721_000 as u64)
            // Standard Error: 75_921
            .saturating_add(Weight::from_ref_time(95_442_794 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(94_769_000 as u64)
            // Standard Error: 30_888
            .saturating_add(Weight::from_ref_time(91_157_584 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_exit_code(r: u32, ) -> Weight {
        Weight::from_ref_time(95_892_000 as u64)
            // Standard Error: 21_656
            .saturating_add(Weight::from_ref_time(62_270_684 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(108_808_000 as u64)
            // Standard Error: 372_797
            .saturating_add(Weight::from_ref_time(32_148_000 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(94_429_000 as u64)
            // Standard Error: 388_014
            .saturating_add(Weight::from_ref_time(18_385_700 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(94_269_000 as u64)
            // Standard Error: 413_293
            .saturating_add(Weight::from_ref_time(17_611_799 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(95_361_000 as u64)
            // Standard Error: 409_926
            .saturating_add(Weight::from_ref_time(39_792_700 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_no_more(r: u32, ) -> Weight {
        Weight::from_ref_time(94_920_000 as u64)
            // Standard Error: 405_475
            .saturating_add(Weight::from_ref_time(39_609_200 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(95_320_000 as u64)
            // Standard Error: 81_137
            .saturating_add(Weight::from_ref_time(155_184_139 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(110_962_000 as u64)
            // Standard Error: 347_449
            .saturating_add(Weight::from_ref_time(57_266_699 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((4 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(176_854_000 as u64)
            // Standard Error: 3_058
            .saturating_add(Weight::from_ref_time(1_230_492 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(109_238_000 as u64)
            // Standard Error: 44_745
            .saturating_add(Weight::from_ref_time(212_601_318 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(109_239_000 as u64)
            // Standard Error: 73_028
            .saturating_add(Weight::from_ref_time(6_279_978 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(3_717_000 as u64)
            // Standard Error: 310
            .saturating_add(Weight::from_ref_time(9_740 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(9_850_000 as u64)
            // Standard Error: 14_424
            .saturating_add(Weight::from_ref_time(742_760 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(9_830_000 as u64)
            // Standard Error: 29_219
            .saturating_add(Weight::from_ref_time(1_818_422 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(3_828_000 as u64)
            // Standard Error: 275
            .saturating_add(Weight::from_ref_time(671_411 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_628_000 as u64)
            // Standard Error: 492
            .saturating_add(Weight::from_ref_time(682_472 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(3_688_000 as u64)
            // Standard Error: 458
            .saturating_add(Weight::from_ref_time(561_232 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_727_000 as u64)
            // Standard Error: 417
            .saturating_add(Weight::from_ref_time(610_571 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(3_628_000 as u64)
            // Standard Error: 763
            .saturating_add(Weight::from_ref_time(1_775_012 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(5_060_000 as u64)
            // Standard Error: 87
            .saturating_add(Weight::from_ref_time(11_965 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(3_838_000 as u64)
            // Standard Error: 970
            .saturating_add(Weight::from_ref_time(709_168 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(4_429_000 as u64)
            // Standard Error: 1_409
            .saturating_add(Weight::from_ref_time(1_562_856 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(6_032_000 as u64)
            // Standard Error: 206
            .saturating_add(Weight::from_ref_time(93_082 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(3_767_000 as u64)
            // Standard Error: 567
            .saturating_add(Weight::from_ref_time(46_948 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(3_847_000 as u64)
            // Standard Error: 612
            .saturating_add(Weight::from_ref_time(80_326 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(3_788_000 as u64)
            // Standard Error: 602
            .saturating_add(Weight::from_ref_time(84_720 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(18_116_000 as u64)
            // Standard Error: 375
            .saturating_add(Weight::from_ref_time(73_962 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(14_239_000 as u64)
            // Standard Error: 2_692
            .saturating_add(Weight::from_ref_time(232_564 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(9_980_000 as u64)
            // Standard Error: 464
            .saturating_add(Weight::from_ref_time(1_288_725 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_768_000 as u64)
            // Standard Error: 312
            .saturating_add(Weight::from_ref_time(823_648 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_697_000 as u64)
            // Standard Error: 358
            .saturating_add(Weight::from_ref_time(804_151 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(3_617_000 as u64)
            // Standard Error: 743
            .saturating_add(Weight::from_ref_time(78_561 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_707_000 as u64)
            // Standard Error: 769
            .saturating_add(Weight::from_ref_time(148_446 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_657_000 as u64)
            // Standard Error: 690
            .saturating_add(Weight::from_ref_time(58_096 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_667_000 as u64)
            // Standard Error: 311
            .saturating_add(Weight::from_ref_time(35_852 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(3_737_000 as u64)
            // Standard Error: 385
            .saturating_add(Weight::from_ref_time(36_047 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(3_647_000 as u64)
            // Standard Error: 711
            .saturating_add(Weight::from_ref_time(147_577 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(3_617_000 as u64)
            // Standard Error: 556
            .saturating_add(Weight::from_ref_time(142_979 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_597_000 as u64)
            // Standard Error: 595
            .saturating_add(Weight::from_ref_time(144_822 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_647_000 as u64)
            // Standard Error: 649
            .saturating_add(Weight::from_ref_time(147_478 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_777_000 as u64)
            // Standard Error: 531
            .saturating_add(Weight::from_ref_time(139_148 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_647_000 as u64)
            // Standard Error: 464
            .saturating_add(Weight::from_ref_time(144_349 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(3_747_000 as u64)
            // Standard Error: 640
            .saturating_add(Weight::from_ref_time(145_918 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_787_000 as u64)
            // Standard Error: 777
            .saturating_add(Weight::from_ref_time(145_703 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(3_928_000 as u64)
            // Standard Error: 801
            .saturating_add(Weight::from_ref_time(140_317 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_708_000 as u64)
            // Standard Error: 951
            .saturating_add(Weight::from_ref_time(147_409 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(3_708_000 as u64)
            // Standard Error: 902
            .saturating_add(Weight::from_ref_time(115_298 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(3_668_000 as u64)
            // Standard Error: 624
            .saturating_add(Weight::from_ref_time(115_129 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(3_667_000 as u64)
            // Standard Error: 544
            .saturating_add(Weight::from_ref_time(140_834 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_708_000 as u64)
            // Standard Error: 497
            .saturating_add(Weight::from_ref_time(470_665 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_738_000 as u64)
            // Standard Error: 511
            .saturating_add(Weight::from_ref_time(464_188 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(3_648_000 as u64)
            // Standard Error: 819
            .saturating_add(Weight::from_ref_time(882_192 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_727_000 as u64)
            // Standard Error: 489
            .saturating_add(Weight::from_ref_time(467_488 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(3_677_000 as u64)
            // Standard Error: 551
            .saturating_add(Weight::from_ref_time(114_659 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(3_698_000 as u64)
            // Standard Error: 503
            .saturating_add(Weight::from_ref_time(115_885 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(3_648_000 as u64)
            // Standard Error: 697
            .saturating_add(Weight::from_ref_time(117_336 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_667_000 as u64)
            // Standard Error: 526
            .saturating_add(Weight::from_ref_time(102_194 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_647_000 as u64)
            // Standard Error: 647
            .saturating_add(Weight::from_ref_time(106_169 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(3_787_000 as u64)
            // Standard Error: 506
            .saturating_add(Weight::from_ref_time(99_445 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_647_000 as u64)
            // Standard Error: 599
            .saturating_add(Weight::from_ref_time(102_682 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(3_708_000 as u64)
            // Standard Error: 534
            .saturating_add(Weight::from_ref_time(101_038 as u64).saturating_mul(r as u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(123_788_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(8 as u64))
            .saturating_add(RocksDbWeight::get().writes(6 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(59_719_000 as u64)
            // Standard Error: 26
            .saturating_add(Weight::from_ref_time(62_182 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
            .saturating_add(RocksDbWeight::get().writes(3 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(82_806_000 as u64)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(3_140 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(13_356_707_000 as u64)
            // Standard Error: 602
            .saturating_add(Weight::from_ref_time(29_054 as u64).saturating_mul(c as u64))
            // Standard Error: 36
            .saturating_add(Weight::from_ref_time(1_234 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(11 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(92_034_000 as u64)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(909 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(149_799_000 as u64)
            // Standard Error: 10
            .saturating_add(Weight::from_ref_time(1_120 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(14 as u64))
            .saturating_add(RocksDbWeight::get().writes(11 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        Weight::from_ref_time(215_522_000 as u64)
            // Standard Error: 2_685
            .saturating_add(Weight::from_ref_time(7_576 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(25 as u64))
            .saturating_add(RocksDbWeight::get().writes(23 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(346_213_000 as u64)
            // Standard Error: 610
            .saturating_add(Weight::from_ref_time(12_797 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(26 as u64))
            .saturating_add(RocksDbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument(c: u32, ) -> Weight {
        Weight::from_ref_time(38_558_000 as u64)
            // Standard Error: 29
            .saturating_add(Weight::from_ref_time(64_190 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(96_954_000 as u64)
            // Standard Error: 37_908
            .saturating_add(Weight::from_ref_time(215_923_443 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gas(r: u32, ) -> Weight {
        Weight::from_ref_time(95_972_000 as u64)
            // Standard Error: 28_258
            .saturating_add(Weight::from_ref_time(74_273_020 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(96_192_000 as u64)
            // Standard Error: 266_619
            .saturating_add(Weight::from_ref_time(63_831_231 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_msg_id(r: u32, ) -> Weight {
        Weight::from_ref_time(97_385_000 as u64)
            // Standard Error: 64_428
            .saturating_add(Weight::from_ref_time(75_116_835 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(97_636_000 as u64)
            // Standard Error: 325_003
            .saturating_add(Weight::from_ref_time(86_158_115 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(108_848_000 as u64)
            // Standard Error: 73_308
            .saturating_add(Weight::from_ref_time(91_748_843 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(108_507_000 as u64)
            // Standard Error: 77_420
            .saturating_add(Weight::from_ref_time(90_701_097 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(108_356_000 as u64)
            // Standard Error: 74_842
            .saturating_add(Weight::from_ref_time(98_192_359 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(108_577_000 as u64)
            // Standard Error: 74_005
            .saturating_add(Weight::from_ref_time(98_945_743 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(95_070_000 as u64)
            // Standard Error: 23_875
            .saturating_add(Weight::from_ref_time(62_243_412 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(109_058_000 as u64)
            // Standard Error: 27_559
            .saturating_add(Weight::from_ref_time(98_667_501 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(212_715_000 as u64)
            // Standard Error: 27_429
            .saturating_add(Weight::from_ref_time(8_172_322 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(94_509_000 as u64)
            // Standard Error: 21_848
            .saturating_add(Weight::from_ref_time(61_857_267 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(94_950_000 as u64)
            // Standard Error: 21_587
            .saturating_add(Weight::from_ref_time(72_334_182 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(95_721_000 as u64)
            // Standard Error: 71_738
            .saturating_add(Weight::from_ref_time(111_355_886 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(98_367_000 as u64)
            // Standard Error: 81_408
            .saturating_add(Weight::from_ref_time(221_426_396 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(358_237_000 as u64)
            // Standard Error: 44_232
            .saturating_add(Weight::from_ref_time(55_164_911 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(110_271_000 as u64)
            // Standard Error: 78_556
            .saturating_add(Weight::from_ref_time(62_931_337 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(151_222_000 as u64)
            // Standard Error: 6_960
            .saturating_add(Weight::from_ref_time(1_183_099 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(98_587_000 as u64)
            // Standard Error: 106_225
            .saturating_add(Weight::from_ref_time(119_856_017 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(266_683_000 as u64)
            // Standard Error: 3_501
            .saturating_add(Weight::from_ref_time(144_324 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(109_910_000 as u64)
            // Standard Error: 31_498
            .saturating_add(Weight::from_ref_time(100_542_478 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(216_053_000 as u64)
            // Standard Error: 41_077
            .saturating_add(Weight::from_ref_time(58_589_983 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(95_721_000 as u64)
            // Standard Error: 75_921
            .saturating_add(Weight::from_ref_time(95_442_794 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(94_769_000 as u64)
            // Standard Error: 30_888
            .saturating_add(Weight::from_ref_time(91_157_584 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_exit_code(r: u32, ) -> Weight {
        Weight::from_ref_time(95_892_000 as u64)
            // Standard Error: 21_656
            .saturating_add(Weight::from_ref_time(62_270_684 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(108_808_000 as u64)
            // Standard Error: 372_797
            .saturating_add(Weight::from_ref_time(32_148_000 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(94_429_000 as u64)
            // Standard Error: 388_014
            .saturating_add(Weight::from_ref_time(18_385_700 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(94_269_000 as u64)
            // Standard Error: 413_293
            .saturating_add(Weight::from_ref_time(17_611_799 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(95_361_000 as u64)
            // Standard Error: 409_926
            .saturating_add(Weight::from_ref_time(39_792_700 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_no_more(r: u32, ) -> Weight {
        Weight::from_ref_time(94_920_000 as u64)
            // Standard Error: 405_475
            .saturating_add(Weight::from_ref_time(39_609_200 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(95_320_000 as u64)
            // Standard Error: 81_137
            .saturating_add(Weight::from_ref_time(155_184_139 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(110_962_000 as u64)
            // Standard Error: 347_449
            .saturating_add(Weight::from_ref_time(57_266_699 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((4 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(176_854_000 as u64)
            // Standard Error: 3_058
            .saturating_add(Weight::from_ref_time(1_230_492 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(109_238_000 as u64)
            // Standard Error: 44_745
            .saturating_add(Weight::from_ref_time(212_601_318 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(109_239_000 as u64)
            // Standard Error: 73_028
            .saturating_add(Weight::from_ref_time(6_279_978 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(3_717_000 as u64)
            // Standard Error: 310
            .saturating_add(Weight::from_ref_time(9_740 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(9_850_000 as u64)
            // Standard Error: 14_424
            .saturating_add(Weight::from_ref_time(742_760 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(9_830_000 as u64)
            // Standard Error: 29_219
            .saturating_add(Weight::from_ref_time(1_818_422 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(3_828_000 as u64)
            // Standard Error: 275
            .saturating_add(Weight::from_ref_time(671_411 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_628_000 as u64)
            // Standard Error: 492
            .saturating_add(Weight::from_ref_time(682_472 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(3_688_000 as u64)
            // Standard Error: 458
            .saturating_add(Weight::from_ref_time(561_232 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_727_000 as u64)
            // Standard Error: 417
            .saturating_add(Weight::from_ref_time(610_571 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(3_628_000 as u64)
            // Standard Error: 763
            .saturating_add(Weight::from_ref_time(1_775_012 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(5_060_000 as u64)
            // Standard Error: 87
            .saturating_add(Weight::from_ref_time(11_965 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(3_838_000 as u64)
            // Standard Error: 970
            .saturating_add(Weight::from_ref_time(709_168 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(4_429_000 as u64)
            // Standard Error: 1_409
            .saturating_add(Weight::from_ref_time(1_562_856 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(6_032_000 as u64)
            // Standard Error: 206
            .saturating_add(Weight::from_ref_time(93_082 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(3_767_000 as u64)
            // Standard Error: 567
            .saturating_add(Weight::from_ref_time(46_948 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(3_847_000 as u64)
            // Standard Error: 612
            .saturating_add(Weight::from_ref_time(80_326 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(3_788_000 as u64)
            // Standard Error: 602
            .saturating_add(Weight::from_ref_time(84_720 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(18_116_000 as u64)
            // Standard Error: 375
            .saturating_add(Weight::from_ref_time(73_962 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(14_239_000 as u64)
            // Standard Error: 2_692
            .saturating_add(Weight::from_ref_time(232_564 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(9_980_000 as u64)
            // Standard Error: 464
            .saturating_add(Weight::from_ref_time(1_288_725 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_768_000 as u64)
            // Standard Error: 312
            .saturating_add(Weight::from_ref_time(823_648 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_697_000 as u64)
            // Standard Error: 358
            .saturating_add(Weight::from_ref_time(804_151 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(3_617_000 as u64)
            // Standard Error: 743
            .saturating_add(Weight::from_ref_time(78_561 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_707_000 as u64)
            // Standard Error: 769
            .saturating_add(Weight::from_ref_time(148_446 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_657_000 as u64)
            // Standard Error: 690
            .saturating_add(Weight::from_ref_time(58_096 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_667_000 as u64)
            // Standard Error: 311
            .saturating_add(Weight::from_ref_time(35_852 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(3_737_000 as u64)
            // Standard Error: 385
            .saturating_add(Weight::from_ref_time(36_047 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(3_647_000 as u64)
            // Standard Error: 711
            .saturating_add(Weight::from_ref_time(147_577 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(3_617_000 as u64)
            // Standard Error: 556
            .saturating_add(Weight::from_ref_time(142_979 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_597_000 as u64)
            // Standard Error: 595
            .saturating_add(Weight::from_ref_time(144_822 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_647_000 as u64)
            // Standard Error: 649
            .saturating_add(Weight::from_ref_time(147_478 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_777_000 as u64)
            // Standard Error: 531
            .saturating_add(Weight::from_ref_time(139_148 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_647_000 as u64)
            // Standard Error: 464
            .saturating_add(Weight::from_ref_time(144_349 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(3_747_000 as u64)
            // Standard Error: 640
            .saturating_add(Weight::from_ref_time(145_918 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_787_000 as u64)
            // Standard Error: 777
            .saturating_add(Weight::from_ref_time(145_703 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(3_928_000 as u64)
            // Standard Error: 801
            .saturating_add(Weight::from_ref_time(140_317 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_708_000 as u64)
            // Standard Error: 951
            .saturating_add(Weight::from_ref_time(147_409 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(3_708_000 as u64)
            // Standard Error: 902
            .saturating_add(Weight::from_ref_time(115_298 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(3_668_000 as u64)
            // Standard Error: 624
            .saturating_add(Weight::from_ref_time(115_129 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(3_667_000 as u64)
            // Standard Error: 544
            .saturating_add(Weight::from_ref_time(140_834 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_708_000 as u64)
            // Standard Error: 497
            .saturating_add(Weight::from_ref_time(470_665 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_738_000 as u64)
            // Standard Error: 511
            .saturating_add(Weight::from_ref_time(464_188 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(3_648_000 as u64)
            // Standard Error: 819
            .saturating_add(Weight::from_ref_time(882_192 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_727_000 as u64)
            // Standard Error: 489
            .saturating_add(Weight::from_ref_time(467_488 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(3_677_000 as u64)
            // Standard Error: 551
            .saturating_add(Weight::from_ref_time(114_659 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(3_698_000 as u64)
            // Standard Error: 503
            .saturating_add(Weight::from_ref_time(115_885 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(3_648_000 as u64)
            // Standard Error: 697
            .saturating_add(Weight::from_ref_time(117_336 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_667_000 as u64)
            // Standard Error: 526
            .saturating_add(Weight::from_ref_time(102_194 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_647_000 as u64)
            // Standard Error: 647
            .saturating_add(Weight::from_ref_time(106_169 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(3_787_000 as u64)
            // Standard Error: 506
            .saturating_add(Weight::from_ref_time(99_445 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_647_000 as u64)
            // Standard Error: 599
            .saturating_add(Weight::from_ref_time(102_682 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(3_708_000 as u64)
            // Standard Error: 534
            .saturating_add(Weight::from_ref_time(101_038 as u64).saturating_mul(r as u64))
    }
}
