// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-31, STEPS: `20`, REPEAT: `40`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=20 --repeat=40 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_error(r: u32, ) -> Weight;
    fn gr_status_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_041 nanoseconds.
        Weight::from_ref_time(1_117_000)
            // Standard Error: 554
            .saturating_add(Weight::from_ref_time(203_869).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `145 + c * (1024 ±0)`
        //  Estimated: `2612 + c * (1024 ±0)`
        // Minimum execution time: 3_347 nanoseconds.
        Weight::from_parts(3_473_000, 2612)
            // Standard Error: 1_095
            .saturating_add(Weight::from_ref_time(730_012).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 54_053 nanoseconds.
        Weight::from_ref_time(97_324_568)
            // Standard Error: 7_269
            .saturating_add(Weight::from_ref_time(2_150_727).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `918`
        //  Estimated: `17301`
        // Minimum execution time: 56_300 nanoseconds.
        Weight::from_parts(58_379_000, 17301)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3290`
        // Minimum execution time: 68_305 nanoseconds.
        Weight::from_parts(37_775_805, 3290)
            // Standard Error: 47_717
            .saturating_add(Weight::from_ref_time(53_230_170).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `675`
        //  Estimated: `18282`
        // Minimum execution time: 53_290 nanoseconds.
        Weight::from_parts(42_169_404, 18282)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(2_363).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `126`
        //  Estimated: `14142`
        // Minimum execution time: 9_484_499 nanoseconds.
        Weight::from_parts(9_683_745_000, 14142)
            // Standard Error: 519_131
            .saturating_add(Weight::from_ref_time(29_475_361).saturating_mul(c.into()))
            // Standard Error: 30
            .saturating_add(Weight::from_ref_time(850).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `375`
        //  Estimated: `14765`
        // Minimum execution time: 55_104 nanoseconds.
        Weight::from_parts(25_908_173, 14765)
            // Standard Error: 5
            .saturating_add(Weight::from_ref_time(1_203).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1113`
        //  Estimated: `31447`
        // Minimum execution time: 78_198 nanoseconds.
        Weight::from_parts(65_278_888, 31447)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(1_191).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `982`
        //  Estimated: `48842`
        // Minimum execution time: 319_890 nanoseconds.
        Weight::from_parts(332_695_040, 48842)
            // Standard Error: 1_247
            .saturating_add(Weight::from_ref_time(2_175).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(26_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `982`
        //  Estimated: `48842`
        // Minimum execution time: 338_076 nanoseconds.
        Weight::from_parts(349_061_276, 48842)
            // Standard Error: 1_053
            .saturating_add(Weight::from_ref_time(1_482).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(26_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `243 + c * (1075 ±0)`
        //  Estimated: `2997 + c * (2150 ±0)`
        // Minimum execution time: 51_974 nanoseconds.
        Weight::from_parts(52_258_000, 2997)
            // Standard Error: 33_953
            .saturating_add(Weight::from_ref_time(52_771_164).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_proof_size(2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_008 nanoseconds.
        Weight::from_ref_time(99_834_599)
            // Standard Error: 204_234
            .saturating_add(Weight::from_ref_time(145_476_620).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 230_953 nanoseconds.
        Weight::from_ref_time(249_301_083)
            // Standard Error: 319_276
            .saturating_add(Weight::from_ref_time(139_826_997).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_790 nanoseconds.
        Weight::from_ref_time(94_200_000)
            // Standard Error: 1_184_766
            .saturating_add(Weight::from_ref_time(376_662_867).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 168_776 nanoseconds.
        Weight::from_ref_time(193_302_533)
            // Standard Error: 137_192
            .saturating_add(Weight::from_ref_time(305_366_358).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_922 nanoseconds.
        Weight::from_ref_time(128_038_347)
            // Standard Error: 232_367
            .saturating_add(Weight::from_ref_time(202_195_006).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_940 nanoseconds.
        Weight::from_ref_time(109_433_007)
            // Standard Error: 140_126
            .saturating_add(Weight::from_ref_time(201_823_250).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_334 nanoseconds.
        Weight::from_ref_time(110_995_576)
            // Standard Error: 170_152
            .saturating_add(Weight::from_ref_time(203_592_179).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_493 nanoseconds.
        Weight::from_ref_time(103_262_021)
            // Standard Error: 85_841
            .saturating_add(Weight::from_ref_time(203_578_448).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_323 nanoseconds.
        Weight::from_ref_time(107_399_655)
            // Standard Error: 159_517
            .saturating_add(Weight::from_ref_time(201_045_742).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_755 nanoseconds.
        Weight::from_ref_time(108_596_604)
            // Standard Error: 152_422
            .saturating_add(Weight::from_ref_time(200_951_868).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_931 nanoseconds.
        Weight::from_ref_time(113_020_476)
            // Standard Error: 185_759
            .saturating_add(Weight::from_ref_time(200_059_039).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_091 nanoseconds.
        Weight::from_ref_time(102_943_958)
            // Standard Error: 122_720
            .saturating_add(Weight::from_ref_time(202_439_755).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_588 nanoseconds.
        Weight::from_ref_time(108_485_672)
            // Standard Error: 158_167
            .saturating_add(Weight::from_ref_time(201_225_245).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 610_200 nanoseconds.
        Weight::from_ref_time(640_541_991)
            // Standard Error: 204_920
            .saturating_add(Weight::from_ref_time(276_092_530).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 881_951 nanoseconds.
        Weight::from_ref_time(898_008_000)
            // Standard Error: 60_798
            .saturating_add(Weight::from_ref_time(12_749_406).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_202 nanoseconds.
        Weight::from_ref_time(110_594_805)
            // Standard Error: 170_149
            .saturating_add(Weight::from_ref_time(200_722_534).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_709 nanoseconds.
        Weight::from_ref_time(114_872_867)
            // Standard Error: 183_601
            .saturating_add(Weight::from_ref_time(201_188_015).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_984 nanoseconds.
        Weight::from_ref_time(113_613_377)
            // Standard Error: 156_075
            .saturating_add(Weight::from_ref_time(265_360_356).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_786 nanoseconds.
        Weight::from_ref_time(103_968_128)
            // Standard Error: 145_960
            .saturating_add(Weight::from_ref_time(209_473_875).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_136_454 nanoseconds.
        Weight::from_ref_time(4_288_652_393)
            // Standard Error: 304_341
            .saturating_add(Weight::from_ref_time(296_087_001).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 596_181 nanoseconds.
        Weight::from_ref_time(601_053_000)
            // Standard Error: 77_278
            .saturating_add(Weight::from_ref_time(33_906_609).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_568 nanoseconds.
        Weight::from_ref_time(123_876_272)
            // Standard Error: 231_201
            .saturating_add(Weight::from_ref_time(396_568_908).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 490_921 nanoseconds.
        Weight::from_ref_time(496_144_000)
            // Standard Error: 73_077
            .saturating_add(Weight::from_ref_time(24_032_804).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 258_422 nanoseconds.
        Weight::from_ref_time(298_292_439)
            // Standard Error: 237_657
            .saturating_add(Weight::from_ref_time(405_991_134).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 525_689 nanoseconds.
        Weight::from_ref_time(528_633_000)
            // Standard Error: 71_415
            .saturating_add(Weight::from_ref_time(24_079_207).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_386 nanoseconds.
        Weight::from_ref_time(95_401_663)
            // Standard Error: 235_388
            .saturating_add(Weight::from_ref_time(19_662_386).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 111_166 nanoseconds.
        Weight::from_ref_time(98_780_422)
            // Standard Error: 713
            .saturating_add(Weight::from_ref_time(462_988).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_896 nanoseconds.
        Weight::from_ref_time(126_254_605)
            // Standard Error: 157_288
            .saturating_add(Weight::from_ref_time(282_662_043).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_258 nanoseconds.
        Weight::from_ref_time(81_845_402)
            // Standard Error: 834
            .saturating_add(Weight::from_ref_time(583_260).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_676 nanoseconds.
        Weight::from_ref_time(103_623_610)
            // Standard Error: 249_367
            .saturating_add(Weight::from_ref_time(11_279_339).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 112_175 nanoseconds.
        Weight::from_ref_time(99_763_118)
            // Standard Error: 762
            .saturating_add(Weight::from_ref_time(462_968).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_001 nanoseconds.
        Weight::from_ref_time(111_072_549)
            // Standard Error: 181_764
            .saturating_add(Weight::from_ref_time(201_927_617).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_015 nanoseconds.
        Weight::from_ref_time(109_255_145)
            // Standard Error: 157_958
            .saturating_add(Weight::from_ref_time(202_820_750).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 597_587 nanoseconds.
        Weight::from_ref_time(644_262_440)
            // Standard Error: 283_702
            .saturating_add(Weight::from_ref_time(211_969_896).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 593_476 nanoseconds.
        Weight::from_ref_time(642_997_781)
            // Standard Error: 1_536
            .saturating_add(Weight::from_ref_time(105_699).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_645_502 nanoseconds.
        Weight::from_ref_time(4_830_796_925)
            // Standard Error: 415_136
            .saturating_add(Weight::from_ref_time(226_750_736).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_022_783 nanoseconds.
        Weight::from_ref_time(922_806_976)
            // Standard Error: 12_082
            .saturating_add(Weight::from_ref_time(12_197_398).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_718 nanoseconds.
        Weight::from_ref_time(117_227_598)
            // Standard Error: 170_974
            .saturating_add(Weight::from_ref_time(214_803_107).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 298_112 nanoseconds.
        Weight::from_ref_time(302_222_000)
            // Standard Error: 65_266
            .saturating_add(Weight::from_ref_time(30_040_028).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_852 nanoseconds.
        Weight::from_ref_time(125_733_771)
            // Standard Error: 195_791
            .saturating_add(Weight::from_ref_time(266_177_986).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_495 nanoseconds.
        Weight::from_ref_time(104_619_237)
            // Standard Error: 129_688
            .saturating_add(Weight::from_ref_time(201_829_466).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_860 nanoseconds.
        Weight::from_ref_time(94_367_647)
            // Standard Error: 247_027
            .saturating_add(Weight::from_ref_time(31_632_752).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_637 nanoseconds.
        Weight::from_ref_time(93_713_871)
            // Standard Error: 244_331
            .saturating_add(Weight::from_ref_time(21_993_828).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_934 nanoseconds.
        Weight::from_ref_time(93_620_484)
            // Standard Error: 243_985
            .saturating_add(Weight::from_ref_time(22_281_715).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_205 nanoseconds.
        Weight::from_ref_time(94_272_221)
            // Standard Error: 243_338
            .saturating_add(Weight::from_ref_time(23_169_728).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_207 nanoseconds.
        Weight::from_ref_time(94_381_447)
            // Standard Error: 250_168
            .saturating_add(Weight::from_ref_time(22_505_802).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 167_056 nanoseconds.
        Weight::from_ref_time(187_286_683)
            // Standard Error: 110_124
            .saturating_add(Weight::from_ref_time(296_545_440).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_193 nanoseconds.
        Weight::from_ref_time(128_726_082)
            // Standard Error: 257_078
            .saturating_add(Weight::from_ref_time(471_700_013).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_585_661 nanoseconds.
        Weight::from_ref_time(51_798_112_000)
            // Standard Error: 348_287
            .saturating_add(Weight::from_ref_time(8_778_326).saturating_mul(p.into()))
            // Standard Error: 348_267
            .saturating_add(Weight::from_ref_time(154_492_962).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 89_006 nanoseconds.
        Weight::from_parts(120_744_543, 141)
            // Standard Error: 4_762
            .saturating_add(Weight::from_ref_time(11_230_855).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 88_677 nanoseconds.
        Weight::from_parts(90_732_000, 141)
            // Standard Error: 38_096
            .saturating_add(Weight::from_ref_time(37_693_910).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5068941`
        // Minimum execution time: 5_822_993 nanoseconds.
        Weight::from_parts(5_693_788_013, 5068941)
            // Standard Error: 47_224
            .saturating_add(Weight::from_ref_time(39_196_844).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65704 ±0)`
        //  Estimated: `1012 + p * (75606 ±0)`
        // Minimum execution time: 88_891 nanoseconds.
        Weight::from_parts(43_022_256, 1012)
            // Standard Error: 27_365
            .saturating_add(Weight::from_ref_time(43_016_617).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(75606).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `584 + p * (9879 ±2)`
        // Minimum execution time: 106_260 nanoseconds.
        Weight::from_parts(101_928_105, 584)
            // Standard Error: 45_317
            .saturating_add(Weight::from_ref_time(39_015_165).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `584 + p * (9879 ±2)`
        // Minimum execution time: 646_814 nanoseconds.
        Weight::from_parts(631_499_155, 584)
            // Standard Error: 225_936
            .saturating_add(Weight::from_ref_time(46_687_405).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `316941`
        // Minimum execution time: 993_641 nanoseconds.
        Weight::from_parts(1_015_179_540, 316941)
            // Standard Error: 162_533
            .saturating_add(Weight::from_ref_time(46_276_218).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_044_345 nanoseconds.
        Weight::from_ref_time(3_436_761_129)
            // Standard Error: 66_391
            .saturating_add(Weight::from_ref_time(7_838_675).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_040_307 nanoseconds.
        Weight::from_ref_time(3_360_084_060)
            // Standard Error: 142_252
            .saturating_add(Weight::from_ref_time(3_389_429).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_621_989 nanoseconds.
        Weight::from_ref_time(9_660_462_792)
            // Standard Error: 137_900
            .saturating_add(Weight::from_ref_time(13_664_189).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_883_070 nanoseconds.
        Weight::from_ref_time(10_509_226_053)
            // Standard Error: 90_780
            .saturating_add(Weight::from_ref_time(5_251_990).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_894 nanoseconds.
        Weight::from_ref_time(2_979_000)
            // Standard Error: 7_404
            .saturating_add(Weight::from_ref_time(3_823_900).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_834 nanoseconds.
        Weight::from_ref_time(1_023_352)
            // Standard Error: 5_705
            .saturating_add(Weight::from_ref_time(3_163_420).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_821 nanoseconds.
        Weight::from_ref_time(3_830_854)
            // Standard Error: 1_175
            .saturating_add(Weight::from_ref_time(1_583_667).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_760 nanoseconds.
        Weight::from_ref_time(2_895_000)
            // Standard Error: 5_743
            .saturating_add(Weight::from_ref_time(3_055_681).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_908 nanoseconds.
        Weight::from_ref_time(746_122)
            // Standard Error: 9_772
            .saturating_add(Weight::from_ref_time(5_306_598).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_303 nanoseconds.
        Weight::from_ref_time(5_833_184)
            // Standard Error: 1_355
            .saturating_add(Weight::from_ref_time(176_085).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_908 nanoseconds.
        Weight::from_ref_time(4_974_447)
            // Standard Error: 6_762
            .saturating_add(Weight::from_ref_time(2_597_563).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(2_597_563 -
            2_495_387).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_936 nanoseconds.
        Weight::from_ref_time(4_118_715)
            // Standard Error: 12_627
            .saturating_add(Weight::from_ref_time(2_495_387).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_295 nanoseconds.
        Weight::from_ref_time(21_891_369)
            // Standard Error: 31_522
            .saturating_add(Weight::from_ref_time(9_819_451).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 13_253 nanoseconds.
        Weight::from_ref_time(5_419_796)
            // Standard Error: 6_111
            .saturating_add(Weight::from_ref_time(1_173_850).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_539 nanoseconds.
        Weight::from_ref_time(5_787_666)
            // Standard Error: 13
            .saturating_add(Weight::from_ref_time(58).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_911 nanoseconds.
        Weight::from_ref_time(2_951_831)
            // Standard Error: 2_310
            .saturating_add(Weight::from_ref_time(244_053).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_880 nanoseconds.
        Weight::from_ref_time(2_987_000)
            // Standard Error: 5_993
            .saturating_add(Weight::from_ref_time(771_000).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_831 nanoseconds.
        Weight::from_ref_time(2_931_000)
            // Standard Error: 5_414
            .saturating_add(Weight::from_ref_time(754_192).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_550 nanoseconds.
        Weight::from_ref_time(8_111_391)
            // Standard Error: 7_487
            .saturating_add(Weight::from_ref_time(832_788).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_442 nanoseconds.
        Weight::from_ref_time(6_133_949)
            // Standard Error: 10_157
            .saturating_add(Weight::from_ref_time(1_534_433).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_633 nanoseconds.
        Weight::from_ref_time(4_760_000)
            // Standard Error: 8_604
            .saturating_add(Weight::from_ref_time(7_422_660).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_930 nanoseconds.
        Weight::from_ref_time(3_006_000)
            // Standard Error: 6_797
            .saturating_add(Weight::from_ref_time(3_331_057).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_839 nanoseconds.
        Weight::from_ref_time(2_937_000)
            // Standard Error: 6_128
            .saturating_add(Weight::from_ref_time(3_081_166).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_835 nanoseconds.
        Weight::from_ref_time(2_945_000)
            // Standard Error: 5_912
            .saturating_add(Weight::from_ref_time(3_074_865).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_881 nanoseconds.
        Weight::from_ref_time(2_943_000)
            // Standard Error: 4_473
            .saturating_add(Weight::from_ref_time(2_613_597).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_803 nanoseconds.
        Weight::from_ref_time(505_189)
            // Standard Error: 6_858
            .saturating_add(Weight::from_ref_time(639_848).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_818 nanoseconds.
        Weight::from_ref_time(2_668_965)
            // Standard Error: 2_724
            .saturating_add(Weight::from_ref_time(386_636).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_908 nanoseconds.
        Weight::from_ref_time(3_006_000)
            // Standard Error: 10_686
            .saturating_add(Weight::from_ref_time(1_823_345).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_875 nanoseconds.
        Weight::from_ref_time(2_978_000)
            // Standard Error: 8_518
            .saturating_add(Weight::from_ref_time(1_158_158).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_826 nanoseconds.
        Weight::from_ref_time(2_900_207)
            // Standard Error: 2_784
            .saturating_add(Weight::from_ref_time(314_606).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_905 nanoseconds.
        Weight::from_ref_time(3_654_245)
            // Standard Error: 1_447
            .saturating_add(Weight::from_ref_time(163_303).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_883 nanoseconds.
        Weight::from_ref_time(3_750_903)
            // Standard Error: 1_763
            .saturating_add(Weight::from_ref_time(157_550).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_853 nanoseconds.
        Weight::from_ref_time(2_942_000)
            // Standard Error: 10_051
            .saturating_add(Weight::from_ref_time(1_798_916).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_850 nanoseconds.
        Weight::from_ref_time(2_973_000)
            // Standard Error: 7_619
            .saturating_add(Weight::from_ref_time(1_129_807).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_815 nanoseconds.
        Weight::from_ref_time(2_925_000)
            // Standard Error: 10_232
            .saturating_add(Weight::from_ref_time(1_805_107).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_845 nanoseconds.
        Weight::from_ref_time(2_924_000)
            // Standard Error: 8_048
            .saturating_add(Weight::from_ref_time(1_156_362).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_880 nanoseconds.
        Weight::from_ref_time(2_963_000)
            // Standard Error: 10_510
            .saturating_add(Weight::from_ref_time(1_825_535).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_875 nanoseconds.
        Weight::from_ref_time(2_954_000)
            // Standard Error: 7_369
            .saturating_add(Weight::from_ref_time(1_134_419).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_810 nanoseconds.
        Weight::from_ref_time(2_950_000)
            // Standard Error: 9_670
            .saturating_add(Weight::from_ref_time(1_832_595).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_841 nanoseconds.
        Weight::from_ref_time(2_956_000)
            // Standard Error: 7_386
            .saturating_add(Weight::from_ref_time(1_140_250).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_860 nanoseconds.
        Weight::from_ref_time(2_977_000)
            // Standard Error: 9_869
            .saturating_add(Weight::from_ref_time(1_804_969).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_868 nanoseconds.
        Weight::from_ref_time(2_998_000)
            // Standard Error: 7_411
            .saturating_add(Weight::from_ref_time(1_131_828).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_913 nanoseconds.
        Weight::from_ref_time(2_975_000)
            // Standard Error: 10_732
            .saturating_add(Weight::from_ref_time(1_803_921).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_892 nanoseconds.
        Weight::from_ref_time(2_950_000)
            // Standard Error: 8_426
            .saturating_add(Weight::from_ref_time(1_150_365).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_826 nanoseconds.
        Weight::from_ref_time(2_969_000)
            // Standard Error: 9_714
            .saturating_add(Weight::from_ref_time(1_793_628).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_880 nanoseconds.
        Weight::from_ref_time(2_959_000)
            // Standard Error: 8_117
            .saturating_add(Weight::from_ref_time(1_133_227).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_821 nanoseconds.
        Weight::from_ref_time(2_900_000)
            // Standard Error: 10_129
            .saturating_add(Weight::from_ref_time(1_800_305).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_816 nanoseconds.
        Weight::from_ref_time(2_918_000)
            // Standard Error: 7_357
            .saturating_add(Weight::from_ref_time(1_125_395).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_881 nanoseconds.
        Weight::from_ref_time(2_953_000)
            // Standard Error: 11_467
            .saturating_add(Weight::from_ref_time(1_822_120).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_825 nanoseconds.
        Weight::from_ref_time(2_941_000)
            // Standard Error: 7_476
            .saturating_add(Weight::from_ref_time(1_129_535).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_791 nanoseconds.
        Weight::from_ref_time(2_942_000)
            // Standard Error: 11_593
            .saturating_add(Weight::from_ref_time(1_823_971).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_883 nanoseconds.
        Weight::from_ref_time(2_952_000)
            // Standard Error: 8_166
            .saturating_add(Weight::from_ref_time(1_143_024).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_936 nanoseconds.
        Weight::from_ref_time(3_002_000)
            // Standard Error: 8_533
            .saturating_add(Weight::from_ref_time(1_251_422).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_844 nanoseconds.
        Weight::from_ref_time(184_806)
            // Standard Error: 7_232
            .saturating_add(Weight::from_ref_time(707_123).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_898 nanoseconds.
        Weight::from_ref_time(2_982_000)
            // Standard Error: 8_519
            .saturating_add(Weight::from_ref_time(1_267_843).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_964 nanoseconds.
        Weight::from_ref_time(388_885)
            // Standard Error: 6_546
            .saturating_add(Weight::from_ref_time(697_252).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_910 nanoseconds.
        Weight::from_ref_time(2_976_000)
            // Standard Error: 11_050
            .saturating_add(Weight::from_ref_time(1_759_101).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_862 nanoseconds.
        Weight::from_ref_time(2_919_000)
            // Standard Error: 8_016
            .saturating_add(Weight::from_ref_time(1_183_191).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_809 nanoseconds.
        Weight::from_ref_time(2_885_232)
            // Standard Error: 12_698
            .saturating_add(Weight::from_ref_time(2_698_399).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_861 nanoseconds.
        Weight::from_ref_time(2_770_101)
            // Standard Error: 11_242
            .saturating_add(Weight::from_ref_time(2_301_114).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_891 nanoseconds.
        Weight::from_ref_time(3_014_724)
            // Standard Error: 13_934
            .saturating_add(Weight::from_ref_time(2_850_292).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_911 nanoseconds.
        Weight::from_ref_time(1_965_084)
            // Standard Error: 14_064
            .saturating_add(Weight::from_ref_time(2_407_249).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_880 nanoseconds.
        Weight::from_ref_time(2_217_069)
            // Standard Error: 26_650
            .saturating_add(Weight::from_ref_time(9_305_092).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_855 nanoseconds.
        Weight::from_ref_time(3_360_895)
            // Standard Error: 44_902
            .saturating_add(Weight::from_ref_time(7_790_978).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_854 nanoseconds.
        Weight::from_ref_time(5_571_792)
            // Standard Error: 13_336
            .saturating_add(Weight::from_ref_time(2_839_642).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_803 nanoseconds.
        Weight::from_ref_time(3_066_789)
            // Standard Error: 12_330
            .saturating_add(Weight::from_ref_time(2_402_502).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_819 nanoseconds.
        Weight::from_ref_time(2_969_000)
            // Standard Error: 8_143
            .saturating_add(Weight::from_ref_time(1_243_659).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_798 nanoseconds.
        Weight::from_ref_time(143_986)
            // Standard Error: 7_795
            .saturating_add(Weight::from_ref_time(713_761).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_841 nanoseconds.
        Weight::from_ref_time(2_969_000)
            // Standard Error: 8_714
            .saturating_add(Weight::from_ref_time(1_259_363).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_919 nanoseconds.
        Weight::from_ref_time(214_749)
            // Standard Error: 7_630
            .saturating_add(Weight::from_ref_time(707_922).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_824 nanoseconds.
        Weight::from_ref_time(2_962_000)
            // Standard Error: 8_410
            .saturating_add(Weight::from_ref_time(1_241_819).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_885 nanoseconds.
        Weight::from_ref_time(585_572)
            // Standard Error: 6_508
            .saturating_add(Weight::from_ref_time(697_636).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_876 nanoseconds.
        Weight::from_ref_time(2_988_000)
            // Standard Error: 7_682
            .saturating_add(Weight::from_ref_time(1_077_050).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_810 nanoseconds.
        Weight::from_ref_time(802_057)
            // Standard Error: 7_017
            .saturating_add(Weight::from_ref_time(627_904).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_828 nanoseconds.
        Weight::from_ref_time(2_946_000)
            // Standard Error: 7_780
            .saturating_add(Weight::from_ref_time(1_067_970).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_803 nanoseconds.
        Weight::from_ref_time(1_078_935)
            // Standard Error: 6_071
            .saturating_add(Weight::from_ref_time(617_984).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_839 nanoseconds.
        Weight::from_ref_time(2_932_000)
            // Standard Error: 8_139
            .saturating_add(Weight::from_ref_time(1_073_275).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_812 nanoseconds.
        Weight::from_ref_time(994_446)
            // Standard Error: 5_880
            .saturating_add(Weight::from_ref_time(622_107).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_916 nanoseconds.
        Weight::from_ref_time(2_992_000)
            // Standard Error: 7_292
            .saturating_add(Weight::from_ref_time(1_063_922).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_882 nanoseconds.
        Weight::from_ref_time(850_373)
            // Standard Error: 6_141
            .saturating_add(Weight::from_ref_time(617_727).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_765 nanoseconds.
        Weight::from_ref_time(2_905_000)
            // Standard Error: 7_813
            .saturating_add(Weight::from_ref_time(1_066_450).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_797 nanoseconds.
        Weight::from_ref_time(852_636)
            // Standard Error: 6_193
            .saturating_add(Weight::from_ref_time(626_292).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_041 nanoseconds.
        Weight::from_ref_time(1_117_000)
            // Standard Error: 554
            .saturating_add(Weight::from_ref_time(203_869).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `145 + c * (1024 ±0)`
        //  Estimated: `2612 + c * (1024 ±0)`
        // Minimum execution time: 3_347 nanoseconds.
        Weight::from_parts(3_473_000, 2612)
            // Standard Error: 1_095
            .saturating_add(Weight::from_ref_time(730_012).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 54_053 nanoseconds.
        Weight::from_ref_time(97_324_568)
            // Standard Error: 7_269
            .saturating_add(Weight::from_ref_time(2_150_727).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `918`
        //  Estimated: `17301`
        // Minimum execution time: 56_300 nanoseconds.
        Weight::from_parts(58_379_000, 17301)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3290`
        // Minimum execution time: 68_305 nanoseconds.
        Weight::from_parts(37_775_805, 3290)
            // Standard Error: 47_717
            .saturating_add(Weight::from_ref_time(53_230_170).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `675`
        //  Estimated: `18282`
        // Minimum execution time: 53_290 nanoseconds.
        Weight::from_parts(42_169_404, 18282)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(2_363).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `126`
        //  Estimated: `14142`
        // Minimum execution time: 9_484_499 nanoseconds.
        Weight::from_parts(9_683_745_000, 14142)
            // Standard Error: 519_131
            .saturating_add(Weight::from_ref_time(29_475_361).saturating_mul(c.into()))
            // Standard Error: 30
            .saturating_add(Weight::from_ref_time(850).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `375`
        //  Estimated: `14765`
        // Minimum execution time: 55_104 nanoseconds.
        Weight::from_parts(25_908_173, 14765)
            // Standard Error: 5
            .saturating_add(Weight::from_ref_time(1_203).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1113`
        //  Estimated: `31447`
        // Minimum execution time: 78_198 nanoseconds.
        Weight::from_parts(65_278_888, 31447)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(1_191).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `982`
        //  Estimated: `48842`
        // Minimum execution time: 319_890 nanoseconds.
        Weight::from_parts(332_695_040, 48842)
            // Standard Error: 1_247
            .saturating_add(Weight::from_ref_time(2_175).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(26_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `982`
        //  Estimated: `48842`
        // Minimum execution time: 338_076 nanoseconds.
        Weight::from_parts(349_061_276, 48842)
            // Standard Error: 1_053
            .saturating_add(Weight::from_ref_time(1_482).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(26_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `243 + c * (1075 ±0)`
        //  Estimated: `2997 + c * (2150 ±0)`
        // Minimum execution time: 51_974 nanoseconds.
        Weight::from_parts(52_258_000, 2997)
            // Standard Error: 33_953
            .saturating_add(Weight::from_ref_time(52_771_164).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_proof_size(2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_008 nanoseconds.
        Weight::from_ref_time(99_834_599)
            // Standard Error: 204_234
            .saturating_add(Weight::from_ref_time(145_476_620).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 230_953 nanoseconds.
        Weight::from_ref_time(249_301_083)
            // Standard Error: 319_276
            .saturating_add(Weight::from_ref_time(139_826_997).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_790 nanoseconds.
        Weight::from_ref_time(94_200_000)
            // Standard Error: 1_184_766
            .saturating_add(Weight::from_ref_time(376_662_867).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 168_776 nanoseconds.
        Weight::from_ref_time(193_302_533)
            // Standard Error: 137_192
            .saturating_add(Weight::from_ref_time(305_366_358).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_922 nanoseconds.
        Weight::from_ref_time(128_038_347)
            // Standard Error: 232_367
            .saturating_add(Weight::from_ref_time(202_195_006).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_940 nanoseconds.
        Weight::from_ref_time(109_433_007)
            // Standard Error: 140_126
            .saturating_add(Weight::from_ref_time(201_823_250).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_334 nanoseconds.
        Weight::from_ref_time(110_995_576)
            // Standard Error: 170_152
            .saturating_add(Weight::from_ref_time(203_592_179).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_493 nanoseconds.
        Weight::from_ref_time(103_262_021)
            // Standard Error: 85_841
            .saturating_add(Weight::from_ref_time(203_578_448).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_323 nanoseconds.
        Weight::from_ref_time(107_399_655)
            // Standard Error: 159_517
            .saturating_add(Weight::from_ref_time(201_045_742).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_755 nanoseconds.
        Weight::from_ref_time(108_596_604)
            // Standard Error: 152_422
            .saturating_add(Weight::from_ref_time(200_951_868).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_931 nanoseconds.
        Weight::from_ref_time(113_020_476)
            // Standard Error: 185_759
            .saturating_add(Weight::from_ref_time(200_059_039).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_091 nanoseconds.
        Weight::from_ref_time(102_943_958)
            // Standard Error: 122_720
            .saturating_add(Weight::from_ref_time(202_439_755).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_588 nanoseconds.
        Weight::from_ref_time(108_485_672)
            // Standard Error: 158_167
            .saturating_add(Weight::from_ref_time(201_225_245).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 610_200 nanoseconds.
        Weight::from_ref_time(640_541_991)
            // Standard Error: 204_920
            .saturating_add(Weight::from_ref_time(276_092_530).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 881_951 nanoseconds.
        Weight::from_ref_time(898_008_000)
            // Standard Error: 60_798
            .saturating_add(Weight::from_ref_time(12_749_406).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_202 nanoseconds.
        Weight::from_ref_time(110_594_805)
            // Standard Error: 170_149
            .saturating_add(Weight::from_ref_time(200_722_534).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_709 nanoseconds.
        Weight::from_ref_time(114_872_867)
            // Standard Error: 183_601
            .saturating_add(Weight::from_ref_time(201_188_015).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_984 nanoseconds.
        Weight::from_ref_time(113_613_377)
            // Standard Error: 156_075
            .saturating_add(Weight::from_ref_time(265_360_356).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_786 nanoseconds.
        Weight::from_ref_time(103_968_128)
            // Standard Error: 145_960
            .saturating_add(Weight::from_ref_time(209_473_875).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_136_454 nanoseconds.
        Weight::from_ref_time(4_288_652_393)
            // Standard Error: 304_341
            .saturating_add(Weight::from_ref_time(296_087_001).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 596_181 nanoseconds.
        Weight::from_ref_time(601_053_000)
            // Standard Error: 77_278
            .saturating_add(Weight::from_ref_time(33_906_609).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_568 nanoseconds.
        Weight::from_ref_time(123_876_272)
            // Standard Error: 231_201
            .saturating_add(Weight::from_ref_time(396_568_908).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 490_921 nanoseconds.
        Weight::from_ref_time(496_144_000)
            // Standard Error: 73_077
            .saturating_add(Weight::from_ref_time(24_032_804).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 258_422 nanoseconds.
        Weight::from_ref_time(298_292_439)
            // Standard Error: 237_657
            .saturating_add(Weight::from_ref_time(405_991_134).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 525_689 nanoseconds.
        Weight::from_ref_time(528_633_000)
            // Standard Error: 71_415
            .saturating_add(Weight::from_ref_time(24_079_207).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_386 nanoseconds.
        Weight::from_ref_time(95_401_663)
            // Standard Error: 235_388
            .saturating_add(Weight::from_ref_time(19_662_386).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 111_166 nanoseconds.
        Weight::from_ref_time(98_780_422)
            // Standard Error: 713
            .saturating_add(Weight::from_ref_time(462_988).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_896 nanoseconds.
        Weight::from_ref_time(126_254_605)
            // Standard Error: 157_288
            .saturating_add(Weight::from_ref_time(282_662_043).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_258 nanoseconds.
        Weight::from_ref_time(81_845_402)
            // Standard Error: 834
            .saturating_add(Weight::from_ref_time(583_260).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_676 nanoseconds.
        Weight::from_ref_time(103_623_610)
            // Standard Error: 249_367
            .saturating_add(Weight::from_ref_time(11_279_339).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 112_175 nanoseconds.
        Weight::from_ref_time(99_763_118)
            // Standard Error: 762
            .saturating_add(Weight::from_ref_time(462_968).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_001 nanoseconds.
        Weight::from_ref_time(111_072_549)
            // Standard Error: 181_764
            .saturating_add(Weight::from_ref_time(201_927_617).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_015 nanoseconds.
        Weight::from_ref_time(109_255_145)
            // Standard Error: 157_958
            .saturating_add(Weight::from_ref_time(202_820_750).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 597_587 nanoseconds.
        Weight::from_ref_time(644_262_440)
            // Standard Error: 283_702
            .saturating_add(Weight::from_ref_time(211_969_896).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 593_476 nanoseconds.
        Weight::from_ref_time(642_997_781)
            // Standard Error: 1_536
            .saturating_add(Weight::from_ref_time(105_699).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_645_502 nanoseconds.
        Weight::from_ref_time(4_830_796_925)
            // Standard Error: 415_136
            .saturating_add(Weight::from_ref_time(226_750_736).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_022_783 nanoseconds.
        Weight::from_ref_time(922_806_976)
            // Standard Error: 12_082
            .saturating_add(Weight::from_ref_time(12_197_398).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_718 nanoseconds.
        Weight::from_ref_time(117_227_598)
            // Standard Error: 170_974
            .saturating_add(Weight::from_ref_time(214_803_107).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 298_112 nanoseconds.
        Weight::from_ref_time(302_222_000)
            // Standard Error: 65_266
            .saturating_add(Weight::from_ref_time(30_040_028).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_852 nanoseconds.
        Weight::from_ref_time(125_733_771)
            // Standard Error: 195_791
            .saturating_add(Weight::from_ref_time(266_177_986).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_495 nanoseconds.
        Weight::from_ref_time(104_619_237)
            // Standard Error: 129_688
            .saturating_add(Weight::from_ref_time(201_829_466).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_860 nanoseconds.
        Weight::from_ref_time(94_367_647)
            // Standard Error: 247_027
            .saturating_add(Weight::from_ref_time(31_632_752).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_637 nanoseconds.
        Weight::from_ref_time(93_713_871)
            // Standard Error: 244_331
            .saturating_add(Weight::from_ref_time(21_993_828).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_934 nanoseconds.
        Weight::from_ref_time(93_620_484)
            // Standard Error: 243_985
            .saturating_add(Weight::from_ref_time(22_281_715).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_205 nanoseconds.
        Weight::from_ref_time(94_272_221)
            // Standard Error: 243_338
            .saturating_add(Weight::from_ref_time(23_169_728).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_207 nanoseconds.
        Weight::from_ref_time(94_381_447)
            // Standard Error: 250_168
            .saturating_add(Weight::from_ref_time(22_505_802).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 167_056 nanoseconds.
        Weight::from_ref_time(187_286_683)
            // Standard Error: 110_124
            .saturating_add(Weight::from_ref_time(296_545_440).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_193 nanoseconds.
        Weight::from_ref_time(128_726_082)
            // Standard Error: 257_078
            .saturating_add(Weight::from_ref_time(471_700_013).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_585_661 nanoseconds.
        Weight::from_ref_time(51_798_112_000)
            // Standard Error: 348_287
            .saturating_add(Weight::from_ref_time(8_778_326).saturating_mul(p.into()))
            // Standard Error: 348_267
            .saturating_add(Weight::from_ref_time(154_492_962).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 89_006 nanoseconds.
        Weight::from_parts(120_744_543, 141)
            // Standard Error: 4_762
            .saturating_add(Weight::from_ref_time(11_230_855).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 88_677 nanoseconds.
        Weight::from_parts(90_732_000, 141)
            // Standard Error: 38_096
            .saturating_add(Weight::from_ref_time(37_693_910).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5068941`
        // Minimum execution time: 5_822_993 nanoseconds.
        Weight::from_parts(5_693_788_013, 5068941)
            // Standard Error: 47_224
            .saturating_add(Weight::from_ref_time(39_196_844).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65704 ±0)`
        //  Estimated: `1012 + p * (75606 ±0)`
        // Minimum execution time: 88_891 nanoseconds.
        Weight::from_parts(43_022_256, 1012)
            // Standard Error: 27_365
            .saturating_add(Weight::from_ref_time(43_016_617).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(75606).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `584 + p * (9879 ±2)`
        // Minimum execution time: 106_260 nanoseconds.
        Weight::from_parts(101_928_105, 584)
            // Standard Error: 45_317
            .saturating_add(Weight::from_ref_time(39_015_165).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `584 + p * (9879 ±2)`
        // Minimum execution time: 646_814 nanoseconds.
        Weight::from_parts(631_499_155, 584)
            // Standard Error: 225_936
            .saturating_add(Weight::from_ref_time(46_687_405).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `316941`
        // Minimum execution time: 993_641 nanoseconds.
        Weight::from_parts(1_015_179_540, 316941)
            // Standard Error: 162_533
            .saturating_add(Weight::from_ref_time(46_276_218).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_044_345 nanoseconds.
        Weight::from_ref_time(3_436_761_129)
            // Standard Error: 66_391
            .saturating_add(Weight::from_ref_time(7_838_675).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_040_307 nanoseconds.
        Weight::from_ref_time(3_360_084_060)
            // Standard Error: 142_252
            .saturating_add(Weight::from_ref_time(3_389_429).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_621_989 nanoseconds.
        Weight::from_ref_time(9_660_462_792)
            // Standard Error: 137_900
            .saturating_add(Weight::from_ref_time(13_664_189).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_883_070 nanoseconds.
        Weight::from_ref_time(10_509_226_053)
            // Standard Error: 90_780
            .saturating_add(Weight::from_ref_time(5_251_990).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_894 nanoseconds.
        Weight::from_ref_time(2_979_000)
            // Standard Error: 7_404
            .saturating_add(Weight::from_ref_time(3_823_900).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_834 nanoseconds.
        Weight::from_ref_time(1_023_352)
            // Standard Error: 5_705
            .saturating_add(Weight::from_ref_time(3_163_420).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_821 nanoseconds.
        Weight::from_ref_time(3_830_854)
            // Standard Error: 1_175
            .saturating_add(Weight::from_ref_time(1_583_667).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_760 nanoseconds.
        Weight::from_ref_time(2_895_000)
            // Standard Error: 5_743
            .saturating_add(Weight::from_ref_time(3_055_681).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_908 nanoseconds.
        Weight::from_ref_time(746_122)
            // Standard Error: 9_772
            .saturating_add(Weight::from_ref_time(5_306_598).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_303 nanoseconds.
        Weight::from_ref_time(5_833_184)
            // Standard Error: 1_355
            .saturating_add(Weight::from_ref_time(176_085).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_908 nanoseconds.
        Weight::from_ref_time(4_974_447)
            // Standard Error: 6_762
            .saturating_add(Weight::from_ref_time(2_597_563).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(2_597_563 -
            2_495_387).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_936 nanoseconds.
        Weight::from_ref_time(4_118_715)
            // Standard Error: 12_627
            .saturating_add(Weight::from_ref_time(2_495_387).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_295 nanoseconds.
        Weight::from_ref_time(21_891_369)
            // Standard Error: 31_522
            .saturating_add(Weight::from_ref_time(9_819_451).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 13_253 nanoseconds.
        Weight::from_ref_time(5_419_796)
            // Standard Error: 6_111
            .saturating_add(Weight::from_ref_time(1_173_850).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_539 nanoseconds.
        Weight::from_ref_time(5_787_666)
            // Standard Error: 13
            .saturating_add(Weight::from_ref_time(58).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_911 nanoseconds.
        Weight::from_ref_time(2_951_831)
            // Standard Error: 2_310
            .saturating_add(Weight::from_ref_time(244_053).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_880 nanoseconds.
        Weight::from_ref_time(2_987_000)
            // Standard Error: 5_993
            .saturating_add(Weight::from_ref_time(771_000).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_831 nanoseconds.
        Weight::from_ref_time(2_931_000)
            // Standard Error: 5_414
            .saturating_add(Weight::from_ref_time(754_192).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_550 nanoseconds.
        Weight::from_ref_time(8_111_391)
            // Standard Error: 7_487
            .saturating_add(Weight::from_ref_time(832_788).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_442 nanoseconds.
        Weight::from_ref_time(6_133_949)
            // Standard Error: 10_157
            .saturating_add(Weight::from_ref_time(1_534_433).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_633 nanoseconds.
        Weight::from_ref_time(4_760_000)
            // Standard Error: 8_604
            .saturating_add(Weight::from_ref_time(7_422_660).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_930 nanoseconds.
        Weight::from_ref_time(3_006_000)
            // Standard Error: 6_797
            .saturating_add(Weight::from_ref_time(3_331_057).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_839 nanoseconds.
        Weight::from_ref_time(2_937_000)
            // Standard Error: 6_128
            .saturating_add(Weight::from_ref_time(3_081_166).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_835 nanoseconds.
        Weight::from_ref_time(2_945_000)
            // Standard Error: 5_912
            .saturating_add(Weight::from_ref_time(3_074_865).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_881 nanoseconds.
        Weight::from_ref_time(2_943_000)
            // Standard Error: 4_473
            .saturating_add(Weight::from_ref_time(2_613_597).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_803 nanoseconds.
        Weight::from_ref_time(505_189)
            // Standard Error: 6_858
            .saturating_add(Weight::from_ref_time(639_848).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_818 nanoseconds.
        Weight::from_ref_time(2_668_965)
            // Standard Error: 2_724
            .saturating_add(Weight::from_ref_time(386_636).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_908 nanoseconds.
        Weight::from_ref_time(3_006_000)
            // Standard Error: 10_686
            .saturating_add(Weight::from_ref_time(1_823_345).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_875 nanoseconds.
        Weight::from_ref_time(2_978_000)
            // Standard Error: 8_518
            .saturating_add(Weight::from_ref_time(1_158_158).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_826 nanoseconds.
        Weight::from_ref_time(2_900_207)
            // Standard Error: 2_784
            .saturating_add(Weight::from_ref_time(314_606).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_905 nanoseconds.
        Weight::from_ref_time(3_654_245)
            // Standard Error: 1_447
            .saturating_add(Weight::from_ref_time(163_303).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_883 nanoseconds.
        Weight::from_ref_time(3_750_903)
            // Standard Error: 1_763
            .saturating_add(Weight::from_ref_time(157_550).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_853 nanoseconds.
        Weight::from_ref_time(2_942_000)
            // Standard Error: 10_051
            .saturating_add(Weight::from_ref_time(1_798_916).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_850 nanoseconds.
        Weight::from_ref_time(2_973_000)
            // Standard Error: 7_619
            .saturating_add(Weight::from_ref_time(1_129_807).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_815 nanoseconds.
        Weight::from_ref_time(2_925_000)
            // Standard Error: 10_232
            .saturating_add(Weight::from_ref_time(1_805_107).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_845 nanoseconds.
        Weight::from_ref_time(2_924_000)
            // Standard Error: 8_048
            .saturating_add(Weight::from_ref_time(1_156_362).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_880 nanoseconds.
        Weight::from_ref_time(2_963_000)
            // Standard Error: 10_510
            .saturating_add(Weight::from_ref_time(1_825_535).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_875 nanoseconds.
        Weight::from_ref_time(2_954_000)
            // Standard Error: 7_369
            .saturating_add(Weight::from_ref_time(1_134_419).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_810 nanoseconds.
        Weight::from_ref_time(2_950_000)
            // Standard Error: 9_670
            .saturating_add(Weight::from_ref_time(1_832_595).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_841 nanoseconds.
        Weight::from_ref_time(2_956_000)
            // Standard Error: 7_386
            .saturating_add(Weight::from_ref_time(1_140_250).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_860 nanoseconds.
        Weight::from_ref_time(2_977_000)
            // Standard Error: 9_869
            .saturating_add(Weight::from_ref_time(1_804_969).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_868 nanoseconds.
        Weight::from_ref_time(2_998_000)
            // Standard Error: 7_411
            .saturating_add(Weight::from_ref_time(1_131_828).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_913 nanoseconds.
        Weight::from_ref_time(2_975_000)
            // Standard Error: 10_732
            .saturating_add(Weight::from_ref_time(1_803_921).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_892 nanoseconds.
        Weight::from_ref_time(2_950_000)
            // Standard Error: 8_426
            .saturating_add(Weight::from_ref_time(1_150_365).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_826 nanoseconds.
        Weight::from_ref_time(2_969_000)
            // Standard Error: 9_714
            .saturating_add(Weight::from_ref_time(1_793_628).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_880 nanoseconds.
        Weight::from_ref_time(2_959_000)
            // Standard Error: 8_117
            .saturating_add(Weight::from_ref_time(1_133_227).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_821 nanoseconds.
        Weight::from_ref_time(2_900_000)
            // Standard Error: 10_129
            .saturating_add(Weight::from_ref_time(1_800_305).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_816 nanoseconds.
        Weight::from_ref_time(2_918_000)
            // Standard Error: 7_357
            .saturating_add(Weight::from_ref_time(1_125_395).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_881 nanoseconds.
        Weight::from_ref_time(2_953_000)
            // Standard Error: 11_467
            .saturating_add(Weight::from_ref_time(1_822_120).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_825 nanoseconds.
        Weight::from_ref_time(2_941_000)
            // Standard Error: 7_476
            .saturating_add(Weight::from_ref_time(1_129_535).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_791 nanoseconds.
        Weight::from_ref_time(2_942_000)
            // Standard Error: 11_593
            .saturating_add(Weight::from_ref_time(1_823_971).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_883 nanoseconds.
        Weight::from_ref_time(2_952_000)
            // Standard Error: 8_166
            .saturating_add(Weight::from_ref_time(1_143_024).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_936 nanoseconds.
        Weight::from_ref_time(3_002_000)
            // Standard Error: 8_533
            .saturating_add(Weight::from_ref_time(1_251_422).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_844 nanoseconds.
        Weight::from_ref_time(184_806)
            // Standard Error: 7_232
            .saturating_add(Weight::from_ref_time(707_123).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_898 nanoseconds.
        Weight::from_ref_time(2_982_000)
            // Standard Error: 8_519
            .saturating_add(Weight::from_ref_time(1_267_843).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_964 nanoseconds.
        Weight::from_ref_time(388_885)
            // Standard Error: 6_546
            .saturating_add(Weight::from_ref_time(697_252).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_910 nanoseconds.
        Weight::from_ref_time(2_976_000)
            // Standard Error: 11_050
            .saturating_add(Weight::from_ref_time(1_759_101).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_862 nanoseconds.
        Weight::from_ref_time(2_919_000)
            // Standard Error: 8_016
            .saturating_add(Weight::from_ref_time(1_183_191).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_809 nanoseconds.
        Weight::from_ref_time(2_885_232)
            // Standard Error: 12_698
            .saturating_add(Weight::from_ref_time(2_698_399).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_861 nanoseconds.
        Weight::from_ref_time(2_770_101)
            // Standard Error: 11_242
            .saturating_add(Weight::from_ref_time(2_301_114).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_891 nanoseconds.
        Weight::from_ref_time(3_014_724)
            // Standard Error: 13_934
            .saturating_add(Weight::from_ref_time(2_850_292).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_911 nanoseconds.
        Weight::from_ref_time(1_965_084)
            // Standard Error: 14_064
            .saturating_add(Weight::from_ref_time(2_407_249).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_880 nanoseconds.
        Weight::from_ref_time(2_217_069)
            // Standard Error: 26_650
            .saturating_add(Weight::from_ref_time(9_305_092).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_855 nanoseconds.
        Weight::from_ref_time(3_360_895)
            // Standard Error: 44_902
            .saturating_add(Weight::from_ref_time(7_790_978).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_854 nanoseconds.
        Weight::from_ref_time(5_571_792)
            // Standard Error: 13_336
            .saturating_add(Weight::from_ref_time(2_839_642).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_803 nanoseconds.
        Weight::from_ref_time(3_066_789)
            // Standard Error: 12_330
            .saturating_add(Weight::from_ref_time(2_402_502).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_819 nanoseconds.
        Weight::from_ref_time(2_969_000)
            // Standard Error: 8_143
            .saturating_add(Weight::from_ref_time(1_243_659).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_798 nanoseconds.
        Weight::from_ref_time(143_986)
            // Standard Error: 7_795
            .saturating_add(Weight::from_ref_time(713_761).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_841 nanoseconds.
        Weight::from_ref_time(2_969_000)
            // Standard Error: 8_714
            .saturating_add(Weight::from_ref_time(1_259_363).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_919 nanoseconds.
        Weight::from_ref_time(214_749)
            // Standard Error: 7_630
            .saturating_add(Weight::from_ref_time(707_922).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_824 nanoseconds.
        Weight::from_ref_time(2_962_000)
            // Standard Error: 8_410
            .saturating_add(Weight::from_ref_time(1_241_819).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_885 nanoseconds.
        Weight::from_ref_time(585_572)
            // Standard Error: 6_508
            .saturating_add(Weight::from_ref_time(697_636).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_876 nanoseconds.
        Weight::from_ref_time(2_988_000)
            // Standard Error: 7_682
            .saturating_add(Weight::from_ref_time(1_077_050).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_810 nanoseconds.
        Weight::from_ref_time(802_057)
            // Standard Error: 7_017
            .saturating_add(Weight::from_ref_time(627_904).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_828 nanoseconds.
        Weight::from_ref_time(2_946_000)
            // Standard Error: 7_780
            .saturating_add(Weight::from_ref_time(1_067_970).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_803 nanoseconds.
        Weight::from_ref_time(1_078_935)
            // Standard Error: 6_071
            .saturating_add(Weight::from_ref_time(617_984).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_839 nanoseconds.
        Weight::from_ref_time(2_932_000)
            // Standard Error: 8_139
            .saturating_add(Weight::from_ref_time(1_073_275).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_812 nanoseconds.
        Weight::from_ref_time(994_446)
            // Standard Error: 5_880
            .saturating_add(Weight::from_ref_time(622_107).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_916 nanoseconds.
        Weight::from_ref_time(2_992_000)
            // Standard Error: 7_292
            .saturating_add(Weight::from_ref_time(1_063_922).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_882 nanoseconds.
        Weight::from_ref_time(850_373)
            // Standard Error: 6_141
            .saturating_add(Weight::from_ref_time(617_727).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_765 nanoseconds.
        Weight::from_ref_time(2_905_000)
            // Standard Error: 7_813
            .saturating_add(Weight::from_ref_time(1_066_450).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_797 nanoseconds.
        Weight::from_ref_time(852_636)
            // Standard Error: 6_193
            .saturating_add(Weight::from_ref_time(626_292).saturating_mul(r.into()))
    }
}
