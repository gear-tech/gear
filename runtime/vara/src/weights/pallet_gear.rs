// This file is part of Gear.

// Copyright (C) 2022-2024 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-19, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=alloc,alloc_per_page,claim_value,create_program,db_read_per_kb,db_write_per_kb,free,free_range,free_range_per_page,gr_block_height,gr_block_timestamp,gr_create_program,gr_create_program_per_kb,gr_create_program_wgas,gr_create_program_wgas_per_kb,gr_debug,gr_debug_per_kb,gr_env_vars,gr_gas_available,gr_message_id,gr_program_id,gr_random,gr_read,gr_read_per_kb,gr_reply_code,gr_reply_deposit,gr_reply_per_kb,gr_reply_push,gr_reply_push_input,gr_reply_push_input_per_kb,gr_reply_push_per_kb,gr_reply_to,gr_reply_wgas_per_kb,gr_reservation_reply_commit_per_kb,gr_reservation_reply_per_kb,gr_reservation_send,gr_reservation_send_commit,gr_reservation_send_per_kb,gr_reserve_gas,gr_send,gr_send_commit,gr_send_commit_wgas,gr_send_init,gr_send_input,gr_send_input_wgas,gr_send_per_kb,gr_send_push,gr_send_push_input,gr_send_push_input_per_kb,gr_send_push_per_kb,gr_send_wgas,gr_send_wgas_per_kb,gr_signal_code,gr_signal_from,gr_size,gr_source,gr_system_reserve_gas,gr_unreserve_gas,gr_value,gr_value_available,gr_wake,instantiate_module_per_kb,instr_br,instr_br_if,instr_br_table,instr_br_table_per_entry,instr_call,instr_call_const,instr_call_indirect,instr_call_indirect_per_param,instr_call_per_local,instr_global_get,instr_global_set,instr_i32add,instr_i32and,instr_i32clz,instr_i32ctz,instr_i32divs,instr_i32divu,instr_i32eq,instr_i32eqz,instr_i32extend16s,instr_i32extend8s,instr_i32ges,instr_i32geu,instr_i32gts,instr_i32gtu,instr_i32les,instr_i32leu,instr_i32load,instr_i32lts,instr_i32ltu,instr_i32mul,instr_i32ne,instr_i32or,instr_i32popcnt,instr_i32rems,instr_i32remu,instr_i32rotl,instr_i32rotr,instr_i32shl,instr_i32shrs,instr_i32shru,instr_i32store,instr_i32sub,instr_i32wrapi64,instr_i32xor,instr_i64add,instr_i64and,instr_i64clz,instr_i64ctz,instr_i64divs,instr_i64divu,instr_i64eq,instr_i64eqz,instr_i64extend16s,instr_i64extend32s,instr_i64extend8s,instr_i64extendsi32,instr_i64extendui32,instr_i64ges,instr_i64geu,instr_i64gts,instr_i64gtu,instr_i64les,instr_i64leu,instr_i64load,instr_i64lts,instr_i64ltu,instr_i64mul,instr_i64ne,instr_i64or,instr_i64popcnt,instr_i64rems,instr_i64remu,instr_i64rotl,instr_i64rotr,instr_i64shl,instr_i64shrs,instr_i64shru,instr_i64store,instr_i64sub,instr_i64xor,instr_if,instr_local_get,instr_local_set,instr_local_tee,instr_memory_current,instr_select,lazy_pages_host_func_read,lazy_pages_host_func_write,lazy_pages_host_func_write_after_read,lazy_pages_load_page_storage_data,lazy_pages_signal_read,lazy_pages_signal_write,lazy_pages_signal_write_after_read,mem_grow,reinstrument_per_kb,send_message,send_reply,tasks_remove_from_mailbox,tasks_remove_from_waitlist,tasks_remove_gas_reservation,tasks_send_dispatch,tasks_send_user_message,tasks_send_user_message_to_mailbox,tasks_wake_message,tasks_wake_message_no_wake,upload_code,upload_program --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn free_range(r: u32, ) -> Weight;
    fn free_range_per_page(p: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_env_vars(r: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn tasks_remove_gas_reservation() -> Weight;
    fn tasks_send_user_message_to_mailbox() -> Weight;
    fn tasks_send_user_message() -> Weight;
    fn tasks_send_dispatch() -> Weight;
    fn tasks_wake_message() -> Weight;
    fn tasks_wake_message_no_wake() -> Weight;
    fn tasks_remove_from_waitlist() -> Weight;
    fn tasks_remove_from_mailbox() -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_615_000 picoseconds.
        Weight::from_parts(106_812_220, 0)
            // Standard Error: 92_523
            .saturating_add(Weight::from_parts(18_397_180, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_729_000 picoseconds.
        Weight::from_parts(107_297_118, 0)
            // Standard Error: 88_836
            .saturating_add(Weight::from_parts(17_551_258, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_529_000 picoseconds.
        Weight::from_parts(106_645_064, 0)
            // Standard Error: 89_788
            .saturating_add(Weight::from_parts(15_979_646, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_094_000 picoseconds.
        Weight::from_parts(106_665_070, 0)
            // Standard Error: 90_770
            .saturating_add(Weight::from_parts(21_362_724, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 738_459_000 picoseconds.
        Weight::from_parts(804_541_374, 0)
            // Standard Error: 1_019_965
            .saturating_add(Weight::from_parts(33_576_008, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(_r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 730_419_000 picoseconds.
        Weight::from_parts(796_363_376, 0)
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_278_000 picoseconds.
        Weight::from_parts(116_338_184, 0)
            // Standard Error: 89_392
            .saturating_add(Weight::from_parts(9_297_412, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_428_000 picoseconds.
        Weight::from_parts(116_831_682, 0)
            // Standard Error: 91_332
            .saturating_add(Weight::from_parts(7_187_780, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_072_000 picoseconds.
        Weight::from_parts(106_447_868, 0)
            // Standard Error: 2_305_676
            .saturating_add(Weight::from_parts(197_413_680, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_225_000 picoseconds.
        Weight::from_parts(105_966_054, 0)
            // Standard Error: 2_267_605
            .saturating_add(Weight::from_parts(191_227_910, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_774_000 picoseconds.
        Weight::from_parts(106_255_096, 0)
            // Standard Error: 1_481_753
            .saturating_add(Weight::from_parts(127_692_646, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_776_000 picoseconds.
        Weight::from_parts(108_328_338, 0)
            // Standard Error: 2_299_081
            .saturating_add(Weight::from_parts(191_877_852, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_838_000 picoseconds.
        Weight::from_parts(105_649_884, 0)
            // Standard Error: 2_260_663
            .saturating_add(Weight::from_parts(188_425_504, 0).saturating_mul(r.into()))
    }
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_018_000 picoseconds.
        Weight::from_parts(1_080_000, 0)
            // Standard Error: 744
            .saturating_add(Weight::from_parts(247_005, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_196_000 picoseconds.
        Weight::from_parts(3_359_000, 3610)
            // Standard Error: 825
            .saturating_add(Weight::from_parts(586_779, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_325_000 picoseconds.
        Weight::from_parts(37_230_777, 0)
            // Standard Error: 18_552
            .saturating_add(Weight::from_parts(3_028_304, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1354`
        //  Estimated: `8799`
        // Minimum execution time: 144_057_000 picoseconds.
        Weight::from_parts(148_048_000, 8799)
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `3578`
        // Minimum execution time: 79_739_000 picoseconds.
        Weight::from_parts(3_100_467, 3578)
            // Standard Error: 46_755
            .saturating_add(Weight::from_parts(63_169_065, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1005`
        //  Estimated: `4470`
        // Minimum execution time: 117_521_000 picoseconds.
        Weight::from_parts(150_951_481, 4470)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(2_276, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `379`
        //  Estimated: `3844`
        // Minimum execution time: 9_638_577_000 picoseconds.
        Weight::from_parts(200_292_255, 3844)
            // Standard Error: 111_034
            .saturating_add(Weight::from_parts(64_169_732, 0).saturating_mul(c.into()))
            // Standard Error: 6
            .saturating_add(Weight::from_parts(2_258, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `513`
        //  Estimated: `6196`
        // Minimum execution time: 106_739_000 picoseconds.
        Weight::from_parts(67_546_140, 6196)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(889, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1353`
        //  Estimated: `8799`
        // Minimum execution time: 174_614_000 picoseconds.
        Weight::from_parts(134_154_579, 8799)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(928, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3682 + c * (1075 ±0)`
        // Minimum execution time: 60_902_000 picoseconds.
        Weight::from_parts(61_601_000, 3682)
            // Standard Error: 32_455
            .saturating_add(Weight::from_parts(61_902_579, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1075).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_784_000 picoseconds.
        Weight::from_parts(100_926_000, 0)
            // Standard Error: 3_508_536
            .saturating_add(Weight::from_parts(705_625_339, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 501_758_000 picoseconds.
        Weight::from_parts(439_015_938, 0)
            // Standard Error: 9_849
            .saturating_add(Weight::from_parts(28_455_389, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 224_021_000 picoseconds.
        Weight::from_parts(246_353_017, 0)
            // Standard Error: 220_063
            .saturating_add(Weight::from_parts(60_631_614, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 221_507_000 picoseconds.
        Weight::from_parts(250_958_490, 0)
            // Standard Error: 203_339
            .saturating_add(Weight::from_parts(72_077_808, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 20]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 297_857_000 picoseconds.
        Weight::from_parts(298_448_842, 0)
            // Standard Error: 57_252
            .saturating_add(Weight::from_parts(4_929_659, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_437_000 picoseconds.
        Weight::from_parts(115_919_336, 0)
            // Standard Error: 3_817
            .saturating_add(Weight::from_parts(2_352_421, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 179_945_000 picoseconds.
        Weight::from_parts(213_057_061, 0)
            // Standard Error: 13_451
            .saturating_add(Weight::from_parts(2_183_611, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_117_000 picoseconds.
        Weight::from_parts(112_156_015, 0)
            // Standard Error: 364_334
            .saturating_add(Weight::from_parts(94_930_814, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_305_000 picoseconds.
        Weight::from_parts(83_836_459, 0)
            // Standard Error: 329_660
            .saturating_add(Weight::from_parts(90_386_577, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_361_000 picoseconds.
        Weight::from_parts(92_869_517, 0)
            // Standard Error: 302_167
            .saturating_add(Weight::from_parts(84_723_570, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_364_000 picoseconds.
        Weight::from_parts(96_052_612, 0)
            // Standard Error: 308_892
            .saturating_add(Weight::from_parts(83_759_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_744_000 picoseconds.
        Weight::from_parts(82_278_562, 0)
            // Standard Error: 400_860
            .saturating_add(Weight::from_parts(87_658_902, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_182_000 picoseconds.
        Weight::from_parts(88_938_154, 0)
            // Standard Error: 334_249
            .saturating_add(Weight::from_parts(86_492_653, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_825_000 picoseconds.
        Weight::from_parts(95_437_855, 0)
            // Standard Error: 313_407
            .saturating_add(Weight::from_parts(84_344_989, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_437_000 picoseconds.
        Weight::from_parts(81_232_682, 0)
            // Standard Error: 379_163
            .saturating_add(Weight::from_parts(87_626_840, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 734_390_000 picoseconds.
        Weight::from_parts(872_923_412, 0)
            // Standard Error: 508_456
            .saturating_add(Weight::from_parts(146_072_407, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 902_729_000 picoseconds.
        Weight::from_parts(943_422_000, 0)
            // Standard Error: 48_377
            .saturating_add(Weight::from_parts(13_519_974, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_567_000 picoseconds.
        Weight::from_parts(108_237_060, 0)
            // Standard Error: 378_376
            .saturating_add(Weight::from_parts(104_166_154, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_461_000 picoseconds.
        Weight::from_parts(92_423_142, 0)
            // Standard Error: 363_387
            .saturating_add(Weight::from_parts(85_908_856, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_729_000 picoseconds.
        Weight::from_parts(82_719_222, 0)
            // Standard Error: 354_737
            .saturating_add(Weight::from_parts(87_355_765, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_364_000 picoseconds.
        Weight::from_parts(117_983_969, 0)
            // Standard Error: 381_658
            .saturating_add(Weight::from_parts(167_592_391, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_054_000 picoseconds.
        Weight::from_parts(107_635_000, 0)
            // Standard Error: 3_761_339
            .saturating_add(Weight::from_parts(774_208_385, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_035_000 picoseconds.
        Weight::from_parts(159_219_545, 0)
            // Standard Error: 370_293
            .saturating_add(Weight::from_parts(252_572_286, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 357_025_000 picoseconds.
        Weight::from_parts(360_308_000, 0)
            // Standard Error: 61_961
            .saturating_add(Weight::from_parts(22_239_955, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_799_000 picoseconds.
        Weight::from_parts(186_087_791, 0)
            // Standard Error: 418_561
            .saturating_add(Weight::from_parts(256_486_217, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 358_946_000 picoseconds.
        Weight::from_parts(370_207_000, 0)
            // Standard Error: 60_042
            .saturating_add(Weight::from_parts(22_079_488, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 750_425_000 picoseconds.
        Weight::from_parts(854_379_291, 0)
            // Standard Error: 550_203
            .saturating_add(Weight::from_parts(272_275_504, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 741_437_000 picoseconds.
        Weight::from_parts(808_114_203, 0)
            // Standard Error: 422_632
            .saturating_add(Weight::from_parts(286_675_498, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_495_000 picoseconds.
        Weight::from_parts(85_550_308, 0)
            // Standard Error: 360_794
            .saturating_add(Weight::from_parts(94_382_771, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_830_281_000 picoseconds.
        Weight::from_parts(1_949_054_109, 0)
            // Standard Error: 302_690
            .saturating_add(Weight::from_parts(164_405_804, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 322_735_000 picoseconds.
        Weight::from_parts(325_871_000, 0)
            // Standard Error: 42_390
            .saturating_add(Weight::from_parts(31_374_122, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_825_752_000 picoseconds.
        Weight::from_parts(1_926_644_440, 0)
            // Standard Error: 357_269
            .saturating_add(Weight::from_parts(217_429_116, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_827_939_000 picoseconds.
        Weight::from_parts(1_942_773_808, 0)
            // Standard Error: 323_529
            .saturating_add(Weight::from_parts(218_458_678, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 262_666_000 picoseconds.
        Weight::from_parts(341_141_277, 0)
            // Standard Error: 400_519
            .saturating_add(Weight::from_parts(275_129_432, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 539_953_000 picoseconds.
        Weight::from_parts(547_271_000, 0)
            // Standard Error: 51_595
            .saturating_add(Weight::from_parts(21_889_412, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_025_011_000 picoseconds.
        Weight::from_parts(2_189_686_606, 0)
            // Standard Error: 469_987
            .saturating_add(Weight::from_parts(235_028_705, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 120_865_000 picoseconds.
        Weight::from_parts(114_897_013, 0)
            // Standard Error: 861
            .saturating_add(Weight::from_parts(427_550, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_669_000 picoseconds.
        Weight::from_parts(108_465_828, 0)
            // Standard Error: 1_047
            .saturating_add(Weight::from_parts(433_895, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_738_000 picoseconds.
        Weight::from_parts(162_877_908, 0)
            // Standard Error: 453_561
            .saturating_add(Weight::from_parts(147_093_071, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 113_712_000 picoseconds.
        Weight::from_parts(117_137_000, 0)
            // Standard Error: 3_073
            .saturating_add(Weight::from_parts(691_380, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 123_394_000 picoseconds.
        Weight::from_parts(114_270_969, 0)
            // Standard Error: 935
            .saturating_add(Weight::from_parts(432_205, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 122_913_000 picoseconds.
        Weight::from_parts(119_243_151, 0)
            // Standard Error: 833
            .saturating_add(Weight::from_parts(418_603, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_513_000 picoseconds.
        Weight::from_parts(90_458_204, 0)
            // Standard Error: 306_036
            .saturating_add(Weight::from_parts(86_514_726, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_097_000 picoseconds.
        Weight::from_parts(93_148_736, 0)
            // Standard Error: 333_661
            .saturating_add(Weight::from_parts(84_563_496, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_507_000 picoseconds.
        Weight::from_parts(92_815_231, 0)
            // Standard Error: 310_034
            .saturating_add(Weight::from_parts(87_094_084, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 747_540_000 picoseconds.
        Weight::from_parts(843_690_329, 0)
            // Standard Error: 510_548
            .saturating_add(Weight::from_parts(108_361_926, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 765_444_000 picoseconds.
        Weight::from_parts(834_758_897, 0)
            // Standard Error: 3_842
            .saturating_add(Weight::from_parts(167_533, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_532_087_000 picoseconds.
        Weight::from_parts(2_758_436_159, 0)
            // Standard Error: 510_711
            .saturating_add(Weight::from_parts(130_539_370, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_774_674_000 picoseconds.
        Weight::from_parts(2_991_734_209, 0)
            // Standard Error: 15_741
            .saturating_add(Weight::from_parts(13_942_735, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_562_000 picoseconds.
        Weight::from_parts(114_223_383, 0)
            // Standard Error: 375_641
            .saturating_add(Weight::from_parts(116_226_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 157_629_000 picoseconds.
        Weight::from_parts(162_135_000, 0)
            // Standard Error: 61_405
            .saturating_add(Weight::from_parts(26_364_044, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_354_000 picoseconds.
        Weight::from_parts(88_167_350, 0)
            // Standard Error: 316_109
            .saturating_add(Weight::from_parts(84_501_311, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 182_661_000 picoseconds.
        Weight::from_parts(209_257_849, 0)
            // Standard Error: 261_942
            .saturating_add(Weight::from_parts(163_855_221, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 114_286_000 picoseconds.
        Weight::from_parts(153_471_681, 0)
            // Standard Error: 328_277
            .saturating_add(Weight::from_parts(342_139_906, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_376_152_000 picoseconds.
        Weight::from_parts(43_666_787_000, 0)
            // Standard Error: 258_478
            .saturating_add(Weight::from_parts(7_112_987, 0).saturating_mul(p.into()))
            // Standard Error: 258_465
            .saturating_add(Weight::from_parts(159_008_277, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 116_830_000 picoseconds.
        Weight::from_parts(162_797_656, 0)
            // Standard Error: 355_636
            .saturating_add(Weight::from_parts(342_437_044, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 45_383_474_000 picoseconds.
        Weight::from_parts(46_059_314_000, 0)
            // Standard Error: 280_559
            .saturating_add(Weight::from_parts(7_156_936, 0).saturating_mul(p.into()))
            // Standard Error: 280_546
            .saturating_add(Weight::from_parts(157_706_114, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 99_924_000 picoseconds.
        Weight::from_parts(102_865_000, 1131)
            // Standard Error: 35_111
            .saturating_add(Weight::from_parts(16_346_149, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 103_983_000 picoseconds.
        Weight::from_parts(105_995_000, 1131)
            // Standard Error: 33_381
            .saturating_add(Weight::from_parts(44_059_550, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_301_448_000 picoseconds.
        Weight::from_parts(8_814_669_029, 5069931)
            // Standard Error: 81_158
            .saturating_add(Weight::from_parts(42_325_026, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1820 + p * (65580 ±0)`
        //  Estimated: `1946 + p * (75482 ±0)`
        // Minimum execution time: 103_709_000 picoseconds.
        Weight::from_parts(106_822_000, 1946)
            // Standard Error: 92_265
            .saturating_add(Weight::from_parts(57_346_184, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 108_980_000 picoseconds.
        Weight::from_parts(122_235_652, 1131)
            // Standard Error: 70_818
            .saturating_add(Weight::from_parts(44_641_435, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 829_055_000 picoseconds.
        Weight::from_parts(910_509_178, 1496)
            // Standard Error: 387_587
            .saturating_add(Weight::from_parts(60_567_848, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_452_550_000 picoseconds.
        Weight::from_parts(1_615_292_620, 317931)
            // Standard Error: 467_200
            .saturating_add(Weight::from_parts(47_562_043, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_521_000 picoseconds.
        Weight::from_parts(3_092_709, 0)
            // Standard Error: 81_386
            .saturating_add(Weight::from_parts(103_796_220, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_512_510_000 picoseconds.
        Weight::from_parts(4_384_825_771, 0)
            // Standard Error: 67_467
            .saturating_add(Weight::from_parts(4_757_024, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_479_243_000 picoseconds.
        Weight::from_parts(4_410_816_537, 0)
            // Standard Error: 63_443
            .saturating_add(Weight::from_parts(4_579_891, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_629_215_000 picoseconds.
        Weight::from_parts(11_427_250_286, 0)
            // Standard Error: 170_544
            .saturating_add(Weight::from_parts(11_907_397, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_712_843_000 picoseconds.
        Weight::from_parts(12_105_819_242, 0)
            // Standard Error: 144_483
            .saturating_add(Weight::from_parts(7_109_832, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_531_000 picoseconds.
        Weight::from_parts(2_606_000, 0)
            // Standard Error: 7_022
            .saturating_add(Weight::from_parts(3_801_618, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_409_000 picoseconds.
        Weight::from_parts(972_430, 0)
            // Standard Error: 9_150
            .saturating_add(Weight::from_parts(3_174_002, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_362_000 picoseconds.
        Weight::from_parts(3_288_334, 0)
            // Standard Error: 1_238
            .saturating_add(Weight::from_parts(1_590_986, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_414_000 picoseconds.
        Weight::from_parts(2_495_000, 0)
            // Standard Error: 9_259
            .saturating_add(Weight::from_parts(3_034_702, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_527_000 picoseconds.
        Weight::from_parts(10_012_780, 0)
            // Standard Error: 25_436
            .saturating_add(Weight::from_parts(4_674_786, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_790_000 picoseconds.
        Weight::from_parts(5_137_388, 0)
            // Standard Error: 1_313
            .saturating_add(Weight::from_parts(180_674, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_487_000 picoseconds.
        Weight::from_parts(5_710_325, 0)
            // Standard Error: 7_824
            .saturating_add(Weight::from_parts(2_576_921, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_576_921 -
            2_422_406, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_437_000 picoseconds.
        Weight::from_parts(5_080_717, 0)
            // Standard Error: 13_240
            .saturating_add(Weight::from_parts(2_422_406, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_759_000 picoseconds.
        Weight::from_parts(16_144_464, 0)
            // Standard Error: 39_285
            .saturating_add(Weight::from_parts(10_155_516, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_319_000 picoseconds.
        Weight::from_parts(6_337_906, 0)
            // Standard Error: 7_015
            .saturating_add(Weight::from_parts(1_197_998, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_375_000 picoseconds.
        Weight::from_parts(5_700_067, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_544_000 picoseconds.
        Weight::from_parts(8_405_622, 0)
            // Standard Error: 4_837
            .saturating_add(Weight::from_parts(549_388, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_492_000 picoseconds.
        Weight::from_parts(5_521_619, 0)
            // Standard Error: 13_065
            .saturating_add(Weight::from_parts(1_353_736, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_473_000 picoseconds.
        Weight::from_parts(4_201_362, 0)
            // Standard Error: 14_697
            .saturating_add(Weight::from_parts(1_519_940, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_288_000 picoseconds.
        Weight::from_parts(1_850_095, 0)
            // Standard Error: 8_648
            .saturating_add(Weight::from_parts(938_468, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_194_000 picoseconds.
        Weight::from_parts(6_305_000, 0)
            // Standard Error: 8_263
            .saturating_add(Weight::from_parts(1_481_525, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_541_000 picoseconds.
        Weight::from_parts(1_883_290, 0)
            // Standard Error: 15_728
            .saturating_add(Weight::from_parts(7_268_858, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_380_000 picoseconds.
        Weight::from_parts(1_232_386, 0)
            // Standard Error: 12_755
            .saturating_add(Weight::from_parts(3_484_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_354_000 picoseconds.
        Weight::from_parts(2_443_000, 0)
            // Standard Error: 4_914
            .saturating_add(Weight::from_parts(3_225_640, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_317_000 picoseconds.
        Weight::from_parts(2_473_000, 0)
            // Standard Error: 5_841
            .saturating_add(Weight::from_parts(3_202_011, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_512_000 picoseconds.
        Weight::from_parts(2_636_000, 0)
            // Standard Error: 4_092
            .saturating_add(Weight::from_parts(2_708_176, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_423_000 picoseconds.
        Weight::from_parts(2_496_000, 0)
            // Standard Error: 5_282
            .saturating_add(Weight::from_parts(659_258, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_482_000 picoseconds.
        Weight::from_parts(1_463_655, 0)
            // Standard Error: 4_449
            .saturating_add(Weight::from_parts(450_434, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_353_000 picoseconds.
        Weight::from_parts(2_487_000, 0)
            // Standard Error: 10_002
            .saturating_add(Weight::from_parts(1_927_889, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_459_000 picoseconds.
        Weight::from_parts(2_533_000, 0)
            // Standard Error: 8_870
            .saturating_add(Weight::from_parts(1_267_066, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_502_000 picoseconds.
        Weight::from_parts(921_188, 0)
            // Standard Error: 4_642
            .saturating_add(Weight::from_parts(488_218, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_436_000 picoseconds.
        Weight::from_parts(1_319_267, 0)
            // Standard Error: 4_607
            .saturating_add(Weight::from_parts(442_967, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_488_000 picoseconds.
        Weight::from_parts(2_545_000, 0)
            // Standard Error: 4_804
            .saturating_add(Weight::from_parts(573_778, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_490_000 picoseconds.
        Weight::from_parts(2_600_000, 0)
            // Standard Error: 5_343
            .saturating_add(Weight::from_parts(594_956, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_471_000 picoseconds.
        Weight::from_parts(2_516_000, 0)
            // Standard Error: 4_522
            .saturating_add(Weight::from_parts(545_235, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_299_000 picoseconds.
        Weight::from_parts(888_932, 0)
            // Standard Error: 5_380
            .saturating_add(Weight::from_parts(433_137, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_398_000 picoseconds.
        Weight::from_parts(1_648_004, 0)
            // Standard Error: 4_104
            .saturating_add(Weight::from_parts(278_435, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_454_000 picoseconds.
        Weight::from_parts(2_223_108, 0)
            // Standard Error: 3_432
            .saturating_add(Weight::from_parts(250_125, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_508_000 picoseconds.
        Weight::from_parts(2_549_000, 0)
            // Standard Error: 9_281
            .saturating_add(Weight::from_parts(1_950_859, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_456_000 picoseconds.
        Weight::from_parts(2_510_000, 0)
            // Standard Error: 7_839
            .saturating_add(Weight::from_parts(1_307_936, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_454_000 picoseconds.
        Weight::from_parts(2_500_000, 0)
            // Standard Error: 8_449
            .saturating_add(Weight::from_parts(1_928_182, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_466_000 picoseconds.
        Weight::from_parts(2_552_000, 0)
            // Standard Error: 7_081
            .saturating_add(Weight::from_parts(1_318_375, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_374_000 picoseconds.
        Weight::from_parts(2_530_000, 0)
            // Standard Error: 8_905
            .saturating_add(Weight::from_parts(1_962_734, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_420_000 picoseconds.
        Weight::from_parts(2_532_000, 0)
            // Standard Error: 9_508
            .saturating_add(Weight::from_parts(1_376_299, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_402_000 picoseconds.
        Weight::from_parts(2_520_000, 0)
            // Standard Error: 9_716
            .saturating_add(Weight::from_parts(2_097_986, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_468_000 picoseconds.
        Weight::from_parts(2_527_000, 0)
            // Standard Error: 10_269
            .saturating_add(Weight::from_parts(1_382_435, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_420_000 picoseconds.
        Weight::from_parts(2_485_000, 0)
            // Standard Error: 10_417
            .saturating_add(Weight::from_parts(2_130_023, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_468_000 picoseconds.
        Weight::from_parts(2_487_000, 0)
            // Standard Error: 9_985
            .saturating_add(Weight::from_parts(1_360_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_486_000 picoseconds.
        Weight::from_parts(2_553_000, 0)
            // Standard Error: 9_547
            .saturating_add(Weight::from_parts(2_046_452, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_534_000 picoseconds.
        Weight::from_parts(2_580_000, 0)
            // Standard Error: 8_550
            .saturating_add(Weight::from_parts(1_386_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_461_000 picoseconds.
        Weight::from_parts(2_505_000, 0)
            // Standard Error: 8_840
            .saturating_add(Weight::from_parts(1_957_994, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_379_000 picoseconds.
        Weight::from_parts(2_517_000, 0)
            // Standard Error: 8_683
            .saturating_add(Weight::from_parts(1_290_645, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_431_000 picoseconds.
        Weight::from_parts(2_497_000, 0)
            // Standard Error: 8_013
            .saturating_add(Weight::from_parts(1_912_120, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_373_000 picoseconds.
        Weight::from_parts(2_464_000, 0)
            // Standard Error: 8_374
            .saturating_add(Weight::from_parts(1_286_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_393_000 picoseconds.
        Weight::from_parts(2_512_000, 0)
            // Standard Error: 8_515
            .saturating_add(Weight::from_parts(1_897_055, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(2_424_000, 0)
            // Standard Error: 9_488
            .saturating_add(Weight::from_parts(1_231_022, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_429_000 picoseconds.
        Weight::from_parts(2_501_000, 0)
            // Standard Error: 7_896
            .saturating_add(Weight::from_parts(1_956_994, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_403_000 picoseconds.
        Weight::from_parts(2_442_000, 0)
            // Standard Error: 8_436
            .saturating_add(Weight::from_parts(1_255_625, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_395_000 picoseconds.
        Weight::from_parts(2_493_000, 0)
            // Standard Error: 8_844
            .saturating_add(Weight::from_parts(1_447_003, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_413_000 picoseconds.
        Weight::from_parts(2_490_000, 0)
            // Standard Error: 6_308
            .saturating_add(Weight::from_parts(779_145, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_373_000 picoseconds.
        Weight::from_parts(2_470_000, 0)
            // Standard Error: 8_094
            .saturating_add(Weight::from_parts(1_483_942, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_367_000 picoseconds.
        Weight::from_parts(2_564_000, 0)
            // Standard Error: 5_463
            .saturating_add(Weight::from_parts(704_350, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_436_000 picoseconds.
        Weight::from_parts(2_483_000, 0)
            // Standard Error: 9_045
            .saturating_add(Weight::from_parts(1_923_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_443_000 picoseconds.
        Weight::from_parts(2_494_000, 0)
            // Standard Error: 9_681
            .saturating_add(Weight::from_parts(1_327_351, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_419_000 picoseconds.
        Weight::from_parts(14_398_372, 0)
            // Standard Error: 28_927
            .saturating_add(Weight::from_parts(1_825_406, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_455_000 picoseconds.
        Weight::from_parts(8_270_221, 0)
            // Standard Error: 24_239
            .saturating_add(Weight::from_parts(1_994_871, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_467_000 picoseconds.
        Weight::from_parts(8_187_233, 0)
            // Standard Error: 24_213
            .saturating_add(Weight::from_parts(2_361_011, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_472_000 picoseconds.
        Weight::from_parts(6_497_923, 0)
            // Standard Error: 27_169
            .saturating_add(Weight::from_parts(2_236_853, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_432_000 picoseconds.
        Weight::from_parts(22_100_450, 0)
            // Standard Error: 63_097
            .saturating_add(Weight::from_parts(7_880_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_410_000 picoseconds.
        Weight::from_parts(14_772_175, 0)
            // Standard Error: 59_797
            .saturating_add(Weight::from_parts(6_824_060, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_405_000 picoseconds.
        Weight::from_parts(13_926_639, 0)
            // Standard Error: 34_294
            .saturating_add(Weight::from_parts(2_196_661, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_410_000 picoseconds.
        Weight::from_parts(6_114_912, 0)
            // Standard Error: 27_904
            .saturating_add(Weight::from_parts(2_248_807, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_482_000 picoseconds.
        Weight::from_parts(2_514_000, 0)
            // Standard Error: 10_396
            .saturating_add(Weight::from_parts(1_500_079, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_412_000 picoseconds.
        Weight::from_parts(2_551_000, 0)
            // Standard Error: 6_232
            .saturating_add(Weight::from_parts(732_470, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_442_000 picoseconds.
        Weight::from_parts(2_489_000, 0)
            // Standard Error: 9_134
            .saturating_add(Weight::from_parts(1_444_483, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_386_000 picoseconds.
        Weight::from_parts(2_477_000, 0)
            // Standard Error: 6_308
            .saturating_add(Weight::from_parts(742_937, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_405_000 picoseconds.
        Weight::from_parts(2_492_000, 0)
            // Standard Error: 11_010
            .saturating_add(Weight::from_parts(1_484_031, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_345_000 picoseconds.
        Weight::from_parts(2_483_000, 0)
            // Standard Error: 4_556
            .saturating_add(Weight::from_parts(781_391, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_467_000 picoseconds.
        Weight::from_parts(2_563_000, 0)
            // Standard Error: 7_610
            .saturating_add(Weight::from_parts(1_213_655, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_374_000 picoseconds.
        Weight::from_parts(2_500_000, 0)
            // Standard Error: 5_339
            .saturating_add(Weight::from_parts(680_927, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_400_000 picoseconds.
        Weight::from_parts(2_499_000, 0)
            // Standard Error: 10_678
            .saturating_add(Weight::from_parts(1_273_979, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_411_000 picoseconds.
        Weight::from_parts(2_495_000, 0)
            // Standard Error: 6_346
            .saturating_add(Weight::from_parts(741_380, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_407_000 picoseconds.
        Weight::from_parts(2_486_000, 0)
            // Standard Error: 10_694
            .saturating_add(Weight::from_parts(1_343_648, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_403_000 picoseconds.
        Weight::from_parts(2_476_000, 0)
            // Standard Error: 5_810
            .saturating_add(Weight::from_parts(722_259, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_453_000 picoseconds.
        Weight::from_parts(2_495_000, 0)
            // Standard Error: 9_595
            .saturating_add(Weight::from_parts(1_279_371, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_473_000 picoseconds.
        Weight::from_parts(2_509_000, 0)
            // Standard Error: 5_480
            .saturating_add(Weight::from_parts(785_689, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_498_000 picoseconds.
        Weight::from_parts(2_542_000, 0)
            // Standard Error: 9_741
            .saturating_add(Weight::from_parts(1_313_846, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_345_000 picoseconds.
        Weight::from_parts(2_472_000, 0)
            // Standard Error: 7_226
            .saturating_add(Weight::from_parts(776_464, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1090`
        //  Estimated: `6196`
        // Minimum execution time: 86_183_000 picoseconds.
        Weight::from_parts(90_212_000, 6196)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `859`
        //  Estimated: `4324`
        // Minimum execution time: 50_235_000 picoseconds.
        Weight::from_parts(53_994_000, 4324)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1010`
        //  Estimated: `6196`
        // Minimum execution time: 95_483_000 picoseconds.
        Weight::from_parts(101_093_000, 6196)
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `695`
        //  Estimated: `4160`
        // Minimum execution time: 34_005_000 picoseconds.
        Weight::from_parts(35_198_000, 4160)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `939`
        //  Estimated: `4404`
        // Minimum execution time: 49_353_000 picoseconds.
        Weight::from_parts(51_555_000, 4404)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_379_000 picoseconds.
        Weight::from_parts(3_540_000, 3545)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1567`
        //  Estimated: `7507`
        // Minimum execution time: 132_888_000 picoseconds.
        Weight::from_parts(138_548_000, 7507)
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1294`
        //  Estimated: `7234`
        // Minimum execution time: 112_391_000 picoseconds.
        Weight::from_parts(114_706_000, 7234)
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_615_000 picoseconds.
        Weight::from_parts(106_812_220, 0)
            // Standard Error: 92_523
            .saturating_add(Weight::from_parts(18_397_180, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_729_000 picoseconds.
        Weight::from_parts(107_297_118, 0)
            // Standard Error: 88_836
            .saturating_add(Weight::from_parts(17_551_258, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_529_000 picoseconds.
        Weight::from_parts(106_645_064, 0)
            // Standard Error: 89_788
            .saturating_add(Weight::from_parts(15_979_646, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_094_000 picoseconds.
        Weight::from_parts(106_665_070, 0)
            // Standard Error: 90_770
            .saturating_add(Weight::from_parts(21_362_724, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 738_459_000 picoseconds.
        Weight::from_parts(804_541_374, 0)
            // Standard Error: 1_019_965
            .saturating_add(Weight::from_parts(33_576_008, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(_r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 730_419_000 picoseconds.
        Weight::from_parts(796_363_376, 0)
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_278_000 picoseconds.
        Weight::from_parts(116_338_184, 0)
            // Standard Error: 89_392
            .saturating_add(Weight::from_parts(9_297_412, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_428_000 picoseconds.
        Weight::from_parts(116_831_682, 0)
            // Standard Error: 91_332
            .saturating_add(Weight::from_parts(7_187_780, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_072_000 picoseconds.
        Weight::from_parts(106_447_868, 0)
            // Standard Error: 2_305_676
            .saturating_add(Weight::from_parts(197_413_680, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_225_000 picoseconds.
        Weight::from_parts(105_966_054, 0)
            // Standard Error: 2_267_605
            .saturating_add(Weight::from_parts(191_227_910, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_774_000 picoseconds.
        Weight::from_parts(106_255_096, 0)
            // Standard Error: 1_481_753
            .saturating_add(Weight::from_parts(127_692_646, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_776_000 picoseconds.
        Weight::from_parts(108_328_338, 0)
            // Standard Error: 2_299_081
            .saturating_add(Weight::from_parts(191_877_852, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_838_000 picoseconds.
        Weight::from_parts(105_649_884, 0)
            // Standard Error: 2_260_663
            .saturating_add(Weight::from_parts(188_425_504, 0).saturating_mul(r.into()))
    }
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_018_000 picoseconds.
        Weight::from_parts(1_080_000, 0)
            // Standard Error: 744
            .saturating_add(Weight::from_parts(247_005, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_196_000 picoseconds.
        Weight::from_parts(3_359_000, 3610)
            // Standard Error: 825
            .saturating_add(Weight::from_parts(586_779, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_325_000 picoseconds.
        Weight::from_parts(37_230_777, 0)
            // Standard Error: 18_552
            .saturating_add(Weight::from_parts(3_028_304, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1354`
        //  Estimated: `8799`
        // Minimum execution time: 144_057_000 picoseconds.
        Weight::from_parts(148_048_000, 8799)
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `3578`
        // Minimum execution time: 79_739_000 picoseconds.
        Weight::from_parts(3_100_467, 3578)
            // Standard Error: 46_755
            .saturating_add(Weight::from_parts(63_169_065, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1005`
        //  Estimated: `4470`
        // Minimum execution time: 117_521_000 picoseconds.
        Weight::from_parts(150_951_481, 4470)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(2_276, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `379`
        //  Estimated: `3844`
        // Minimum execution time: 9_638_577_000 picoseconds.
        Weight::from_parts(200_292_255, 3844)
            // Standard Error: 111_034
            .saturating_add(Weight::from_parts(64_169_732, 0).saturating_mul(c.into()))
            // Standard Error: 6
            .saturating_add(Weight::from_parts(2_258, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `513`
        //  Estimated: `6196`
        // Minimum execution time: 106_739_000 picoseconds.
        Weight::from_parts(67_546_140, 6196)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(889, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1353`
        //  Estimated: `8799`
        // Minimum execution time: 174_614_000 picoseconds.
        Weight::from_parts(134_154_579, 8799)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(928, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3682 + c * (1075 ±0)`
        // Minimum execution time: 60_902_000 picoseconds.
        Weight::from_parts(61_601_000, 3682)
            // Standard Error: 32_455
            .saturating_add(Weight::from_parts(61_902_579, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1075).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_784_000 picoseconds.
        Weight::from_parts(100_926_000, 0)
            // Standard Error: 3_508_536
            .saturating_add(Weight::from_parts(705_625_339, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 501_758_000 picoseconds.
        Weight::from_parts(439_015_938, 0)
            // Standard Error: 9_849
            .saturating_add(Weight::from_parts(28_455_389, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 224_021_000 picoseconds.
        Weight::from_parts(246_353_017, 0)
            // Standard Error: 220_063
            .saturating_add(Weight::from_parts(60_631_614, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 221_507_000 picoseconds.
        Weight::from_parts(250_958_490, 0)
            // Standard Error: 203_339
            .saturating_add(Weight::from_parts(72_077_808, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 20]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 297_857_000 picoseconds.
        Weight::from_parts(298_448_842, 0)
            // Standard Error: 57_252
            .saturating_add(Weight::from_parts(4_929_659, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_437_000 picoseconds.
        Weight::from_parts(115_919_336, 0)
            // Standard Error: 3_817
            .saturating_add(Weight::from_parts(2_352_421, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 179_945_000 picoseconds.
        Weight::from_parts(213_057_061, 0)
            // Standard Error: 13_451
            .saturating_add(Weight::from_parts(2_183_611, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_117_000 picoseconds.
        Weight::from_parts(112_156_015, 0)
            // Standard Error: 364_334
            .saturating_add(Weight::from_parts(94_930_814, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_305_000 picoseconds.
        Weight::from_parts(83_836_459, 0)
            // Standard Error: 329_660
            .saturating_add(Weight::from_parts(90_386_577, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_361_000 picoseconds.
        Weight::from_parts(92_869_517, 0)
            // Standard Error: 302_167
            .saturating_add(Weight::from_parts(84_723_570, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_364_000 picoseconds.
        Weight::from_parts(96_052_612, 0)
            // Standard Error: 308_892
            .saturating_add(Weight::from_parts(83_759_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_744_000 picoseconds.
        Weight::from_parts(82_278_562, 0)
            // Standard Error: 400_860
            .saturating_add(Weight::from_parts(87_658_902, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_182_000 picoseconds.
        Weight::from_parts(88_938_154, 0)
            // Standard Error: 334_249
            .saturating_add(Weight::from_parts(86_492_653, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_825_000 picoseconds.
        Weight::from_parts(95_437_855, 0)
            // Standard Error: 313_407
            .saturating_add(Weight::from_parts(84_344_989, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_437_000 picoseconds.
        Weight::from_parts(81_232_682, 0)
            // Standard Error: 379_163
            .saturating_add(Weight::from_parts(87_626_840, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 734_390_000 picoseconds.
        Weight::from_parts(872_923_412, 0)
            // Standard Error: 508_456
            .saturating_add(Weight::from_parts(146_072_407, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 902_729_000 picoseconds.
        Weight::from_parts(943_422_000, 0)
            // Standard Error: 48_377
            .saturating_add(Weight::from_parts(13_519_974, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_567_000 picoseconds.
        Weight::from_parts(108_237_060, 0)
            // Standard Error: 378_376
            .saturating_add(Weight::from_parts(104_166_154, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_461_000 picoseconds.
        Weight::from_parts(92_423_142, 0)
            // Standard Error: 363_387
            .saturating_add(Weight::from_parts(85_908_856, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_729_000 picoseconds.
        Weight::from_parts(82_719_222, 0)
            // Standard Error: 354_737
            .saturating_add(Weight::from_parts(87_355_765, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_364_000 picoseconds.
        Weight::from_parts(117_983_969, 0)
            // Standard Error: 381_658
            .saturating_add(Weight::from_parts(167_592_391, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_054_000 picoseconds.
        Weight::from_parts(107_635_000, 0)
            // Standard Error: 3_761_339
            .saturating_add(Weight::from_parts(774_208_385, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_035_000 picoseconds.
        Weight::from_parts(159_219_545, 0)
            // Standard Error: 370_293
            .saturating_add(Weight::from_parts(252_572_286, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 357_025_000 picoseconds.
        Weight::from_parts(360_308_000, 0)
            // Standard Error: 61_961
            .saturating_add(Weight::from_parts(22_239_955, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_799_000 picoseconds.
        Weight::from_parts(186_087_791, 0)
            // Standard Error: 418_561
            .saturating_add(Weight::from_parts(256_486_217, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 358_946_000 picoseconds.
        Weight::from_parts(370_207_000, 0)
            // Standard Error: 60_042
            .saturating_add(Weight::from_parts(22_079_488, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 750_425_000 picoseconds.
        Weight::from_parts(854_379_291, 0)
            // Standard Error: 550_203
            .saturating_add(Weight::from_parts(272_275_504, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 741_437_000 picoseconds.
        Weight::from_parts(808_114_203, 0)
            // Standard Error: 422_632
            .saturating_add(Weight::from_parts(286_675_498, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_495_000 picoseconds.
        Weight::from_parts(85_550_308, 0)
            // Standard Error: 360_794
            .saturating_add(Weight::from_parts(94_382_771, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_830_281_000 picoseconds.
        Weight::from_parts(1_949_054_109, 0)
            // Standard Error: 302_690
            .saturating_add(Weight::from_parts(164_405_804, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 322_735_000 picoseconds.
        Weight::from_parts(325_871_000, 0)
            // Standard Error: 42_390
            .saturating_add(Weight::from_parts(31_374_122, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_825_752_000 picoseconds.
        Weight::from_parts(1_926_644_440, 0)
            // Standard Error: 357_269
            .saturating_add(Weight::from_parts(217_429_116, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_827_939_000 picoseconds.
        Weight::from_parts(1_942_773_808, 0)
            // Standard Error: 323_529
            .saturating_add(Weight::from_parts(218_458_678, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 262_666_000 picoseconds.
        Weight::from_parts(341_141_277, 0)
            // Standard Error: 400_519
            .saturating_add(Weight::from_parts(275_129_432, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 539_953_000 picoseconds.
        Weight::from_parts(547_271_000, 0)
            // Standard Error: 51_595
            .saturating_add(Weight::from_parts(21_889_412, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_025_011_000 picoseconds.
        Weight::from_parts(2_189_686_606, 0)
            // Standard Error: 469_987
            .saturating_add(Weight::from_parts(235_028_705, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 120_865_000 picoseconds.
        Weight::from_parts(114_897_013, 0)
            // Standard Error: 861
            .saturating_add(Weight::from_parts(427_550, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_669_000 picoseconds.
        Weight::from_parts(108_465_828, 0)
            // Standard Error: 1_047
            .saturating_add(Weight::from_parts(433_895, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_738_000 picoseconds.
        Weight::from_parts(162_877_908, 0)
            // Standard Error: 453_561
            .saturating_add(Weight::from_parts(147_093_071, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 113_712_000 picoseconds.
        Weight::from_parts(117_137_000, 0)
            // Standard Error: 3_073
            .saturating_add(Weight::from_parts(691_380, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 123_394_000 picoseconds.
        Weight::from_parts(114_270_969, 0)
            // Standard Error: 935
            .saturating_add(Weight::from_parts(432_205, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 122_913_000 picoseconds.
        Weight::from_parts(119_243_151, 0)
            // Standard Error: 833
            .saturating_add(Weight::from_parts(418_603, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_513_000 picoseconds.
        Weight::from_parts(90_458_204, 0)
            // Standard Error: 306_036
            .saturating_add(Weight::from_parts(86_514_726, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_097_000 picoseconds.
        Weight::from_parts(93_148_736, 0)
            // Standard Error: 333_661
            .saturating_add(Weight::from_parts(84_563_496, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_507_000 picoseconds.
        Weight::from_parts(92_815_231, 0)
            // Standard Error: 310_034
            .saturating_add(Weight::from_parts(87_094_084, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 747_540_000 picoseconds.
        Weight::from_parts(843_690_329, 0)
            // Standard Error: 510_548
            .saturating_add(Weight::from_parts(108_361_926, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 765_444_000 picoseconds.
        Weight::from_parts(834_758_897, 0)
            // Standard Error: 3_842
            .saturating_add(Weight::from_parts(167_533, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_532_087_000 picoseconds.
        Weight::from_parts(2_758_436_159, 0)
            // Standard Error: 510_711
            .saturating_add(Weight::from_parts(130_539_370, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_774_674_000 picoseconds.
        Weight::from_parts(2_991_734_209, 0)
            // Standard Error: 15_741
            .saturating_add(Weight::from_parts(13_942_735, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_562_000 picoseconds.
        Weight::from_parts(114_223_383, 0)
            // Standard Error: 375_641
            .saturating_add(Weight::from_parts(116_226_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 157_629_000 picoseconds.
        Weight::from_parts(162_135_000, 0)
            // Standard Error: 61_405
            .saturating_add(Weight::from_parts(26_364_044, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_354_000 picoseconds.
        Weight::from_parts(88_167_350, 0)
            // Standard Error: 316_109
            .saturating_add(Weight::from_parts(84_501_311, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 182_661_000 picoseconds.
        Weight::from_parts(209_257_849, 0)
            // Standard Error: 261_942
            .saturating_add(Weight::from_parts(163_855_221, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 114_286_000 picoseconds.
        Weight::from_parts(153_471_681, 0)
            // Standard Error: 328_277
            .saturating_add(Weight::from_parts(342_139_906, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_376_152_000 picoseconds.
        Weight::from_parts(43_666_787_000, 0)
            // Standard Error: 258_478
            .saturating_add(Weight::from_parts(7_112_987, 0).saturating_mul(p.into()))
            // Standard Error: 258_465
            .saturating_add(Weight::from_parts(159_008_277, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 116_830_000 picoseconds.
        Weight::from_parts(162_797_656, 0)
            // Standard Error: 355_636
            .saturating_add(Weight::from_parts(342_437_044, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 45_383_474_000 picoseconds.
        Weight::from_parts(46_059_314_000, 0)
            // Standard Error: 280_559
            .saturating_add(Weight::from_parts(7_156_936, 0).saturating_mul(p.into()))
            // Standard Error: 280_546
            .saturating_add(Weight::from_parts(157_706_114, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 99_924_000 picoseconds.
        Weight::from_parts(102_865_000, 1131)
            // Standard Error: 35_111
            .saturating_add(Weight::from_parts(16_346_149, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 103_983_000 picoseconds.
        Weight::from_parts(105_995_000, 1131)
            // Standard Error: 33_381
            .saturating_add(Weight::from_parts(44_059_550, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_301_448_000 picoseconds.
        Weight::from_parts(8_814_669_029, 5069931)
            // Standard Error: 81_158
            .saturating_add(Weight::from_parts(42_325_026, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1820 + p * (65580 ±0)`
        //  Estimated: `1946 + p * (75482 ±0)`
        // Minimum execution time: 103_709_000 picoseconds.
        Weight::from_parts(106_822_000, 1946)
            // Standard Error: 92_265
            .saturating_add(Weight::from_parts(57_346_184, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 108_980_000 picoseconds.
        Weight::from_parts(122_235_652, 1131)
            // Standard Error: 70_818
            .saturating_add(Weight::from_parts(44_641_435, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 829_055_000 picoseconds.
        Weight::from_parts(910_509_178, 1496)
            // Standard Error: 387_587
            .saturating_add(Weight::from_parts(60_567_848, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_452_550_000 picoseconds.
        Weight::from_parts(1_615_292_620, 317931)
            // Standard Error: 467_200
            .saturating_add(Weight::from_parts(47_562_043, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_521_000 picoseconds.
        Weight::from_parts(3_092_709, 0)
            // Standard Error: 81_386
            .saturating_add(Weight::from_parts(103_796_220, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_512_510_000 picoseconds.
        Weight::from_parts(4_384_825_771, 0)
            // Standard Error: 67_467
            .saturating_add(Weight::from_parts(4_757_024, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_479_243_000 picoseconds.
        Weight::from_parts(4_410_816_537, 0)
            // Standard Error: 63_443
            .saturating_add(Weight::from_parts(4_579_891, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_629_215_000 picoseconds.
        Weight::from_parts(11_427_250_286, 0)
            // Standard Error: 170_544
            .saturating_add(Weight::from_parts(11_907_397, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_712_843_000 picoseconds.
        Weight::from_parts(12_105_819_242, 0)
            // Standard Error: 144_483
            .saturating_add(Weight::from_parts(7_109_832, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_531_000 picoseconds.
        Weight::from_parts(2_606_000, 0)
            // Standard Error: 7_022
            .saturating_add(Weight::from_parts(3_801_618, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_409_000 picoseconds.
        Weight::from_parts(972_430, 0)
            // Standard Error: 9_150
            .saturating_add(Weight::from_parts(3_174_002, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_362_000 picoseconds.
        Weight::from_parts(3_288_334, 0)
            // Standard Error: 1_238
            .saturating_add(Weight::from_parts(1_590_986, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_414_000 picoseconds.
        Weight::from_parts(2_495_000, 0)
            // Standard Error: 9_259
            .saturating_add(Weight::from_parts(3_034_702, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_527_000 picoseconds.
        Weight::from_parts(10_012_780, 0)
            // Standard Error: 25_436
            .saturating_add(Weight::from_parts(4_674_786, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_790_000 picoseconds.
        Weight::from_parts(5_137_388, 0)
            // Standard Error: 1_313
            .saturating_add(Weight::from_parts(180_674, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_487_000 picoseconds.
        Weight::from_parts(5_710_325, 0)
            // Standard Error: 7_824
            .saturating_add(Weight::from_parts(2_576_921, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_576_921 -
            2_422_406, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_437_000 picoseconds.
        Weight::from_parts(5_080_717, 0)
            // Standard Error: 13_240
            .saturating_add(Weight::from_parts(2_422_406, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_759_000 picoseconds.
        Weight::from_parts(16_144_464, 0)
            // Standard Error: 39_285
            .saturating_add(Weight::from_parts(10_155_516, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_319_000 picoseconds.
        Weight::from_parts(6_337_906, 0)
            // Standard Error: 7_015
            .saturating_add(Weight::from_parts(1_197_998, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_375_000 picoseconds.
        Weight::from_parts(5_700_067, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_544_000 picoseconds.
        Weight::from_parts(8_405_622, 0)
            // Standard Error: 4_837
            .saturating_add(Weight::from_parts(549_388, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_492_000 picoseconds.
        Weight::from_parts(5_521_619, 0)
            // Standard Error: 13_065
            .saturating_add(Weight::from_parts(1_353_736, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_473_000 picoseconds.
        Weight::from_parts(4_201_362, 0)
            // Standard Error: 14_697
            .saturating_add(Weight::from_parts(1_519_940, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_288_000 picoseconds.
        Weight::from_parts(1_850_095, 0)
            // Standard Error: 8_648
            .saturating_add(Weight::from_parts(938_468, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_194_000 picoseconds.
        Weight::from_parts(6_305_000, 0)
            // Standard Error: 8_263
            .saturating_add(Weight::from_parts(1_481_525, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_541_000 picoseconds.
        Weight::from_parts(1_883_290, 0)
            // Standard Error: 15_728
            .saturating_add(Weight::from_parts(7_268_858, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_380_000 picoseconds.
        Weight::from_parts(1_232_386, 0)
            // Standard Error: 12_755
            .saturating_add(Weight::from_parts(3_484_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_354_000 picoseconds.
        Weight::from_parts(2_443_000, 0)
            // Standard Error: 4_914
            .saturating_add(Weight::from_parts(3_225_640, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_317_000 picoseconds.
        Weight::from_parts(2_473_000, 0)
            // Standard Error: 5_841
            .saturating_add(Weight::from_parts(3_202_011, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_512_000 picoseconds.
        Weight::from_parts(2_636_000, 0)
            // Standard Error: 4_092
            .saturating_add(Weight::from_parts(2_708_176, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_423_000 picoseconds.
        Weight::from_parts(2_496_000, 0)
            // Standard Error: 5_282
            .saturating_add(Weight::from_parts(659_258, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_482_000 picoseconds.
        Weight::from_parts(1_463_655, 0)
            // Standard Error: 4_449
            .saturating_add(Weight::from_parts(450_434, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_353_000 picoseconds.
        Weight::from_parts(2_487_000, 0)
            // Standard Error: 10_002
            .saturating_add(Weight::from_parts(1_927_889, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_459_000 picoseconds.
        Weight::from_parts(2_533_000, 0)
            // Standard Error: 8_870
            .saturating_add(Weight::from_parts(1_267_066, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_502_000 picoseconds.
        Weight::from_parts(921_188, 0)
            // Standard Error: 4_642
            .saturating_add(Weight::from_parts(488_218, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_436_000 picoseconds.
        Weight::from_parts(1_319_267, 0)
            // Standard Error: 4_607
            .saturating_add(Weight::from_parts(442_967, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_488_000 picoseconds.
        Weight::from_parts(2_545_000, 0)
            // Standard Error: 4_804
            .saturating_add(Weight::from_parts(573_778, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_490_000 picoseconds.
        Weight::from_parts(2_600_000, 0)
            // Standard Error: 5_343
            .saturating_add(Weight::from_parts(594_956, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_471_000 picoseconds.
        Weight::from_parts(2_516_000, 0)
            // Standard Error: 4_522
            .saturating_add(Weight::from_parts(545_235, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_299_000 picoseconds.
        Weight::from_parts(888_932, 0)
            // Standard Error: 5_380
            .saturating_add(Weight::from_parts(433_137, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_398_000 picoseconds.
        Weight::from_parts(1_648_004, 0)
            // Standard Error: 4_104
            .saturating_add(Weight::from_parts(278_435, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_454_000 picoseconds.
        Weight::from_parts(2_223_108, 0)
            // Standard Error: 3_432
            .saturating_add(Weight::from_parts(250_125, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_508_000 picoseconds.
        Weight::from_parts(2_549_000, 0)
            // Standard Error: 9_281
            .saturating_add(Weight::from_parts(1_950_859, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_456_000 picoseconds.
        Weight::from_parts(2_510_000, 0)
            // Standard Error: 7_839
            .saturating_add(Weight::from_parts(1_307_936, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_454_000 picoseconds.
        Weight::from_parts(2_500_000, 0)
            // Standard Error: 8_449
            .saturating_add(Weight::from_parts(1_928_182, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_466_000 picoseconds.
        Weight::from_parts(2_552_000, 0)
            // Standard Error: 7_081
            .saturating_add(Weight::from_parts(1_318_375, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_374_000 picoseconds.
        Weight::from_parts(2_530_000, 0)
            // Standard Error: 8_905
            .saturating_add(Weight::from_parts(1_962_734, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_420_000 picoseconds.
        Weight::from_parts(2_532_000, 0)
            // Standard Error: 9_508
            .saturating_add(Weight::from_parts(1_376_299, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_402_000 picoseconds.
        Weight::from_parts(2_520_000, 0)
            // Standard Error: 9_716
            .saturating_add(Weight::from_parts(2_097_986, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_468_000 picoseconds.
        Weight::from_parts(2_527_000, 0)
            // Standard Error: 10_269
            .saturating_add(Weight::from_parts(1_382_435, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_420_000 picoseconds.
        Weight::from_parts(2_485_000, 0)
            // Standard Error: 10_417
            .saturating_add(Weight::from_parts(2_130_023, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_468_000 picoseconds.
        Weight::from_parts(2_487_000, 0)
            // Standard Error: 9_985
            .saturating_add(Weight::from_parts(1_360_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_486_000 picoseconds.
        Weight::from_parts(2_553_000, 0)
            // Standard Error: 9_547
            .saturating_add(Weight::from_parts(2_046_452, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_534_000 picoseconds.
        Weight::from_parts(2_580_000, 0)
            // Standard Error: 8_550
            .saturating_add(Weight::from_parts(1_386_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_461_000 picoseconds.
        Weight::from_parts(2_505_000, 0)
            // Standard Error: 8_840
            .saturating_add(Weight::from_parts(1_957_994, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_379_000 picoseconds.
        Weight::from_parts(2_517_000, 0)
            // Standard Error: 8_683
            .saturating_add(Weight::from_parts(1_290_645, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_431_000 picoseconds.
        Weight::from_parts(2_497_000, 0)
            // Standard Error: 8_013
            .saturating_add(Weight::from_parts(1_912_120, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_373_000 picoseconds.
        Weight::from_parts(2_464_000, 0)
            // Standard Error: 8_374
            .saturating_add(Weight::from_parts(1_286_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_393_000 picoseconds.
        Weight::from_parts(2_512_000, 0)
            // Standard Error: 8_515
            .saturating_add(Weight::from_parts(1_897_055, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(2_424_000, 0)
            // Standard Error: 9_488
            .saturating_add(Weight::from_parts(1_231_022, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_429_000 picoseconds.
        Weight::from_parts(2_501_000, 0)
            // Standard Error: 7_896
            .saturating_add(Weight::from_parts(1_956_994, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_403_000 picoseconds.
        Weight::from_parts(2_442_000, 0)
            // Standard Error: 8_436
            .saturating_add(Weight::from_parts(1_255_625, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_395_000 picoseconds.
        Weight::from_parts(2_493_000, 0)
            // Standard Error: 8_844
            .saturating_add(Weight::from_parts(1_447_003, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_413_000 picoseconds.
        Weight::from_parts(2_490_000, 0)
            // Standard Error: 6_308
            .saturating_add(Weight::from_parts(779_145, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_373_000 picoseconds.
        Weight::from_parts(2_470_000, 0)
            // Standard Error: 8_094
            .saturating_add(Weight::from_parts(1_483_942, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_367_000 picoseconds.
        Weight::from_parts(2_564_000, 0)
            // Standard Error: 5_463
            .saturating_add(Weight::from_parts(704_350, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_436_000 picoseconds.
        Weight::from_parts(2_483_000, 0)
            // Standard Error: 9_045
            .saturating_add(Weight::from_parts(1_923_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_443_000 picoseconds.
        Weight::from_parts(2_494_000, 0)
            // Standard Error: 9_681
            .saturating_add(Weight::from_parts(1_327_351, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_419_000 picoseconds.
        Weight::from_parts(14_398_372, 0)
            // Standard Error: 28_927
            .saturating_add(Weight::from_parts(1_825_406, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_455_000 picoseconds.
        Weight::from_parts(8_270_221, 0)
            // Standard Error: 24_239
            .saturating_add(Weight::from_parts(1_994_871, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_467_000 picoseconds.
        Weight::from_parts(8_187_233, 0)
            // Standard Error: 24_213
            .saturating_add(Weight::from_parts(2_361_011, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_472_000 picoseconds.
        Weight::from_parts(6_497_923, 0)
            // Standard Error: 27_169
            .saturating_add(Weight::from_parts(2_236_853, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_432_000 picoseconds.
        Weight::from_parts(22_100_450, 0)
            // Standard Error: 63_097
            .saturating_add(Weight::from_parts(7_880_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_410_000 picoseconds.
        Weight::from_parts(14_772_175, 0)
            // Standard Error: 59_797
            .saturating_add(Weight::from_parts(6_824_060, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_405_000 picoseconds.
        Weight::from_parts(13_926_639, 0)
            // Standard Error: 34_294
            .saturating_add(Weight::from_parts(2_196_661, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_410_000 picoseconds.
        Weight::from_parts(6_114_912, 0)
            // Standard Error: 27_904
            .saturating_add(Weight::from_parts(2_248_807, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_482_000 picoseconds.
        Weight::from_parts(2_514_000, 0)
            // Standard Error: 10_396
            .saturating_add(Weight::from_parts(1_500_079, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_412_000 picoseconds.
        Weight::from_parts(2_551_000, 0)
            // Standard Error: 6_232
            .saturating_add(Weight::from_parts(732_470, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_442_000 picoseconds.
        Weight::from_parts(2_489_000, 0)
            // Standard Error: 9_134
            .saturating_add(Weight::from_parts(1_444_483, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_386_000 picoseconds.
        Weight::from_parts(2_477_000, 0)
            // Standard Error: 6_308
            .saturating_add(Weight::from_parts(742_937, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_405_000 picoseconds.
        Weight::from_parts(2_492_000, 0)
            // Standard Error: 11_010
            .saturating_add(Weight::from_parts(1_484_031, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_345_000 picoseconds.
        Weight::from_parts(2_483_000, 0)
            // Standard Error: 4_556
            .saturating_add(Weight::from_parts(781_391, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_467_000 picoseconds.
        Weight::from_parts(2_563_000, 0)
            // Standard Error: 7_610
            .saturating_add(Weight::from_parts(1_213_655, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_374_000 picoseconds.
        Weight::from_parts(2_500_000, 0)
            // Standard Error: 5_339
            .saturating_add(Weight::from_parts(680_927, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_400_000 picoseconds.
        Weight::from_parts(2_499_000, 0)
            // Standard Error: 10_678
            .saturating_add(Weight::from_parts(1_273_979, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_411_000 picoseconds.
        Weight::from_parts(2_495_000, 0)
            // Standard Error: 6_346
            .saturating_add(Weight::from_parts(741_380, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_407_000 picoseconds.
        Weight::from_parts(2_486_000, 0)
            // Standard Error: 10_694
            .saturating_add(Weight::from_parts(1_343_648, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_403_000 picoseconds.
        Weight::from_parts(2_476_000, 0)
            // Standard Error: 5_810
            .saturating_add(Weight::from_parts(722_259, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_453_000 picoseconds.
        Weight::from_parts(2_495_000, 0)
            // Standard Error: 9_595
            .saturating_add(Weight::from_parts(1_279_371, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_473_000 picoseconds.
        Weight::from_parts(2_509_000, 0)
            // Standard Error: 5_480
            .saturating_add(Weight::from_parts(785_689, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_498_000 picoseconds.
        Weight::from_parts(2_542_000, 0)
            // Standard Error: 9_741
            .saturating_add(Weight::from_parts(1_313_846, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_345_000 picoseconds.
        Weight::from_parts(2_472_000, 0)
            // Standard Error: 7_226
            .saturating_add(Weight::from_parts(776_464, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1090`
        //  Estimated: `6196`
        // Minimum execution time: 86_183_000 picoseconds.
        Weight::from_parts(90_212_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `859`
        //  Estimated: `4324`
        // Minimum execution time: 50_235_000 picoseconds.
        Weight::from_parts(53_994_000, 4324)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1010`
        //  Estimated: `6196`
        // Minimum execution time: 95_483_000 picoseconds.
        Weight::from_parts(101_093_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `695`
        //  Estimated: `4160`
        // Minimum execution time: 34_005_000 picoseconds.
        Weight::from_parts(35_198_000, 4160)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `939`
        //  Estimated: `4404`
        // Minimum execution time: 49_353_000 picoseconds.
        Weight::from_parts(51_555_000, 4404)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_379_000 picoseconds.
        Weight::from_parts(3_540_000, 3545)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1567`
        //  Estimated: `7507`
        // Minimum execution time: 132_888_000 picoseconds.
        Weight::from_parts(138_548_000, 7507)
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1294`
        //  Estimated: `7234`
        // Minimum execution time: 112_391_000 picoseconds.
        Weight::from_parts(114_706_000, 7234)
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
}
