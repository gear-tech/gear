// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-04, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `epyc-runners-node.hetzner`, CPU: `AMD EPYC 7502P 32-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_exit_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(1_944_000 as u64)
            // Standard Error: 287
            .saturating_add(Weight::from_ref_time(188_411 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(4_840_000 as u64)
            // Standard Error: 200
            .saturating_add(Weight::from_ref_time(497_329 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(58_798_000 as u64)
            // Standard Error: 4_129
            .saturating_add(Weight::from_ref_time(1_767_662 as u64).saturating_mul(c as u64))
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(79_970_000 as u64)
            .saturating_add(T::DbWeight::get().reads(7 as u64))
            .saturating_add(T::DbWeight::get().writes(5 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(67_004_000 as u64)
            // Standard Error: 17
            .saturating_add(Weight::from_ref_time(61_975 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(72_535_000 as u64)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(2_460 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(10_319_140_000 as u64)
            // Standard Error: 470
            .saturating_add(Weight::from_ref_time(38_095 as u64).saturating_mul(c as u64))
            // Standard Error: 28
            .saturating_add(Weight::from_ref_time(928 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(11 as u64))
            .saturating_add(T::DbWeight::get().writes(11 as u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(79_169_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(778 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(102_185_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(787 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(13 as u64))
            .saturating_add(T::DbWeight::get().writes(10 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        Weight::from_ref_time(223_597_000 as u64)
            // Standard Error: 900
            .saturating_add(Weight::from_ref_time(13_102 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(25 as u64))
            .saturating_add(T::DbWeight::get().writes(24 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(233_287_000 as u64)
            // Standard Error: 560
            .saturating_add(Weight::from_ref_time(11_066 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(25 as u64))
            .saturating_add(T::DbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument(c: u32, ) -> Weight {
        Weight::from_ref_time(44_028_000 as u64)
            // Standard Error: 21
            .saturating_add(Weight::from_ref_time(61_136 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(90_911_000 as u64)
            // Standard Error: 42_575
            .saturating_add(Weight::from_ref_time(234_746_326 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        Weight::from_ref_time(332_125_000 as u64)
            // Standard Error: 46_146
            .saturating_add(Weight::from_ref_time(219_078_816 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(108_266_000 as u64)
            // Standard Error: 316_167
            .saturating_add(Weight::from_ref_time(335_563_822 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(108_126_000 as u64)
            // Standard Error: 92_273
            .saturating_add(Weight::from_ref_time(326_822_817 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        Weight::from_ref_time(92_155_000 as u64)
            // Standard Error: 94_250
            .saturating_add(Weight::from_ref_time(223_577_536 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(91_934_000 as u64)
            // Standard Error: 97_059
            .saturating_add(Weight::from_ref_time(222_915_581 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(92_345_000 as u64)
            // Standard Error: 88_294
            .saturating_add(Weight::from_ref_time(222_845_984 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(92_846_000 as u64)
            // Standard Error: 88_785
            .saturating_add(Weight::from_ref_time(221_835_143 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(92_345_000 as u64)
            // Standard Error: 101_193
            .saturating_add(Weight::from_ref_time(223_033_876 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(91_934_000 as u64)
            // Standard Error: 102_211
            .saturating_add(Weight::from_ref_time(222_439_027 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(92_916_000 as u64)
            // Standard Error: 44_216
            .saturating_add(Weight::from_ref_time(203_947_926 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(92_655_000 as u64)
            // Standard Error: 37_546
            .saturating_add(Weight::from_ref_time(195_628_535 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(93_557_000 as u64)
            // Standard Error: 104_510
            .saturating_add(Weight::from_ref_time(235_016_989 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(326_934_000 as u64)
            // Standard Error: 9_590
            .saturating_add(Weight::from_ref_time(7_748_507 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(92_866_000 as u64)
            // Standard Error: 42_761
            .saturating_add(Weight::from_ref_time(194_632_542 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(92_685_000 as u64)
            // Standard Error: 47_949
            .saturating_add(Weight::from_ref_time(203_040_644 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_random(r: u32, ) -> Weight {
        Weight::from_ref_time(92_806_000 as u64)
            // Standard Error: 95_995
            .saturating_add(Weight::from_ref_time(310_112_850 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(92_956_000 as u64)
            // Standard Error: 95_297
            .saturating_add(Weight::from_ref_time(238_314_158 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(94_589_000 as u64)
            // Standard Error: 119_064
            .saturating_add(Weight::from_ref_time(496_206_959 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(609_831_000 as u64)
            // Standard Error: 98_085
            .saturating_add(Weight::from_ref_time(19_012_058 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(93_307_000 as u64)
            // Standard Error: 100_617
            .saturating_add(Weight::from_ref_time(332_316_915 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(454_970_000 as u64)
            // Standard Error: 5_583
            .saturating_add(Weight::from_ref_time(15_150_736 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(93_227_000 as u64)
            // Standard Error: 98_887
            .saturating_add(Weight::from_ref_time(246_752_579 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(93_226_000 as u64)
            // Standard Error: 81_841
            .saturating_add(Weight::from_ref_time(246_600_672 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(328_217_000 as u64)
            // Standard Error: 98_288
            .saturating_add(Weight::from_ref_time(18_958_806 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(93_076_000 as u64)
            // Standard Error: 109_961
            .saturating_add(Weight::from_ref_time(227_130_972 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(92_155_000 as u64)
            // Standard Error: 75_908
            .saturating_add(Weight::from_ref_time(239_957_815 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(319_169_000 as u64)
            // Standard Error: 16_352
            .saturating_add(Weight::from_ref_time(26_328_764 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_exit_code(r: u32, ) -> Weight {
        Weight::from_ref_time(93_226_000 as u64)
            // Standard Error: 102_780
            .saturating_add(Weight::from_ref_time(226_125_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(92_104_000 as u64)
            // Standard Error: 282_623
            .saturating_add(Weight::from_ref_time(39_654_599 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(91_894_000 as u64)
            // Standard Error: 255_726
            .saturating_add(Weight::from_ref_time(16_422_900 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(91_844_000 as u64)
            // Standard Error: 293_643
            .saturating_add(Weight::from_ref_time(16_431_500 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(92_766_000 as u64)
            // Standard Error: 317_700
            .saturating_add(Weight::from_ref_time(18_750_200 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        Weight::from_ref_time(92_665_000 as u64)
            // Standard Error: 260_649
            .saturating_add(Weight::from_ref_time(16_558_500 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(93_848_000 as u64)
            // Standard Error: 148_185
            .saturating_add(Weight::from_ref_time(280_534_884 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(109_068_000 as u64)
            // Standard Error: 96_403
            .saturating_add(Weight::from_ref_time(407_235_141 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 1024]`.
    /// The range of component `s` is `[0, 1024]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(16_105_255_000 as u64)
            // Standard Error: 148_741
            .saturating_add(Weight::from_ref_time(4_892_279 as u64).saturating_mul(p as u64))
            // Standard Error: 148_741
            .saturating_add(Weight::from_ref_time(221_051_975 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(257 as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(3_237_000 as u64)
            // Standard Error: 279
            .saturating_add(Weight::from_ref_time(8_396 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(6_192_000 as u64)
            // Standard Error: 14_883
            .saturating_add(Weight::from_ref_time(730_935 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(6_132_000 as u64)
            // Standard Error: 24_907
            .saturating_add(Weight::from_ref_time(1_278_306 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(3_327_000 as u64)
            // Standard Error: 266
            .saturating_add(Weight::from_ref_time(613_855 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_216_000 as u64)
            // Standard Error: 332
            .saturating_add(Weight::from_ref_time(626_359 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(3_156_000 as u64)
            // Standard Error: 360
            .saturating_add(Weight::from_ref_time(490_952 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_106_000 as u64)
            // Standard Error: 482
            .saturating_add(Weight::from_ref_time(537_666 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(3_126_000 as u64)
            // Standard Error: 906
            .saturating_add(Weight::from_ref_time(1_599_138 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(4_639_000 as u64)
            // Standard Error: 49
            .saturating_add(Weight::from_ref_time(8_318 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(3_297_000 as u64)
            // Standard Error: 635
            .saturating_add(Weight::from_ref_time(656_164 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(3_858_000 as u64)
            // Standard Error: 809
            .saturating_add(Weight::from_ref_time(1_497_925 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(5_621_000 as u64)
            // Standard Error: 167
            .saturating_add(Weight::from_ref_time(73_407 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(3_327_000 as u64)
            // Standard Error: 207
            .saturating_add(Weight::from_ref_time(33_320 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(3_297_000 as u64)
            // Standard Error: 361
            .saturating_add(Weight::from_ref_time(65_745 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(3_336_000 as u64)
            // Standard Error: 385
            .saturating_add(Weight::from_ref_time(64_586 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(15_030_000 as u64)
            // Standard Error: 463
            .saturating_add(Weight::from_ref_time(44_246 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(10_662_000 as u64)
            // Standard Error: 3_010
            .saturating_add(Weight::from_ref_time(199_493 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(6_212_000 as u64)
            // Standard Error: 460
            .saturating_add(Weight::from_ref_time(1_296_752 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_227_000 as u64)
            // Standard Error: 391
            .saturating_add(Weight::from_ref_time(772_013 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_246_000 as u64)
            // Standard Error: 330
            .saturating_add(Weight::from_ref_time(741_882 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(3_206_000 as u64)
            // Standard Error: 355
            .saturating_add(Weight::from_ref_time(57_153 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_166_000 as u64)
            // Standard Error: 485
            .saturating_add(Weight::from_ref_time(114_682 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_207_000 as u64)
            // Standard Error: 327
            .saturating_add(Weight::from_ref_time(42_151 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_206_000 as u64)
            // Standard Error: 217
            .saturating_add(Weight::from_ref_time(30_233 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(3_136_000 as u64)
            // Standard Error: 288
            .saturating_add(Weight::from_ref_time(32_678 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(3_196_000 as u64)
            // Standard Error: 465
            .saturating_add(Weight::from_ref_time(114_108 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(3_236_000 as u64)
            // Standard Error: 427
            .saturating_add(Weight::from_ref_time(112_992 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_276_000 as u64)
            // Standard Error: 434
            .saturating_add(Weight::from_ref_time(111_346 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_197_000 as u64)
            // Standard Error: 471
            .saturating_add(Weight::from_ref_time(116_132 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_196_000 as u64)
            // Standard Error: 461
            .saturating_add(Weight::from_ref_time(114_310 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_197_000 as u64)
            // Standard Error: 452
            .saturating_add(Weight::from_ref_time(113_883 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(3_257_000 as u64)
            // Standard Error: 429
            .saturating_add(Weight::from_ref_time(113_353 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_296_000 as u64)
            // Standard Error: 403
            .saturating_add(Weight::from_ref_time(112_326 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(3_207_000 as u64)
            // Standard Error: 482
            .saturating_add(Weight::from_ref_time(115_668 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_217_000 as u64)
            // Standard Error: 447
            .saturating_add(Weight::from_ref_time(114_320 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(3_136_000 as u64)
            // Standard Error: 422
            .saturating_add(Weight::from_ref_time(99_504 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(3_226_000 as u64)
            // Standard Error: 400
            .saturating_add(Weight::from_ref_time(96_499 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(3_296_000 as u64)
            // Standard Error: 399
            .saturating_add(Weight::from_ref_time(121_264 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_116_000 as u64)
            // Standard Error: 486
            .saturating_add(Weight::from_ref_time(462_097 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_206_000 as u64)
            // Standard Error: 371
            .saturating_add(Weight::from_ref_time(456_325 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(3_216_000 as u64)
            // Standard Error: 659
            .saturating_add(Weight::from_ref_time(829_713 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_157_000 as u64)
            // Standard Error: 467
            .saturating_add(Weight::from_ref_time(458_146 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(3_217_000 as u64)
            // Standard Error: 403
            .saturating_add(Weight::from_ref_time(98_198 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(3_237_000 as u64)
            // Standard Error: 425
            .saturating_add(Weight::from_ref_time(96_735 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(3_176_000 as u64)
            // Standard Error: 438
            .saturating_add(Weight::from_ref_time(98_694 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_216_000 as u64)
            // Standard Error: 368
            .saturating_add(Weight::from_ref_time(91_066 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_227_000 as u64)
            // Standard Error: 406
            .saturating_add(Weight::from_ref_time(92_394 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(3_227_000 as u64)
            // Standard Error: 371
            .saturating_add(Weight::from_ref_time(91_040 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_177_000 as u64)
            // Standard Error: 402
            .saturating_add(Weight::from_ref_time(92_751 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(3_137_000 as u64)
            // Standard Error: 425
            .saturating_add(Weight::from_ref_time(91_992 as u64).saturating_mul(r as u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(1_944_000 as u64)
            // Standard Error: 287
            .saturating_add(Weight::from_ref_time(188_411 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(4_840_000 as u64)
            // Standard Error: 200
            .saturating_add(Weight::from_ref_time(497_329 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(58_798_000 as u64)
            // Standard Error: 4_129
            .saturating_add(Weight::from_ref_time(1_767_662 as u64).saturating_mul(c as u64))
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(79_970_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(7 as u64))
            .saturating_add(RocksDbWeight::get().writes(5 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(67_004_000 as u64)
            // Standard Error: 17
            .saturating_add(Weight::from_ref_time(61_975 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().writes(3 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(72_535_000 as u64)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(2_460 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(10_319_140_000 as u64)
            // Standard Error: 470
            .saturating_add(Weight::from_ref_time(38_095 as u64).saturating_mul(c as u64))
            // Standard Error: 28
            .saturating_add(Weight::from_ref_time(928 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(11 as u64))
            .saturating_add(RocksDbWeight::get().writes(11 as u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(79_169_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(778 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(102_185_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(787 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(13 as u64))
            .saturating_add(RocksDbWeight::get().writes(10 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        Weight::from_ref_time(223_597_000 as u64)
            // Standard Error: 900
            .saturating_add(Weight::from_ref_time(13_102 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(25 as u64))
            .saturating_add(RocksDbWeight::get().writes(24 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(233_287_000 as u64)
            // Standard Error: 560
            .saturating_add(Weight::from_ref_time(11_066 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(25 as u64))
            .saturating_add(RocksDbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument(c: u32, ) -> Weight {
        Weight::from_ref_time(44_028_000 as u64)
            // Standard Error: 21
            .saturating_add(Weight::from_ref_time(61_136 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(90_911_000 as u64)
            // Standard Error: 42_575
            .saturating_add(Weight::from_ref_time(234_746_326 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        Weight::from_ref_time(332_125_000 as u64)
            // Standard Error: 46_146
            .saturating_add(Weight::from_ref_time(219_078_816 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(108_266_000 as u64)
            // Standard Error: 316_167
            .saturating_add(Weight::from_ref_time(335_563_822 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(108_126_000 as u64)
            // Standard Error: 92_273
            .saturating_add(Weight::from_ref_time(326_822_817 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        Weight::from_ref_time(92_155_000 as u64)
            // Standard Error: 94_250
            .saturating_add(Weight::from_ref_time(223_577_536 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(91_934_000 as u64)
            // Standard Error: 97_059
            .saturating_add(Weight::from_ref_time(222_915_581 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(92_345_000 as u64)
            // Standard Error: 88_294
            .saturating_add(Weight::from_ref_time(222_845_984 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(92_846_000 as u64)
            // Standard Error: 88_785
            .saturating_add(Weight::from_ref_time(221_835_143 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(92_345_000 as u64)
            // Standard Error: 101_193
            .saturating_add(Weight::from_ref_time(223_033_876 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(91_934_000 as u64)
            // Standard Error: 102_211
            .saturating_add(Weight::from_ref_time(222_439_027 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(92_916_000 as u64)
            // Standard Error: 44_216
            .saturating_add(Weight::from_ref_time(203_947_926 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(92_655_000 as u64)
            // Standard Error: 37_546
            .saturating_add(Weight::from_ref_time(195_628_535 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(93_557_000 as u64)
            // Standard Error: 104_510
            .saturating_add(Weight::from_ref_time(235_016_989 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(326_934_000 as u64)
            // Standard Error: 9_590
            .saturating_add(Weight::from_ref_time(7_748_507 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(92_866_000 as u64)
            // Standard Error: 42_761
            .saturating_add(Weight::from_ref_time(194_632_542 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(92_685_000 as u64)
            // Standard Error: 47_949
            .saturating_add(Weight::from_ref_time(203_040_644 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_random(r: u32, ) -> Weight {
        Weight::from_ref_time(92_806_000 as u64)
            // Standard Error: 95_995
            .saturating_add(Weight::from_ref_time(310_112_850 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(92_956_000 as u64)
            // Standard Error: 95_297
            .saturating_add(Weight::from_ref_time(238_314_158 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(94_589_000 as u64)
            // Standard Error: 119_064
            .saturating_add(Weight::from_ref_time(496_206_959 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(609_831_000 as u64)
            // Standard Error: 98_085
            .saturating_add(Weight::from_ref_time(19_012_058 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(93_307_000 as u64)
            // Standard Error: 100_617
            .saturating_add(Weight::from_ref_time(332_316_915 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(454_970_000 as u64)
            // Standard Error: 5_583
            .saturating_add(Weight::from_ref_time(15_150_736 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(93_227_000 as u64)
            // Standard Error: 98_887
            .saturating_add(Weight::from_ref_time(246_752_579 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(93_226_000 as u64)
            // Standard Error: 81_841
            .saturating_add(Weight::from_ref_time(246_600_672 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(328_217_000 as u64)
            // Standard Error: 98_288
            .saturating_add(Weight::from_ref_time(18_958_806 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(93_076_000 as u64)
            // Standard Error: 109_961
            .saturating_add(Weight::from_ref_time(227_130_972 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(92_155_000 as u64)
            // Standard Error: 75_908
            .saturating_add(Weight::from_ref_time(239_957_815 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(319_169_000 as u64)
            // Standard Error: 16_352
            .saturating_add(Weight::from_ref_time(26_328_764 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_exit_code(r: u32, ) -> Weight {
        Weight::from_ref_time(93_226_000 as u64)
            // Standard Error: 102_780
            .saturating_add(Weight::from_ref_time(226_125_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(92_104_000 as u64)
            // Standard Error: 282_623
            .saturating_add(Weight::from_ref_time(39_654_599 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(91_894_000 as u64)
            // Standard Error: 255_726
            .saturating_add(Weight::from_ref_time(16_422_900 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(91_844_000 as u64)
            // Standard Error: 293_643
            .saturating_add(Weight::from_ref_time(16_431_500 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(92_766_000 as u64)
            // Standard Error: 317_700
            .saturating_add(Weight::from_ref_time(18_750_200 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        Weight::from_ref_time(92_665_000 as u64)
            // Standard Error: 260_649
            .saturating_add(Weight::from_ref_time(16_558_500 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(93_848_000 as u64)
            // Standard Error: 148_185
            .saturating_add(Weight::from_ref_time(280_534_884 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(109_068_000 as u64)
            // Standard Error: 96_403
            .saturating_add(Weight::from_ref_time(407_235_141 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 1024]`.
    /// The range of component `s` is `[0, 1024]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(16_105_255_000 as u64)
            // Standard Error: 148_741
            .saturating_add(Weight::from_ref_time(4_892_279 as u64).saturating_mul(p as u64))
            // Standard Error: 148_741
            .saturating_add(Weight::from_ref_time(221_051_975 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(257 as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(3_237_000 as u64)
            // Standard Error: 279
            .saturating_add(Weight::from_ref_time(8_396 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(6_192_000 as u64)
            // Standard Error: 14_883
            .saturating_add(Weight::from_ref_time(730_935 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(6_132_000 as u64)
            // Standard Error: 24_907
            .saturating_add(Weight::from_ref_time(1_278_306 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(3_327_000 as u64)
            // Standard Error: 266
            .saturating_add(Weight::from_ref_time(613_855 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_216_000 as u64)
            // Standard Error: 332
            .saturating_add(Weight::from_ref_time(626_359 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(3_156_000 as u64)
            // Standard Error: 360
            .saturating_add(Weight::from_ref_time(490_952 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_106_000 as u64)
            // Standard Error: 482
            .saturating_add(Weight::from_ref_time(537_666 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(3_126_000 as u64)
            // Standard Error: 906
            .saturating_add(Weight::from_ref_time(1_599_138 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(4_639_000 as u64)
            // Standard Error: 49
            .saturating_add(Weight::from_ref_time(8_318 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(3_297_000 as u64)
            // Standard Error: 635
            .saturating_add(Weight::from_ref_time(656_164 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(3_858_000 as u64)
            // Standard Error: 809
            .saturating_add(Weight::from_ref_time(1_497_925 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(5_621_000 as u64)
            // Standard Error: 167
            .saturating_add(Weight::from_ref_time(73_407 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(3_327_000 as u64)
            // Standard Error: 207
            .saturating_add(Weight::from_ref_time(33_320 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(3_297_000 as u64)
            // Standard Error: 361
            .saturating_add(Weight::from_ref_time(65_745 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(3_336_000 as u64)
            // Standard Error: 385
            .saturating_add(Weight::from_ref_time(64_586 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(15_030_000 as u64)
            // Standard Error: 463
            .saturating_add(Weight::from_ref_time(44_246 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(10_662_000 as u64)
            // Standard Error: 3_010
            .saturating_add(Weight::from_ref_time(199_493 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(6_212_000 as u64)
            // Standard Error: 460
            .saturating_add(Weight::from_ref_time(1_296_752 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_227_000 as u64)
            // Standard Error: 391
            .saturating_add(Weight::from_ref_time(772_013 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_246_000 as u64)
            // Standard Error: 330
            .saturating_add(Weight::from_ref_time(741_882 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(3_206_000 as u64)
            // Standard Error: 355
            .saturating_add(Weight::from_ref_time(57_153 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_166_000 as u64)
            // Standard Error: 485
            .saturating_add(Weight::from_ref_time(114_682 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_207_000 as u64)
            // Standard Error: 327
            .saturating_add(Weight::from_ref_time(42_151 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_206_000 as u64)
            // Standard Error: 217
            .saturating_add(Weight::from_ref_time(30_233 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(3_136_000 as u64)
            // Standard Error: 288
            .saturating_add(Weight::from_ref_time(32_678 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(3_196_000 as u64)
            // Standard Error: 465
            .saturating_add(Weight::from_ref_time(114_108 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(3_236_000 as u64)
            // Standard Error: 427
            .saturating_add(Weight::from_ref_time(112_992 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_276_000 as u64)
            // Standard Error: 434
            .saturating_add(Weight::from_ref_time(111_346 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_197_000 as u64)
            // Standard Error: 471
            .saturating_add(Weight::from_ref_time(116_132 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_196_000 as u64)
            // Standard Error: 461
            .saturating_add(Weight::from_ref_time(114_310 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_197_000 as u64)
            // Standard Error: 452
            .saturating_add(Weight::from_ref_time(113_883 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(3_257_000 as u64)
            // Standard Error: 429
            .saturating_add(Weight::from_ref_time(113_353 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_296_000 as u64)
            // Standard Error: 403
            .saturating_add(Weight::from_ref_time(112_326 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(3_207_000 as u64)
            // Standard Error: 482
            .saturating_add(Weight::from_ref_time(115_668 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_217_000 as u64)
            // Standard Error: 447
            .saturating_add(Weight::from_ref_time(114_320 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(3_136_000 as u64)
            // Standard Error: 422
            .saturating_add(Weight::from_ref_time(99_504 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(3_226_000 as u64)
            // Standard Error: 400
            .saturating_add(Weight::from_ref_time(96_499 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(3_296_000 as u64)
            // Standard Error: 399
            .saturating_add(Weight::from_ref_time(121_264 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_116_000 as u64)
            // Standard Error: 486
            .saturating_add(Weight::from_ref_time(462_097 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_206_000 as u64)
            // Standard Error: 371
            .saturating_add(Weight::from_ref_time(456_325 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(3_216_000 as u64)
            // Standard Error: 659
            .saturating_add(Weight::from_ref_time(829_713 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_157_000 as u64)
            // Standard Error: 467
            .saturating_add(Weight::from_ref_time(458_146 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(3_217_000 as u64)
            // Standard Error: 403
            .saturating_add(Weight::from_ref_time(98_198 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(3_237_000 as u64)
            // Standard Error: 425
            .saturating_add(Weight::from_ref_time(96_735 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(3_176_000 as u64)
            // Standard Error: 438
            .saturating_add(Weight::from_ref_time(98_694 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_216_000 as u64)
            // Standard Error: 368
            .saturating_add(Weight::from_ref_time(91_066 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_227_000 as u64)
            // Standard Error: 406
            .saturating_add(Weight::from_ref_time(92_394 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(3_227_000 as u64)
            // Standard Error: 371
            .saturating_add(Weight::from_ref_time(91_040 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_177_000 as u64)
            // Standard Error: 402
            .saturating_add(Weight::from_ref_time(92_751 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(3_137_000 as u64)
            // Standard Error: 425
            .saturating_add(Weight::from_ref_time(91_992 as u64).saturating_mul(r as u64))
    }
}
