// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-12, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 908_000 picoseconds.
        Weight::from_parts(972_000, 0)
            // Standard Error: 966
            .saturating_add(Weight::from_parts(249_953, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_758_000 picoseconds.
        Weight::from_parts(2_845_000, 3506)
            // Standard Error: 1_140
            .saturating_add(Weight::from_parts(687_029, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 59_457_000 picoseconds.
        Weight::from_parts(13_538_813, 0)
            // Standard Error: 31_657
            .saturating_add(Weight::from_parts(2_869_244, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1268`
        //  Estimated: `50969`
        // Minimum execution time: 106_620_000 picoseconds.
        Weight::from_parts(109_269_000, 50969)
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `923`
        //  Estimated: `21372`
        // Minimum execution time: 55_227_000 picoseconds.
        Weight::from_parts(56_670_000, 21372)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `534`
        //  Estimated: `17070`
        // Minimum execution time: 29_347_000 picoseconds.
        Weight::from_parts(30_558_000, 17070)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_024_000 picoseconds.
        Weight::from_parts(14_793_319, 7640)
            // Standard Error: 63_405
            .saturating_add(Weight::from_parts(14_025_490, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1421 + c * (16389 ±0)`
        //  Estimated: `41890 + c * (131112 ±0)`
        // Minimum execution time: 68_714_000 picoseconds.
        Weight::from_parts(70_133_000, 41890)
            // Standard Error: 167_369
            .saturating_add(Weight::from_parts(55_669_553, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 75_342_000 picoseconds.
        Weight::from_parts(82_248_883, 4990)
            // Standard Error: 47_826
            .saturating_add(Weight::from_parts(60_515_202, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1007`
        //  Estimated: `49456`
        // Minimum execution time: 92_220_000 picoseconds.
        Weight::from_parts(110_276_845, 49456)
            // Standard Error: 4
            .saturating_add(Weight::from_parts(2_617, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `417`
        //  Estimated: `43800`
        // Minimum execution time: 11_038_774_000 picoseconds.
        Weight::from_parts(280_016_598, 43800)
            // Standard Error: 172_063
            .saturating_add(Weight::from_parts(61_112_142, 0).saturating_mul(c.into()))
            // Standard Error: 10
            .saturating_add(Weight::from_parts(2_543, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `530`
        //  Estimated: `31259`
        // Minimum execution time: 71_706_000 picoseconds.
        Weight::from_parts(49_030_464, 31259)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_034, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1267`
        //  Estimated: `53499`
        // Minimum execution time: 120_711_000 picoseconds.
        Weight::from_parts(100_007_818, 53499)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_057, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `939`
        //  Estimated: `83673`
        // Minimum execution time: 343_767_000 picoseconds.
        Weight::from_parts(360_025_916, 83673)
            .saturating_add(T::DbWeight::get().reads(29_u64))
            .saturating_add(T::DbWeight::get().writes(24_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `939`
        //  Estimated: `83673`
        // Minimum execution time: 360_350_000 picoseconds.
        Weight::from_parts(375_474_995, 83673)
            // Standard Error: 1_477
            .saturating_add(Weight::from_parts(2_900, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(29_u64))
            .saturating_add(T::DbWeight::get().writes(24_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 57_166_000 picoseconds.
        Weight::from_parts(57_972_000, 3899)
            // Standard Error: 37_026
            .saturating_add(Weight::from_parts(58_912_749, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_183_000 picoseconds.
        Weight::from_parts(95_929_000, 0)
            // Standard Error: 4_076_735
            .saturating_add(Weight::from_parts(746_670_064, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 493_619_000 picoseconds.
        Weight::from_parts(454_132_251, 0)
            // Standard Error: 10_225
            .saturating_add(Weight::from_parts(31_400_502, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 215_932_000 picoseconds.
        Weight::from_parts(213_330_235, 0)
            // Standard Error: 300_170
            .saturating_add(Weight::from_parts(64_603_373, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_507_000 picoseconds.
        Weight::from_parts(105_211_025, 0)
            // Standard Error: 3_938
            .saturating_add(Weight::from_parts(2_525_620, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 148_162_000 picoseconds.
        Weight::from_parts(219_978_414, 0)
            // Standard Error: 26_170
            .saturating_add(Weight::from_parts(2_268_080, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_056_000 picoseconds.
        Weight::from_parts(121_335_781, 0)
            // Standard Error: 396_256
            .saturating_add(Weight::from_parts(106_621_603, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_928_000 picoseconds.
        Weight::from_parts(80_595_448, 0)
            // Standard Error: 348_364
            .saturating_add(Weight::from_parts(95_116_600, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_022_000 picoseconds.
        Weight::from_parts(79_290_858, 0)
            // Standard Error: 334_492
            .saturating_add(Weight::from_parts(96_132_458, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_761_000 picoseconds.
        Weight::from_parts(79_449_750, 0)
            // Standard Error: 354_083
            .saturating_add(Weight::from_parts(96_003_782, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_218_000 picoseconds.
        Weight::from_parts(75_879_101, 0)
            // Standard Error: 339_587
            .saturating_add(Weight::from_parts(96_665_703, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_187_000 picoseconds.
        Weight::from_parts(82_622_750, 0)
            // Standard Error: 360_859
            .saturating_add(Weight::from_parts(96_079_984, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_369_000 picoseconds.
        Weight::from_parts(82_406_097, 0)
            // Standard Error: 352_820
            .saturating_add(Weight::from_parts(94_380_275, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_918_000 picoseconds.
        Weight::from_parts(86_952_141, 0)
            // Standard Error: 347_587
            .saturating_add(Weight::from_parts(89_887_662, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 713_676_000 picoseconds.
        Weight::from_parts(775_302_729, 0)
            // Standard Error: 422_379
            .saturating_add(Weight::from_parts(153_120_872, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 856_130_000 picoseconds.
        Weight::from_parts(860_671_000, 0)
            // Standard Error: 59_116
            .saturating_add(Weight::from_parts(13_659_812, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_685_000 picoseconds.
        Weight::from_parts(92_464_581, 0)
            // Standard Error: 358_798
            .saturating_add(Weight::from_parts(88_766_129, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_154_000 picoseconds.
        Weight::from_parts(86_759_862, 0)
            // Standard Error: 321_274
            .saturating_add(Weight::from_parts(93_509_171, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_358_000 picoseconds.
        Weight::from_parts(105_352_001, 0)
            // Standard Error: 376_299
            .saturating_add(Weight::from_parts(178_671_604, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_348_000 picoseconds.
        Weight::from_parts(99_684_000, 0)
            // Standard Error: 4_398_205
            .saturating_add(Weight::from_parts(854_061_031, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_313_000 picoseconds.
        Weight::from_parts(157_421_003, 0)
            // Standard Error: 409_562
            .saturating_add(Weight::from_parts(263_507_177, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 353_639_000 picoseconds.
        Weight::from_parts(358_489_000, 0)
            // Standard Error: 65_052
            .saturating_add(Weight::from_parts(21_325_343, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_461_000 picoseconds.
        Weight::from_parts(162_429_951, 0)
            // Standard Error: 384_056
            .saturating_add(Weight::from_parts(269_129_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 358_729_000 picoseconds.
        Weight::from_parts(364_229_000, 0)
            // Standard Error: 69_021
            .saturating_add(Weight::from_parts(21_355_826, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 737_600_000 picoseconds.
        Weight::from_parts(811_289_219, 0)
            // Standard Error: 390_319
            .saturating_add(Weight::from_parts(291_516_259, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 745_799_000 picoseconds.
        Weight::from_parts(838_325_341, 0)
            // Standard Error: 425_679
            .saturating_add(Weight::from_parts(289_417_865, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_450_000 picoseconds.
        Weight::from_parts(76_742_695, 0)
            // Standard Error: 312_605
            .saturating_add(Weight::from_parts(102_866_804, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_037_378_000 picoseconds.
        Weight::from_parts(2_163_431_082, 0)
            // Standard Error: 285_461
            .saturating_add(Weight::from_parts(171_187_111, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 334_552_000 picoseconds.
        Weight::from_parts(342_250_000, 0)
            // Standard Error: 51_020
            .saturating_add(Weight::from_parts(31_516_837, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_016_809_000 picoseconds.
        Weight::from_parts(2_144_708_329, 0)
            // Standard Error: 303_762
            .saturating_add(Weight::from_parts(225_164_187, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_025_968_000 picoseconds.
        Weight::from_parts(2_149_551_853, 0)
            // Standard Error: 290_078
            .saturating_add(Weight::from_parts(228_776_350, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 258_599_000 picoseconds.
        Weight::from_parts(305_834_443, 0)
            // Standard Error: 345_074
            .saturating_add(Weight::from_parts(286_260_016, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 542_796_000 picoseconds.
        Weight::from_parts(549_496_000, 0)
            // Standard Error: 55_255
            .saturating_add(Weight::from_parts(21_621_747, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_158_155_000 picoseconds.
        Weight::from_parts(2_294_886_430, 0)
            // Standard Error: 776_616
            .saturating_add(Weight::from_parts(258_941_553, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_501_000 picoseconds.
        Weight::from_parts(106_818_497, 0)
            // Standard Error: 554_612
            .saturating_add(Weight::from_parts(18_799_102, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 119_019_000 picoseconds.
        Weight::from_parts(103_862_574, 0)
            // Standard Error: 1_077
            .saturating_add(Weight::from_parts(437_133, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_957_000 picoseconds.
        Weight::from_parts(104_802_822, 0)
            // Standard Error: 435_927
            .saturating_add(Weight::from_parts(18_463_377, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 119_606_000 picoseconds.
        Weight::from_parts(98_244_319, 0)
            // Standard Error: 1_327
            .saturating_add(Weight::from_parts(445_779, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_403_000 picoseconds.
        Weight::from_parts(105_606_124, 0)
            // Standard Error: 578_463
            .saturating_add(Weight::from_parts(20_276_475, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_694_000 picoseconds.
        Weight::from_parts(103_114_424, 0)
            // Standard Error: 433_737
            .saturating_add(Weight::from_parts(20_410_775, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_731_000 picoseconds.
        Weight::from_parts(141_589_708, 0)
            // Standard Error: 433_808
            .saturating_add(Weight::from_parts(158_234_988, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 111_023_000 picoseconds.
        Weight::from_parts(113_687_000, 0)
            // Standard Error: 2_347
            .saturating_add(Weight::from_parts(649_619, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 708_924_000 picoseconds.
        Weight::from_parts(729_943_385, 0)
            // Standard Error: 1_759_819
            .saturating_add(Weight::from_parts(15_318_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 708_794_000 picoseconds.
        Weight::from_parts(726_131_204, 0)
            // Standard Error: 1_712_659
            .saturating_add(Weight::from_parts(20_297_595, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_878_000 picoseconds.
        Weight::from_parts(111_032_487, 0)
            // Standard Error: 440_329
            .saturating_add(Weight::from_parts(7_302_512, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 113_140_000 picoseconds.
        Weight::from_parts(108_897_909, 0)
            // Standard Error: 1_015
            .saturating_add(Weight::from_parts(431_621, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_290_000 picoseconds.
        Weight::from_parts(111_960_859, 0)
            // Standard Error: 424_630
            .saturating_add(Weight::from_parts(9_494_140, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 115_874_000 picoseconds.
        Weight::from_parts(102_943_231, 0)
            // Standard Error: 961
            .saturating_add(Weight::from_parts(428_966, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_846_000 picoseconds.
        Weight::from_parts(88_021_612, 0)
            // Standard Error: 280_344
            .saturating_add(Weight::from_parts(92_211_817, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_018_000 picoseconds.
        Weight::from_parts(100_345_503, 0)
            // Standard Error: 16_521
            .saturating_add(Weight::from_parts(2_852_293, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_600_000 picoseconds.
        Weight::from_parts(99_974_526, 0)
            // Standard Error: 22_071
            .saturating_add(Weight::from_parts(2_948_468, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 715_596_000 picoseconds.
        Weight::from_parts(751_004_953, 0)
            // Standard Error: 311_345
            .saturating_add(Weight::from_parts(117_243_974, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 737_452_000 picoseconds.
        Weight::from_parts(751_342_820, 0)
            // Standard Error: 945
            .saturating_add(Weight::from_parts(150_405, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_633_412_000 picoseconds.
        Weight::from_parts(2_771_606_929, 0)
            // Standard Error: 394_622
            .saturating_add(Weight::from_parts(137_913_288, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_765_016_000 picoseconds.
        Weight::from_parts(2_749_666_792, 0)
            // Standard Error: 8_033
            .saturating_add(Weight::from_parts(13_644_486, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_004_000 picoseconds.
        Weight::from_parts(126_383_817, 0)
            // Standard Error: 426_716
            .saturating_add(Weight::from_parts(111_849_766, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 158_207_000 picoseconds.
        Weight::from_parts(161_551_000, 0)
            // Standard Error: 56_432
            .saturating_add(Weight::from_parts(25_673_374, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_114_000 picoseconds.
        Weight::from_parts(92_504_538, 0)
            // Standard Error: 335_980
            .saturating_add(Weight::from_parts(86_674_305, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_853_000 picoseconds.
        Weight::from_parts(98_827_432, 0)
            // Standard Error: 412_159
            .saturating_add(Weight::from_parts(22_278_667, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_791_000 picoseconds.
        Weight::from_parts(97_194_093, 0)
            // Standard Error: 387_768
            .saturating_add(Weight::from_parts(16_287_706, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_795_000 picoseconds.
        Weight::from_parts(99_390_067, 0)
            // Standard Error: 417_083
            .saturating_add(Weight::from_parts(14_863_132, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_549_000 picoseconds.
        Weight::from_parts(98_220_632, 0)
            // Standard Error: 397_388
            .saturating_add(Weight::from_parts(11_999_867, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_776_000 picoseconds.
        Weight::from_parts(99_700_724, 0)
            // Standard Error: 487_219
            .saturating_add(Weight::from_parts(10_883_175, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 150_436_000 picoseconds.
        Weight::from_parts(215_750_417, 0)
            // Standard Error: 289_193
            .saturating_add(Weight::from_parts(167_000_563, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_556_000 picoseconds.
        Weight::from_parts(163_260_547, 0)
            // Standard Error: 373_378
            .saturating_add(Weight::from_parts(352_023_516, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_515_740_000 picoseconds.
        Weight::from_parts(44_675_263_000, 0)
            // Standard Error: 266_478
            .saturating_add(Weight::from_parts(6_975_264, 0).saturating_mul(p.into()))
            // Standard Error: 266_465
            .saturating_add(Weight::from_parts(179_054_197, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_313_000 picoseconds.
        Weight::from_parts(167_699_930, 0)
            // Standard Error: 354_835
            .saturating_add(Weight::from_parts(361_149_011, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 46_249_167_000 picoseconds.
        Weight::from_parts(46_316_594_000, 0)
            // Standard Error: 268_696
            .saturating_add(Weight::from_parts(7_439_470, 0).saturating_mul(p.into()))
            // Standard Error: 268_683
            .saturating_add(Weight::from_parts(177_436_220, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_387_000 picoseconds.
        Weight::from_parts(111_737_855, 0)
            // Standard Error: 27_712
            .saturating_add(Weight::from_parts(2_185_533, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 94_359_000 picoseconds.
        Weight::from_parts(124_186_913, 1131)
            // Standard Error: 14_802
            .saturating_add(Weight::from_parts(16_282_849, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 91_923_000 picoseconds.
        Weight::from_parts(95_405_000, 1131)
            // Standard Error: 57_283
            .saturating_add(Weight::from_parts(41_254_554, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_363_984_000 picoseconds.
        Weight::from_parts(8_166_603_633, 5069931)
            // Standard Error: 115_591
            .saturating_add(Weight::from_parts(40_770_024, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 96_373_000 picoseconds.
        Weight::from_parts(98_109_000, 1939)
            // Standard Error: 109_505
            .saturating_add(Weight::from_parts(56_481_346, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 97_762_000 picoseconds.
        Weight::from_parts(103_948_539, 1131)
            // Standard Error: 83_150
            .saturating_add(Weight::from_parts(43_906_290, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 752_054_000 picoseconds.
        Weight::from_parts(803_791_791, 1496)
            // Standard Error: 314_653
            .saturating_add(Weight::from_parts(49_839_020, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_354_349_000 picoseconds.
        Weight::from_parts(1_385_618_774, 317931)
            // Standard Error: 280_672
            .saturating_add(Weight::from_parts(46_743_396, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_422_000 picoseconds.
        Weight::from_parts(648_434, 0)
            // Standard Error: 102_253
            .saturating_add(Weight::from_parts(100_758_904, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_455_882_000 picoseconds.
        Weight::from_parts(4_333_797_078, 0)
            // Standard Error: 61_739
            .saturating_add(Weight::from_parts(4_362_598, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_425_200_000 picoseconds.
        Weight::from_parts(4_301_532_130, 0)
            // Standard Error: 65_348
            .saturating_add(Weight::from_parts(4_563_497, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_957_367_000 picoseconds.
        Weight::from_parts(11_592_672_324, 0)
            // Standard Error: 205_740
            .saturating_add(Weight::from_parts(10_661_449, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_202_119_000 picoseconds.
        Weight::from_parts(12_549_612_221, 0)
            // Standard Error: 181_803
            .saturating_add(Weight::from_parts(5_990_871, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_424_000 picoseconds.
        Weight::from_parts(2_506_000, 0)
            // Standard Error: 14_888
            .saturating_add(Weight::from_parts(4_213_531, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_354_000 picoseconds.
        Weight::from_parts(1_303_475, 0)
            // Standard Error: 21_955
            .saturating_add(Weight::from_parts(3_513_069, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_447_000 picoseconds.
        Weight::from_parts(3_530_665, 0)
            // Standard Error: 1_345
            .saturating_add(Weight::from_parts(1_574_938, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_450_000 picoseconds.
        Weight::from_parts(2_528_000, 0)
            // Standard Error: 8_648
            .saturating_add(Weight::from_parts(2_914_709, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_380_000 picoseconds.
        Weight::from_parts(2_452_000, 0)
            // Standard Error: 8_157
            .saturating_add(Weight::from_parts(5_285_508, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_104_000 picoseconds.
        Weight::from_parts(2_697_837, 0)
            // Standard Error: 2_607
            .saturating_add(Weight::from_parts(188_774, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_425_000 picoseconds.
        Weight::from_parts(5_995_914, 0)
            // Standard Error: 8_618
            .saturating_add(Weight::from_parts(2_579_351, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_579_351 -
            2_456_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_476_000 picoseconds.
        Weight::from_parts(4_951_557, 0)
            // Standard Error: 13_157
            .saturating_add(Weight::from_parts(2_456_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_796_000 picoseconds.
        Weight::from_parts(25_419_569, 0)
            // Standard Error: 35_738
            .saturating_add(Weight::from_parts(9_684_435, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_531_000 picoseconds.
        Weight::from_parts(622_701, 0)
            // Standard Error: 8_106
            .saturating_add(Weight::from_parts(1_256_409, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_428_000 picoseconds.
        Weight::from_parts(5_813_641, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_792_000 picoseconds.
        Weight::from_parts(5_468_312, 0)
            // Standard Error: 3_758
            .saturating_add(Weight::from_parts(411_134, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_909_000 picoseconds.
        Weight::from_parts(5_092_095, 0)
            // Standard Error: 4_814
            .saturating_add(Weight::from_parts(957_706, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_849_000 picoseconds.
        Weight::from_parts(3_552_754, 0)
            // Standard Error: 8_892
            .saturating_add(Weight::from_parts(1_072_245, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_539_000 picoseconds.
        Weight::from_parts(2_989_666, 0)
            // Standard Error: 7_090
            .saturating_add(Weight::from_parts(805_515, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_577_000 picoseconds.
        Weight::from_parts(388_230, 0)
            // Standard Error: 11_530
            .saturating_add(Weight::from_parts(1_471_761, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_394_000 picoseconds.
        Weight::from_parts(3_210_670, 0)
            // Standard Error: 13_939
            .saturating_add(Weight::from_parts(7_057_904, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_339_000 picoseconds.
        Weight::from_parts(2_448_000, 0)
            // Standard Error: 6_775
            .saturating_add(Weight::from_parts(3_386_014, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_500_000 picoseconds.
        Weight::from_parts(2_559_000, 0)
            // Standard Error: 8_696
            .saturating_add(Weight::from_parts(3_105_136, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_403_000 picoseconds.
        Weight::from_parts(2_540_000, 0)
            // Standard Error: 7_429
            .saturating_add(Weight::from_parts(3_099_802, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_372_000 picoseconds.
        Weight::from_parts(2_490_000, 0)
            // Standard Error: 5_652
            .saturating_add(Weight::from_parts(2_669_087, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_398_000 picoseconds.
        Weight::from_parts(2_508_000, 0)
            // Standard Error: 4_986
            .saturating_add(Weight::from_parts(596_205, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_430_000 picoseconds.
        Weight::from_parts(1_123_264, 0)
            // Standard Error: 5_142
            .saturating_add(Weight::from_parts(455_064, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_437_000 picoseconds.
        Weight::from_parts(2_515_000, 0)
            // Standard Error: 11_574
            .saturating_add(Weight::from_parts(1_886_065, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_467_000 picoseconds.
        Weight::from_parts(2_549_000, 0)
            // Standard Error: 7_396
            .saturating_add(Weight::from_parts(1_265_851, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_295_000 picoseconds.
        Weight::from_parts(1_048_475, 0)
            // Standard Error: 5_640
            .saturating_add(Weight::from_parts(424_436, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_433_000 picoseconds.
        Weight::from_parts(1_549_696, 0)
            // Standard Error: 4_664
            .saturating_add(Weight::from_parts(385_934, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(573_336, 0)
            // Standard Error: 5_982
            .saturating_add(Weight::from_parts(581_243, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_432_000 picoseconds.
        Weight::from_parts(2_545_000, 0)
            // Standard Error: 4_142
            .saturating_add(Weight::from_parts(526_620, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_369_000 picoseconds.
        Weight::from_parts(2_480_000, 0)
            // Standard Error: 4_386
            .saturating_add(Weight::from_parts(472_447, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_380_000 picoseconds.
        Weight::from_parts(1_839_294, 0)
            // Standard Error: 3_619
            .saturating_add(Weight::from_parts(351_766, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_329_000 picoseconds.
        Weight::from_parts(2_889_629, 0)
            // Standard Error: 1_788
            .saturating_add(Weight::from_parts(171_297, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_397_000 picoseconds.
        Weight::from_parts(2_868_920, 0)
            // Standard Error: 1_902
            .saturating_add(Weight::from_parts(161_872, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_323_000 picoseconds.
        Weight::from_parts(2_447_000, 0)
            // Standard Error: 12_114
            .saturating_add(Weight::from_parts(1_880_989, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_429_000 picoseconds.
        Weight::from_parts(2_492_000, 0)
            // Standard Error: 9_873
            .saturating_add(Weight::from_parts(1_201_676, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_544_000 picoseconds.
        Weight::from_parts(2_636_000, 0)
            // Standard Error: 10_995
            .saturating_add(Weight::from_parts(1_933_738, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_418_000 picoseconds.
        Weight::from_parts(2_443_000, 0)
            // Standard Error: 9_233
            .saturating_add(Weight::from_parts(1_208_289, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_495_000 picoseconds.
        Weight::from_parts(2_536_000, 0)
            // Standard Error: 9_397
            .saturating_add(Weight::from_parts(1_927_476, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_333_000 picoseconds.
        Weight::from_parts(2_461_000, 0)
            // Standard Error: 8_246
            .saturating_add(Weight::from_parts(1_243_725, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_356_000 picoseconds.
        Weight::from_parts(2_499_000, 0)
            // Standard Error: 10_789
            .saturating_add(Weight::from_parts(1_894_681, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_436_000 picoseconds.
        Weight::from_parts(2_487_000, 0)
            // Standard Error: 9_012
            .saturating_add(Weight::from_parts(1_222_864, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_373_000 picoseconds.
        Weight::from_parts(2_471_000, 0)
            // Standard Error: 9_536
            .saturating_add(Weight::from_parts(1_955_547, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_374_000 picoseconds.
        Weight::from_parts(2_447_000, 0)
            // Standard Error: 7_198
            .saturating_add(Weight::from_parts(1_206_456, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_371_000 picoseconds.
        Weight::from_parts(2_451_000, 0)
            // Standard Error: 13_630
            .saturating_add(Weight::from_parts(1_910_087, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_366_000 picoseconds.
        Weight::from_parts(2_461_000, 0)
            // Standard Error: 9_112
            .saturating_add(Weight::from_parts(1_243_910, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_332_000 picoseconds.
        Weight::from_parts(2_495_000, 0)
            // Standard Error: 10_908
            .saturating_add(Weight::from_parts(1_916_637, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_401_000 picoseconds.
        Weight::from_parts(2_492_000, 0)
            // Standard Error: 8_228
            .saturating_add(Weight::from_parts(1_171_406, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_446_000 picoseconds.
        Weight::from_parts(2_518_000, 0)
            // Standard Error: 12_640
            .saturating_add(Weight::from_parts(1_914_220, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_335_000 picoseconds.
        Weight::from_parts(2_420_000, 0)
            // Standard Error: 7_992
            .saturating_add(Weight::from_parts(1_192_242, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_386_000 picoseconds.
        Weight::from_parts(2_508_000, 0)
            // Standard Error: 12_858
            .saturating_add(Weight::from_parts(1_904_642, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_430_000 picoseconds.
        Weight::from_parts(2_533_000, 0)
            // Standard Error: 9_495
            .saturating_add(Weight::from_parts(1_230_079, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_388_000 picoseconds.
        Weight::from_parts(2_473_000, 0)
            // Standard Error: 11_677
            .saturating_add(Weight::from_parts(1_899_858, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_472_000 picoseconds.
        Weight::from_parts(2_576_000, 0)
            // Standard Error: 8_212
            .saturating_add(Weight::from_parts(1_199_170, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_444_000 picoseconds.
        Weight::from_parts(2_568_000, 0)
            // Standard Error: 8_244
            .saturating_add(Weight::from_parts(1_289_967, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_363_000 picoseconds.
        Weight::from_parts(2_497_000, 0)
            // Standard Error: 5_502
            .saturating_add(Weight::from_parts(642_134, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_483_000 picoseconds.
        Weight::from_parts(2_521_000, 0)
            // Standard Error: 9_174
            .saturating_add(Weight::from_parts(1_305_847, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_435_000 picoseconds.
        Weight::from_parts(2_552_000, 0)
            // Standard Error: 5_130
            .saturating_add(Weight::from_parts(672_234, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_406_000 picoseconds.
        Weight::from_parts(2_472_000, 0)
            // Standard Error: 11_096
            .saturating_add(Weight::from_parts(1_864_601, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_502_000 picoseconds.
        Weight::from_parts(2_553_000, 0)
            // Standard Error: 9_938
            .saturating_add(Weight::from_parts(1_272_330, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_341_000 picoseconds.
        Weight::from_parts(7_673_300, 0)
            // Standard Error: 21_265
            .saturating_add(Weight::from_parts(2_273_799, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_409_000 picoseconds.
        Weight::from_parts(4_870_844, 0)
            // Standard Error: 12_907
            .saturating_add(Weight::from_parts(2_204_839, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_426_000 picoseconds.
        Weight::from_parts(3_562_469, 0)
            // Standard Error: 11_765
            .saturating_add(Weight::from_parts(2_749_428, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_282_000 picoseconds.
        Weight::from_parts(956_471, 0)
            // Standard Error: 16_756
            .saturating_add(Weight::from_parts(2_340_731, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_423_000 picoseconds.
        Weight::from_parts(2_226_573, 0)
            // Standard Error: 31_319
            .saturating_add(Weight::from_parts(8_941_744, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_343_000 picoseconds.
        Weight::from_parts(2_472_000, 0)
            // Standard Error: 23_590
            .saturating_add(Weight::from_parts(7_225_724, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_466_000 picoseconds.
        Weight::from_parts(2_371_928, 0)
            // Standard Error: 24_157
            .saturating_add(Weight::from_parts(2_861_466, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_469_000 picoseconds.
        Weight::from_parts(6_487_386, 0)
            // Standard Error: 24_992
            .saturating_add(Weight::from_parts(2_246_981, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_387_000 picoseconds.
        Weight::from_parts(2_481_000, 0)
            // Standard Error: 9_652
            .saturating_add(Weight::from_parts(1_592_413, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_369_000 picoseconds.
        Weight::from_parts(2_493_000, 0)
            // Standard Error: 6_579
            .saturating_add(Weight::from_parts(791_805, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_364_000 picoseconds.
        Weight::from_parts(2_482_000, 0)
            // Standard Error: 8_831
            .saturating_add(Weight::from_parts(1_499_396, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_290_000 picoseconds.
        Weight::from_parts(2_415_000, 0)
            // Standard Error: 7_366
            .saturating_add(Weight::from_parts(778_135, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_370_000 picoseconds.
        Weight::from_parts(2_436_000, 0)
            // Standard Error: 8_654
            .saturating_add(Weight::from_parts(1_508_812, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_491_000 picoseconds.
        Weight::from_parts(2_549_000, 0)
            // Standard Error: 5_124
            .saturating_add(Weight::from_parts(740_662, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_403_000 picoseconds.
        Weight::from_parts(2_467_000, 0)
            // Standard Error: 12_465
            .saturating_add(Weight::from_parts(1_409_407, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_406_000 picoseconds.
        Weight::from_parts(2_501_000, 0)
            // Standard Error: 3_680
            .saturating_add(Weight::from_parts(747_936, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_410_000 picoseconds.
        Weight::from_parts(2_486_000, 0)
            // Standard Error: 10_265
            .saturating_add(Weight::from_parts(1_335_685, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_415_000 picoseconds.
        Weight::from_parts(2_472_000, 0)
            // Standard Error: 6_764
            .saturating_add(Weight::from_parts(765_699, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_469_000 picoseconds.
        Weight::from_parts(2_569_000, 0)
            // Standard Error: 8_837
            .saturating_add(Weight::from_parts(1_334_511, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_422_000 picoseconds.
        Weight::from_parts(2_510_000, 0)
            // Standard Error: 5_560
            .saturating_add(Weight::from_parts(716_083, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_346_000 picoseconds.
        Weight::from_parts(2_415_000, 0)
            // Standard Error: 9_904
            .saturating_add(Weight::from_parts(1_324_882, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_326_000 picoseconds.
        Weight::from_parts(2_451_000, 0)
            // Standard Error: 6_276
            .saturating_add(Weight::from_parts(707_455, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_327_000 picoseconds.
        Weight::from_parts(2_431_000, 0)
            // Standard Error: 9_000
            .saturating_add(Weight::from_parts(1_316_438, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_453_000 picoseconds.
        Weight::from_parts(2_560_000, 0)
            // Standard Error: 6_958
            .saturating_add(Weight::from_parts(783_875, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 908_000 picoseconds.
        Weight::from_parts(972_000, 0)
            // Standard Error: 966
            .saturating_add(Weight::from_parts(249_953, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_758_000 picoseconds.
        Weight::from_parts(2_845_000, 3506)
            // Standard Error: 1_140
            .saturating_add(Weight::from_parts(687_029, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 59_457_000 picoseconds.
        Weight::from_parts(13_538_813, 0)
            // Standard Error: 31_657
            .saturating_add(Weight::from_parts(2_869_244, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1268`
        //  Estimated: `50969`
        // Minimum execution time: 106_620_000 picoseconds.
        Weight::from_parts(109_269_000, 50969)
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `923`
        //  Estimated: `21372`
        // Minimum execution time: 55_227_000 picoseconds.
        Weight::from_parts(56_670_000, 21372)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `534`
        //  Estimated: `17070`
        // Minimum execution time: 29_347_000 picoseconds.
        Weight::from_parts(30_558_000, 17070)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_024_000 picoseconds.
        Weight::from_parts(14_793_319, 7640)
            // Standard Error: 63_405
            .saturating_add(Weight::from_parts(14_025_490, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1421 + c * (16389 ±0)`
        //  Estimated: `41890 + c * (131112 ±0)`
        // Minimum execution time: 68_714_000 picoseconds.
        Weight::from_parts(70_133_000, 41890)
            // Standard Error: 167_369
            .saturating_add(Weight::from_parts(55_669_553, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 75_342_000 picoseconds.
        Weight::from_parts(82_248_883, 4990)
            // Standard Error: 47_826
            .saturating_add(Weight::from_parts(60_515_202, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1007`
        //  Estimated: `49456`
        // Minimum execution time: 92_220_000 picoseconds.
        Weight::from_parts(110_276_845, 49456)
            // Standard Error: 4
            .saturating_add(Weight::from_parts(2_617, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `417`
        //  Estimated: `43800`
        // Minimum execution time: 11_038_774_000 picoseconds.
        Weight::from_parts(280_016_598, 43800)
            // Standard Error: 172_063
            .saturating_add(Weight::from_parts(61_112_142, 0).saturating_mul(c.into()))
            // Standard Error: 10
            .saturating_add(Weight::from_parts(2_543, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `530`
        //  Estimated: `31259`
        // Minimum execution time: 71_706_000 picoseconds.
        Weight::from_parts(49_030_464, 31259)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_034, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1267`
        //  Estimated: `53499`
        // Minimum execution time: 120_711_000 picoseconds.
        Weight::from_parts(100_007_818, 53499)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_057, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `939`
        //  Estimated: `83673`
        // Minimum execution time: 343_767_000 picoseconds.
        Weight::from_parts(360_025_916, 83673)
            .saturating_add(RocksDbWeight::get().reads(29_u64))
            .saturating_add(RocksDbWeight::get().writes(24_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `939`
        //  Estimated: `83673`
        // Minimum execution time: 360_350_000 picoseconds.
        Weight::from_parts(375_474_995, 83673)
            // Standard Error: 1_477
            .saturating_add(Weight::from_parts(2_900, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(29_u64))
            .saturating_add(RocksDbWeight::get().writes(24_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 57_166_000 picoseconds.
        Weight::from_parts(57_972_000, 3899)
            // Standard Error: 37_026
            .saturating_add(Weight::from_parts(58_912_749, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_183_000 picoseconds.
        Weight::from_parts(95_929_000, 0)
            // Standard Error: 4_076_735
            .saturating_add(Weight::from_parts(746_670_064, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 493_619_000 picoseconds.
        Weight::from_parts(454_132_251, 0)
            // Standard Error: 10_225
            .saturating_add(Weight::from_parts(31_400_502, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 215_932_000 picoseconds.
        Weight::from_parts(213_330_235, 0)
            // Standard Error: 300_170
            .saturating_add(Weight::from_parts(64_603_373, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_507_000 picoseconds.
        Weight::from_parts(105_211_025, 0)
            // Standard Error: 3_938
            .saturating_add(Weight::from_parts(2_525_620, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 148_162_000 picoseconds.
        Weight::from_parts(219_978_414, 0)
            // Standard Error: 26_170
            .saturating_add(Weight::from_parts(2_268_080, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_056_000 picoseconds.
        Weight::from_parts(121_335_781, 0)
            // Standard Error: 396_256
            .saturating_add(Weight::from_parts(106_621_603, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_928_000 picoseconds.
        Weight::from_parts(80_595_448, 0)
            // Standard Error: 348_364
            .saturating_add(Weight::from_parts(95_116_600, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_022_000 picoseconds.
        Weight::from_parts(79_290_858, 0)
            // Standard Error: 334_492
            .saturating_add(Weight::from_parts(96_132_458, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_761_000 picoseconds.
        Weight::from_parts(79_449_750, 0)
            // Standard Error: 354_083
            .saturating_add(Weight::from_parts(96_003_782, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_218_000 picoseconds.
        Weight::from_parts(75_879_101, 0)
            // Standard Error: 339_587
            .saturating_add(Weight::from_parts(96_665_703, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_187_000 picoseconds.
        Weight::from_parts(82_622_750, 0)
            // Standard Error: 360_859
            .saturating_add(Weight::from_parts(96_079_984, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_369_000 picoseconds.
        Weight::from_parts(82_406_097, 0)
            // Standard Error: 352_820
            .saturating_add(Weight::from_parts(94_380_275, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_918_000 picoseconds.
        Weight::from_parts(86_952_141, 0)
            // Standard Error: 347_587
            .saturating_add(Weight::from_parts(89_887_662, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 713_676_000 picoseconds.
        Weight::from_parts(775_302_729, 0)
            // Standard Error: 422_379
            .saturating_add(Weight::from_parts(153_120_872, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 856_130_000 picoseconds.
        Weight::from_parts(860_671_000, 0)
            // Standard Error: 59_116
            .saturating_add(Weight::from_parts(13_659_812, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_685_000 picoseconds.
        Weight::from_parts(92_464_581, 0)
            // Standard Error: 358_798
            .saturating_add(Weight::from_parts(88_766_129, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_154_000 picoseconds.
        Weight::from_parts(86_759_862, 0)
            // Standard Error: 321_274
            .saturating_add(Weight::from_parts(93_509_171, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_358_000 picoseconds.
        Weight::from_parts(105_352_001, 0)
            // Standard Error: 376_299
            .saturating_add(Weight::from_parts(178_671_604, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_348_000 picoseconds.
        Weight::from_parts(99_684_000, 0)
            // Standard Error: 4_398_205
            .saturating_add(Weight::from_parts(854_061_031, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_313_000 picoseconds.
        Weight::from_parts(157_421_003, 0)
            // Standard Error: 409_562
            .saturating_add(Weight::from_parts(263_507_177, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 353_639_000 picoseconds.
        Weight::from_parts(358_489_000, 0)
            // Standard Error: 65_052
            .saturating_add(Weight::from_parts(21_325_343, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_461_000 picoseconds.
        Weight::from_parts(162_429_951, 0)
            // Standard Error: 384_056
            .saturating_add(Weight::from_parts(269_129_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 358_729_000 picoseconds.
        Weight::from_parts(364_229_000, 0)
            // Standard Error: 69_021
            .saturating_add(Weight::from_parts(21_355_826, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 737_600_000 picoseconds.
        Weight::from_parts(811_289_219, 0)
            // Standard Error: 390_319
            .saturating_add(Weight::from_parts(291_516_259, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 745_799_000 picoseconds.
        Weight::from_parts(838_325_341, 0)
            // Standard Error: 425_679
            .saturating_add(Weight::from_parts(289_417_865, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_450_000 picoseconds.
        Weight::from_parts(76_742_695, 0)
            // Standard Error: 312_605
            .saturating_add(Weight::from_parts(102_866_804, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_037_378_000 picoseconds.
        Weight::from_parts(2_163_431_082, 0)
            // Standard Error: 285_461
            .saturating_add(Weight::from_parts(171_187_111, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 334_552_000 picoseconds.
        Weight::from_parts(342_250_000, 0)
            // Standard Error: 51_020
            .saturating_add(Weight::from_parts(31_516_837, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_016_809_000 picoseconds.
        Weight::from_parts(2_144_708_329, 0)
            // Standard Error: 303_762
            .saturating_add(Weight::from_parts(225_164_187, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_025_968_000 picoseconds.
        Weight::from_parts(2_149_551_853, 0)
            // Standard Error: 290_078
            .saturating_add(Weight::from_parts(228_776_350, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 258_599_000 picoseconds.
        Weight::from_parts(305_834_443, 0)
            // Standard Error: 345_074
            .saturating_add(Weight::from_parts(286_260_016, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 542_796_000 picoseconds.
        Weight::from_parts(549_496_000, 0)
            // Standard Error: 55_255
            .saturating_add(Weight::from_parts(21_621_747, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_158_155_000 picoseconds.
        Weight::from_parts(2_294_886_430, 0)
            // Standard Error: 776_616
            .saturating_add(Weight::from_parts(258_941_553, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_501_000 picoseconds.
        Weight::from_parts(106_818_497, 0)
            // Standard Error: 554_612
            .saturating_add(Weight::from_parts(18_799_102, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 119_019_000 picoseconds.
        Weight::from_parts(103_862_574, 0)
            // Standard Error: 1_077
            .saturating_add(Weight::from_parts(437_133, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_957_000 picoseconds.
        Weight::from_parts(104_802_822, 0)
            // Standard Error: 435_927
            .saturating_add(Weight::from_parts(18_463_377, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 119_606_000 picoseconds.
        Weight::from_parts(98_244_319, 0)
            // Standard Error: 1_327
            .saturating_add(Weight::from_parts(445_779, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_403_000 picoseconds.
        Weight::from_parts(105_606_124, 0)
            // Standard Error: 578_463
            .saturating_add(Weight::from_parts(20_276_475, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_694_000 picoseconds.
        Weight::from_parts(103_114_424, 0)
            // Standard Error: 433_737
            .saturating_add(Weight::from_parts(20_410_775, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_731_000 picoseconds.
        Weight::from_parts(141_589_708, 0)
            // Standard Error: 433_808
            .saturating_add(Weight::from_parts(158_234_988, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 111_023_000 picoseconds.
        Weight::from_parts(113_687_000, 0)
            // Standard Error: 2_347
            .saturating_add(Weight::from_parts(649_619, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 708_924_000 picoseconds.
        Weight::from_parts(729_943_385, 0)
            // Standard Error: 1_759_819
            .saturating_add(Weight::from_parts(15_318_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 708_794_000 picoseconds.
        Weight::from_parts(726_131_204, 0)
            // Standard Error: 1_712_659
            .saturating_add(Weight::from_parts(20_297_595, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_878_000 picoseconds.
        Weight::from_parts(111_032_487, 0)
            // Standard Error: 440_329
            .saturating_add(Weight::from_parts(7_302_512, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 113_140_000 picoseconds.
        Weight::from_parts(108_897_909, 0)
            // Standard Error: 1_015
            .saturating_add(Weight::from_parts(431_621, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_290_000 picoseconds.
        Weight::from_parts(111_960_859, 0)
            // Standard Error: 424_630
            .saturating_add(Weight::from_parts(9_494_140, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 115_874_000 picoseconds.
        Weight::from_parts(102_943_231, 0)
            // Standard Error: 961
            .saturating_add(Weight::from_parts(428_966, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_846_000 picoseconds.
        Weight::from_parts(88_021_612, 0)
            // Standard Error: 280_344
            .saturating_add(Weight::from_parts(92_211_817, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_018_000 picoseconds.
        Weight::from_parts(100_345_503, 0)
            // Standard Error: 16_521
            .saturating_add(Weight::from_parts(2_852_293, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_600_000 picoseconds.
        Weight::from_parts(99_974_526, 0)
            // Standard Error: 22_071
            .saturating_add(Weight::from_parts(2_948_468, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 715_596_000 picoseconds.
        Weight::from_parts(751_004_953, 0)
            // Standard Error: 311_345
            .saturating_add(Weight::from_parts(117_243_974, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 737_452_000 picoseconds.
        Weight::from_parts(751_342_820, 0)
            // Standard Error: 945
            .saturating_add(Weight::from_parts(150_405, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_633_412_000 picoseconds.
        Weight::from_parts(2_771_606_929, 0)
            // Standard Error: 394_622
            .saturating_add(Weight::from_parts(137_913_288, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_765_016_000 picoseconds.
        Weight::from_parts(2_749_666_792, 0)
            // Standard Error: 8_033
            .saturating_add(Weight::from_parts(13_644_486, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_004_000 picoseconds.
        Weight::from_parts(126_383_817, 0)
            // Standard Error: 426_716
            .saturating_add(Weight::from_parts(111_849_766, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 158_207_000 picoseconds.
        Weight::from_parts(161_551_000, 0)
            // Standard Error: 56_432
            .saturating_add(Weight::from_parts(25_673_374, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_114_000 picoseconds.
        Weight::from_parts(92_504_538, 0)
            // Standard Error: 335_980
            .saturating_add(Weight::from_parts(86_674_305, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_853_000 picoseconds.
        Weight::from_parts(98_827_432, 0)
            // Standard Error: 412_159
            .saturating_add(Weight::from_parts(22_278_667, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_791_000 picoseconds.
        Weight::from_parts(97_194_093, 0)
            // Standard Error: 387_768
            .saturating_add(Weight::from_parts(16_287_706, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_795_000 picoseconds.
        Weight::from_parts(99_390_067, 0)
            // Standard Error: 417_083
            .saturating_add(Weight::from_parts(14_863_132, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_549_000 picoseconds.
        Weight::from_parts(98_220_632, 0)
            // Standard Error: 397_388
            .saturating_add(Weight::from_parts(11_999_867, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_776_000 picoseconds.
        Weight::from_parts(99_700_724, 0)
            // Standard Error: 487_219
            .saturating_add(Weight::from_parts(10_883_175, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 150_436_000 picoseconds.
        Weight::from_parts(215_750_417, 0)
            // Standard Error: 289_193
            .saturating_add(Weight::from_parts(167_000_563, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_556_000 picoseconds.
        Weight::from_parts(163_260_547, 0)
            // Standard Error: 373_378
            .saturating_add(Weight::from_parts(352_023_516, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_515_740_000 picoseconds.
        Weight::from_parts(44_675_263_000, 0)
            // Standard Error: 266_478
            .saturating_add(Weight::from_parts(6_975_264, 0).saturating_mul(p.into()))
            // Standard Error: 266_465
            .saturating_add(Weight::from_parts(179_054_197, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_313_000 picoseconds.
        Weight::from_parts(167_699_930, 0)
            // Standard Error: 354_835
            .saturating_add(Weight::from_parts(361_149_011, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 46_249_167_000 picoseconds.
        Weight::from_parts(46_316_594_000, 0)
            // Standard Error: 268_696
            .saturating_add(Weight::from_parts(7_439_470, 0).saturating_mul(p.into()))
            // Standard Error: 268_683
            .saturating_add(Weight::from_parts(177_436_220, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_387_000 picoseconds.
        Weight::from_parts(111_737_855, 0)
            // Standard Error: 27_712
            .saturating_add(Weight::from_parts(2_185_533, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 94_359_000 picoseconds.
        Weight::from_parts(124_186_913, 1131)
            // Standard Error: 14_802
            .saturating_add(Weight::from_parts(16_282_849, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 91_923_000 picoseconds.
        Weight::from_parts(95_405_000, 1131)
            // Standard Error: 57_283
            .saturating_add(Weight::from_parts(41_254_554, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_363_984_000 picoseconds.
        Weight::from_parts(8_166_603_633, 5069931)
            // Standard Error: 115_591
            .saturating_add(Weight::from_parts(40_770_024, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 96_373_000 picoseconds.
        Weight::from_parts(98_109_000, 1939)
            // Standard Error: 109_505
            .saturating_add(Weight::from_parts(56_481_346, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 97_762_000 picoseconds.
        Weight::from_parts(103_948_539, 1131)
            // Standard Error: 83_150
            .saturating_add(Weight::from_parts(43_906_290, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 752_054_000 picoseconds.
        Weight::from_parts(803_791_791, 1496)
            // Standard Error: 314_653
            .saturating_add(Weight::from_parts(49_839_020, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_354_349_000 picoseconds.
        Weight::from_parts(1_385_618_774, 317931)
            // Standard Error: 280_672
            .saturating_add(Weight::from_parts(46_743_396, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_422_000 picoseconds.
        Weight::from_parts(648_434, 0)
            // Standard Error: 102_253
            .saturating_add(Weight::from_parts(100_758_904, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_455_882_000 picoseconds.
        Weight::from_parts(4_333_797_078, 0)
            // Standard Error: 61_739
            .saturating_add(Weight::from_parts(4_362_598, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_425_200_000 picoseconds.
        Weight::from_parts(4_301_532_130, 0)
            // Standard Error: 65_348
            .saturating_add(Weight::from_parts(4_563_497, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_957_367_000 picoseconds.
        Weight::from_parts(11_592_672_324, 0)
            // Standard Error: 205_740
            .saturating_add(Weight::from_parts(10_661_449, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_202_119_000 picoseconds.
        Weight::from_parts(12_549_612_221, 0)
            // Standard Error: 181_803
            .saturating_add(Weight::from_parts(5_990_871, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_424_000 picoseconds.
        Weight::from_parts(2_506_000, 0)
            // Standard Error: 14_888
            .saturating_add(Weight::from_parts(4_213_531, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_354_000 picoseconds.
        Weight::from_parts(1_303_475, 0)
            // Standard Error: 21_955
            .saturating_add(Weight::from_parts(3_513_069, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_447_000 picoseconds.
        Weight::from_parts(3_530_665, 0)
            // Standard Error: 1_345
            .saturating_add(Weight::from_parts(1_574_938, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_450_000 picoseconds.
        Weight::from_parts(2_528_000, 0)
            // Standard Error: 8_648
            .saturating_add(Weight::from_parts(2_914_709, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_380_000 picoseconds.
        Weight::from_parts(2_452_000, 0)
            // Standard Error: 8_157
            .saturating_add(Weight::from_parts(5_285_508, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_104_000 picoseconds.
        Weight::from_parts(2_697_837, 0)
            // Standard Error: 2_607
            .saturating_add(Weight::from_parts(188_774, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_425_000 picoseconds.
        Weight::from_parts(5_995_914, 0)
            // Standard Error: 8_618
            .saturating_add(Weight::from_parts(2_579_351, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_579_351 -
            2_456_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_476_000 picoseconds.
        Weight::from_parts(4_951_557, 0)
            // Standard Error: 13_157
            .saturating_add(Weight::from_parts(2_456_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_796_000 picoseconds.
        Weight::from_parts(25_419_569, 0)
            // Standard Error: 35_738
            .saturating_add(Weight::from_parts(9_684_435, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_531_000 picoseconds.
        Weight::from_parts(622_701, 0)
            // Standard Error: 8_106
            .saturating_add(Weight::from_parts(1_256_409, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_428_000 picoseconds.
        Weight::from_parts(5_813_641, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_792_000 picoseconds.
        Weight::from_parts(5_468_312, 0)
            // Standard Error: 3_758
            .saturating_add(Weight::from_parts(411_134, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_909_000 picoseconds.
        Weight::from_parts(5_092_095, 0)
            // Standard Error: 4_814
            .saturating_add(Weight::from_parts(957_706, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_849_000 picoseconds.
        Weight::from_parts(3_552_754, 0)
            // Standard Error: 8_892
            .saturating_add(Weight::from_parts(1_072_245, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_539_000 picoseconds.
        Weight::from_parts(2_989_666, 0)
            // Standard Error: 7_090
            .saturating_add(Weight::from_parts(805_515, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_577_000 picoseconds.
        Weight::from_parts(388_230, 0)
            // Standard Error: 11_530
            .saturating_add(Weight::from_parts(1_471_761, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_394_000 picoseconds.
        Weight::from_parts(3_210_670, 0)
            // Standard Error: 13_939
            .saturating_add(Weight::from_parts(7_057_904, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_339_000 picoseconds.
        Weight::from_parts(2_448_000, 0)
            // Standard Error: 6_775
            .saturating_add(Weight::from_parts(3_386_014, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_500_000 picoseconds.
        Weight::from_parts(2_559_000, 0)
            // Standard Error: 8_696
            .saturating_add(Weight::from_parts(3_105_136, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_403_000 picoseconds.
        Weight::from_parts(2_540_000, 0)
            // Standard Error: 7_429
            .saturating_add(Weight::from_parts(3_099_802, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_372_000 picoseconds.
        Weight::from_parts(2_490_000, 0)
            // Standard Error: 5_652
            .saturating_add(Weight::from_parts(2_669_087, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_398_000 picoseconds.
        Weight::from_parts(2_508_000, 0)
            // Standard Error: 4_986
            .saturating_add(Weight::from_parts(596_205, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_430_000 picoseconds.
        Weight::from_parts(1_123_264, 0)
            // Standard Error: 5_142
            .saturating_add(Weight::from_parts(455_064, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_437_000 picoseconds.
        Weight::from_parts(2_515_000, 0)
            // Standard Error: 11_574
            .saturating_add(Weight::from_parts(1_886_065, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_467_000 picoseconds.
        Weight::from_parts(2_549_000, 0)
            // Standard Error: 7_396
            .saturating_add(Weight::from_parts(1_265_851, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_295_000 picoseconds.
        Weight::from_parts(1_048_475, 0)
            // Standard Error: 5_640
            .saturating_add(Weight::from_parts(424_436, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_433_000 picoseconds.
        Weight::from_parts(1_549_696, 0)
            // Standard Error: 4_664
            .saturating_add(Weight::from_parts(385_934, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(573_336, 0)
            // Standard Error: 5_982
            .saturating_add(Weight::from_parts(581_243, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_432_000 picoseconds.
        Weight::from_parts(2_545_000, 0)
            // Standard Error: 4_142
            .saturating_add(Weight::from_parts(526_620, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_369_000 picoseconds.
        Weight::from_parts(2_480_000, 0)
            // Standard Error: 4_386
            .saturating_add(Weight::from_parts(472_447, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_380_000 picoseconds.
        Weight::from_parts(1_839_294, 0)
            // Standard Error: 3_619
            .saturating_add(Weight::from_parts(351_766, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_329_000 picoseconds.
        Weight::from_parts(2_889_629, 0)
            // Standard Error: 1_788
            .saturating_add(Weight::from_parts(171_297, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_397_000 picoseconds.
        Weight::from_parts(2_868_920, 0)
            // Standard Error: 1_902
            .saturating_add(Weight::from_parts(161_872, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_323_000 picoseconds.
        Weight::from_parts(2_447_000, 0)
            // Standard Error: 12_114
            .saturating_add(Weight::from_parts(1_880_989, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_429_000 picoseconds.
        Weight::from_parts(2_492_000, 0)
            // Standard Error: 9_873
            .saturating_add(Weight::from_parts(1_201_676, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_544_000 picoseconds.
        Weight::from_parts(2_636_000, 0)
            // Standard Error: 10_995
            .saturating_add(Weight::from_parts(1_933_738, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_418_000 picoseconds.
        Weight::from_parts(2_443_000, 0)
            // Standard Error: 9_233
            .saturating_add(Weight::from_parts(1_208_289, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_495_000 picoseconds.
        Weight::from_parts(2_536_000, 0)
            // Standard Error: 9_397
            .saturating_add(Weight::from_parts(1_927_476, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_333_000 picoseconds.
        Weight::from_parts(2_461_000, 0)
            // Standard Error: 8_246
            .saturating_add(Weight::from_parts(1_243_725, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_356_000 picoseconds.
        Weight::from_parts(2_499_000, 0)
            // Standard Error: 10_789
            .saturating_add(Weight::from_parts(1_894_681, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_436_000 picoseconds.
        Weight::from_parts(2_487_000, 0)
            // Standard Error: 9_012
            .saturating_add(Weight::from_parts(1_222_864, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_373_000 picoseconds.
        Weight::from_parts(2_471_000, 0)
            // Standard Error: 9_536
            .saturating_add(Weight::from_parts(1_955_547, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_374_000 picoseconds.
        Weight::from_parts(2_447_000, 0)
            // Standard Error: 7_198
            .saturating_add(Weight::from_parts(1_206_456, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_371_000 picoseconds.
        Weight::from_parts(2_451_000, 0)
            // Standard Error: 13_630
            .saturating_add(Weight::from_parts(1_910_087, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_366_000 picoseconds.
        Weight::from_parts(2_461_000, 0)
            // Standard Error: 9_112
            .saturating_add(Weight::from_parts(1_243_910, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_332_000 picoseconds.
        Weight::from_parts(2_495_000, 0)
            // Standard Error: 10_908
            .saturating_add(Weight::from_parts(1_916_637, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_401_000 picoseconds.
        Weight::from_parts(2_492_000, 0)
            // Standard Error: 8_228
            .saturating_add(Weight::from_parts(1_171_406, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_446_000 picoseconds.
        Weight::from_parts(2_518_000, 0)
            // Standard Error: 12_640
            .saturating_add(Weight::from_parts(1_914_220, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_335_000 picoseconds.
        Weight::from_parts(2_420_000, 0)
            // Standard Error: 7_992
            .saturating_add(Weight::from_parts(1_192_242, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_386_000 picoseconds.
        Weight::from_parts(2_508_000, 0)
            // Standard Error: 12_858
            .saturating_add(Weight::from_parts(1_904_642, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_430_000 picoseconds.
        Weight::from_parts(2_533_000, 0)
            // Standard Error: 9_495
            .saturating_add(Weight::from_parts(1_230_079, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_388_000 picoseconds.
        Weight::from_parts(2_473_000, 0)
            // Standard Error: 11_677
            .saturating_add(Weight::from_parts(1_899_858, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_472_000 picoseconds.
        Weight::from_parts(2_576_000, 0)
            // Standard Error: 8_212
            .saturating_add(Weight::from_parts(1_199_170, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_444_000 picoseconds.
        Weight::from_parts(2_568_000, 0)
            // Standard Error: 8_244
            .saturating_add(Weight::from_parts(1_289_967, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_363_000 picoseconds.
        Weight::from_parts(2_497_000, 0)
            // Standard Error: 5_502
            .saturating_add(Weight::from_parts(642_134, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_483_000 picoseconds.
        Weight::from_parts(2_521_000, 0)
            // Standard Error: 9_174
            .saturating_add(Weight::from_parts(1_305_847, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_435_000 picoseconds.
        Weight::from_parts(2_552_000, 0)
            // Standard Error: 5_130
            .saturating_add(Weight::from_parts(672_234, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_406_000 picoseconds.
        Weight::from_parts(2_472_000, 0)
            // Standard Error: 11_096
            .saturating_add(Weight::from_parts(1_864_601, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_502_000 picoseconds.
        Weight::from_parts(2_553_000, 0)
            // Standard Error: 9_938
            .saturating_add(Weight::from_parts(1_272_330, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_341_000 picoseconds.
        Weight::from_parts(7_673_300, 0)
            // Standard Error: 21_265
            .saturating_add(Weight::from_parts(2_273_799, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_409_000 picoseconds.
        Weight::from_parts(4_870_844, 0)
            // Standard Error: 12_907
            .saturating_add(Weight::from_parts(2_204_839, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_426_000 picoseconds.
        Weight::from_parts(3_562_469, 0)
            // Standard Error: 11_765
            .saturating_add(Weight::from_parts(2_749_428, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_282_000 picoseconds.
        Weight::from_parts(956_471, 0)
            // Standard Error: 16_756
            .saturating_add(Weight::from_parts(2_340_731, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_423_000 picoseconds.
        Weight::from_parts(2_226_573, 0)
            // Standard Error: 31_319
            .saturating_add(Weight::from_parts(8_941_744, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_343_000 picoseconds.
        Weight::from_parts(2_472_000, 0)
            // Standard Error: 23_590
            .saturating_add(Weight::from_parts(7_225_724, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_466_000 picoseconds.
        Weight::from_parts(2_371_928, 0)
            // Standard Error: 24_157
            .saturating_add(Weight::from_parts(2_861_466, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_469_000 picoseconds.
        Weight::from_parts(6_487_386, 0)
            // Standard Error: 24_992
            .saturating_add(Weight::from_parts(2_246_981, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_387_000 picoseconds.
        Weight::from_parts(2_481_000, 0)
            // Standard Error: 9_652
            .saturating_add(Weight::from_parts(1_592_413, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_369_000 picoseconds.
        Weight::from_parts(2_493_000, 0)
            // Standard Error: 6_579
            .saturating_add(Weight::from_parts(791_805, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_364_000 picoseconds.
        Weight::from_parts(2_482_000, 0)
            // Standard Error: 8_831
            .saturating_add(Weight::from_parts(1_499_396, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_290_000 picoseconds.
        Weight::from_parts(2_415_000, 0)
            // Standard Error: 7_366
            .saturating_add(Weight::from_parts(778_135, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_370_000 picoseconds.
        Weight::from_parts(2_436_000, 0)
            // Standard Error: 8_654
            .saturating_add(Weight::from_parts(1_508_812, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_491_000 picoseconds.
        Weight::from_parts(2_549_000, 0)
            // Standard Error: 5_124
            .saturating_add(Weight::from_parts(740_662, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_403_000 picoseconds.
        Weight::from_parts(2_467_000, 0)
            // Standard Error: 12_465
            .saturating_add(Weight::from_parts(1_409_407, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_406_000 picoseconds.
        Weight::from_parts(2_501_000, 0)
            // Standard Error: 3_680
            .saturating_add(Weight::from_parts(747_936, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_410_000 picoseconds.
        Weight::from_parts(2_486_000, 0)
            // Standard Error: 10_265
            .saturating_add(Weight::from_parts(1_335_685, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_415_000 picoseconds.
        Weight::from_parts(2_472_000, 0)
            // Standard Error: 6_764
            .saturating_add(Weight::from_parts(765_699, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_469_000 picoseconds.
        Weight::from_parts(2_569_000, 0)
            // Standard Error: 8_837
            .saturating_add(Weight::from_parts(1_334_511, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_422_000 picoseconds.
        Weight::from_parts(2_510_000, 0)
            // Standard Error: 5_560
            .saturating_add(Weight::from_parts(716_083, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_346_000 picoseconds.
        Weight::from_parts(2_415_000, 0)
            // Standard Error: 9_904
            .saturating_add(Weight::from_parts(1_324_882, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_326_000 picoseconds.
        Weight::from_parts(2_451_000, 0)
            // Standard Error: 6_276
            .saturating_add(Weight::from_parts(707_455, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_327_000 picoseconds.
        Weight::from_parts(2_431_000, 0)
            // Standard Error: 9_000
            .saturating_add(Weight::from_parts(1_316_438, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_453_000 picoseconds.
        Weight::from_parts(2_560_000, 0)
            // Standard Error: 6_958
            .saturating_add(Weight::from_parts(783_875, 0).saturating_mul(r.into()))
    }
}
