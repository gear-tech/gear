// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-11, STEPS: `20`, REPEAT: `40`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --pallet=pallet_gear --steps=20 --repeat=40 --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=5000 --template=.maintain/frame-weight-template.hbs --output=gear.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_input_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reply_input_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_error(r: u32, ) -> Weight;
    fn gr_status_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 766 nanoseconds.
        Weight::from_ref_time(798_000)
            // Standard Error: 1_178
            .saturating_add(Weight::from_ref_time(210_812).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `74 + c * (1024 ±0)`
        //  Estimated: `2542 + c * (1024 ±0)`
        // Minimum execution time: 2_607 nanoseconds.
        Weight::from_parts(2_693_000, 2542)
            // Standard Error: 1_153
            .saturating_add(Weight::from_ref_time(731_157).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 46_071 nanoseconds.
        Weight::from_ref_time(83_942_284)
            // Standard Error: 5_086
            .saturating_add(Weight::from_ref_time(2_199_213).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `847`
        //  Estimated: `17017`
        // Minimum execution time: 49_173 nanoseconds.
        Weight::from_parts(50_456_000, 17017)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `3010`
        // Minimum execution time: 65_364 nanoseconds.
        Weight::from_parts(46_215_804, 3010)
            // Standard Error: 37_679
            .saturating_add(Weight::from_ref_time(51_788_458).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `604`
        //  Estimated: `17714`
        // Minimum execution time: 45_912 nanoseconds.
        Weight::from_parts(62_017_646, 17714)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_341).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `55`
        //  Estimated: `13432`
        // Minimum execution time: 9_560_238 nanoseconds.
        Weight::from_parts(9_674_146_000, 13432)
            // Standard Error: 508_095
            .saturating_add(Weight::from_ref_time(28_243_773).saturating_mul(c.into()))
            // Standard Error: 30
            .saturating_add(Weight::from_ref_time(845).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `374`
        //  Estimated: `14759`
        // Minimum execution time: 47_067 nanoseconds.
        Weight::from_parts(36_826_447, 14759)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(1_190).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1042`
        //  Estimated: `30879`
        // Minimum execution time: 69_544 nanoseconds.
        Weight::from_parts(61_820_775, 30879)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(1_193).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `676`
        //  Estimated: `41136`
        // Minimum execution time: 260_443 nanoseconds.
        Weight::from_parts(271_338_560, 41136)
            .saturating_add(T::DbWeight::get().reads(24_u64))
            .saturating_add(T::DbWeight::get().writes(21_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `676`
        //  Estimated: `40641`
        // Minimum execution time: 272_721 nanoseconds.
        Weight::from_parts(283_729_004, 40641)
            .saturating_add(T::DbWeight::get().reads(24_u64))
            .saturating_add(T::DbWeight::get().writes(21_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `243 + c * (1075 ±0)`
        //  Estimated: `2997 + c * (2150 ±0)`
        // Minimum execution time: 50_830 nanoseconds.
        Weight::from_parts(51_118_000, 2997)
            // Standard Error: 24_950
            .saturating_add(Weight::from_ref_time(50_644_237).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_proof_size(2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 74_862 nanoseconds.
        Weight::from_ref_time(58_146_204)
            // Standard Error: 257_749
            .saturating_add(Weight::from_ref_time(136_090_035).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 206_475 nanoseconds.
        Weight::from_ref_time(205_378_672)
            // Standard Error: 310_232
            .saturating_add(Weight::from_ref_time(131_889_550).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 76_599 nanoseconds.
        Weight::from_ref_time(84_531_766)
            // Standard Error: 4_218
            .saturating_add(Weight::from_ref_time(3_446_929).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_248 nanoseconds.
        Weight::from_ref_time(131_747_947)
            // Standard Error: 12_102
            .saturating_add(Weight::from_ref_time(3_665_741).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_034 nanoseconds.
        Weight::from_ref_time(105_853_754)
            // Standard Error: 312_074
            .saturating_add(Weight::from_ref_time(183_872_728).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 76_577 nanoseconds.
        Weight::from_ref_time(61_780_406)
            // Standard Error: 259_973
            .saturating_add(Weight::from_ref_time(182_097_602).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 76_126 nanoseconds.
        Weight::from_ref_time(60_376_296)
            // Standard Error: 278_527
            .saturating_add(Weight::from_ref_time(182_406_380).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 76_210 nanoseconds.
        Weight::from_ref_time(61_196_171)
            // Standard Error: 271_157
            .saturating_add(Weight::from_ref_time(182_328_663).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 76_531 nanoseconds.
        Weight::from_ref_time(62_649_344)
            // Standard Error: 252_838
            .saturating_add(Weight::from_ref_time(182_510_255).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 77_578 nanoseconds.
        Weight::from_ref_time(62_354_246)
            // Standard Error: 261_820
            .saturating_add(Weight::from_ref_time(182_869_537).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 77_083 nanoseconds.
        Weight::from_ref_time(61_117_855)
            // Standard Error: 284_209
            .saturating_add(Weight::from_ref_time(184_043_025).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 77_127 nanoseconds.
        Weight::from_ref_time(58_738_870)
            // Standard Error: 276_933
            .saturating_add(Weight::from_ref_time(182_457_576).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 77_133 nanoseconds.
        Weight::from_ref_time(60_386_317)
            // Standard Error: 270_817
            .saturating_add(Weight::from_ref_time(183_013_468).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 549_285 nanoseconds.
        Weight::from_ref_time(618_102_568)
            // Standard Error: 371_569
            .saturating_add(Weight::from_ref_time(242_820_267).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 805_298 nanoseconds.
        Weight::from_ref_time(810_312_000)
            // Standard Error: 57_184
            .saturating_add(Weight::from_ref_time(13_634_279).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_392 nanoseconds.
        Weight::from_ref_time(61_462_428)
            // Standard Error: 259_542
            .saturating_add(Weight::from_ref_time(183_847_076).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_971 nanoseconds.
        Weight::from_ref_time(60_840_398)
            // Standard Error: 272_103
            .saturating_add(Weight::from_ref_time(183_392_193).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_613 nanoseconds.
        Weight::from_ref_time(96_203_759)
            // Standard Error: 278_314
            .saturating_add(Weight::from_ref_time(237_797_945).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 77_992 nanoseconds.
        Weight::from_ref_time(126_494_708)
            // Standard Error: 337_437
            .saturating_add(Weight::from_ref_time(350_185_213).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 432_809 nanoseconds.
        Weight::from_ref_time(438_074_000)
            // Standard Error: 54_034
            .saturating_add(Weight::from_ref_time(24_470_446).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_896 nanoseconds.
        Weight::from_ref_time(150_063_193)
            // Standard Error: 345_102
            .saturating_add(Weight::from_ref_time(353_232_826).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 436_955 nanoseconds.
        Weight::from_ref_time(441_435_000)
            // Standard Error: 62_208
            .saturating_add(Weight::from_ref_time(24_453_361).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 550_301 nanoseconds.
        Weight::from_ref_time(604_875_193)
            // Standard Error: 356_787
            .saturating_add(Weight::from_ref_time(359_753_735).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 908_514 nanoseconds.
        Weight::from_ref_time(1_100_260_113)
            // Standard Error: 13_078
            .saturating_add(Weight::from_ref_time(41_640_626).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 553_592 nanoseconds.
        Weight::from_ref_time(621_378_828)
            // Standard Error: 395_224
            .saturating_add(Weight::from_ref_time(366_524_067).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_input_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 910_868 nanoseconds.
        Weight::from_ref_time(1_111_236_437)
            // Standard Error: 13_614
            .saturating_add(Weight::from_ref_time(41_620_788).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_631 nanoseconds.
        Weight::from_ref_time(60_825_038)
            // Standard Error: 252_341
            .saturating_add(Weight::from_ref_time(189_771_919).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_751_355 nanoseconds.
        Weight::from_ref_time(3_876_725_758)
            // Standard Error: 248_379
            .saturating_add(Weight::from_ref_time(257_259_427).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 524_670 nanoseconds.
        Weight::from_ref_time(529_268_000)
            // Standard Error: 55_205
            .saturating_add(Weight::from_ref_time(34_013_050).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_753_943 nanoseconds.
        Weight::from_ref_time(3_876_767_625)
            // Standard Error: 295_847
            .saturating_add(Weight::from_ref_time(310_238_722).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_712_346 nanoseconds.
        Weight::from_ref_time(3_871_335_221)
            // Standard Error: 296_259
            .saturating_add(Weight::from_ref_time(318_898_171).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_905_044 nanoseconds.
        Weight::from_ref_time(4_004_317_143)
            // Standard Error: 383_390
            .saturating_add(Weight::from_ref_time(329_677_134).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 75_556 nanoseconds.
        Weight::from_ref_time(78_984_573)
            // Standard Error: 170_978
            .saturating_add(Weight::from_ref_time(23_214_726).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_796 nanoseconds.
        Weight::from_ref_time(90_520_113)
            // Standard Error: 1_190
            .saturating_add(Weight::from_ref_time(474_833).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_122 nanoseconds.
        Weight::from_ref_time(81_697_826)
            // Standard Error: 160_541
            .saturating_add(Weight::from_ref_time(22_859_073).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_559 nanoseconds.
        Weight::from_ref_time(84_715_760)
            // Standard Error: 987
            .saturating_add(Weight::from_ref_time(482_200).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_438 nanoseconds.
        Weight::from_ref_time(81_496_915)
            // Standard Error: 158_405
            .saturating_add(Weight::from_ref_time(21_463_634).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 77_556 nanoseconds.
        Weight::from_ref_time(81_400_313)
            // Standard Error: 183_299
            .saturating_add(Weight::from_ref_time(21_576_186).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_348 nanoseconds.
        Weight::from_ref_time(119_692_116)
            // Standard Error: 321_762
            .saturating_add(Weight::from_ref_time(251_286_934).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_568 nanoseconds.
        Weight::from_ref_time(96_999_000)
            // Standard Error: 2_931
            .saturating_add(Weight::from_ref_time(673_390).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 549_378 nanoseconds.
        Weight::from_ref_time(563_527_615)
            // Standard Error: 1_152_582
            .saturating_add(Weight::from_ref_time(35_444_834).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 585_731 nanoseconds.
        Weight::from_ref_time(596_703_666)
            // Standard Error: 1_061
            .saturating_add(Weight::from_ref_time(515_269).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 552_493 nanoseconds.
        Weight::from_ref_time(561_228_905)
            // Standard Error: 687_549
            .saturating_add(Weight::from_ref_time(25_063_744).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_input_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 575_258 nanoseconds.
        Weight::from_ref_time(577_862_388)
            // Standard Error: 2_375
            .saturating_add(Weight::from_ref_time(536_804).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_533 nanoseconds.
        Weight::from_ref_time(91_590_792)
            // Standard Error: 208_803
            .saturating_add(Weight::from_ref_time(12_198_157).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_637 nanoseconds.
        Weight::from_ref_time(88_849_136)
            // Standard Error: 849
            .saturating_add(Weight::from_ref_time(481_770).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_289 nanoseconds.
        Weight::from_ref_time(70_094_630)
            // Standard Error: 260_793
            .saturating_add(Weight::from_ref_time(183_203_111).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_577 nanoseconds.
        Weight::from_ref_time(66_848_849)
            // Standard Error: 294_102
            .saturating_add(Weight::from_ref_time(184_443_574).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 548_726 nanoseconds.
        Weight::from_ref_time(593_630_170)
            // Standard Error: 322_708
            .saturating_add(Weight::from_ref_time(194_962_359).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(_n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 760_740 nanoseconds.
        Weight::from_ref_time(3_017_133_261)
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_234_008 nanoseconds.
        Weight::from_ref_time(4_354_645_992)
            // Standard Error: 222_807
            .saturating_add(Weight::from_ref_time(202_585_420).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_462_564 nanoseconds.
        Weight::from_ref_time(4_400_031_524)
            // Standard Error: 13_609
            .saturating_add(Weight::from_ref_time(12_595_208).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_332 nanoseconds.
        Weight::from_ref_time(100_928_017)
            // Standard Error: 303_383
            .saturating_add(Weight::from_ref_time(194_641_137).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 260_370 nanoseconds.
        Weight::from_ref_time(262_587_000)
            // Standard Error: 54_293
            .saturating_add(Weight::from_ref_time(31_691_424).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_251 nanoseconds.
        Weight::from_ref_time(101_067_616)
            // Standard Error: 267_735
            .saturating_add(Weight::from_ref_time(237_097_149).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_493 nanoseconds.
        Weight::from_ref_time(64_970_201)
            // Standard Error: 274_639
            .saturating_add(Weight::from_ref_time(182_076_691).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 75_996 nanoseconds.
        Weight::from_ref_time(79_680_568)
            // Standard Error: 191_561
            .saturating_add(Weight::from_ref_time(26_010_981).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 75_990 nanoseconds.
        Weight::from_ref_time(79_842_376)
            // Standard Error: 188_741
            .saturating_add(Weight::from_ref_time(17_488_773).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_005 nanoseconds.
        Weight::from_ref_time(81_381_207)
            // Standard Error: 186_079
            .saturating_add(Weight::from_ref_time(15_865_592).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 77_648 nanoseconds.
        Weight::from_ref_time(81_326_286)
            // Standard Error: 152_555
            .saturating_add(Weight::from_ref_time(16_634_063).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_465 nanoseconds.
        Weight::from_ref_time(81_727_663)
            // Standard Error: 173_976
            .saturating_add(Weight::from_ref_time(15_456_386).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_621 nanoseconds.
        Weight::from_ref_time(196_016_527)
            // Standard Error: 299_103
            .saturating_add(Weight::from_ref_time(260_218_197).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_280 nanoseconds.
        Weight::from_ref_time(136_211_690)
            // Standard Error: 347_796
            .saturating_add(Weight::from_ref_time(425_418_440).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_638_889 nanoseconds.
        Weight::from_ref_time(50_742_010_000)
            // Standard Error: 351_678
            .saturating_add(Weight::from_ref_time(9_576_167).saturating_mul(p.into()))
            // Standard Error: 351_658
            .saturating_add(Weight::from_ref_time(156_339_734).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_441 nanoseconds.
        Weight::from_ref_time(137_700_595)
            // Standard Error: 368_223
            .saturating_add(Weight::from_ref_time(427_029_921).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_113_042 nanoseconds.
        Weight::from_ref_time(51_174_490_000)
            // Standard Error: 346_073
            .saturating_add(Weight::from_ref_time(9_421_492).saturating_mul(p.into()))
            // Standard Error: 346_053
            .saturating_add(Weight::from_ref_time(155_671_874).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 186_000 nanoseconds.
        Weight::from_ref_time(180_165_128)
            // Standard Error: 369_219
            .saturating_add(Weight::from_ref_time(385_226_688).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 560_000 nanoseconds.
        Weight::from_ref_time(495_268_611)
            // Standard Error: 13_235
            .saturating_add(Weight::from_ref_time(12_068_004).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_000 nanoseconds.
        Weight::from_ref_time(83_223_684)
            // Standard Error: 299_637
            .saturating_add(Weight::from_ref_time(5_826_315).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_000 nanoseconds.
        Weight::from_ref_time(82_873_951)
            // Standard Error: 1_405
            .saturating_add(Weight::from_ref_time(234_449).saturating_mul(n.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 76_022 nanoseconds.
        Weight::from_parts(108_540_550, 141)
            // Standard Error: 8_078
            .saturating_add(Weight::from_ref_time(11_627_922).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 74_706 nanoseconds.
        Weight::from_parts(76_284_000, 141)
            // Standard Error: 22_452
            .saturating_add(Weight::from_ref_time(36_979_328).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5068941`
        // Minimum execution time: 6_018_721 nanoseconds.
        Weight::from_parts(5_872_187_047, 5068941)
            // Standard Error: 59_918
            .saturating_add(Weight::from_ref_time(38_629_879).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65704 ±0)`
        //  Estimated: `1012 + p * (75606 ±0)`
        // Minimum execution time: 77_714 nanoseconds.
        Weight::from_parts(79_579_000, 1012)
            // Standard Error: 59_082
            .saturating_add(Weight::from_ref_time(45_749_587).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(75606).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `584 + p * (9879 ±2)`
        // Minimum execution time: 90_772 nanoseconds.
        Weight::from_parts(88_456_995, 584)
            // Standard Error: 52_198
            .saturating_add(Weight::from_ref_time(40_298_763).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `584 + p * (9879 ±2)`
        // Minimum execution time: 591_249 nanoseconds.
        Weight::from_parts(578_329_592, 584)
            // Standard Error: 91_049
            .saturating_add(Weight::from_ref_time(44_547_948).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `316941`
        // Minimum execution time: 970_466 nanoseconds.
        Weight::from_parts(977_477_818, 316941)
            // Standard Error: 70_808
            .saturating_add(Weight::from_ref_time(46_142_776).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_230_787 nanoseconds.
        Weight::from_ref_time(4_225_617_142)
            // Standard Error: 14_771
            .saturating_add(Weight::from_ref_time(3_356_389).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_228_536 nanoseconds.
        Weight::from_ref_time(4_224_689_104)
            // Standard Error: 14_673
            .saturating_add(Weight::from_ref_time(3_397_797).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_433_209 nanoseconds.
        Weight::from_ref_time(9_441_573_446)
            // Standard Error: 143_422
            .saturating_add(Weight::from_ref_time(16_657_823).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_155_451 nanoseconds.
        Weight::from_ref_time(9_550_949_860)
            // Standard Error: 154_366
            .saturating_add(Weight::from_ref_time(11_646_252).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_040 nanoseconds.
        Weight::from_ref_time(2_097_000)
            // Standard Error: 9_919
            .saturating_add(Weight::from_ref_time(3_794_751).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_086 nanoseconds.
        Weight::from_ref_time(2_189_000)
            // Standard Error: 5_070
            .saturating_add(Weight::from_ref_time(3_057_410).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_085 nanoseconds.
        Weight::from_ref_time(3_075_949)
            // Standard Error: 1_055
            .saturating_add(Weight::from_ref_time(1_562_199).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_079 nanoseconds.
        Weight::from_ref_time(2_158_000)
            // Standard Error: 5_463
            .saturating_add(Weight::from_ref_time(3_015_599).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_002 nanoseconds.
        Weight::from_ref_time(2_130_000)
            // Standard Error: 8_042
            .saturating_add(Weight::from_ref_time(5_261_699).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_540 nanoseconds.
        Weight::from_ref_time(3_855_994)
            // Standard Error: 2_711
            .saturating_add(Weight::from_ref_time(145_536).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_074 nanoseconds.
        Weight::from_ref_time(3_119_444)
            // Standard Error: 5_960
            .saturating_add(Weight::from_ref_time(2_582_339).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(2_582_339 -
            2_494_490).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_046 nanoseconds.
        Weight::from_ref_time(2_359_778)
            // Standard Error: 12_202
            .saturating_add(Weight::from_ref_time(2_494_490).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_379 nanoseconds.
        Weight::from_ref_time(9_543_271)
            // Standard Error: 25_741
            .saturating_add(Weight::from_ref_time(10_044_008).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 13_427 nanoseconds.
        Weight::from_ref_time(2_973_666)
            // Standard Error: 8_038
            .saturating_add(Weight::from_ref_time(1_195_663).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_117 nanoseconds.
        Weight::from_ref_time(5_388_159)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_071 nanoseconds.
        Weight::from_ref_time(1_608_222)
            // Standard Error: 3_899
            .saturating_add(Weight::from_ref_time(226_964).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_032 nanoseconds.
        Weight::from_ref_time(2_125_000)
            // Standard Error: 8_237
            .saturating_add(Weight::from_ref_time(708_558).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_003 nanoseconds.
        Weight::from_ref_time(2_130_000)
            // Standard Error: 5_759
            .saturating_add(Weight::from_ref_time(735_112).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_827 nanoseconds.
        Weight::from_ref_time(1_569_854)
            // Standard Error: 12_864
            .saturating_add(Weight::from_ref_time(749_877).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_789 nanoseconds.
        Weight::from_ref_time(5_855_000)
            // Standard Error: 11_868
            .saturating_add(Weight::from_ref_time(1_388_441).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_268 nanoseconds.
        Weight::from_ref_time(3_406_000)
            // Standard Error: 9_568
            .saturating_add(Weight::from_ref_time(6_752_014).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_029 nanoseconds.
        Weight::from_ref_time(2_143_000)
            // Standard Error: 8_572
            .saturating_add(Weight::from_ref_time(3_388_429).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_059 nanoseconds.
        Weight::from_ref_time(2_138_000)
            // Standard Error: 7_920
            .saturating_add(Weight::from_ref_time(3_115_765).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_079 nanoseconds.
        Weight::from_ref_time(2_130_000)
            // Standard Error: 8_290
            .saturating_add(Weight::from_ref_time(3_134_939).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_997 nanoseconds.
        Weight::from_ref_time(2_100_000)
            // Standard Error: 7_437
            .saturating_add(Weight::from_ref_time(2_640_782).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_044 nanoseconds.
        Weight::from_ref_time(2_139_000)
            // Standard Error: 5_234
            .saturating_add(Weight::from_ref_time(547_525).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_060 nanoseconds.
        Weight::from_ref_time(977_372)
            // Standard Error: 4_237
            .saturating_add(Weight::from_ref_time(395_996).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_990 nanoseconds.
        Weight::from_ref_time(2_077_000)
            // Standard Error: 13_332
            .saturating_add(Weight::from_ref_time(1_847_162).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_031 nanoseconds.
        Weight::from_ref_time(2_112_000)
            // Standard Error: 10_721
            .saturating_add(Weight::from_ref_time(1_140_458).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_933 nanoseconds.
        Weight::from_ref_time(964_953)
            // Standard Error: 4_204
            .saturating_add(Weight::from_ref_time(338_925).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_012 nanoseconds.
        Weight::from_ref_time(2_381_116)
            // Standard Error: 1_821
            .saturating_add(Weight::from_ref_time(155_239).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_043 nanoseconds.
        Weight::from_ref_time(2_304_553)
            // Standard Error: 1_839
            .saturating_add(Weight::from_ref_time(176_595).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_002 nanoseconds.
        Weight::from_ref_time(2_078_000)
            // Standard Error: 12_861
            .saturating_add(Weight::from_ref_time(1_846_334).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_975 nanoseconds.
        Weight::from_ref_time(2_036_000)
            // Standard Error: 10_194
            .saturating_add(Weight::from_ref_time(1_163_305).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_057 nanoseconds.
        Weight::from_ref_time(2_136_000)
            // Standard Error: 13_925
            .saturating_add(Weight::from_ref_time(1_824_233).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_013 nanoseconds.
        Weight::from_ref_time(2_082_000)
            // Standard Error: 8_754
            .saturating_add(Weight::from_ref_time(1_165_262).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_942 nanoseconds.
        Weight::from_ref_time(2_026_000)
            // Standard Error: 13_241
            .saturating_add(Weight::from_ref_time(1_802_174).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_023 nanoseconds.
        Weight::from_ref_time(2_116_000)
            // Standard Error: 9_954
            .saturating_add(Weight::from_ref_time(1_118_851).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_018 nanoseconds.
        Weight::from_ref_time(2_079_000)
            // Standard Error: 11_120
            .saturating_add(Weight::from_ref_time(1_801_208).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_006 nanoseconds.
        Weight::from_ref_time(2_091_000)
            // Standard Error: 9_445
            .saturating_add(Weight::from_ref_time(1_137_199).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_077 nanoseconds.
        Weight::from_ref_time(2_153_000)
            // Standard Error: 12_554
            .saturating_add(Weight::from_ref_time(1_854_505).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_024 nanoseconds.
        Weight::from_ref_time(2_150_000)
            // Standard Error: 12_091
            .saturating_add(Weight::from_ref_time(1_161_904).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_960 nanoseconds.
        Weight::from_ref_time(2_059_000)
            // Standard Error: 13_163
            .saturating_add(Weight::from_ref_time(1_872_290).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_038 nanoseconds.
        Weight::from_ref_time(2_114_000)
            // Standard Error: 8_904
            .saturating_add(Weight::from_ref_time(1_142_613).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_002 nanoseconds.
        Weight::from_ref_time(2_078_000)
            // Standard Error: 12_903
            .saturating_add(Weight::from_ref_time(1_810_669).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_981 nanoseconds.
        Weight::from_ref_time(2_176_000)
            // Standard Error: 10_564
            .saturating_add(Weight::from_ref_time(1_134_243).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_018 nanoseconds.
        Weight::from_ref_time(2_117_000)
            // Standard Error: 10_776
            .saturating_add(Weight::from_ref_time(1_827_282).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_010 nanoseconds.
        Weight::from_ref_time(2_072_000)
            // Standard Error: 8_790
            .saturating_add(Weight::from_ref_time(1_146_242).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_007 nanoseconds.
        Weight::from_ref_time(2_116_000)
            // Standard Error: 14_989
            .saturating_add(Weight::from_ref_time(1_812_162).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_073 nanoseconds.
        Weight::from_ref_time(2_140_000)
            // Standard Error: 10_106
            .saturating_add(Weight::from_ref_time(1_168_744).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_122 nanoseconds.
        Weight::from_ref_time(2_166_000)
            // Standard Error: 11_814
            .saturating_add(Weight::from_ref_time(1_811_137).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_980 nanoseconds.
        Weight::from_ref_time(2_096_000)
            // Standard Error: 9_223
            .saturating_add(Weight::from_ref_time(1_125_607).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_073 nanoseconds.
        Weight::from_ref_time(2_165_000)
            // Standard Error: 8_654
            .saturating_add(Weight::from_ref_time(1_276_757).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_016 nanoseconds.
        Weight::from_ref_time(2_087_000)
            // Standard Error: 5_675
            .saturating_add(Weight::from_ref_time(636_207).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_075 nanoseconds.
        Weight::from_ref_time(2_116_000)
            // Standard Error: 10_779
            .saturating_add(Weight::from_ref_time(1_305_440).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_009 nanoseconds.
        Weight::from_ref_time(2_159_000)
            // Standard Error: 5_491
            .saturating_add(Weight::from_ref_time(632_034).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_045 nanoseconds.
        Weight::from_ref_time(2_126_000)
            // Standard Error: 12_961
            .saturating_add(Weight::from_ref_time(1_785_684).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_041 nanoseconds.
        Weight::from_ref_time(2_125_000)
            // Standard Error: 10_774
            .saturating_add(Weight::from_ref_time(1_192_205).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_991 nanoseconds.
        Weight::from_ref_time(2_679_548)
            // Standard Error: 11_464
            .saturating_add(Weight::from_ref_time(2_582_893).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_005 nanoseconds.
        Weight::from_ref_time(2_091_000)
            // Standard Error: 8_924
            .saturating_add(Weight::from_ref_time(2_403_579).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_017 nanoseconds.
        Weight::from_ref_time(2_078_000)
            // Standard Error: 10_254
            .saturating_add(Weight::from_ref_time(2_918_334).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_979 nanoseconds.
        Weight::from_ref_time(2_082_000)
            // Standard Error: 8_111
            .saturating_add(Weight::from_ref_time(2_459_892).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_002 nanoseconds.
        Weight::from_ref_time(2_105_000)
            // Standard Error: 16_011
            .saturating_add(Weight::from_ref_time(9_397_284).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_008 nanoseconds.
        Weight::from_ref_time(2_103_000)
            // Standard Error: 22_136
            .saturating_add(Weight::from_ref_time(7_768_171).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_092 nanoseconds.
        Weight::from_ref_time(1_203_806)
            // Standard Error: 17_518
            .saturating_add(Weight::from_ref_time(2_945_720).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_991 nanoseconds.
        Weight::from_ref_time(2_148_000)
            // Standard Error: 11_053
            .saturating_add(Weight::from_ref_time(2_391_987).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_031 nanoseconds.
        Weight::from_ref_time(2_107_000)
            // Standard Error: 10_876
            .saturating_add(Weight::from_ref_time(1_240_562).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_982 nanoseconds.
        Weight::from_ref_time(2_088_000)
            // Standard Error: 5_364
            .saturating_add(Weight::from_ref_time(599_133).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_969 nanoseconds.
        Weight::from_ref_time(2_044_000)
            // Standard Error: 11_597
            .saturating_add(Weight::from_ref_time(1_283_965).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_037 nanoseconds.
        Weight::from_ref_time(2_148_000)
            // Standard Error: 4_968
            .saturating_add(Weight::from_ref_time(635_199).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_058 nanoseconds.
        Weight::from_ref_time(2_148_000)
            // Standard Error: 8_563
            .saturating_add(Weight::from_ref_time(1_261_566).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_061 nanoseconds.
        Weight::from_ref_time(2_143_000)
            // Standard Error: 5_207
            .saturating_add(Weight::from_ref_time(618_836).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_009 nanoseconds.
        Weight::from_ref_time(2_080_000)
            // Standard Error: 8_539
            .saturating_add(Weight::from_ref_time(1_052_318).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_016 nanoseconds.
        Weight::from_ref_time(2_055_000)
            // Standard Error: 4_650
            .saturating_add(Weight::from_ref_time(563_192).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_016 nanoseconds.
        Weight::from_ref_time(2_080_000)
            // Standard Error: 8_647
            .saturating_add(Weight::from_ref_time(1_070_024).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_022 nanoseconds.
        Weight::from_ref_time(2_073_000)
            // Standard Error: 5_364
            .saturating_add(Weight::from_ref_time(561_727).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_083 nanoseconds.
        Weight::from_ref_time(2_177_000)
            // Standard Error: 7_293
            .saturating_add(Weight::from_ref_time(1_080_354).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_018 nanoseconds.
        Weight::from_ref_time(2_072_000)
            // Standard Error: 4_386
            .saturating_add(Weight::from_ref_time(543_126).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_020 nanoseconds.
        Weight::from_ref_time(2_081_000)
            // Standard Error: 9_372
            .saturating_add(Weight::from_ref_time(1_111_462).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_025 nanoseconds.
        Weight::from_ref_time(2_093_000)
            // Standard Error: 4_269
            .saturating_add(Weight::from_ref_time(547_916).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_043 nanoseconds.
        Weight::from_ref_time(2_112_000)
            // Standard Error: 8_781
            .saturating_add(Weight::from_ref_time(1_066_773).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_946 nanoseconds.
        Weight::from_ref_time(2_061_000)
            // Standard Error: 4_932
            .saturating_add(Weight::from_ref_time(553_069).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 766 nanoseconds.
        Weight::from_ref_time(798_000)
            // Standard Error: 1_178
            .saturating_add(Weight::from_ref_time(210_812).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `74 + c * (1024 ±0)`
        //  Estimated: `2542 + c * (1024 ±0)`
        // Minimum execution time: 2_607 nanoseconds.
        Weight::from_parts(2_693_000, 2542)
            // Standard Error: 1_153
            .saturating_add(Weight::from_ref_time(731_157).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 46_071 nanoseconds.
        Weight::from_ref_time(83_942_284)
            // Standard Error: 5_086
            .saturating_add(Weight::from_ref_time(2_199_213).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `847`
        //  Estimated: `17017`
        // Minimum execution time: 49_173 nanoseconds.
        Weight::from_parts(50_456_000, 17017)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `3010`
        // Minimum execution time: 65_364 nanoseconds.
        Weight::from_parts(46_215_804, 3010)
            // Standard Error: 37_679
            .saturating_add(Weight::from_ref_time(51_788_458).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `604`
        //  Estimated: `17714`
        // Minimum execution time: 45_912 nanoseconds.
        Weight::from_parts(62_017_646, 17714)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_341).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `55`
        //  Estimated: `13432`
        // Minimum execution time: 9_560_238 nanoseconds.
        Weight::from_parts(9_674_146_000, 13432)
            // Standard Error: 508_095
            .saturating_add(Weight::from_ref_time(28_243_773).saturating_mul(c.into()))
            // Standard Error: 30
            .saturating_add(Weight::from_ref_time(845).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `374`
        //  Estimated: `14759`
        // Minimum execution time: 47_067 nanoseconds.
        Weight::from_parts(36_826_447, 14759)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(1_190).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1042`
        //  Estimated: `30879`
        // Minimum execution time: 69_544 nanoseconds.
        Weight::from_parts(61_820_775, 30879)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(1_193).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `676`
        //  Estimated: `41136`
        // Minimum execution time: 260_443 nanoseconds.
        Weight::from_parts(271_338_560, 41136)
            .saturating_add(RocksDbWeight::get().reads(24_u64))
            .saturating_add(RocksDbWeight::get().writes(21_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `676`
        //  Estimated: `40641`
        // Minimum execution time: 272_721 nanoseconds.
        Weight::from_parts(283_729_004, 40641)
            .saturating_add(RocksDbWeight::get().reads(24_u64))
            .saturating_add(RocksDbWeight::get().writes(21_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `243 + c * (1075 ±0)`
        //  Estimated: `2997 + c * (2150 ±0)`
        // Minimum execution time: 50_830 nanoseconds.
        Weight::from_parts(51_118_000, 2997)
            // Standard Error: 24_950
            .saturating_add(Weight::from_ref_time(50_644_237).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_proof_size(2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 74_862 nanoseconds.
        Weight::from_ref_time(58_146_204)
            // Standard Error: 257_749
            .saturating_add(Weight::from_ref_time(136_090_035).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 206_475 nanoseconds.
        Weight::from_ref_time(205_378_672)
            // Standard Error: 310_232
            .saturating_add(Weight::from_ref_time(131_889_550).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 76_599 nanoseconds.
        Weight::from_ref_time(84_531_766)
            // Standard Error: 4_218
            .saturating_add(Weight::from_ref_time(3_446_929).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_248 nanoseconds.
        Weight::from_ref_time(131_747_947)
            // Standard Error: 12_102
            .saturating_add(Weight::from_ref_time(3_665_741).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_034 nanoseconds.
        Weight::from_ref_time(105_853_754)
            // Standard Error: 312_074
            .saturating_add(Weight::from_ref_time(183_872_728).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 76_577 nanoseconds.
        Weight::from_ref_time(61_780_406)
            // Standard Error: 259_973
            .saturating_add(Weight::from_ref_time(182_097_602).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 76_126 nanoseconds.
        Weight::from_ref_time(60_376_296)
            // Standard Error: 278_527
            .saturating_add(Weight::from_ref_time(182_406_380).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 76_210 nanoseconds.
        Weight::from_ref_time(61_196_171)
            // Standard Error: 271_157
            .saturating_add(Weight::from_ref_time(182_328_663).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 76_531 nanoseconds.
        Weight::from_ref_time(62_649_344)
            // Standard Error: 252_838
            .saturating_add(Weight::from_ref_time(182_510_255).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 77_578 nanoseconds.
        Weight::from_ref_time(62_354_246)
            // Standard Error: 261_820
            .saturating_add(Weight::from_ref_time(182_869_537).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 77_083 nanoseconds.
        Weight::from_ref_time(61_117_855)
            // Standard Error: 284_209
            .saturating_add(Weight::from_ref_time(184_043_025).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 77_127 nanoseconds.
        Weight::from_ref_time(58_738_870)
            // Standard Error: 276_933
            .saturating_add(Weight::from_ref_time(182_457_576).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 77_133 nanoseconds.
        Weight::from_ref_time(60_386_317)
            // Standard Error: 270_817
            .saturating_add(Weight::from_ref_time(183_013_468).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 549_285 nanoseconds.
        Weight::from_ref_time(618_102_568)
            // Standard Error: 371_569
            .saturating_add(Weight::from_ref_time(242_820_267).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 805_298 nanoseconds.
        Weight::from_ref_time(810_312_000)
            // Standard Error: 57_184
            .saturating_add(Weight::from_ref_time(13_634_279).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_392 nanoseconds.
        Weight::from_ref_time(61_462_428)
            // Standard Error: 259_542
            .saturating_add(Weight::from_ref_time(183_847_076).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_971 nanoseconds.
        Weight::from_ref_time(60_840_398)
            // Standard Error: 272_103
            .saturating_add(Weight::from_ref_time(183_392_193).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_613 nanoseconds.
        Weight::from_ref_time(96_203_759)
            // Standard Error: 278_314
            .saturating_add(Weight::from_ref_time(237_797_945).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 77_992 nanoseconds.
        Weight::from_ref_time(126_494_708)
            // Standard Error: 337_437
            .saturating_add(Weight::from_ref_time(350_185_213).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 432_809 nanoseconds.
        Weight::from_ref_time(438_074_000)
            // Standard Error: 54_034
            .saturating_add(Weight::from_ref_time(24_470_446).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_896 nanoseconds.
        Weight::from_ref_time(150_063_193)
            // Standard Error: 345_102
            .saturating_add(Weight::from_ref_time(353_232_826).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 436_955 nanoseconds.
        Weight::from_ref_time(441_435_000)
            // Standard Error: 62_208
            .saturating_add(Weight::from_ref_time(24_453_361).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 550_301 nanoseconds.
        Weight::from_ref_time(604_875_193)
            // Standard Error: 356_787
            .saturating_add(Weight::from_ref_time(359_753_735).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 908_514 nanoseconds.
        Weight::from_ref_time(1_100_260_113)
            // Standard Error: 13_078
            .saturating_add(Weight::from_ref_time(41_640_626).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 553_592 nanoseconds.
        Weight::from_ref_time(621_378_828)
            // Standard Error: 395_224
            .saturating_add(Weight::from_ref_time(366_524_067).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_input_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 910_868 nanoseconds.
        Weight::from_ref_time(1_111_236_437)
            // Standard Error: 13_614
            .saturating_add(Weight::from_ref_time(41_620_788).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_631 nanoseconds.
        Weight::from_ref_time(60_825_038)
            // Standard Error: 252_341
            .saturating_add(Weight::from_ref_time(189_771_919).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_751_355 nanoseconds.
        Weight::from_ref_time(3_876_725_758)
            // Standard Error: 248_379
            .saturating_add(Weight::from_ref_time(257_259_427).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 524_670 nanoseconds.
        Weight::from_ref_time(529_268_000)
            // Standard Error: 55_205
            .saturating_add(Weight::from_ref_time(34_013_050).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_753_943 nanoseconds.
        Weight::from_ref_time(3_876_767_625)
            // Standard Error: 295_847
            .saturating_add(Weight::from_ref_time(310_238_722).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_712_346 nanoseconds.
        Weight::from_ref_time(3_871_335_221)
            // Standard Error: 296_259
            .saturating_add(Weight::from_ref_time(318_898_171).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_905_044 nanoseconds.
        Weight::from_ref_time(4_004_317_143)
            // Standard Error: 383_390
            .saturating_add(Weight::from_ref_time(329_677_134).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 75_556 nanoseconds.
        Weight::from_ref_time(78_984_573)
            // Standard Error: 170_978
            .saturating_add(Weight::from_ref_time(23_214_726).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_796 nanoseconds.
        Weight::from_ref_time(90_520_113)
            // Standard Error: 1_190
            .saturating_add(Weight::from_ref_time(474_833).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_122 nanoseconds.
        Weight::from_ref_time(81_697_826)
            // Standard Error: 160_541
            .saturating_add(Weight::from_ref_time(22_859_073).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_559 nanoseconds.
        Weight::from_ref_time(84_715_760)
            // Standard Error: 987
            .saturating_add(Weight::from_ref_time(482_200).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_438 nanoseconds.
        Weight::from_ref_time(81_496_915)
            // Standard Error: 158_405
            .saturating_add(Weight::from_ref_time(21_463_634).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 77_556 nanoseconds.
        Weight::from_ref_time(81_400_313)
            // Standard Error: 183_299
            .saturating_add(Weight::from_ref_time(21_576_186).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_348 nanoseconds.
        Weight::from_ref_time(119_692_116)
            // Standard Error: 321_762
            .saturating_add(Weight::from_ref_time(251_286_934).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_568 nanoseconds.
        Weight::from_ref_time(96_999_000)
            // Standard Error: 2_931
            .saturating_add(Weight::from_ref_time(673_390).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 549_378 nanoseconds.
        Weight::from_ref_time(563_527_615)
            // Standard Error: 1_152_582
            .saturating_add(Weight::from_ref_time(35_444_834).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 585_731 nanoseconds.
        Weight::from_ref_time(596_703_666)
            // Standard Error: 1_061
            .saturating_add(Weight::from_ref_time(515_269).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 552_493 nanoseconds.
        Weight::from_ref_time(561_228_905)
            // Standard Error: 687_549
            .saturating_add(Weight::from_ref_time(25_063_744).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_input_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 575_258 nanoseconds.
        Weight::from_ref_time(577_862_388)
            // Standard Error: 2_375
            .saturating_add(Weight::from_ref_time(536_804).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_533 nanoseconds.
        Weight::from_ref_time(91_590_792)
            // Standard Error: 208_803
            .saturating_add(Weight::from_ref_time(12_198_157).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_637 nanoseconds.
        Weight::from_ref_time(88_849_136)
            // Standard Error: 849
            .saturating_add(Weight::from_ref_time(481_770).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_289 nanoseconds.
        Weight::from_ref_time(70_094_630)
            // Standard Error: 260_793
            .saturating_add(Weight::from_ref_time(183_203_111).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_577 nanoseconds.
        Weight::from_ref_time(66_848_849)
            // Standard Error: 294_102
            .saturating_add(Weight::from_ref_time(184_443_574).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 548_726 nanoseconds.
        Weight::from_ref_time(593_630_170)
            // Standard Error: 322_708
            .saturating_add(Weight::from_ref_time(194_962_359).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(_n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 760_740 nanoseconds.
        Weight::from_ref_time(3_017_133_261)
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_234_008 nanoseconds.
        Weight::from_ref_time(4_354_645_992)
            // Standard Error: 222_807
            .saturating_add(Weight::from_ref_time(202_585_420).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_462_564 nanoseconds.
        Weight::from_ref_time(4_400_031_524)
            // Standard Error: 13_609
            .saturating_add(Weight::from_ref_time(12_595_208).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_332 nanoseconds.
        Weight::from_ref_time(100_928_017)
            // Standard Error: 303_383
            .saturating_add(Weight::from_ref_time(194_641_137).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 260_370 nanoseconds.
        Weight::from_ref_time(262_587_000)
            // Standard Error: 54_293
            .saturating_add(Weight::from_ref_time(31_691_424).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_251 nanoseconds.
        Weight::from_ref_time(101_067_616)
            // Standard Error: 267_735
            .saturating_add(Weight::from_ref_time(237_097_149).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_493 nanoseconds.
        Weight::from_ref_time(64_970_201)
            // Standard Error: 274_639
            .saturating_add(Weight::from_ref_time(182_076_691).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 75_996 nanoseconds.
        Weight::from_ref_time(79_680_568)
            // Standard Error: 191_561
            .saturating_add(Weight::from_ref_time(26_010_981).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 75_990 nanoseconds.
        Weight::from_ref_time(79_842_376)
            // Standard Error: 188_741
            .saturating_add(Weight::from_ref_time(17_488_773).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_005 nanoseconds.
        Weight::from_ref_time(81_381_207)
            // Standard Error: 186_079
            .saturating_add(Weight::from_ref_time(15_865_592).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 77_648 nanoseconds.
        Weight::from_ref_time(81_326_286)
            // Standard Error: 152_555
            .saturating_add(Weight::from_ref_time(16_634_063).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 78_465 nanoseconds.
        Weight::from_ref_time(81_727_663)
            // Standard Error: 173_976
            .saturating_add(Weight::from_ref_time(15_456_386).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_621 nanoseconds.
        Weight::from_ref_time(196_016_527)
            // Standard Error: 299_103
            .saturating_add(Weight::from_ref_time(260_218_197).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_280 nanoseconds.
        Weight::from_ref_time(136_211_690)
            // Standard Error: 347_796
            .saturating_add(Weight::from_ref_time(425_418_440).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_638_889 nanoseconds.
        Weight::from_ref_time(50_742_010_000)
            // Standard Error: 351_678
            .saturating_add(Weight::from_ref_time(9_576_167).saturating_mul(p.into()))
            // Standard Error: 351_658
            .saturating_add(Weight::from_ref_time(156_339_734).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_441 nanoseconds.
        Weight::from_ref_time(137_700_595)
            // Standard Error: 368_223
            .saturating_add(Weight::from_ref_time(427_029_921).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_113_042 nanoseconds.
        Weight::from_ref_time(51_174_490_000)
            // Standard Error: 346_073
            .saturating_add(Weight::from_ref_time(9_421_492).saturating_mul(p.into()))
            // Standard Error: 346_053
            .saturating_add(Weight::from_ref_time(155_671_874).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 186_000 nanoseconds.
        Weight::from_ref_time(180_165_128)
            // Standard Error: 369_219
            .saturating_add(Weight::from_ref_time(385_226_688).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 560_000 nanoseconds.
        Weight::from_ref_time(495_268_611)
            // Standard Error: 13_235
            .saturating_add(Weight::from_ref_time(12_068_004).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_000 nanoseconds.
        Weight::from_ref_time(83_223_684)
            // Standard Error: 299_637
            .saturating_add(Weight::from_ref_time(5_826_315).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_000 nanoseconds.
        Weight::from_ref_time(82_873_951)
            // Standard Error: 1_405
            .saturating_add(Weight::from_ref_time(234_449).saturating_mul(n.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 76_022 nanoseconds.
        Weight::from_parts(108_540_550, 141)
            // Standard Error: 8_078
            .saturating_add(Weight::from_ref_time(11_627_922).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 74_706 nanoseconds.
        Weight::from_parts(76_284_000, 141)
            // Standard Error: 22_452
            .saturating_add(Weight::from_ref_time(36_979_328).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5068941`
        // Minimum execution time: 6_018_721 nanoseconds.
        Weight::from_parts(5_872_187_047, 5068941)
            // Standard Error: 59_918
            .saturating_add(Weight::from_ref_time(38_629_879).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65704 ±0)`
        //  Estimated: `1012 + p * (75606 ±0)`
        // Minimum execution time: 77_714 nanoseconds.
        Weight::from_parts(79_579_000, 1012)
            // Standard Error: 59_082
            .saturating_add(Weight::from_ref_time(45_749_587).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(75606).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `584 + p * (9879 ±2)`
        // Minimum execution time: 90_772 nanoseconds.
        Weight::from_parts(88_456_995, 584)
            // Standard Error: 52_198
            .saturating_add(Weight::from_ref_time(40_298_763).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `584 + p * (9879 ±2)`
        // Minimum execution time: 591_249 nanoseconds.
        Weight::from_parts(578_329_592, 584)
            // Standard Error: 91_049
            .saturating_add(Weight::from_ref_time(44_547_948).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `316941`
        // Minimum execution time: 970_466 nanoseconds.
        Weight::from_parts(977_477_818, 316941)
            // Standard Error: 70_808
            .saturating_add(Weight::from_ref_time(46_142_776).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_230_787 nanoseconds.
        Weight::from_ref_time(4_225_617_142)
            // Standard Error: 14_771
            .saturating_add(Weight::from_ref_time(3_356_389).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_228_536 nanoseconds.
        Weight::from_ref_time(4_224_689_104)
            // Standard Error: 14_673
            .saturating_add(Weight::from_ref_time(3_397_797).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_433_209 nanoseconds.
        Weight::from_ref_time(9_441_573_446)
            // Standard Error: 143_422
            .saturating_add(Weight::from_ref_time(16_657_823).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_155_451 nanoseconds.
        Weight::from_ref_time(9_550_949_860)
            // Standard Error: 154_366
            .saturating_add(Weight::from_ref_time(11_646_252).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_040 nanoseconds.
        Weight::from_ref_time(2_097_000)
            // Standard Error: 9_919
            .saturating_add(Weight::from_ref_time(3_794_751).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_086 nanoseconds.
        Weight::from_ref_time(2_189_000)
            // Standard Error: 5_070
            .saturating_add(Weight::from_ref_time(3_057_410).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_085 nanoseconds.
        Weight::from_ref_time(3_075_949)
            // Standard Error: 1_055
            .saturating_add(Weight::from_ref_time(1_562_199).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_079 nanoseconds.
        Weight::from_ref_time(2_158_000)
            // Standard Error: 5_463
            .saturating_add(Weight::from_ref_time(3_015_599).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_002 nanoseconds.
        Weight::from_ref_time(2_130_000)
            // Standard Error: 8_042
            .saturating_add(Weight::from_ref_time(5_261_699).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_540 nanoseconds.
        Weight::from_ref_time(3_855_994)
            // Standard Error: 2_711
            .saturating_add(Weight::from_ref_time(145_536).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_074 nanoseconds.
        Weight::from_ref_time(3_119_444)
            // Standard Error: 5_960
            .saturating_add(Weight::from_ref_time(2_582_339).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(2_582_339 -
            2_494_490).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_046 nanoseconds.
        Weight::from_ref_time(2_359_778)
            // Standard Error: 12_202
            .saturating_add(Weight::from_ref_time(2_494_490).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_379 nanoseconds.
        Weight::from_ref_time(9_543_271)
            // Standard Error: 25_741
            .saturating_add(Weight::from_ref_time(10_044_008).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 13_427 nanoseconds.
        Weight::from_ref_time(2_973_666)
            // Standard Error: 8_038
            .saturating_add(Weight::from_ref_time(1_195_663).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_117 nanoseconds.
        Weight::from_ref_time(5_388_159)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_071 nanoseconds.
        Weight::from_ref_time(1_608_222)
            // Standard Error: 3_899
            .saturating_add(Weight::from_ref_time(226_964).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_032 nanoseconds.
        Weight::from_ref_time(2_125_000)
            // Standard Error: 8_237
            .saturating_add(Weight::from_ref_time(708_558).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_003 nanoseconds.
        Weight::from_ref_time(2_130_000)
            // Standard Error: 5_759
            .saturating_add(Weight::from_ref_time(735_112).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_827 nanoseconds.
        Weight::from_ref_time(1_569_854)
            // Standard Error: 12_864
            .saturating_add(Weight::from_ref_time(749_877).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_789 nanoseconds.
        Weight::from_ref_time(5_855_000)
            // Standard Error: 11_868
            .saturating_add(Weight::from_ref_time(1_388_441).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_268 nanoseconds.
        Weight::from_ref_time(3_406_000)
            // Standard Error: 9_568
            .saturating_add(Weight::from_ref_time(6_752_014).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_029 nanoseconds.
        Weight::from_ref_time(2_143_000)
            // Standard Error: 8_572
            .saturating_add(Weight::from_ref_time(3_388_429).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_059 nanoseconds.
        Weight::from_ref_time(2_138_000)
            // Standard Error: 7_920
            .saturating_add(Weight::from_ref_time(3_115_765).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_079 nanoseconds.
        Weight::from_ref_time(2_130_000)
            // Standard Error: 8_290
            .saturating_add(Weight::from_ref_time(3_134_939).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_997 nanoseconds.
        Weight::from_ref_time(2_100_000)
            // Standard Error: 7_437
            .saturating_add(Weight::from_ref_time(2_640_782).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_044 nanoseconds.
        Weight::from_ref_time(2_139_000)
            // Standard Error: 5_234
            .saturating_add(Weight::from_ref_time(547_525).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_060 nanoseconds.
        Weight::from_ref_time(977_372)
            // Standard Error: 4_237
            .saturating_add(Weight::from_ref_time(395_996).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_990 nanoseconds.
        Weight::from_ref_time(2_077_000)
            // Standard Error: 13_332
            .saturating_add(Weight::from_ref_time(1_847_162).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_031 nanoseconds.
        Weight::from_ref_time(2_112_000)
            // Standard Error: 10_721
            .saturating_add(Weight::from_ref_time(1_140_458).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_933 nanoseconds.
        Weight::from_ref_time(964_953)
            // Standard Error: 4_204
            .saturating_add(Weight::from_ref_time(338_925).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_012 nanoseconds.
        Weight::from_ref_time(2_381_116)
            // Standard Error: 1_821
            .saturating_add(Weight::from_ref_time(155_239).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_043 nanoseconds.
        Weight::from_ref_time(2_304_553)
            // Standard Error: 1_839
            .saturating_add(Weight::from_ref_time(176_595).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_002 nanoseconds.
        Weight::from_ref_time(2_078_000)
            // Standard Error: 12_861
            .saturating_add(Weight::from_ref_time(1_846_334).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_975 nanoseconds.
        Weight::from_ref_time(2_036_000)
            // Standard Error: 10_194
            .saturating_add(Weight::from_ref_time(1_163_305).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_057 nanoseconds.
        Weight::from_ref_time(2_136_000)
            // Standard Error: 13_925
            .saturating_add(Weight::from_ref_time(1_824_233).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_013 nanoseconds.
        Weight::from_ref_time(2_082_000)
            // Standard Error: 8_754
            .saturating_add(Weight::from_ref_time(1_165_262).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_942 nanoseconds.
        Weight::from_ref_time(2_026_000)
            // Standard Error: 13_241
            .saturating_add(Weight::from_ref_time(1_802_174).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_023 nanoseconds.
        Weight::from_ref_time(2_116_000)
            // Standard Error: 9_954
            .saturating_add(Weight::from_ref_time(1_118_851).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_018 nanoseconds.
        Weight::from_ref_time(2_079_000)
            // Standard Error: 11_120
            .saturating_add(Weight::from_ref_time(1_801_208).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_006 nanoseconds.
        Weight::from_ref_time(2_091_000)
            // Standard Error: 9_445
            .saturating_add(Weight::from_ref_time(1_137_199).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_077 nanoseconds.
        Weight::from_ref_time(2_153_000)
            // Standard Error: 12_554
            .saturating_add(Weight::from_ref_time(1_854_505).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_024 nanoseconds.
        Weight::from_ref_time(2_150_000)
            // Standard Error: 12_091
            .saturating_add(Weight::from_ref_time(1_161_904).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_960 nanoseconds.
        Weight::from_ref_time(2_059_000)
            // Standard Error: 13_163
            .saturating_add(Weight::from_ref_time(1_872_290).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_038 nanoseconds.
        Weight::from_ref_time(2_114_000)
            // Standard Error: 8_904
            .saturating_add(Weight::from_ref_time(1_142_613).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_002 nanoseconds.
        Weight::from_ref_time(2_078_000)
            // Standard Error: 12_903
            .saturating_add(Weight::from_ref_time(1_810_669).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_981 nanoseconds.
        Weight::from_ref_time(2_176_000)
            // Standard Error: 10_564
            .saturating_add(Weight::from_ref_time(1_134_243).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_018 nanoseconds.
        Weight::from_ref_time(2_117_000)
            // Standard Error: 10_776
            .saturating_add(Weight::from_ref_time(1_827_282).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_010 nanoseconds.
        Weight::from_ref_time(2_072_000)
            // Standard Error: 8_790
            .saturating_add(Weight::from_ref_time(1_146_242).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_007 nanoseconds.
        Weight::from_ref_time(2_116_000)
            // Standard Error: 14_989
            .saturating_add(Weight::from_ref_time(1_812_162).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_073 nanoseconds.
        Weight::from_ref_time(2_140_000)
            // Standard Error: 10_106
            .saturating_add(Weight::from_ref_time(1_168_744).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_122 nanoseconds.
        Weight::from_ref_time(2_166_000)
            // Standard Error: 11_814
            .saturating_add(Weight::from_ref_time(1_811_137).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_980 nanoseconds.
        Weight::from_ref_time(2_096_000)
            // Standard Error: 9_223
            .saturating_add(Weight::from_ref_time(1_125_607).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_073 nanoseconds.
        Weight::from_ref_time(2_165_000)
            // Standard Error: 8_654
            .saturating_add(Weight::from_ref_time(1_276_757).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_016 nanoseconds.
        Weight::from_ref_time(2_087_000)
            // Standard Error: 5_675
            .saturating_add(Weight::from_ref_time(636_207).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_075 nanoseconds.
        Weight::from_ref_time(2_116_000)
            // Standard Error: 10_779
            .saturating_add(Weight::from_ref_time(1_305_440).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_009 nanoseconds.
        Weight::from_ref_time(2_159_000)
            // Standard Error: 5_491
            .saturating_add(Weight::from_ref_time(632_034).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_045 nanoseconds.
        Weight::from_ref_time(2_126_000)
            // Standard Error: 12_961
            .saturating_add(Weight::from_ref_time(1_785_684).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_041 nanoseconds.
        Weight::from_ref_time(2_125_000)
            // Standard Error: 10_774
            .saturating_add(Weight::from_ref_time(1_192_205).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_991 nanoseconds.
        Weight::from_ref_time(2_679_548)
            // Standard Error: 11_464
            .saturating_add(Weight::from_ref_time(2_582_893).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_005 nanoseconds.
        Weight::from_ref_time(2_091_000)
            // Standard Error: 8_924
            .saturating_add(Weight::from_ref_time(2_403_579).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_017 nanoseconds.
        Weight::from_ref_time(2_078_000)
            // Standard Error: 10_254
            .saturating_add(Weight::from_ref_time(2_918_334).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_979 nanoseconds.
        Weight::from_ref_time(2_082_000)
            // Standard Error: 8_111
            .saturating_add(Weight::from_ref_time(2_459_892).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_002 nanoseconds.
        Weight::from_ref_time(2_105_000)
            // Standard Error: 16_011
            .saturating_add(Weight::from_ref_time(9_397_284).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_008 nanoseconds.
        Weight::from_ref_time(2_103_000)
            // Standard Error: 22_136
            .saturating_add(Weight::from_ref_time(7_768_171).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_092 nanoseconds.
        Weight::from_ref_time(1_203_806)
            // Standard Error: 17_518
            .saturating_add(Weight::from_ref_time(2_945_720).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_991 nanoseconds.
        Weight::from_ref_time(2_148_000)
            // Standard Error: 11_053
            .saturating_add(Weight::from_ref_time(2_391_987).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_031 nanoseconds.
        Weight::from_ref_time(2_107_000)
            // Standard Error: 10_876
            .saturating_add(Weight::from_ref_time(1_240_562).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_982 nanoseconds.
        Weight::from_ref_time(2_088_000)
            // Standard Error: 5_364
            .saturating_add(Weight::from_ref_time(599_133).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_969 nanoseconds.
        Weight::from_ref_time(2_044_000)
            // Standard Error: 11_597
            .saturating_add(Weight::from_ref_time(1_283_965).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_037 nanoseconds.
        Weight::from_ref_time(2_148_000)
            // Standard Error: 4_968
            .saturating_add(Weight::from_ref_time(635_199).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_058 nanoseconds.
        Weight::from_ref_time(2_148_000)
            // Standard Error: 8_563
            .saturating_add(Weight::from_ref_time(1_261_566).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_061 nanoseconds.
        Weight::from_ref_time(2_143_000)
            // Standard Error: 5_207
            .saturating_add(Weight::from_ref_time(618_836).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_009 nanoseconds.
        Weight::from_ref_time(2_080_000)
            // Standard Error: 8_539
            .saturating_add(Weight::from_ref_time(1_052_318).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_016 nanoseconds.
        Weight::from_ref_time(2_055_000)
            // Standard Error: 4_650
            .saturating_add(Weight::from_ref_time(563_192).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_016 nanoseconds.
        Weight::from_ref_time(2_080_000)
            // Standard Error: 8_647
            .saturating_add(Weight::from_ref_time(1_070_024).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_022 nanoseconds.
        Weight::from_ref_time(2_073_000)
            // Standard Error: 5_364
            .saturating_add(Weight::from_ref_time(561_727).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_083 nanoseconds.
        Weight::from_ref_time(2_177_000)
            // Standard Error: 7_293
            .saturating_add(Weight::from_ref_time(1_080_354).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_018 nanoseconds.
        Weight::from_ref_time(2_072_000)
            // Standard Error: 4_386
            .saturating_add(Weight::from_ref_time(543_126).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_020 nanoseconds.
        Weight::from_ref_time(2_081_000)
            // Standard Error: 9_372
            .saturating_add(Weight::from_ref_time(1_111_462).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_025 nanoseconds.
        Weight::from_ref_time(2_093_000)
            // Standard Error: 4_269
            .saturating_add(Weight::from_ref_time(547_916).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_043 nanoseconds.
        Weight::from_ref_time(2_112_000)
            // Standard Error: 8_781
            .saturating_add(Weight::from_ref_time(1_066_773).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_946 nanoseconds.
        Weight::from_ref_time(2_061_000)
            // Standard Error: 4_932
            .saturating_add(Weight::from_ref_time(553_069).saturating_mul(r.into()))
    }
}
