// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-04, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_message_with_voucher(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn send_reply_with_voucher(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 968_000 picoseconds.
        Weight::from_parts(1_022_000, 0)
            // Standard Error: 972
            .saturating_add(Weight::from_parts(213_600, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_803_000 picoseconds.
        Weight::from_parts(2_889_000, 3506)
            // Standard Error: 902
            .saturating_add(Weight::from_parts(669_261, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 139_515_000 picoseconds.
        Weight::from_parts(156_613_000, 0)
            // Standard Error: 281_166
            .saturating_add(Weight::from_parts(107_348_285, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `42236`
        // Minimum execution time: 85_044_000 picoseconds.
        Weight::from_parts(87_703_000, 42236)
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `886`
        //  Estimated: `21261`
        // Minimum execution time: 54_966_000 picoseconds.
        Weight::from_parts(56_174_000, 21261)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `534`
        //  Estimated: `17070`
        // Minimum execution time: 29_617_000 picoseconds.
        Weight::from_parts(30_270_000, 17070)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_485_000 picoseconds.
        Weight::from_parts(6_977_028, 7640)
            // Standard Error: 38_828
            .saturating_add(Weight::from_parts(15_377_549, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1364 + c * (16389 ±0)`
        //  Estimated: `41434 + c * (131112 ±0)`
        // Minimum execution time: 69_932_000 picoseconds.
        Weight::from_parts(70_888_000, 41434)
            // Standard Error: 633_029
            .saturating_add(Weight::from_parts(83_609_914, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 62_090_000 picoseconds.
        Weight::from_parts(49_679_401, 4990)
            // Standard Error: 44_620
            .saturating_add(Weight::from_parts(51_946_604, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `738`
        //  Estimated: `39375`
        // Minimum execution time: 65_310_000 picoseconds.
        Weight::from_parts(99_216_535, 39375)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_568, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `235`
        //  Estimated: `34312`
        // Minimum execution time: 10_902_325_000 picoseconds.
        Weight::from_parts(227_539_821, 34312)
            // Standard Error: 156_726
            .saturating_add(Weight::from_parts(52_158_431, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_524, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `348`
        //  Estimated: `23853`
        // Minimum execution time: 57_336_000 picoseconds.
        Weight::from_parts(38_058_895, 23853)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_154, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `451`
        //  Estimated: `27177`
        // Minimum execution time: 60_926_000 picoseconds.
        Weight::from_parts(54_882_575, 27177)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_132, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `978`
        //  Estimated: `42227`
        // Minimum execution time: 84_609_000 picoseconds.
        Weight::from_parts(78_549_155, 42227)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_159, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1081`
        //  Estimated: `45757`
        // Minimum execution time: 95_291_000 picoseconds.
        Weight::from_parts(74_365_606, 45757)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_184, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 471_739_000 picoseconds.
        Weight::from_parts(545_536_535, 74319)
            .saturating_add(T::DbWeight::get().reads(27_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 522_464_000 picoseconds.
        Weight::from_parts(611_438_478, 74319)
            .saturating_add(T::DbWeight::get().reads(27_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 47_131_000 picoseconds.
        Weight::from_parts(47_744_000, 3899)
            // Standard Error: 46_478
            .saturating_add(Weight::from_parts(50_225_006, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 288_732_000 picoseconds.
        Weight::from_parts(330_562_229, 0)
            // Standard Error: 991_113
            .saturating_add(Weight::from_parts(425_372_338, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 727_679_000 picoseconds.
        Weight::from_parts(747_311_545, 0)
            // Standard Error: 1_130_910
            .saturating_add(Weight::from_parts(427_645_686, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 327_874_000 picoseconds.
        Weight::from_parts(357_617_402, 0)
            // Standard Error: 10_514
            .saturating_add(Weight::from_parts(5_185_816, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 392_456_000 picoseconds.
        Weight::from_parts(434_505_969, 0)
            // Standard Error: 13_502
            .saturating_add(Weight::from_parts(5_272_266, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 310_419_000 picoseconds.
        Weight::from_parts(401_469_853, 0)
            // Standard Error: 364_396
            .saturating_add(Weight::from_parts(307_565_042, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 301_560_000 picoseconds.
        Weight::from_parts(371_553_368, 0)
            // Standard Error: 274_339
            .saturating_add(Weight::from_parts(292_543_120, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 295_377_000 picoseconds.
        Weight::from_parts(359_860_161, 0)
            // Standard Error: 273_588
            .saturating_add(Weight::from_parts(292_438_435, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 292_838_000 picoseconds.
        Weight::from_parts(353_254_534, 0)
            // Standard Error: 234_515
            .saturating_add(Weight::from_parts(292_831_820, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 297_296_000 picoseconds.
        Weight::from_parts(358_401_175, 0)
            // Standard Error: 277_735
            .saturating_add(Weight::from_parts(290_483_825, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 310_760_000 picoseconds.
        Weight::from_parts(362_210_073, 0)
            // Standard Error: 265_642
            .saturating_add(Weight::from_parts(294_145_473, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 272_530_000 picoseconds.
        Weight::from_parts(356_451_493, 0)
            // Standard Error: 284_986
            .saturating_add(Weight::from_parts(291_906_173, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 300_074_000 picoseconds.
        Weight::from_parts(363_034_702, 0)
            // Standard Error: 194_695
            .saturating_add(Weight::from_parts(291_971_979, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 803_884_000 picoseconds.
        Weight::from_parts(928_914_472, 0)
            // Standard Error: 475_862
            .saturating_add(Weight::from_parts(389_625_582, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_157_695_000 picoseconds.
        Weight::from_parts(1_206_556_000, 0)
            // Standard Error: 49_775
            .saturating_add(Weight::from_parts(13_144_641, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 308_024_000 picoseconds.
        Weight::from_parts(343_310_859, 0)
            // Standard Error: 253_116
            .saturating_add(Weight::from_parts(297_833_368, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 305_570_000 picoseconds.
        Weight::from_parts(350_435_352, 0)
            // Standard Error: 245_896
            .saturating_add(Weight::from_parts(298_020_179, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 304_119_000 picoseconds.
        Weight::from_parts(366_493_700, 0)
            // Standard Error: 256_927
            .saturating_add(Weight::from_parts(372_533_078, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 323_525_000 picoseconds.
        Weight::from_parts(389_214_000, 0)
            // Standard Error: 4_662_127
            .saturating_add(Weight::from_parts(1_394_059_522, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 304_270_000 picoseconds.
        Weight::from_parts(379_167_544, 0)
            // Standard Error: 401_951
            .saturating_add(Weight::from_parts(542_984_164, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 860_394_000 picoseconds.
        Weight::from_parts(875_472_000, 0)
            // Standard Error: 59_203
            .saturating_add(Weight::from_parts(21_420_168, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 299_716_000 picoseconds.
        Weight::from_parts(402_276_361, 0)
            // Standard Error: 374_266
            .saturating_add(Weight::from_parts(552_751_944, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 855_584_000 picoseconds.
        Weight::from_parts(882_155_000, 0)
            // Standard Error: 60_888
            .saturating_add(Weight::from_parts(21_718_485, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 856_824_000 picoseconds.
        Weight::from_parts(1_026_102_463, 0)
            // Standard Error: 481_666
            .saturating_add(Weight::from_parts(560_989_178, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 860_698_000 picoseconds.
        Weight::from_parts(1_006_244_027, 0)
            // Standard Error: 426_130
            .saturating_add(Weight::from_parts(579_511_309, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 318_498_000 picoseconds.
        Weight::from_parts(356_086_152, 0)
            // Standard Error: 223_622
            .saturating_add(Weight::from_parts(306_252_780, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_313_750_000 picoseconds.
        Weight::from_parts(6_570_691_394, 0)
            // Standard Error: 1_050_366
            .saturating_add(Weight::from_parts(500_206_669, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_054_223_000 picoseconds.
        Weight::from_parts(1_087_636_000, 0)
            // Standard Error: 51_012
            .saturating_add(Weight::from_parts(29_600_352, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_377_088_000 picoseconds.
        Weight::from_parts(6_524_678_946, 0)
            // Standard Error: 1_075_331
            .saturating_add(Weight::from_parts(556_854_143, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_353_843_000 picoseconds.
        Weight::from_parts(6_439_108_530, 0)
            // Standard Error: 1_193_670
            .saturating_add(Weight::from_parts(597_826_391, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 443_740_000 picoseconds.
        Weight::from_parts(569_103_445, 0)
            // Standard Error: 384_881
            .saturating_add(Weight::from_parts(546_778_197, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 995_873_000 picoseconds.
        Weight::from_parts(1_051_289_000, 0)
            // Standard Error: 59_379
            .saturating_add(Weight::from_parts(21_513_331, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_494_933_000 picoseconds.
        Weight::from_parts(6_621_304_476, 0)
            // Standard Error: 1_183_440
            .saturating_add(Weight::from_parts(581_707_576, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 269_894_000 picoseconds.
        Weight::from_parts(359_073_195, 0)
            // Standard Error: 2_950_012
            .saturating_add(Weight::from_parts(25_057_804, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 335_126_000 picoseconds.
        Weight::from_parts(373_183_928, 0)
            // Standard Error: 1_312
            .saturating_add(Weight::from_parts(429_345, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 265_543_000 picoseconds.
        Weight::from_parts(358_708_948, 0)
            // Standard Error: 3_303_712
            .saturating_add(Weight::from_parts(27_487_451, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 343_128_000 picoseconds.
        Weight::from_parts(369_982_542, 0)
            // Standard Error: 1_264
            .saturating_add(Weight::from_parts(430_951, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 272_255_000 picoseconds.
        Weight::from_parts(357_520_559, 0)
            // Standard Error: 2_968_368
            .saturating_add(Weight::from_parts(16_278_940, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 276_748_000 picoseconds.
        Weight::from_parts(355_930_128, 0)
            // Standard Error: 3_255_174
            .saturating_add(Weight::from_parts(28_821_371, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 309_209_000 picoseconds.
        Weight::from_parts(379_433_324, 0)
            // Standard Error: 405_302
            .saturating_add(Weight::from_parts(398_085_680, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 327_643_000 picoseconds.
        Weight::from_parts(70_199_763, 0)
            // Standard Error: 4_437
            .saturating_add(Weight::from_parts(683_106, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(_r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 775_546_000 picoseconds.
        Weight::from_parts(875_591_571, 0)
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 793_852_000 picoseconds.
        Weight::from_parts(875_956_532, 0)
            // Standard Error: 5_632_054
            .saturating_add(Weight::from_parts(48_119_667, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 279_721_000 picoseconds.
        Weight::from_parts(364_354_436, 0)
            // Standard Error: 2_995_597
            .saturating_add(Weight::from_parts(25_548_263, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 326_640_000 picoseconds.
        Weight::from_parts(369_289_525, 0)
            // Standard Error: 1_322
            .saturating_add(Weight::from_parts(427_659, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 290_564_000 picoseconds.
        Weight::from_parts(362_854_106, 0)
            // Standard Error: 3_014_577
            .saturating_add(Weight::from_parts(13_167_393, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 331_764_000 picoseconds.
        Weight::from_parts(364_614_945, 0)
            // Standard Error: 1_234
            .saturating_add(Weight::from_parts(429_688, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 285_743_000 picoseconds.
        Weight::from_parts(342_606_837, 0)
            // Standard Error: 205_795
            .saturating_add(Weight::from_parts(298_090_824, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 308_335_000 picoseconds.
        Weight::from_parts(352_181_912, 0)
            // Standard Error: 254_419
            .saturating_add(Weight::from_parts(297_757_008, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 794_830_000 picoseconds.
        Weight::from_parts(901_425_509, 0)
            // Standard Error: 371_218
            .saturating_add(Weight::from_parts(323_213_763, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 812_448_000 picoseconds.
        Weight::from_parts(885_308_372, 0)
            // Standard Error: 2_042
            .saturating_add(Weight::from_parts(129_707, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_892_610_000 picoseconds.
        Weight::from_parts(7_159_547_048, 0)
            // Standard Error: 1_297_138
            .saturating_add(Weight::from_parts(431_813_384, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_331_482_000 picoseconds.
        Weight::from_parts(7_303_231_164, 0)
            // Standard Error: 13_650
            .saturating_add(Weight::from_parts(12_490_464, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 292_400_000 picoseconds.
        Weight::from_parts(380_859_718, 0)
            // Standard Error: 307_635
            .saturating_add(Weight::from_parts(313_207_063, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 497_282_000 picoseconds.
        Weight::from_parts(547_580_000, 0)
            // Standard Error: 49_147
            .saturating_add(Weight::from_parts(25_641_213, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 287_161_000 picoseconds.
        Weight::from_parts(349_284_234, 0)
            // Standard Error: 209_139
            .saturating_add(Weight::from_parts(292_383_604, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 274_382_000 picoseconds.
        Weight::from_parts(352_700_006, 0)
            // Standard Error: 2_980_916
            .saturating_add(Weight::from_parts(32_982_593, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 269_733_000 picoseconds.
        Weight::from_parts(347_585_822, 0)
            // Standard Error: 2_862_518
            .saturating_add(Weight::from_parts(6_790_077, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 279_240_000 picoseconds.
        Weight::from_parts(344_959_091, 0)
            // Standard Error: 3_128_042
            .saturating_add(Weight::from_parts(8_964_508, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 277_982_000 picoseconds.
        Weight::from_parts(351_731_467, 0)
            // Standard Error: 2_927_096
            .saturating_add(Weight::from_parts(15_159_732, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 279_772_000 picoseconds.
        Weight::from_parts(347_438_826, 0)
            // Standard Error: 2_893_764
            .saturating_add(Weight::from_parts(25_822_373, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 374_725_000 picoseconds.
        Weight::from_parts(469_479_645, 0)
            // Standard Error: 353_150
            .saturating_add(Weight::from_parts(408_339_045, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 334_358_000 picoseconds.
        Weight::from_parts(382_577_267, 0)
            // Standard Error: 527_902
            .saturating_add(Weight::from_parts(639_341_500, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_835_628_000 picoseconds.
        Weight::from_parts(44_403_078_000, 0)
            // Standard Error: 266_360
            .saturating_add(Weight::from_parts(8_030_914, 0).saturating_mul(p.into()))
            // Standard Error: 266_347
            .saturating_add(Weight::from_parts(176_694_323, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 331_174_000 picoseconds.
        Weight::from_parts(380_008_753, 0)
            // Standard Error: 517_673
            .saturating_add(Weight::from_parts(653_381_858, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_103_510_000 picoseconds.
        Weight::from_parts(44_981_163_000, 0)
            // Standard Error: 263_974
            .saturating_add(Weight::from_parts(7_628_990, 0).saturating_mul(p.into()))
            // Standard Error: 263_961
            .saturating_add(Weight::from_parts(176_618_895, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 298_731_000 picoseconds.
        Weight::from_parts(373_074_504, 0)
            // Standard Error: 94_640
            .saturating_add(Weight::from_parts(4_851_279, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 301_035_000 picoseconds.
        Weight::from_parts(335_483_805, 1131)
            // Standard Error: 10_001
            .saturating_add(Weight::from_parts(15_619_806, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 294_231_000 picoseconds.
        Weight::from_parts(314_897_000, 1131)
            // Standard Error: 44_980
            .saturating_add(Weight::from_parts(42_453_368, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_250_972_000 picoseconds.
        Weight::from_parts(8_153_642_142, 5069931)
            // Standard Error: 61_319
            .saturating_add(Weight::from_parts(44_012_203, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 291_569_000 picoseconds.
        Weight::from_parts(112_020_508, 1939)
            // Standard Error: 42_237
            .saturating_add(Weight::from_parts(52_467_006, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 318_024_000 picoseconds.
        Weight::from_parts(377_263_274, 1131)
            // Standard Error: 73_458
            .saturating_add(Weight::from_parts(36_116_857, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 848_759_000 picoseconds.
        Weight::from_parts(887_148_154, 1496)
            // Standard Error: 240_276
            .saturating_add(Weight::from_parts(50_596_515, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_317_825_000 picoseconds.
        Weight::from_parts(1_383_447_564, 317931)
            // Standard Error: 296_520
            .saturating_add(Weight::from_parts(49_190_237, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_376_018_000 picoseconds.
        Weight::from_parts(4_393_110_835, 0)
            // Standard Error: 10_195
            .saturating_add(Weight::from_parts(3_278_867, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_368_787_000 picoseconds.
        Weight::from_parts(4_392_022_033, 0)
            // Standard Error: 10_859
            .saturating_add(Weight::from_parts(3_322_239, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_856_244_000 picoseconds.
        Weight::from_parts(10_817_553_255, 0)
            // Standard Error: 172_430
            .saturating_add(Weight::from_parts(18_246_859, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_492_050_000 picoseconds.
        Weight::from_parts(11_219_411_423, 0)
            // Standard Error: 220_664
            .saturating_add(Weight::from_parts(12_574_930, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_193_000 picoseconds.
        Weight::from_parts(745_265, 0)
            // Standard Error: 11_588
            .saturating_add(Weight::from_parts(3_726_963, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_033_000 picoseconds.
        Weight::from_parts(2_005_905, 0)
            // Standard Error: 6_289
            .saturating_add(Weight::from_parts(2_978_228, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_300_000 picoseconds.
        Weight::from_parts(3_735_385, 0)
            // Standard Error: 2_789
            .saturating_add(Weight::from_parts(1_558_982, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_970_000 picoseconds.
        Weight::from_parts(3_078_000, 0)
            // Standard Error: 8_221
            .saturating_add(Weight::from_parts(2_894_807, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_165_000 picoseconds.
        Weight::from_parts(10_332_450, 0)
            // Standard Error: 20_320
            .saturating_add(Weight::from_parts(4_428_524, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_522_000 picoseconds.
        Weight::from_parts(5_741_269, 0)
            // Standard Error: 1_112
            .saturating_add(Weight::from_parts(161_678, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_154_000 picoseconds.
        Weight::from_parts(6_292_985, 0)
            // Standard Error: 8_769
            .saturating_add(Weight::from_parts(2_580_569, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_580_569 -
            2_419_367, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_211_000 picoseconds.
        Weight::from_parts(5_049_401, 0)
            // Standard Error: 12_743
            .saturating_add(Weight::from_parts(2_419_367, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_492_000 picoseconds.
        Weight::from_parts(27_102_548, 0)
            // Standard Error: 33_811
            .saturating_add(Weight::from_parts(8_841_448, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 13_696_000 picoseconds.
        Weight::from_parts(4_401_618, 0)
            // Standard Error: 7_257
            .saturating_add(Weight::from_parts(1_181_433, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_108_000 picoseconds.
        Weight::from_parts(6_721_865, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_941_000 picoseconds.
        Weight::from_parts(2_053_960, 0)
            // Standard Error: 3_078
            .saturating_add(Weight::from_parts(302_069, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_953_000 picoseconds.
        Weight::from_parts(3_022_000, 0)
            // Standard Error: 3_634
            .saturating_add(Weight::from_parts(720_385, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_038_000 picoseconds.
        Weight::from_parts(3_239_000, 0)
            // Standard Error: 5_427
            .saturating_add(Weight::from_parts(761_270, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_457_000 picoseconds.
        Weight::from_parts(4_966_919, 0)
            // Standard Error: 5_332
            .saturating_add(Weight::from_parts(713_364, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_381_000 picoseconds.
        Weight::from_parts(7_536_000, 0)
            // Standard Error: 9_279
            .saturating_add(Weight::from_parts(1_313_397, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 17_680_000 picoseconds.
        Weight::from_parts(14_428_995, 0)
            // Standard Error: 10_543
            .saturating_add(Weight::from_parts(7_239_831, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_159_000 picoseconds.
        Weight::from_parts(3_396_000, 0)
            // Standard Error: 6_444
            .saturating_add(Weight::from_parts(3_262_940, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_971_000 picoseconds.
        Weight::from_parts(3_360_000, 0)
            // Standard Error: 5_913
            .saturating_add(Weight::from_parts(3_025_268, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_796_000 picoseconds.
        Weight::from_parts(3_220_000, 0)
            // Standard Error: 6_032
            .saturating_add(Weight::from_parts(2_990_871, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_039_000 picoseconds.
        Weight::from_parts(3_663_000, 0)
            // Standard Error: 5_162
            .saturating_add(Weight::from_parts(2_538_743, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_022_000 picoseconds.
        Weight::from_parts(23_170, 0)
            // Standard Error: 6_541
            .saturating_add(Weight::from_parts(693_271, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_981_000 picoseconds.
        Weight::from_parts(1_850_324, 0)
            // Standard Error: 4_131
            .saturating_add(Weight::from_parts(430_795, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_045_000 picoseconds.
        Weight::from_parts(3_377_000, 0)
            // Standard Error: 9_823
            .saturating_add(Weight::from_parts(1_780_779, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_099_000 picoseconds.
        Weight::from_parts(3_205_000, 0)
            // Standard Error: 7_451
            .saturating_add(Weight::from_parts(1_105_736, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_039_000 picoseconds.
        Weight::from_parts(2_236_837, 0)
            // Standard Error: 3_532
            .saturating_add(Weight::from_parts(411_615, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_151_000 picoseconds.
        Weight::from_parts(1_588_175, 0)
            // Standard Error: 3_761
            .saturating_add(Weight::from_parts(412_007, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_993_000 picoseconds.
        Weight::from_parts(297_649, 0)
            // Standard Error: 5_959
            .saturating_add(Weight::from_parts(625_197, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_092_000 picoseconds.
        Weight::from_parts(539_418, 0)
            // Standard Error: 5_753
            .saturating_add(Weight::from_parts(619_155, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_045_000 picoseconds.
        Weight::from_parts(849_385, 0)
            // Standard Error: 5_120
            .saturating_add(Weight::from_parts(540_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_159_000 picoseconds.
        Weight::from_parts(1_740_121, 0)
            // Standard Error: 3_707
            .saturating_add(Weight::from_parts(372_682, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_054_000 picoseconds.
        Weight::from_parts(3_105_139, 0)
            // Standard Error: 1_906
            .saturating_add(Weight::from_parts(171_296, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_144_000 picoseconds.
        Weight::from_parts(2_533_282, 0)
            // Standard Error: 3_139
            .saturating_add(Weight::from_parts(194_886, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_084_000 picoseconds.
        Weight::from_parts(3_421_000, 0)
            // Standard Error: 10_650
            .saturating_add(Weight::from_parts(1_826_488, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_103_000 picoseconds.
        Weight::from_parts(3_386_000, 0)
            // Standard Error: 7_969
            .saturating_add(Weight::from_parts(1_097_123, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_051_000 picoseconds.
        Weight::from_parts(3_312_000, 0)
            // Standard Error: 11_441
            .saturating_add(Weight::from_parts(1_821_668, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_796_000 picoseconds.
        Weight::from_parts(2_895_000, 0)
            // Standard Error: 6_853
            .saturating_add(Weight::from_parts(1_135_512, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_972_000 picoseconds.
        Weight::from_parts(3_137_000, 0)
            // Standard Error: 10_806
            .saturating_add(Weight::from_parts(1_818_526, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_117_000 picoseconds.
        Weight::from_parts(3_309_000, 0)
            // Standard Error: 7_837
            .saturating_add(Weight::from_parts(1_138_915, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_045_000 picoseconds.
        Weight::from_parts(3_125_000, 0)
            // Standard Error: 11_266
            .saturating_add(Weight::from_parts(1_799_561, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_978_000 picoseconds.
        Weight::from_parts(3_308_000, 0)
            // Standard Error: 7_179
            .saturating_add(Weight::from_parts(1_118_231, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_972_000 picoseconds.
        Weight::from_parts(3_071_000, 0)
            // Standard Error: 11_719
            .saturating_add(Weight::from_parts(1_842_356, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_196_000 picoseconds.
        Weight::from_parts(3_325_000, 0)
            // Standard Error: 6_898
            .saturating_add(Weight::from_parts(1_150_429, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_202_000 picoseconds.
        Weight::from_parts(3_556_000, 0)
            // Standard Error: 9_693
            .saturating_add(Weight::from_parts(1_822_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_286_000 picoseconds.
        Weight::from_parts(3_381_000, 0)
            // Standard Error: 6_762
            .saturating_add(Weight::from_parts(1_111_765, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_118_000 picoseconds.
        Weight::from_parts(3_516_000, 0)
            // Standard Error: 10_604
            .saturating_add(Weight::from_parts(1_799_663, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_114_000 picoseconds.
        Weight::from_parts(3_271_000, 0)
            // Standard Error: 7_068
            .saturating_add(Weight::from_parts(1_152_019, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_951_000 picoseconds.
        Weight::from_parts(3_241_000, 0)
            // Standard Error: 9_965
            .saturating_add(Weight::from_parts(1_811_571, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_864_000 picoseconds.
        Weight::from_parts(2_996_000, 0)
            // Standard Error: 8_720
            .saturating_add(Weight::from_parts(1_178_993, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_006_000 picoseconds.
        Weight::from_parts(3_202_000, 0)
            // Standard Error: 10_807
            .saturating_add(Weight::from_parts(1_815_710, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_248_000 picoseconds.
        Weight::from_parts(3_478_000, 0)
            // Standard Error: 6_587
            .saturating_add(Weight::from_parts(1_091_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_125_000 picoseconds.
        Weight::from_parts(3_441_000, 0)
            // Standard Error: 10_602
            .saturating_add(Weight::from_parts(1_801_315, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_030_000 picoseconds.
        Weight::from_parts(3_182_000, 0)
            // Standard Error: 8_076
            .saturating_add(Weight::from_parts(1_199_534, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_341_000 picoseconds.
        Weight::from_parts(3_575_000, 0)
            // Standard Error: 10_351
            .saturating_add(Weight::from_parts(1_319_374, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_851_000 picoseconds.
        Weight::from_parts(47_033, 0)
            // Standard Error: 5_596
            .saturating_add(Weight::from_parts(704_048, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_143_000 picoseconds.
        Weight::from_parts(3_358_000, 0)
            // Standard Error: 7_552
            .saturating_add(Weight::from_parts(1_221_026, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_953_000 picoseconds.
        Weight::from_parts(181_051, 0)
            // Standard Error: 5_062
            .saturating_add(Weight::from_parts(725_289, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_918_000 picoseconds.
        Weight::from_parts(3_033_000, 0)
            // Standard Error: 11_952
            .saturating_add(Weight::from_parts(1_848_274, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_138_000 picoseconds.
        Weight::from_parts(3_333_000, 0)
            // Standard Error: 6_428
            .saturating_add(Weight::from_parts(1_169_620, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_978_000 picoseconds.
        Weight::from_parts(9_543_884, 0)
            // Standard Error: 21_016
            .saturating_add(Weight::from_parts(1_906_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_900_000 picoseconds.
        Weight::from_parts(4_807_353, 0)
            // Standard Error: 12_850
            .saturating_add(Weight::from_parts(1_992_990, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_336_000 picoseconds.
        Weight::from_parts(8_572_426, 0)
            // Standard Error: 22_578
            .saturating_add(Weight::from_parts(2_130_913, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_880_000 picoseconds.
        Weight::from_parts(3_189_506, 0)
            // Standard Error: 13_486
            .saturating_add(Weight::from_parts(2_004_188, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_082_000 picoseconds.
        Weight::from_parts(13_022_210, 0)
            // Standard Error: 40_139
            .saturating_add(Weight::from_parts(7_805_892, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_160_000 picoseconds.
        Weight::from_parts(6_328_739, 0)
            // Standard Error: 51_256
            .saturating_add(Weight::from_parts(6_456_640, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_239_000 picoseconds.
        Weight::from_parts(12_603_892, 0)
            // Standard Error: 16_801
            .saturating_add(Weight::from_parts(1_943_815, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_969_000 picoseconds.
        Weight::from_parts(5_866_165, 0)
            // Standard Error: 13_714
            .saturating_add(Weight::from_parts(1_975_555, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_954_000 picoseconds.
        Weight::from_parts(3_041_000, 0)
            // Standard Error: 8_356
            .saturating_add(Weight::from_parts(1_230_305, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_836_000 picoseconds.
        Weight::from_parts(3_097_000, 0)
            // Standard Error: 4_132
            .saturating_add(Weight::from_parts(642_145, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_094_000 picoseconds.
        Weight::from_parts(3_298_000, 0)
            // Standard Error: 8_180
            .saturating_add(Weight::from_parts(1_216_177, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_020_000 picoseconds.
        Weight::from_parts(297_181, 0)
            // Standard Error: 5_032
            .saturating_add(Weight::from_parts(693_637, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_916_000 picoseconds.
        Weight::from_parts(3_092_000, 0)
            // Standard Error: 8_527
            .saturating_add(Weight::from_parts(1_274_694, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_177_000 picoseconds.
        Weight::from_parts(3_346_000, 0)
            // Standard Error: 4_115
            .saturating_add(Weight::from_parts(633_432, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_899_000 picoseconds.
        Weight::from_parts(2_987_000, 0)
            // Standard Error: 5_494
            .saturating_add(Weight::from_parts(1_049_587, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_384_000 picoseconds.
        Weight::from_parts(874_415, 0)
            // Standard Error: 4_816
            .saturating_add(Weight::from_parts(626_402, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_056_000 picoseconds.
        Weight::from_parts(3_276_000, 0)
            // Standard Error: 7_218
            .saturating_add(Weight::from_parts(1_077_394, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_040_000 picoseconds.
        Weight::from_parts(702_098, 0)
            // Standard Error: 4_516
            .saturating_add(Weight::from_parts(621_160, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_240_000 picoseconds.
        Weight::from_parts(3_636_000, 0)
            // Standard Error: 7_528
            .saturating_add(Weight::from_parts(1_051_523, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_938_000 picoseconds.
        Weight::from_parts(187_561, 0)
            // Standard Error: 5_263
            .saturating_add(Weight::from_parts(639_378, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_090_000 picoseconds.
        Weight::from_parts(3_536_000, 0)
            // Standard Error: 6_386
            .saturating_add(Weight::from_parts(1_036_476, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_184_000 picoseconds.
        Weight::from_parts(711_449, 0)
            // Standard Error: 5_231
            .saturating_add(Weight::from_parts(663_282, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_076_000 picoseconds.
        Weight::from_parts(3_465_000, 0)
            // Standard Error: 6_913
            .saturating_add(Weight::from_parts(1_005_638, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_995_000 picoseconds.
        Weight::from_parts(930_977, 0)
            // Standard Error: 4_846
            .saturating_add(Weight::from_parts(618_412, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 968_000 picoseconds.
        Weight::from_parts(1_022_000, 0)
            // Standard Error: 972
            .saturating_add(Weight::from_parts(213_600, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_803_000 picoseconds.
        Weight::from_parts(2_889_000, 3506)
            // Standard Error: 902
            .saturating_add(Weight::from_parts(669_261, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 139_515_000 picoseconds.
        Weight::from_parts(156_613_000, 0)
            // Standard Error: 281_166
            .saturating_add(Weight::from_parts(107_348_285, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `42236`
        // Minimum execution time: 85_044_000 picoseconds.
        Weight::from_parts(87_703_000, 42236)
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `886`
        //  Estimated: `21261`
        // Minimum execution time: 54_966_000 picoseconds.
        Weight::from_parts(56_174_000, 21261)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `534`
        //  Estimated: `17070`
        // Minimum execution time: 29_617_000 picoseconds.
        Weight::from_parts(30_270_000, 17070)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_485_000 picoseconds.
        Weight::from_parts(6_977_028, 7640)
            // Standard Error: 38_828
            .saturating_add(Weight::from_parts(15_377_549, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1364 + c * (16389 ±0)`
        //  Estimated: `41434 + c * (131112 ±0)`
        // Minimum execution time: 69_932_000 picoseconds.
        Weight::from_parts(70_888_000, 41434)
            // Standard Error: 633_029
            .saturating_add(Weight::from_parts(83_609_914, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 62_090_000 picoseconds.
        Weight::from_parts(49_679_401, 4990)
            // Standard Error: 44_620
            .saturating_add(Weight::from_parts(51_946_604, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `738`
        //  Estimated: `39375`
        // Minimum execution time: 65_310_000 picoseconds.
        Weight::from_parts(99_216_535, 39375)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_568, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `235`
        //  Estimated: `34312`
        // Minimum execution time: 10_902_325_000 picoseconds.
        Weight::from_parts(227_539_821, 34312)
            // Standard Error: 156_726
            .saturating_add(Weight::from_parts(52_158_431, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_524, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `348`
        //  Estimated: `23853`
        // Minimum execution time: 57_336_000 picoseconds.
        Weight::from_parts(38_058_895, 23853)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_154, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `451`
        //  Estimated: `27177`
        // Minimum execution time: 60_926_000 picoseconds.
        Weight::from_parts(54_882_575, 27177)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_132, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `978`
        //  Estimated: `42227`
        // Minimum execution time: 84_609_000 picoseconds.
        Weight::from_parts(78_549_155, 42227)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_159, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1081`
        //  Estimated: `45757`
        // Minimum execution time: 95_291_000 picoseconds.
        Weight::from_parts(74_365_606, 45757)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_184, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 471_739_000 picoseconds.
        Weight::from_parts(545_536_535, 74319)
            .saturating_add(RocksDbWeight::get().reads(27_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 522_464_000 picoseconds.
        Weight::from_parts(611_438_478, 74319)
            .saturating_add(RocksDbWeight::get().reads(27_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 47_131_000 picoseconds.
        Weight::from_parts(47_744_000, 3899)
            // Standard Error: 46_478
            .saturating_add(Weight::from_parts(50_225_006, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 288_732_000 picoseconds.
        Weight::from_parts(330_562_229, 0)
            // Standard Error: 991_113
            .saturating_add(Weight::from_parts(425_372_338, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 727_679_000 picoseconds.
        Weight::from_parts(747_311_545, 0)
            // Standard Error: 1_130_910
            .saturating_add(Weight::from_parts(427_645_686, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 327_874_000 picoseconds.
        Weight::from_parts(357_617_402, 0)
            // Standard Error: 10_514
            .saturating_add(Weight::from_parts(5_185_816, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 392_456_000 picoseconds.
        Weight::from_parts(434_505_969, 0)
            // Standard Error: 13_502
            .saturating_add(Weight::from_parts(5_272_266, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 310_419_000 picoseconds.
        Weight::from_parts(401_469_853, 0)
            // Standard Error: 364_396
            .saturating_add(Weight::from_parts(307_565_042, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 301_560_000 picoseconds.
        Weight::from_parts(371_553_368, 0)
            // Standard Error: 274_339
            .saturating_add(Weight::from_parts(292_543_120, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 295_377_000 picoseconds.
        Weight::from_parts(359_860_161, 0)
            // Standard Error: 273_588
            .saturating_add(Weight::from_parts(292_438_435, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 292_838_000 picoseconds.
        Weight::from_parts(353_254_534, 0)
            // Standard Error: 234_515
            .saturating_add(Weight::from_parts(292_831_820, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 297_296_000 picoseconds.
        Weight::from_parts(358_401_175, 0)
            // Standard Error: 277_735
            .saturating_add(Weight::from_parts(290_483_825, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 310_760_000 picoseconds.
        Weight::from_parts(362_210_073, 0)
            // Standard Error: 265_642
            .saturating_add(Weight::from_parts(294_145_473, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 272_530_000 picoseconds.
        Weight::from_parts(356_451_493, 0)
            // Standard Error: 284_986
            .saturating_add(Weight::from_parts(291_906_173, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 300_074_000 picoseconds.
        Weight::from_parts(363_034_702, 0)
            // Standard Error: 194_695
            .saturating_add(Weight::from_parts(291_971_979, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 803_884_000 picoseconds.
        Weight::from_parts(928_914_472, 0)
            // Standard Error: 475_862
            .saturating_add(Weight::from_parts(389_625_582, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_157_695_000 picoseconds.
        Weight::from_parts(1_206_556_000, 0)
            // Standard Error: 49_775
            .saturating_add(Weight::from_parts(13_144_641, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 308_024_000 picoseconds.
        Weight::from_parts(343_310_859, 0)
            // Standard Error: 253_116
            .saturating_add(Weight::from_parts(297_833_368, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 305_570_000 picoseconds.
        Weight::from_parts(350_435_352, 0)
            // Standard Error: 245_896
            .saturating_add(Weight::from_parts(298_020_179, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 304_119_000 picoseconds.
        Weight::from_parts(366_493_700, 0)
            // Standard Error: 256_927
            .saturating_add(Weight::from_parts(372_533_078, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 323_525_000 picoseconds.
        Weight::from_parts(389_214_000, 0)
            // Standard Error: 4_662_127
            .saturating_add(Weight::from_parts(1_394_059_522, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 304_270_000 picoseconds.
        Weight::from_parts(379_167_544, 0)
            // Standard Error: 401_951
            .saturating_add(Weight::from_parts(542_984_164, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 860_394_000 picoseconds.
        Weight::from_parts(875_472_000, 0)
            // Standard Error: 59_203
            .saturating_add(Weight::from_parts(21_420_168, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 299_716_000 picoseconds.
        Weight::from_parts(402_276_361, 0)
            // Standard Error: 374_266
            .saturating_add(Weight::from_parts(552_751_944, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 855_584_000 picoseconds.
        Weight::from_parts(882_155_000, 0)
            // Standard Error: 60_888
            .saturating_add(Weight::from_parts(21_718_485, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 856_824_000 picoseconds.
        Weight::from_parts(1_026_102_463, 0)
            // Standard Error: 481_666
            .saturating_add(Weight::from_parts(560_989_178, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 860_698_000 picoseconds.
        Weight::from_parts(1_006_244_027, 0)
            // Standard Error: 426_130
            .saturating_add(Weight::from_parts(579_511_309, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 318_498_000 picoseconds.
        Weight::from_parts(356_086_152, 0)
            // Standard Error: 223_622
            .saturating_add(Weight::from_parts(306_252_780, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_313_750_000 picoseconds.
        Weight::from_parts(6_570_691_394, 0)
            // Standard Error: 1_050_366
            .saturating_add(Weight::from_parts(500_206_669, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_054_223_000 picoseconds.
        Weight::from_parts(1_087_636_000, 0)
            // Standard Error: 51_012
            .saturating_add(Weight::from_parts(29_600_352, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_377_088_000 picoseconds.
        Weight::from_parts(6_524_678_946, 0)
            // Standard Error: 1_075_331
            .saturating_add(Weight::from_parts(556_854_143, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_353_843_000 picoseconds.
        Weight::from_parts(6_439_108_530, 0)
            // Standard Error: 1_193_670
            .saturating_add(Weight::from_parts(597_826_391, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 443_740_000 picoseconds.
        Weight::from_parts(569_103_445, 0)
            // Standard Error: 384_881
            .saturating_add(Weight::from_parts(546_778_197, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 995_873_000 picoseconds.
        Weight::from_parts(1_051_289_000, 0)
            // Standard Error: 59_379
            .saturating_add(Weight::from_parts(21_513_331, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_494_933_000 picoseconds.
        Weight::from_parts(6_621_304_476, 0)
            // Standard Error: 1_183_440
            .saturating_add(Weight::from_parts(581_707_576, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 269_894_000 picoseconds.
        Weight::from_parts(359_073_195, 0)
            // Standard Error: 2_950_012
            .saturating_add(Weight::from_parts(25_057_804, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 335_126_000 picoseconds.
        Weight::from_parts(373_183_928, 0)
            // Standard Error: 1_312
            .saturating_add(Weight::from_parts(429_345, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 265_543_000 picoseconds.
        Weight::from_parts(358_708_948, 0)
            // Standard Error: 3_303_712
            .saturating_add(Weight::from_parts(27_487_451, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 343_128_000 picoseconds.
        Weight::from_parts(369_982_542, 0)
            // Standard Error: 1_264
            .saturating_add(Weight::from_parts(430_951, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 272_255_000 picoseconds.
        Weight::from_parts(357_520_559, 0)
            // Standard Error: 2_968_368
            .saturating_add(Weight::from_parts(16_278_940, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 276_748_000 picoseconds.
        Weight::from_parts(355_930_128, 0)
            // Standard Error: 3_255_174
            .saturating_add(Weight::from_parts(28_821_371, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 309_209_000 picoseconds.
        Weight::from_parts(379_433_324, 0)
            // Standard Error: 405_302
            .saturating_add(Weight::from_parts(398_085_680, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 327_643_000 picoseconds.
        Weight::from_parts(70_199_763, 0)
            // Standard Error: 4_437
            .saturating_add(Weight::from_parts(683_106, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(_r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 775_546_000 picoseconds.
        Weight::from_parts(875_591_571, 0)
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 793_852_000 picoseconds.
        Weight::from_parts(875_956_532, 0)
            // Standard Error: 5_632_054
            .saturating_add(Weight::from_parts(48_119_667, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 279_721_000 picoseconds.
        Weight::from_parts(364_354_436, 0)
            // Standard Error: 2_995_597
            .saturating_add(Weight::from_parts(25_548_263, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 326_640_000 picoseconds.
        Weight::from_parts(369_289_525, 0)
            // Standard Error: 1_322
            .saturating_add(Weight::from_parts(427_659, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 290_564_000 picoseconds.
        Weight::from_parts(362_854_106, 0)
            // Standard Error: 3_014_577
            .saturating_add(Weight::from_parts(13_167_393, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 331_764_000 picoseconds.
        Weight::from_parts(364_614_945, 0)
            // Standard Error: 1_234
            .saturating_add(Weight::from_parts(429_688, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 285_743_000 picoseconds.
        Weight::from_parts(342_606_837, 0)
            // Standard Error: 205_795
            .saturating_add(Weight::from_parts(298_090_824, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 308_335_000 picoseconds.
        Weight::from_parts(352_181_912, 0)
            // Standard Error: 254_419
            .saturating_add(Weight::from_parts(297_757_008, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 794_830_000 picoseconds.
        Weight::from_parts(901_425_509, 0)
            // Standard Error: 371_218
            .saturating_add(Weight::from_parts(323_213_763, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 812_448_000 picoseconds.
        Weight::from_parts(885_308_372, 0)
            // Standard Error: 2_042
            .saturating_add(Weight::from_parts(129_707, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_892_610_000 picoseconds.
        Weight::from_parts(7_159_547_048, 0)
            // Standard Error: 1_297_138
            .saturating_add(Weight::from_parts(431_813_384, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_331_482_000 picoseconds.
        Weight::from_parts(7_303_231_164, 0)
            // Standard Error: 13_650
            .saturating_add(Weight::from_parts(12_490_464, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 292_400_000 picoseconds.
        Weight::from_parts(380_859_718, 0)
            // Standard Error: 307_635
            .saturating_add(Weight::from_parts(313_207_063, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 497_282_000 picoseconds.
        Weight::from_parts(547_580_000, 0)
            // Standard Error: 49_147
            .saturating_add(Weight::from_parts(25_641_213, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 287_161_000 picoseconds.
        Weight::from_parts(349_284_234, 0)
            // Standard Error: 209_139
            .saturating_add(Weight::from_parts(292_383_604, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 274_382_000 picoseconds.
        Weight::from_parts(352_700_006, 0)
            // Standard Error: 2_980_916
            .saturating_add(Weight::from_parts(32_982_593, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 269_733_000 picoseconds.
        Weight::from_parts(347_585_822, 0)
            // Standard Error: 2_862_518
            .saturating_add(Weight::from_parts(6_790_077, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 279_240_000 picoseconds.
        Weight::from_parts(344_959_091, 0)
            // Standard Error: 3_128_042
            .saturating_add(Weight::from_parts(8_964_508, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 277_982_000 picoseconds.
        Weight::from_parts(351_731_467, 0)
            // Standard Error: 2_927_096
            .saturating_add(Weight::from_parts(15_159_732, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 279_772_000 picoseconds.
        Weight::from_parts(347_438_826, 0)
            // Standard Error: 2_893_764
            .saturating_add(Weight::from_parts(25_822_373, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 374_725_000 picoseconds.
        Weight::from_parts(469_479_645, 0)
            // Standard Error: 353_150
            .saturating_add(Weight::from_parts(408_339_045, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 334_358_000 picoseconds.
        Weight::from_parts(382_577_267, 0)
            // Standard Error: 527_902
            .saturating_add(Weight::from_parts(639_341_500, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_835_628_000 picoseconds.
        Weight::from_parts(44_403_078_000, 0)
            // Standard Error: 266_360
            .saturating_add(Weight::from_parts(8_030_914, 0).saturating_mul(p.into()))
            // Standard Error: 266_347
            .saturating_add(Weight::from_parts(176_694_323, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 331_174_000 picoseconds.
        Weight::from_parts(380_008_753, 0)
            // Standard Error: 517_673
            .saturating_add(Weight::from_parts(653_381_858, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_103_510_000 picoseconds.
        Weight::from_parts(44_981_163_000, 0)
            // Standard Error: 263_974
            .saturating_add(Weight::from_parts(7_628_990, 0).saturating_mul(p.into()))
            // Standard Error: 263_961
            .saturating_add(Weight::from_parts(176_618_895, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 298_731_000 picoseconds.
        Weight::from_parts(373_074_504, 0)
            // Standard Error: 94_640
            .saturating_add(Weight::from_parts(4_851_279, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 301_035_000 picoseconds.
        Weight::from_parts(335_483_805, 1131)
            // Standard Error: 10_001
            .saturating_add(Weight::from_parts(15_619_806, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 294_231_000 picoseconds.
        Weight::from_parts(314_897_000, 1131)
            // Standard Error: 44_980
            .saturating_add(Weight::from_parts(42_453_368, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_250_972_000 picoseconds.
        Weight::from_parts(8_153_642_142, 5069931)
            // Standard Error: 61_319
            .saturating_add(Weight::from_parts(44_012_203, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 291_569_000 picoseconds.
        Weight::from_parts(112_020_508, 1939)
            // Standard Error: 42_237
            .saturating_add(Weight::from_parts(52_467_006, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 318_024_000 picoseconds.
        Weight::from_parts(377_263_274, 1131)
            // Standard Error: 73_458
            .saturating_add(Weight::from_parts(36_116_857, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 848_759_000 picoseconds.
        Weight::from_parts(887_148_154, 1496)
            // Standard Error: 240_276
            .saturating_add(Weight::from_parts(50_596_515, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_317_825_000 picoseconds.
        Weight::from_parts(1_383_447_564, 317931)
            // Standard Error: 296_520
            .saturating_add(Weight::from_parts(49_190_237, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_376_018_000 picoseconds.
        Weight::from_parts(4_393_110_835, 0)
            // Standard Error: 10_195
            .saturating_add(Weight::from_parts(3_278_867, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_368_787_000 picoseconds.
        Weight::from_parts(4_392_022_033, 0)
            // Standard Error: 10_859
            .saturating_add(Weight::from_parts(3_322_239, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_856_244_000 picoseconds.
        Weight::from_parts(10_817_553_255, 0)
            // Standard Error: 172_430
            .saturating_add(Weight::from_parts(18_246_859, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_492_050_000 picoseconds.
        Weight::from_parts(11_219_411_423, 0)
            // Standard Error: 220_664
            .saturating_add(Weight::from_parts(12_574_930, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_193_000 picoseconds.
        Weight::from_parts(745_265, 0)
            // Standard Error: 11_588
            .saturating_add(Weight::from_parts(3_726_963, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_033_000 picoseconds.
        Weight::from_parts(2_005_905, 0)
            // Standard Error: 6_289
            .saturating_add(Weight::from_parts(2_978_228, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_300_000 picoseconds.
        Weight::from_parts(3_735_385, 0)
            // Standard Error: 2_789
            .saturating_add(Weight::from_parts(1_558_982, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_970_000 picoseconds.
        Weight::from_parts(3_078_000, 0)
            // Standard Error: 8_221
            .saturating_add(Weight::from_parts(2_894_807, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_165_000 picoseconds.
        Weight::from_parts(10_332_450, 0)
            // Standard Error: 20_320
            .saturating_add(Weight::from_parts(4_428_524, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_522_000 picoseconds.
        Weight::from_parts(5_741_269, 0)
            // Standard Error: 1_112
            .saturating_add(Weight::from_parts(161_678, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_154_000 picoseconds.
        Weight::from_parts(6_292_985, 0)
            // Standard Error: 8_769
            .saturating_add(Weight::from_parts(2_580_569, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_580_569 -
            2_419_367, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_211_000 picoseconds.
        Weight::from_parts(5_049_401, 0)
            // Standard Error: 12_743
            .saturating_add(Weight::from_parts(2_419_367, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_492_000 picoseconds.
        Weight::from_parts(27_102_548, 0)
            // Standard Error: 33_811
            .saturating_add(Weight::from_parts(8_841_448, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 13_696_000 picoseconds.
        Weight::from_parts(4_401_618, 0)
            // Standard Error: 7_257
            .saturating_add(Weight::from_parts(1_181_433, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_108_000 picoseconds.
        Weight::from_parts(6_721_865, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_941_000 picoseconds.
        Weight::from_parts(2_053_960, 0)
            // Standard Error: 3_078
            .saturating_add(Weight::from_parts(302_069, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_953_000 picoseconds.
        Weight::from_parts(3_022_000, 0)
            // Standard Error: 3_634
            .saturating_add(Weight::from_parts(720_385, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_038_000 picoseconds.
        Weight::from_parts(3_239_000, 0)
            // Standard Error: 5_427
            .saturating_add(Weight::from_parts(761_270, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_457_000 picoseconds.
        Weight::from_parts(4_966_919, 0)
            // Standard Error: 5_332
            .saturating_add(Weight::from_parts(713_364, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_381_000 picoseconds.
        Weight::from_parts(7_536_000, 0)
            // Standard Error: 9_279
            .saturating_add(Weight::from_parts(1_313_397, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 17_680_000 picoseconds.
        Weight::from_parts(14_428_995, 0)
            // Standard Error: 10_543
            .saturating_add(Weight::from_parts(7_239_831, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_159_000 picoseconds.
        Weight::from_parts(3_396_000, 0)
            // Standard Error: 6_444
            .saturating_add(Weight::from_parts(3_262_940, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_971_000 picoseconds.
        Weight::from_parts(3_360_000, 0)
            // Standard Error: 5_913
            .saturating_add(Weight::from_parts(3_025_268, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_796_000 picoseconds.
        Weight::from_parts(3_220_000, 0)
            // Standard Error: 6_032
            .saturating_add(Weight::from_parts(2_990_871, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_039_000 picoseconds.
        Weight::from_parts(3_663_000, 0)
            // Standard Error: 5_162
            .saturating_add(Weight::from_parts(2_538_743, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_022_000 picoseconds.
        Weight::from_parts(23_170, 0)
            // Standard Error: 6_541
            .saturating_add(Weight::from_parts(693_271, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_981_000 picoseconds.
        Weight::from_parts(1_850_324, 0)
            // Standard Error: 4_131
            .saturating_add(Weight::from_parts(430_795, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_045_000 picoseconds.
        Weight::from_parts(3_377_000, 0)
            // Standard Error: 9_823
            .saturating_add(Weight::from_parts(1_780_779, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_099_000 picoseconds.
        Weight::from_parts(3_205_000, 0)
            // Standard Error: 7_451
            .saturating_add(Weight::from_parts(1_105_736, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_039_000 picoseconds.
        Weight::from_parts(2_236_837, 0)
            // Standard Error: 3_532
            .saturating_add(Weight::from_parts(411_615, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_151_000 picoseconds.
        Weight::from_parts(1_588_175, 0)
            // Standard Error: 3_761
            .saturating_add(Weight::from_parts(412_007, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_993_000 picoseconds.
        Weight::from_parts(297_649, 0)
            // Standard Error: 5_959
            .saturating_add(Weight::from_parts(625_197, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_092_000 picoseconds.
        Weight::from_parts(539_418, 0)
            // Standard Error: 5_753
            .saturating_add(Weight::from_parts(619_155, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_045_000 picoseconds.
        Weight::from_parts(849_385, 0)
            // Standard Error: 5_120
            .saturating_add(Weight::from_parts(540_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_159_000 picoseconds.
        Weight::from_parts(1_740_121, 0)
            // Standard Error: 3_707
            .saturating_add(Weight::from_parts(372_682, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_054_000 picoseconds.
        Weight::from_parts(3_105_139, 0)
            // Standard Error: 1_906
            .saturating_add(Weight::from_parts(171_296, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_144_000 picoseconds.
        Weight::from_parts(2_533_282, 0)
            // Standard Error: 3_139
            .saturating_add(Weight::from_parts(194_886, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_084_000 picoseconds.
        Weight::from_parts(3_421_000, 0)
            // Standard Error: 10_650
            .saturating_add(Weight::from_parts(1_826_488, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_103_000 picoseconds.
        Weight::from_parts(3_386_000, 0)
            // Standard Error: 7_969
            .saturating_add(Weight::from_parts(1_097_123, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_051_000 picoseconds.
        Weight::from_parts(3_312_000, 0)
            // Standard Error: 11_441
            .saturating_add(Weight::from_parts(1_821_668, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_796_000 picoseconds.
        Weight::from_parts(2_895_000, 0)
            // Standard Error: 6_853
            .saturating_add(Weight::from_parts(1_135_512, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_972_000 picoseconds.
        Weight::from_parts(3_137_000, 0)
            // Standard Error: 10_806
            .saturating_add(Weight::from_parts(1_818_526, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_117_000 picoseconds.
        Weight::from_parts(3_309_000, 0)
            // Standard Error: 7_837
            .saturating_add(Weight::from_parts(1_138_915, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_045_000 picoseconds.
        Weight::from_parts(3_125_000, 0)
            // Standard Error: 11_266
            .saturating_add(Weight::from_parts(1_799_561, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_978_000 picoseconds.
        Weight::from_parts(3_308_000, 0)
            // Standard Error: 7_179
            .saturating_add(Weight::from_parts(1_118_231, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_972_000 picoseconds.
        Weight::from_parts(3_071_000, 0)
            // Standard Error: 11_719
            .saturating_add(Weight::from_parts(1_842_356, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_196_000 picoseconds.
        Weight::from_parts(3_325_000, 0)
            // Standard Error: 6_898
            .saturating_add(Weight::from_parts(1_150_429, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_202_000 picoseconds.
        Weight::from_parts(3_556_000, 0)
            // Standard Error: 9_693
            .saturating_add(Weight::from_parts(1_822_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_286_000 picoseconds.
        Weight::from_parts(3_381_000, 0)
            // Standard Error: 6_762
            .saturating_add(Weight::from_parts(1_111_765, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_118_000 picoseconds.
        Weight::from_parts(3_516_000, 0)
            // Standard Error: 10_604
            .saturating_add(Weight::from_parts(1_799_663, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_114_000 picoseconds.
        Weight::from_parts(3_271_000, 0)
            // Standard Error: 7_068
            .saturating_add(Weight::from_parts(1_152_019, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_951_000 picoseconds.
        Weight::from_parts(3_241_000, 0)
            // Standard Error: 9_965
            .saturating_add(Weight::from_parts(1_811_571, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_864_000 picoseconds.
        Weight::from_parts(2_996_000, 0)
            // Standard Error: 8_720
            .saturating_add(Weight::from_parts(1_178_993, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_006_000 picoseconds.
        Weight::from_parts(3_202_000, 0)
            // Standard Error: 10_807
            .saturating_add(Weight::from_parts(1_815_710, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_248_000 picoseconds.
        Weight::from_parts(3_478_000, 0)
            // Standard Error: 6_587
            .saturating_add(Weight::from_parts(1_091_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_125_000 picoseconds.
        Weight::from_parts(3_441_000, 0)
            // Standard Error: 10_602
            .saturating_add(Weight::from_parts(1_801_315, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_030_000 picoseconds.
        Weight::from_parts(3_182_000, 0)
            // Standard Error: 8_076
            .saturating_add(Weight::from_parts(1_199_534, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_341_000 picoseconds.
        Weight::from_parts(3_575_000, 0)
            // Standard Error: 10_351
            .saturating_add(Weight::from_parts(1_319_374, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_851_000 picoseconds.
        Weight::from_parts(47_033, 0)
            // Standard Error: 5_596
            .saturating_add(Weight::from_parts(704_048, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_143_000 picoseconds.
        Weight::from_parts(3_358_000, 0)
            // Standard Error: 7_552
            .saturating_add(Weight::from_parts(1_221_026, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_953_000 picoseconds.
        Weight::from_parts(181_051, 0)
            // Standard Error: 5_062
            .saturating_add(Weight::from_parts(725_289, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_918_000 picoseconds.
        Weight::from_parts(3_033_000, 0)
            // Standard Error: 11_952
            .saturating_add(Weight::from_parts(1_848_274, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_138_000 picoseconds.
        Weight::from_parts(3_333_000, 0)
            // Standard Error: 6_428
            .saturating_add(Weight::from_parts(1_169_620, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_978_000 picoseconds.
        Weight::from_parts(9_543_884, 0)
            // Standard Error: 21_016
            .saturating_add(Weight::from_parts(1_906_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_900_000 picoseconds.
        Weight::from_parts(4_807_353, 0)
            // Standard Error: 12_850
            .saturating_add(Weight::from_parts(1_992_990, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_336_000 picoseconds.
        Weight::from_parts(8_572_426, 0)
            // Standard Error: 22_578
            .saturating_add(Weight::from_parts(2_130_913, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_880_000 picoseconds.
        Weight::from_parts(3_189_506, 0)
            // Standard Error: 13_486
            .saturating_add(Weight::from_parts(2_004_188, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_082_000 picoseconds.
        Weight::from_parts(13_022_210, 0)
            // Standard Error: 40_139
            .saturating_add(Weight::from_parts(7_805_892, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_160_000 picoseconds.
        Weight::from_parts(6_328_739, 0)
            // Standard Error: 51_256
            .saturating_add(Weight::from_parts(6_456_640, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_239_000 picoseconds.
        Weight::from_parts(12_603_892, 0)
            // Standard Error: 16_801
            .saturating_add(Weight::from_parts(1_943_815, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_969_000 picoseconds.
        Weight::from_parts(5_866_165, 0)
            // Standard Error: 13_714
            .saturating_add(Weight::from_parts(1_975_555, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_954_000 picoseconds.
        Weight::from_parts(3_041_000, 0)
            // Standard Error: 8_356
            .saturating_add(Weight::from_parts(1_230_305, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_836_000 picoseconds.
        Weight::from_parts(3_097_000, 0)
            // Standard Error: 4_132
            .saturating_add(Weight::from_parts(642_145, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_094_000 picoseconds.
        Weight::from_parts(3_298_000, 0)
            // Standard Error: 8_180
            .saturating_add(Weight::from_parts(1_216_177, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_020_000 picoseconds.
        Weight::from_parts(297_181, 0)
            // Standard Error: 5_032
            .saturating_add(Weight::from_parts(693_637, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_916_000 picoseconds.
        Weight::from_parts(3_092_000, 0)
            // Standard Error: 8_527
            .saturating_add(Weight::from_parts(1_274_694, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_177_000 picoseconds.
        Weight::from_parts(3_346_000, 0)
            // Standard Error: 4_115
            .saturating_add(Weight::from_parts(633_432, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_899_000 picoseconds.
        Weight::from_parts(2_987_000, 0)
            // Standard Error: 5_494
            .saturating_add(Weight::from_parts(1_049_587, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_384_000 picoseconds.
        Weight::from_parts(874_415, 0)
            // Standard Error: 4_816
            .saturating_add(Weight::from_parts(626_402, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_056_000 picoseconds.
        Weight::from_parts(3_276_000, 0)
            // Standard Error: 7_218
            .saturating_add(Weight::from_parts(1_077_394, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_040_000 picoseconds.
        Weight::from_parts(702_098, 0)
            // Standard Error: 4_516
            .saturating_add(Weight::from_parts(621_160, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_240_000 picoseconds.
        Weight::from_parts(3_636_000, 0)
            // Standard Error: 7_528
            .saturating_add(Weight::from_parts(1_051_523, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_938_000 picoseconds.
        Weight::from_parts(187_561, 0)
            // Standard Error: 5_263
            .saturating_add(Weight::from_parts(639_378, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_090_000 picoseconds.
        Weight::from_parts(3_536_000, 0)
            // Standard Error: 6_386
            .saturating_add(Weight::from_parts(1_036_476, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_184_000 picoseconds.
        Weight::from_parts(711_449, 0)
            // Standard Error: 5_231
            .saturating_add(Weight::from_parts(663_282, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_076_000 picoseconds.
        Weight::from_parts(3_465_000, 0)
            // Standard Error: 6_913
            .saturating_add(Weight::from_parts(1_005_638, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_995_000 picoseconds.
        Weight::from_parts(930_977, 0)
            // Standard Error: 4_846
            .saturating_add(Weight::from_parts(618_412, 0).saturating_mul(r.into()))
    }
}
