// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-27, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=alloc,alloc_in_handle,alloc_per_page,claim_value,create_program,db_read_per_kb,db_write_per_kb,free,gr_block_height,gr_block_timestamp,gr_create_program,gr_create_program_per_kb,gr_create_program_wgas,gr_create_program_wgas_per_kb,gr_debug,gr_debug_per_kb,gr_gas_available,gr_message_id,gr_pay_program_rent,gr_program_id,gr_random,gr_read,gr_read_per_kb,gr_reply_code,gr_reply_deposit,gr_reply_per_kb,gr_reply_push,gr_reply_push_input,gr_reply_push_input_per_kb,gr_reply_push_per_kb,gr_reply_to,gr_reply_wgas_per_kb,gr_reservation_reply_commit_per_kb,gr_reservation_reply_per_kb,gr_reservation_send,gr_reservation_send_commit,gr_reservation_send_per_kb,gr_reserve_gas,gr_send,gr_send_commit,gr_send_commit_wgas,gr_send_init,gr_send_input,gr_send_input_wgas,gr_send_per_kb,gr_send_push,gr_send_push_input,gr_send_push_input_per_kb,gr_send_push_per_kb,gr_send_wgas,gr_send_wgas_per_kb,gr_signal_code,gr_signal_from,gr_size,gr_source,gr_system_reserve_gas,gr_unreserve_gas,gr_value,gr_value_available,gr_wake,initial_allocation,instantiate_module_per_kb,instr_br,instr_br_if,instr_br_table,instr_br_table_per_entry,instr_call,instr_call_const,instr_call_indirect,instr_call_indirect_per_param,instr_call_per_local,instr_global_get,instr_global_set,instr_i32add,instr_i32and,instr_i32clz,instr_i32ctz,instr_i32divs,instr_i32divu,instr_i32eq,instr_i32eqz,instr_i32extend16s,instr_i32extend8s,instr_i32ges,instr_i32geu,instr_i32gts,instr_i32gtu,instr_i32les,instr_i32leu,instr_i32load,instr_i32lts,instr_i32ltu,instr_i32mul,instr_i32ne,instr_i32or,instr_i32popcnt,instr_i32rems,instr_i32remu,instr_i32rotl,instr_i32rotr,instr_i32shl,instr_i32shrs,instr_i32shru,instr_i32store,instr_i32sub,instr_i32wrapi64,instr_i32xor,instr_i64add,instr_i64and,instr_i64clz,instr_i64ctz,instr_i64divs,instr_i64divu,instr_i64eq,instr_i64eqz,instr_i64extend16s,instr_i64extend32s,instr_i64extend8s,instr_i64extendsi32,instr_i64extendui32,instr_i64ges,instr_i64geu,instr_i64gts,instr_i64gtu,instr_i64les,instr_i64leu,instr_i64load,instr_i64lts,instr_i64ltu,instr_i64mul,instr_i64ne,instr_i64or,instr_i64popcnt,instr_i64rems,instr_i64remu,instr_i64rotl,instr_i64rotr,instr_i64shl,instr_i64shrs,instr_i64shru,instr_i64store,instr_i64sub,instr_i64xor,instr_if,instr_local_get,instr_local_set,instr_local_tee,instr_memory_current,instr_select,lazy_pages_host_func_read,lazy_pages_host_func_write,lazy_pages_host_func_write_after_read,lazy_pages_load_page_storage_data,lazy_pages_signal_read,lazy_pages_signal_write,lazy_pages_signal_write_after_read,mem_grow,pay_program_rent,reinstrument_per_kb,resume_session_commit,resume_session_init,resume_session_push,send_message,send_reply,tasks_pause_program,tasks_pause_program_uninited,tasks_remove_from_mailbox,tasks_remove_from_waitlist,tasks_remove_gas_reservation,tasks_remove_resume_session,tasks_send_dispatch,tasks_send_user_message,tasks_send_user_message_to_mailbox,tasks_wake_message,tasks_wake_message_no_wake,upload_code,upload_program --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn tasks_remove_resume_session() -> Weight;
    fn tasks_remove_gas_reservation() -> Weight;
    fn tasks_send_user_message_to_mailbox() -> Weight;
    fn tasks_send_user_message() -> Weight;
    fn tasks_send_dispatch() -> Weight;
    fn tasks_wake_message() -> Weight;
    fn tasks_wake_message_no_wake() -> Weight;
    fn tasks_remove_from_waitlist() -> Weight;
    fn tasks_remove_from_mailbox() -> Weight;
    fn tasks_pause_program(c: u32, ) -> Weight;
    fn tasks_pause_program_uninited(c: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
/// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_541_000 picoseconds.
        Weight::from_parts(102_074_380, 0)
            // Standard Error: 80_253
            .saturating_add(Weight::from_parts(20_577_464, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_217_000 picoseconds.
        Weight::from_parts(102_820_116, 0)
            // Standard Error: 70_881
            .saturating_add(Weight::from_parts(20_198_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_934_000 picoseconds.
        Weight::from_parts(99_436_614, 0)
            // Standard Error: 75_756
            .saturating_add(Weight::from_parts(20_017_120, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_685_000 picoseconds.
        Weight::from_parts(100_507_900, 0)
            // Standard Error: 74_256
            .saturating_add(Weight::from_parts(16_679_310, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 720_195_000 picoseconds.
        Weight::from_parts(738_553_478, 0)
            // Standard Error: 340_878
            .saturating_add(Weight::from_parts(10_667_010, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 721_127_000 picoseconds.
        Weight::from_parts(733_748_668, 0)
            // Standard Error: 383_608
            .saturating_add(Weight::from_parts(32_391_916, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_794_000 picoseconds.
        Weight::from_parts(110_377_956, 0)
            // Standard Error: 76_526
            .saturating_add(Weight::from_parts(6_912_932, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_895_000 picoseconds.
        Weight::from_parts(109_157_292, 0)
            // Standard Error: 69_826
            .saturating_add(Weight::from_parts(4_600_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_035_000 picoseconds.
        Weight::from_parts(98_674_780, 0)
            // Standard Error: 2_399_172
            .saturating_add(Weight::from_parts(179_813_382, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_493_000 picoseconds.
        Weight::from_parts(101_635_476, 0)
            // Standard Error: 2_074_239
            .saturating_add(Weight::from_parts(163_141_746, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_751_000 picoseconds.
        Weight::from_parts(98_196_104, 0)
            // Standard Error: 1_885_586
            .saturating_add(Weight::from_parts(131_263_910, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_807_000 picoseconds.
        Weight::from_parts(100_880_538, 0)
            // Standard Error: 2_127_302
            .saturating_add(Weight::from_parts(166_173_696, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_852_000 picoseconds.
        Weight::from_parts(97_599_076, 0)
            // Standard Error: 2_359_740
            .saturating_add(Weight::from_parts(168_401_966, 0).saturating_mul(r.into()))
    }
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 958_000 picoseconds.
        Weight::from_parts(999_000, 0)
            // Standard Error: 1_720
            .saturating_add(Weight::from_parts(256_698, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `79 + c * (1024 ±0)`
        //  Estimated: `3543 + c * (1024 ±0)`
        // Minimum execution time: 3_305_000 picoseconds.
        Weight::from_parts(3_371_000, 3543)
            // Standard Error: 949
            .saturating_add(Weight::from_parts(677_527, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 59_886_000 picoseconds.
        Weight::from_parts(100_347_065, 0)
            // Standard Error: 8_578
            .saturating_add(Weight::from_parts(2_416_692, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1304`
        //  Estimated: `51293`
        // Minimum execution time: 106_491_000 picoseconds.
        Weight::from_parts(108_920_000, 51293)
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `923`
        //  Estimated: `21372`
        // Minimum execution time: 55_187_000 picoseconds.
        Weight::from_parts(56_850_000, 21372)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `570`
        //  Estimated: `17214`
        // Minimum execution time: 29_550_000 picoseconds.
        Weight::from_parts(30_682_000, 17214)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_190_000 picoseconds.
        Weight::from_parts(4_378_244, 7640)
            // Standard Error: 35_496
            .saturating_add(Weight::from_parts(13_984_501, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1457 + c * (16389 ±0)`
        //  Estimated: `42178 + c * (131112 ±0)`
        // Minimum execution time: 72_031_000 picoseconds.
        Weight::from_parts(72_645_000, 42178)
            // Standard Error: 157_321
            .saturating_add(Weight::from_parts(55_126_957, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `46`
        //  Estimated: `5134`
        // Minimum execution time: 75_356_000 picoseconds.
        Weight::from_parts(42_141_300, 5134)
            // Standard Error: 39_742
            .saturating_add(Weight::from_parts(59_920_508, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1043`
        //  Estimated: `49852`
        // Minimum execution time: 94_667_000 picoseconds.
        Weight::from_parts(129_078_881, 49852)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_599, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `453`
        //  Estimated: `44268`
        // Minimum execution time: 11_062_366_000 picoseconds.
        Weight::from_parts(283_288_290, 44268)
            // Standard Error: 166_994
            .saturating_add(Weight::from_parts(60_131_646, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_548, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `530`
        //  Estimated: `31259`
        // Minimum execution time: 74_054_000 picoseconds.
        Weight::from_parts(42_896_007, 31259)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_051, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1303`
        //  Estimated: `53823`
        // Minimum execution time: 123_634_000 picoseconds.
        Weight::from_parts(102_717_940, 53823)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_056, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `89393`
        // Minimum execution time: 354_710_000 picoseconds.
        Weight::from_parts(372_465_446, 89393)
            .saturating_add(T::DbWeight::get().reads(31_u64))
            .saturating_add(T::DbWeight::get().writes(24_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `89133`
        // Minimum execution time: 366_324_000 picoseconds.
        Weight::from_parts(386_900_082, 89133)
            // Standard Error: 1_702
            .saturating_add(Weight::from_parts(4_767, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(31_u64))
            .saturating_add(T::DbWeight::get().writes(24_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 58_682_000 picoseconds.
        Weight::from_parts(58_936_000, 3899)
            // Standard Error: 47_233
            .saturating_add(Weight::from_parts(59_196_665, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_307_000 picoseconds.
        Weight::from_parts(93_060_000, 0)
            // Standard Error: 4_357_875
            .saturating_add(Weight::from_parts(694_439_373, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 485_972_000 picoseconds.
        Weight::from_parts(424_278_751, 0)
            // Standard Error: 7_417
            .saturating_add(Weight::from_parts(29_011_785, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 217_038_000 picoseconds.
        Weight::from_parts(210_536_864, 0)
            // Standard Error: 311_232
            .saturating_add(Weight::from_parts(64_444_244, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_955_000 picoseconds.
        Weight::from_parts(103_075_315, 0)
            // Standard Error: 3_568
            .saturating_add(Weight::from_parts(2_491_193, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 146_459_000 picoseconds.
        Weight::from_parts(218_658_551, 0)
            // Standard Error: 27_553
            .saturating_add(Weight::from_parts(2_176_568, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_090_000 picoseconds.
        Weight::from_parts(109_755_995, 0)
            // Standard Error: 376_683
            .saturating_add(Weight::from_parts(95_499_497, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_618_000 picoseconds.
        Weight::from_parts(86_019_009, 0)
            // Standard Error: 319_500
            .saturating_add(Weight::from_parts(85_611_064, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_673_000 picoseconds.
        Weight::from_parts(94_927_515, 0)
            // Standard Error: 248_406
            .saturating_add(Weight::from_parts(90_207_922, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_836_000 picoseconds.
        Weight::from_parts(96_414_210, 0)
            // Standard Error: 284_469
            .saturating_add(Weight::from_parts(88_057_700, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_386_000 picoseconds.
        Weight::from_parts(95_494_909, 0)
            // Standard Error: 303_314
            .saturating_add(Weight::from_parts(86_030_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_292_000 picoseconds.
        Weight::from_parts(87_784_613, 0)
            // Standard Error: 334_572
            .saturating_add(Weight::from_parts(87_778_447, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_719_000 picoseconds.
        Weight::from_parts(86_899_095, 0)
            // Standard Error: 324_708
            .saturating_add(Weight::from_parts(85_855_075, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_516_000 picoseconds.
        Weight::from_parts(93_299_390, 0)
            // Standard Error: 348_913
            .saturating_add(Weight::from_parts(88_940_839, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 722_462_000 picoseconds.
        Weight::from_parts(761_122_222, 0)
            // Standard Error: 438_250
            .saturating_add(Weight::from_parts(140_228_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 842_626_000 picoseconds.
        Weight::from_parts(846_781_000, 0)
            // Standard Error: 57_163
            .saturating_add(Weight::from_parts(13_190_626, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_307_000 picoseconds.
        Weight::from_parts(94_134_361, 0)
            // Standard Error: 323_718
            .saturating_add(Weight::from_parts(83_261_345, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_833_000 picoseconds.
        Weight::from_parts(85_607_605, 0)
            // Standard Error: 329_967
            .saturating_add(Weight::from_parts(84_906_894, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_516_000 picoseconds.
        Weight::from_parts(103_819_650, 0)
            // Standard Error: 369_387
            .saturating_add(Weight::from_parts(168_113_482, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_353_000 picoseconds.
        Weight::from_parts(95_973_000, 0)
            // Standard Error: 3_572_042
            .saturating_add(Weight::from_parts(768_909_198, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_643_000 picoseconds.
        Weight::from_parts(162_063_973, 0)
            // Standard Error: 453_484
            .saturating_add(Weight::from_parts(257_028_555, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 352_216_000 picoseconds.
        Weight::from_parts(355_331_000, 0)
            // Standard Error: 70_179
            .saturating_add(Weight::from_parts(21_378_637, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_523_000 picoseconds.
        Weight::from_parts(162_790_301, 0)
            // Standard Error: 405_437
            .saturating_add(Weight::from_parts(265_126_016, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 356_130_000 picoseconds.
        Weight::from_parts(360_160_000, 0)
            // Standard Error: 64_369
            .saturating_add(Weight::from_parts(21_016_449, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 713_960_000 picoseconds.
        Weight::from_parts(825_180_943, 0)
            // Standard Error: 546_028
            .saturating_add(Weight::from_parts(275_330_299, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 726_494_000 picoseconds.
        Weight::from_parts(814_834_201, 0)
            // Standard Error: 512_055
            .saturating_add(Weight::from_parts(275_738_376, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_663_000 picoseconds.
        Weight::from_parts(77_449_317, 0)
            // Standard Error: 342_349
            .saturating_add(Weight::from_parts(93_320_254, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_839_199_000 picoseconds.
        Weight::from_parts(1_963_617_120, 0)
            // Standard Error: 349_593
            .saturating_add(Weight::from_parts(162_340_785, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 314_602_000 picoseconds.
        Weight::from_parts(315_400_000, 0)
            // Standard Error: 51_095
            .saturating_add(Weight::from_parts(31_254_194, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_823_364_000 picoseconds.
        Weight::from_parts(1_965_317_599, 0)
            // Standard Error: 359_371
            .saturating_add(Weight::from_parts(216_402_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_834_274_000 picoseconds.
        Weight::from_parts(1_950_496_721, 0)
            // Standard Error: 353_121
            .saturating_add(Weight::from_parts(223_171_905, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 253_411_000 picoseconds.
        Weight::from_parts(319_930_597, 0)
            // Standard Error: 351_552
            .saturating_add(Weight::from_parts(275_583_594, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 541_547_000 picoseconds.
        Weight::from_parts(550_539_000, 0)
            // Standard Error: 60_772
            .saturating_add(Weight::from_parts(21_224_442, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_968_104_000 picoseconds.
        Weight::from_parts(2_107_572_642, 0)
            // Standard Error: 470_759
            .saturating_add(Weight::from_parts(237_667_922, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_529_000 picoseconds.
        Weight::from_parts(102_067_986, 0)
            // Standard Error: 959
            .saturating_add(Weight::from_parts(430_393, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 112_956_000 picoseconds.
        Weight::from_parts(99_584_056, 0)
            // Standard Error: 1_072
            .saturating_add(Weight::from_parts(436_300, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_552_000 picoseconds.
        Weight::from_parts(157_809_561, 0)
            // Standard Error: 490_822
            .saturating_add(Weight::from_parts(144_351_612, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_721_000 picoseconds.
        Weight::from_parts(108_321_000, 0)
            // Standard Error: 2_476
            .saturating_add(Weight::from_parts(655_649, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_979_000 picoseconds.
        Weight::from_parts(102_349_993, 0)
            // Standard Error: 1_132
            .saturating_add(Weight::from_parts(431_909, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_802_000 picoseconds.
        Weight::from_parts(105_319_005, 0)
            // Standard Error: 956
            .saturating_add(Weight::from_parts(428_302, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_398_000 picoseconds.
        Weight::from_parts(85_727_634, 0)
            // Standard Error: 348_511
            .saturating_add(Weight::from_parts(86_343_487, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_166_000 picoseconds.
        Weight::from_parts(85_819_392, 0)
            // Standard Error: 314_429
            .saturating_add(Weight::from_parts(83_680_390, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_995_000 picoseconds.
        Weight::from_parts(84_853_016, 0)
            // Standard Error: 339_280
            .saturating_add(Weight::from_parts(87_400_305, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 729_200_000 picoseconds.
        Weight::from_parts(752_342_444, 0)
            // Standard Error: 440_683
            .saturating_add(Weight::from_parts(108_308_100, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 749_148_000 picoseconds.
        Weight::from_parts(793_406_901, 0)
            // Standard Error: 1_792
            .saturating_add(Weight::from_parts(142_994, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_520_422_000 picoseconds.
        Weight::from_parts(2_680_955_891, 0)
            // Standard Error: 484_811
            .saturating_add(Weight::from_parts(120_229_586, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_623_013_000 picoseconds.
        Weight::from_parts(2_613_087_727, 0)
            // Standard Error: 8_044
            .saturating_add(Weight::from_parts(13_655_660, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_254_000 picoseconds.
        Weight::from_parts(116_566_974, 0)
            // Standard Error: 403_253
            .saturating_add(Weight::from_parts(108_162_661, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 158_602_000 picoseconds.
        Weight::from_parts(160_667_000, 0)
            // Standard Error: 51_034
            .saturating_add(Weight::from_parts(25_651_644, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_703_000 picoseconds.
        Weight::from_parts(85_764_796, 0)
            // Standard Error: 311_616
            .saturating_add(Weight::from_parts(82_783_761, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 144_442_000 picoseconds.
        Weight::from_parts(201_082_146, 0)
            // Standard Error: 314_999
            .saturating_add(Weight::from_parts(157_404_143, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_149_000 picoseconds.
        Weight::from_parts(158_479_157, 0)
            // Standard Error: 345_274
            .saturating_add(Weight::from_parts(345_365_872, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_099_235_000 picoseconds.
        Weight::from_parts(43_337_911_000, 0)
            // Standard Error: 262_182
            .saturating_add(Weight::from_parts(8_096_220, 0).saturating_mul(p.into()))
            // Standard Error: 262_169
            .saturating_add(Weight::from_parts(178_359_685, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_628_000 picoseconds.
        Weight::from_parts(169_774_911, 0)
            // Standard Error: 384_311
            .saturating_add(Weight::from_parts(352_544_004, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_577_588_000 picoseconds.
        Weight::from_parts(44_693_910_000, 0)
            // Standard Error: 264_900
            .saturating_add(Weight::from_parts(7_282_674, 0).saturating_mul(p.into()))
            // Standard Error: 264_887
            .saturating_add(Weight::from_parts(178_107_902, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_291_000 picoseconds.
        Weight::from_parts(110_922_107, 0)
            // Standard Error: 31_920
            .saturating_add(Weight::from_parts(1_984_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 92_076_000 picoseconds.
        Weight::from_parts(124_430_659, 1131)
            // Standard Error: 13_560
            .saturating_add(Weight::from_parts(16_272_074, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 89_805_000 picoseconds.
        Weight::from_parts(90_946_000, 1131)
            // Standard Error: 41_204
            .saturating_add(Weight::from_parts(40_647_734, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_237_654_000 picoseconds.
        Weight::from_parts(8_151_749_647, 5069931)
            // Standard Error: 86_951
            .saturating_add(Weight::from_parts(41_081_201, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 93_423_000 picoseconds.
        Weight::from_parts(95_727_000, 1939)
            // Standard Error: 53_795
            .saturating_add(Weight::from_parts(54_944_084, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 99_906_000 picoseconds.
        Weight::from_parts(104_913_683, 1131)
            // Standard Error: 54_410
            .saturating_add(Weight::from_parts(39_177_460, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 742_532_000 picoseconds.
        Weight::from_parts(750_595_865, 1496)
            // Standard Error: 115_110
            .saturating_add(Weight::from_parts(44_913_250, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_207_014_000 picoseconds.
        Weight::from_parts(1_234_033_055, 317931)
            // Standard Error: 166_485
            .saturating_add(Weight::from_parts(44_647_616, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_115_000 picoseconds.
        Weight::from_parts(2_297_000, 0)
            // Standard Error: 178_134
            .saturating_add(Weight::from_parts(73_799_167, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_448_487_000 picoseconds.
        Weight::from_parts(4_340_354_941, 0)
            // Standard Error: 47_965
            .saturating_add(Weight::from_parts(4_112_990, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_462_680_000 picoseconds.
        Weight::from_parts(4_366_104_443, 0)
            // Standard Error: 45_760
            .saturating_add(Weight::from_parts(4_007_152, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_492_660_000 picoseconds.
        Weight::from_parts(10_852_028_510, 0)
            // Standard Error: 159_402
            .saturating_add(Weight::from_parts(10_179_558, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_086_324_000 picoseconds.
        Weight::from_parts(10_872_629_380, 0)
            // Standard Error: 135_798
            .saturating_add(Weight::from_parts(8_639_344, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_542_000 picoseconds.
        Weight::from_parts(2_586_000, 0)
            // Standard Error: 8_771
            .saturating_add(Weight::from_parts(3_775_056, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_451_000 picoseconds.
        Weight::from_parts(18_863, 0)
            // Standard Error: 9_159
            .saturating_add(Weight::from_parts(3_119_005, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_517_000 picoseconds.
        Weight::from_parts(3_636_393, 0)
            // Standard Error: 940
            .saturating_add(Weight::from_parts(1_564_111, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_438_000 picoseconds.
        Weight::from_parts(2_506_000, 0)
            // Standard Error: 7_966
            .saturating_add(Weight::from_parts(2_879_477, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_388_000 picoseconds.
        Weight::from_parts(2_314_610, 0)
            // Standard Error: 19_702
            .saturating_add(Weight::from_parts(5_171_238, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_086_000 picoseconds.
        Weight::from_parts(5_787_878, 0)
            // Standard Error: 2_218
            .saturating_add(Weight::from_parts(143_237, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_460_000 picoseconds.
        Weight::from_parts(5_014_211, 0)
            // Standard Error: 7_587
            .saturating_add(Weight::from_parts(2_583_522, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_583_522 -
            2_412_926, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_530_000 picoseconds.
        Weight::from_parts(4_888_746, 0)
            // Standard Error: 12_784
            .saturating_add(Weight::from_parts(2_412_926, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_932_000 picoseconds.
        Weight::from_parts(10_462_073, 0)
            // Standard Error: 24_769
            .saturating_add(Weight::from_parts(10_306_703, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_268_000 picoseconds.
        Weight::from_parts(12_729_000, 0)
            // Standard Error: 5_761
            .saturating_add(Weight::from_parts(1_101_685, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_468_000 picoseconds.
        Weight::from_parts(5_816_588, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_962_000 picoseconds.
        Weight::from_parts(5_889_940, 0)
            // Standard Error: 2_570
            .saturating_add(Weight::from_parts(393_178, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_111_000 picoseconds.
        Weight::from_parts(4_906_743, 0)
            // Standard Error: 4_386
            .saturating_add(Weight::from_parts(935_092, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_182_000 picoseconds.
        Weight::from_parts(4_843_823, 0)
            // Standard Error: 5_444
            .saturating_add(Weight::from_parts(924_477, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_608_000 picoseconds.
        Weight::from_parts(3_053_227, 0)
            // Standard Error: 7_364
            .saturating_add(Weight::from_parts(767_756, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_760_000 picoseconds.
        Weight::from_parts(6_849_000, 0)
            // Standard Error: 8_764
            .saturating_add(Weight::from_parts(1_273_869, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_996_000 picoseconds.
        Weight::from_parts(498_956, 0)
            // Standard Error: 12_088
            .saturating_add(Weight::from_parts(6_887_906, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_528_000 picoseconds.
        Weight::from_parts(2_650_000, 0)
            // Standard Error: 7_583
            .saturating_add(Weight::from_parts(3_330_150, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_544_000 picoseconds.
        Weight::from_parts(2_561_000, 0)
            // Standard Error: 7_459
            .saturating_add(Weight::from_parts(3_129_734, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_499_000 picoseconds.
        Weight::from_parts(2_618_000, 0)
            // Standard Error: 7_480
            .saturating_add(Weight::from_parts(3_161_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_551_000 picoseconds.
        Weight::from_parts(2_659_000, 0)
            // Standard Error: 4_125
            .saturating_add(Weight::from_parts(2_616_707, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_504_000 picoseconds.
        Weight::from_parts(2_569_000, 0)
            // Standard Error: 4_132
            .saturating_add(Weight::from_parts(546_205, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_488_000 picoseconds.
        Weight::from_parts(1_765_040, 0)
            // Standard Error: 3_243
            .saturating_add(Weight::from_parts(387_980, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_513_000 picoseconds.
        Weight::from_parts(2_621_000, 0)
            // Standard Error: 12_985
            .saturating_add(Weight::from_parts(1_909_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_404_000 picoseconds.
        Weight::from_parts(2_507_000, 0)
            // Standard Error: 9_101
            .saturating_add(Weight::from_parts(1_148_336, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_420_000 picoseconds.
        Weight::from_parts(1_948_691, 0)
            // Standard Error: 2_986
            .saturating_add(Weight::from_parts(364_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_472_000 picoseconds.
        Weight::from_parts(1_916_792, 0)
            // Standard Error: 3_453
            .saturating_add(Weight::from_parts(359_472, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_461_000 picoseconds.
        Weight::from_parts(2_555_000, 0)
            // Standard Error: 3_808
            .saturating_add(Weight::from_parts(487_990, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_580_000 picoseconds.
        Weight::from_parts(525_877, 0)
            // Standard Error: 5_320
            .saturating_add(Weight::from_parts(547_504, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_446_000 picoseconds.
        Weight::from_parts(264_679, 0)
            // Standard Error: 7_286
            .saturating_add(Weight::from_parts(532_351, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_516_000 picoseconds.
        Weight::from_parts(2_157_337, 0)
            // Standard Error: 2_518
            .saturating_add(Weight::from_parts(310_819, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_729_000 picoseconds.
        Weight::from_parts(2_802_826, 0)
            // Standard Error: 1_389
            .saturating_add(Weight::from_parts(166_816, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_510_000 picoseconds.
        Weight::from_parts(3_046_349, 0)
            // Standard Error: 1_960
            .saturating_add(Weight::from_parts(158_600, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_407_000 picoseconds.
        Weight::from_parts(2_528_000, 0)
            // Standard Error: 13_034
            .saturating_add(Weight::from_parts(1_845_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_476_000 picoseconds.
        Weight::from_parts(2_554_000, 0)
            // Standard Error: 7_202
            .saturating_add(Weight::from_parts(1_130_545, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_433_000 picoseconds.
        Weight::from_parts(2_485_000, 0)
            // Standard Error: 11_767
            .saturating_add(Weight::from_parts(1_825_254, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_493_000 picoseconds.
        Weight::from_parts(2_528_000, 0)
            // Standard Error: 7_724
            .saturating_add(Weight::from_parts(1_114_878, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_385_000 picoseconds.
        Weight::from_parts(2_535_000, 0)
            // Standard Error: 11_142
            .saturating_add(Weight::from_parts(1_838_189, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_477_000 picoseconds.
        Weight::from_parts(2_540_000, 0)
            // Standard Error: 7_385
            .saturating_add(Weight::from_parts(1_087_171, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_470_000 picoseconds.
        Weight::from_parts(2_589_000, 0)
            // Standard Error: 11_752
            .saturating_add(Weight::from_parts(1_839_089, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_444_000 picoseconds.
        Weight::from_parts(2_551_000, 0)
            // Standard Error: 7_770
            .saturating_add(Weight::from_parts(1_116_040, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_448_000 picoseconds.
        Weight::from_parts(2_574_000, 0)
            // Standard Error: 11_524
            .saturating_add(Weight::from_parts(1_851_354, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_435_000 picoseconds.
        Weight::from_parts(2_637_000, 0)
            // Standard Error: 6_848
            .saturating_add(Weight::from_parts(1_077_721, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_511_000 picoseconds.
        Weight::from_parts(2_587_000, 0)
            // Standard Error: 12_002
            .saturating_add(Weight::from_parts(1_854_452, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_358_000 picoseconds.
        Weight::from_parts(2_466_000, 0)
            // Standard Error: 6_893
            .saturating_add(Weight::from_parts(1_109_108, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_482_000 picoseconds.
        Weight::from_parts(2_553_000, 0)
            // Standard Error: 11_628
            .saturating_add(Weight::from_parts(1_818_049, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_505_000 picoseconds.
        Weight::from_parts(2_626_000, 0)
            // Standard Error: 6_719
            .saturating_add(Weight::from_parts(1_099_726, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_441_000 picoseconds.
        Weight::from_parts(2_567_000, 0)
            // Standard Error: 10_833
            .saturating_add(Weight::from_parts(1_814_480, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_385_000 picoseconds.
        Weight::from_parts(2_473_000, 0)
            // Standard Error: 8_574
            .saturating_add(Weight::from_parts(1_113_910, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_429_000 picoseconds.
        Weight::from_parts(2_523_000, 0)
            // Standard Error: 11_676
            .saturating_add(Weight::from_parts(1_829_534, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_426_000 picoseconds.
        Weight::from_parts(2_527_000, 0)
            // Standard Error: 8_938
            .saturating_add(Weight::from_parts(1_134_806, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_506_000 picoseconds.
        Weight::from_parts(2_600_000, 0)
            // Standard Error: 12_277
            .saturating_add(Weight::from_parts(1_838_220, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_429_000 picoseconds.
        Weight::from_parts(2_507_000, 0)
            // Standard Error: 7_858
            .saturating_add(Weight::from_parts(1_112_141, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_560_000 picoseconds.
        Weight::from_parts(2_625_000, 0)
            // Standard Error: 9_140
            .saturating_add(Weight::from_parts(1_246_772, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_521_000 picoseconds.
        Weight::from_parts(2_617_000, 0)
            // Standard Error: 4_943
            .saturating_add(Weight::from_parts(605_245, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_421_000 picoseconds.
        Weight::from_parts(2_492_000, 0)
            // Standard Error: 7_115
            .saturating_add(Weight::from_parts(1_227_288, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_479_000 picoseconds.
        Weight::from_parts(196_836, 0)
            // Standard Error: 4_796
            .saturating_add(Weight::from_parts(679_200, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_493_000 picoseconds.
        Weight::from_parts(2_609_000, 0)
            // Standard Error: 12_772
            .saturating_add(Weight::from_parts(1_797_993, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_479_000 picoseconds.
        Weight::from_parts(2_568_000, 0)
            // Standard Error: 7_532
            .saturating_add(Weight::from_parts(1_164_975, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_449_000 picoseconds.
        Weight::from_parts(1_759_987, 0)
            // Standard Error: 13_225
            .saturating_add(Weight::from_parts(2_741_723, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_516_000 picoseconds.
        Weight::from_parts(1_896_835, 0)
            // Standard Error: 6_996
            .saturating_add(Weight::from_parts(2_390_331, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_460_000 picoseconds.
        Weight::from_parts(10_647, 0)
            // Standard Error: 10_221
            .saturating_add(Weight::from_parts(2_996_850, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_533_000 picoseconds.
        Weight::from_parts(657_430, 0)
            // Standard Error: 12_773
            .saturating_add(Weight::from_parts(2_481_316, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_407_000 picoseconds.
        Weight::from_parts(2_558_000, 0)
            // Standard Error: 16_144
            .saturating_add(Weight::from_parts(9_621_778, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_417_000 picoseconds.
        Weight::from_parts(2_481_000, 0)
            // Standard Error: 22_705
            .saturating_add(Weight::from_parts(7_500_076, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_337_000 picoseconds.
        Weight::from_parts(1_465_743, 0)
            // Standard Error: 9_421
            .saturating_add(Weight::from_parts(3_060_272, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_484_000 picoseconds.
        Weight::from_parts(2_536_000, 0)
            // Standard Error: 5_697
            .saturating_add(Weight::from_parts(2_501_558, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_386_000 picoseconds.
        Weight::from_parts(2_492_000, 0)
            // Standard Error: 7_864
            .saturating_add(Weight::from_parts(1_269_798, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_517_000 picoseconds.
        Weight::from_parts(2_634_000, 0)
            // Standard Error: 3_743
            .saturating_add(Weight::from_parts(580_260, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_436_000 picoseconds.
        Weight::from_parts(2_568_000, 0)
            // Standard Error: 8_144
            .saturating_add(Weight::from_parts(1_221_315, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_445_000 picoseconds.
        Weight::from_parts(2_569_000, 0)
            // Standard Error: 4_800
            .saturating_add(Weight::from_parts(602_791, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_444_000 picoseconds.
        Weight::from_parts(2_588_000, 0)
            // Standard Error: 8_371
            .saturating_add(Weight::from_parts(1_258_370, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_410_000 picoseconds.
        Weight::from_parts(2_489_000, 0)
            // Standard Error: 4_420
            .saturating_add(Weight::from_parts(595_744, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_489_000 picoseconds.
        Weight::from_parts(2_580_000, 0)
            // Standard Error: 6_979
            .saturating_add(Weight::from_parts(1_031_744, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_425_000 picoseconds.
        Weight::from_parts(197_545, 0)
            // Standard Error: 5_691
            .saturating_add(Weight::from_parts(607_965, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_423_000 picoseconds.
        Weight::from_parts(2_560_000, 0)
            // Standard Error: 7_254
            .saturating_add(Weight::from_parts(1_043_010, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_528_000 picoseconds.
        Weight::from_parts(2_602_000, 0)
            // Standard Error: 4_174
            .saturating_add(Weight::from_parts(560_519, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_492_000 picoseconds.
        Weight::from_parts(2_592_000, 0)
            // Standard Error: 6_845
            .saturating_add(Weight::from_parts(1_007_806, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_485_000 picoseconds.
        Weight::from_parts(2_568_000, 0)
            // Standard Error: 4_491
            .saturating_add(Weight::from_parts(529_626, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_495_000 picoseconds.
        Weight::from_parts(2_575_000, 0)
            // Standard Error: 6_702
            .saturating_add(Weight::from_parts(999_877, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_515_000 picoseconds.
        Weight::from_parts(210_889, 0)
            // Standard Error: 5_945
            .saturating_add(Weight::from_parts(620_256, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_500_000 picoseconds.
        Weight::from_parts(2_555_000, 0)
            // Standard Error: 6_525
            .saturating_add(Weight::from_parts(1_010_562, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_559_000 picoseconds.
        Weight::from_parts(2_616_000, 0)
            // Standard Error: 4_253
            .saturating_add(Weight::from_parts(560_906, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_resume_session() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `352`
        //  Estimated: `4169`
        // Minimum execution time: 6_005_000 picoseconds.
        Weight::from_parts(6_220_000, 4169)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1039`
        //  Estimated: `23781`
        // Minimum execution time: 63_147_000 picoseconds.
        Weight::from_parts(65_132_000, 23781)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `820`
        //  Estimated: `21750`
        // Minimum execution time: 46_373_000 picoseconds.
        Weight::from_parts(47_731_000, 21750)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `942`
        //  Estimated: `34143`
        // Minimum execution time: 75_279_000 picoseconds.
        Weight::from_parts(76_942_000, 34143)
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `627`
        //  Estimated: `20101`
        // Minimum execution time: 31_448_000 picoseconds.
        Weight::from_parts(32_851_000, 20101)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `908`
        //  Estimated: `26160`
        // Minimum execution time: 49_139_000 picoseconds.
        Weight::from_parts(52_144_000, 26160)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_432_000 picoseconds.
        Weight::from_parts(3_713_000, 3545)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1558`
        //  Estimated: `57552`
        // Minimum execution time: 111_783_000 picoseconds.
        Weight::from_parts(113_805_000, 57552)
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1264`
        //  Estimated: `46350`
        // Minimum execution time: 91_834_000 picoseconds.
        Weight::from_parts(95_584_000, 46350)
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2236 + c * (16400 ±0)`
        //  Estimated: `19543 + c * (84480 ±0)`
        // Minimum execution time: 29_168_000 picoseconds.
        Weight::from_parts(30_007_000, 19543)
            // Standard Error: 66_633
            .saturating_add(Weight::from_parts(38_987_924, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 84480).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program_uninited(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3061 + c * (42 ±0)`
        //  Estimated: `59827 + c * (2947 ±0)`
        // Minimum execution time: 87_348_000 picoseconds.
        Weight::from_parts(83_284_110, 59827)
            // Standard Error: 2_187
            .saturating_add(Weight::from_parts(1_045_315, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2947).saturating_mul(c.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
/// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_541_000 picoseconds.
        Weight::from_parts(102_074_380, 0)
            // Standard Error: 80_253
            .saturating_add(Weight::from_parts(20_577_464, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_217_000 picoseconds.
        Weight::from_parts(102_820_116, 0)
            // Standard Error: 70_881
            .saturating_add(Weight::from_parts(20_198_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_934_000 picoseconds.
        Weight::from_parts(99_436_614, 0)
            // Standard Error: 75_756
            .saturating_add(Weight::from_parts(20_017_120, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_685_000 picoseconds.
        Weight::from_parts(100_507_900, 0)
            // Standard Error: 74_256
            .saturating_add(Weight::from_parts(16_679_310, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 720_195_000 picoseconds.
        Weight::from_parts(738_553_478, 0)
            // Standard Error: 340_878
            .saturating_add(Weight::from_parts(10_667_010, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 721_127_000 picoseconds.
        Weight::from_parts(733_748_668, 0)
            // Standard Error: 383_608
            .saturating_add(Weight::from_parts(32_391_916, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_794_000 picoseconds.
        Weight::from_parts(110_377_956, 0)
            // Standard Error: 76_526
            .saturating_add(Weight::from_parts(6_912_932, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_895_000 picoseconds.
        Weight::from_parts(109_157_292, 0)
            // Standard Error: 69_826
            .saturating_add(Weight::from_parts(4_600_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_035_000 picoseconds.
        Weight::from_parts(98_674_780, 0)
            // Standard Error: 2_399_172
            .saturating_add(Weight::from_parts(179_813_382, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_493_000 picoseconds.
        Weight::from_parts(101_635_476, 0)
            // Standard Error: 2_074_239
            .saturating_add(Weight::from_parts(163_141_746, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_751_000 picoseconds.
        Weight::from_parts(98_196_104, 0)
            // Standard Error: 1_885_586
            .saturating_add(Weight::from_parts(131_263_910, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_807_000 picoseconds.
        Weight::from_parts(100_880_538, 0)
            // Standard Error: 2_127_302
            .saturating_add(Weight::from_parts(166_173_696, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_852_000 picoseconds.
        Weight::from_parts(97_599_076, 0)
            // Standard Error: 2_359_740
            .saturating_add(Weight::from_parts(168_401_966, 0).saturating_mul(r.into()))
    }
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 958_000 picoseconds.
        Weight::from_parts(999_000, 0)
            // Standard Error: 1_720
            .saturating_add(Weight::from_parts(256_698, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `79 + c * (1024 ±0)`
        //  Estimated: `3543 + c * (1024 ±0)`
        // Minimum execution time: 3_305_000 picoseconds.
        Weight::from_parts(3_371_000, 3543)
            // Standard Error: 949
            .saturating_add(Weight::from_parts(677_527, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 59_886_000 picoseconds.
        Weight::from_parts(100_347_065, 0)
            // Standard Error: 8_578
            .saturating_add(Weight::from_parts(2_416_692, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1304`
        //  Estimated: `51293`
        // Minimum execution time: 106_491_000 picoseconds.
        Weight::from_parts(108_920_000, 51293)
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `923`
        //  Estimated: `21372`
        // Minimum execution time: 55_187_000 picoseconds.
        Weight::from_parts(56_850_000, 21372)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `570`
        //  Estimated: `17214`
        // Minimum execution time: 29_550_000 picoseconds.
        Weight::from_parts(30_682_000, 17214)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_190_000 picoseconds.
        Weight::from_parts(4_378_244, 7640)
            // Standard Error: 35_496
            .saturating_add(Weight::from_parts(13_984_501, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1457 + c * (16389 ±0)`
        //  Estimated: `42178 + c * (131112 ±0)`
        // Minimum execution time: 72_031_000 picoseconds.
        Weight::from_parts(72_645_000, 42178)
            // Standard Error: 157_321
            .saturating_add(Weight::from_parts(55_126_957, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `46`
        //  Estimated: `5134`
        // Minimum execution time: 75_356_000 picoseconds.
        Weight::from_parts(42_141_300, 5134)
            // Standard Error: 39_742
            .saturating_add(Weight::from_parts(59_920_508, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1043`
        //  Estimated: `49852`
        // Minimum execution time: 94_667_000 picoseconds.
        Weight::from_parts(129_078_881, 49852)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_599, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `453`
        //  Estimated: `44268`
        // Minimum execution time: 11_062_366_000 picoseconds.
        Weight::from_parts(283_288_290, 44268)
            // Standard Error: 166_994
            .saturating_add(Weight::from_parts(60_131_646, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_548, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `530`
        //  Estimated: `31259`
        // Minimum execution time: 74_054_000 picoseconds.
        Weight::from_parts(42_896_007, 31259)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_051, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1303`
        //  Estimated: `53823`
        // Minimum execution time: 123_634_000 picoseconds.
        Weight::from_parts(102_717_940, 53823)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_056, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `89393`
        // Minimum execution time: 354_710_000 picoseconds.
        Weight::from_parts(372_465_446, 89393)
            .saturating_add(RocksDbWeight::get().reads(31_u64))
            .saturating_add(RocksDbWeight::get().writes(24_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `89133`
        // Minimum execution time: 366_324_000 picoseconds.
        Weight::from_parts(386_900_082, 89133)
            // Standard Error: 1_702
            .saturating_add(Weight::from_parts(4_767, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(31_u64))
            .saturating_add(RocksDbWeight::get().writes(24_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 58_682_000 picoseconds.
        Weight::from_parts(58_936_000, 3899)
            // Standard Error: 47_233
            .saturating_add(Weight::from_parts(59_196_665, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_307_000 picoseconds.
        Weight::from_parts(93_060_000, 0)
            // Standard Error: 4_357_875
            .saturating_add(Weight::from_parts(694_439_373, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 485_972_000 picoseconds.
        Weight::from_parts(424_278_751, 0)
            // Standard Error: 7_417
            .saturating_add(Weight::from_parts(29_011_785, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 217_038_000 picoseconds.
        Weight::from_parts(210_536_864, 0)
            // Standard Error: 311_232
            .saturating_add(Weight::from_parts(64_444_244, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_955_000 picoseconds.
        Weight::from_parts(103_075_315, 0)
            // Standard Error: 3_568
            .saturating_add(Weight::from_parts(2_491_193, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 146_459_000 picoseconds.
        Weight::from_parts(218_658_551, 0)
            // Standard Error: 27_553
            .saturating_add(Weight::from_parts(2_176_568, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_090_000 picoseconds.
        Weight::from_parts(109_755_995, 0)
            // Standard Error: 376_683
            .saturating_add(Weight::from_parts(95_499_497, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_618_000 picoseconds.
        Weight::from_parts(86_019_009, 0)
            // Standard Error: 319_500
            .saturating_add(Weight::from_parts(85_611_064, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_673_000 picoseconds.
        Weight::from_parts(94_927_515, 0)
            // Standard Error: 248_406
            .saturating_add(Weight::from_parts(90_207_922, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_836_000 picoseconds.
        Weight::from_parts(96_414_210, 0)
            // Standard Error: 284_469
            .saturating_add(Weight::from_parts(88_057_700, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_386_000 picoseconds.
        Weight::from_parts(95_494_909, 0)
            // Standard Error: 303_314
            .saturating_add(Weight::from_parts(86_030_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_292_000 picoseconds.
        Weight::from_parts(87_784_613, 0)
            // Standard Error: 334_572
            .saturating_add(Weight::from_parts(87_778_447, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_719_000 picoseconds.
        Weight::from_parts(86_899_095, 0)
            // Standard Error: 324_708
            .saturating_add(Weight::from_parts(85_855_075, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_516_000 picoseconds.
        Weight::from_parts(93_299_390, 0)
            // Standard Error: 348_913
            .saturating_add(Weight::from_parts(88_940_839, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 722_462_000 picoseconds.
        Weight::from_parts(761_122_222, 0)
            // Standard Error: 438_250
            .saturating_add(Weight::from_parts(140_228_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 842_626_000 picoseconds.
        Weight::from_parts(846_781_000, 0)
            // Standard Error: 57_163
            .saturating_add(Weight::from_parts(13_190_626, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_307_000 picoseconds.
        Weight::from_parts(94_134_361, 0)
            // Standard Error: 323_718
            .saturating_add(Weight::from_parts(83_261_345, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_833_000 picoseconds.
        Weight::from_parts(85_607_605, 0)
            // Standard Error: 329_967
            .saturating_add(Weight::from_parts(84_906_894, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_516_000 picoseconds.
        Weight::from_parts(103_819_650, 0)
            // Standard Error: 369_387
            .saturating_add(Weight::from_parts(168_113_482, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_353_000 picoseconds.
        Weight::from_parts(95_973_000, 0)
            // Standard Error: 3_572_042
            .saturating_add(Weight::from_parts(768_909_198, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_643_000 picoseconds.
        Weight::from_parts(162_063_973, 0)
            // Standard Error: 453_484
            .saturating_add(Weight::from_parts(257_028_555, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 352_216_000 picoseconds.
        Weight::from_parts(355_331_000, 0)
            // Standard Error: 70_179
            .saturating_add(Weight::from_parts(21_378_637, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_523_000 picoseconds.
        Weight::from_parts(162_790_301, 0)
            // Standard Error: 405_437
            .saturating_add(Weight::from_parts(265_126_016, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 356_130_000 picoseconds.
        Weight::from_parts(360_160_000, 0)
            // Standard Error: 64_369
            .saturating_add(Weight::from_parts(21_016_449, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 713_960_000 picoseconds.
        Weight::from_parts(825_180_943, 0)
            // Standard Error: 546_028
            .saturating_add(Weight::from_parts(275_330_299, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 726_494_000 picoseconds.
        Weight::from_parts(814_834_201, 0)
            // Standard Error: 512_055
            .saturating_add(Weight::from_parts(275_738_376, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_663_000 picoseconds.
        Weight::from_parts(77_449_317, 0)
            // Standard Error: 342_349
            .saturating_add(Weight::from_parts(93_320_254, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_839_199_000 picoseconds.
        Weight::from_parts(1_963_617_120, 0)
            // Standard Error: 349_593
            .saturating_add(Weight::from_parts(162_340_785, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 314_602_000 picoseconds.
        Weight::from_parts(315_400_000, 0)
            // Standard Error: 51_095
            .saturating_add(Weight::from_parts(31_254_194, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_823_364_000 picoseconds.
        Weight::from_parts(1_965_317_599, 0)
            // Standard Error: 359_371
            .saturating_add(Weight::from_parts(216_402_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_834_274_000 picoseconds.
        Weight::from_parts(1_950_496_721, 0)
            // Standard Error: 353_121
            .saturating_add(Weight::from_parts(223_171_905, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 253_411_000 picoseconds.
        Weight::from_parts(319_930_597, 0)
            // Standard Error: 351_552
            .saturating_add(Weight::from_parts(275_583_594, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 541_547_000 picoseconds.
        Weight::from_parts(550_539_000, 0)
            // Standard Error: 60_772
            .saturating_add(Weight::from_parts(21_224_442, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_968_104_000 picoseconds.
        Weight::from_parts(2_107_572_642, 0)
            // Standard Error: 470_759
            .saturating_add(Weight::from_parts(237_667_922, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_529_000 picoseconds.
        Weight::from_parts(102_067_986, 0)
            // Standard Error: 959
            .saturating_add(Weight::from_parts(430_393, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 112_956_000 picoseconds.
        Weight::from_parts(99_584_056, 0)
            // Standard Error: 1_072
            .saturating_add(Weight::from_parts(436_300, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_552_000 picoseconds.
        Weight::from_parts(157_809_561, 0)
            // Standard Error: 490_822
            .saturating_add(Weight::from_parts(144_351_612, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_721_000 picoseconds.
        Weight::from_parts(108_321_000, 0)
            // Standard Error: 2_476
            .saturating_add(Weight::from_parts(655_649, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_979_000 picoseconds.
        Weight::from_parts(102_349_993, 0)
            // Standard Error: 1_132
            .saturating_add(Weight::from_parts(431_909, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_802_000 picoseconds.
        Weight::from_parts(105_319_005, 0)
            // Standard Error: 956
            .saturating_add(Weight::from_parts(428_302, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_398_000 picoseconds.
        Weight::from_parts(85_727_634, 0)
            // Standard Error: 348_511
            .saturating_add(Weight::from_parts(86_343_487, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_166_000 picoseconds.
        Weight::from_parts(85_819_392, 0)
            // Standard Error: 314_429
            .saturating_add(Weight::from_parts(83_680_390, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_995_000 picoseconds.
        Weight::from_parts(84_853_016, 0)
            // Standard Error: 339_280
            .saturating_add(Weight::from_parts(87_400_305, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 729_200_000 picoseconds.
        Weight::from_parts(752_342_444, 0)
            // Standard Error: 440_683
            .saturating_add(Weight::from_parts(108_308_100, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 749_148_000 picoseconds.
        Weight::from_parts(793_406_901, 0)
            // Standard Error: 1_792
            .saturating_add(Weight::from_parts(142_994, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_520_422_000 picoseconds.
        Weight::from_parts(2_680_955_891, 0)
            // Standard Error: 484_811
            .saturating_add(Weight::from_parts(120_229_586, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_623_013_000 picoseconds.
        Weight::from_parts(2_613_087_727, 0)
            // Standard Error: 8_044
            .saturating_add(Weight::from_parts(13_655_660, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_254_000 picoseconds.
        Weight::from_parts(116_566_974, 0)
            // Standard Error: 403_253
            .saturating_add(Weight::from_parts(108_162_661, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 158_602_000 picoseconds.
        Weight::from_parts(160_667_000, 0)
            // Standard Error: 51_034
            .saturating_add(Weight::from_parts(25_651_644, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_703_000 picoseconds.
        Weight::from_parts(85_764_796, 0)
            // Standard Error: 311_616
            .saturating_add(Weight::from_parts(82_783_761, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 144_442_000 picoseconds.
        Weight::from_parts(201_082_146, 0)
            // Standard Error: 314_999
            .saturating_add(Weight::from_parts(157_404_143, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_149_000 picoseconds.
        Weight::from_parts(158_479_157, 0)
            // Standard Error: 345_274
            .saturating_add(Weight::from_parts(345_365_872, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_099_235_000 picoseconds.
        Weight::from_parts(43_337_911_000, 0)
            // Standard Error: 262_182
            .saturating_add(Weight::from_parts(8_096_220, 0).saturating_mul(p.into()))
            // Standard Error: 262_169
            .saturating_add(Weight::from_parts(178_359_685, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_628_000 picoseconds.
        Weight::from_parts(169_774_911, 0)
            // Standard Error: 384_311
            .saturating_add(Weight::from_parts(352_544_004, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_577_588_000 picoseconds.
        Weight::from_parts(44_693_910_000, 0)
            // Standard Error: 264_900
            .saturating_add(Weight::from_parts(7_282_674, 0).saturating_mul(p.into()))
            // Standard Error: 264_887
            .saturating_add(Weight::from_parts(178_107_902, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_291_000 picoseconds.
        Weight::from_parts(110_922_107, 0)
            // Standard Error: 31_920
            .saturating_add(Weight::from_parts(1_984_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 92_076_000 picoseconds.
        Weight::from_parts(124_430_659, 1131)
            // Standard Error: 13_560
            .saturating_add(Weight::from_parts(16_272_074, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 89_805_000 picoseconds.
        Weight::from_parts(90_946_000, 1131)
            // Standard Error: 41_204
            .saturating_add(Weight::from_parts(40_647_734, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_237_654_000 picoseconds.
        Weight::from_parts(8_151_749_647, 5069931)
            // Standard Error: 86_951
            .saturating_add(Weight::from_parts(41_081_201, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 93_423_000 picoseconds.
        Weight::from_parts(95_727_000, 1939)
            // Standard Error: 53_795
            .saturating_add(Weight::from_parts(54_944_084, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 99_906_000 picoseconds.
        Weight::from_parts(104_913_683, 1131)
            // Standard Error: 54_410
            .saturating_add(Weight::from_parts(39_177_460, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 742_532_000 picoseconds.
        Weight::from_parts(750_595_865, 1496)
            // Standard Error: 115_110
            .saturating_add(Weight::from_parts(44_913_250, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_207_014_000 picoseconds.
        Weight::from_parts(1_234_033_055, 317931)
            // Standard Error: 166_485
            .saturating_add(Weight::from_parts(44_647_616, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_115_000 picoseconds.
        Weight::from_parts(2_297_000, 0)
            // Standard Error: 178_134
            .saturating_add(Weight::from_parts(73_799_167, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_448_487_000 picoseconds.
        Weight::from_parts(4_340_354_941, 0)
            // Standard Error: 47_965
            .saturating_add(Weight::from_parts(4_112_990, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_462_680_000 picoseconds.
        Weight::from_parts(4_366_104_443, 0)
            // Standard Error: 45_760
            .saturating_add(Weight::from_parts(4_007_152, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_492_660_000 picoseconds.
        Weight::from_parts(10_852_028_510, 0)
            // Standard Error: 159_402
            .saturating_add(Weight::from_parts(10_179_558, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_086_324_000 picoseconds.
        Weight::from_parts(10_872_629_380, 0)
            // Standard Error: 135_798
            .saturating_add(Weight::from_parts(8_639_344, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_542_000 picoseconds.
        Weight::from_parts(2_586_000, 0)
            // Standard Error: 8_771
            .saturating_add(Weight::from_parts(3_775_056, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_451_000 picoseconds.
        Weight::from_parts(18_863, 0)
            // Standard Error: 9_159
            .saturating_add(Weight::from_parts(3_119_005, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_517_000 picoseconds.
        Weight::from_parts(3_636_393, 0)
            // Standard Error: 940
            .saturating_add(Weight::from_parts(1_564_111, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_438_000 picoseconds.
        Weight::from_parts(2_506_000, 0)
            // Standard Error: 7_966
            .saturating_add(Weight::from_parts(2_879_477, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_388_000 picoseconds.
        Weight::from_parts(2_314_610, 0)
            // Standard Error: 19_702
            .saturating_add(Weight::from_parts(5_171_238, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_086_000 picoseconds.
        Weight::from_parts(5_787_878, 0)
            // Standard Error: 2_218
            .saturating_add(Weight::from_parts(143_237, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_460_000 picoseconds.
        Weight::from_parts(5_014_211, 0)
            // Standard Error: 7_587
            .saturating_add(Weight::from_parts(2_583_522, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_583_522 -
            2_412_926, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_530_000 picoseconds.
        Weight::from_parts(4_888_746, 0)
            // Standard Error: 12_784
            .saturating_add(Weight::from_parts(2_412_926, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_932_000 picoseconds.
        Weight::from_parts(10_462_073, 0)
            // Standard Error: 24_769
            .saturating_add(Weight::from_parts(10_306_703, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_268_000 picoseconds.
        Weight::from_parts(12_729_000, 0)
            // Standard Error: 5_761
            .saturating_add(Weight::from_parts(1_101_685, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_468_000 picoseconds.
        Weight::from_parts(5_816_588, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_962_000 picoseconds.
        Weight::from_parts(5_889_940, 0)
            // Standard Error: 2_570
            .saturating_add(Weight::from_parts(393_178, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_111_000 picoseconds.
        Weight::from_parts(4_906_743, 0)
            // Standard Error: 4_386
            .saturating_add(Weight::from_parts(935_092, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_182_000 picoseconds.
        Weight::from_parts(4_843_823, 0)
            // Standard Error: 5_444
            .saturating_add(Weight::from_parts(924_477, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_608_000 picoseconds.
        Weight::from_parts(3_053_227, 0)
            // Standard Error: 7_364
            .saturating_add(Weight::from_parts(767_756, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_760_000 picoseconds.
        Weight::from_parts(6_849_000, 0)
            // Standard Error: 8_764
            .saturating_add(Weight::from_parts(1_273_869, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_996_000 picoseconds.
        Weight::from_parts(498_956, 0)
            // Standard Error: 12_088
            .saturating_add(Weight::from_parts(6_887_906, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_528_000 picoseconds.
        Weight::from_parts(2_650_000, 0)
            // Standard Error: 7_583
            .saturating_add(Weight::from_parts(3_330_150, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_544_000 picoseconds.
        Weight::from_parts(2_561_000, 0)
            // Standard Error: 7_459
            .saturating_add(Weight::from_parts(3_129_734, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_499_000 picoseconds.
        Weight::from_parts(2_618_000, 0)
            // Standard Error: 7_480
            .saturating_add(Weight::from_parts(3_161_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_551_000 picoseconds.
        Weight::from_parts(2_659_000, 0)
            // Standard Error: 4_125
            .saturating_add(Weight::from_parts(2_616_707, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_504_000 picoseconds.
        Weight::from_parts(2_569_000, 0)
            // Standard Error: 4_132
            .saturating_add(Weight::from_parts(546_205, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_488_000 picoseconds.
        Weight::from_parts(1_765_040, 0)
            // Standard Error: 3_243
            .saturating_add(Weight::from_parts(387_980, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_513_000 picoseconds.
        Weight::from_parts(2_621_000, 0)
            // Standard Error: 12_985
            .saturating_add(Weight::from_parts(1_909_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_404_000 picoseconds.
        Weight::from_parts(2_507_000, 0)
            // Standard Error: 9_101
            .saturating_add(Weight::from_parts(1_148_336, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_420_000 picoseconds.
        Weight::from_parts(1_948_691, 0)
            // Standard Error: 2_986
            .saturating_add(Weight::from_parts(364_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_472_000 picoseconds.
        Weight::from_parts(1_916_792, 0)
            // Standard Error: 3_453
            .saturating_add(Weight::from_parts(359_472, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_461_000 picoseconds.
        Weight::from_parts(2_555_000, 0)
            // Standard Error: 3_808
            .saturating_add(Weight::from_parts(487_990, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_580_000 picoseconds.
        Weight::from_parts(525_877, 0)
            // Standard Error: 5_320
            .saturating_add(Weight::from_parts(547_504, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_446_000 picoseconds.
        Weight::from_parts(264_679, 0)
            // Standard Error: 7_286
            .saturating_add(Weight::from_parts(532_351, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_516_000 picoseconds.
        Weight::from_parts(2_157_337, 0)
            // Standard Error: 2_518
            .saturating_add(Weight::from_parts(310_819, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_729_000 picoseconds.
        Weight::from_parts(2_802_826, 0)
            // Standard Error: 1_389
            .saturating_add(Weight::from_parts(166_816, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_510_000 picoseconds.
        Weight::from_parts(3_046_349, 0)
            // Standard Error: 1_960
            .saturating_add(Weight::from_parts(158_600, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_407_000 picoseconds.
        Weight::from_parts(2_528_000, 0)
            // Standard Error: 13_034
            .saturating_add(Weight::from_parts(1_845_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_476_000 picoseconds.
        Weight::from_parts(2_554_000, 0)
            // Standard Error: 7_202
            .saturating_add(Weight::from_parts(1_130_545, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_433_000 picoseconds.
        Weight::from_parts(2_485_000, 0)
            // Standard Error: 11_767
            .saturating_add(Weight::from_parts(1_825_254, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_493_000 picoseconds.
        Weight::from_parts(2_528_000, 0)
            // Standard Error: 7_724
            .saturating_add(Weight::from_parts(1_114_878, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_385_000 picoseconds.
        Weight::from_parts(2_535_000, 0)
            // Standard Error: 11_142
            .saturating_add(Weight::from_parts(1_838_189, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_477_000 picoseconds.
        Weight::from_parts(2_540_000, 0)
            // Standard Error: 7_385
            .saturating_add(Weight::from_parts(1_087_171, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_470_000 picoseconds.
        Weight::from_parts(2_589_000, 0)
            // Standard Error: 11_752
            .saturating_add(Weight::from_parts(1_839_089, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_444_000 picoseconds.
        Weight::from_parts(2_551_000, 0)
            // Standard Error: 7_770
            .saturating_add(Weight::from_parts(1_116_040, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_448_000 picoseconds.
        Weight::from_parts(2_574_000, 0)
            // Standard Error: 11_524
            .saturating_add(Weight::from_parts(1_851_354, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_435_000 picoseconds.
        Weight::from_parts(2_637_000, 0)
            // Standard Error: 6_848
            .saturating_add(Weight::from_parts(1_077_721, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_511_000 picoseconds.
        Weight::from_parts(2_587_000, 0)
            // Standard Error: 12_002
            .saturating_add(Weight::from_parts(1_854_452, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_358_000 picoseconds.
        Weight::from_parts(2_466_000, 0)
            // Standard Error: 6_893
            .saturating_add(Weight::from_parts(1_109_108, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_482_000 picoseconds.
        Weight::from_parts(2_553_000, 0)
            // Standard Error: 11_628
            .saturating_add(Weight::from_parts(1_818_049, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_505_000 picoseconds.
        Weight::from_parts(2_626_000, 0)
            // Standard Error: 6_719
            .saturating_add(Weight::from_parts(1_099_726, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_441_000 picoseconds.
        Weight::from_parts(2_567_000, 0)
            // Standard Error: 10_833
            .saturating_add(Weight::from_parts(1_814_480, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_385_000 picoseconds.
        Weight::from_parts(2_473_000, 0)
            // Standard Error: 8_574
            .saturating_add(Weight::from_parts(1_113_910, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_429_000 picoseconds.
        Weight::from_parts(2_523_000, 0)
            // Standard Error: 11_676
            .saturating_add(Weight::from_parts(1_829_534, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_426_000 picoseconds.
        Weight::from_parts(2_527_000, 0)
            // Standard Error: 8_938
            .saturating_add(Weight::from_parts(1_134_806, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_506_000 picoseconds.
        Weight::from_parts(2_600_000, 0)
            // Standard Error: 12_277
            .saturating_add(Weight::from_parts(1_838_220, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_429_000 picoseconds.
        Weight::from_parts(2_507_000, 0)
            // Standard Error: 7_858
            .saturating_add(Weight::from_parts(1_112_141, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_560_000 picoseconds.
        Weight::from_parts(2_625_000, 0)
            // Standard Error: 9_140
            .saturating_add(Weight::from_parts(1_246_772, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_521_000 picoseconds.
        Weight::from_parts(2_617_000, 0)
            // Standard Error: 4_943
            .saturating_add(Weight::from_parts(605_245, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_421_000 picoseconds.
        Weight::from_parts(2_492_000, 0)
            // Standard Error: 7_115
            .saturating_add(Weight::from_parts(1_227_288, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_479_000 picoseconds.
        Weight::from_parts(196_836, 0)
            // Standard Error: 4_796
            .saturating_add(Weight::from_parts(679_200, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_493_000 picoseconds.
        Weight::from_parts(2_609_000, 0)
            // Standard Error: 12_772
            .saturating_add(Weight::from_parts(1_797_993, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_479_000 picoseconds.
        Weight::from_parts(2_568_000, 0)
            // Standard Error: 7_532
            .saturating_add(Weight::from_parts(1_164_975, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_449_000 picoseconds.
        Weight::from_parts(1_759_987, 0)
            // Standard Error: 13_225
            .saturating_add(Weight::from_parts(2_741_723, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_516_000 picoseconds.
        Weight::from_parts(1_896_835, 0)
            // Standard Error: 6_996
            .saturating_add(Weight::from_parts(2_390_331, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_460_000 picoseconds.
        Weight::from_parts(10_647, 0)
            // Standard Error: 10_221
            .saturating_add(Weight::from_parts(2_996_850, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_533_000 picoseconds.
        Weight::from_parts(657_430, 0)
            // Standard Error: 12_773
            .saturating_add(Weight::from_parts(2_481_316, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_407_000 picoseconds.
        Weight::from_parts(2_558_000, 0)
            // Standard Error: 16_144
            .saturating_add(Weight::from_parts(9_621_778, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_417_000 picoseconds.
        Weight::from_parts(2_481_000, 0)
            // Standard Error: 22_705
            .saturating_add(Weight::from_parts(7_500_076, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_337_000 picoseconds.
        Weight::from_parts(1_465_743, 0)
            // Standard Error: 9_421
            .saturating_add(Weight::from_parts(3_060_272, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_484_000 picoseconds.
        Weight::from_parts(2_536_000, 0)
            // Standard Error: 5_697
            .saturating_add(Weight::from_parts(2_501_558, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_386_000 picoseconds.
        Weight::from_parts(2_492_000, 0)
            // Standard Error: 7_864
            .saturating_add(Weight::from_parts(1_269_798, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_517_000 picoseconds.
        Weight::from_parts(2_634_000, 0)
            // Standard Error: 3_743
            .saturating_add(Weight::from_parts(580_260, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_436_000 picoseconds.
        Weight::from_parts(2_568_000, 0)
            // Standard Error: 8_144
            .saturating_add(Weight::from_parts(1_221_315, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_445_000 picoseconds.
        Weight::from_parts(2_569_000, 0)
            // Standard Error: 4_800
            .saturating_add(Weight::from_parts(602_791, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_444_000 picoseconds.
        Weight::from_parts(2_588_000, 0)
            // Standard Error: 8_371
            .saturating_add(Weight::from_parts(1_258_370, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_410_000 picoseconds.
        Weight::from_parts(2_489_000, 0)
            // Standard Error: 4_420
            .saturating_add(Weight::from_parts(595_744, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_489_000 picoseconds.
        Weight::from_parts(2_580_000, 0)
            // Standard Error: 6_979
            .saturating_add(Weight::from_parts(1_031_744, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_425_000 picoseconds.
        Weight::from_parts(197_545, 0)
            // Standard Error: 5_691
            .saturating_add(Weight::from_parts(607_965, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_423_000 picoseconds.
        Weight::from_parts(2_560_000, 0)
            // Standard Error: 7_254
            .saturating_add(Weight::from_parts(1_043_010, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_528_000 picoseconds.
        Weight::from_parts(2_602_000, 0)
            // Standard Error: 4_174
            .saturating_add(Weight::from_parts(560_519, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_492_000 picoseconds.
        Weight::from_parts(2_592_000, 0)
            // Standard Error: 6_845
            .saturating_add(Weight::from_parts(1_007_806, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_485_000 picoseconds.
        Weight::from_parts(2_568_000, 0)
            // Standard Error: 4_491
            .saturating_add(Weight::from_parts(529_626, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_495_000 picoseconds.
        Weight::from_parts(2_575_000, 0)
            // Standard Error: 6_702
            .saturating_add(Weight::from_parts(999_877, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_515_000 picoseconds.
        Weight::from_parts(210_889, 0)
            // Standard Error: 5_945
            .saturating_add(Weight::from_parts(620_256, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_500_000 picoseconds.
        Weight::from_parts(2_555_000, 0)
            // Standard Error: 6_525
            .saturating_add(Weight::from_parts(1_010_562, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_559_000 picoseconds.
        Weight::from_parts(2_616_000, 0)
            // Standard Error: 4_253
            .saturating_add(Weight::from_parts(560_906, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_resume_session() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `352`
        //  Estimated: `4169`
        // Minimum execution time: 6_005_000 picoseconds.
        Weight::from_parts(6_220_000, 4169)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1039`
        //  Estimated: `23781`
        // Minimum execution time: 63_147_000 picoseconds.
        Weight::from_parts(65_132_000, 23781)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `820`
        //  Estimated: `21750`
        // Minimum execution time: 46_373_000 picoseconds.
        Weight::from_parts(47_731_000, 21750)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `942`
        //  Estimated: `34143`
        // Minimum execution time: 75_279_000 picoseconds.
        Weight::from_parts(76_942_000, 34143)
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `627`
        //  Estimated: `20101`
        // Minimum execution time: 31_448_000 picoseconds.
        Weight::from_parts(32_851_000, 20101)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `908`
        //  Estimated: `26160`
        // Minimum execution time: 49_139_000 picoseconds.
        Weight::from_parts(52_144_000, 26160)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_432_000 picoseconds.
        Weight::from_parts(3_713_000, 3545)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1558`
        //  Estimated: `57552`
        // Minimum execution time: 111_783_000 picoseconds.
        Weight::from_parts(113_805_000, 57552)
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1264`
        //  Estimated: `46350`
        // Minimum execution time: 91_834_000 picoseconds.
        Weight::from_parts(95_584_000, 46350)
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2236 + c * (16400 ±0)`
        //  Estimated: `19543 + c * (84480 ±0)`
        // Minimum execution time: 29_168_000 picoseconds.
        Weight::from_parts(30_007_000, 19543)
            // Standard Error: 66_633
            .saturating_add(Weight::from_parts(38_987_924, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 84480).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program_uninited(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3061 + c * (42 ±0)`
        //  Estimated: `59827 + c * (2947 ±0)`
        // Minimum execution time: 87_348_000 picoseconds.
        Weight::from_parts(83_284_110, 59827)
            // Standard Error: 2_187
            .saturating_add(Weight::from_parts(1_045_315, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2947).saturating_mul(c.into()))
    }
}
