// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-17, STEPS: `51`, REPEAT: 200, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --steps=51 --repeat=200 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=out_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_error(r: u32, ) -> Weight;
    fn gr_status_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_read_access(p: u32, ) -> Weight;
    fn lazy_pages_write_access(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(1_220_000 as u64)
            // Standard Error: 190
            .saturating_add(Weight::from_ref_time(246_305 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(4_227_000 as u64)
            // Standard Error: 400
            .saturating_add(Weight::from_ref_time(679_800 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(62_124_820 as u64)
            // Standard Error: 1_650
            .saturating_add(Weight::from_ref_time(2_796_096 as u64).saturating_mul(c as u64))
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(71_692_000 as u64)
            .saturating_add(T::DbWeight::get().reads(7 as u64))
            .saturating_add(T::DbWeight::get().writes(5 as u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(62_898_000 as u64)
            // Standard Error: 9_797
            .saturating_add(Weight::from_ref_time(52_262_019 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(4 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(64_576_813 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_339 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(9 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(9_293_231_000 as u64)
            // Standard Error: 132_191
            .saturating_add(Weight::from_ref_time(30_240_241 as u64).saturating_mul(c as u64))
            // Standard Error: 7
            .saturating_add(Weight::from_ref_time(735 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(12 as u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(45_978_381 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_207 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(9 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(73_004_828 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_225 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(13 as u64))
            .saturating_add(T::DbWeight::get().writes(10 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        Weight::from_ref_time(212_194_804 as u64)
            // Standard Error: 188
            .saturating_add(Weight::from_ref_time(500 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(23 as u64))
            .saturating_add(T::DbWeight::get().writes(24 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(221_129_697 as u64)
            // Standard Error: 195
            .saturating_add(Weight::from_ref_time(416 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(23 as u64))
            .saturating_add(T::DbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(40_716_000 as u64)
            // Standard Error: 10_151
            .saturating_add(Weight::from_ref_time(51_979_362 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(113_744_255 as u64)
            // Standard Error: 76_795
            .saturating_add(Weight::from_ref_time(194_716_035 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        Weight::from_ref_time(293_999_072 as u64)
            // Standard Error: 87_965
            .saturating_add(Weight::from_ref_time(190_183_134 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(93_514_000 as u64)
            // Standard Error: 520_775
            .saturating_add(Weight::from_ref_time(580_682_951 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(146_663_124 as u64)
            // Standard Error: 103_703
            .saturating_add(Weight::from_ref_time(410_147_842 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(153_545_369 as u64)
            // Standard Error: 80_970
            .saturating_add(Weight::from_ref_time(314_931_961 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        Weight::from_ref_time(105_369_080 as u64)
            // Standard Error: 74_337
            .saturating_add(Weight::from_ref_time(315_117_898 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(111_251_094 as u64)
            // Standard Error: 69_525
            .saturating_add(Weight::from_ref_time(316_426_625 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(109_385_953 as u64)
            // Standard Error: 66_252
            .saturating_add(Weight::from_ref_time(313_734_894 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(105_459_062 as u64)
            // Standard Error: 65_981
            .saturating_add(Weight::from_ref_time(314_080_437 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(106_802_341 as u64)
            // Standard Error: 70_151
            .saturating_add(Weight::from_ref_time(314_827_428 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(112_012_365 as u64)
            // Standard Error: 74_932
            .saturating_add(Weight::from_ref_time(312_876_409 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(110_141_178 as u64)
            // Standard Error: 67_449
            .saturating_add(Weight::from_ref_time(313_269_218 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(111_964_102 as u64)
            // Standard Error: 69_618
            .saturating_add(Weight::from_ref_time(316_001_064 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(151_359_409 as u64)
            // Standard Error: 81_195
            .saturating_add(Weight::from_ref_time(342_127_225 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(465_014_000 as u64)
            // Standard Error: 35_157
            .saturating_add(Weight::from_ref_time(17_287_047 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(110_917_710 as u64)
            // Standard Error: 66_089
            .saturating_add(Weight::from_ref_time(313_323_643 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(111_124_415 as u64)
            // Standard Error: 70_473
            .saturating_add(Weight::from_ref_time(312_665_759 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        Weight::from_ref_time(130_274_749 as u64)
            // Standard Error: 75_164
            .saturating_add(Weight::from_ref_time(395_887_415 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(114_430_017 as u64)
            // Standard Error: 69_014
            .saturating_add(Weight::from_ref_time(327_033_779 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(152_296_401 as u64)
            // Standard Error: 83_155
            .saturating_add(Weight::from_ref_time(725_251_237 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(823_572_000 as u64)
            // Standard Error: 25_163
            .saturating_add(Weight::from_ref_time(37_492_405 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(166_802_785 as u64)
            // Standard Error: 103_747
            .saturating_add(Weight::from_ref_time(506_017_376 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(623_191_000 as u64)
            // Standard Error: 31_362
            .saturating_add(Weight::from_ref_time(25_715_892 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(150_710_978 as u64)
            // Standard Error: 101_868
            .saturating_add(Weight::from_ref_time(560_521_572 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(679_693_000 as u64)
            // Standard Error: 31_856
            .saturating_add(Weight::from_ref_time(25_905_414 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(94_969_446 as u64)
            // Standard Error: 101_979
            .saturating_add(Weight::from_ref_time(40_455_433 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((4 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(146_214_217 as u64)
            // Standard Error: 76_481
            .saturating_add(Weight::from_ref_time(367_526_142 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(132_797_000 as u64)
            // Standard Error: 704
            .saturating_add(Weight::from_ref_time(1_016_611 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(95_674_597 as u64)
            // Standard Error: 99_603
            .saturating_add(Weight::from_ref_time(57_577_562 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((4 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(124_296_228 as u64)
            // Standard Error: 80_048
            .saturating_add(Weight::from_ref_time(313_970_296 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        Weight::from_ref_time(99_424_529 as u64)
            // Standard Error: 7_414
            .saturating_add(Weight::from_ref_time(4_055_995 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        Weight::from_ref_time(150_629_876 as u64)
            // Standard Error: 78_065
            .saturating_add(Weight::from_ref_time(327_088_647 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(98_802_671 as u64)
            // Standard Error: 202
            .saturating_add(Weight::from_ref_time(825_467 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        Weight::from_ref_time(157_554_696 as u64)
            // Standard Error: 80_220
            .saturating_add(Weight::from_ref_time(678_985_053 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(597_323_751 as u64)
            // Standard Error: 7_543
            .saturating_add(Weight::from_ref_time(43_250_262 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(120_019_227 as u64)
            // Standard Error: 55_122
            .saturating_add(Weight::from_ref_time(290_671_705 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(381_675_000 as u64)
            // Standard Error: 24_311
            .saturating_add(Weight::from_ref_time(29_427_623 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        Weight::from_ref_time(163_577_505 as u64)
            // Standard Error: 96_277
            .saturating_add(Weight::from_ref_time(632_620_851 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        Weight::from_ref_time(117_696_507 as u64)
            // Standard Error: 69_426
            .saturating_add(Weight::from_ref_time(313_709_657 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(94_888_521 as u64)
            // Standard Error: 139_569
            .saturating_add(Weight::from_ref_time(57_705_448 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(94_125_460 as u64)
            // Standard Error: 133_156
            .saturating_add(Weight::from_ref_time(39_341_189 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(94_275_733 as u64)
            // Standard Error: 134_973
            .saturating_add(Weight::from_ref_time(39_211_536 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(94_766_288 as u64)
            // Standard Error: 138_953
            .saturating_add(Weight::from_ref_time(40_337_401 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        Weight::from_ref_time(94_883_133 as u64)
            // Standard Error: 137_044
            .saturating_add(Weight::from_ref_time(42_088_406 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(146_995_375 as u64)
            // Standard Error: 82_689
            .saturating_add(Weight::from_ref_time(399_166_853 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(148_656_751 as u64)
            // Standard Error: 90_903
            .saturating_add(Weight::from_ref_time(606_133_710 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
    }
    /// The range of component `p` is `[0, 1024]`.
    /// The range of component `s` is `[1, 1024]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(1_784_727_588 as u64)
            // Standard Error: 65_217
            .saturating_add(Weight::from_ref_time(25_054_611 as u64).saturating_mul(p as u64))
            // Standard Error: 65_283
            .saturating_add(Weight::from_ref_time(212_125_680 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_read_access(p: u32, ) -> Weight {
        Weight::from_ref_time(90_205_000 as u64)
            // Standard Error: 7_503
            .saturating_add(Weight::from_ref_time(55_428_667 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads((16 as u64).saturating_mul(p as u64)))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_write_access(p: u32, ) -> Weight {
        Weight::from_ref_time(28_503_391_261 as u64)
            // Standard Error: 25_999
            .saturating_add(Weight::from_ref_time(71_477_903 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(8192 as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(11_639_583_000 as u64)
            // Standard Error: 121_168
            .saturating_add(Weight::from_ref_time(30_753_009 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(11_670_404_000 as u64)
            // Standard Error: 116_067
            .saturating_add(Weight::from_ref_time(42_656_030 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(4_817_512 as u64)
            // Standard Error: 8_952
            .saturating_add(Weight::from_ref_time(7_585_921 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(10_784_549 as u64)
            // Standard Error: 6_922
            .saturating_add(Weight::from_ref_time(5_725_758 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(3_233_538 as u64)
            // Standard Error: 812
            .saturating_add(Weight::from_ref_time(3_312_399 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(2_488_000 as u64)
            // Standard Error: 4_479
            .saturating_add(Weight::from_ref_time(6_280_658 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(8_004_193 as u64)
            // Standard Error: 10_404
            .saturating_add(Weight::from_ref_time(9_818_623 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(14_021_458 as u64)
            // Standard Error: 923
            .saturating_add(Weight::from_ref_time(423_434 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(6_794_195 as u64)
            // Standard Error: 7_818
            .saturating_add(Weight::from_ref_time(4_889_354 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        Weight::from_ref_time(7_712_113 as u64)
            // Standard Error: 4_230
            .saturating_add(Weight::from_ref_time(5_101_537 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(3_012_000 as u64)
            // Standard Error: 15_074
            .saturating_add(Weight::from_ref_time(21_888_628 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(28_246_928 as u64)
            // Standard Error: 3_819
            .saturating_add(Weight::from_ref_time(1_940_719 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(2_534_000 as u64)
            // Standard Error: 2_355
            .saturating_add(Weight::from_ref_time(842_707 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(2_548_000 as u64)
            // Standard Error: 2_997
            .saturating_add(Weight::from_ref_time(2_220_384 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(2_532_000 as u64)
            // Standard Error: 2_856
            .saturating_add(Weight::from_ref_time(2_261_369 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(3_376_735 as u64)
            // Standard Error: 4_142
            .saturating_add(Weight::from_ref_time(2_354_513 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(10_527_486 as u64)
            // Standard Error: 6_696
            .saturating_add(Weight::from_ref_time(3_216_039 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(4_596_448 as u64)
            // Standard Error: 5_278
            .saturating_add(Weight::from_ref_time(13_935_561 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(10_598_938 as u64)
            // Standard Error: 7_663
            .saturating_add(Weight::from_ref_time(6_066_041 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(9_622_370 as u64)
            // Standard Error: 7_560
            .saturating_add(Weight::from_ref_time(5_743_237 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(2_500_000 as u64)
            // Standard Error: 3_015
            .saturating_add(Weight::from_ref_time(1_873_631 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(5_532_103 as u64)
            // Standard Error: 8_464
            .saturating_add(Weight::from_ref_time(3_633_559 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(2_502_000 as u64)
            // Standard Error: 2_627
            .saturating_add(Weight::from_ref_time(1_192_025 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(1_529_050 as u64)
            // Standard Error: 1_698
            .saturating_add(Weight::from_ref_time(605_823 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(2_261_441 as u64)
            // Standard Error: 1_723
            .saturating_add(Weight::from_ref_time(588_656 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(5_334_003 as u64)
            // Standard Error: 8_604
            .saturating_add(Weight::from_ref_time(3_702_400 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(4_723_850 as u64)
            // Standard Error: 7_785
            .saturating_add(Weight::from_ref_time(3_725_396 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(7_355_910 as u64)
            // Standard Error: 8_562
            .saturating_add(Weight::from_ref_time(3_611_391 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(5_497_746 as u64)
            // Standard Error: 8_253
            .saturating_add(Weight::from_ref_time(3_598_005 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(5_176_715 as u64)
            // Standard Error: 8_042
            .saturating_add(Weight::from_ref_time(3_603_786 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(5_485_372 as u64)
            // Standard Error: 8_125
            .saturating_add(Weight::from_ref_time(3_602_668 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(6_545_535 as u64)
            // Standard Error: 8_608
            .saturating_add(Weight::from_ref_time(3_577_493 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(5_346_608 as u64)
            // Standard Error: 7_871
            .saturating_add(Weight::from_ref_time(3_606_788 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(3_951_527 as u64)
            // Standard Error: 7_542
            .saturating_add(Weight::from_ref_time(3_735_346 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(6_253_293 as u64)
            // Standard Error: 8_185
            .saturating_add(Weight::from_ref_time(3_689_437 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(1_163_885 as u64)
            // Standard Error: 6_583
            .saturating_add(Weight::from_ref_time(3_107_787 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(1_847_004 as u64)
            // Standard Error: 6_674
            .saturating_add(Weight::from_ref_time(3_101_389 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(5_892_815 as u64)
            // Standard Error: 8_394
            .saturating_add(Weight::from_ref_time(3_653_482 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(1_969_514 as u64)
            // Standard Error: 13_077
            .saturating_add(Weight::from_ref_time(4_564_043 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_531_000 as u64)
            // Standard Error: 7_509
            .saturating_add(Weight::from_ref_time(4_915_262 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(2_534_000 as u64)
            // Standard Error: 25_497
            .saturating_add(Weight::from_ref_time(21_974_396 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_044_226 as u64)
            // Standard Error: 14_886
            .saturating_add(Weight::from_ref_time(5_009_983 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(1_029_650 as u64)
            // Standard Error: 6_786
            .saturating_add(Weight::from_ref_time(3_113_911 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(742_555 as u64)
            // Standard Error: 6_860
            .saturating_add(Weight::from_ref_time(3_125_514 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(1_379_040 as u64)
            // Standard Error: 7_147
            .saturating_add(Weight::from_ref_time(3_113_479 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(2_525_000 as u64)
            // Standard Error: 3_250
            .saturating_add(Weight::from_ref_time(2_818_119 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(2_529_000 as u64)
            // Standard Error: 3_382
            .saturating_add(Weight::from_ref_time(2_823_098 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(2_509_000 as u64)
            // Standard Error: 3_270
            .saturating_add(Weight::from_ref_time(2_795_939 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(2_534_000 as u64)
            // Standard Error: 3_493
            .saturating_add(Weight::from_ref_time(2_804_528 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(2_536_000 as u64)
            // Standard Error: 3_296
            .saturating_add(Weight::from_ref_time(2_829_067 as u64).saturating_mul(r as u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(1_220_000 as u64)
            // Standard Error: 190
            .saturating_add(Weight::from_ref_time(246_305 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(4_227_000 as u64)
            // Standard Error: 400
            .saturating_add(Weight::from_ref_time(679_800 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(62_124_820 as u64)
            // Standard Error: 1_650
            .saturating_add(Weight::from_ref_time(2_796_096 as u64).saturating_mul(c as u64))
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(71_692_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(7 as u64))
            .saturating_add(RocksDbWeight::get().writes(5 as u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(62_898_000 as u64)
            // Standard Error: 9_797
            .saturating_add(Weight::from_ref_time(52_262_019 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().writes(4 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(64_576_813 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_339 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(9 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(9_293_231_000 as u64)
            // Standard Error: 132_191
            .saturating_add(Weight::from_ref_time(30_240_241 as u64).saturating_mul(c as u64))
            // Standard Error: 7
            .saturating_add(Weight::from_ref_time(735 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(12 as u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(45_978_381 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_207 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(9 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(73_004_828 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_225 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(13 as u64))
            .saturating_add(RocksDbWeight::get().writes(10 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        Weight::from_ref_time(212_194_804 as u64)
            // Standard Error: 188
            .saturating_add(Weight::from_ref_time(500 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(23 as u64))
            .saturating_add(RocksDbWeight::get().writes(24 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(221_129_697 as u64)
            // Standard Error: 195
            .saturating_add(Weight::from_ref_time(416 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(23 as u64))
            .saturating_add(RocksDbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(40_716_000 as u64)
            // Standard Error: 10_151
            .saturating_add(Weight::from_ref_time(51_979_362 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
            .saturating_add(RocksDbWeight::get().writes(2 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(113_744_255 as u64)
            // Standard Error: 76_795
            .saturating_add(Weight::from_ref_time(194_716_035 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        Weight::from_ref_time(293_999_072 as u64)
            // Standard Error: 87_965
            .saturating_add(Weight::from_ref_time(190_183_134 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(93_514_000 as u64)
            // Standard Error: 520_775
            .saturating_add(Weight::from_ref_time(580_682_951 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(146_663_124 as u64)
            // Standard Error: 103_703
            .saturating_add(Weight::from_ref_time(410_147_842 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(153_545_369 as u64)
            // Standard Error: 80_970
            .saturating_add(Weight::from_ref_time(314_931_961 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        Weight::from_ref_time(105_369_080 as u64)
            // Standard Error: 74_337
            .saturating_add(Weight::from_ref_time(315_117_898 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(111_251_094 as u64)
            // Standard Error: 69_525
            .saturating_add(Weight::from_ref_time(316_426_625 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(109_385_953 as u64)
            // Standard Error: 66_252
            .saturating_add(Weight::from_ref_time(313_734_894 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(105_459_062 as u64)
            // Standard Error: 65_981
            .saturating_add(Weight::from_ref_time(314_080_437 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(106_802_341 as u64)
            // Standard Error: 70_151
            .saturating_add(Weight::from_ref_time(314_827_428 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(112_012_365 as u64)
            // Standard Error: 74_932
            .saturating_add(Weight::from_ref_time(312_876_409 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(110_141_178 as u64)
            // Standard Error: 67_449
            .saturating_add(Weight::from_ref_time(313_269_218 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(111_964_102 as u64)
            // Standard Error: 69_618
            .saturating_add(Weight::from_ref_time(316_001_064 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(151_359_409 as u64)
            // Standard Error: 81_195
            .saturating_add(Weight::from_ref_time(342_127_225 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(465_014_000 as u64)
            // Standard Error: 35_157
            .saturating_add(Weight::from_ref_time(17_287_047 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(110_917_710 as u64)
            // Standard Error: 66_089
            .saturating_add(Weight::from_ref_time(313_323_643 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(111_124_415 as u64)
            // Standard Error: 70_473
            .saturating_add(Weight::from_ref_time(312_665_759 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        Weight::from_ref_time(130_274_749 as u64)
            // Standard Error: 75_164
            .saturating_add(Weight::from_ref_time(395_887_415 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(114_430_017 as u64)
            // Standard Error: 69_014
            .saturating_add(Weight::from_ref_time(327_033_779 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(152_296_401 as u64)
            // Standard Error: 83_155
            .saturating_add(Weight::from_ref_time(725_251_237 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(823_572_000 as u64)
            // Standard Error: 25_163
            .saturating_add(Weight::from_ref_time(37_492_405 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(166_802_785 as u64)
            // Standard Error: 103_747
            .saturating_add(Weight::from_ref_time(506_017_376 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(623_191_000 as u64)
            // Standard Error: 31_362
            .saturating_add(Weight::from_ref_time(25_715_892 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(150_710_978 as u64)
            // Standard Error: 101_868
            .saturating_add(Weight::from_ref_time(560_521_572 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().reads((2 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(679_693_000 as u64)
            // Standard Error: 31_856
            .saturating_add(Weight::from_ref_time(25_905_414 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(94_969_446 as u64)
            // Standard Error: 101_979
            .saturating_add(Weight::from_ref_time(40_455_433 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((4 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(146_214_217 as u64)
            // Standard Error: 76_481
            .saturating_add(Weight::from_ref_time(367_526_142 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(132_797_000 as u64)
            // Standard Error: 704
            .saturating_add(Weight::from_ref_time(1_016_611 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(95_674_597 as u64)
            // Standard Error: 99_603
            .saturating_add(Weight::from_ref_time(57_577_562 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((4 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(124_296_228 as u64)
            // Standard Error: 80_048
            .saturating_add(Weight::from_ref_time(313_970_296 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        Weight::from_ref_time(99_424_529 as u64)
            // Standard Error: 7_414
            .saturating_add(Weight::from_ref_time(4_055_995 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        Weight::from_ref_time(150_629_876 as u64)
            // Standard Error: 78_065
            .saturating_add(Weight::from_ref_time(327_088_647 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(98_802_671 as u64)
            // Standard Error: 202
            .saturating_add(Weight::from_ref_time(825_467 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        Weight::from_ref_time(157_554_696 as u64)
            // Standard Error: 80_220
            .saturating_add(Weight::from_ref_time(678_985_053 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(597_323_751 as u64)
            // Standard Error: 7_543
            .saturating_add(Weight::from_ref_time(43_250_262 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(120_019_227 as u64)
            // Standard Error: 55_122
            .saturating_add(Weight::from_ref_time(290_671_705 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(381_675_000 as u64)
            // Standard Error: 24_311
            .saturating_add(Weight::from_ref_time(29_427_623 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        Weight::from_ref_time(163_577_505 as u64)
            // Standard Error: 96_277
            .saturating_add(Weight::from_ref_time(632_620_851 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        Weight::from_ref_time(117_696_507 as u64)
            // Standard Error: 69_426
            .saturating_add(Weight::from_ref_time(313_709_657 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(94_888_521 as u64)
            // Standard Error: 139_569
            .saturating_add(Weight::from_ref_time(57_705_448 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(94_125_460 as u64)
            // Standard Error: 133_156
            .saturating_add(Weight::from_ref_time(39_341_189 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(94_275_733 as u64)
            // Standard Error: 134_973
            .saturating_add(Weight::from_ref_time(39_211_536 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(94_766_288 as u64)
            // Standard Error: 138_953
            .saturating_add(Weight::from_ref_time(40_337_401 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        Weight::from_ref_time(94_883_133 as u64)
            // Standard Error: 137_044
            .saturating_add(Weight::from_ref_time(42_088_406 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(146_995_375 as u64)
            // Standard Error: 82_689
            .saturating_add(Weight::from_ref_time(399_166_853 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(148_656_751 as u64)
            // Standard Error: 90_903
            .saturating_add(Weight::from_ref_time(606_133_710 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
    }
    /// The range of component `p` is `[0, 1024]`.
    /// The range of component `s` is `[1, 1024]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(1_784_727_588 as u64)
            // Standard Error: 65_217
            .saturating_add(Weight::from_ref_time(25_054_611 as u64).saturating_mul(p as u64))
            // Standard Error: 65_283
            .saturating_add(Weight::from_ref_time(212_125_680 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_read_access(p: u32, ) -> Weight {
        Weight::from_ref_time(90_205_000 as u64)
            // Standard Error: 7_503
            .saturating_add(Weight::from_ref_time(55_428_667 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads((16 as u64).saturating_mul(p as u64)))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_write_access(p: u32, ) -> Weight {
        Weight::from_ref_time(28_503_391_261 as u64)
            // Standard Error: 25_999
            .saturating_add(Weight::from_ref_time(71_477_903 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(8192 as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(11_336_080_678 as u64)
            // Standard Error: 96_874
            .saturating_add(Weight::from_ref_time(13_056_302 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(11_605_531_225 as u64)
            // Standard Error: 136_331
            .saturating_add(Weight::from_ref_time(1_864_593 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(4_817_512 as u64)
            // Standard Error: 8_952
            .saturating_add(Weight::from_ref_time(7_585_921 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(10_784_549 as u64)
            // Standard Error: 6_922
            .saturating_add(Weight::from_ref_time(5_725_758 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(3_233_538 as u64)
            // Standard Error: 812
            .saturating_add(Weight::from_ref_time(3_312_399 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(2_488_000 as u64)
            // Standard Error: 4_479
            .saturating_add(Weight::from_ref_time(6_280_658 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(8_004_193 as u64)
            // Standard Error: 10_404
            .saturating_add(Weight::from_ref_time(9_818_623 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(14_021_458 as u64)
            // Standard Error: 923
            .saturating_add(Weight::from_ref_time(423_434 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(6_794_195 as u64)
            // Standard Error: 7_818
            .saturating_add(Weight::from_ref_time(4_889_354 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        Weight::from_ref_time(7_712_113 as u64)
            // Standard Error: 4_230
            .saturating_add(Weight::from_ref_time(5_101_537 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(3_012_000 as u64)
            // Standard Error: 15_074
            .saturating_add(Weight::from_ref_time(21_888_628 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(28_246_928 as u64)
            // Standard Error: 3_819
            .saturating_add(Weight::from_ref_time(1_940_719 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(2_534_000 as u64)
            // Standard Error: 2_355
            .saturating_add(Weight::from_ref_time(842_707 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(2_548_000 as u64)
            // Standard Error: 2_997
            .saturating_add(Weight::from_ref_time(2_220_384 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(2_532_000 as u64)
            // Standard Error: 2_856
            .saturating_add(Weight::from_ref_time(2_261_369 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(3_376_735 as u64)
            // Standard Error: 4_142
            .saturating_add(Weight::from_ref_time(2_354_513 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(10_527_486 as u64)
            // Standard Error: 6_696
            .saturating_add(Weight::from_ref_time(3_216_039 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(4_596_448 as u64)
            // Standard Error: 5_278
            .saturating_add(Weight::from_ref_time(13_935_561 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(10_598_938 as u64)
            // Standard Error: 7_663
            .saturating_add(Weight::from_ref_time(6_066_041 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(9_622_370 as u64)
            // Standard Error: 7_560
            .saturating_add(Weight::from_ref_time(5_743_237 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(2_500_000 as u64)
            // Standard Error: 3_015
            .saturating_add(Weight::from_ref_time(1_873_631 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(5_532_103 as u64)
            // Standard Error: 8_464
            .saturating_add(Weight::from_ref_time(3_633_559 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(2_502_000 as u64)
            // Standard Error: 2_627
            .saturating_add(Weight::from_ref_time(1_192_025 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(1_529_050 as u64)
            // Standard Error: 1_698
            .saturating_add(Weight::from_ref_time(605_823 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(2_261_441 as u64)
            // Standard Error: 1_723
            .saturating_add(Weight::from_ref_time(588_656 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(5_334_003 as u64)
            // Standard Error: 8_604
            .saturating_add(Weight::from_ref_time(3_702_400 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(4_723_850 as u64)
            // Standard Error: 7_785
            .saturating_add(Weight::from_ref_time(3_725_396 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(7_355_910 as u64)
            // Standard Error: 8_562
            .saturating_add(Weight::from_ref_time(3_611_391 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(5_497_746 as u64)
            // Standard Error: 8_253
            .saturating_add(Weight::from_ref_time(3_598_005 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(5_176_715 as u64)
            // Standard Error: 8_042
            .saturating_add(Weight::from_ref_time(3_603_786 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(5_485_372 as u64)
            // Standard Error: 8_125
            .saturating_add(Weight::from_ref_time(3_602_668 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(6_545_535 as u64)
            // Standard Error: 8_608
            .saturating_add(Weight::from_ref_time(3_577_493 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(5_346_608 as u64)
            // Standard Error: 7_871
            .saturating_add(Weight::from_ref_time(3_606_788 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(3_951_527 as u64)
            // Standard Error: 7_542
            .saturating_add(Weight::from_ref_time(3_735_346 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(6_253_293 as u64)
            // Standard Error: 8_185
            .saturating_add(Weight::from_ref_time(3_689_437 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(1_163_885 as u64)
            // Standard Error: 6_583
            .saturating_add(Weight::from_ref_time(3_107_787 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(1_847_004 as u64)
            // Standard Error: 6_674
            .saturating_add(Weight::from_ref_time(3_101_389 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(5_892_815 as u64)
            // Standard Error: 8_394
            .saturating_add(Weight::from_ref_time(3_653_482 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(1_969_514 as u64)
            // Standard Error: 13_077
            .saturating_add(Weight::from_ref_time(4_564_043 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_531_000 as u64)
            // Standard Error: 7_509
            .saturating_add(Weight::from_ref_time(4_915_262 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(2_534_000 as u64)
            // Standard Error: 25_497
            .saturating_add(Weight::from_ref_time(21_974_396 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(2_044_226 as u64)
            // Standard Error: 14_886
            .saturating_add(Weight::from_ref_time(5_009_983 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(1_029_650 as u64)
            // Standard Error: 6_786
            .saturating_add(Weight::from_ref_time(3_113_911 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(742_555 as u64)
            // Standard Error: 6_860
            .saturating_add(Weight::from_ref_time(3_125_514 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(1_379_040 as u64)
            // Standard Error: 7_147
            .saturating_add(Weight::from_ref_time(3_113_479 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(2_525_000 as u64)
            // Standard Error: 3_250
            .saturating_add(Weight::from_ref_time(2_818_119 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(2_529_000 as u64)
            // Standard Error: 3_382
            .saturating_add(Weight::from_ref_time(2_823_098 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(2_509_000 as u64)
            // Standard Error: 3_270
            .saturating_add(Weight::from_ref_time(2_795_939 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(2_534_000 as u64)
            // Standard Error: 3_493
            .saturating_add(Weight::from_ref_time(2_804_528 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(2_536_000 as u64)
            // Standard Error: 3_296
            .saturating_add(Weight::from_ref_time(2_829_067 as u64).saturating_mul(r as u64))
    }
}
