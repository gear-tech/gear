// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-14, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-20-193.us-west-1.compute.internal`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_error(r: u32, ) -> Weight;
    fn gr_status_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_083 nanoseconds.
        Weight::from_ref_time(1_172_000)
            // Standard Error: 507
            .saturating_add(Weight::from_ref_time(240_019).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `74 + c * (1024 ±0)`
        //  Estimated: `2546 + c * (1024 ±0)`
        // Minimum execution time: 2_977 nanoseconds.
        Weight::from_parts(3_028_000, 2546)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(666_387).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 55_530 nanoseconds.
        Weight::from_ref_time(72_896_350)
            // Standard Error: 10_781
            .saturating_add(Weight::from_ref_time(2_586_321).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `847`
        //  Estimated: `17017`
        // Minimum execution time: 56_563 nanoseconds.
        Weight::from_parts(58_963_000, 17017)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `3010`
        // Minimum execution time: 54_260 nanoseconds.
        Weight::from_parts(54_873_000, 3010)
            // Standard Error: 33_333
            .saturating_add(Weight::from_ref_time(53_941_742).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `577`
        //  Estimated: `17498`
        // Minimum execution time: 52_360 nanoseconds.
        Weight::from_parts(41_839_371, 17498)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_310).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `55`
        //  Estimated: `13432`
        // Minimum execution time: 9_069_927 nanoseconds.
        Weight::from_parts(9_154_571_000, 13432)
            // Standard Error: 445_723
            .saturating_add(Weight::from_ref_time(32_104_985).saturating_mul(c.into()))
            // Standard Error: 26
            .saturating_add(Weight::from_ref_time(822).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `422`
        //  Estimated: `15047`
        // Minimum execution time: 55_876 nanoseconds.
        Weight::from_parts(13_182_702, 15047)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(1_208).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1090`
        //  Estimated: `31263`
        // Minimum execution time: 81_479 nanoseconds.
        Weight::from_parts(34_340_762, 31263)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(1_233).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `676`
        //  Estimated: `40731`
        // Minimum execution time: 297_800 nanoseconds.
        Weight::from_parts(310_499_298, 40731)
            .saturating_add(T::DbWeight::get().reads(24_u64))
            .saturating_add(T::DbWeight::get().writes(21_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `676`
        //  Estimated: `40581`
        // Minimum execution time: 312_566 nanoseconds.
        Weight::from_parts(324_880_168, 40581)
            // Standard Error: 1_018
            .saturating_add(Weight::from_ref_time(2_379).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(24_u64))
            .saturating_add(T::DbWeight::get().writes(21_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `213 + c * (1075 ±0)`
        //  Estimated: `2913 + c * (2150 ±0)`
        // Minimum execution time: 39_689 nanoseconds.
        Weight::from_parts(39_826_000, 2913)
            // Standard Error: 31_041
            .saturating_add(Weight::from_ref_time(53_197_159).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_proof_size(2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_884 nanoseconds.
        Weight::from_ref_time(102_373_621)
            // Standard Error: 202_830
            .saturating_add(Weight::from_ref_time(151_038_240).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 237_162 nanoseconds.
        Weight::from_ref_time(240_392_545)
            // Standard Error: 182_330
            .saturating_add(Weight::from_ref_time(152_974_724).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 94_583 nanoseconds.
        Weight::from_parts(96_412_000, 2616)
            // Standard Error: 1_045_743
            .saturating_add(Weight::from_ref_time(421_769_537).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1619 + r * (410 ±5)`
        // Minimum execution time: 90_995 nanoseconds.
        Weight::from_parts(139_593_398, 1619)
            // Standard Error: 155_660
            .saturating_add(Weight::from_ref_time(362_819_499).saturating_mul(r.into()))
            .saturating_add(Weight::from_proof_size(410).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_911 nanoseconds.
        Weight::from_parts(137_041_397, 2616)
            // Standard Error: 131_812
            .saturating_add(Weight::from_ref_time(241_420_226).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 90_408 nanoseconds.
        Weight::from_parts(121_545_188, 2616)
            // Standard Error: 106_495
            .saturating_add(Weight::from_ref_time(238_579_356).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 91_646 nanoseconds.
        Weight::from_parts(119_914_714, 2616)
            // Standard Error: 98_488
            .saturating_add(Weight::from_ref_time(238_989_490).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_184 nanoseconds.
        Weight::from_parts(120_171_822, 2616)
            // Standard Error: 104_748
            .saturating_add(Weight::from_ref_time(239_079_772).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_476 nanoseconds.
        Weight::from_parts(120_640_984, 2616)
            // Standard Error: 95_910
            .saturating_add(Weight::from_ref_time(241_103_715).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 90_653 nanoseconds.
        Weight::from_parts(118_226_466, 2616)
            // Standard Error: 95_025
            .saturating_add(Weight::from_ref_time(240_152_988).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_565 nanoseconds.
        Weight::from_parts(122_607_198, 2616)
            // Standard Error: 118_738
            .saturating_add(Weight::from_ref_time(240_634_959).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 91_797 nanoseconds.
        Weight::from_parts(121_358_766, 2616)
            // Standard Error: 112_982
            .saturating_add(Weight::from_ref_time(238_520_992).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 91_431 nanoseconds.
        Weight::from_parts(119_656_955, 2616)
            // Standard Error: 104_989
            .saturating_add(Weight::from_ref_time(240_625_852).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 91_617 nanoseconds.
        Weight::from_parts(139_797_877, 2616)
            // Standard Error: 156_959
            .saturating_add(Weight::from_ref_time(334_044_736).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `633741`
        // Minimum execution time: 4_778_255 nanoseconds.
        Weight::from_parts(2_293_724_186, 633741)
            // Standard Error: 69_959
            .saturating_add(Weight::from_ref_time(16_585_588).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(256_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_527 nanoseconds.
        Weight::from_parts(122_342_369, 2616)
            // Standard Error: 109_458
            .saturating_add(Weight::from_ref_time(238_524_485).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 90_855 nanoseconds.
        Weight::from_parts(119_181_006, 2616)
            // Standard Error: 113_476
            .saturating_add(Weight::from_ref_time(240_375_244).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 91_137 nanoseconds.
        Weight::from_parts(133_072_067, 2616)
            // Standard Error: 288_766
            .saturating_add(Weight::from_ref_time(307_570_674).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_627 nanoseconds.
        Weight::from_parts(119_813_062, 2616)
            // Standard Error: 100_127
            .saturating_add(Weight::from_ref_time(246_171_012).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_079 nanoseconds.
        Weight::from_parts(133_130_195, 2616)
            // Standard Error: 182_809
            .saturating_add(Weight::from_ref_time(602_608_492).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1539 + n * (155 ±0)`
        // Minimum execution time: 708_054 nanoseconds.
        Weight::from_parts(714_093_000, 1539)
            // Standard Error: 53_598
            .saturating_add(Weight::from_ref_time(31_450_915).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 103_567 nanoseconds.
        Weight::from_parts(135_030_412, 2616)
            // Standard Error: 213_696
            .saturating_add(Weight::from_ref_time(449_484_169).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1539 + n * (155 ±0)`
        // Minimum execution time: 564_015 nanoseconds.
        Weight::from_parts(571_194_000, 1539)
            // Standard Error: 65_758
            .saturating_add(Weight::from_ref_time(22_129_775).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1458 + r * (1004 ±5)`
        // Minimum execution time: 92_178 nanoseconds.
        Weight::from_parts(129_975_360, 1458)
            // Standard Error: 250_770
            .saturating_add(Weight::from_ref_time(486_438_330).saturating_mul(r.into()))
            .saturating_add(Weight::from_proof_size(1004).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2378 + n * (155 ±0)`
        // Minimum execution time: 610_586 nanoseconds.
        Weight::from_parts(616_555_000, 2378)
            // Standard Error: 63_365
            .saturating_add(Weight::from_ref_time(21_976_492).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `1308 + r * (1308 ±0)`
        // Minimum execution time: 90_815 nanoseconds.
        Weight::from_parts(95_979_340, 1308)
            // Standard Error: 371_599
            .saturating_add(Weight::from_ref_time(38_588_859).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
            .saturating_add(Weight::from_proof_size(1308).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1539 + n * (155 ±0)`
        // Minimum execution time: 130_774 nanoseconds.
        Weight::from_parts(119_208_944, 1539)
            // Standard Error: 604
            .saturating_add(Weight::from_ref_time(517_018).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_063 nanoseconds.
        Weight::from_parts(136_931_840, 2616)
            // Standard Error: 145_868
            .saturating_add(Weight::from_ref_time(334_893_119).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1449 + n * (155 ±0)`
        // Minimum execution time: 125_166 nanoseconds.
        Weight::from_parts(128_353_000, 1449)
            // Standard Error: 2_167
            .saturating_add(Weight::from_ref_time(757_691).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `1308 + r * (1308 ±0)`
        // Minimum execution time: 90_570 nanoseconds.
        Weight::from_parts(96_232_142, 1308)
            // Standard Error: 356_055
            .saturating_add(Weight::from_ref_time(51_773_057).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
            .saturating_add(Weight::from_proof_size(1308).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1539 + n * (155 ±0)`
        // Minimum execution time: 143_931 nanoseconds.
        Weight::from_parts(136_349_324, 1539)
            // Standard Error: 1_170
            .saturating_add(Weight::from_ref_time(531_033).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 91_010 nanoseconds.
        Weight::from_parts(122_182_038, 2616)
            // Standard Error: 110_800
            .saturating_add(Weight::from_ref_time(242_711_890).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5091`
        // Minimum execution time: 90_562 nanoseconds.
        Weight::from_parts(138_359_654, 5091)
            // Standard Error: 148_277
            .saturating_add(Weight::from_ref_time(253_254_871).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_271 nanoseconds.
        Weight::from_parts(136_074_106, 2616)
            // Standard Error: 137_968
            .saturating_add(Weight::from_ref_time(252_362_619).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 124_171 nanoseconds.
        Weight::from_parts(51_106_604, 2616)
            // Standard Error: 746
            .saturating_add(Weight::from_ref_time(802_276).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 93_625 nanoseconds.
        Weight::from_parts(134_463_961, 2616)
            // Standard Error: 149_901
            .saturating_add(Weight::from_ref_time(518_873_686).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 625_592 nanoseconds.
        Weight::from_parts(749_807_327, 2616)
            // Standard Error: 16_044
            .saturating_add(Weight::from_ref_time(33_451_773).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 90_182 nanoseconds.
        Weight::from_parts(125_105_743, 2616)
            // Standard Error: 139_008
            .saturating_add(Weight::from_ref_time(243_429_040).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `633741`
        // Minimum execution time: 3_053_715 nanoseconds.
        Weight::from_parts(753_453_107, 633741)
            // Standard Error: 65_772
            .saturating_add(Weight::from_ref_time(27_505_852).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(256_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 93_778 nanoseconds.
        Weight::from_parts(149_339_341, 2616)
            // Standard Error: 195_288
            .saturating_add(Weight::from_ref_time(567_332_738).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 91_355 nanoseconds.
        Weight::from_parts(121_845_721, 2616)
            // Standard Error: 121_777
            .saturating_add(Weight::from_ref_time(238_181_891).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `1308 + r * (1308 ±0)`
        // Minimum execution time: 90_612 nanoseconds.
        Weight::from_parts(95_566_610, 1308)
            // Standard Error: 351_098
            .saturating_add(Weight::from_ref_time(35_617_689).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
            .saturating_add(Weight::from_proof_size(1308).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_251 nanoseconds.
        Weight::from_ref_time(95_714_197)
            // Standard Error: 318_070
            .saturating_add(Weight::from_ref_time(19_192_702).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_340 nanoseconds.
        Weight::from_ref_time(95_988_712)
            // Standard Error: 322_247
            .saturating_add(Weight::from_ref_time(18_470_587).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_577 nanoseconds.
        Weight::from_ref_time(96_653_061)
            // Standard Error: 344_194
            .saturating_add(Weight::from_ref_time(20_976_838).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_568 nanoseconds.
        Weight::from_ref_time(96_335_861)
            // Standard Error: 338_789
            .saturating_add(Weight::from_ref_time(19_553_738).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1619 + r * (410 ±5)`
        // Minimum execution time: 92_878 nanoseconds.
        Weight::from_parts(135_116_324, 1619)
            // Standard Error: 162_712
            .saturating_add(Weight::from_ref_time(355_618_626).saturating_mul(r.into()))
            .saturating_add(Weight::from_proof_size(410).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 104_914 nanoseconds.
        Weight::from_parts(123_926_520, 2616)
            // Standard Error: 201_434
            .saturating_add(Weight::from_ref_time(533_702_722).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `4495 + p * (155 ±0) + s * (154 ±0)`
        // Minimum execution time: 47_105_609 nanoseconds.
        Weight::from_parts(47_331_799_000, 4495)
            // Standard Error: 303_281
            .saturating_add(Weight::from_ref_time(8_352_364).saturating_mul(p.into()))
            // Standard Error: 303_266
            .saturating_add(Weight::from_ref_time(154_296_211).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(p.into()))
            .saturating_add(Weight::from_proof_size(154).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 89_900 nanoseconds.
        Weight::from_parts(89_036_807, 141)
            // Standard Error: 10_361
            .saturating_add(Weight::from_ref_time(42_513_413).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 90_111 nanoseconds.
        Weight::from_parts(92_636_000, 141)
            // Standard Error: 63_164
            .saturating_add(Weight::from_ref_time(64_475_234).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5068941`
        // Minimum execution time: 21_758_531 nanoseconds.
        Weight::from_parts(21_757_819_620, 5068941)
            // Standard Error: 88_040
            .saturating_add(Weight::from_ref_time(68_984_843).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1136 + p * (66182 ±0)`
        //  Estimated: `967 + p * (105783 ±0)`
        // Minimum execution time: 89_824 nanoseconds.
        Weight::from_parts(91_943_000, 967)
            // Standard Error: 46_072
            .saturating_add(Weight::from_ref_time(91_151_737).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((16_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(105783).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `506 + p * (9883 ±2)`
        // Minimum execution time: 107_596 nanoseconds.
        Weight::from_parts(100_039_348, 506)
            // Standard Error: 47_989
            .saturating_add(Weight::from_ref_time(40_217_463).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `506 + p * (9883 ±2)`
        // Minimum execution time: 840_469 nanoseconds.
        Weight::from_parts(864_463_345, 506)
            // Standard Error: 274_757
            .saturating_add(Weight::from_ref_time(65_844_557).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `633741`
        // Minimum execution time: 3_661_191 nanoseconds.
        Weight::from_parts(3_740_081_119, 633741)
            // Standard Error: 301_356
            .saturating_add(Weight::from_ref_time(70_092_468).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(256_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_040_518 nanoseconds.
        Weight::from_ref_time(3_499_848_810)
            // Standard Error: 63_779
            .saturating_add(Weight::from_ref_time(9_522_432).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_146_392 nanoseconds.
        Weight::from_ref_time(11_214_000_333)
            // Standard Error: 214_016
            .saturating_add(Weight::from_ref_time(15_493_976).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_621 nanoseconds.
        Weight::from_ref_time(2_766_000)
            // Standard Error: 7_009
            .saturating_add(Weight::from_ref_time(3_880_274).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_643 nanoseconds.
        Weight::from_ref_time(735_569)
            // Standard Error: 7_269
            .saturating_add(Weight::from_ref_time(3_223_369).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_709 nanoseconds.
        Weight::from_ref_time(3_509_600)
            // Standard Error: 1_539
            .saturating_add(Weight::from_ref_time(1_617_836).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_720 nanoseconds.
        Weight::from_ref_time(2_781_000)
            // Standard Error: 7_406
            .saturating_add(Weight::from_ref_time(3_049_917).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_760 nanoseconds.
        Weight::from_ref_time(9_409_881)
            // Standard Error: 20_517
            .saturating_add(Weight::from_ref_time(4_799_202).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_305 nanoseconds.
        Weight::from_ref_time(5_744_804)
            // Standard Error: 1_321
            .saturating_add(Weight::from_ref_time(177_400).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_896 nanoseconds.
        Weight::from_ref_time(6_118_294)
            // Standard Error: 9_970
            .saturating_add(Weight::from_ref_time(2_612_772).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(2_612_772 -
            2_445_171).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_775 nanoseconds.
        Weight::from_ref_time(5_793_866)
            // Standard Error: 14_222
            .saturating_add(Weight::from_ref_time(2_445_171).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_187 nanoseconds.
        Weight::from_ref_time(25_092_099)
            // Standard Error: 32_886
            .saturating_add(Weight::from_ref_time(9_767_222).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 13_187 nanoseconds.
        Weight::from_ref_time(8_408_281)
            // Standard Error: 5_549
            .saturating_add(Weight::from_ref_time(1_188_818).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_392 nanoseconds.
        Weight::from_ref_time(5_708_374)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_780 nanoseconds.
        Weight::from_ref_time(2_386_753)
            // Standard Error: 3_423
            .saturating_add(Weight::from_ref_time(301_233).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_758 nanoseconds.
        Weight::from_ref_time(2_910_000)
            // Standard Error: 6_165
            .saturating_add(Weight::from_ref_time(887_132).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_827 nanoseconds.
        Weight::from_ref_time(2_916_000)
            // Standard Error: 7_067
            .saturating_add(Weight::from_ref_time(916_349).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_527 nanoseconds.
        Weight::from_ref_time(7_261_788)
            // Standard Error: 7_340
            .saturating_add(Weight::from_ref_time(945_358).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_653 nanoseconds.
        Weight::from_ref_time(4_342_697)
            // Standard Error: 11_197
            .saturating_add(Weight::from_ref_time(1_788_499).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_206 nanoseconds.
        Weight::from_ref_time(1_147_666)
            // Standard Error: 13_802
            .saturating_add(Weight::from_ref_time(7_253_879).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_769 nanoseconds.
        Weight::from_ref_time(2_842_000)
            // Standard Error: 5_971
            .saturating_add(Weight::from_ref_time(3_442_324).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_759 nanoseconds.
        Weight::from_ref_time(2_843_000)
            // Standard Error: 5_478
            .saturating_add(Weight::from_ref_time(3_195_156).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_739 nanoseconds.
        Weight::from_ref_time(2_839_000)
            // Standard Error: 4_807
            .saturating_add(Weight::from_ref_time(652_863).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_703 nanoseconds.
        Weight::from_ref_time(2_769_000)
            // Standard Error: 9_652
            .saturating_add(Weight::from_ref_time(1_965_129).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_668 nanoseconds.
        Weight::from_ref_time(1_903_412)
            // Standard Error: 3_727
            .saturating_add(Weight::from_ref_time(409_766).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_777 nanoseconds.
        Weight::from_ref_time(2_959_540)
            // Standard Error: 2_316
            .saturating_add(Weight::from_ref_time(208_581).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_688 nanoseconds.
        Weight::from_ref_time(2_922_044)
            // Standard Error: 2_843
            .saturating_add(Weight::from_ref_time(221_183).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_683 nanoseconds.
        Weight::from_ref_time(2_808_000)
            // Standard Error: 9_153
            .saturating_add(Weight::from_ref_time(1_946_898).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_741 nanoseconds.
        Weight::from_ref_time(2_876_000)
            // Standard Error: 8_724
            .saturating_add(Weight::from_ref_time(1_945_645).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_725 nanoseconds.
        Weight::from_ref_time(2_792_000)
            // Standard Error: 8_482
            .saturating_add(Weight::from_ref_time(1_927_419).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_713 nanoseconds.
        Weight::from_ref_time(2_895_000)
            // Standard Error: 8_576
            .saturating_add(Weight::from_ref_time(1_953_805).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_752 nanoseconds.
        Weight::from_ref_time(2_871_000)
            // Standard Error: 8_855
            .saturating_add(Weight::from_ref_time(1_979_931).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_785 nanoseconds.
        Weight::from_ref_time(2_812_000)
            // Standard Error: 8_274
            .saturating_add(Weight::from_ref_time(1_966_288).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_725 nanoseconds.
        Weight::from_ref_time(2_855_000)
            // Standard Error: 8_385
            .saturating_add(Weight::from_ref_time(1_949_048).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_748 nanoseconds.
        Weight::from_ref_time(2_817_000)
            // Standard Error: 8_761
            .saturating_add(Weight::from_ref_time(1_947_920).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_783 nanoseconds.
        Weight::from_ref_time(2_829_000)
            // Standard Error: 9_008
            .saturating_add(Weight::from_ref_time(1_925_936).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_753 nanoseconds.
        Weight::from_ref_time(2_829_000)
            // Standard Error: 8_864
            .saturating_add(Weight::from_ref_time(1_959_280).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_716 nanoseconds.
        Weight::from_ref_time(2_860_000)
            // Standard Error: 8_179
            .saturating_add(Weight::from_ref_time(1_466_803).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_724 nanoseconds.
        Weight::from_ref_time(2_821_000)
            // Standard Error: 8_353
            .saturating_add(Weight::from_ref_time(1_447_920).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_796 nanoseconds.
        Weight::from_ref_time(2_885_000)
            // Standard Error: 8_774
            .saturating_add(Weight::from_ref_time(1_892_976).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_783 nanoseconds.
        Weight::from_ref_time(11_708_769)
            // Standard Error: 23_415
            .saturating_add(Weight::from_ref_time(2_024_337).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_682 nanoseconds.
        Weight::from_ref_time(12_362_851)
            // Standard Error: 24_663
            .saturating_add(Weight::from_ref_time(2_091_065).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_754 nanoseconds.
        Weight::from_ref_time(13_089_120)
            // Standard Error: 42_630
            .saturating_add(Weight::from_ref_time(8_445_285).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_680 nanoseconds.
        Weight::from_ref_time(15_145_906)
            // Standard Error: 25_343
            .saturating_add(Weight::from_ref_time(2_115_292).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_717 nanoseconds.
        Weight::from_ref_time(2_798_000)
            // Standard Error: 8_607
            .saturating_add(Weight::from_ref_time(1_425_420).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_776 nanoseconds.
        Weight::from_ref_time(2_825_000)
            // Standard Error: 7_859
            .saturating_add(Weight::from_ref_time(1_389_908).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_795 nanoseconds.
        Weight::from_ref_time(2_858_000)
            // Standard Error: 8_249
            .saturating_add(Weight::from_ref_time(1_422_063).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_776 nanoseconds.
        Weight::from_ref_time(2_858_000)
            // Standard Error: 7_815
            .saturating_add(Weight::from_ref_time(1_224_549).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_759 nanoseconds.
        Weight::from_ref_time(2_887_000)
            // Standard Error: 8_561
            .saturating_add(Weight::from_ref_time(1_228_163).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_760 nanoseconds.
        Weight::from_ref_time(2_830_000)
            // Standard Error: 8_423
            .saturating_add(Weight::from_ref_time(1_255_913).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_751 nanoseconds.
        Weight::from_ref_time(2_898_000)
            // Standard Error: 8_463
            .saturating_add(Weight::from_ref_time(1_225_754).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_777 nanoseconds.
        Weight::from_ref_time(2_860_000)
            // Standard Error: 7_551
            .saturating_add(Weight::from_ref_time(1_216_846).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_083 nanoseconds.
        Weight::from_ref_time(1_172_000)
            // Standard Error: 507
            .saturating_add(Weight::from_ref_time(240_019).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `74 + c * (1024 ±0)`
        //  Estimated: `2546 + c * (1024 ±0)`
        // Minimum execution time: 2_977 nanoseconds.
        Weight::from_parts(3_028_000, 2546)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(666_387).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 55_530 nanoseconds.
        Weight::from_ref_time(72_896_350)
            // Standard Error: 10_781
            .saturating_add(Weight::from_ref_time(2_586_321).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `847`
        //  Estimated: `17017`
        // Minimum execution time: 56_563 nanoseconds.
        Weight::from_parts(58_963_000, 17017)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `3010`
        // Minimum execution time: 54_260 nanoseconds.
        Weight::from_parts(54_873_000, 3010)
            // Standard Error: 33_333
            .saturating_add(Weight::from_ref_time(53_941_742).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `577`
        //  Estimated: `17498`
        // Minimum execution time: 52_360 nanoseconds.
        Weight::from_parts(41_839_371, 17498)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_310).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `55`
        //  Estimated: `13432`
        // Minimum execution time: 9_069_927 nanoseconds.
        Weight::from_parts(9_154_571_000, 13432)
            // Standard Error: 445_723
            .saturating_add(Weight::from_ref_time(32_104_985).saturating_mul(c.into()))
            // Standard Error: 26
            .saturating_add(Weight::from_ref_time(822).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `422`
        //  Estimated: `15047`
        // Minimum execution time: 55_876 nanoseconds.
        Weight::from_parts(13_182_702, 15047)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(1_208).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1090`
        //  Estimated: `31263`
        // Minimum execution time: 81_479 nanoseconds.
        Weight::from_parts(34_340_762, 31263)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(1_233).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `676`
        //  Estimated: `40731`
        // Minimum execution time: 297_800 nanoseconds.
        Weight::from_parts(310_499_298, 40731)
            .saturating_add(RocksDbWeight::get().reads(24_u64))
            .saturating_add(RocksDbWeight::get().writes(21_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `676`
        //  Estimated: `40581`
        // Minimum execution time: 312_566 nanoseconds.
        Weight::from_parts(324_880_168, 40581)
            // Standard Error: 1_018
            .saturating_add(Weight::from_ref_time(2_379).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(24_u64))
            .saturating_add(RocksDbWeight::get().writes(21_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `213 + c * (1075 ±0)`
        //  Estimated: `2913 + c * (2150 ±0)`
        // Minimum execution time: 39_689 nanoseconds.
        Weight::from_parts(39_826_000, 2913)
            // Standard Error: 31_041
            .saturating_add(Weight::from_ref_time(53_197_159).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_proof_size(2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_884 nanoseconds.
        Weight::from_ref_time(102_373_621)
            // Standard Error: 202_830
            .saturating_add(Weight::from_ref_time(151_038_240).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 237_162 nanoseconds.
        Weight::from_ref_time(240_392_545)
            // Standard Error: 182_330
            .saturating_add(Weight::from_ref_time(152_974_724).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 94_583 nanoseconds.
        Weight::from_parts(96_412_000, 2616)
            // Standard Error: 1_045_743
            .saturating_add(Weight::from_ref_time(421_769_537).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1619 + r * (410 ±5)`
        // Minimum execution time: 90_995 nanoseconds.
        Weight::from_parts(139_593_398, 1619)
            // Standard Error: 155_660
            .saturating_add(Weight::from_ref_time(362_819_499).saturating_mul(r.into()))
            .saturating_add(Weight::from_proof_size(410).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_911 nanoseconds.
        Weight::from_parts(137_041_397, 2616)
            // Standard Error: 131_812
            .saturating_add(Weight::from_ref_time(241_420_226).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 90_408 nanoseconds.
        Weight::from_parts(121_545_188, 2616)
            // Standard Error: 106_495
            .saturating_add(Weight::from_ref_time(238_579_356).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 91_646 nanoseconds.
        Weight::from_parts(119_914_714, 2616)
            // Standard Error: 98_488
            .saturating_add(Weight::from_ref_time(238_989_490).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_184 nanoseconds.
        Weight::from_parts(120_171_822, 2616)
            // Standard Error: 104_748
            .saturating_add(Weight::from_ref_time(239_079_772).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_476 nanoseconds.
        Weight::from_parts(120_640_984, 2616)
            // Standard Error: 95_910
            .saturating_add(Weight::from_ref_time(241_103_715).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 90_653 nanoseconds.
        Weight::from_parts(118_226_466, 2616)
            // Standard Error: 95_025
            .saturating_add(Weight::from_ref_time(240_152_988).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_565 nanoseconds.
        Weight::from_parts(122_607_198, 2616)
            // Standard Error: 118_738
            .saturating_add(Weight::from_ref_time(240_634_959).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 91_797 nanoseconds.
        Weight::from_parts(121_358_766, 2616)
            // Standard Error: 112_982
            .saturating_add(Weight::from_ref_time(238_520_992).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 91_431 nanoseconds.
        Weight::from_parts(119_656_955, 2616)
            // Standard Error: 104_989
            .saturating_add(Weight::from_ref_time(240_625_852).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 91_617 nanoseconds.
        Weight::from_parts(139_797_877, 2616)
            // Standard Error: 156_959
            .saturating_add(Weight::from_ref_time(334_044_736).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `633741`
        // Minimum execution time: 4_778_255 nanoseconds.
        Weight::from_parts(2_293_724_186, 633741)
            // Standard Error: 69_959
            .saturating_add(Weight::from_ref_time(16_585_588).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(256_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_527 nanoseconds.
        Weight::from_parts(122_342_369, 2616)
            // Standard Error: 109_458
            .saturating_add(Weight::from_ref_time(238_524_485).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 90_855 nanoseconds.
        Weight::from_parts(119_181_006, 2616)
            // Standard Error: 113_476
            .saturating_add(Weight::from_ref_time(240_375_244).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 91_137 nanoseconds.
        Weight::from_parts(133_072_067, 2616)
            // Standard Error: 288_766
            .saturating_add(Weight::from_ref_time(307_570_674).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_627 nanoseconds.
        Weight::from_parts(119_813_062, 2616)
            // Standard Error: 100_127
            .saturating_add(Weight::from_ref_time(246_171_012).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_079 nanoseconds.
        Weight::from_parts(133_130_195, 2616)
            // Standard Error: 182_809
            .saturating_add(Weight::from_ref_time(602_608_492).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1539 + n * (155 ±0)`
        // Minimum execution time: 708_054 nanoseconds.
        Weight::from_parts(714_093_000, 1539)
            // Standard Error: 53_598
            .saturating_add(Weight::from_ref_time(31_450_915).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 103_567 nanoseconds.
        Weight::from_parts(135_030_412, 2616)
            // Standard Error: 213_696
            .saturating_add(Weight::from_ref_time(449_484_169).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1539 + n * (155 ±0)`
        // Minimum execution time: 564_015 nanoseconds.
        Weight::from_parts(571_194_000, 1539)
            // Standard Error: 65_758
            .saturating_add(Weight::from_ref_time(22_129_775).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1458 + r * (1004 ±5)`
        // Minimum execution time: 92_178 nanoseconds.
        Weight::from_parts(129_975_360, 1458)
            // Standard Error: 250_770
            .saturating_add(Weight::from_ref_time(486_438_330).saturating_mul(r.into()))
            .saturating_add(Weight::from_proof_size(1004).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2378 + n * (155 ±0)`
        // Minimum execution time: 610_586 nanoseconds.
        Weight::from_parts(616_555_000, 2378)
            // Standard Error: 63_365
            .saturating_add(Weight::from_ref_time(21_976_492).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `1308 + r * (1308 ±0)`
        // Minimum execution time: 90_815 nanoseconds.
        Weight::from_parts(95_979_340, 1308)
            // Standard Error: 371_599
            .saturating_add(Weight::from_ref_time(38_588_859).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
            .saturating_add(Weight::from_proof_size(1308).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1539 + n * (155 ±0)`
        // Minimum execution time: 130_774 nanoseconds.
        Weight::from_parts(119_208_944, 1539)
            // Standard Error: 604
            .saturating_add(Weight::from_ref_time(517_018).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_063 nanoseconds.
        Weight::from_parts(136_931_840, 2616)
            // Standard Error: 145_868
            .saturating_add(Weight::from_ref_time(334_893_119).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1449 + n * (155 ±0)`
        // Minimum execution time: 125_166 nanoseconds.
        Weight::from_parts(128_353_000, 1449)
            // Standard Error: 2_167
            .saturating_add(Weight::from_ref_time(757_691).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `1308 + r * (1308 ±0)`
        // Minimum execution time: 90_570 nanoseconds.
        Weight::from_parts(96_232_142, 1308)
            // Standard Error: 356_055
            .saturating_add(Weight::from_ref_time(51_773_057).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
            .saturating_add(Weight::from_proof_size(1308).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1539 + n * (155 ±0)`
        // Minimum execution time: 143_931 nanoseconds.
        Weight::from_parts(136_349_324, 1539)
            // Standard Error: 1_170
            .saturating_add(Weight::from_ref_time(531_033).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 91_010 nanoseconds.
        Weight::from_parts(122_182_038, 2616)
            // Standard Error: 110_800
            .saturating_add(Weight::from_ref_time(242_711_890).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5091`
        // Minimum execution time: 90_562 nanoseconds.
        Weight::from_parts(138_359_654, 5091)
            // Standard Error: 148_277
            .saturating_add(Weight::from_ref_time(253_254_871).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 92_271 nanoseconds.
        Weight::from_parts(136_074_106, 2616)
            // Standard Error: 137_968
            .saturating_add(Weight::from_ref_time(252_362_619).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 124_171 nanoseconds.
        Weight::from_parts(51_106_604, 2616)
            // Standard Error: 746
            .saturating_add(Weight::from_ref_time(802_276).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 93_625 nanoseconds.
        Weight::from_parts(134_463_961, 2616)
            // Standard Error: 149_901
            .saturating_add(Weight::from_ref_time(518_873_686).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 625_592 nanoseconds.
        Weight::from_parts(749_807_327, 2616)
            // Standard Error: 16_044
            .saturating_add(Weight::from_ref_time(33_451_773).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 90_182 nanoseconds.
        Weight::from_parts(125_105_743, 2616)
            // Standard Error: 139_008
            .saturating_add(Weight::from_ref_time(243_429_040).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `633741`
        // Minimum execution time: 3_053_715 nanoseconds.
        Weight::from_parts(753_453_107, 633741)
            // Standard Error: 65_772
            .saturating_add(Weight::from_ref_time(27_505_852).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(256_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 93_778 nanoseconds.
        Weight::from_parts(149_339_341, 2616)
            // Standard Error: 195_288
            .saturating_add(Weight::from_ref_time(567_332_738).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 91_355 nanoseconds.
        Weight::from_parts(121_845_721, 2616)
            // Standard Error: 121_777
            .saturating_add(Weight::from_ref_time(238_181_891).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `1308 + r * (1308 ±0)`
        // Minimum execution time: 90_612 nanoseconds.
        Weight::from_parts(95_566_610, 1308)
            // Standard Error: 351_098
            .saturating_add(Weight::from_ref_time(35_617_689).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
            .saturating_add(Weight::from_proof_size(1308).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_251 nanoseconds.
        Weight::from_ref_time(95_714_197)
            // Standard Error: 318_070
            .saturating_add(Weight::from_ref_time(19_192_702).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_340 nanoseconds.
        Weight::from_ref_time(95_988_712)
            // Standard Error: 322_247
            .saturating_add(Weight::from_ref_time(18_470_587).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_577 nanoseconds.
        Weight::from_ref_time(96_653_061)
            // Standard Error: 344_194
            .saturating_add(Weight::from_ref_time(20_976_838).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_568 nanoseconds.
        Weight::from_ref_time(96_335_861)
            // Standard Error: 338_789
            .saturating_add(Weight::from_ref_time(19_553_738).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1619 + r * (410 ±5)`
        // Minimum execution time: 92_878 nanoseconds.
        Weight::from_parts(135_116_324, 1619)
            // Standard Error: 162_712
            .saturating_add(Weight::from_ref_time(355_618_626).saturating_mul(r.into()))
            .saturating_add(Weight::from_proof_size(410).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2616`
        // Minimum execution time: 104_914 nanoseconds.
        Weight::from_parts(123_926_520, 2616)
            // Standard Error: 201_434
            .saturating_add(Weight::from_ref_time(533_702_722).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `4495 + p * (155 ±0) + s * (154 ±0)`
        // Minimum execution time: 47_105_609 nanoseconds.
        Weight::from_parts(47_331_799_000, 4495)
            // Standard Error: 303_281
            .saturating_add(Weight::from_ref_time(8_352_364).saturating_mul(p.into()))
            // Standard Error: 303_266
            .saturating_add(Weight::from_ref_time(154_296_211).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(Weight::from_proof_size(155).saturating_mul(p.into()))
            .saturating_add(Weight::from_proof_size(154).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 89_900 nanoseconds.
        Weight::from_parts(89_036_807, 141)
            // Standard Error: 10_361
            .saturating_add(Weight::from_ref_time(42_513_413).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 90_111 nanoseconds.
        Weight::from_parts(92_636_000, 141)
            // Standard Error: 63_164
            .saturating_add(Weight::from_ref_time(64_475_234).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5068941`
        // Minimum execution time: 21_758_531 nanoseconds.
        Weight::from_parts(21_757_819_620, 5068941)
            // Standard Error: 88_040
            .saturating_add(Weight::from_ref_time(68_984_843).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1136 + p * (66182 ±0)`
        //  Estimated: `967 + p * (105783 ±0)`
        // Minimum execution time: 89_824 nanoseconds.
        Weight::from_parts(91_943_000, 967)
            // Standard Error: 46_072
            .saturating_add(Weight::from_ref_time(91_151_737).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((16_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(105783).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `506 + p * (9883 ±2)`
        // Minimum execution time: 107_596 nanoseconds.
        Weight::from_parts(100_039_348, 506)
            // Standard Error: 47_989
            .saturating_add(Weight::from_ref_time(40_217_463).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `506 + p * (9883 ±2)`
        // Minimum execution time: 840_469 nanoseconds.
        Weight::from_parts(864_463_345, 506)
            // Standard Error: 274_757
            .saturating_add(Weight::from_ref_time(65_844_557).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `633741`
        // Minimum execution time: 3_661_191 nanoseconds.
        Weight::from_parts(3_740_081_119, 633741)
            // Standard Error: 301_356
            .saturating_add(Weight::from_ref_time(70_092_468).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(256_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_040_518 nanoseconds.
        Weight::from_ref_time(3_499_848_810)
            // Standard Error: 63_779
            .saturating_add(Weight::from_ref_time(9_522_432).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_146_392 nanoseconds.
        Weight::from_ref_time(11_214_000_333)
            // Standard Error: 214_016
            .saturating_add(Weight::from_ref_time(15_493_976).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_621 nanoseconds.
        Weight::from_ref_time(2_766_000)
            // Standard Error: 7_009
            .saturating_add(Weight::from_ref_time(3_880_274).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_643 nanoseconds.
        Weight::from_ref_time(735_569)
            // Standard Error: 7_269
            .saturating_add(Weight::from_ref_time(3_223_369).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_709 nanoseconds.
        Weight::from_ref_time(3_509_600)
            // Standard Error: 1_539
            .saturating_add(Weight::from_ref_time(1_617_836).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_720 nanoseconds.
        Weight::from_ref_time(2_781_000)
            // Standard Error: 7_406
            .saturating_add(Weight::from_ref_time(3_049_917).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_760 nanoseconds.
        Weight::from_ref_time(9_409_881)
            // Standard Error: 20_517
            .saturating_add(Weight::from_ref_time(4_799_202).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_305 nanoseconds.
        Weight::from_ref_time(5_744_804)
            // Standard Error: 1_321
            .saturating_add(Weight::from_ref_time(177_400).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_896 nanoseconds.
        Weight::from_ref_time(6_118_294)
            // Standard Error: 9_970
            .saturating_add(Weight::from_ref_time(2_612_772).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(2_612_772 -
            2_445_171).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_775 nanoseconds.
        Weight::from_ref_time(5_793_866)
            // Standard Error: 14_222
            .saturating_add(Weight::from_ref_time(2_445_171).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_187 nanoseconds.
        Weight::from_ref_time(25_092_099)
            // Standard Error: 32_886
            .saturating_add(Weight::from_ref_time(9_767_222).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 13_187 nanoseconds.
        Weight::from_ref_time(8_408_281)
            // Standard Error: 5_549
            .saturating_add(Weight::from_ref_time(1_188_818).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_392 nanoseconds.
        Weight::from_ref_time(5_708_374)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_780 nanoseconds.
        Weight::from_ref_time(2_386_753)
            // Standard Error: 3_423
            .saturating_add(Weight::from_ref_time(301_233).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_758 nanoseconds.
        Weight::from_ref_time(2_910_000)
            // Standard Error: 6_165
            .saturating_add(Weight::from_ref_time(887_132).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_827 nanoseconds.
        Weight::from_ref_time(2_916_000)
            // Standard Error: 7_067
            .saturating_add(Weight::from_ref_time(916_349).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_527 nanoseconds.
        Weight::from_ref_time(7_261_788)
            // Standard Error: 7_340
            .saturating_add(Weight::from_ref_time(945_358).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_653 nanoseconds.
        Weight::from_ref_time(4_342_697)
            // Standard Error: 11_197
            .saturating_add(Weight::from_ref_time(1_788_499).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_206 nanoseconds.
        Weight::from_ref_time(1_147_666)
            // Standard Error: 13_802
            .saturating_add(Weight::from_ref_time(7_253_879).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_769 nanoseconds.
        Weight::from_ref_time(2_842_000)
            // Standard Error: 5_971
            .saturating_add(Weight::from_ref_time(3_442_324).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_759 nanoseconds.
        Weight::from_ref_time(2_843_000)
            // Standard Error: 5_478
            .saturating_add(Weight::from_ref_time(3_195_156).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_739 nanoseconds.
        Weight::from_ref_time(2_839_000)
            // Standard Error: 4_807
            .saturating_add(Weight::from_ref_time(652_863).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_703 nanoseconds.
        Weight::from_ref_time(2_769_000)
            // Standard Error: 9_652
            .saturating_add(Weight::from_ref_time(1_965_129).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_668 nanoseconds.
        Weight::from_ref_time(1_903_412)
            // Standard Error: 3_727
            .saturating_add(Weight::from_ref_time(409_766).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_777 nanoseconds.
        Weight::from_ref_time(2_959_540)
            // Standard Error: 2_316
            .saturating_add(Weight::from_ref_time(208_581).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_688 nanoseconds.
        Weight::from_ref_time(2_922_044)
            // Standard Error: 2_843
            .saturating_add(Weight::from_ref_time(221_183).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_683 nanoseconds.
        Weight::from_ref_time(2_808_000)
            // Standard Error: 9_153
            .saturating_add(Weight::from_ref_time(1_946_898).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_741 nanoseconds.
        Weight::from_ref_time(2_876_000)
            // Standard Error: 8_724
            .saturating_add(Weight::from_ref_time(1_945_645).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_725 nanoseconds.
        Weight::from_ref_time(2_792_000)
            // Standard Error: 8_482
            .saturating_add(Weight::from_ref_time(1_927_419).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_713 nanoseconds.
        Weight::from_ref_time(2_895_000)
            // Standard Error: 8_576
            .saturating_add(Weight::from_ref_time(1_953_805).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_752 nanoseconds.
        Weight::from_ref_time(2_871_000)
            // Standard Error: 8_855
            .saturating_add(Weight::from_ref_time(1_979_931).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_785 nanoseconds.
        Weight::from_ref_time(2_812_000)
            // Standard Error: 8_274
            .saturating_add(Weight::from_ref_time(1_966_288).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_725 nanoseconds.
        Weight::from_ref_time(2_855_000)
            // Standard Error: 8_385
            .saturating_add(Weight::from_ref_time(1_949_048).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_748 nanoseconds.
        Weight::from_ref_time(2_817_000)
            // Standard Error: 8_761
            .saturating_add(Weight::from_ref_time(1_947_920).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_783 nanoseconds.
        Weight::from_ref_time(2_829_000)
            // Standard Error: 9_008
            .saturating_add(Weight::from_ref_time(1_925_936).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_753 nanoseconds.
        Weight::from_ref_time(2_829_000)
            // Standard Error: 8_864
            .saturating_add(Weight::from_ref_time(1_959_280).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_716 nanoseconds.
        Weight::from_ref_time(2_860_000)
            // Standard Error: 8_179
            .saturating_add(Weight::from_ref_time(1_466_803).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_724 nanoseconds.
        Weight::from_ref_time(2_821_000)
            // Standard Error: 8_353
            .saturating_add(Weight::from_ref_time(1_447_920).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_796 nanoseconds.
        Weight::from_ref_time(2_885_000)
            // Standard Error: 8_774
            .saturating_add(Weight::from_ref_time(1_892_976).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_783 nanoseconds.
        Weight::from_ref_time(11_708_769)
            // Standard Error: 23_415
            .saturating_add(Weight::from_ref_time(2_024_337).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_682 nanoseconds.
        Weight::from_ref_time(12_362_851)
            // Standard Error: 24_663
            .saturating_add(Weight::from_ref_time(2_091_065).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_754 nanoseconds.
        Weight::from_ref_time(13_089_120)
            // Standard Error: 42_630
            .saturating_add(Weight::from_ref_time(8_445_285).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_680 nanoseconds.
        Weight::from_ref_time(15_145_906)
            // Standard Error: 25_343
            .saturating_add(Weight::from_ref_time(2_115_292).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_717 nanoseconds.
        Weight::from_ref_time(2_798_000)
            // Standard Error: 8_607
            .saturating_add(Weight::from_ref_time(1_425_420).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_776 nanoseconds.
        Weight::from_ref_time(2_825_000)
            // Standard Error: 7_859
            .saturating_add(Weight::from_ref_time(1_389_908).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_795 nanoseconds.
        Weight::from_ref_time(2_858_000)
            // Standard Error: 8_249
            .saturating_add(Weight::from_ref_time(1_422_063).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_776 nanoseconds.
        Weight::from_ref_time(2_858_000)
            // Standard Error: 7_815
            .saturating_add(Weight::from_ref_time(1_224_549).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_759 nanoseconds.
        Weight::from_ref_time(2_887_000)
            // Standard Error: 8_561
            .saturating_add(Weight::from_ref_time(1_228_163).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_760 nanoseconds.
        Weight::from_ref_time(2_830_000)
            // Standard Error: 8_423
            .saturating_add(Weight::from_ref_time(1_255_913).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_751 nanoseconds.
        Weight::from_ref_time(2_898_000)
            // Standard Error: 8_463
            .saturating_add(Weight::from_ref_time(1_225_754).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_777 nanoseconds.
        Weight::from_ref_time(2_860_000)
            // Standard Error: 7_551
            .saturating_add(Weight::from_ref_time(1_216_846).saturating_mul(r.into()))
    }
}
