// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-24, STEPS: `20`, REPEAT: `40`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --pallet=pallet_gear --steps=20 --repeat=40 --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=5000 --template=.maintain/frame-weight-template.hbs --output=gear.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_error(r: u32, ) -> Weight;
    fn gr_status_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 917_000 picoseconds.
        Weight::from_parts(978_000, 0)
            // Standard Error: 1_274
            .saturating_add(Weight::from_parts(252_678, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_799_000 picoseconds.
        Weight::from_parts(2_871_000, 3506)
            // Standard Error: 1_016
            .saturating_add(Weight::from_parts(671_715, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 49_878_000 picoseconds.
        Weight::from_parts(75_353_937, 0)
            // Standard Error: 9_806
            .saturating_add(Weight::from_parts(2_395_575, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `720`
        //  Estimated: `22449`
        // Minimum execution time: 55_977_000 picoseconds.
        Weight::from_parts(57_136_000, 22449)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 61_177_000 picoseconds.
        Weight::from_parts(19_362_264, 4990)
            // Standard Error: 45_984
            .saturating_add(Weight::from_parts(54_680_156, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `572`
        //  Estimated: `27358`
        // Minimum execution time: 51_420_000 picoseconds.
        Weight::from_parts(72_446_512, 27358)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_353, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `55`
        //  Estimated: `23332`
        // Minimum execution time: 9_712_831_000 picoseconds.
        Weight::from_parts(9_749_511_000, 23332)
            // Standard Error: 515_378
            .saturating_add(Weight::from_parts(31_382_985, 0).saturating_mul(c.into()))
            // Standard Error: 30
            .saturating_add(Weight::from_parts(828, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `310`
        //  Estimated: `23285`
        // Minimum execution time: 53_378_000 picoseconds.
        Weight::from_parts(26_671_800, 23285)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_208, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `883`
        //  Estimated: `40497`
        // Minimum execution time: 76_890_000 picoseconds.
        Weight::from_parts(53_846_847, 40497)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_197, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `581`
        //  Estimated: `60306`
        // Minimum execution time: 277_836_000 picoseconds.
        Weight::from_parts(292_323_533, 60306)
            .saturating_add(T::DbWeight::get().reads(24_u64))
            .saturating_add(T::DbWeight::get().writes(21_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `581`
        //  Estimated: `59946`
        // Minimum execution time: 291_802_000 picoseconds.
        Weight::from_parts(303_543_855, 59946)
            .saturating_add(T::DbWeight::get().reads(24_u64))
            .saturating_add(T::DbWeight::get().writes(21_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3923 + c * (2150 ±0)`
        // Minimum execution time: 46_102_000 picoseconds.
        Weight::from_parts(46_909_000, 3923)
            // Standard Error: 34_228
            .saturating_add(Weight::from_parts(54_981_719, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_526_000 picoseconds.
        Weight::from_parts(81_423_491, 0)
            // Standard Error: 562_032
            .saturating_add(Weight::from_parts(147_690_275, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 223_469_000 picoseconds.
        Weight::from_parts(212_248_586, 0)
            // Standard Error: 427_907
            .saturating_add(Weight::from_parts(149_357_999, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_614_000 picoseconds.
        Weight::from_parts(91_896_938, 0)
            // Standard Error: 7_086
            .saturating_add(Weight::from_parts(4_157_823, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 141_150_000 picoseconds.
        Weight::from_parts(138_670_675, 0)
            // Standard Error: 25_057
            .saturating_add(Weight::from_parts(4_787_666, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_689_000 picoseconds.
        Weight::from_parts(108_014_722, 0)
            // Standard Error: 497_467
            .saturating_add(Weight::from_parts(224_786_554, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_550_000 picoseconds.
        Weight::from_parts(86_558_390, 0)
            // Standard Error: 415_949
            .saturating_add(Weight::from_parts(223_568_022, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_051_000 picoseconds.
        Weight::from_parts(88_394_142, 0)
            // Standard Error: 369_447
            .saturating_add(Weight::from_parts(221_363_291, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_732_000 picoseconds.
        Weight::from_parts(80_975_337, 0)
            // Standard Error: 402_242
            .saturating_add(Weight::from_parts(222_258_629, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_977_000 picoseconds.
        Weight::from_parts(79_383_383, 0)
            // Standard Error: 429_485
            .saturating_add(Weight::from_parts(223_798_192, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_535_000 picoseconds.
        Weight::from_parts(83_558_908, 0)
            // Standard Error: 313_065
            .saturating_add(Weight::from_parts(220_662_172, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_237_000 picoseconds.
        Weight::from_parts(77_525_524, 0)
            // Standard Error: 348_406
            .saturating_add(Weight::from_parts(222_410_129, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_821_000 picoseconds.
        Weight::from_parts(77_416_716, 0)
            // Standard Error: 440_471
            .saturating_add(Weight::from_parts(224_222_164, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_484_000 picoseconds.
        Weight::from_parts(81_704_085, 0)
            // Standard Error: 397_144
            .saturating_add(Weight::from_parts(221_292_479, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 730_028_000 picoseconds.
        Weight::from_parts(784_052_376, 0)
            // Standard Error: 538_394
            .saturating_add(Weight::from_parts(302_242_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_032_679_000 picoseconds.
        Weight::from_parts(1_072_749_000, 0)
            // Standard Error: 64_896
            .saturating_add(Weight::from_parts(13_868_143, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_177_000 picoseconds.
        Weight::from_parts(88_893_057, 0)
            // Standard Error: 440_778
            .saturating_add(Weight::from_parts(223_217_330, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_394_000 picoseconds.
        Weight::from_parts(81_642_441, 0)
            // Standard Error: 435_858
            .saturating_add(Weight::from_parts(223_779_512, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_931_000 picoseconds.
        Weight::from_parts(117_539_847, 0)
            // Standard Error: 670_805
            .saturating_add(Weight::from_parts(292_982_937, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_084_000 picoseconds.
        Weight::from_parts(125_906_976, 0)
            // Standard Error: 729_641
            .saturating_add(Weight::from_parts(441_745_321, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 534_614_000 picoseconds.
        Weight::from_parts(538_504_000, 0)
            // Standard Error: 65_160
            .saturating_add(Weight::from_parts(22_191_572, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_497_000 picoseconds.
        Weight::from_parts(162_767_179, 0)
            // Standard Error: 905_876
            .saturating_add(Weight::from_parts(444_593_045, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 531_490_000 picoseconds.
        Weight::from_parts(537_018_000, 0)
            // Standard Error: 76_312
            .saturating_add(Weight::from_parts(22_022_706, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 714_099_000 picoseconds.
        Weight::from_parts(786_749_366, 0)
            // Standard Error: 741_619
            .saturating_add(Weight::from_parts(466_318_456, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 749_174_000 picoseconds.
        Weight::from_parts(897_264_598, 0)
            // Standard Error: 847_030
            .saturating_add(Weight::from_parts(463_146_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_109_000 picoseconds.
        Weight::from_parts(83_089_485, 0)
            // Standard Error: 432_313
            .saturating_add(Weight::from_parts(232_794_769, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_582_291_000 picoseconds.
        Weight::from_parts(4_744_687_961, 0)
            // Standard Error: 1_113_491
            .saturating_add(Weight::from_parts(335_743_994, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 640_675_000 picoseconds.
        Weight::from_parts(646_191_000, 0)
            // Standard Error: 53_506
            .saturating_add(Weight::from_parts(31_914_144, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_736_368_000 picoseconds.
        Weight::from_parts(4_746_548_744, 0)
            // Standard Error: 946_183
            .saturating_add(Weight::from_parts(397_113_384, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_590_189_000 picoseconds.
        Weight::from_parts(4_756_856_922, 0)
            // Standard Error: 1_180_775
            .saturating_add(Weight::from_parts(404_493_114, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 245_326_000 picoseconds.
        Weight::from_parts(309_228_634, 0)
            // Standard Error: 731_883
            .saturating_add(Weight::from_parts(459_720_610, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 714_873_000 picoseconds.
        Weight::from_parts(727_342_000, 0)
            // Standard Error: 64_931
            .saturating_add(Weight::from_parts(22_511_448, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_756_803_000 picoseconds.
        Weight::from_parts(4_934_574_850, 0)
            // Standard Error: 1_094_680
            .saturating_add(Weight::from_parts(416_247_882, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_520_000 picoseconds.
        Weight::from_parts(85_208_607, 0)
            // Standard Error: 187_162
            .saturating_add(Weight::from_parts(26_677_942, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_529_000 picoseconds.
        Weight::from_parts(95_926_137, 0)
            // Standard Error: 816
            .saturating_add(Weight::from_parts(423_879, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_984_000 picoseconds.
        Weight::from_parts(87_949_289, 0)
            // Standard Error: 166_125
            .saturating_add(Weight::from_parts(23_998_210, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_383_000 picoseconds.
        Weight::from_parts(95_262_808, 0)
            // Standard Error: 1_147
            .saturating_add(Weight::from_parts(431_219, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_992_000 picoseconds.
        Weight::from_parts(87_505_810, 0)
            // Standard Error: 147_297
            .saturating_add(Weight::from_parts(22_093_689, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_882_000 picoseconds.
        Weight::from_parts(87_785_263, 0)
            // Standard Error: 172_829
            .saturating_add(Weight::from_parts(22_689_836, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_284_000 picoseconds.
        Weight::from_parts(111_290_387, 0)
            // Standard Error: 366_177
            .saturating_add(Weight::from_parts(316_320_668, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_743_000 picoseconds.
        Weight::from_parts(107_580_000, 0)
            // Standard Error: 2_886
            .saturating_add(Weight::from_parts(661_140, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 706_916_000 picoseconds.
        Weight::from_parts(731_470_689, 0)
            // Standard Error: 1_559_493
            .saturating_add(Weight::from_parts(41_993_860, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 708_860_000 picoseconds.
        Weight::from_parts(736_329_973, 0)
            // Standard Error: 2_220_747
            .saturating_add(Weight::from_parts(68_642_376, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_367_000 picoseconds.
        Weight::from_parts(99_107_289, 0)
            // Standard Error: 168_452
            .saturating_add(Weight::from_parts(13_946_510, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_199_000 picoseconds.
        Weight::from_parts(98_202_527, 0)
            // Standard Error: 1_038
            .saturating_add(Weight::from_parts(428_585, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_371_000 picoseconds.
        Weight::from_parts(97_277_915, 0)
            // Standard Error: 174_497
            .saturating_add(Weight::from_parts(14_827_884, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_658_000 picoseconds.
        Weight::from_parts(97_877_720, 0)
            // Standard Error: 1_163
            .saturating_add(Weight::from_parts(428_282, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_475_000 picoseconds.
        Weight::from_parts(86_565_728, 0)
            // Standard Error: 449_374
            .saturating_add(Weight::from_parts(225_378_519, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_338_000 picoseconds.
        Weight::from_parts(82_401_949, 0)
            // Standard Error: 315_079
            .saturating_add(Weight::from_parts(223_549_605, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 724_151_000 picoseconds.
        Weight::from_parts(780_920_726, 0)
            // Standard Error: 532_723
            .saturating_add(Weight::from_parts(240_369_955, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 742_440_000 picoseconds.
        Weight::from_parts(828_889_818, 0)
            // Standard Error: 4_705
            .saturating_add(Weight::from_parts(162_184, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_355_569_000 picoseconds.
        Weight::from_parts(5_501_639_229, 0)
            // Standard Error: 635_450
            .saturating_add(Weight::from_parts(250_839_873, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_697_028_000 picoseconds.
        Weight::from_parts(5_718_704_196, 0)
            // Standard Error: 11_978
            .saturating_add(Weight::from_parts(13_788_659, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_051_000 picoseconds.
        Weight::from_parts(82_219_499, 0)
            // Standard Error: 477_853
            .saturating_add(Weight::from_parts(246_586_108, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 311_372_000 picoseconds.
        Weight::from_parts(316_187_000, 0)
            // Standard Error: 65_048
            .saturating_add(Weight::from_parts(25_962_642, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_551_000 picoseconds.
        Weight::from_parts(108_431_943, 0)
            // Standard Error: 404_795
            .saturating_add(Weight::from_parts(292_848_491, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_758_000 picoseconds.
        Weight::from_parts(84_354_812, 0)
            // Standard Error: 423_611
            .saturating_add(Weight::from_parts(223_103_446, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_797_000 picoseconds.
        Weight::from_parts(87_439_865, 0)
            // Standard Error: 194_889
            .saturating_add(Weight::from_parts(25_657_384, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_693_000 picoseconds.
        Weight::from_parts(87_588_381, 0)
            // Standard Error: 178_615
            .saturating_add(Weight::from_parts(19_545_268, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_474_000 picoseconds.
        Weight::from_parts(87_493_823, 0)
            // Standard Error: 173_666
            .saturating_add(Weight::from_parts(16_198_076, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_488_000 picoseconds.
        Weight::from_parts(88_774_002, 0)
            // Standard Error: 160_884
            .saturating_add(Weight::from_parts(17_159_597, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_526_000 picoseconds.
        Weight::from_parts(88_796_660, 0)
            // Standard Error: 160_330
            .saturating_add(Weight::from_parts(17_925_589, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 137_358_000 picoseconds.
        Weight::from_parts(175_028_871, 0)
            // Standard Error: 618_463
            .saturating_add(Weight::from_parts(339_956_683, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_304_000 picoseconds.
        Weight::from_parts(134_261_254, 0)
            // Standard Error: 682_517
            .saturating_add(Weight::from_parts(523_558_317, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 46_922_035_000 picoseconds.
        Weight::from_parts(47_532_665_000, 0)
            // Standard Error: 317_440
            .saturating_add(Weight::from_parts(7_391_178, 0).saturating_mul(p.into()))
            // Standard Error: 317_422
            .saturating_add(Weight::from_parts(158_219_799, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_555_000 picoseconds.
        Weight::from_parts(174_371_041, 0)
            // Standard Error: 737_556
            .saturating_add(Weight::from_parts(526_909_373, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 45_407_409_000 picoseconds.
        Weight::from_parts(46_021_453_000, 0)
            // Standard Error: 308_395
            .saturating_add(Weight::from_parts(7_975_654, 0).saturating_mul(p.into()))
            // Standard Error: 308_377
            .saturating_add(Weight::from_parts(158_605_427, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 86_283_000 picoseconds.
        Weight::from_parts(119_548_535, 1131)
            // Standard Error: 9_028
            .saturating_add(Weight::from_parts(11_794_628, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 85_547_000 picoseconds.
        Weight::from_parts(86_314_000, 1131)
            // Standard Error: 58_679
            .saturating_add(Weight::from_parts(36_264_399, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_089_779_000 picoseconds.
        Weight::from_parts(5_938_584_902, 5069931)
            // Standard Error: 69_013
            .saturating_add(Weight::from_parts(38_738_354, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `2002 + p * (75482 ±0)`
        // Minimum execution time: 87_884_000 picoseconds.
        Weight::from_parts(89_357_000, 2002)
            // Standard Error: 36_015
            .saturating_add(Weight::from_parts(46_645_351, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1574 + p * (9879 ±2)`
        // Minimum execution time: 99_809_000 picoseconds.
        Weight::from_parts(96_116_991, 1574)
            // Standard Error: 60_738
            .saturating_add(Weight::from_parts(35_949_905, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1574 + p * (9879 ±2)`
        // Minimum execution time: 753_758_000 picoseconds.
        Weight::from_parts(820_325_295, 1574)
            // Standard Error: 586_604
            .saturating_add(Weight::from_parts(45_910_195, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_150_903_000 picoseconds.
        Weight::from_parts(1_197_973_807, 317931)
            // Standard Error: 367_947
            .saturating_add(Weight::from_parts(46_076_274, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_233_331_000 picoseconds.
        Weight::from_parts(4_228_002_467, 0)
            // Standard Error: 14_354
            .saturating_add(Weight::from_parts(3_411_216, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_245_047_000 picoseconds.
        Weight::from_parts(4_230_403_661, 0)
            // Standard Error: 12_799
            .saturating_add(Weight::from_parts(3_407_080, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_527_109_000 picoseconds.
        Weight::from_parts(10_351_299_546, 0)
            // Standard Error: 227_578
            .saturating_add(Weight::from_parts(15_266_790, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_801_055_000 picoseconds.
        Weight::from_parts(10_143_985_112, 0)
            // Standard Error: 257_839
            .saturating_add(Weight::from_parts(10_961_157, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_121_000 picoseconds.
        Weight::from_parts(2_228_000, 0)
            // Standard Error: 7_662
            .saturating_add(Weight::from_parts(3_858_459, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_182_000 picoseconds.
        Weight::from_parts(613_540, 0)
            // Standard Error: 8_176
            .saturating_add(Weight::from_parts(3_218_939, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_103_000 picoseconds.
        Weight::from_parts(3_460_233, 0)
            // Standard Error: 1_581
            .saturating_add(Weight::from_parts(1_569_137, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_111_000 picoseconds.
        Weight::from_parts(2_209_000, 0)
            // Standard Error: 6_054
            .saturating_add(Weight::from_parts(3_093_069, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_181_000 picoseconds.
        Weight::from_parts(2_237_784, 0)
            // Standard Error: 11_262
            .saturating_add(Weight::from_parts(5_238_030, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_805_000 picoseconds.
        Weight::from_parts(4_635_986, 0)
            // Standard Error: 1_199
            .saturating_add(Weight::from_parts(181_683, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_146_000 picoseconds.
        Weight::from_parts(4_390_255, 0)
            // Standard Error: 8_751
            .saturating_add(Weight::from_parts(2_595_993, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_595_993 -
            2_515_508, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_167_000 picoseconds.
        Weight::from_parts(2_929_660, 0)
            // Standard Error: 12_358
            .saturating_add(Weight::from_parts(2_515_508, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_459_000 picoseconds.
        Weight::from_parts(12_622_841, 0)
            // Standard Error: 24_113
            .saturating_add(Weight::from_parts(10_305_886, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_782_000 picoseconds.
        Weight::from_parts(2_722_009, 0)
            // Standard Error: 6_415
            .saturating_add(Weight::from_parts(1_274_776, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_255_000 picoseconds.
        Weight::from_parts(5_531_118, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_140_000 picoseconds.
        Weight::from_parts(1_914_935, 0)
            // Standard Error: 2_817
            .saturating_add(Weight::from_parts(254_141, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_158_000 picoseconds.
        Weight::from_parts(2_251_000, 0)
            // Standard Error: 6_708
            .saturating_add(Weight::from_parts(786_508, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_132_000 picoseconds.
        Weight::from_parts(2_281_000, 0)
            // Standard Error: 6_452
            .saturating_add(Weight::from_parts(796_610, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_902_000 picoseconds.
        Weight::from_parts(1_004_970, 0)
            // Standard Error: 12_002
            .saturating_add(Weight::from_parts(919_339, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_880_000 picoseconds.
        Weight::from_parts(5_951_000, 0)
            // Standard Error: 8_550
            .saturating_add(Weight::from_parts(1_368_130, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_783_000 picoseconds.
        Weight::from_parts(2_730_406, 0)
            // Standard Error: 10_926
            .saturating_add(Weight::from_parts(7_108_105, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_194_000 picoseconds.
        Weight::from_parts(2_288_000, 0)
            // Standard Error: 7_818
            .saturating_add(Weight::from_parts(3_476_822, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_168_000 picoseconds.
        Weight::from_parts(2_254_000, 0)
            // Standard Error: 6_841
            .saturating_add(Weight::from_parts(3_243_352, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_144_000 picoseconds.
        Weight::from_parts(2_247_000, 0)
            // Standard Error: 6_995
            .saturating_add(Weight::from_parts(3_226_878, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_154_000 picoseconds.
        Weight::from_parts(2_227_000, 0)
            // Standard Error: 4_176
            .saturating_add(Weight::from_parts(2_703_022, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_160_000 picoseconds.
        Weight::from_parts(2_278_000, 0)
            // Standard Error: 4_873
            .saturating_add(Weight::from_parts(591_498, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_148_000 picoseconds.
        Weight::from_parts(892_196, 0)
            // Standard Error: 4_764
            .saturating_add(Weight::from_parts(445_505, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_186_000 picoseconds.
        Weight::from_parts(2_271_000, 0)
            // Standard Error: 12_726
            .saturating_add(Weight::from_parts(1_985_061, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_154_000 picoseconds.
        Weight::from_parts(2_238_000, 0)
            // Standard Error: 8_783
            .saturating_add(Weight::from_parts(1_239_841, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_136_000 picoseconds.
        Weight::from_parts(1_711_921, 0)
            // Standard Error: 3_212
            .saturating_add(Weight::from_parts(356_651, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_170_000 picoseconds.
        Weight::from_parts(2_801_273, 0)
            // Standard Error: 1_701
            .saturating_add(Weight::from_parts(167_220, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_138_000 picoseconds.
        Weight::from_parts(2_746_668, 0)
            // Standard Error: 2_911
            .saturating_add(Weight::from_parts(181_878, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_195_000 picoseconds.
        Weight::from_parts(2_289_000, 0)
            // Standard Error: 11_194
            .saturating_add(Weight::from_parts(1_959_661, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_171_000 picoseconds.
        Weight::from_parts(2_256_000, 0)
            // Standard Error: 7_768
            .saturating_add(Weight::from_parts(1_178_169, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_143_000 picoseconds.
        Weight::from_parts(2_220_000, 0)
            // Standard Error: 10_434
            .saturating_add(Weight::from_parts(1_869_594, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_186_000 picoseconds.
        Weight::from_parts(2_244_000, 0)
            // Standard Error: 9_095
            .saturating_add(Weight::from_parts(1_181_265, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_176_000 picoseconds.
        Weight::from_parts(2_237_000, 0)
            // Standard Error: 11_469
            .saturating_add(Weight::from_parts(1_902_993, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_182_000 picoseconds.
        Weight::from_parts(2_274_000, 0)
            // Standard Error: 8_822
            .saturating_add(Weight::from_parts(1_228_124, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_155_000 picoseconds.
        Weight::from_parts(2_245_000, 0)
            // Standard Error: 11_162
            .saturating_add(Weight::from_parts(1_913_938, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_147_000 picoseconds.
        Weight::from_parts(2_225_000, 0)
            // Standard Error: 7_344
            .saturating_add(Weight::from_parts(1_143_212, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_155_000 picoseconds.
        Weight::from_parts(2_248_000, 0)
            // Standard Error: 10_752
            .saturating_add(Weight::from_parts(1_836_969, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_072_000 picoseconds.
        Weight::from_parts(2_215_000, 0)
            // Standard Error: 8_781
            .saturating_add(Weight::from_parts(1_175_253, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_167_000 picoseconds.
        Weight::from_parts(2_259_000, 0)
            // Standard Error: 10_944
            .saturating_add(Weight::from_parts(1_928_384, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_198_000 picoseconds.
        Weight::from_parts(2_262_000, 0)
            // Standard Error: 8_247
            .saturating_add(Weight::from_parts(1_186_587, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_157_000 picoseconds.
        Weight::from_parts(2_252_000, 0)
            // Standard Error: 12_688
            .saturating_add(Weight::from_parts(1_889_045, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_124_000 picoseconds.
        Weight::from_parts(2_214_000, 0)
            // Standard Error: 11_492
            .saturating_add(Weight::from_parts(1_225_246, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_132_000 picoseconds.
        Weight::from_parts(2_204_000, 0)
            // Standard Error: 13_153
            .saturating_add(Weight::from_parts(1_910_993, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_223_000 picoseconds.
        Weight::from_parts(2_267_000, 0)
            // Standard Error: 7_973
            .saturating_add(Weight::from_parts(1_191_338, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_100_000 picoseconds.
        Weight::from_parts(2_235_000, 0)
            // Standard Error: 11_449
            .saturating_add(Weight::from_parts(1_946_703, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_165_000 picoseconds.
        Weight::from_parts(2_247_000, 0)
            // Standard Error: 7_860
            .saturating_add(Weight::from_parts(1_210_077, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_158_000 picoseconds.
        Weight::from_parts(2_257_000, 0)
            // Standard Error: 12_329
            .saturating_add(Weight::from_parts(1_910_950, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_143_000 picoseconds.
        Weight::from_parts(2_261_000, 0)
            // Standard Error: 7_940
            .saturating_add(Weight::from_parts(1_183_909, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_161_000 picoseconds.
        Weight::from_parts(2_231_000, 0)
            // Standard Error: 10_975
            .saturating_add(Weight::from_parts(1_354_355, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_152_000 picoseconds.
        Weight::from_parts(2_267_000, 0)
            // Standard Error: 4_986
            .saturating_add(Weight::from_parts(658_833, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_157_000 picoseconds.
        Weight::from_parts(2_229_000, 0)
            // Standard Error: 9_237
            .saturating_add(Weight::from_parts(1_323_246, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_126_000 picoseconds.
        Weight::from_parts(2_214_000, 0)
            // Standard Error: 5_154
            .saturating_add(Weight::from_parts(654_961, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_181_000 picoseconds.
        Weight::from_parts(2_254_000, 0)
            // Standard Error: 13_372
            .saturating_add(Weight::from_parts(1_904_401, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_207_000 picoseconds.
        Weight::from_parts(2_278_000, 0)
            // Standard Error: 8_852
            .saturating_add(Weight::from_parts(1_254_870, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_149_000 picoseconds.
        Weight::from_parts(2_962_907, 0)
            // Standard Error: 13_855
            .saturating_add(Weight::from_parts(2_748_348, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_180_000 picoseconds.
        Weight::from_parts(3_362_881, 0)
            // Standard Error: 18_580
            .saturating_add(Weight::from_parts(2_309_185, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_098_000 picoseconds.
        Weight::from_parts(2_212_000, 0)
            // Standard Error: 6_166
            .saturating_add(Weight::from_parts(3_095_993, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_162_000 picoseconds.
        Weight::from_parts(679_605, 0)
            // Standard Error: 10_647
            .saturating_add(Weight::from_parts(2_619_920, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_147_000 picoseconds.
        Weight::from_parts(6_908_050, 0)
            // Standard Error: 67_890
            .saturating_add(Weight::from_parts(9_347_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_190_000 picoseconds.
        Weight::from_parts(2_260_000, 0)
            // Standard Error: 18_228
            .saturating_add(Weight::from_parts(7_968_074, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_176_000 picoseconds.
        Weight::from_parts(3_820_645, 0)
            // Standard Error: 17_979
            .saturating_add(Weight::from_parts(2_983_171, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_196_000 picoseconds.
        Weight::from_parts(5_663_039, 0)
            // Standard Error: 30_721
            .saturating_add(Weight::from_parts(2_388_286, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_150_000 picoseconds.
        Weight::from_parts(2_206_000, 0)
            // Standard Error: 9_968
            .saturating_add(Weight::from_parts(1_333_625, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_126_000 picoseconds.
        Weight::from_parts(2_247_000, 0)
            // Standard Error: 6_303
            .saturating_add(Weight::from_parts(671_958, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_148_000 picoseconds.
        Weight::from_parts(2_226_000, 0)
            // Standard Error: 9_138
            .saturating_add(Weight::from_parts(1_384_862, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_177_000 picoseconds.
        Weight::from_parts(2_259_000, 0)
            // Standard Error: 7_002
            .saturating_add(Weight::from_parts(687_461, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_178_000 picoseconds.
        Weight::from_parts(2_276_000, 0)
            // Standard Error: 8_761
            .saturating_add(Weight::from_parts(1_318_184, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_095_000 picoseconds.
        Weight::from_parts(2_247_000, 0)
            // Standard Error: 5_351
            .saturating_add(Weight::from_parts(665_318, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_170_000 picoseconds.
        Weight::from_parts(2_244_000, 0)
            // Standard Error: 7_567
            .saturating_add(Weight::from_parts(1_120_982, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_167_000 picoseconds.
        Weight::from_parts(2_270_000, 0)
            // Standard Error: 6_031
            .saturating_add(Weight::from_parts(632_179, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_204_000 picoseconds.
        Weight::from_parts(2_284_000, 0)
            // Standard Error: 8_150
            .saturating_add(Weight::from_parts(1_072_281, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_193_000 picoseconds.
        Weight::from_parts(2_284_000, 0)
            // Standard Error: 5_006
            .saturating_add(Weight::from_parts(574_708, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_164_000 picoseconds.
        Weight::from_parts(2_250_000, 0)
            // Standard Error: 9_397
            .saturating_add(Weight::from_parts(1_180_047, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_155_000 picoseconds.
        Weight::from_parts(2_250_000, 0)
            // Standard Error: 5_059
            .saturating_add(Weight::from_parts(592_227, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_194_000 picoseconds.
        Weight::from_parts(2_244_000, 0)
            // Standard Error: 8_717
            .saturating_add(Weight::from_parts(1_162_481, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_240_000 picoseconds.
        Weight::from_parts(2_309_000, 0)
            // Standard Error: 5_262
            .saturating_add(Weight::from_parts(623_732, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_090_000 picoseconds.
        Weight::from_parts(2_223_000, 0)
            // Standard Error: 9_335
            .saturating_add(Weight::from_parts(1_189_592, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_121_000 picoseconds.
        Weight::from_parts(2_251_000, 0)
            // Standard Error: 4_267
            .saturating_add(Weight::from_parts(591_850, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 917_000 picoseconds.
        Weight::from_parts(978_000, 0)
            // Standard Error: 1_274
            .saturating_add(Weight::from_parts(252_678, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_799_000 picoseconds.
        Weight::from_parts(2_871_000, 3506)
            // Standard Error: 1_016
            .saturating_add(Weight::from_parts(671_715, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 49_878_000 picoseconds.
        Weight::from_parts(75_353_937, 0)
            // Standard Error: 9_806
            .saturating_add(Weight::from_parts(2_395_575, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `720`
        //  Estimated: `22449`
        // Minimum execution time: 55_977_000 picoseconds.
        Weight::from_parts(57_136_000, 22449)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 61_177_000 picoseconds.
        Weight::from_parts(19_362_264, 4990)
            // Standard Error: 45_984
            .saturating_add(Weight::from_parts(54_680_156, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `572`
        //  Estimated: `27358`
        // Minimum execution time: 51_420_000 picoseconds.
        Weight::from_parts(72_446_512, 27358)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_353, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `55`
        //  Estimated: `23332`
        // Minimum execution time: 9_712_831_000 picoseconds.
        Weight::from_parts(9_749_511_000, 23332)
            // Standard Error: 515_378
            .saturating_add(Weight::from_parts(31_382_985, 0).saturating_mul(c.into()))
            // Standard Error: 30
            .saturating_add(Weight::from_parts(828, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `310`
        //  Estimated: `23285`
        // Minimum execution time: 53_378_000 picoseconds.
        Weight::from_parts(26_671_800, 23285)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_208, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `883`
        //  Estimated: `40497`
        // Minimum execution time: 76_890_000 picoseconds.
        Weight::from_parts(53_846_847, 40497)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_197, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `581`
        //  Estimated: `60306`
        // Minimum execution time: 277_836_000 picoseconds.
        Weight::from_parts(292_323_533, 60306)
            .saturating_add(RocksDbWeight::get().reads(24_u64))
            .saturating_add(RocksDbWeight::get().writes(21_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `581`
        //  Estimated: `59946`
        // Minimum execution time: 291_802_000 picoseconds.
        Weight::from_parts(303_543_855, 59946)
            .saturating_add(RocksDbWeight::get().reads(24_u64))
            .saturating_add(RocksDbWeight::get().writes(21_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3923 + c * (2150 ±0)`
        // Minimum execution time: 46_102_000 picoseconds.
        Weight::from_parts(46_909_000, 3923)
            // Standard Error: 34_228
            .saturating_add(Weight::from_parts(54_981_719, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_526_000 picoseconds.
        Weight::from_parts(81_423_491, 0)
            // Standard Error: 562_032
            .saturating_add(Weight::from_parts(147_690_275, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 223_469_000 picoseconds.
        Weight::from_parts(212_248_586, 0)
            // Standard Error: 427_907
            .saturating_add(Weight::from_parts(149_357_999, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_614_000 picoseconds.
        Weight::from_parts(91_896_938, 0)
            // Standard Error: 7_086
            .saturating_add(Weight::from_parts(4_157_823, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 141_150_000 picoseconds.
        Weight::from_parts(138_670_675, 0)
            // Standard Error: 25_057
            .saturating_add(Weight::from_parts(4_787_666, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_689_000 picoseconds.
        Weight::from_parts(108_014_722, 0)
            // Standard Error: 497_467
            .saturating_add(Weight::from_parts(224_786_554, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_550_000 picoseconds.
        Weight::from_parts(86_558_390, 0)
            // Standard Error: 415_949
            .saturating_add(Weight::from_parts(223_568_022, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_051_000 picoseconds.
        Weight::from_parts(88_394_142, 0)
            // Standard Error: 369_447
            .saturating_add(Weight::from_parts(221_363_291, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_732_000 picoseconds.
        Weight::from_parts(80_975_337, 0)
            // Standard Error: 402_242
            .saturating_add(Weight::from_parts(222_258_629, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_977_000 picoseconds.
        Weight::from_parts(79_383_383, 0)
            // Standard Error: 429_485
            .saturating_add(Weight::from_parts(223_798_192, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_535_000 picoseconds.
        Weight::from_parts(83_558_908, 0)
            // Standard Error: 313_065
            .saturating_add(Weight::from_parts(220_662_172, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_237_000 picoseconds.
        Weight::from_parts(77_525_524, 0)
            // Standard Error: 348_406
            .saturating_add(Weight::from_parts(222_410_129, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_821_000 picoseconds.
        Weight::from_parts(77_416_716, 0)
            // Standard Error: 440_471
            .saturating_add(Weight::from_parts(224_222_164, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_484_000 picoseconds.
        Weight::from_parts(81_704_085, 0)
            // Standard Error: 397_144
            .saturating_add(Weight::from_parts(221_292_479, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 730_028_000 picoseconds.
        Weight::from_parts(784_052_376, 0)
            // Standard Error: 538_394
            .saturating_add(Weight::from_parts(302_242_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_032_679_000 picoseconds.
        Weight::from_parts(1_072_749_000, 0)
            // Standard Error: 64_896
            .saturating_add(Weight::from_parts(13_868_143, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_177_000 picoseconds.
        Weight::from_parts(88_893_057, 0)
            // Standard Error: 440_778
            .saturating_add(Weight::from_parts(223_217_330, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_394_000 picoseconds.
        Weight::from_parts(81_642_441, 0)
            // Standard Error: 435_858
            .saturating_add(Weight::from_parts(223_779_512, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_931_000 picoseconds.
        Weight::from_parts(117_539_847, 0)
            // Standard Error: 670_805
            .saturating_add(Weight::from_parts(292_982_937, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_084_000 picoseconds.
        Weight::from_parts(125_906_976, 0)
            // Standard Error: 729_641
            .saturating_add(Weight::from_parts(441_745_321, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 534_614_000 picoseconds.
        Weight::from_parts(538_504_000, 0)
            // Standard Error: 65_160
            .saturating_add(Weight::from_parts(22_191_572, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_497_000 picoseconds.
        Weight::from_parts(162_767_179, 0)
            // Standard Error: 905_876
            .saturating_add(Weight::from_parts(444_593_045, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 531_490_000 picoseconds.
        Weight::from_parts(537_018_000, 0)
            // Standard Error: 76_312
            .saturating_add(Weight::from_parts(22_022_706, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 714_099_000 picoseconds.
        Weight::from_parts(786_749_366, 0)
            // Standard Error: 741_619
            .saturating_add(Weight::from_parts(466_318_456, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 749_174_000 picoseconds.
        Weight::from_parts(897_264_598, 0)
            // Standard Error: 847_030
            .saturating_add(Weight::from_parts(463_146_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_109_000 picoseconds.
        Weight::from_parts(83_089_485, 0)
            // Standard Error: 432_313
            .saturating_add(Weight::from_parts(232_794_769, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_582_291_000 picoseconds.
        Weight::from_parts(4_744_687_961, 0)
            // Standard Error: 1_113_491
            .saturating_add(Weight::from_parts(335_743_994, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 640_675_000 picoseconds.
        Weight::from_parts(646_191_000, 0)
            // Standard Error: 53_506
            .saturating_add(Weight::from_parts(31_914_144, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_736_368_000 picoseconds.
        Weight::from_parts(4_746_548_744, 0)
            // Standard Error: 946_183
            .saturating_add(Weight::from_parts(397_113_384, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_590_189_000 picoseconds.
        Weight::from_parts(4_756_856_922, 0)
            // Standard Error: 1_180_775
            .saturating_add(Weight::from_parts(404_493_114, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 245_326_000 picoseconds.
        Weight::from_parts(309_228_634, 0)
            // Standard Error: 731_883
            .saturating_add(Weight::from_parts(459_720_610, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 714_873_000 picoseconds.
        Weight::from_parts(727_342_000, 0)
            // Standard Error: 64_931
            .saturating_add(Weight::from_parts(22_511_448, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_756_803_000 picoseconds.
        Weight::from_parts(4_934_574_850, 0)
            // Standard Error: 1_094_680
            .saturating_add(Weight::from_parts(416_247_882, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_520_000 picoseconds.
        Weight::from_parts(85_208_607, 0)
            // Standard Error: 187_162
            .saturating_add(Weight::from_parts(26_677_942, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_529_000 picoseconds.
        Weight::from_parts(95_926_137, 0)
            // Standard Error: 816
            .saturating_add(Weight::from_parts(423_879, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_984_000 picoseconds.
        Weight::from_parts(87_949_289, 0)
            // Standard Error: 166_125
            .saturating_add(Weight::from_parts(23_998_210, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_383_000 picoseconds.
        Weight::from_parts(95_262_808, 0)
            // Standard Error: 1_147
            .saturating_add(Weight::from_parts(431_219, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_992_000 picoseconds.
        Weight::from_parts(87_505_810, 0)
            // Standard Error: 147_297
            .saturating_add(Weight::from_parts(22_093_689, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_882_000 picoseconds.
        Weight::from_parts(87_785_263, 0)
            // Standard Error: 172_829
            .saturating_add(Weight::from_parts(22_689_836, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_284_000 picoseconds.
        Weight::from_parts(111_290_387, 0)
            // Standard Error: 366_177
            .saturating_add(Weight::from_parts(316_320_668, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_743_000 picoseconds.
        Weight::from_parts(107_580_000, 0)
            // Standard Error: 2_886
            .saturating_add(Weight::from_parts(661_140, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 706_916_000 picoseconds.
        Weight::from_parts(731_470_689, 0)
            // Standard Error: 1_559_493
            .saturating_add(Weight::from_parts(41_993_860, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 708_860_000 picoseconds.
        Weight::from_parts(736_329_973, 0)
            // Standard Error: 2_220_747
            .saturating_add(Weight::from_parts(68_642_376, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_367_000 picoseconds.
        Weight::from_parts(99_107_289, 0)
            // Standard Error: 168_452
            .saturating_add(Weight::from_parts(13_946_510, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_199_000 picoseconds.
        Weight::from_parts(98_202_527, 0)
            // Standard Error: 1_038
            .saturating_add(Weight::from_parts(428_585, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_371_000 picoseconds.
        Weight::from_parts(97_277_915, 0)
            // Standard Error: 174_497
            .saturating_add(Weight::from_parts(14_827_884, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_658_000 picoseconds.
        Weight::from_parts(97_877_720, 0)
            // Standard Error: 1_163
            .saturating_add(Weight::from_parts(428_282, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_475_000 picoseconds.
        Weight::from_parts(86_565_728, 0)
            // Standard Error: 449_374
            .saturating_add(Weight::from_parts(225_378_519, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_338_000 picoseconds.
        Weight::from_parts(82_401_949, 0)
            // Standard Error: 315_079
            .saturating_add(Weight::from_parts(223_549_605, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 724_151_000 picoseconds.
        Weight::from_parts(780_920_726, 0)
            // Standard Error: 532_723
            .saturating_add(Weight::from_parts(240_369_955, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 742_440_000 picoseconds.
        Weight::from_parts(828_889_818, 0)
            // Standard Error: 4_705
            .saturating_add(Weight::from_parts(162_184, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_355_569_000 picoseconds.
        Weight::from_parts(5_501_639_229, 0)
            // Standard Error: 635_450
            .saturating_add(Weight::from_parts(250_839_873, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_697_028_000 picoseconds.
        Weight::from_parts(5_718_704_196, 0)
            // Standard Error: 11_978
            .saturating_add(Weight::from_parts(13_788_659, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_051_000 picoseconds.
        Weight::from_parts(82_219_499, 0)
            // Standard Error: 477_853
            .saturating_add(Weight::from_parts(246_586_108, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 311_372_000 picoseconds.
        Weight::from_parts(316_187_000, 0)
            // Standard Error: 65_048
            .saturating_add(Weight::from_parts(25_962_642, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_551_000 picoseconds.
        Weight::from_parts(108_431_943, 0)
            // Standard Error: 404_795
            .saturating_add(Weight::from_parts(292_848_491, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_758_000 picoseconds.
        Weight::from_parts(84_354_812, 0)
            // Standard Error: 423_611
            .saturating_add(Weight::from_parts(223_103_446, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_797_000 picoseconds.
        Weight::from_parts(87_439_865, 0)
            // Standard Error: 194_889
            .saturating_add(Weight::from_parts(25_657_384, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_693_000 picoseconds.
        Weight::from_parts(87_588_381, 0)
            // Standard Error: 178_615
            .saturating_add(Weight::from_parts(19_545_268, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_474_000 picoseconds.
        Weight::from_parts(87_493_823, 0)
            // Standard Error: 173_666
            .saturating_add(Weight::from_parts(16_198_076, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_488_000 picoseconds.
        Weight::from_parts(88_774_002, 0)
            // Standard Error: 160_884
            .saturating_add(Weight::from_parts(17_159_597, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_526_000 picoseconds.
        Weight::from_parts(88_796_660, 0)
            // Standard Error: 160_330
            .saturating_add(Weight::from_parts(17_925_589, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 137_358_000 picoseconds.
        Weight::from_parts(175_028_871, 0)
            // Standard Error: 618_463
            .saturating_add(Weight::from_parts(339_956_683, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_304_000 picoseconds.
        Weight::from_parts(134_261_254, 0)
            // Standard Error: 682_517
            .saturating_add(Weight::from_parts(523_558_317, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 46_922_035_000 picoseconds.
        Weight::from_parts(47_532_665_000, 0)
            // Standard Error: 317_440
            .saturating_add(Weight::from_parts(7_391_178, 0).saturating_mul(p.into()))
            // Standard Error: 317_422
            .saturating_add(Weight::from_parts(158_219_799, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_555_000 picoseconds.
        Weight::from_parts(174_371_041, 0)
            // Standard Error: 737_556
            .saturating_add(Weight::from_parts(526_909_373, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 45_407_409_000 picoseconds.
        Weight::from_parts(46_021_453_000, 0)
            // Standard Error: 308_395
            .saturating_add(Weight::from_parts(7_975_654, 0).saturating_mul(p.into()))
            // Standard Error: 308_377
            .saturating_add(Weight::from_parts(158_605_427, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 86_283_000 picoseconds.
        Weight::from_parts(119_548_535, 1131)
            // Standard Error: 9_028
            .saturating_add(Weight::from_parts(11_794_628, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 85_547_000 picoseconds.
        Weight::from_parts(86_314_000, 1131)
            // Standard Error: 58_679
            .saturating_add(Weight::from_parts(36_264_399, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_089_779_000 picoseconds.
        Weight::from_parts(5_938_584_902, 5069931)
            // Standard Error: 69_013
            .saturating_add(Weight::from_parts(38_738_354, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `2002 + p * (75482 ±0)`
        // Minimum execution time: 87_884_000 picoseconds.
        Weight::from_parts(89_357_000, 2002)
            // Standard Error: 36_015
            .saturating_add(Weight::from_parts(46_645_351, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1574 + p * (9879 ±2)`
        // Minimum execution time: 99_809_000 picoseconds.
        Weight::from_parts(96_116_991, 1574)
            // Standard Error: 60_738
            .saturating_add(Weight::from_parts(35_949_905, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1574 + p * (9879 ±2)`
        // Minimum execution time: 753_758_000 picoseconds.
        Weight::from_parts(820_325_295, 1574)
            // Standard Error: 586_604
            .saturating_add(Weight::from_parts(45_910_195, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_150_903_000 picoseconds.
        Weight::from_parts(1_197_973_807, 317931)
            // Standard Error: 367_947
            .saturating_add(Weight::from_parts(46_076_274, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_233_331_000 picoseconds.
        Weight::from_parts(4_228_002_467, 0)
            // Standard Error: 14_354
            .saturating_add(Weight::from_parts(3_411_216, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_245_047_000 picoseconds.
        Weight::from_parts(4_230_403_661, 0)
            // Standard Error: 12_799
            .saturating_add(Weight::from_parts(3_407_080, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_527_109_000 picoseconds.
        Weight::from_parts(10_351_299_546, 0)
            // Standard Error: 227_578
            .saturating_add(Weight::from_parts(15_266_790, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_801_055_000 picoseconds.
        Weight::from_parts(10_143_985_112, 0)
            // Standard Error: 257_839
            .saturating_add(Weight::from_parts(10_961_157, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_121_000 picoseconds.
        Weight::from_parts(2_228_000, 0)
            // Standard Error: 7_662
            .saturating_add(Weight::from_parts(3_858_459, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_182_000 picoseconds.
        Weight::from_parts(613_540, 0)
            // Standard Error: 8_176
            .saturating_add(Weight::from_parts(3_218_939, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_103_000 picoseconds.
        Weight::from_parts(3_460_233, 0)
            // Standard Error: 1_581
            .saturating_add(Weight::from_parts(1_569_137, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_111_000 picoseconds.
        Weight::from_parts(2_209_000, 0)
            // Standard Error: 6_054
            .saturating_add(Weight::from_parts(3_093_069, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_181_000 picoseconds.
        Weight::from_parts(2_237_784, 0)
            // Standard Error: 11_262
            .saturating_add(Weight::from_parts(5_238_030, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_805_000 picoseconds.
        Weight::from_parts(4_635_986, 0)
            // Standard Error: 1_199
            .saturating_add(Weight::from_parts(181_683, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_146_000 picoseconds.
        Weight::from_parts(4_390_255, 0)
            // Standard Error: 8_751
            .saturating_add(Weight::from_parts(2_595_993, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_595_993 -
            2_515_508, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_167_000 picoseconds.
        Weight::from_parts(2_929_660, 0)
            // Standard Error: 12_358
            .saturating_add(Weight::from_parts(2_515_508, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_459_000 picoseconds.
        Weight::from_parts(12_622_841, 0)
            // Standard Error: 24_113
            .saturating_add(Weight::from_parts(10_305_886, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_782_000 picoseconds.
        Weight::from_parts(2_722_009, 0)
            // Standard Error: 6_415
            .saturating_add(Weight::from_parts(1_274_776, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_255_000 picoseconds.
        Weight::from_parts(5_531_118, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_140_000 picoseconds.
        Weight::from_parts(1_914_935, 0)
            // Standard Error: 2_817
            .saturating_add(Weight::from_parts(254_141, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_158_000 picoseconds.
        Weight::from_parts(2_251_000, 0)
            // Standard Error: 6_708
            .saturating_add(Weight::from_parts(786_508, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_132_000 picoseconds.
        Weight::from_parts(2_281_000, 0)
            // Standard Error: 6_452
            .saturating_add(Weight::from_parts(796_610, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_902_000 picoseconds.
        Weight::from_parts(1_004_970, 0)
            // Standard Error: 12_002
            .saturating_add(Weight::from_parts(919_339, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_880_000 picoseconds.
        Weight::from_parts(5_951_000, 0)
            // Standard Error: 8_550
            .saturating_add(Weight::from_parts(1_368_130, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_783_000 picoseconds.
        Weight::from_parts(2_730_406, 0)
            // Standard Error: 10_926
            .saturating_add(Weight::from_parts(7_108_105, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_194_000 picoseconds.
        Weight::from_parts(2_288_000, 0)
            // Standard Error: 7_818
            .saturating_add(Weight::from_parts(3_476_822, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_168_000 picoseconds.
        Weight::from_parts(2_254_000, 0)
            // Standard Error: 6_841
            .saturating_add(Weight::from_parts(3_243_352, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_144_000 picoseconds.
        Weight::from_parts(2_247_000, 0)
            // Standard Error: 6_995
            .saturating_add(Weight::from_parts(3_226_878, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_154_000 picoseconds.
        Weight::from_parts(2_227_000, 0)
            // Standard Error: 4_176
            .saturating_add(Weight::from_parts(2_703_022, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_160_000 picoseconds.
        Weight::from_parts(2_278_000, 0)
            // Standard Error: 4_873
            .saturating_add(Weight::from_parts(591_498, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_148_000 picoseconds.
        Weight::from_parts(892_196, 0)
            // Standard Error: 4_764
            .saturating_add(Weight::from_parts(445_505, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_186_000 picoseconds.
        Weight::from_parts(2_271_000, 0)
            // Standard Error: 12_726
            .saturating_add(Weight::from_parts(1_985_061, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_154_000 picoseconds.
        Weight::from_parts(2_238_000, 0)
            // Standard Error: 8_783
            .saturating_add(Weight::from_parts(1_239_841, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_136_000 picoseconds.
        Weight::from_parts(1_711_921, 0)
            // Standard Error: 3_212
            .saturating_add(Weight::from_parts(356_651, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_170_000 picoseconds.
        Weight::from_parts(2_801_273, 0)
            // Standard Error: 1_701
            .saturating_add(Weight::from_parts(167_220, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_138_000 picoseconds.
        Weight::from_parts(2_746_668, 0)
            // Standard Error: 2_911
            .saturating_add(Weight::from_parts(181_878, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_195_000 picoseconds.
        Weight::from_parts(2_289_000, 0)
            // Standard Error: 11_194
            .saturating_add(Weight::from_parts(1_959_661, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_171_000 picoseconds.
        Weight::from_parts(2_256_000, 0)
            // Standard Error: 7_768
            .saturating_add(Weight::from_parts(1_178_169, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_143_000 picoseconds.
        Weight::from_parts(2_220_000, 0)
            // Standard Error: 10_434
            .saturating_add(Weight::from_parts(1_869_594, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_186_000 picoseconds.
        Weight::from_parts(2_244_000, 0)
            // Standard Error: 9_095
            .saturating_add(Weight::from_parts(1_181_265, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_176_000 picoseconds.
        Weight::from_parts(2_237_000, 0)
            // Standard Error: 11_469
            .saturating_add(Weight::from_parts(1_902_993, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_182_000 picoseconds.
        Weight::from_parts(2_274_000, 0)
            // Standard Error: 8_822
            .saturating_add(Weight::from_parts(1_228_124, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_155_000 picoseconds.
        Weight::from_parts(2_245_000, 0)
            // Standard Error: 11_162
            .saturating_add(Weight::from_parts(1_913_938, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_147_000 picoseconds.
        Weight::from_parts(2_225_000, 0)
            // Standard Error: 7_344
            .saturating_add(Weight::from_parts(1_143_212, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_155_000 picoseconds.
        Weight::from_parts(2_248_000, 0)
            // Standard Error: 10_752
            .saturating_add(Weight::from_parts(1_836_969, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_072_000 picoseconds.
        Weight::from_parts(2_215_000, 0)
            // Standard Error: 8_781
            .saturating_add(Weight::from_parts(1_175_253, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_167_000 picoseconds.
        Weight::from_parts(2_259_000, 0)
            // Standard Error: 10_944
            .saturating_add(Weight::from_parts(1_928_384, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_198_000 picoseconds.
        Weight::from_parts(2_262_000, 0)
            // Standard Error: 8_247
            .saturating_add(Weight::from_parts(1_186_587, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_157_000 picoseconds.
        Weight::from_parts(2_252_000, 0)
            // Standard Error: 12_688
            .saturating_add(Weight::from_parts(1_889_045, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_124_000 picoseconds.
        Weight::from_parts(2_214_000, 0)
            // Standard Error: 11_492
            .saturating_add(Weight::from_parts(1_225_246, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_132_000 picoseconds.
        Weight::from_parts(2_204_000, 0)
            // Standard Error: 13_153
            .saturating_add(Weight::from_parts(1_910_993, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_223_000 picoseconds.
        Weight::from_parts(2_267_000, 0)
            // Standard Error: 7_973
            .saturating_add(Weight::from_parts(1_191_338, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_100_000 picoseconds.
        Weight::from_parts(2_235_000, 0)
            // Standard Error: 11_449
            .saturating_add(Weight::from_parts(1_946_703, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_165_000 picoseconds.
        Weight::from_parts(2_247_000, 0)
            // Standard Error: 7_860
            .saturating_add(Weight::from_parts(1_210_077, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_158_000 picoseconds.
        Weight::from_parts(2_257_000, 0)
            // Standard Error: 12_329
            .saturating_add(Weight::from_parts(1_910_950, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_143_000 picoseconds.
        Weight::from_parts(2_261_000, 0)
            // Standard Error: 7_940
            .saturating_add(Weight::from_parts(1_183_909, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_161_000 picoseconds.
        Weight::from_parts(2_231_000, 0)
            // Standard Error: 10_975
            .saturating_add(Weight::from_parts(1_354_355, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_152_000 picoseconds.
        Weight::from_parts(2_267_000, 0)
            // Standard Error: 4_986
            .saturating_add(Weight::from_parts(658_833, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_157_000 picoseconds.
        Weight::from_parts(2_229_000, 0)
            // Standard Error: 9_237
            .saturating_add(Weight::from_parts(1_323_246, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_126_000 picoseconds.
        Weight::from_parts(2_214_000, 0)
            // Standard Error: 5_154
            .saturating_add(Weight::from_parts(654_961, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_181_000 picoseconds.
        Weight::from_parts(2_254_000, 0)
            // Standard Error: 13_372
            .saturating_add(Weight::from_parts(1_904_401, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_207_000 picoseconds.
        Weight::from_parts(2_278_000, 0)
            // Standard Error: 8_852
            .saturating_add(Weight::from_parts(1_254_870, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_149_000 picoseconds.
        Weight::from_parts(2_962_907, 0)
            // Standard Error: 13_855
            .saturating_add(Weight::from_parts(2_748_348, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_180_000 picoseconds.
        Weight::from_parts(3_362_881, 0)
            // Standard Error: 18_580
            .saturating_add(Weight::from_parts(2_309_185, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_098_000 picoseconds.
        Weight::from_parts(2_212_000, 0)
            // Standard Error: 6_166
            .saturating_add(Weight::from_parts(3_095_993, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_162_000 picoseconds.
        Weight::from_parts(679_605, 0)
            // Standard Error: 10_647
            .saturating_add(Weight::from_parts(2_619_920, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_147_000 picoseconds.
        Weight::from_parts(6_908_050, 0)
            // Standard Error: 67_890
            .saturating_add(Weight::from_parts(9_347_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_190_000 picoseconds.
        Weight::from_parts(2_260_000, 0)
            // Standard Error: 18_228
            .saturating_add(Weight::from_parts(7_968_074, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_176_000 picoseconds.
        Weight::from_parts(3_820_645, 0)
            // Standard Error: 17_979
            .saturating_add(Weight::from_parts(2_983_171, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_196_000 picoseconds.
        Weight::from_parts(5_663_039, 0)
            // Standard Error: 30_721
            .saturating_add(Weight::from_parts(2_388_286, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_150_000 picoseconds.
        Weight::from_parts(2_206_000, 0)
            // Standard Error: 9_968
            .saturating_add(Weight::from_parts(1_333_625, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_126_000 picoseconds.
        Weight::from_parts(2_247_000, 0)
            // Standard Error: 6_303
            .saturating_add(Weight::from_parts(671_958, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_148_000 picoseconds.
        Weight::from_parts(2_226_000, 0)
            // Standard Error: 9_138
            .saturating_add(Weight::from_parts(1_384_862, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_177_000 picoseconds.
        Weight::from_parts(2_259_000, 0)
            // Standard Error: 7_002
            .saturating_add(Weight::from_parts(687_461, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_178_000 picoseconds.
        Weight::from_parts(2_276_000, 0)
            // Standard Error: 8_761
            .saturating_add(Weight::from_parts(1_318_184, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_095_000 picoseconds.
        Weight::from_parts(2_247_000, 0)
            // Standard Error: 5_351
            .saturating_add(Weight::from_parts(665_318, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_170_000 picoseconds.
        Weight::from_parts(2_244_000, 0)
            // Standard Error: 7_567
            .saturating_add(Weight::from_parts(1_120_982, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_167_000 picoseconds.
        Weight::from_parts(2_270_000, 0)
            // Standard Error: 6_031
            .saturating_add(Weight::from_parts(632_179, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_204_000 picoseconds.
        Weight::from_parts(2_284_000, 0)
            // Standard Error: 8_150
            .saturating_add(Weight::from_parts(1_072_281, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_193_000 picoseconds.
        Weight::from_parts(2_284_000, 0)
            // Standard Error: 5_006
            .saturating_add(Weight::from_parts(574_708, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_164_000 picoseconds.
        Weight::from_parts(2_250_000, 0)
            // Standard Error: 9_397
            .saturating_add(Weight::from_parts(1_180_047, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_155_000 picoseconds.
        Weight::from_parts(2_250_000, 0)
            // Standard Error: 5_059
            .saturating_add(Weight::from_parts(592_227, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_194_000 picoseconds.
        Weight::from_parts(2_244_000, 0)
            // Standard Error: 8_717
            .saturating_add(Weight::from_parts(1_162_481, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_240_000 picoseconds.
        Weight::from_parts(2_309_000, 0)
            // Standard Error: 5_262
            .saturating_add(Weight::from_parts(623_732, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_090_000 picoseconds.
        Weight::from_parts(2_223_000, 0)
            // Standard Error: 9_335
            .saturating_add(Weight::from_parts(1_189_592, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_121_000 picoseconds.
        Weight::from_parts(2_251_000, 0)
            // Standard Error: 4_267
            .saturating_add(Weight::from_parts(591_850, 0).saturating_mul(r.into()))
    }
}
