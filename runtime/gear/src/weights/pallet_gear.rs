// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-04, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `epyc-runners-node.hetzner`, CPU: `AMD EPYC 7502P 32-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_exit_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(1_974_000 as u64)
            // Standard Error: 326
            .saturating_add(Weight::from_ref_time(189_270 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(4_830_000 as u64)
            // Standard Error: 3_751
            .saturating_add(Weight::from_ref_time(559_063 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(58_106_000 as u64)
            // Standard Error: 4_701
            .saturating_add(Weight::from_ref_time(1_788_256 as u64).saturating_mul(c as u64))
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(81_002_000 as u64)
            .saturating_add(T::DbWeight::get().reads(7 as u64))
            .saturating_add(T::DbWeight::get().writes(5 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(67_275_000 as u64)
            // Standard Error: 17
            .saturating_add(Weight::from_ref_time(62_507 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(73_167_000 as u64)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(2_448 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(10_322_586_000 as u64)
            // Standard Error: 470
            .saturating_add(Weight::from_ref_time(37_970 as u64).saturating_mul(c as u64))
            // Standard Error: 28
            .saturating_add(Weight::from_ref_time(912 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(11 as u64))
            .saturating_add(T::DbWeight::get().writes(11 as u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(79_148_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(777 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(102_816_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(788 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(13 as u64))
            .saturating_add(T::DbWeight::get().writes(10 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        Weight::from_ref_time(225_221_000 as u64)
            // Standard Error: 847
            .saturating_add(Weight::from_ref_time(13_207 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(25 as u64))
            .saturating_add(T::DbWeight::get().writes(24 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(234_409_000 as u64)
            // Standard Error: 881
            .saturating_add(Weight::from_ref_time(14_411 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(25 as u64))
            .saturating_add(T::DbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument(c: u32, ) -> Weight {
        Weight::from_ref_time(43_678_000 as u64)
            // Standard Error: 21
            .saturating_add(Weight::from_ref_time(62_123 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(90_111_000 as u64)
            // Standard Error: 86_555
            .saturating_add(Weight::from_ref_time(233_787_753 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        Weight::from_ref_time(328_146_000 as u64)
            // Standard Error: 63_448
            .saturating_add(Weight::from_ref_time(218_811_372 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(107_565_000 as u64)
            // Standard Error: 319_306
            .saturating_add(Weight::from_ref_time(328_697_297 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(106_844_000 as u64)
            // Standard Error: 104_316
            .saturating_add(Weight::from_ref_time(325_051_359 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        Weight::from_ref_time(91_123_000 as u64)
            // Standard Error: 89_175
            .saturating_add(Weight::from_ref_time(222_819_903 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(91_283_000 as u64)
            // Standard Error: 91_731
            .saturating_add(Weight::from_ref_time(223_717_916 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(90_691_000 as u64)
            // Standard Error: 91_097
            .saturating_add(Weight::from_ref_time(222_707_097 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(91_192_000 as u64)
            // Standard Error: 95_071
            .saturating_add(Weight::from_ref_time(222_801_172 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(91_563_000 as u64)
            // Standard Error: 81_633
            .saturating_add(Weight::from_ref_time(224_122_736 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(91_313_000 as u64)
            // Standard Error: 89_745
            .saturating_add(Weight::from_ref_time(224_329_839 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(91_534_000 as u64)
            // Standard Error: 42_152
            .saturating_add(Weight::from_ref_time(203_023_447 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(91_493_000 as u64)
            // Standard Error: 56_888
            .saturating_add(Weight::from_ref_time(194_663_288 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(92_585_000 as u64)
            // Standard Error: 93_313
            .saturating_add(Weight::from_ref_time(233_485_442 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(324_910_000 as u64)
            // Standard Error: 6_055
            .saturating_add(Weight::from_ref_time(7_837_175 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(91_112_000 as u64)
            // Standard Error: 52_088
            .saturating_add(Weight::from_ref_time(195_095_009 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(91_714_000 as u64)
            // Standard Error: 62_025
            .saturating_add(Weight::from_ref_time(203_635_854 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_random(r: u32, ) -> Weight {
        Weight::from_ref_time(92_024_000 as u64)
            // Standard Error: 94_642
            .saturating_add(Weight::from_ref_time(309_140_494 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(92_215_000 as u64)
            // Standard Error: 112_644
            .saturating_add(Weight::from_ref_time(239_709_361 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(93_397_000 as u64)
            // Standard Error: 127_514
            .saturating_add(Weight::from_ref_time(494_803_166 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(609_529_000 as u64)
            // Standard Error: 97_856
            .saturating_add(Weight::from_ref_time(18_963_293 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(92_235_000 as u64)
            // Standard Error: 87_253
            .saturating_add(Weight::from_ref_time(329_805_731 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(451_443_000 as u64)
            // Standard Error: 5_685
            .saturating_add(Weight::from_ref_time(15_180_677 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(92_154_000 as u64)
            // Standard Error: 91_217
            .saturating_add(Weight::from_ref_time(243_673_111 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(92_064_000 as u64)
            // Standard Error: 80_196
            .saturating_add(Weight::from_ref_time(245_742_700 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(325_571_000 as u64)
            // Standard Error: 97_513
            .saturating_add(Weight::from_ref_time(19_096_413 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(92_175_000 as u64)
            // Standard Error: 86_769
            .saturating_add(Weight::from_ref_time(228_242_932 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(91_183_000 as u64)
            // Standard Error: 76_027
            .saturating_add(Weight::from_ref_time(238_411_487 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(317_515_000 as u64)
            // Standard Error: 6_150
            .saturating_add(Weight::from_ref_time(26_321_851 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_exit_code(r: u32, ) -> Weight {
        Weight::from_ref_time(92_014_000 as u64)
            // Standard Error: 99_174
            .saturating_add(Weight::from_ref_time(227_431_755 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(91_132_000 as u64)
            // Standard Error: 321_792
            .saturating_add(Weight::from_ref_time(41_207_800 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(90_722_000 as u64)
            // Standard Error: 256_383
            .saturating_add(Weight::from_ref_time(17_079_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(90_882_000 as u64)
            // Standard Error: 242_678
            .saturating_add(Weight::from_ref_time(16_713_099 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(91_403_000 as u64)
            // Standard Error: 330_437
            .saturating_add(Weight::from_ref_time(21_163_400 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        Weight::from_ref_time(91_353_000 as u64)
            // Standard Error: 288_205
            .saturating_add(Weight::from_ref_time(17_693_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(92_265_000 as u64)
            // Standard Error: 98_285
            .saturating_add(Weight::from_ref_time(273_564_872 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(108_998_000 as u64)
            // Standard Error: 86_097
            .saturating_add(Weight::from_ref_time(406_880_205 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 1024]`.
    /// The range of component `s` is `[0, 1024]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(16_120_973_000 as u64)
            // Standard Error: 158_460
            .saturating_add(Weight::from_ref_time(5_271_866 as u64).saturating_mul(p as u64))
            // Standard Error: 158_460
            .saturating_add(Weight::from_ref_time(220_838_549 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(257 as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(3_286_000 as u64)
            // Standard Error: 224
            .saturating_add(Weight::from_ref_time(4_895 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(5_701_000 as u64)
            // Standard Error: 14_890
            .saturating_add(Weight::from_ref_time(734_945 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(5_632_000 as u64)
            // Standard Error: 25_190
            .saturating_add(Weight::from_ref_time(1_286_796 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(3_246_000 as u64)
            // Standard Error: 268
            .saturating_add(Weight::from_ref_time(613_403 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_357_000 as u64)
            // Standard Error: 224
            .saturating_add(Weight::from_ref_time(617_504 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(3_206_000 as u64)
            // Standard Error: 312
            .saturating_add(Weight::from_ref_time(488_665 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_257_000 as u64)
            // Standard Error: 300
            .saturating_add(Weight::from_ref_time(529_225 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(3_217_000 as u64)
            // Standard Error: 859
            .saturating_add(Weight::from_ref_time(1_594_959 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(4_589_000 as u64)
            // Standard Error: 45
            .saturating_add(Weight::from_ref_time(8_063 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(3_397_000 as u64)
            // Standard Error: 525
            .saturating_add(Weight::from_ref_time(651_696 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(3_928_000 as u64)
            // Standard Error: 726
            .saturating_add(Weight::from_ref_time(1_497_407 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(5_471_000 as u64)
            // Standard Error: 162
            .saturating_add(Weight::from_ref_time(73_872 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(3_326_000 as u64)
            // Standard Error: 204
            .saturating_add(Weight::from_ref_time(30_535 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(3_337_000 as u64)
            // Standard Error: 335
            .saturating_add(Weight::from_ref_time(58_848 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(3_397_000 as u64)
            // Standard Error: 327
            .saturating_add(Weight::from_ref_time(57_058 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(15_731_000 as u64)
            // Standard Error: 415
            .saturating_add(Weight::from_ref_time(43_827 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(11_763_000 as u64)
            // Standard Error: 2_722
            .saturating_add(Weight::from_ref_time(189_410 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(5_070_000 as u64)
            // Standard Error: 860
            .saturating_add(Weight::from_ref_time(1_298_599 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_337_000 as u64)
            // Standard Error: 345
            .saturating_add(Weight::from_ref_time(765_480 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_237_000 as u64)
            // Standard Error: 302
            .saturating_add(Weight::from_ref_time(738_003 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(3_216_000 as u64)
            // Standard Error: 260
            .saturating_add(Weight::from_ref_time(50_541 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_267_000 as u64)
            // Standard Error: 375
            .saturating_add(Weight::from_ref_time(105_393 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_177_000 as u64)
            // Standard Error: 269
            .saturating_add(Weight::from_ref_time(37_335 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_227_000 as u64)
            // Standard Error: 235
            .saturating_add(Weight::from_ref_time(26_349 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(3_287_000 as u64)
            // Standard Error: 223
            .saturating_add(Weight::from_ref_time(25_882 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(3_236_000 as u64)
            // Standard Error: 419
            .saturating_add(Weight::from_ref_time(107_003 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(3_247_000 as u64)
            // Standard Error: 358
            .saturating_add(Weight::from_ref_time(106_918 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_226_000 as u64)
            // Standard Error: 389
            .saturating_add(Weight::from_ref_time(105_418 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_266_000 as u64)
            // Standard Error: 307
            .saturating_add(Weight::from_ref_time(102_564 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_277_000 as u64)
            // Standard Error: 344
            .saturating_add(Weight::from_ref_time(104_146 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_177_000 as u64)
            // Standard Error: 367
            .saturating_add(Weight::from_ref_time(106_401 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(3_207_000 as u64)
            // Standard Error: 373
            .saturating_add(Weight::from_ref_time(105_279 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_226_000 as u64)
            // Standard Error: 342
            .saturating_add(Weight::from_ref_time(105_190 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(3_257_000 as u64)
            // Standard Error: 353
            .saturating_add(Weight::from_ref_time(102_869 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_257_000 as u64)
            // Standard Error: 349
            .saturating_add(Weight::from_ref_time(102_796 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(3_207_000 as u64)
            // Standard Error: 346
            .saturating_add(Weight::from_ref_time(88_457 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(3_256_000 as u64)
            // Standard Error: 346
            .saturating_add(Weight::from_ref_time(87_599 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(3_216_000 as u64)
            // Standard Error: 377
            .saturating_add(Weight::from_ref_time(118_239 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_207_000 as u64)
            // Standard Error: 417
            .saturating_add(Weight::from_ref_time(459_325 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_226_000 as u64)
            // Standard Error: 339
            .saturating_add(Weight::from_ref_time(457_853 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(3_267_000 as u64)
            // Standard Error: 631
            .saturating_add(Weight::from_ref_time(827_360 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_156_000 as u64)
            // Standard Error: 428
            .saturating_add(Weight::from_ref_time(457_984 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(3_177_000 as u64)
            // Standard Error: 355
            .saturating_add(Weight::from_ref_time(90_631 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(3_236_000 as u64)
            // Standard Error: 352
            .saturating_add(Weight::from_ref_time(88_461 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(3_246_000 as u64)
            // Standard Error: 320
            .saturating_add(Weight::from_ref_time(87_694 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_216_000 as u64)
            // Standard Error: 329
            .saturating_add(Weight::from_ref_time(80_483 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_216_000 as u64)
            // Standard Error: 312
            .saturating_add(Weight::from_ref_time(83_020 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(3_156_000 as u64)
            // Standard Error: 374
            .saturating_add(Weight::from_ref_time(85_029 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_177_000 as u64)
            // Standard Error: 359
            .saturating_add(Weight::from_ref_time(84_145 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(3_206_000 as u64)
            // Standard Error: 336
            .saturating_add(Weight::from_ref_time(83_871 as u64).saturating_mul(r as u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(1_974_000 as u64)
            // Standard Error: 326
            .saturating_add(Weight::from_ref_time(189_270 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(4_830_000 as u64)
            // Standard Error: 3_751
            .saturating_add(Weight::from_ref_time(559_063 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        Weight::from_ref_time(58_106_000 as u64)
            // Standard Error: 4_701
            .saturating_add(Weight::from_ref_time(1_788_256 as u64).saturating_mul(c as u64))
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(81_002_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(7 as u64))
            .saturating_add(RocksDbWeight::get().writes(5 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(67_275_000 as u64)
            // Standard Error: 17
            .saturating_add(Weight::from_ref_time(62_507 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().writes(3 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(73_167_000 as u64)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(2_448 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(10_322_586_000 as u64)
            // Standard Error: 470
            .saturating_add(Weight::from_ref_time(37_970 as u64).saturating_mul(c as u64))
            // Standard Error: 28
            .saturating_add(Weight::from_ref_time(912 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(11 as u64))
            .saturating_add(RocksDbWeight::get().writes(11 as u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(79_148_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(777 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 1048576]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(102_816_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(788 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(13 as u64))
            .saturating_add(RocksDbWeight::get().writes(10 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        Weight::from_ref_time(225_221_000 as u64)
            // Standard Error: 847
            .saturating_add(Weight::from_ref_time(13_207 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(25 as u64))
            .saturating_add(RocksDbWeight::get().writes(24 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(234_409_000 as u64)
            // Standard Error: 881
            .saturating_add(Weight::from_ref_time(14_411 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(25 as u64))
            .saturating_add(RocksDbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument(c: u32, ) -> Weight {
        Weight::from_ref_time(43_678_000 as u64)
            // Standard Error: 21
            .saturating_add(Weight::from_ref_time(62_123 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(90_111_000 as u64)
            // Standard Error: 86_555
            .saturating_add(Weight::from_ref_time(233_787_753 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        Weight::from_ref_time(328_146_000 as u64)
            // Standard Error: 63_448
            .saturating_add(Weight::from_ref_time(218_811_372 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(107_565_000 as u64)
            // Standard Error: 319_306
            .saturating_add(Weight::from_ref_time(328_697_297 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(106_844_000 as u64)
            // Standard Error: 104_316
            .saturating_add(Weight::from_ref_time(325_051_359 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        Weight::from_ref_time(91_123_000 as u64)
            // Standard Error: 89_175
            .saturating_add(Weight::from_ref_time(222_819_903 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(91_283_000 as u64)
            // Standard Error: 91_731
            .saturating_add(Weight::from_ref_time(223_717_916 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(90_691_000 as u64)
            // Standard Error: 91_097
            .saturating_add(Weight::from_ref_time(222_707_097 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(91_192_000 as u64)
            // Standard Error: 95_071
            .saturating_add(Weight::from_ref_time(222_801_172 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(91_563_000 as u64)
            // Standard Error: 81_633
            .saturating_add(Weight::from_ref_time(224_122_736 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(91_313_000 as u64)
            // Standard Error: 89_745
            .saturating_add(Weight::from_ref_time(224_329_839 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(91_534_000 as u64)
            // Standard Error: 42_152
            .saturating_add(Weight::from_ref_time(203_023_447 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(91_493_000 as u64)
            // Standard Error: 56_888
            .saturating_add(Weight::from_ref_time(194_663_288 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(92_585_000 as u64)
            // Standard Error: 93_313
            .saturating_add(Weight::from_ref_time(233_485_442 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(324_910_000 as u64)
            // Standard Error: 6_055
            .saturating_add(Weight::from_ref_time(7_837_175 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(91_112_000 as u64)
            // Standard Error: 52_088
            .saturating_add(Weight::from_ref_time(195_095_009 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(91_714_000 as u64)
            // Standard Error: 62_025
            .saturating_add(Weight::from_ref_time(203_635_854 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_random(r: u32, ) -> Weight {
        Weight::from_ref_time(92_024_000 as u64)
            // Standard Error: 94_642
            .saturating_add(Weight::from_ref_time(309_140_494 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(92_215_000 as u64)
            // Standard Error: 112_644
            .saturating_add(Weight::from_ref_time(239_709_361 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(93_397_000 as u64)
            // Standard Error: 127_514
            .saturating_add(Weight::from_ref_time(494_803_166 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(609_529_000 as u64)
            // Standard Error: 97_856
            .saturating_add(Weight::from_ref_time(18_963_293 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(92_235_000 as u64)
            // Standard Error: 87_253
            .saturating_add(Weight::from_ref_time(329_805_731 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(451_443_000 as u64)
            // Standard Error: 5_685
            .saturating_add(Weight::from_ref_time(15_180_677 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(92_154_000 as u64)
            // Standard Error: 91_217
            .saturating_add(Weight::from_ref_time(243_673_111 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(92_064_000 as u64)
            // Standard Error: 80_196
            .saturating_add(Weight::from_ref_time(245_742_700 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(325_571_000 as u64)
            // Standard Error: 97_513
            .saturating_add(Weight::from_ref_time(19_096_413 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(92_175_000 as u64)
            // Standard Error: 86_769
            .saturating_add(Weight::from_ref_time(228_242_932 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(91_183_000 as u64)
            // Standard Error: 76_027
            .saturating_add(Weight::from_ref_time(238_411_487 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 1024]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(317_515_000 as u64)
            // Standard Error: 6_150
            .saturating_add(Weight::from_ref_time(26_321_851 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_exit_code(r: u32, ) -> Weight {
        Weight::from_ref_time(92_014_000 as u64)
            // Standard Error: 99_174
            .saturating_add(Weight::from_ref_time(227_431_755 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(91_132_000 as u64)
            // Standard Error: 321_792
            .saturating_add(Weight::from_ref_time(41_207_800 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(90_722_000 as u64)
            // Standard Error: 256_383
            .saturating_add(Weight::from_ref_time(17_079_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(90_882_000 as u64)
            // Standard Error: 242_678
            .saturating_add(Weight::from_ref_time(16_713_099 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(91_403_000 as u64)
            // Standard Error: 330_437
            .saturating_add(Weight::from_ref_time(21_163_400 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        Weight::from_ref_time(91_353_000 as u64)
            // Standard Error: 288_205
            .saturating_add(Weight::from_ref_time(17_693_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(92_265_000 as u64)
            // Standard Error: 98_285
            .saturating_add(Weight::from_ref_time(273_564_872 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(108_998_000 as u64)
            // Standard Error: 86_097
            .saturating_add(Weight::from_ref_time(406_880_205 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 1024]`.
    /// The range of component `s` is `[0, 1024]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(16_120_973_000 as u64)
            // Standard Error: 158_460
            .saturating_add(Weight::from_ref_time(5_271_866 as u64).saturating_mul(p as u64))
            // Standard Error: 158_460
            .saturating_add(Weight::from_ref_time(220_838_549 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(257 as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(3_286_000 as u64)
            // Standard Error: 224
            .saturating_add(Weight::from_ref_time(4_895 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(5_701_000 as u64)
            // Standard Error: 14_890
            .saturating_add(Weight::from_ref_time(734_945 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(5_632_000 as u64)
            // Standard Error: 25_190
            .saturating_add(Weight::from_ref_time(1_286_796 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(3_246_000 as u64)
            // Standard Error: 268
            .saturating_add(Weight::from_ref_time(613_403 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_357_000 as u64)
            // Standard Error: 224
            .saturating_add(Weight::from_ref_time(617_504 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(3_206_000 as u64)
            // Standard Error: 312
            .saturating_add(Weight::from_ref_time(488_665 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_257_000 as u64)
            // Standard Error: 300
            .saturating_add(Weight::from_ref_time(529_225 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(3_217_000 as u64)
            // Standard Error: 859
            .saturating_add(Weight::from_ref_time(1_594_959 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(4_589_000 as u64)
            // Standard Error: 45
            .saturating_add(Weight::from_ref_time(8_063 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(3_397_000 as u64)
            // Standard Error: 525
            .saturating_add(Weight::from_ref_time(651_696 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(3_928_000 as u64)
            // Standard Error: 726
            .saturating_add(Weight::from_ref_time(1_497_407 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(5_471_000 as u64)
            // Standard Error: 162
            .saturating_add(Weight::from_ref_time(73_872 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(3_326_000 as u64)
            // Standard Error: 204
            .saturating_add(Weight::from_ref_time(30_535 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(3_337_000 as u64)
            // Standard Error: 335
            .saturating_add(Weight::from_ref_time(58_848 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(3_397_000 as u64)
            // Standard Error: 327
            .saturating_add(Weight::from_ref_time(57_058 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(15_731_000 as u64)
            // Standard Error: 415
            .saturating_add(Weight::from_ref_time(43_827 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(11_763_000 as u64)
            // Standard Error: 2_722
            .saturating_add(Weight::from_ref_time(189_410 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(5_070_000 as u64)
            // Standard Error: 860
            .saturating_add(Weight::from_ref_time(1_298_599 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_337_000 as u64)
            // Standard Error: 345
            .saturating_add(Weight::from_ref_time(765_480 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_237_000 as u64)
            // Standard Error: 302
            .saturating_add(Weight::from_ref_time(738_003 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(3_216_000 as u64)
            // Standard Error: 260
            .saturating_add(Weight::from_ref_time(50_541 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_267_000 as u64)
            // Standard Error: 375
            .saturating_add(Weight::from_ref_time(105_393 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_177_000 as u64)
            // Standard Error: 269
            .saturating_add(Weight::from_ref_time(37_335 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_227_000 as u64)
            // Standard Error: 235
            .saturating_add(Weight::from_ref_time(26_349 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(3_287_000 as u64)
            // Standard Error: 223
            .saturating_add(Weight::from_ref_time(25_882 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(3_236_000 as u64)
            // Standard Error: 419
            .saturating_add(Weight::from_ref_time(107_003 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(3_247_000 as u64)
            // Standard Error: 358
            .saturating_add(Weight::from_ref_time(106_918 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_226_000 as u64)
            // Standard Error: 389
            .saturating_add(Weight::from_ref_time(105_418 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_266_000 as u64)
            // Standard Error: 307
            .saturating_add(Weight::from_ref_time(102_564 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_277_000 as u64)
            // Standard Error: 344
            .saturating_add(Weight::from_ref_time(104_146 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_177_000 as u64)
            // Standard Error: 367
            .saturating_add(Weight::from_ref_time(106_401 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(3_207_000 as u64)
            // Standard Error: 373
            .saturating_add(Weight::from_ref_time(105_279 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_226_000 as u64)
            // Standard Error: 342
            .saturating_add(Weight::from_ref_time(105_190 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(3_257_000 as u64)
            // Standard Error: 353
            .saturating_add(Weight::from_ref_time(102_869 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_257_000 as u64)
            // Standard Error: 349
            .saturating_add(Weight::from_ref_time(102_796 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(3_207_000 as u64)
            // Standard Error: 346
            .saturating_add(Weight::from_ref_time(88_457 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(3_256_000 as u64)
            // Standard Error: 346
            .saturating_add(Weight::from_ref_time(87_599 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(3_216_000 as u64)
            // Standard Error: 377
            .saturating_add(Weight::from_ref_time(118_239 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_207_000 as u64)
            // Standard Error: 417
            .saturating_add(Weight::from_ref_time(459_325 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_226_000 as u64)
            // Standard Error: 339
            .saturating_add(Weight::from_ref_time(457_853 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(3_267_000 as u64)
            // Standard Error: 631
            .saturating_add(Weight::from_ref_time(827_360 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_156_000 as u64)
            // Standard Error: 428
            .saturating_add(Weight::from_ref_time(457_984 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(3_177_000 as u64)
            // Standard Error: 355
            .saturating_add(Weight::from_ref_time(90_631 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(3_236_000 as u64)
            // Standard Error: 352
            .saturating_add(Weight::from_ref_time(88_461 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(3_246_000 as u64)
            // Standard Error: 320
            .saturating_add(Weight::from_ref_time(87_694 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_216_000 as u64)
            // Standard Error: 329
            .saturating_add(Weight::from_ref_time(80_483 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_216_000 as u64)
            // Standard Error: 312
            .saturating_add(Weight::from_ref_time(83_020 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(3_156_000 as u64)
            // Standard Error: 374
            .saturating_add(Weight::from_ref_time(85_029 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_177_000 as u64)
            // Standard Error: 359
            .saturating_add(Weight::from_ref_time(84_145 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(3_206_000 as u64)
            // Standard Error: 336
            .saturating_add(Weight::from_ref_time(83_871 as u64).saturating_mul(r as u64))
    }
}
